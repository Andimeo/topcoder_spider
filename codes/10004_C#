<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Text;<br>using System.Text.RegularExpressions;<br>using System.Collections;<br>using System.Collections.Generic;<br><br>public class MazeReconstruction {<br>    const int SOUTH = 0, WEST = 1, NORTH = 2, EAST = 3;<br>    const int WALL = 0, PASSABLE = 1;<br>    public string[] mazeMap(string moves) {<br>        int[,] map = new int[150, 150];<br>        int x = 50, y = 50;<br>        int dir = SOUTH;<br><br>        for (int i = 0; i &lt; 150; ++i)<br>            for (int j = 0; j &lt; 150; ++j)<br>                map[i, j] = WALL;<br><br>        map[x, y] = PASSABLE;<br>        int minx = x, miny = y, maxx = x, maxy = y;<br>        int[] dx = { 0, -1, 0, 1 };<br>        int[] dy = { 1, 0, -1, 0 };<br>        foreach (char c in moves)<br>        {<br>            if (c == 'L')<br>                dir--;<br>            else if (c == 'R')<br>                dir++;<br>            else if (c == 'F')<br>            {<br>                x += dx[dir];<br>                y += dy[dir];<br>                minx = Math.Min(minx, x);<br>                miny = Math.Min(miny, y);<br>                maxx = Math.Max(maxx, x);<br>                maxy = Math.Max(maxy, y);<br>                map[x, y] = PASSABLE;<br>            }<br>            if (dir &lt; 0 || dir &gt; 3)<br>                dir = (dir + 4) % 4;<br>        }<br><br>        int px = minx, py = miny, sx = maxx - minx + 1, sy = maxy - miny + 1;<br>        string[] res = new string[sy];<br>        for (int i = 0; i &lt; sy; ++i)<br>        {<br>            res[i] = "";<br>            for (int j = 0; j &lt; sx; ++j)<br>                if (map[px + j, py + i] == PASSABLE)<br>                    res[i] += '.';<br>                else<br>                    res[i] += '#';<br>        }<br>        return res;<br>    }<br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by CodeProcessor<br></td>