<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;iostream&gt;<br>#include &lt;fstream&gt;<br>#include &lt;sstream&gt;<br>#include &lt;vector&gt;<br>#include &lt;map&gt;<br>#include &lt;queue&gt;<br>#include &lt;set&gt;<br>#include &lt;stack&gt;<br>#include &lt;list&gt;<br>#include &lt;string&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;functional&gt;<br>#include &lt;utility&gt;<br>#include &lt;cassert&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cstdio&gt;<br><br>using namespace std;<br><br>typedef long long ll;<br>typedef vector&lt;int&gt; vi;<br>typedef vector&lt;string&gt; vs;<br>typedef pair&lt;int,int&gt; pii;<br>#define pb push_back<br>#define MP make_pair<br>#define For(a,b,c) for(typeof(b)a=(b); a&lt;(c); ++a)<br>#define ALL(a) (a).begin(),(a).end()<br>#define DBG(a) cout &lt;&lt; #a &lt;&lt; ": " &lt;&lt; a &lt;&lt; endl<br>#define FORE(i, v) for(typeof(v.begin()) i = v.begin(); i != v.end(); ++i)<br><br>struct MazeReconstruction<br>{<br>  vs mazeMap(string moves)<br>  {<br>    char grid[110][110] = {0};<br>    int sr = 50, sc = 50;<br>    int mr, Mr, mc, Mc;<br>    mr = mc = INT_MAX;<br>    Mr = Mc = -1;<br>    <br>    int dr[4] = {0,-1,0,1};<br>    int dc[4] = {1,0,-1,0};<br>    int sd = 3;<br>    moves += "|";<br>    for (int i = 0; i &lt; moves.size(); i++) {<br>      grid[sr][sc] = '.';<br>      mr &lt;?= sr, Mr &gt;?= sr;<br>      mc &lt;?= sc, Mc &gt;?= sc;<br>      switch (moves[i])<br>      {<br>        case 'L': sd = (sd + 1) % 4; break;<br>        case 'R': sd = (sd + 3) % 4; break;<br>        case 'F': sr += dr[sd], sc += dc[sd]; break;<br>      }<br>    }<br>    <br>    vs ret;<br>    For (i, mr, Mr+1)<br>    {<br>      string row;<br>      For (j, mc, Mc+1)<br>      {<br>        if (grid[i][j] == '.') row += '.';<br>        else row += '#';<br>      }<br>      ret.pb(row);<br>    }<br>    return ret;<br>  }<br>};<br></td>