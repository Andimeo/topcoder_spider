<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections.Generic;<br><br>public class MazeWandering {<br>  public double expectedTime(string[] maze) {<br>        int height = maze.Length;<br>        int width = maze[0].Length;<br>        bool[,] empty = new bool[height, width];<br>        int cRow = -1;<br>        int cCol = -1;<br>        int numEmpty = 0;<br>        for (int row = 0; row &lt; height; ++row)<br>            for (int col = 0; col &lt; width; ++col)<br>                switch (maze[row][col])<br>                {<br>                    case '.':<br>                        empty[row, col] = true;<br>                        break;<br><br>                    case '*':<br>                        empty[row, col] = true;<br>                        cRow = row;<br>                        cCol = col;<br>                        break;<br>                }<br>        double answer = 0.0;<br>        dfs(cRow, cCol, cRow, cCol, -1, -1, height, width, empty, ref answer, ref numEmpty);<br>        return answer / numEmpty;<br>  }<br><br>    private double dfs(int row, int col, int cRow, int cCol, int pRow, int pCol, int height, int width, bool[,] empty, ref double answer, ref int numEmpty)<br>    {<br>        int curSize = 1;<br>        List&lt;double&gt; children = new List&lt;double&gt;();<br>        for (int nRow = row - 1; nRow &lt;= row + 1; ++nRow)<br>            for (int nCol = col - 1; nCol &lt;= col + 1; ++nCol)<br>                if (Math.Abs(nRow - row) + Math.Abs(nCol - col) == 1 &amp;&amp; nRow &gt;= 0 &amp;&amp; nRow &lt; height &amp;&amp; nCol &gt;= 0 &amp;&amp; nCol &lt; width &amp;&amp; empty[nRow, nCol] &amp;&amp; (nRow != pRow || nCol != pCol))<br>                {<br>                    double value = dfs(nRow, nCol, cRow, cCol, row, col, height, width, empty, ref answer, ref curSize);<br>                    children.Add(value);<br>                }<br>        numEmpty += curSize;<br>        if (row != cRow || col != cCol)<br>        {<br>            double curEstimate;<br>            if (children.Count == 0)<br>            {<br>                curEstimate = 1.0;<br>            }<br>            else<br>            {<br>                double averageChild = 0.0;<br>                foreach (double x in children)<br>                    averageChild += x;<br>                averageChild /= children.Count;<br>                curEstimate = 1.0 + (averageChild + 1) * children.Count;<br>            }<br>            answer += curEstimate * curSize;<br>            return curEstimate;<br>        }<br>        else<br>        {<br>            return 0.0;<br>        }<br>    }<br><br><br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003] [modified for C# by Petr]<br>// Powered by CodeProcessor<br></td>