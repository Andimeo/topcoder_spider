<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;cassert&gt;<br>#include &lt;cctype&gt;<br>#include &lt;cfloat&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdarg&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cstring&gt;<br><br>#include &lt;sys/resource.h&gt;<br>#include &lt;sys/time.h&gt;<br>#include &lt;unistd.h&gt;<br><br>#include &lt;algorithm&gt;<br>#include &lt;bitset&gt;<br>#include &lt;complex&gt;<br>#include &lt;deque&gt;<br>#include &lt;functional&gt;<br>#include &lt;iostream&gt;<br>#include &lt;iomanip&gt;<br>#include &lt;iterator&gt;<br>#include &lt;limits&gt;<br>#include &lt;list&gt;<br>#include &lt;map&gt;<br>#include &lt;memory&gt;<br>#include &lt;new&gt;<br>#include &lt;numeric&gt;<br>#include &lt;queue&gt;<br>#include &lt;set&gt;<br>#include &lt;sstream&gt;<br>#include &lt;stack&gt;<br>#include &lt;string&gt;<br>#include &lt;utility&gt;<br>#include &lt;valarray&gt;<br>#include &lt;vector&gt;<br><br>#include &lt;ext/algorithm&gt;<br>#include &lt;ext/hash_map&gt;<br>#include &lt;ext/hash_set&gt;<br>#include &lt;ext/numeric&gt;<br><br>using namespace std;<br>using namespace __gnu_cxx;<br><br>template&lt;class T, class V&gt;<br>vector&lt;T&gt; operator,(vector&lt;T&gt; v, V t) {<br>    v.push_back(t);<br>    return v;<br>}<br><br>#define FORI(p, x) for (int i = p; i &lt; (int)(x); ++i)<br>#define FORJ(p, x) for (int j = p; j &lt; (int)(x); ++j)<br>#define FORK(p, x) for (int k = p; k &lt; (int)(x); ++k)<br>#define X first<br>#define S size()<br><br>#define VD vector&lt;double&gt;<br>#define VVD vector&lt;vector&lt;double&gt; &gt;<br>#define PI pair&lt;int,int&gt;<br><br>struct MazeWandering{<br>    double expectedTime(vector &lt;string&gt; maze);<br>};<br><br>int dx[] = {0,1,0,-1};<br>int dy[] = {1,0,-1,0};<br><br>double MazeWandering::expectedTime(vector &lt;string&gt; maze) {<br>    map&lt;PI, int&gt; ids;<br>    int next_id = 0;<br>    FORI (0, maze.S) FORJ (0, maze[i].S) if (maze[i][j] != 'X') ids[PI(i, j)] = next_id++;<br><br>    VVD vvd(next_id, VD(next_id, 0));<br>    VD vd(next_id, 0);<br><br>    FORI (0, maze.S) FORJ (0, maze[i].S) {<br>        if (maze[i][j] == 'X') continue;<br>        int id = ids[PI(i,j)];<br>        if (maze[i][j] == '*') {<br>            vvd[id][id] = 1;<br>            vd[id] = 0;<br>            continue;<br>        }<br>        double ngh = 0;<br>        FORK (0, 4) {<br>            PI npi(i + dx[k], j + dy[k]);<br>            if (ids.count(npi)) ++ngh;<br>        }<br><br>        FORK (0, 4) {<br>            PI npi(i + dx[k], j + dy[k]);<br>            if (!ids.count(npi)) continue;<br>            int nid = ids[npi];<br>            vvd[id][nid] = 1.0 / ngh;<br>        }<br>        vvd[id][id] = -1.0;<br>        vd[id] = -1;<br>    }<br>    double res = 0;<br>    FORI (0, next_id) {<br>        FORJ (i + 1, next_id) vvd[i][j] /= vvd[i][i];<br>        vd[i] /= vvd[i][i];<br>        vvd[i][i] = 1.0;<br><br>        FORJ (0, next_id) if (i != j &amp;&amp; vvd[j][i]) {<br>            double c = vvd[j][i];<br>            FORK (i, next_id) {<br>                vvd[j][k] -= c * vvd[i][k];<br>            }<br>            vd[j] -= c * vd[i];<br>        }<br>    }<br><br>    FORI (0, next_id) res += vd[i];<br><br>    return res / next_id;<br>}<br>// Powered by Krzysan's Cleaner 1.4-6a<br><br><br>// Powered by FileEdit<br>// Powered by moj 4.1 [modified TZTester]<br>// Powered by CodeProcessor<br></td>