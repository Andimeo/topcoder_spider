<td class="problemText" colspan="8" valign="middle" align="left">
            import java.io.*;<br>import java.util.*;<br><br>public class MazeWandering {<br>  char[][] f;<br>  boolean[][] mark;<br>  boolean[][] mark2;<br>  double[][] exp;<br>  int hei, wid, ci, cj;<br>  double answer = 0;<br>  int cells = 0;<br>  int[] dx = new int[]{1, 0, -1, 0};<br>  int[] dy = new int[]{0, 1, 0, -1};<br>  <br>  public double expectedTime(String[] maze) {<br>    hei = maze.length;<br>    wid = maze[0].length();<br>    f = new char[hei][];<br>    mark = new boolean[hei][wid];<br>    mark2 = new boolean[hei][wid];<br>    exp = new double[hei][wid];<br>    for (int i = 0; i &lt; hei; i++) {<br>      f[i] = maze[i].toCharArray();<br>      for (int j = 0; j &lt; wid; j++) {<br>        if (f[i][j] == '*') {<br>          ci = i;<br>          cj = j;<br>        }<br>      }<br>    }<br>    dfs(ci, cj);<br>    dfs2(ci, cj, 0);<br>    return answer / cells;<br>  }<br><br>  private void dfs(int i, int j) {<br>    mark[i][j] = true;<br>    int kids = 0;<br>    double sum = 0;<br>    for (int d = 0; d &lt; 4; d++) {<br>      int ii = i + dx[d];<br>      int jj = j + dy[d];<br>      if (ii &lt; 0 || jj &lt; 0 || ii &gt;= hei || jj &gt;= wid)<br>        continue;<br>      if (f[ii][jj] == 'X')<br>        continue;<br>      if (mark[ii][jj])<br>        continue;<br>      dfs(ii, jj);<br>      kids++;<br>      sum += exp[ii][jj];<br>    }<br>    if (kids == 0) {<br>      exp[i][j] = 1;<br>    } else {<br>      exp[i][j] = 1 + kids + sum;<br>    }<br>    if (f[i][j] == '*')<br>      exp[i][j] = 0;<br>  }<br>  <br>  private void dfs2(int i, int j, double e) {<br>    mark2[i][j] = true;<br>    cells++;<br>    answer += exp[i][j] + e;<br>    for (int d = 0; d &lt; 4; d++) {<br>      int ii = i + dx[d];<br>      int jj = j + dy[d];<br>      if (ii &lt; 0 || jj &lt; 0 || ii &gt;= hei || jj &gt;= wid)<br>        continue;<br>      if (f[ii][jj] == 'X')<br>        continue;<br>      if (mark2[ii][jj])<br>        continue;<br>      dfs2(ii, jj, exp[i][j] + e);<br>    }<br>  }<br>  public static void main(String[] args) {<br>    new MazeWandering().expectedTime(new String[]{"*.."});<br>  }<br>}<br></td>