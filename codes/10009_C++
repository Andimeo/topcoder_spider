<td class="problemText" colspan="8" valign="middle" align="left">
            #include&lt;ctime&gt;<br>#include&lt;string&gt;<br>#include&lt;vector&gt;<br>#include&lt;sstream&gt;<br>#include&lt;iostream&gt;<br>#include&lt;algorithm&gt;<br>#include&lt;queue&gt;<br>#include&lt;set&gt;<br>#include&lt;map&gt;<br>#include&lt;cmath&gt;<br>#include&lt;locale&gt;<br>using namespace std;<br>#define sz(a) (int((a).size()))<br>#define all(x) (x).begin(),(x).end()<br>map&lt;string,long long&gt; vals;<br><br>struct MakingPotions<br>{<br>    int getCost(vector &lt;string&gt; goods, vector &lt;int&gt; cost, vector &lt;string&gt; rec)<br>    {<br>        vals.clear();<br>        for(int i=0;i&lt;sz(cost);i++) vals[goods[i]]=cost[i];<br>        int run=4000; istringstream is; string left, right; int quan;<br>        for(int i=0;i&lt;sz(rec);i++) for(int j=0;j&lt;sz(rec[i]);j++) if(rec[i][j]=='=' || rec[i][j]=='+') rec[i][j]=' ';<br>        while(run--)<br>        {<br>            for(int i=0;i&lt;sz(rec);i++)<br>            {<br>                is.clear(); is.str(rec[i]);<br>                is&gt;&gt;left; long long ncost=0;<br>                while(is&gt;&gt;quan&gt;&gt;right)<br>                {<br>                    if(vals.count(right)==0)<br>                    {<br>                        ncost=-1; break;<br>                    }<br>                    ncost+=1LL*quan*vals[right];<br>                    if(ncost&gt;1000000000)<br>                    {<br>                        ncost=1000000001;<br>                        break;<br>                    }<br>                }<br>                if(ncost!=-1)<br>                {<br>                    long long cur=1000000002;<br>                    if(vals.count(left)) cur=vals[left];<br><br>                    vals[left]=min(cur,ncost);<br>                }<br>               // cout&lt;&lt;left&lt;&lt;' '&lt;&lt;ncost&lt;&lt;endl;<br>            }<br>        }<br>        if(vals.count("LOVE")) return vals["LOVE"];<br>        return -1;<br>    }<br>};<br><br><br>// Powered by FileEdit<br>// Powered by moj 4.1 [modified TZTester]<br>// Powered by CodeProcessor<br></td>