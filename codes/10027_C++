<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;vector&gt;<br>#include &lt;list&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;queue&gt;<br>#include &lt;deque&gt;<br>#include &lt;stack&gt;<br>#include &lt;bitset&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;functional&gt;<br>#include &lt;numeric&gt;<br>#include &lt;utility&gt;<br>#include &lt;sstream&gt;<br>#include &lt;iostream&gt;<br>#include &lt;iomanip&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;ctime&gt;<br> <br>using namespace std;<br> <br>int n;<br>vector &lt; pair&lt;int,double&gt; &gt; g[50];<br>int p[2500];<br>bool u[50];<br> <br>double EPS = 1E-10;<br> <br>bool try_kuhn (int v, double gr) {<br>  if (u[v])  return false;<br>  u[v] = true;<br>  for (size_t i=0; i&lt;g[v].size(); ++i)<br>    if (g[v][i].second &lt;= gr + EPS) {<br>      int to = g[v][i].first;<br>      if (p[to] == -1 || try_kuhn (p[to], gr)) {<br>        p[to] = v;<br>        return true;<br>      }<br>    }<br>  return false;<br>}<br> <br>bool u1[50];<br> <br>bool matching (double gr) {<br>  memset (p, -1, sizeof p);<br>  memset (u1, 0, sizeof u1);<br>  for (int i=0; i&lt;n; ++i)<br>    for (size_t j=0; j&lt;g[i].size(); ++j) {<br>      int to = g[i][j].first;<br>      if (g[i][j].second &lt;= gr + EPS) {<br>        if (p[to] == -1) {<br>          p[to] = i;<br>          u1[i] = true;<br>          break;<br>        }<br>      }<br>    }<br>  for (int i=0; i&lt;n; ++i) {<br>    if (u1[i])  continue;<br>    memset (u, 0, sizeof u);<br>    if (!try_kuhn (i, gr))<br>      return false;<br>  }<br>  return true;<br>}<br> <br>double sqr (double a) {<br>  return a * a;<br>}<br> <br>double dist (int ax, int ay, int bx, int by) {<br>  return sqrt  (sqr(ax-bx) + sqr(ay-by));<br>}<br> <br>class FeudaliasWar {<br>public:<br>  double getMinimumTime(vector &lt;int&gt; baseX, vector &lt;int&gt; baseY, vector &lt;int&gt; siloX, vector &lt;int&gt; siloY, int takeOffTime, int rechargeTime, int missileSpeed) {<br>    n = (int) baseX.size();<br>    int m = (int) siloX.size();<br>    int tm = 0;<br>    for (int i=0; i&lt;n; ++i) {<br>      for (int j=0; j&lt;n; ++j)<br>        for (int to=0; to&lt;m; ++to) {<br>          double cur = dist (baseX[j], baseY[j], siloX[to], siloY[to]) / missileSpeed * 60 + tm + takeOffTime;<br>          int to_v = i * m + to;<br>          g[j].push_back (make_pair (to_v, cur));<br>          cerr &lt;&lt; j+1 &lt;&lt; ' ' &lt;&lt; to+1 &lt;&lt; ' ' &lt;&lt; cur &lt;&lt; endl;<br>        }<br>      tm += takeOffTime + rechargeTime * 60;<br>    }<br>    <br>    double l = 0,  r = 1E9;<br>    for (int i=0; i&lt;150; ++i) {<br>      double mid = (l + r) / 2;<br>      if (matching (mid))<br>        r = mid;<br>      else<br>        l = mid;<br>    }<br>    return (l + r) / 2 / 60;<br>  }<br>};<br> <br> <br> <br>//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!<br></td>