<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>import java.util.regex.*;<br>import java.text.*;<br>import java.math.*;<br>import java.awt.geom.*;<br> <br>public class WordsPuzzle<br>{<br>  public int countSecretWords(String mainWord, String[] secretWords, String[] optionalWords)<br>  {<br>    String newWord;<br>    int maxScore = score(mainWord, secretWords);<br>    for(int i=0;i&lt;mainWord.length();i++){<br>      for(int j=i+1;j&lt;mainWord.length();j++){<br>        for(int k=0;k&lt;optionalWords.length;k++){<br>          for(int l=0;l&lt;optionalWords.length;l++){<br>            if(k!=l){<br>              newWord = mainWord.substring(0,i)+optionalWords[k]+mainWord.substring(i+1,j)+optionalWords[l]+mainWord.substring(j+1);<br>              if(score(newWord, secretWords)&gt;maxScore) maxScore = score(newWord,secretWords);<br>            }<br>          }<br>          <br>        }<br>      }<br>    }<br>    <br>    for(int i=0;i&lt;mainWord.length();i++){<br>      for(int k=0;k&lt;optionalWords.length;k++){<br>        newWord = mainWord.substring(0,i)+optionalWords[k]+mainWord.substring(i+1);<br>        if(score(newWord, secretWords)&gt;maxScore) maxScore = score(newWord,secretWords);<br>      }<br>    }<br>    <br>    return maxScore;<br>  }<br>  <br>  <br>  public int score(String word, String[] sWords){<br>    int tot = 0;<br>    for(int i=0;i&lt;sWords.length;i++) if(word.indexOf(sWords[i])!=-1) tot++;<br>    return tot;<br>  }<br>  <br>  <br>}<br>//Powered by [KawigiEdit] 2.0!<br></td>