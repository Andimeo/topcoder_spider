<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;iostream&gt;<br>#include &lt;fstream&gt;<br>#include &lt;sstream&gt;<br>#include &lt;vector&gt;<br>#include &lt;map&gt;<br>#include &lt;queue&gt;<br>#include &lt;set&gt;<br>#include &lt;stack&gt;<br>#include &lt;list&gt;<br>#include &lt;string&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;functional&gt;<br>#include &lt;utility&gt;<br>#include &lt;cassert&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cstdio&gt;<br><br>using namespace std;<br><br>typedef long long ll;<br>typedef vector&lt;int&gt; vi;<br>typedef vector&lt;string&gt; vs;<br>typedef pair&lt;int,int&gt; pii;<br>#define pb push_back<br>#define MP make_pair<br>#define For(a,b,c) for(typeof(b)a=(b); a&lt;(c); ++a)<br>#define ALL(a) (a).begin(),(a).end()<br>#define DBG(a) cout &lt;&lt; #a &lt;&lt; ": " &lt;&lt; a &lt;&lt; endl<br>#define FORE(i, v) for(typeof(v.begin()) i = v.begin(); i != v.end(); ++i)<br><br>int m;<br>int rank[8];<br><br>bool comp(const string&amp; a, const string&amp; b) <br>{<br>  For (i, 0, m)<br>    if (a[rank[i]] &lt; b[rank[i]])<br>      return true;<br>    else if (a[rank[i]] &gt; b[rank[i]])<br>      return false;<br>  return false;<br>}<br><br>struct LostSortingAlgorithm<br>{<br>  string recoverSortingAlgorithm(vs clues)<br>  {<br>    m = clues[0].size();<br>    string ans;<br>    For (i, 0, m) rank[i] = i;<br>    do<br>    {<br>      vs clue2 = clues;<br>      sort(ALL(clue2), comp);<br>      if (clue2 == clues)<br>      {<br>        if (ans != "") return "TOO MANY";<br>        For (i, 0, m)<br>          ans += rank[i] + '0';<br>      }<br>    }<br>    while (next_permutation(rank, rank+m));<br>    <br>    return ans == "" ? "IMPOSSIBLE" : ans;<br>  }<br>};<br></td>