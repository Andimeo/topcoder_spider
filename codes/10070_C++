<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;stdio.h&gt;<br>#include &lt;stdlib.h&gt;<br>#include &lt;vector&gt;<br>#include &lt;set&gt;<br>#include &lt;string&gt;<br>#include &lt;iostream&gt;<br>#include &lt;cmath&gt;<br><br>using namespace std;<br><br><br>class EnemyTowers<br>{<br>  private:<br>    int attack_single(int myUnits, int hpT, int attackT, int numTower) {<br>      int total_hpT = hpT*numTower;<br>      int turns = 1;<br>      for( ;; ) {<br>        total_hpT -= myUnits;<br>        if( total_hpT &lt;= 0 ) return turns;<br>        numTower = ( total_hpT - 1 )/hpT + 1;<br>        myUnits -= attackT*numTower;<br>        if( myUnits &lt;= 0 ) return -1;<br>        turns++;<br>      }<br>    }<br>  <br>    public:<br>    int attack(int myUnits, int hpT, int attackT, int numWodT, int numStoT) {<br>    int min_turns = attack_single( myUnits, hpT, attackT, numWodT + numStoT );<br>    if( min_turns &lt; 1 ) return min_turns;<br>    int numWodS, numStoS;<br>    int best_turns = 1000000000;<br>    int numWodS_min = 0;<br>    int numWodS_max = myUnits;<br>    for(;;) {<br>      //cout &lt;&lt; numWodS_min &lt;&lt; " " &lt;&lt; numWodS_max &lt;&lt; endl;<br>      if( numWodS_min &gt; numWodS_max ) break;<br>      numWodS = ( numWodS_max - numWodS_min )/2 + numWodS_min;<br>      numStoS = myUnits - numWodS;<br>      int wt = attack_single( numWodS, hpT, attackT, numWodT );<br>      if( wt &lt; 1 ) {<br>        numWodS_min = numWodS + 1;<br>        continue;<br>      }<br>      int st = attack_single( numStoS, hpT, attackT, numStoT );<br>      if( st &lt; 1 ) {<br>        numWodS_max = numWodS - 1;<br>        continue;<br>      }<br>      //cout &lt;&lt; "Soldiers: " &lt;&lt; numWodS &lt;&lt; " " &lt;&lt; numStoS &lt;&lt; ", turns=" &lt;&lt; wt &lt;&lt; " " &lt;&lt; st &lt;&lt; endl;<br>      int turns = max(wt,st);<br>      if( best_turns &gt; turns ) best_turns = turns;<br>      if( wt == st ) return best_turns;<br>      if( wt &lt; st ) {<br>        numWodS_max = numWodS - 1;<br>      } else {<br>        numWodS_min = numWodS + 1;<br>      }<br>    }<br>    if( best_turns == 1000000000 ) return -1;<br>    return best_turns;<br>    }<br>};<br></td>