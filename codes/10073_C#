<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections;<br>using System.Collections.Generic;<br>using System.Text;<br><br>public class BarracksEasy<br>{<br>    private Dictionary&lt;int, int&gt; sol = null;<br>    private int unitsPerRound;<br>    private int totalBarhp;<br><br>    int best(int myUnits,int barHp,int solds,int turn)<br>    {<br>        if (turn &gt; totalBarhp+1)<br>            return -1;<br>        if (myUnits &lt;= 0)<br>            return -1;<br>        if (barHp &lt;= 0 &amp;&amp; solds &lt;= 0)<br>            return turn;<br>        if (sol.ContainsKey(myUnits + (barHp &lt;&lt; 6) + (solds &lt;&lt; 12)))<br>            return sol[myUnits + (barHp &lt;&lt; 6) + (solds &lt;&lt; 12)];<br>        int bestSol = int.MaxValue;<br>        for (int atbar = myUnits; atbar&gt;=0; atbar--)<br>        {<br>            if (atbar &gt; barHp)<br>                continue;<br>            int nowBarHp =barHp- atbar;<br>            int nowSolds =solds- (myUnits - atbar);<br>            if (nowSolds &lt; 0)<br>                nowSolds = 0;<br>            int nowMyUnits = myUnits - nowSolds;//2<br>            if (nowMyUnits &lt; 0)<br>                nowMyUnits = 0;<br>            if(nowBarHp&gt;0)//3<br>                nowSolds += unitsPerRound;<br>            int res = best(nowMyUnits, nowBarHp, nowSolds, turn + 1);<br>            if (res != -1 &amp;&amp; res &lt; bestSol)<br>                bestSol = res;<br>        }<br>        if (bestSol == int.MaxValue)<br>            bestSol= - 1;<br>        sol[myUnits + (barHp &lt;&lt; 6) + (solds &lt;&lt; 12)] = bestSol;<br>        return bestSol;<br>    }<br><br><br>    public int attack(int myUnits, int barHp, int aunitsPerRound)<br>    {<br>        unitsPerRound = aunitsPerRound;<br>        totalBarhp = barHp;<br>        sol = new Dictionary&lt;int, int&gt;();<br>        return best(myUnits, barHp, 0, 0);<br>    }<br>}<br></td>