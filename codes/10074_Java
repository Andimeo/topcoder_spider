<td class="problemText" colspan="8" valign="middle" align="left">
            public class CakesEqualization {<br><br>    int n;<br>    int m;<br>    int[] w;<br>    double[] d;<br>    <br>    public double fairDivision(int[] weights, int maxCuts) {<br>        n = weights.length;<br>        w = weights;<br>        m = maxCuts;<br><br>        d = new double[n];<br>        for (int i = 0; i &lt; n; i++) d[i] = 1;<br><br><br>        double result = calc();<br><br>        for (int i = 0; i &lt; m; i++) {<br><br>            int k = 0;<br>            for (int j = 0; j &lt; n; j++) {<br>                if (w[k]/d[k] &lt; w[j]/d[j]) {<br>                    k = j;<br>                }<br>            }<br><br>            d[k]++;<br><br>            result = Math.min(result, calc());<br><br>        }<br><br>        return result;<br><br>    }<br><br>    private double calc() {<br>        double min = w[0]/d[0];<br>        double max = w[0]/d[0];<br>        for (int j = 0; j &lt; n; j++) {<br>            min = Math.min(min, w[j]/d[j]);<br>            max = Math.max(max, w[j]/d[j]);<br>        }<br><br>        return max - min;<br>    }<br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by RETester [based on ExampleBuilder]<br>// Powered by CodeProcessor<br></td>