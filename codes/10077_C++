<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;iostream&gt;<br>#include &lt;sstream&gt;<br>#include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;deque&gt;<br>#include &lt;queue&gt;<br>#include &lt;stack&gt;<br>#include &lt;stdio.h&gt;<br>#include &lt;stdlib.h&gt;<br>#include &lt;string.h&gt;<br>#include &lt;math.h&gt;<br>#include &lt;algorithm&gt;<br><br>using namespace std;<br><br>class CactusCount<br>{<br><br>public:<br><br>int dfs_number[220], resp, grau[220], adj[220][220];<br>int dest[220*200], cont,nar;<br>bool opa, pontes[220*220];<br><br>int dfs(int no, int pai){<br>  int mini,w,x;<br>  dfs_number[no] = mini = cont++;<br>  <br>  for(int i = 0; i &lt; grau[no];i++){<br>    w = dest[adj[no][i]];<br>    if(!dfs_number[w]){<br>      x = dfs(w, no);<br>      if(x &lt; mini)<br>        mini = x;<br>      if(x == dfs_number[w]){<br>        pontes[adj[no][i]] = pontes[adj[no][i]^1] = true;<br>      }//else c++;<br>    }else if(dfs_number[w] &lt; mini &amp;&amp; w != pai)<br>      mini = dfs_number[w];<br>  }<br>//  if(c &gt; 2)<br>//    opa = false;<br>//  printf("mini %d %d\n", no, mini);<br>  return mini;<br>}<br>  <br>int countCacti(int n, vector &lt;string&gt; edges)<br>{<br>  string e("");<br>  memset(dfs_number, 0, sizeof(dfs_number));<br>  memset(grau, 0 ,sizeof(grau));<br>  memset(pontes,false,sizeof(pontes));<br>  nar = 0;<br>  <br>  for(int i = 0; i&lt; edges.size();i++)<br>    e += edges[i];<br>    <br>  int i = 0,a = 0,b = 0,c = 0;<br>  while(i &lt; e.size()){<br>    if(e[i] == ' '){<br>      a = c;<br>      c = 0;<br>    }else if(e[i] == ','){<br>      b = c;<br>      c = 0;<br>      adj[a][grau[a]++] = nar;<br>      dest[nar++] = b;<br>      adj[b][grau[b]++] = nar;<br>      dest[nar++] = a;<br>    }else{<br>      c *= 10;<br>      c += e[i]-'0';<br>    }<br>    i++;<br>  }<br>  if(c){<br>    b = c;  <br>    adj[a][grau[a]++] = nar;<br>    dest[nar++] = b;<br>    adj[b][grau[b]++] = nar;<br>    dest[nar++] = a;<br>  }<br>  int temp;<br>  cont = 1;<br>  resp = 0;<br>  for( i = 1; i&lt;= n; i++){<br>    if(!dfs_number[i]){<br>      opa = true;<br>      temp = cont;<br>      dfs(i, i);<br>      for(int i = 1; i&lt;= n;i++){<br>        if(dfs_number[i] &gt; temp){<br>          c = 0;<br>          for(int j = 0; j &lt; grau[i];j++){<br>            if(!pontes[adj[i][j]])<br>              c++;<br>          }<br>          if(c &gt; 2)opa = false;<br>        } <br>      }<br>      if(opa)resp++;<br>    }<br>  }<br>  return resp;<br>}<br><br><br><br>};<br><br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003]<br>// Powered by CodeProcessor<br></td>