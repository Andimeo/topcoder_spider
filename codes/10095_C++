<td class="problemText" colspan="8" valign="middle" align="left">
            #include&lt;ctime&gt;<br>#include&lt;cstdlib&gt;<br>#include&lt;iostream&gt;<br>#include&lt;algorithm&gt;<br>#include&lt;sstream&gt;<br>#include&lt;string&gt;<br>#include&lt;vector&gt;<br>#include&lt;cmath&gt;<br>using namespace std;<br><br>#define FOR(i,a,b) for(int i = (a); i &lt; (b); ++i)<br>#define REP(i,n) FOR(i,0,n)<br>#define FORE(it,x) for(typeof(x.begin()) it=x.begin();it!=x.end();++it)<br>#define pb push_back<br>#define all(x) (x).begin(),(x).end()<br>#define CLEAR(x,with) memset(x,with,sizeof(x))<br>#define sz size()<br>typedef long long ll;<br><br>struct CrazyBot <br>{<br>  bool seen[100][100];<br>  double e, w, s, n;<br>  double go(int y, int x, int steps)<br>  {<br>    if(seen[y][x]) return 0.0;<br>    if(steps == 0) return 1.0;<br>    seen[y][x] = true;<br>    double ret = 0.0;<br>    ret += s * go(y-1, x, steps-1);<br>    ret += n * go(y+1, x, steps-1);<br>    ret += e * go(y, x-1, steps-1);<br>    ret += w * go(y, x+1, steps-1);<br>    seen[y][x] = false;<br>    return ret;<br>  }<br>  double getProbability(int n, int east, int west, int south, int north) <br>  {    <br>    CLEAR(seen,0);<br>    e = east / 100.0;<br>    w = west / 100.0;<br>    this-&gt;n = north / 100.0;<br>    s = south / 100.0;<br>    return go(50, 50, n);<br>  }<br>};<br><br><br><br>// Powered by FileEdit<br>// Powered by moj 4.11 [modified TZTester]<br>// Powered by CodeProcessor<br></td>