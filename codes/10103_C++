<td class="problemText" colspan="8" valign="middle" align="left">
            // unfortunately I have no ideas for a good line here<br><br>#include &lt;algorithm&gt;<br>#include &lt;string&gt;<br>#include &lt;vector&gt;<br>using namespace std;<br><br>#define LS &lt;<br>#define Size(x) (int(x.size()))<br>#define LET(k,val) typeof(val) k = (val)<br>// execute "act", and return "val" as an expression result<br>#define CLC(act,val) (*({act; static typeof(val) CLCR; CLCR = (val); &amp;CLCR;}))<br><br>// All macros with parameters "k,a,b" run the "k" variable in range [a,b)<br>#define FOR(k,a,b) for(typeof(a) k=(a); k LS (b); ++k)<br><br>// Standard mathematical quantifiers, plus tools to implement them<br>// find the first k in [a,b) that satisfies cond, or b if none<br>#define FIRST(k,a,b,cond) CLC(LET(k, a); for(; k LS (b); ++k) if(cond) break, k)<br>#define EXISTS(k,a,b,cond) (FIRST(k,a,b,cond) LS (b))<br>#define FORALL(k,a,b,cond) (!EXISTS(k,a,b,!(cond)))<br><br>#line 3 "ExtendableTriangles.cc"<br><br>    int qout[3];<br>    <br>    int outx[3][500];<br>    int outy[3][500];<br>    <br>    int many[3];<br>    <br>    bool imax[200][200][200];<br><br>int tsize(int a, int b, int c) {<br>  int ax = outx[1][b] - outx[0][a];<br>  int bx = outx[2][c] - outx[0][a];<br>  int ay = outy[1][b] - outy[0][a];<br>  int by = outy[2][c] - outy[0][a];<br>  <br>  int dar = ax*by-ay*bx;<br>  <br>  if(dar &lt; 0) dar = -dar;<br>  <br>//printf("size %d,%d,%d = %d [%d,%d,%d,%d]\n", a,b,c, dar, ax,ay, bx,by);<br>  <br>  return dar;<br>  }<br><br>class ExtendableTriangles {<br>  public:<br>  int getCount(vector &lt;string&gt; grid) {<br>    // !FDI<br>    <br>    int SY = Size(grid);<br>    int SX = Size(grid[0]);<br>    <br>    int tab[60][60];<br>    <br>    FOR(y,0,SY) FOR(x,0,SX) {<br>      char c = grid[y][x];<br>      if(c == 'R') c = 0;<br>      else if(c == 'G') c = 1;<br>      else c = 2;<br>      tab[y][x] = c;<br>      }<br>    <br>    FOR(a,0,3) qout[a] = 0, many[a] = 0;<br>    <br>    FOR(y,0,SY) FOR(x,0,SX) {<br>      int c = tab[y][x];<br>      if(<br>        FORALL(tx, 0,   x,  tab[y][x] != tab[y][tx]) ||<br>        FORALL(tx, x+1, SX, tab[y][x] != tab[y][tx]) ||<br>        FORALL(ty, 0,   y,  tab[y][x] != tab[ty][x]) ||<br>        FORALL(ty, y+1, SY, tab[y][x] != tab[ty][x])<br>        ) {<br>        outx[c][qout[c]] = x;<br>        outy[c][qout[c]] = y;<br>        qout[c]++;<br>        }<br>      many[c]++;<br>      }<br>    <br>    printf("%d,%d,%d\n", qout[0], qout[1], qout[2]);<br>    <br>    FOR(a,0,qout[0]) FOR(b,0,qout[1]) FOR(c,0,qout[2])<br>      imax[a][b][c] = true;<br><br>    FOR(a,0,qout[0]) FOR(b,0,qout[1]) FOR(c,0,qout[2])<br>      imax[a][b][c] = true;<br><br>    FOR(a,0,qout[0]) FOR(b,0,qout[1]) {<br>      int smax = 0;<br>      FOR(c,0,qout[2]) if(tsize(a,b,c) &gt; smax) smax = tsize(a,b,c);<br>      FOR(c,0,qout[2]) if(smax &gt; tsize(a,b,c)) imax[a][b][c] = 0;<br>      }<br>      <br>    FOR(b,0,qout[1]) FOR(c,0,qout[2]) {<br>      int smax = 0;<br>      FOR(a,0,qout[0]) if(tsize(a,b,c) &gt; smax) smax = tsize(a,b,c);<br>      FOR(a,0,qout[0]) if(smax &gt; tsize(a,b,c)) imax[a][b][c] = 0;<br>      }<br>      <br>    FOR(c,0,qout[2]) FOR(a,0,qout[0]) {<br>      int smax = 0;<br>      FOR(b,0,qout[1]) if(tsize(a,b,c) &gt; smax) smax = tsize(a,b,c);<br>      FOR(b,0,qout[1]) if(smax &gt; tsize(a,b,c)) imax[a][b][c] = 0;<br>      }<br>    <br>    int nmax = 0;<br><br>    FOR(a,0,qout[0]) FOR(b,0,qout[1]) FOR(c,0,qout[2])<br>      if(imax[a][b][c]) nmax++;<br>      <br>    return many[0] * many[1] * many[2] - nmax;<br>    }<br>  };<br><br><br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003]<br>// Powered by CodeProcessor<br></td>