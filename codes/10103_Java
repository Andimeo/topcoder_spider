<td class="problemText" colspan="8" valign="middle" align="left">
            import static java.lang.Math.*;<br>import static java.math.BigInteger.*;<br>import static java.util.Arrays.*;<br>import static java.util.Collections.*;<br>import java.math.*;<br>import java.util.*;<br><br>public class ExtendableTriangles {<br>  public int getCount(String[] grid) {<br>    n = grid.length;<br>    m = grid[0].length();<br>    cs = new char[n][];<br>    for (int i = 0; i &lt; n; i++) cs[i] = grid[i].toCharArray();<br>    P[] rs = get(cs, 'R');<br>    P[] gs = get(cs, 'G');<br>    P[] bs = get(cs, 'B');<br>    long res = (long) rs.length * gs.length * bs.length;<br>    rs = convexHull(rs);<br>    gs = convexHull(gs);<br>    bs = convexHull(bs);<br>    int rn = rs.length, gn = gs.length, bn = bs.length;<br>    debug(rn, gn, bn);<br>    res -= (long)rn * gn * bn;<br>    boolean[][][] ok = new boolean[rn][gn][bn];<br>    for (int r = 0; r &lt; rn; r++) {<br>      for (int g = 0; g &lt; gn; g++) {<br>        int max = 0;<br>        for (int b = 0; b &lt; bn; b++) {<br>          max = max(max, area(rs[r], gs[g], bs[b]));<br>        }<br>        for (int b = 0; b &lt; bn; b++) {<br>          if (area(rs[r], gs[g], bs[b]) &lt; max) ok[r][g][b] = true;<br>        }<br>      }<br>    }<br>    for (int b = 0; b &lt; bn; b++) {<br>      for (int r = 0; r &lt; rn; r++) {<br>        int max = 0;<br>        for (int g = 0; g &lt; gn; g++) {<br>          max = max(max, area(rs[r], gs[g], bs[b]));<br>        }<br>        for (int g = 0; g &lt; gn; g++) {<br>          if (area(rs[r], gs[g], bs[b]) &lt; max) ok[r][g][b] = true;<br>        }<br>      }<br>    }<br>    for (int g = 0; g &lt; gn; g++) {<br>      for (int b = 0; b &lt; bn; b++) {<br>        int max = 0;<br>        for (int r = 0; r &lt; rn; r++) {<br>          max = max(max, area(rs[r], gs[g], bs[b]));<br>        }<br>        for (int r = 0; r &lt; rn; r++) {<br>          if (area(rs[r], gs[g], bs[b]) &lt; max) ok[r][g][b] = true;<br>        }<br>      }<br>    }<br>    for (int r = 0; r &lt; rn; r++) {<br>      for (int g = 0; g &lt; gn; g++) {<br>        for (int b = 0; b &lt; bn; b++) {<br>          if (ok[r][g][b]) res++;<br>        }<br>      }<br>    }<br>    debug(res);<br>    return (int)res;<br>  }<br>  char[][] cs;<br>  int n, m;<br>  P[] get(char[][] cs, char c) {<br>    List&lt;P&gt; list = new ArrayList&lt;P&gt;();<br>    for (int i = 0; i &lt; n; i++) {<br>      for (int j = 0; j &lt; m; j++) if (cs[i][j] == c) list.add(new P(i, j));<br>    }<br>    return list.toArray(new P[0]);<br>  }<br>  int area(P p1, P p2, P p3) {<br>    int x1 = p2.x - p1.x, y1 = p2.y - p1.y;<br>    int x2 = p3.x - p1.x, y2 = p3.y - p1.y;<br>    int d = x1 * y2 - y1 * x2;<br>    if (d &lt; 0) d = -d;<br>    return d;<br>  }<br>  class P implements Comparable&lt;P&gt; {<br>    int x, y;<br>    P(int x, int y) {<br>      this.x = x;<br>      this.y = y;<br>    }<br>    P add(P p) {<br>      return new P(x + p.x, y + p.y);<br>    }<br>    P sub(P p) {<br>      return new P(x - p.x, y - p.y);<br>    }<br>    int dot(P p) {<br>      return x * p.x + y * p.y;<br>    }<br>    int det(P p) {<br>      return x * p.y - y * p.x;<br>    }<br>    public int compareTo(P o) {<br>      int comp = x - o.x;<br>      if (comp != 0) return comp;<br>      return y - o.y;<br>    }<br>    public String toString() {<br>      return String.format("(%d, %d)", x, y);<br>    }<br>  }<br>  P[] convexHull(P[] ps) {<br>    int n = ps.length, k = 0;<br>    if (n &lt;= 1) return ps;<br>    sort(ps);<br>    P[] qs = new P[n * 2];<br>    for (int i = 0; i &lt; n; qs[k++] = ps[i++]) {<br>      while (k &gt; 1 &amp;&amp; qs[k - 1].sub(qs[k - 2]).det(ps[i].sub(qs[k - 1])) &lt; 0) k--;<br>    }<br>    for (int i = n - 2, t = k; i &gt;= 0; qs[k++] = ps[i--]) {<br>      while (k &gt; t &amp;&amp; qs[k - 1].sub(qs[k - 2]).det(ps[i].sub(qs[k - 1])) &lt; 0) k--;<br>    }<br>    TreeSet&lt;P&gt; set = new TreeSet&lt;P&gt;();<br>    for (int i = 0; i &lt; k - 1; i++) set.add(qs[i]);<br>    return set.toArray(new P[0]);<br>  }<br>  void debug(Object...os) {<br>    System.err.println(deepToString(os));<br>  }<br>}<br></td>