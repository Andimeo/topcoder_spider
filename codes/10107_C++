<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;algorithm&gt;<br>#include &lt;string&gt;<br>#include &lt;set&gt;<br>#include &lt;map&gt;<br>#include &lt;vector&gt;<br>#include &lt;queue&gt;<br>#include &lt;iostream&gt;<br>#include &lt;iterator&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;sstream&gt;<br><br>using namespace std;<br><br>#define FOR(i,a,b) for (int _n(b), i(a); i &lt; _n; i++)<br>#define REP(i,n) FOR(i,0,n)<br>#define FORD(i,a,b) for(int i=(a),_b=(b);i&gt;=_b;--i)<br>#define ALL(c) (c).begin(), (c).end()<br>#define SORT(c) sort(ALL(c))<br>#define INF 1000000000<br>#define X first<br>#define Y second<br>#define pb push_back<br><br><br>class TeamManagement {<br>public:<br>    vector &lt;vector &lt;int&gt; &gt; e;<br>    vector &lt;int&gt; u;<br>    string lo;<br>    int n;<br>    int k;<br>    long long res[64][64][3];<br><br>    void go (int x)<br>    {<br>        u[x] = 1;<br><br>        vector &lt;int&gt; j;<br><br>        REP (i, e[x].size ())<br>        {<br>            int y = e[x][i];<br>            if (!u[y])<br>            {<br>                go(y);<br>                j.pb (y);<br>            }<br>        }<br>        while (j.size ()&lt;3)<br>            j.pb (n);<br><br>        vector &lt;int&gt; nn(3, 51);<br>        REP (i, 3)<br>            if (j[i]==n)<br>                nn[i] = 1;<br>        int y1 = j[0];<br>        int y2 = j[1];<br>        int y3 = j[2];<br><br>        int n1 = nn[0];<br>        int n2 = nn[1];<br>        int n3 = nn[2];<br><br>        REP (c1, n1)<br>        REP (c2, n2)<br>        REP (c3, n3)<br>        {<br>            if (c1+c2+c3&gt;k)<br>                break;<br>            int cc = c1+c2+c3;<br>            res[x][cc][0] += (res[y1][c1][0]+res[y1][c1][2])*<br>                             (res[y2][c2][0]+res[y2][c2][2])*<br>                             (res[y3][c3][0]+res[y3][c3][2]);<br>            if (lo[x]=='Y')<br>            {<br>                res[x][cc+1][2]+=(res[y1][c1][0]+res[y1][c1][1]+res[y1][c1][2])*<br>                                 (res[y2][c2][0]+res[y2][c2][1]+res[y2][c2][2])*<br>                                 (res[y3][c3][0]+res[y3][c3][1]+res[y3][c3][2]);<br>            }<br>            else<br>            {<br>                res[x][cc+1][1]+=(res[y1][c1][0]+res[y1][c1][1])*<br>                                 (res[y2][c2][0]+res[y2][c2][1])*<br>                                 (res[y3][c3][0]+res[y3][c3][1]);<br><br>                res[x][cc+1][2]+=(res[y1][c1][0]+res[y1][c1][1]+res[y1][c1][2])*<br>                                 (res[y2][c2][0]+res[y2][c2][1]+res[y2][c2][2])*<br>                                 (res[y3][c3][0]+res[y3][c3][1]+res[y3][c3][2])<br>                                 -<br>                                 (res[y1][c1][0]+res[y1][c1][1])*<br>                                 (res[y2][c2][0]+res[y2][c2][1])*<br>                                 (res[y3][c3][0]+res[y3][c3][1]);<br>            }<br>        }<br>        /*cout &lt;&lt; "done " &lt;&lt;x &lt;&lt; endl;<br>        REP (j, k+1)<br>        {<br>            cout &lt;&lt; j&lt;&lt;  ": " &lt;&lt; res[x][j][0] &lt;&lt; " "&lt;&lt; res[x][j][1] &lt;&lt; " "&lt;&lt; res[x][j][2] &lt;&lt; endl;<br>        }*/<br>    }<br><br>    vector &lt;double&gt; getDistribution(int N, int K, vector &lt;string&gt; f, string l) {<br>        n = N;<br>        k = K;<br>        e = vector &lt;vector &lt;int&gt; &gt; (N);<br>        lo = l;<br>        REP (i, f.size ())<br>        {<br>            istringstream iss (f[i]);<br>            int x, y;<br>            iss &gt;&gt; x &gt;&gt;y;<br><br><br>            e[x].pb(y);<br>            e[y].pb(x);<br>        }<br><br>        vector &lt;double&gt; r;<br><br>        REP (i, n)<br>        {<br>            u = vector &lt;int&gt; (N);<br>            memset (res, 0, sizeof (res));<br>            res[N][0][0] = 1;<br><br>            go (i);<br>           // cout &lt;&lt;(res[i][K][1]+res[i][K][2]+res[i][K][0]) &lt;&lt; endl;<br><br>            r.pb (((long double)res[i][K][2])/(res[i][K][2]+res[i][K][0]));<br>        }<br>        return r;<br><br>    }<br><br><br>};<br><br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003]<br>// Powered by CodeProcessor<br></td>