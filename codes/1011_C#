<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Text;<br>using System.Text.RegularExpressions;<br>using System.Collections;<br><br>public class Socialize {<br>  class Flood {<br>    public Flood( int r, int c,int d) {<br>      this.r=r;this.c=c;this.d=d;<br>    }<br>    public int r,c,d;<br>  }<br>  int R,C;<br>  int[] dd= new int[] {0,1,0,-1,0};<br>  int[,] flood(int r0, int c0) {<br>    int[,] res= new int[R,C];<br>    for( int r= 0; r != R; r++)<br>      for( int c= 0; c != C; c++)<br>        res[r,c]= -1;<br>    Queue q= new Queue();<br>    q.Enqueue(new Flood(r0,c0,0));<br>    while(q.Count!=0) {<br>      Flood p= (Flood)q.Dequeue();<br>      for( int i= 0; i != 4; i++) {<br>        int r=p.r+dd[i];<br>        int c= p.c+dd[i+1];<br>        res[p.r,p.c]=p.d;<br>        if(r&lt;R&amp;&amp;c&lt;C&amp;&amp;r&gt;=0&amp;&amp;c&gt;=0&amp;&amp;M[r][c]!='#') {<br>          if(res[r,c]==-1||res[r,c]&gt;p.d+1) {<br>            res[r,c]= p.d+1;<br>            q.Enqueue(new Flood(r,c,p.d+1));<br>          }<br>        }<br>      }<br>    }<br>    return res;<br>  }<br>  string[] M;<br>  public int average(string[] m) {<br>    M=m;<br>    R=M.Length;<br>    C= M[0].Length;<br>    int len= 0;<br>    ArrayList pr= new ArrayList();<br>    ArrayList pc= new ArrayList();<br>    for( int r= 0; r != R; r++)<br>      for( int c= 0; c!= C; c++)<br>        if(M[r][c]=='P') {<br>          len++;<br>          pr.Add(r);<br>          pc.Add(c);<br>        }<br>    ArrayList al= new ArrayList();<br>    for( int r= 0; r != R; r++)<br>      for( int c= 0; c!= C; c++) {<br>        if(M[r][c]=='P') {<br>          int[,] d= flood(r,c);<br>          int[] dx= new int[len];<br>          for( int i= 0; i != len; i++) {<br>            dx[i]= d[(int)pr[i],(int)pc[i]];<br>          }<br>          al.Add(dx);<br>        }<br>      }<br>    int res= 0;<br>    double tot= 0;<br>    int cnt= 0;<br>    int[][] D= (int[][])al.ToArray(typeof(int[]));<br>    for( int i= 0; i != len; i++)<br>      for( int j= i+1; j != len; j++)<br>        if(i!=j&amp;&amp;D[i][j] != -1) {<br>          cnt++;<br>          tot+=D[i][j];<br>        }<br>    return (cnt==0)?0:(int)Math.Round(tot/cnt);<br>  }<br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by CodeProcessor<br></td>