<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;iostream&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;set&gt;<br>#include &lt;map&gt;<br>#include &lt;queue&gt;<br>#include &lt;stack&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cctype&gt;<br> <br>using namespace std;<br> <br>const int dirx[]={-1, 0, 1, 0};<br>const int diry[]={0, 1, 0, -1};<br> <br>class Socialize {<br>  <br>  int m, n;<br>  vector&lt;string&gt; map;<br>  int were[100][100];<br>  <br>  int valid (int x, int y)<br>  {<br>    if (x&lt;0 || x&gt;=m) return 0;<br>    if (y&lt;0 || y&gt;=n) return 0;<br>    return 1;<br>  }<br>  <br>  void bfs (int x, int y)<br>  {<br>    queue&lt;int&gt; qx;<br>    queue&lt;int&gt; qy;        <br> <br>    for (int i=0; i&lt;m; i++)<br>    for (int j=0; j&lt;n; j++)<br>    were[i][j]=-1;    <br> <br>    were[x][y]=0;<br>    qx.push(x);<br>    qy.push(y);<br>    while (!qx.empty())<br>    {<br>      x=qx.front(); qx.pop();<br>      y=qy.front(); qy.pop();      <br> <br>      for (int i=0; i&lt;4; i++)<br>      {<br>        int xx=x+dirx[i];<br>        int yy=y+diry[i];<br>        if (valid(xx, yy) &amp;&amp; map[xx][yy]!='#' &amp;&amp; were[xx][yy]==-1)<br>        {<br>          were[xx][yy]=were[x][y]+1;<br>          qx.push(xx);<br>          qy.push(yy);<br>        }<br>      }<br>    }  <br>  }<br>  <br>  public:<br>  int average(vector &lt;string&gt; a) <br>  {<br>    m=a.size();<br>    n=a[0].length();<br>    map=a;<br>    <br>    int sum=0;<br>    int num=0;<br>    <br>    for (int i=0; i&lt;m; i++)<br>    for (int j=0; j&lt;n; j++)<br>    if (map[i][j]=='P')<br>    {<br>      bfs(i, j);<br>      for (int x=0; x&lt;m; x++)<br>      for (int y=0; y&lt;n; y++) if (x!=i || y!=j)<br>      if (map[x][y]=='P' &amp;&amp; were[x][y]!=-1)<br>      {<br>        num++;<br>        sum+=were[x][y];<br>      }<br>    }<br>    <br>    if (num==0) return 0;<br>    return (double) sum / (double) num + 0.5000001;<br>  }<br>};<br> <br>// Powered by PopsEdit<br></td>