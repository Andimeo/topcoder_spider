<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br><br>public class CavePassage {<br>    int[] dist;<br>    int npq;<br>    int[] pq;<br>    int[] pqat;<br><br>  public int minimalTime(int[] travelersWeights, int[] travelersTimes, string[] trustTable, int bridgeStrength) {<br>        int n = travelersWeights.Length;<br>        bool[] okGroup = new bool[1 &lt;&lt; n];<br>        int[] speed = new int[1 &lt;&lt; n];<br>        int[] weight = new int[1 &lt;&lt; n];<br>        for (int i = 0; i &lt; (1 &lt;&lt; n); ++i)<br>        {<br>            okGroup[i] = true;<br>            speed[i] = 0;<br>            weight[i] = 0;<br>            for (int j = 0; j &lt; n; ++j)<br>                if (((i &gt;&gt; j) &amp; 1) != 0)<br>                {<br>                    speed[i] = Math.Max(speed[i], travelersTimes[j]);<br>                    weight[i] += travelersWeights[j];<br>                    int m = 0;<br>                    bool ok = false;<br>                    for (int k = 0; k &lt; n; ++k)<br>                        if (j != k &amp;&amp; (((i &gt;&gt; k) &amp; 1) != 0))<br>                        {<br>                            ++m;<br>                            if (trustTable[j][k] == 'Y')<br>                                ok = true;<br>                        }<br>                    if (m == 0)<br>                        ok = true;<br>                    if (!ok)<br>                    {<br>                        okGroup[i] = false;<br>                    }<br>                }<br>            if (weight[i] &gt; bridgeStrength)<br>                okGroup[i] = false;<br>        }<br>        int ns = (1 &lt;&lt; (n + 1));<br>        dist = new int[ns];<br>        for (int i = 0; i &lt; dist.Length; ++i)<br>            dist[i] = int.MaxValue;<br>        dist[0] = 0;<br>        pq = new int[ns];<br>        pqat = new int[ns];<br>        npq = ns;<br>        for (int i = 0; i &lt; ns; ++i)<br>        {<br>            pq[i] = i;<br>            pqat[i] = i;<br>        }<br>        while (npq &gt; 0)<br>        {<br>            int at = pq[0];<br>            swap(0, npq - 1);<br>            --npq;<br>            norm(0);<br>            if (dist[at] == int.MaxValue)<br>                break;<br>            int set = at &gt;&gt; 1;<br>            int side = at &amp; 1;<br>            if (side == 0)<br>                set = ((1 &lt;&lt; n) - 1) ^ set;<br>            for (int j = set; j &gt; 0; j = (j - 1) &amp; set)<br>            {<br>                if (okGroup[j])<br>                {<br>                    int nxt = at ^ 1 ^ (j &lt;&lt; 1);<br>                    int nd = dist[at] + speed[j];<br>                    if (nd &lt; dist[nxt])<br>                    {<br>                        dist[nxt] = nd;<br>                        norm(pqat[nxt]);<br>                    }<br>                }<br>            }<br>        }<br>        int res = dist[ns - 1];<br>        if (res == int.MaxValue)<br>            return -1;<br>        else<br>            return res;<br>    }<br><br>    private void norm(int p)<br>    {<br>        up(p);<br>        down(p);<br>    }<br><br>    private void down(int p)<br>    {<br>        while (true)<br>        {<br>            int i = p;<br>            if (2 * p + 1 &lt; npq &amp;&amp; dist[pq[2 * p + 1]] &lt; dist[pq[i]]) i = 2 * p + 1;<br>            if (2 * p + 2 &lt; npq &amp;&amp; dist[pq[2 * p + 2]] &lt; dist[pq[i]]) i = 2 * p + 2;<br>            if (i == p)<br>                return;<br>            swap(i, p);<br>            p = i;<br>        }<br>    }<br><br>    private void up(int p)<br>    {<br>        while (p &gt; 0)<br>        {<br>            if (dist[pq[(p - 1) / 2]] &lt;= dist[pq[p]])<br>                return;<br>            swap(p, (p - 1) / 2);<br>            p = (p - 1) / 2;<br>        }<br>    }<br><br>    private void swap(int a, int b)<br>    {<br>        int t = pq[a];<br>        pq[a] = pq[b];<br>        pq[b] = t;<br>        pqat[pq[a]] = a;<br>        pqat[pq[b]] = b;<br>    }<br><br><br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003] [modified for C# by Petr]<br>// Powered by CodeProcessor<br></td>