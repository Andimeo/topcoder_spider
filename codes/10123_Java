<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>import java.math.*;<br>import java.io.*;<br>import java.text.*;<br>import java.util.regex.*;<br>import static java.util.Arrays.*;<br>import static java.lang.Math.*;<br>import static java.lang.Integer.parseInt;<br>public class CavePassage {<br>  public int minimalTime(int[] wts, int[] speeds, String[] trustTable, int maxWt) {<br>    int[] trust = new int[wts.length];<br>    for(int i = 0; i &lt; trustTable.length; i++){<br>      for(int j = 0; j &lt; trustTable[i].length(); j++){<br>        if(i == j) continue;<br>        if(trustTable[i].charAt(j) == 'Y') trust[i] |= 1&lt;&lt;j;<br>      }<br>    }<br>    boolean[] ok = new boolean[1&lt;&lt;wts.length];<br>    int[] mspeeds = new int[1&lt;&lt;wts.length];<br>    for(int i = 0; i &lt; ok.length; i++){<br>      ok[i] = true;<br>      int tot = 0;<br>      mspeeds[i] = 0;<br>      for(int j = 0; j &lt; wts.length; j++){<br>        if(((1&lt;&lt;j)&amp;i)==0) continue;<br>        tot += wts[j];<br>        if(Integer.bitCount(i) &gt; 1 &amp;&amp; (i&amp;trust[j]) == 0) ok[i] = false;<br>        mspeeds[i] = max(mspeeds[i], speeds[j]);<br>      }<br>      ok[i] &amp;= tot &lt;= maxWt;<br>    }<br>    PriorityQueue&lt;State&gt; que = new PriorityQueue&lt;State&gt;();<br>    que.add(new State(0,0,0));<br>    int[][] been = new int[1&lt;&lt;wts.length][2];<br>    for(int i = 0; i &lt; been.length; i++){<br>      fill(been[i], Integer.MAX_VALUE);<br>    }<br>    while(que.size() &gt; 0){<br>      State s = que.poll();<br>      if(s.msk == (1&lt;&lt;wts.length)-1) return s.t;<br>      int full = s.msk;<br>      if(s.side == 0) full = (~full)&amp;((1&lt;&lt;wts.length)-1);<br>      for(int sub = full; sub != 0;sub = ((sub-1)&amp;full)){<br>        if(!ok[sub]) continue;<br>        int nmsk = s.msk ^ sub;<br>        if(been[nmsk][1-s.side] &lt;= s.t+mspeeds[sub]) continue;<br>        been[nmsk][1-s.side] = s.t+mspeeds[sub];<br>        que.add(new State(nmsk, 1-s.side, s.t+mspeeds[sub]));<br>      }<br>    }<br>    return -1;<br>  }<br>  class State implements Comparable&lt;State&gt;{<br>    int msk, side, t;<br>    State(int m, int s, int tt){ msk = m; side = s; t = tt;}<br>    public int compareTo(State s){<br>      if(t != s.t) return t-s.t;<br>      if(s.side != side) return s.side-side;<br>      return msk-s.msk;<br>    }<br>  }<br> <br>}<br> <br>// Powered by PopsEdit<br>// Powered by CodeProcessor<br></td>