<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;cassert&gt;<br>#include &lt;cctype&gt;<br>#include &lt;cfloat&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdarg&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cstring&gt;<br><br>#include &lt;sys/resource.h&gt;<br>#include &lt;sys/time.h&gt;<br>#include &lt;unistd.h&gt;<br><br>#include &lt;algorithm&gt;<br>#include &lt;bitset&gt;<br>#include &lt;complex&gt;<br>#include &lt;deque&gt;<br>#include &lt;functional&gt;<br>#include &lt;iostream&gt;<br>#include &lt;iomanip&gt;<br>#include &lt;iterator&gt;<br>#include &lt;limits&gt;<br>#include &lt;list&gt;<br>#include &lt;map&gt;<br>#include &lt;memory&gt;<br>#include &lt;new&gt;<br>#include &lt;numeric&gt;<br>#include &lt;queue&gt;<br>#include &lt;set&gt;<br>#include &lt;sstream&gt;<br>#include &lt;stack&gt;<br>#include &lt;string&gt;<br>#include &lt;utility&gt;<br>#include &lt;valarray&gt;<br>#include &lt;vector&gt;<br><br>#include &lt;ext/algorithm&gt;<br>#include &lt;ext/hash_map&gt;<br>#include &lt;ext/hash_set&gt;<br>#include &lt;ext/numeric&gt;<br><br>using namespace std;<br>using namespace __gnu_cxx;<br><br>template&lt;class T, class V&gt;<br>vector&lt;T&gt; operator,(vector&lt;T&gt; v, V t) {<br>    v.push_back(t);<br>    return v;<br>}<br><br>#define VAR(i,e) __typeof(e) i = (e)<br>#define FOREACH(i, C) for (VAR(i, (C).begin()); i != (C).end(); ++i)<br><br>#define FORI(p, x) for (int i = p; i &lt; (int)(x); ++i)<br>#define FORJ(p, x) for (int j = p; j &lt; (int)(x); ++j)<br>#define FORK(p, x) for (int k = p; k &lt; (int)(x); ++k)<br>#define S size()<br><br>#define ALL(C) (C).begin(), (C).end()<br><br>#define VS vector&lt;string&gt;<br>#define SI set&lt;int&gt;<br><br>struct GroupedWord{<br>    string restore(vector &lt;string&gt; parts);<br>};<br><br>bool join1(VS &amp;vs) {<br>    FORI (0, vs.S) FORJ (0, vs.S) if (i != j) {<br>        char c = vs[i][vs[i].S - 1];<br>        if (c == vs[j][0] &amp;&amp; c == vs[j][vs[j].S - 1]) {<br>            vs[i] += vs[j];<br>            vs.erase(vs.begin() + j);<br>            return true;<br>        }<br>    }<br>    return false;<br>}<br><br>bool join2(VS &amp;vs) {<br>    FORI (0, vs.S) FORJ (0, vs.S) if (i != j) {<br>        char c = vs[i][vs[i].S - 1];<br>        if (c == vs[j][0]) {<br>            vs[i] += vs[j];<br>            vs.erase(vs.begin() + j);<br>            return true;<br>        }<br>    }<br>    return false;<br>}<br><br>bool test(const string &amp;str) {<br>    FORI (0, str.S) FORJ (i + 1, str.S) if (str[i] == str[j]) {<br>        FORK (i + 1, j) if (str[k] != str[i]) return false;<br>    }<br>    return true;<br>}<br><br>string GroupedWord::restore(vector &lt;string&gt; parts) {<br>    FOREACH (it, parts) if (!test(*it)) return "IMPOSSIBLE";<br>    while (join1(parts)) {}<br>    while (join2(parts)) {}<br>    FOREACH (it, parts) if (!test(*it)) return "IMPOSSIBLE";<br><br>    FORI (0, parts.S) FORJ (i + 1, parts.S) {<br>        SI s1(ALL(parts[i]));<br>        SI s2(ALL(parts[j]));<br>        FOREACH (it, s1) if (s2.count(*it)) return "IMPOSSIBLE";<br>    }<br><br>    if (parts.S &gt; 1) return "MANY";<br>    return parts[0];<br>}<br>// Powered by Krzysan's Cleaner 1.4-6a<br><br><br>// Powered by FileEdit<br>// Powered by moj 4.1 [modified TZTester]<br>// Powered by CodeProcessor<br></td>