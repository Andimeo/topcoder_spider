<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;vector&gt;<br>#include &lt;list&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;deque&gt;<br>#include &lt;queue&gt;<br>#include &lt;stack&gt;<br>#include &lt;bitset&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;functional&gt;<br>#include &lt;numeric&gt;<br>#include &lt;utility&gt;<br>#include &lt;sstream&gt;<br>#include &lt;iostream&gt;<br>#include &lt;iomanip&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cctype&gt;<br>#include &lt;string&gt;<br>#include &lt;cstring&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;ctime&gt;<br> <br>using namespace std;<br> <br>typedef long long int64;<br>template&lt;class T&gt; inline T lowbit(T n){return (n^(n-1))&amp;n;}<br> <br>const int64 MODE=1000000007;<br>const int maxsize=1000000;<br> <br>class ProductOfPrices<br>{<br>public:<br>  int n,m;<br>  int64 X[maxsize];<br>  int64 S1[maxsize],S2[maxsize];<br>  void addS(int64 S[],int i,int64 cd)<br>  {<br>    for (;i&lt;=m;i+=lowbit(i)) S[i]+=cd;<br>  }<br>  int64 getS(int64 S[],int H,int T)<br>  {<br>    return getS(S,T)-getS(S,H-1);<br>  }<br>  int64 getS(int64 S[],int i)<br>  {<br>    int64 total=0;<br>    for (;i&gt;0;i-=lowbit(i)) total+=S[i];<br>    return total;<br>  }<br>  int product(int _n, int _m, int X0, int A, int B)<br>  {<br>    n=_n;<br>    m=_m;<br>    X[0]=X0%m;<br>    for (int i=1;i&lt;n;i++)<br>      X[i]=(X[i-1]*(int64)A+(int64)B)%m;<br>    for (int i=0;i&lt;n;i++) X[i]++;<br>    memset(S1,0,sizeof(S1));<br>    memset(S2,0,sizeof(S2));<br>    addS(S1,(int)X[0],1);<br>    addS(S2,(int)X[0],X[0]);<br>    int64 result=1;<br>    for (int i=1;i&lt;n;i++)<br>    {<br>      int key=(int)X[i];<br>      int64 C1=getS(S1,1,key-1);<br>      int64 B1=getS(S2,1,key-1);<br>      int64 C2=getS(S1,key+1,m);<br>      int64 B2=getS(S2,key+1,m);<br>      int64 total=(int64)key*C1-B1+B2-(int64)key*C2;<br>      total%=MODE;<br>      result=(result*total)%MODE;<br>      addS(S1,key,1);<br>      addS(S2,key,key);<br>    }<br>    return (int)result;<br>  }<br>};<br> <br> <br> <br>// Powered by PopsEdit<br></td>