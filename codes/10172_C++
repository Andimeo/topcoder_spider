<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;algorithm&gt;<br>#include &lt;iostream&gt;<br>#include &lt;sstream&gt;<br>#include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;queue&gt;<br>#include &lt;set&gt;<br>#include &lt;map&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cctype&gt;<br>#include &lt;cmath&gt;<br>using namespace std;<br><br>#define _m(a,b) memset(a,b,sizeof(a))<br>#define FOR(i,a,b) for(int i=a;i&lt;=b;i++)<br>#define REP(i,a) for(int i=0;i&lt;a;i++)<br>#define st first<br>#define nd second<br>typedef pair&lt;int,int&gt; PII;<br><br>class BestRoads {<br>public:<br>    vector &lt;int&gt; numberOfRoads(vector &lt;string&gt; R, int M) {<br>        vector &lt;int&gt; res; res.clear();<br>        <br>        int nP=0;<br>    PII P[2500];<br>        <br>        int nC=R.size();<br>        REP(i,nC) {<br>      FOR(j,i+1,nC-1)<br>        if(R[i][j]=='Y') {<br>          P[nP].st=i;<br>          P[nP].nd=j;<br>          nP++;<br>        }<br>    }<br>    <br>    int Par[100]; REP(i,nC) Par[i]=i;<br>    <br>    char FC[100][100]; _m(FC,0);<br>    <br>    int nMST=0;<br>    for(int i=0;i&lt;nP&amp;&amp;nMST&lt;nC-1;i++) {<br>      int a=P[i].st;<br>      while(a-Par[a]) a=Par[a];<br>      int b=P[i].nd;<br>      while(b-Par[b]) b=Par[b];<br>      <br>      if(a!=b) {<br>        nMST++;<br>        Par[a]=b;<br>        int x=P[i].st;<br>        int y=P[i].nd;<br>        FC[x][y]=FC[y][x]=1;<br>      }<br>    }<br>        <br>        if(nMST==nC-1) {<br>          int c=0;<br>          int PC[nC]; _m(PC,0);<br>      REP(i,nP) {<br>        int a=P[i].st;<br>        int b=P[i].nd;<br>        <br>        if(FC[a][b]) nMST--;<br>        <br>        if(M-nMST-c&gt;0) {<br>          PC[a]++; PC[b]++;<br>          c++;<br>        }<br>        <br>        if(nMST==0&amp;&amp;c==M) break;<br>      }<br>      <br>      if(c==M) {<br>        REP(i,nC) res.push_back(PC[i]);<br>      }<br>    }<br>        <br>        return res;<br>    }<br><br>};<br><br><br>// Powered by FileEdit<br>// Powered by CodeProcessor<br></td>