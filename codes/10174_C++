<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;vector&gt;<br>#include &lt;string.h&gt;<br><br>using namespace std;<br><br>class StrengthOrIntellect {<br>  public:<br>    <br>    int dp[1001][1001];<br>    int str[50], dex[50], xp[50], n;<br>    <br>    int dfs (int x, int y) {<br>      if (dp[x][y] != -1)<br>        return dp[x][y];<br>      int cur = 2-x-y, tom = 0;<br>      for (int i = 0; i &lt; n; i ++)<br>        if (str[i] &lt;= x || dex[i] &lt;= y) {<br>          cur += xp[i];<br>          tom ++;<br>          }<br>//      printf("%d %d : %d %d\n",x,y,cur,tom);<br>      if (cur == 0)<br>        return (dp[x][y] = tom); // No more missions possible...<br>      <br>      dp[x][y] = tom;<br>      for (int i = 0; i &lt;= cur; i ++)<br>        dp[x][y] &gt;?= dfs( (x + i) &lt;? 1000, (y + cur - i) &lt;? 1000 );<br>      return dp[x][y];<br>      }<br>    <br>    int numberOfMissions(vector &lt;int&gt; strength, vector &lt;int&gt; intellect, vector &lt;int&gt; points) {<br>      n = strength.size();<br>      for (int i = 0; i &lt; n; i ++) {<br>        str[i] = strength[i];<br>        dex[i] = intellect[i];<br>        xp[i] = points[i];<br>        }<br>      memset(dp, -1, sizeof(dp));<br>      return dfs(1, 1);<br>      }<br>  };<br></td>