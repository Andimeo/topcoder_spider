<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;vector&gt;<br>#include &lt;string&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;iostream&gt;<br>#include &lt;sstream&gt;<br>#include &lt;set&gt;<br>#include &lt;map&gt;<br>#include &lt;queue&gt;<br>#include &lt;math.h&gt;<br><br>using namespace std;<br><br>#define sz(c) (int)(c).size()<br>#define all(c) (c).begin(), (c).end()<br>#define fors(i,s,n) for(int i = (s); i &lt; (n); ++i)<br>#define forv(i,v) fors(i,0,sz(v))<br><br>bool isPalindrome(string s) {<br>  int i = 0, j = s.size() - 1;<br>  while(i &lt; j)<br>    if(s[i++] != s[j--])<br>      return false;<br>  return true;<br>}<br><br>struct ThePalindrome {<br>  int find(string s) {<br>    int i, j;<br>    string add;<br>    for(i = 0; i &lt; s.size(); i++)<br>      if(isPalindrome(s.substr(i)))<br>       break;<br>    for(j = i-1; j &gt;= 0; j--)<br>      add += s[j];<br>    s += add;   <br>    return s.size();  <br>  }<br>};<br></td>