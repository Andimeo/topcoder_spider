<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;algorithm&gt;<br>#include &lt;bitset&gt;<br>#include &lt;cctype&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cstring&gt;<br>#include &lt;functional&gt;<br>#include &lt;iomanip&gt;<br>#include &lt;iostream&gt;<br>#include &lt;list&gt;<br>#include &lt;map&gt;<br>#include &lt;numeric&gt;<br>#include &lt;queue&gt;<br>#include &lt;set&gt;<br>#include &lt;sstream&gt;<br>#include &lt;stack&gt;<br>#include &lt;string&gt;<br>#include &lt;utility&gt;<br>#include &lt;vector&gt;<br><br>using namespace std;<br><br>const int MAXS = 27;<br>const int MODULO = 1234567891;<br><br>class Matrix {<br>public:<br>  static int size;<br>  int mat[MAXS][MAXS];<br><br>  inline Matrix operator * (const Matrix &amp; other) const {<br>    Matrix res;<br>    for (int i = 0; i &lt; size; i++) {<br>      for (int j = 0; j &lt; size; j++) {<br>        res.mat[i][j] = 0;<br>        for (int k = 0; k &lt; size; k++) {<br>          res.mat[i][j] = (res.mat[i][j] + (long long) mat[i][k] * other.mat[k][j]) % MODULO;<br>        }<br>      }<br>    }<br>    return res;<br>  }<br><br>  // p &gt; 0<br>  inline Matrix operator ^ (int k) const {<br>    Matrix cur(*this);<br>    int p;<br>    for (p = 1; (k &amp; p) == 0; p &lt;&lt;= 1) {<br>      cur = cur * cur;<br>    }<br>    Matrix res(cur);<br>    for (p &lt;&lt;= 1; p &lt;= k; p &lt;&lt;= 1) {<br>      cur = cur * cur;<br>      if (k &amp; p) {<br>        res = res * cur;<br>      }<br>    }<br>    return res;<br>  }<br>};<br><br>int Matrix::size;<br><br>class TheLongPalindrome {<br>public:<br>  int count(int n, int k);<br>};<br><br>int TheLongPalindrome::count(int n, int k) {<br>  if (n &lt;= 2) {<br>    return 26 * n;<br>  }<br>  Matrix unit;<br>  Matrix::size = k + 1;<br>  memset(unit.mat, 0, sizeof(unit.mat));<br>  for (int i = 1; i &lt;= k; i++) {<br>    unit.mat[i][i] = i;<br>    if (i &lt; k) {<br>      unit.mat[i][i + 1] = 26 - i;<br>    }<br>    unit.mat[i][0] = 1;<br>  }<br>  unit.mat[0][0] = 1;<br>  Matrix trans = unit ^ ((n - 1) / 2);<br>  long long ans = 0;<br>  if (n &amp; 1) {<br>    ans = trans.mat[1][0] * 52LL % MODULO;<br>    for (int i = 1; i &lt;= k; i++) {<br>      ans = (ans + trans.mat[1][i] * 26LL) % MODULO;<br>    }<br>  } else {<br>    for (int i = 0; i &lt;= k; i++) {<br>      ans = (ans + trans.mat[1][i] * 52LL) % MODULO;<br>    }<br>  }<br>  return (int) ans;<br>}<br><br><br><br>// Powered by FileEdit<br>// Powered by CodeProcessor<br></td>