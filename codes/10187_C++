<td class="problemText" colspan="8" valign="middle" align="left">
            #include&lt;vector&gt;<br>#include&lt;map&gt;<br>#include&lt;set&gt;<br>#include&lt;string&gt;<br>#include&lt;iostream&gt;<br>#include&lt;cmath&gt;<br>#include&lt;algorithm&gt;<br>#include&lt;sstream&gt;<br>using namespace std;<br><br>vector&lt;int&gt; b, c, ans;<br>bool g[100][100], ck[100], prim[2000];<br>int match[100];<br>class PrimePairs <br>{<br>    public:<br>    bool find(int cur)<br>    {<br>        int tmp, i;<br>        for (i = 0; i &lt; c.size(); i++)<br>            if (!ck[i] &amp;&amp; prim[c[i] + b[cur]])<br>            {<br>                ck[i] = true;<br>                tmp = match[i];<br>                match[i] = cur;<br>                if (tmp &lt; 0 || find(tmp)) return true;<br>                match[i] = tmp;<br>            }<br>        return false;<br>    }<br>    <br>    bool hungary()<br>    {<br>        int i, j, ans = 0;<br>        memset(match, 0xff, sizeof(match));<br>        for (i = 0; i &lt; b.size(); i++)<br>        {<br>            memset(ck, 0, sizeof(ck));<br>            if (!find(i)) return false;<br>        }<br>        return true;<br>    }<br>    vector &lt;int&gt; matches(vector &lt;int&gt; a)<br>    {<br>        int i, j, k, n = a.size();<br>        memset(prim, 1, sizeof(prim));<br>        prim[1] = false;<br>        for (i = 2; i &lt; 2000; i++)<br>        {<br>            if (prim[i])<br>            {<br>                for (j = i; i * j &lt; 2000; j++)<br>                    prim[i * j] = false;<br>            }<br>        }<br>        for (i = 1; i &lt; n; i++)<br>        {<br>            if (prim[a[0] + a[i]])<br>            {<br>                b.clear(); c.clear();<br>                for (k = 1; k &lt; n; k++)<br>                    if (k != i)<br>                    {<br>                        if (a[k] % 2 == 1) b.push_back(a[k]); else c.push_back(a[k]);<br>                    }<br>                if (b.size() != c.size()) continue;<br>                if (hungary()) ans.push_back(a[i]);<br>            }<br>        }<br>        sort(ans.begin(), ans.end());<br>        return ans;<br>    }<br>};<br></td>