<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>public class PrimePairs<br>{<br>  public int[] matches(int[] numbers)<br>  {<br>    this.numbers = numbers;<br>    N = numbers.length;<br>    List&lt;Integer&gt; res = new ArrayList&lt;Integer&gt;();<br>    for(int i=1;i&lt;N;i++)<br>      if(isPrime(numbers[0]+numbers[i]) &amp;&amp; possible(i))<br>        res.add(numbers[i]);<br>    int[] ret = new int[res.size()];<br>    for(int i=0;i&lt;res.size();i++)<br>      ret[i] = res.get(i);<br>    Arrays.sort(ret);<br>    return ret;<br>  }<br>  boolean isPrime(int num)<br>  {<br>    if(num&lt;2) return false;<br>    if(num==2) return true;<br>    if(num%2==0) return false;<br>    for(int i=3;i*i&lt;=num;i+=2)<br>      if(num%i==0) return false;<br>    return true;<br>  }<br>  int N; int[] numbers;<br>  boolean possible(int index)<br>  {<br>    int[] even = new int[N];<br>    int[] odd = new int[N];<br>    m = 0; n = 0;<br>    for(int i=1;i&lt;N;i++)<br>      if(i!=index)<br>      {<br>        if(numbers[i]%2==0)<br>          even[m++] = numbers[i];<br>        else<br>          odd[n++] = numbers[i];<br>      }<br>    if(m!=n)<br>      return false;<br>    a = new boolean[m][n];<br>    for(int i=0;i&lt;m;i++)<br>      for(int j=0;j&lt;n;j++)<br>        a[i][j] = isPrime(even[i]+odd[j]);<br>    back = new int[n];<br>    Arrays.fill(back, -1);<br>    for(int i=0;i&lt;m;i++)<br>    {<br>      vis = new boolean[m];<br>      if(!recurse(i))<br>        return false;<br>    }<br>    return true;<br>  }<br>  int[] back; boolean[][] a;<br>  boolean[] vis;<br>  int m, n;<br>  boolean recurse(int index)<br>  {<br>    if(vis[index])<br>      return false;<br>    vis[index] = true;<br>    for(int i=0;i&lt;n;i++)<br>      if(a[index][i] &amp;&amp; (back[i]==-1 || recurse(back[i])))<br>      {<br>        back[i] = index;<br>        return true;<br>      }<br>    return false;<br>  }<br>}<br></td>