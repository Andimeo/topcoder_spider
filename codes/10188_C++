<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;map&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cstring&gt;<br>#include &lt;cassert&gt;<br>#include &lt;set&gt;<br>#include &lt;iostream&gt;<br>#include &lt;sstream&gt;<br>#include &lt;cstddef&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;utility&gt;<br>#include &lt;iterator&gt;<br>#include &lt;numeric&gt;<br>#include &lt;list&gt;<br>#include &lt;complex&gt;<br> <br>using namespace std;<br> <br>typedef vector&lt;int&gt; vi;<br>typedef vector&lt;string&gt; vs;<br>typedef long long ll;<br>typedef complex&lt;double&gt; pnt;<br>typedef pair&lt;int, int&gt; pii;<br> <br>#define RA(x) (x).begin(), (x).end()<br>#define FE(i, x) for (typeof((x).begin()) i = (x).begin(); i != (x).end(); i++)<br>#define SZ(x) ((int) (x).size())<br> <br> <br>class CampaignTrail<br>{<br>public:<br>    double probWin(vector &lt;int&gt; electors, vector &lt;int&gt; winCurrent, vector &lt;int&gt; winIfVisited, int visits);<br>};<br> <br>static double dp[2][2501][52];       // pos, won, to-visit<br> <br>double CampaignTrail::probWin(vector &lt;int&gt; electors, vector &lt;int&gt; winC, vector &lt;int&gt; winI, int visits)<br>{<br>    memset(dp, 0, sizeof(dp));<br> <br>    int tot = accumulate(RA(electors), 0);<br>    int need = tot / 2 + 1;<br> <br>    for (int i = need; i &lt;= tot; i++)<br>        for (int j = 0; j &lt;= visits; j++)<br>            dp[0][i][j] = 1.0;<br> <br>    int N = SZ(electors);<br>    int r = 0;<br>    for (int p = N - 1; p &gt;= 0; p--)<br>    {<br>        r = !r;<br>        tot -= electors[p];<br>        for (int w = 0; w &lt;= tot; w++)<br>            for (int v = 0; v &lt;= visits; v++)<br>            {<br>                dp[r][w][v] = winC[p] * dp[!r][w + electors[p]][v] + (100 - winC[p]) * dp[!r][w][v];<br>                if (v &lt; visits)<br>                {<br>                    double n = winI[p] * dp[!r][w + electors[p]][v + 1] + (100 - winI[p]) * dp[!r][w][v + 1];<br>                    if (n &gt; dp[r][w][v])<br>                        dp[r][w][v] = n;<br>                }<br>                dp[r][w][v] /= 100.0;<br>            }<br>    }<br>    return dp[r][0][0];<br>}<br> <br> <br>// Powered by FileEdit<br></td>