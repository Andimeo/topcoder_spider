<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>import java.io.*;<br>import static java.lang.Math.*;<br>import static java.util.Arrays.*;<br>import java.math.*;<br>public class CampaignTrail {<br>  public double probWin(int[] electors, int[] winCurrent, int[] winIfVisited, int visits) {<br>    els = electors;<br>    cur = get(winCurrent);<br>    win = get(winIfVisited);<br>    for(int i = 0; i &lt; electors.length; i++){<br>      need += electors[i];<br>    }<br>    need = need/2 + 1;<br>    return go(0, 0, visits);<br>  }<br>  int need;<br>  int[] els;<br>  double[] cur, win;<br>  double[][][] memo = new double[51][2501][51];<br>  double[] get(int[] ps){<br>    double[] ret = new double[ps.length];<br>    for(int i = 0; i &lt; ret.length; i++){<br>      ret[i] = ps[i]/100.0;<br>    }<br>    return ret;<br>  }<br>  double go(int at, int votes, int rem){<br>    if(rem &lt; 0) return 0;<br>    if(at == els.length) return votes &gt;= need ? 1 : 0;<br>    if(memo[at][votes][rem] != 0) return memo[at][votes][rem]-1;<br>    double p = max(cur[at]*go(at+1, votes+els[at], rem) + (1-cur[at])*go(at+1, votes, rem),<br>      win[at]*go(at+1, votes+els[at], rem-1) + (1-win[at])*go(at+1, votes, rem-1));<br>    memo[at][votes][rem] = p+1;<br>    return p;<br>  }<br> <br> <br>}<br> <br>// Powered by PopsEdit<br>// Powered by CodeProcessor<br></td>