<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;cmath&gt;<br>#include &lt;queue&gt;<br>#include &lt;vector&gt;<br>#include &lt;string&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;climits&gt;<br>#include &lt;cstring&gt;<br>#include &lt;cassert&gt;<br>#include &lt;numeric&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;iostream&gt;<br>#include &lt;sstream&gt;<br>#include "float.h"<br>#include &lt;ctime&gt;<br>using namespace std;<br><br>#define FOR(i,a,b) for (int i(a),_b(b); i &lt;= _b; ++i)<br>#define FORD(i,a,b) for (int i(a),_b(b); i &gt;= _b; --i)<br>#define REP(i,n) for (int i(0),_n(n); i &lt; _n; ++i)<br>#define REPD(i,n) for (int i((n)-1); i &gt;= 0; --i)<br>template&lt;typename T&gt; int size(const T&amp; c) { return (int)c.size(); } <br>template&lt;typename T&gt; T sqr(T x) { return x*x; }<br><br>class OrderedNim {<br>public:<br>    string winner(vector &lt;int&gt; layout) {<br>    int n = size(layout);<br>    vector&lt;bool&gt; firstWins(n+1);<br>    REPD(i, n) <br>      layout[i] == 1 ? firstWins[i] = !firstWins[i+1] : firstWins[i] = true;<br>    return firstWins[0] ? "Alice" : "Bob";<br>    }<br>};<br><br><br><br>// Powered by FileEdit<br>// Powered by moj 4.12 [modified TZTester]<br>// Powered by CodeProcessor<br></td>