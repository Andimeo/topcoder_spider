<td class="problemText" colspan="8" valign="middle" align="left">
            import static java.lang.Math.*;<br>import static java.math.BigInteger.*;<br>import static java.util.Arrays.*;<br>import static java.util.Collections.*;<br>import java.math.*;<br>import java.util.*;<br><br>public class MagicWords {<br>  public int count(String[] S, int K) {<br>    int n = S.length;<br>    int[] is = new int[n];<br>    for (int i = 0; i &lt; n; i++) is[i] = i;<br>    int res = 0;<br>    do {<br>      StringBuilder sb = new StringBuilder();<br>      for (int i = 0; i &lt; n; i++) sb.append(S[is[i]]);<br>      KMP kmp = new KMP(sb.toString().toCharArray());<br>      int t = kmp.searchFrom(sb.append(sb.toString()).toString().toCharArray());<br>      if (t == K + 1) res++;<br>    } while (nextPermutation(is));<br>    return res;<br>  }<br>  class KMP {<br>    int m;<br>    char[] p;<br>    int[] fail;<br>    KMP(char[] p) {<br>      m = p.length;<br>      this.p = p;<br>      fail = new int[m + 1];<br>      int crt = fail[0] = -1;<br>      for (int i = 1; i &lt;= m; i++) {<br>        while (crt &gt;= 0 &amp;&amp; p[crt] != p[i - 1]) crt = fail[crt];<br>        fail[i] = ++crt;<br>      }<br>    }<br>    int searchFrom(char[] t) {<br>      int n = t.length, count = 0;<br>      for (int i = 0, j = 0; i &lt; n; i++) {<br>        while (j &gt;= 0 &amp;&amp; t[i] != p[j]) j = fail[j];<br>        if (++j == m) {<br>          count++;<br>          j = fail[j];<br>        }<br>      }<br>      return count;<br>    }<br>  }<br>  boolean nextPermutation(int[] is) {<br>    int n = is.length;<br>    for (int i = n - 1; i &gt; 0; i--) {<br>      if (is[i - 1] &lt; is[i]) {<br>        int j = n;<br>        while (is[i - 1] &gt;= is[--j]);<br>        swap(is, i - 1, j);<br>        rev(is, i, n);<br>        return true;<br>      }<br>    }<br>    rev(is, 0, n);<br>    return false;<br>  }<br>  void swap(int[] is, int i, int j) {<br>    int t = is[i]; is[i] = is[j]; is[j] = t;<br>  }<br>  void rev(int[] is, int s, int t) {<br>    while (s &lt; --t) swap(is, s++, t);<br>  }<br>  void debug(Object...os) {<br>    System.err.println(deepToString(os));<br>  }<br>}<br></td>