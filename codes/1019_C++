<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;iostream&gt;<br>#include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;functional&gt;<br>#include &lt;numeric&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cmath&gt;<br>#include &lt;queue&gt;<br>#include &lt;map&gt;<br>using namespace std;<br>#define foreach(i,c) for(typeof((c).begin()) i=(c).begin(); i!=(c).end(); i++)<br>typedef vector&lt;int&gt; VI;  typedef vector&lt;vector&lt;int&gt; &gt; VVI;<br>typedef vector&lt;string&gt; VS;  typedef vector&lt;vector&lt;string&gt; &gt; VVS;<br>typedef signed long long i64;  typedef unsigned long long u64;<br><br>vector&lt;string&gt; tokenize(string s, string ch) {<br>  vector&lt;string&gt; ret;<br>  for( int p = 0, p2; p &lt; s.size(); p = p2+1 ) {<br>    p2 = s.find_first_of(ch, p);<br>    if( p2 == -1 ) p2 = s.size();<br>    if( p2-p &gt; 0 ) ret.push_back( s.substr(p, p2-p) );<br>  }<br>  return ret;<br>}<br><br>map&lt;string, int&gt; v;<br><br>int doexpr(string s) {<br>  int x = s.size()-1;<br>  for( int p = 0; x &gt;= 0; x-- ) {<br>    if( !p &amp;&amp; (s[x] == '+' || s[x] == '-') ) break;<br>    p += (s[x] == ')') - (s[x] == '(');<br>  }<br>  if( x &gt; -1 ) {<br>    int a = doexpr(s.substr(0, x));<br>    int b = doexpr(s.substr(x+1));<br>    if( s[x] == '+' ) return a+b; else return a-b;<br>  }<br>  x = s.size()-1;<br>  for( int p = 0; x &gt;= 0; x-- ) {<br>    if( !p &amp;&amp; (s[x] == '*' || s[x] == '/') ) break;<br>    p += (s[x] == ')') - (s[x] == '(');<br>  }<br>  if( x &gt; -1 ) {<br>    int a = doexpr(s.substr(0, x));<br>    int b = doexpr(s.substr(x+1));<br>    if( s[x] == '*' ) return a*b; else return a/b;<br>  }<br>  x = s.size()-1;<br>  for( int p = 0; x &gt;= 0; x-- ) {<br>    if( !p &amp;&amp; s[x] == '^' ) break;<br>    p += (s[x] == ')') - (s[x] == '(');<br>  }<br>  if( x &gt; -1 ) {<br>    int a = doexpr(s.substr(0, x));<br>    int b = doexpr(s.substr(x+1));<br>    if( a == 0 ) return 0;<br>    if( a == 1 ) return 1;<br>    if( a == -1 ) return (b%2 == 0) ? 1 : -1;<br>    int ret = 1;<br>    for( int i = 0; i &lt; b; i++ ) ret *= a;<br>    return ret;<br>  }<br>  if( s[0] == '(' ) return doexpr(s.substr(1, s.size()-2));<br>  if( isdigit(s[0]) ) return atoi(s.c_str());<br>  return v[s];<br>}<br><br>class Calculate {<br>public:<br>int calc(string a, vector &lt;string&gt; b) {<br>  int i, j, k, x, y, z, n;<br>  int ret;<br><br>  for( i = 0; i &lt; b.size(); i++ ) {<br>    VS p = tokenize(b[i], " ");<br>    v[p[0]] = atoi(p[1].c_str());<br>  }<br>  return doexpr(a);<br>}<br>};<br></td>