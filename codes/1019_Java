<td class="problemText" colspan="8" valign="middle" align="left">
            /*/*///*/*/ Powered by radedit!            /*/*/*/*/*/ ;<br>/*/*//*/*/  import java . util .           /*/*/*/*/*/ ;<br>/*/*//*/*/  import java . lang . reflect . /*/*/*/*/*/ ;<br>public class Calculate {<br>   boolean ddd = false ;<br>  HashMap v = new HashMap() ;<br>  char[] expr ;<br>  int g = 0 ;<br>  long mpow(long a, long b) {<br>    if (b == 0) {<br>      return 1 ;<br>    }<br>    if (a == 1) {<br>      return 1 ;<br>    }<br>    if (a == -1) {<br>      if (0 != (b &amp; 1)) {<br>  return -1 ;<br>      } else {<br>  return 1 ;<br>      }<br>    }<br>    if (b &lt; 0) {<br>      return 0 ;<br>    }<br>    if ((b &amp; 1) != 0) {<br>      return a * mpow(a * a, b &gt;&gt; 1) ;<br>    } else {<br>      return mpow(a * a, b &gt;&gt; 1) ;<br>    }<br>  }<br>  long var() {<br>    if (expr[g] == '(') {<br>      g++ ;<br>      long r = calc() ;<br>      if (expr[g] != ')') {<br>  throw new Error("Missing )") ;<br>      }<br>      g++ ;<br>      return r ;<br>    } else if ('0' &lt;= expr[g] &amp;&amp; expr[g] &lt;= '9') {<br>      long v = 0 ;<br>      while ('0' &lt;= expr[g] &amp;&amp; expr[g] &lt;= '9') {<br>  v = 10 * v + expr[g] - '0' ;<br>  g++ ;<br>      }<br>      return v ;<br>    } else if (Character.isLetter(expr[g])) {<br>      String r = "" ;<br>      while (Character.isLetter(expr[g])) {<br>  r = r + expr[g++] ;<br>      }<br>      return ((Long)(v.get(r))).longValue() ;<br>    } else {<br>      throw new Error("Unexpected char " + expr[g]) ;<br>    }<br>  }<br>  long expo() {<br>    long v = var() ;<br>    while (expr[g] == '^') {<br>      char op = expr[g++] ;<br>      long v2 = var() ;<br>      v = mpow(v, v2) ;<br>    }<br>    return v ;<br>  }<br>  long term() {<br>    long v = expo() ;<br>    while (expr[g] == '*' || expr[g] == '/') {<br>      char op = expr[g++] ;<br>      long v2 = expo() ;<br>      if (op == '*') {<br>  v = v * v2 ;<br>      } else if (op == '/') {<br>  v = v / v2 ;<br>      } else throw new Error("bad calc") ;<br>    }<br>    return v ;<br>  }<br>  long calc() {<br>    long v = term() ;<br>    while (expr[g] == '+' || expr[g] == '-') {<br>      char op = expr[g++] ;<br>      long v2 = term() ;<br>      if (op == '+') {<br>  v = v + v2 ;<br>      } else if (op == '-') {<br>  v = v - v2 ;<br>      } else throw new Error("bad calc") ;<br>    }<br>    return v ;<br>  }<br>  public int calc(String expression, String[] variables) {<br>    int i, j, k ;<br>    for (i=0; i&lt;variables.length; i++) {<br>      String[] f = variables[i].split(" ") ;<br>      v.put(f[0], new Long(Long.parseLong(f[1]))) ;<br>    }<br>    expr = (expression + "!").toCharArray() ;<br>    long r = calc() ;<br>    if (expr[g] != '!') {<br>      throw new Error("Bad expr") ;<br>    }<br>    return (int)r ;<br>  }<br> <br>  static void pp(Object o) { System.out.println(o) ; }<br>}<br></td>