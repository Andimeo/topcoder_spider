<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br><br>public class TheInteger {<br>  public long find(long n, int k) {<br>        string s = "" + n;<br>        while (s.Length &lt; 19)<br>            s = "0" + s;<br>        long res;<br>        if (canComplete(s, 0, k, out res))<br>            return res;<br>        for (int suffixLen = 0; suffixLen &lt; s.Length; ++suffixLen)<br>        {<br>            for (char digit = (char) (s[s.Length - 1 - suffixLen] + 1); digit &lt;= '9'; ++digit)<br>            {<br>                if (canComplete(s.Substring(0, s.Length - 1 - suffixLen) + digit, suffixLen, k, out res))<br>                    return res;<br>            }<br>        }<br>        throw new Exception();<br>  }<br><br>    private bool canComplete(string prefix, int suffixLen, int k, out long res)<br>    {<br>        res = -1;<br>        int cnt = 0;<br>        bool[] was = new bool[10];<br>        {<br>            int i;<br>            for (i = 0; i &lt; prefix.Length; ++i)<br>                if (prefix[i] != '0')<br>                    break;<br>            for (; i &lt; prefix.Length; ++i)<br>            {<br>                if (!was[prefix[i] - '0'])<br>                {<br>                    ++cnt;<br>                    was[prefix[i] - '0'] = true;<br>                }<br>            }<br>        }<br>        if (cnt &gt; k)<br>            return false;<br>        int toAdd = k - cnt;<br>        if (toAdd &gt; suffixLen)<br>            return false;<br>        if (toAdd == 0)<br>        {<br>            for (int i = 0; i &lt; 10; ++i)<br>                if (was[i])<br>                {<br>                    while (suffixLen &gt; 0)<br>                    {<br>                        prefix += (char)('0' + i);<br>                        --suffixLen;<br>                    }<br>                    break;<br>                }<br>        }<br>        else<br>        {<br>            while (toAdd &lt; suffixLen)<br>            {<br>                if (!was[0])<br>                {<br>                    was[0] = true;<br>                    --toAdd;<br>                    ++cnt;<br>                }<br>                prefix += '0';<br>                --suffixLen;<br>            }<br>            for (int i = 0; i &lt; 10 &amp;&amp; suffixLen &gt; 0; ++i)<br>                if (!was[i])<br>                {<br>                    prefix += (char)('0' + i);<br>                    --suffixLen;<br>                    --toAdd;<br>                    ++cnt;<br>                    was[i] = true;<br>                }<br>        }<br>        if (suffixLen == 0)<br>        {<br>            res = long.Parse(prefix);<br>            return true;<br>        }<br>        else<br>        {<br>            return false;<br>        }<br>    }<br><br><br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003] [modified for C# by Petr]<br>// Powered by CodeProcessor<br></td>