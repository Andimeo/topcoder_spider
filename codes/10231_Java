<td class="problemText" colspan="8" valign="middle" align="left">
            import static java.lang.Math.*;<br>import static java.math.BigInteger.*;<br>import static java.util.Arrays.*;<br>import static java.util.Collections.*;<br>import java.math.*;<br>import java.util.*;<br><br>public class TheInteger {<br>  public long find(long n, int k) {<br>    pow10 = new long[20];<br>    pow10[0] = 1;<br>    for (int i = 1; i &lt; 20; i++) pow10[i] = pow10[i - 1] * 10;<br>    s0 = new String[20];<br>    for (int i = 0; i &lt; 20; i++) {<br>      char[] cs = new char[i];<br>      fill(cs, '0');<br>      s0[i] = String.valueOf(cs);<br>    }<br>    memo = new HashMap&lt;Entry, Long&gt;();<br>    String s = "" + n;<br>    long res = find(s, 0, k);<br>    for (int i = s.length() + 1; res == INF; i++) {<br>      char[] cs = new char[i];<br>      fill(cs, '0');<br>      cs[0] = '1';<br>      res = find(String.valueOf(cs), 0, k);<br>    }<br>    return res;<br>  }<br>  long[] pow10;<br>  String[] s0;<br>  long INF = Long.MAX_VALUE;<br>  Map&lt;Entry, Long&gt; memo;<br>  long find(String s, int used, int k) {<br>    if (s.length() == 0) return k == 0 ? 0 : INF;<br>    Entry e = new Entry(s, used, k);<br>    Long v = memo.get(e);<br>    if (v != null) return v;<br>    String next = s.substring(1);<br>    for (int i = s.charAt(0) - '0'; i &lt; 10; i++) {<br>      if ((used &gt;&gt; i &amp; 1) == 0) {<br>        if (k &gt; 0) {<br>          long t = find(next, used | 1 &lt;&lt; i, k - 1);<br>          if (t &lt; INF) {<br>            long res = i * pow10[s.length() - 1] + t;<br>            memo.put(e, res);<br>            return res;<br>          }<br>        }<br>      } else {<br>        long t = find(next, used, k);<br>        if (t &lt; INF) {<br>          long res = i * pow10[s.length() - 1] + t;<br>          memo.put(e, res);<br>          return res;<br>        }<br>      }<br>      next = s0[s.length() - 1];<br>    }<br>    memo.put(e, INF);<br>    return INF;<br>  }<br>  class Entry {<br>    String s;<br>    int used;<br>    int k;<br>    Entry(String s, int used, int k) {<br>      this.s = s;<br>      this.used = used;<br>      this.k = k;<br>    }<br>    @Override<br>    public int hashCode() {<br>      final int prime = 31;<br>      int result = 1;<br>      result = prime * result + k;<br>      result = prime * result + ((s == null) ? 0 : s.hashCode());<br>      result = prime * result + used;<br>      return result;<br>    }<br>    @Override<br>    public boolean equals(Object obj) {<br>      Entry other = (Entry)obj;<br>      if (k != other.k) return false;<br>      if (s == null) {<br>        if (other.s != null) return false;<br>      } else if (!s.equals(other.s)) return false;<br>      if (used != other.used) return false;<br>      return true;<br>    }<br>  }<br>  void debug(Object...os) {<br>    System.err.println(deepToString(os));<br>  }<br>}<br></td>