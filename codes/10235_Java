<td class="problemText" colspan="8" valign="middle" align="left">
            import static java.lang.System.*;<br>import static java.lang.Math.*;<br>import static java.lang.Character.*;<br>import java.util.*;<br>import java.io.*;<br>import java.math.*;<br>import static java.math.BigInteger.*;<br>import java.awt.*;<br>public class ThePower<br>{<br>  class state implements Comparable&lt; state &gt;<br>  {<br>    long n; long steps;<br>    state( long nn, long ss ) { n=nn; steps=ss; }<br>    public int compareTo( state s )<br>    {<br>      return (steps&lt;s.steps) ? -1 : 1 <br>      ;<br>      //return  ( n &lt; s.n ) ? -1 : ( n &gt; s.n? 1 : 0 ) ;<br>      <br>    }<br>  }<br>  long pw ( long x, int p )<br>  {<br>    long ret = 1;<br>    while( p != 0 )<br>    {<br>      if(p%2 == 1 ) ret *= x;<br>      x *= x;      <br>      p /= 2;<br>    }<br>    return ret;<br>  }<br>  <br>  public int count(long n)<br>  {<br>    if( n==1 ) return 0;<br>    PriorityQueue&lt; state  &gt; q = new PriorityQueue();<br>    q.add( new state(n,0) );<br>    <br>    while( q.size() &gt; 0 )<br>    {  <br> <br>      state cur = q.poll();<br>      if( cur.n ==1 ) return (int)(cur.steps - 1);<br>      System.out.println( cur.n + " " + cur.steps );<br>      for(int r=2; r &lt;= 60; ++r )<br>      {<br>        double ri = pow( cur.n, 1.0/r );<br>        if( ri &lt; 1 ) break;<br>        ri = round( ri );<br>        long nxt = (long)ri;<br>        long ns  = ( abs( pw(nxt, r ) - cur.n ) );<br>        q.add( new state( nxt,  cur.steps + ns + 1) );<br>      }<br>      <br>    }<br>    return -1;<br>    <br>    <br>  }<br>}<br></td>