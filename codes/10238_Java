<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>import java.util.regex.*;<br>import java.text.*;<br>import java.math.*;<br> <br> <br>public class AvoidFour<br>{<br>  long p = 1000000007;<br>  <br>  long[][] mul(long[][] a, long[][] b) {<br>    int n = a.length;<br>    long[][] r = new long[n][n];<br>    for (int i = 0; i &lt; n; ++i) {<br>      for (int j = 0; j &lt; n; ++j) {<br>        for (int k = 0; k &lt; n; ++k) {<br>          r[i][j] = (r[i][j] + a[i][k] * b[k][j]) % p;<br>        }<br>      }<br>    }<br>    return r;<br>  }<br>  <br>  long[][] pow(long[][] x, long pow) {<br>    long[][] r = new long[x.length][x.length];<br>    for (int i = 0; i &lt; x.length; ++i) {<br>      r[i][i] = 1;<br>    }<br>    while (pow &gt; 0) {<br>      if (pow % 2 == 1) {<br>        r = mul(r, x);<br>      }<br>      pow /= 2;<br>      x = mul(x, x);<br>    }<br>    return r;<br>  }<br>  <br>  int[] primes = {2, 3, 5, 7};<br>  <br>  long gcd(long a, long b) {<br>    return b == 0 ? a : gcd(b, a % b);<br>  }<br>  <br>  long lcm(long a, long b) {<br>    return a * b / gcd(a, b);<br>  }<br>  <br>  long ones(int x) {<br>    long r = 0;<br>    for (int i = 0; i &lt; x; ++i) {<br>      r = 10 * r + 1;<br>    }<br>    return r;<br>  }<br>  <br>  long count(long n, long[][] m0) {<br>    long[][] m1 = new long[6][6];<br>    for (int i = 0; i &lt; 5; ++i) {<br>      for (int j = 0; j &lt; 5; ++j) {<br>        m1[i][j] = m0[i][j];<br>      }<br>    }<br>    m1[5][0] = m1[5][1] = m1[5][2] = m1[5][3] = m1[5][5] = 1;<br>    m1 = pow(m1, n);<br>    return m1[5][4];<br>  }<br>  <br>  public int count(long n)<br>  {<br>    long[][] m0 = new long[5][5];<br>    m0[0][0] = m0[0][1] = m0[0][2] = m0[0][3] = 9;<br>    m0[1][0] = m0[2][1] = m0[3][2] = 1;<br>    m0[1][4] = 1;<br>    m0[0][4] = 8;<br>    long ans = 0;<br>    for (int mask = 0; mask &lt; 1 &lt;&lt; 4; ++mask) {<br>      long nn = mask == 0 ? n : n / 4;<br>      long d = mask == 0 ? 1 : 4;<br>      for (int i = 0; i &lt; 4; ++i) {<br>        if ((mask &amp; (1 &lt;&lt; i)) != 0) {<br>          nn /= ones(primes[i]);<br>          d *= ones(primes[i]);<br>        }<br>      }<br>      if (nn &gt; 0) {<br>        long sign = Integer.bitCount(mask) % 2 == 0 ? 1 : -1;<br>        ans = (ans + p + sign * count(nn + 1, pow(m0, d))) % p;<br>      }<br>    }<br>    return (int)ans;<br>  }<br>  <br> <br>}<br>//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!<br></td>