<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>import java.io.*;<br>import static java.lang.Math.*;<br>import static java.util.Arrays.*;<br>import java.math.*;<br>public class YetAnotherStonesGame {<br>  public int fewestStones(int[] allowedMoves, String markedSquares) {<br>    moves = allowedMoves;<br>    marked = new boolean[markedSquares.length()];<br>    for(int i = 0; i &lt; marked.length; i++){<br>      marked[i] = markedSquares.charAt(i) == 'X';<br>    }<br>    int ret = 100;<br>    for(int i = 0; i &lt; (1&lt;&lt;6); i++){<br>      int[] ar = new int[6];<br>      for(int j = 0; j &lt; ar.length; j++){<br>        if(((1&lt;&lt;j)&amp;i)!=0) ar[j] = j;<br>        else ar[j] = -1;<br>      }<br>      ret = min(ret, go(0, ar));<br>    }<br>    return ret == 100 ? -1 : ret;<br>  }<br>  int[] nextRot(int[] ar){<br>    int[] ret = new int[ar.length];<br>    for(int i = 0; i &lt; ret.length-1; i++){<br>      ret[i] = ar[i+1];<br>    }<br>    ret[ret.length-1] = -1;<br>    return ret;<br>  }<br>  int ok(int[] ar){<br>    boolean[] done = new boolean[ar.length];<br>    int ret = 0;<br>    for(int i = 0; i &lt; ar.length; i++){<br>      if(ar[i] == -1 || done[i]) continue;<br>      ret++;<br>      int at = ar[i];<br>      while(!done[at]){<br>        if(ar[at] == -1) return 100;<br>        done[at] = true;<br>        at = ar[at];<br>      }<br>    }<br>    return ret;<br>  }<br>  HashMap&lt;State, Integer&gt; map = new HashMap();<br>  boolean[] marked;<br>  int[] moves;<br>  int go(int at, int[] ar){<br>    State s = new State(at, ar);<br>    if(map.containsKey(s)) return map.get(s);<br>    int ret = go2(at, ar);<br>    map.put(s, ret);<br>    return ret;<br>  }<br>  int go2(int at, int[] stones){<br>    if(at == marked.length) return ok(stones);<br>    int[] nextRot = nextRot(stones);<br>    int cur = stones[0];<br>    if(marked[at]){<br>      if(cur != -1) return 100;<br>      return go(at+1, nextRot);<br>    }<br>    if(cur == -1) return 100;<br>    int ret = 100;<br>    for(int i = 0; i &lt; moves.length; i++){<br>      if(nextRot[moves[i]-1] != -1) continue;<br>      nextRot[moves[i]-1] = cur;<br>      ret = min(ret, go(at+1, nextRot));<br>      nextRot[moves[i]-1] = -1;<br>    }<br>    return ret;    <br>  }<br>  <br>  class State{<br>    int at;<br>    int[] ar;<br>    State(int a, int[] arr){<br>      at = a;<br>      ar = arr.clone();<br>    }<br>    public boolean equals(Object o){<br>      State s = (State)o;<br>      return s.at == at &amp;&amp; Arrays.equals(ar, s.ar);<br>    }<br>    public int hashCode(){<br>      int ret = at;<br>      for(int i = 0; i &lt; ar.length; i++){<br>        ret &lt;&lt;= 4;<br>        ret += ar[i];<br>      }<br>      return ret;<br>    }<br>  }<br> <br> <br>}<br> <br>// Powered by PopsEdit<br>// Powered by CodeProcessor<br></td>