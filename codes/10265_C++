<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;iostream&gt;<br>#include &lt;vector&gt;<br>#include &lt;cmath&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;string&gt;<br>#include &lt;set&gt;<br>#include &lt;map&gt;<br>#include &lt;ctime&gt;<br>#include &lt;cassert&gt;<br> <br>using namespace std;<br> <br>#define pb push_back<br>#define all(x) x.begin(), x.end()<br>#define forn(i, n) for(int i = 0; i &lt; (int)(n); i++)<br> <br>const int inf = (1 &lt;&lt; 30) - 1;<br> <br>typedef pair &lt;int, int&gt; pii;<br>typedef long long int64;<br> <br>class IncreasingLists {<br>public:<br>  string makeIncreasingList(string);<br>};<br> <br>const string sb = ",0123456789";<br> <br>string min (string s1, string s2)<br>{<br>  if (s1 == "z")<br>    return s2;<br>  if (s2 == "z")<br>    return s1;  <br>  if (s1.length() != s2.length())<br>    {<br>      if (s1.length() &lt; s2.length())<br>        return s1;<br>       else<br>        return s2; <br>    }<br>  if (s1 &lt; s2)<br>    return s1;<br>   else<br>    return s2;   <br>}<br> <br>string s;<br>string t[51];<br>int n;<br> <br>void uppend (string &amp;s, int p)<br>{<br>  for (int i = p; i &lt; (int)s.length(); i ++)<br>    if (s[i] == '?')<br>      s[i] = '0';<br>}<br> <br>string minimum (string s1, string s2)<br>{<br>  if (s2[0] == '0' || s1.length() &gt; s2.length())<br>    return "z";<br>  if (s1.length() &lt; s2.length())<br>    {<br>      if (s2[0] == '?')<br>        s2[0] = '1';<br>      uppend (s2, 1);  <br>      return s2;      <br>    }  <br>  string s3 = s2;<br>  forn (i, s1.length())<br>    if (s2[i] != '?')<br>      {<br>        if (s2[i] &gt; s1[i])<br>          {<br>            uppend (s2, i+1);<br>            return s2;<br>          }<br>        if (s2[i] &lt; s1[i])<br>          {<br>            for (int j = i; j &gt;= 0; j --)<br>              if (s3[j] == '?' &amp;&amp; s2[j] &lt; '9')<br>                {<br>                  s2[j] = (char)((int)s2[j] + 1);<br>                  uppend (s2, j+1);<br>                  return s2;<br>                }<br>             return "z";   <br>          }  <br>      }<br>     else<br>      s2[i] = s1[i];<br>  for (int j = (int)s2.length()-1; j &gt;= 0; j --)<br>    if (s3[j] == '?' &amp;&amp; s2[j] &lt; '9')<br>      {<br>        s2[j] = (char)((int)s2[j] + 1);<br>        uppend (s2, j+1);<br>        return s2;<br>      }<br>  return "z";   <br>}<br> <br>bool check ()<br>{<br>  t[0] = "";<br>  string tmp;<br>  for (int i = 1; i &lt;= n; i ++)<br>    {<br>      t[i] = "z";<br>      tmp = "";<br>      for (int j = i-1; j &gt;= 0; j --)<br>        {<br>          if (s[j] == ',')<br>            break;<br>          tmp = s[j] + tmp;<br>          if (j == 0) <br>            t[i] = min (t[i], minimum ("", tmp));<br>           else<br>          if ((s[j-1] == ',' || s[j-1] == '?') &amp;&amp; (t[j-1] != "" &amp;&amp; t[j-1] != "z"))<br>            t[i] = min (t[i], minimum (t[j-1], tmp));<br>        }<br>    }  <br>  if (t[n] == "z")<br>    return false;<br>   else<br>    return true;   <br>}<br> <br>string IncreasingLists::makeIncreasingList(string mask) {<br>  s = mask;<br>  n = s.length();<br>  if (!check ())<br>    return "impossible";<br>  forn (i, n)<br>    if (s[i] == '?')<br>      {<br>        forn (j, 11)<br>          {<br>            s[i] = sb[j];<br>            if (check())<br>              break;<br>          }<br>      }  <br>  return s;    <br>}<br></td>