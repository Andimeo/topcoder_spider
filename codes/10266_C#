<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Text;<br><br>public class HexatridecimalSum {<br>    string add(string a, string b)<br>    {<br>        StringBuilder c = new StringBuilder();<br>        int pr = 0;<br>        for (int i = 0; i &lt; a.Length || i &lt; b.Length || pr &gt; 0; ++i)<br>        {<br>            if (i &lt; a.Length)<br>                pr += decode(a[a.Length - 1 - i]);<br>            if (i &lt; b.Length)<br>                pr += decode(b[b.Length - 1 - i]);<br>            if (pr &gt;= 36)<br>            {<br>                c.Append(encode(pr - 36));<br>                pr = 1;<br>            }<br>            else<br>            {<br>                c.Append(encode(pr));<br>                pr = 0;<br>            }<br>        }<br>        for (int i = 0; i &lt; c.Length - 1 - i; ++i)<br>        {<br>            char t = c[i];<br>            c[i] = c[c.Length - 1 - i];<br>            c[c.Length - 1 - i] = t;<br>        }<br>        return c.ToString();<br>    }<br><br>    int compare(string a, string b)<br>    {<br>        while (a.Length &gt; 0 &amp;&amp; a[0] == '0')<br>            a = a.Substring(1);<br>        while (b.Length &gt; 0 &amp;&amp; b[0] == '0')<br>            b = b.Substring(1);<br>        if (a.Length &lt; b.Length)<br>            return -1;<br>        else if (a.Length &gt; b.Length)<br>            return 1;<br>        else<br>            return a.CompareTo(b);<br>    }<br><br>    private int decode(char p)<br>    {<br>        if (p &gt;= '0' &amp;&amp; p &lt;= '9')<br>            return p - '0';<br>        else if (p &gt;= 'A' &amp;&amp; p &lt;= 'Z')<br>            return p - 'A' + 10;<br>        else<br>            throw new Exception();<br>    }<br><br>    private char encode(int x)<br>    {<br>        if (x &lt; 10)<br>            return (char) ('0' + x);<br>        else if (x &lt; 36)<br>            return (char) ('A' + (x - 10));<br>        else<br>            throw new Exception();<br>    }<br><br>    public string maximizeSum(string[] numbers, int k) {<br>        string[] get = new string[36];<br>        for (int i = 0; i &lt; 36; ++i)<br>        {<br>            string curs = "";<br>            foreach (string x in numbers)<br>            {<br>                StringBuilder y = new StringBuilder();<br>                for (int j = 0; j &lt; x.Length; ++j)<br>                {<br>                    int v = decode(x[j]);<br>                    int cur = 0;<br>                    if (v == i)<br>                    {<br>                        cur = 35 - i;<br>                    }<br>                    if (cur &gt; 0 || y.Length &gt; 0)<br>                        y.Append(encode(cur));<br>                }<br>                curs = add(curs, y.ToString());<br>            }<br>            get[i] = curs;<br>        }<br>        Array.Sort(get, compare);<br>        string res = "";<br>        foreach (string x in numbers)<br>            res = add(res, x);<br>        for (int i = 0; i &lt; k; ++i)<br>            res = add(res, get[35 - i]);<br>        return res;<br>  }<br><br><br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003] [modified for C# by Petr]<br>// Powered by CodeProcessor<br></td>