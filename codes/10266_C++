<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;vector&gt;<br>#include &lt;list&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;deque&gt;<br>#include &lt;queue&gt;<br>#include &lt;stack&gt;<br>#include &lt;bitset&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;functional&gt;<br>#include &lt;numeric&gt;<br>#include &lt;utility&gt;<br>#include &lt;sstream&gt;<br>#include &lt;iostream&gt;<br>#include &lt;iomanip&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cctype&gt;<br>#include &lt;string&gt;<br>#include &lt;cstring&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;ctime&gt;<br> <br>using namespace std;<br> <br>#define SIZE(X) ((int)(X.size()))<br>#define LENGTH(X) ((int)(X.length()))<br> <br>class HexatridecimalSum<br>{<br>public:<br>  int getD(char c)<br>  {<br>    if (c&gt;='0' &amp;&amp; c&lt;='9') return c-'0';<br>    return c-'A'+10;<br>  }<br>  char getC(int v)<br>  {<br>    if (v&lt;10) return char('0'+v);<br>    return char('A'+(v-10));<br>  }<br>  void add(string &amp;A,string B)<br>  {<br>    for (;LENGTH(B)&lt;100;B="0"+B);<br>    int m=0;<br>    for (int i=99;i&gt;=0;i--)<br>    {<br>      m+=getD(B[i])+getD(A[i]);<br>      A[i]=getC(m%36);<br>      m/=36;<br>    }<br>  }<br>  string maximizeSum(vector &lt;string&gt; A, int k)<br>  {<br>    string R=string(100,'0');<br>    for (int i=0;i&lt;SIZE(A);i++)<br>      add(R,A[i]);<br>    string G[36];<br>    for (int i=0;i&lt;36;i++) G[i]=string(100,'0');<br>    for (int i=0;i&lt;SIZE(A);i++)<br>      for (int j=0;j&lt;LENGTH(A[i]);j++)<br>      {<br>        string T=string(100,'0');<br>        T[100-(LENGTH(A[i])-j)]=getC(getD('Z')-getD(A[i][j]));<br>        add(G[getD(A[i][j])],T);<br>      }<br>    sort(G,G+36);<br>    reverse(G,G+36);<br>    for (int i=0;i&lt;k;i++) add(R,G[i]);<br>    for (;R[0]=='0';R=R.substr(1));<br>    return R;<br>  }<br>};<br></td>