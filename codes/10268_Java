<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>import java.math.*;<br>import java.io.*;<br><br>public class FindingSquareInTable {<br>  private boolean test(int N) {<br>    int t = (int)Math.round(Math.sqrt(N * 1.0));<br>    return t * t == N;<br>  }<br><br>  public int findMaximalSquare(String[] table) {<br>    int max = -1;<br>    int M = table.length;<br>    int N = table[0].length();<br>    for (int dx = -9; dx &lt;= 9; dx++) {<br>      for (int dy = -9; dy &lt;= 9; dy++) {<br>        for (int i = 0; i &lt; M; i++) {<br>          for (int j = 0; j &lt; N; j++) {<br>            if (dx == dy &amp;&amp; dx == 0) {<br>              if (test(table[i].charAt(j) - '0')) {<br>                max = Math.max(max, table[i].charAt(j) - '0');<br>              }<br>              continue;<br>            }<br>            int x = j;<br>            int y = i;<br>            int number = 0;<br>            while (true){<br>              if (x &lt; 0 || y &lt; 0 || x &gt;= N || y &gt;= M) {<br>                break;<br>              }<br>              number = number * 10 + (table[y].charAt(x) - '0');<br>              if (test(number)) {<br>                max = Math.max(max, number);<br>              }<br>              x += dx;<br>              y += dy;<br>            }<br>          }<br>        }<br>      }<br>    }<br><br>    return max;<br>  }<br>}<br><br><br>// Powered by FileEdit<br>// Powered by moj 4.11 [modified TZTester]<br>// Powered by CodeProcessor<br></td>