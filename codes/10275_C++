<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;vector&gt;<br>#include &lt;list&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;deque&gt;<br>#include &lt;stack&gt;<br>#include &lt;bitset&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;functional&gt;<br>#include &lt;numeric&gt;<br>#include &lt;utility&gt;<br>#include &lt;sstream&gt;<br>#include &lt;iostream&gt;<br>#include &lt;iomanip&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;ctime&gt;<br> <br>using namespace std;<br> <br>typedef long long LL;<br>typedef vector &lt;string&gt; vs;<br>typedef vector &lt;int&gt; vi;<br>typedef vector &lt;LL&gt; vll;<br>typedef vector &lt;double&gt; vd;<br>typedef pair &lt;int,int&gt; pii;<br> <br> <br>class CellRemoval {<br>public:<br>  int cellsLeft(vector &lt;int&gt;, int);<br>};<br> <br>vi p;<br>int n;<br>int x;<br> <br>int calc(int rt)<br>{<br>  int i;<br>  bool found = false;<br>  int res = 0;<br>  for (i=0; i&lt;n; i++) if (p[i] == rt)<br>  {<br>    found = true;<br>    if (i == x) continue;<br>    res += calc( i );<br>  }<br>  <br>  if (!found) res = 1;<br>  return res;<br>}<br> <br>int CellRemoval::cellsLeft(vector &lt;int&gt; parent, int deletedCell) {<br>  p = parent;<br>  n = p.size();<br>  x = deletedCell;<br>  <br>  int res = calc( -1 );<br>  return res;<br>}<br> <br> <br>//Powered by [KawigiEdit] 2.0!<br></td>