<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;iostream&gt;<br>#include &lt;fstream&gt;<br>#include &lt;sstream&gt;<br>#include &lt;vector&gt;<br>#include &lt;map&gt;<br>#include &lt;queue&gt;<br>#include &lt;set&gt;<br>#include &lt;stack&gt;<br>#include &lt;list&gt;<br>#include &lt;string&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;functional&gt;<br>#include &lt;utility&gt;<br>#include &lt;cassert&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cstdio&gt;<br><br>using namespace std;<br><br>typedef long long ll;<br>typedef vector&lt;int&gt; vi;<br>typedef vector&lt;string&gt; vs;<br>typedef pair&lt;int,int&gt; pii;<br>#define pb push_back<br>#define MP make_pair<br>#define For(a,b,c) for(typeof(b)a=(b); a&lt;(c); ++a)<br>#define ALL(a) (a).begin(),(a).end()<br>#define DBG(a) cout &lt;&lt; #a &lt;&lt; ": " &lt;&lt; a &lt;&lt; endl<br>#define FORE(i, v) for(typeof(v.begin()) i = v.begin(); i != v.end(); ++i)<br><br>struct state<br>{<br>  int r, c, d;<br>  int mas;<br>};<br><br>const int dr[4] = {0,0,1,-1};<br>const int dc[4] = {1,-1,0,0};<br><br>struct TheLongWay<br>{<br>  int minimalTime(vs grid)<br>  {<br>    int dist[51][51][4][3];<br>    memset(dist, -1, sizeof(dist));<br><br>    queue&lt;state&gt; bfs;  <br>    int v[51][51], child = 0;<br>    memset(v, -1, sizeof(v));<br>    int N = grid.size(), M = grid[0].size();<br>    For (i, 0, N) For (j, 0, M)<br>      if (grid[i][j] == 'S')<br>        For (k, 0, 4)<br>          dist[i][j][k][0] = 0, bfs.push((state){i,j,k,0});<br>      else if (grid[i][j] == 'C')<br>        v[i][j] = child++;<br>    <br>    while (bfs.size())<br>    {<br>      state x = bfs.front(); bfs.pop();<br>      int r = x.r, c = x.c, d = x.d, mas = x.mas;<br>      int dis = dist[r][c][d][mas];<br>      if (mas == 3) return dis;<br>      <br>      For (i, 0, 4)<br>      {<br>        unsigned nr = r + dr[i], nc = c + dc[i];<br>        if (nr &lt; N &amp;&amp; nc &lt; M &amp;&amp; grid[nr][nc] != '#' &amp;&amp; i != d)<br>        {<br>          state y = (state){nr, nc, i, mas};<br>          if (grid[nr][nc] == 'C')<br>            y.mas |= (1&lt;&lt;v[nr][nc]);<br>          if (dist[y.r][y.c][y.d][y.mas] == -1)<br>            dist[y.r][y.c][y.d][y.mas] = dis+1, bfs.push(y);<br>        }<br>      }<br>    }<br>    <br>    return -1;<br>  }<br>};<br></td>