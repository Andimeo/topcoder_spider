<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>import java.math.*;<br>class Pos {<br>  int x,y,d;<br>  Pos(int xx, int yy, int dd) {<br>    x = xx; y = yy; d = dd;<br>  }<br>}<br>public class TheLongWay {<br>  int n,m;<br>  int[][] map;<br>  int[][][] a,b;<br>  int[] dx = {-1,1,0,0};<br>  int[] dy = {0,0,1,-1};<br>  int[][][] bfs(Queue&lt;Pos&gt; Q) {<br>    int[][][] a = new int[n+2][m+2][4]; <br>    for (Pos p:Q) a[p.x][p.y][p.d] = 1;    <br>    while (!Q.isEmpty()) {<br>      Pos p = Q.poll();<br>      for (int d=0; d&lt;4; d++) {<br>        if (d==p.d) continue;<br>        int nx = p.x+dx[d];<br>        int ny = p.y+dy[d];<br>        if (a[nx][ny][d]&gt;0 || map[nx][ny]==0) continue;<br>        Pos pp = new Pos(nx,ny,d);<br>        a[nx][ny][d] = a[p.x][p.y][p.d] +1;<br>        Q.add(pp);<br>      }<br>    }<br>    for (int i=0; i&lt;n+2; i++)<br>      for (int j=0; j&lt;m+2; j++)<br>        for (int k=0; k&lt;4; k++)<br>          if (a[i][j][k]&lt;=0) a[i][j][k] = Integer.MAX_VALUE;<br>    return a;<br>  }<br>  public int minimalTime(String[] cityMap) {<br>    int res = Integer.MAX_VALUE;<br>    n = cityMap.length;<br>    m = cityMap[0].length();<br>    map = new int[n+2][m+2];<br>    int sx = -1, sy = -1, p1x = -1, p1y = -1, p2x = -1, p2y = -1;<br>    for (int i=1; i&lt;=n; i++)<br>      for (int j=1; j&lt;=m; j++) {<br>        char c = cityMap[i-1].charAt(j-1); <br>        if (c!='#') {<br>          map[i][j] = 1;<br>          if (c=='S') {<br>            sx = i; sy = j;<br>          }<br>          if (c=='C' &amp;&amp; p1x&lt;0) {<br>            p1x = i; p1y = j;<br>          }<br>          if (c=='C') {<br>            p2x = i; p2y = j;<br>          }<br>        }<br>      }<br>    Queue&lt;Pos&gt; Q = new LinkedList&lt;Pos&gt;();<br>    Q.add(new Pos(sx,sy,0));<br>    Q.add(new Pos(sx,sy,1));<br>    Q.add(new Pos(sx,sy,2));<br>    Q.add(new Pos(sx,sy,3));<br>    a = bfs(Q);<br>    for (int k=0; k&lt;4; k++) {<br>      if (a[p1x][p1y][k]&lt;Integer.MAX_VALUE) {<br>        Q.clear();<br>        Q.add(new Pos(p1x,p1y,k));<br>        b = bfs(Q);<br>        int rr = Math.min(Math.min(b[p2x][p2y][0], b[p2x][p2y][1]), Math.min(b[p2x][p2y][2], b[p2x][p2y][3]));<br>        if (rr&lt;Integer.MAX_VALUE) res = Math.min(res, a[p1x][p1y][k]+rr-2);<br>      }<br>    }<br>    <br>    <br>    for (int k=0; k&lt;4; k++) {<br>      if (a[p2x][p2y][k]&lt;Integer.MAX_VALUE) {<br>        Q.clear();<br>        Q.add(new Pos(p2x,p2y,k));<br>        b = bfs(Q);<br>        int rr = Math.min(Math.min(b[p1x][p1y][0], b[p1x][p1y][1]), Math.min(b[p1x][p1y][2], b[p1x][p1y][3]));<br>        if (rr&lt;Integer.MAX_VALUE) res = Math.min(res, a[p2x][p2y][k]+rr-2);<br>      }<br>    }<br>    if (res==Integer.MAX_VALUE) res = -1; <br>    System.err.println(res);<br>    return res;<br>  }<br>}<br></td>