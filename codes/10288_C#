<td class="problemText" colspan="8" valign="middle" align="left">
            using System; <br>using System.Collections; <br>using System.Collections.Generic; <br>using System.Collections.Specialized; <br>using System.Text; <br>using System.Text.RegularExpressions; <br> <br>public class MazeWanderingEasy {<br><br>    public class Node<br>    {<br>        public int x, y;<br>        public int c;<br>    }<br><br>    public int[] dx = { 1, 0, -1, 0 };<br>    public int[] dy = { 0, 1, 0, -1 };<br>    public int m, n;<br><br>    public bool In(int x, int y)<br>    {<br>        return x &gt;= 0 &amp;&amp; x &lt; m &amp;&amp; y &gt;= 0 &amp;&amp; y &lt; n;<br>    }<br><br>    public int decisions(string[] maze) <br>    {<br>        int x, y;<br>        x = y = 0;<br>        m = maze.Length;<br>        n = maze[0].Length;<br>        bool[,] v = new bool[m, n];<br><br>        for (int i = 0; i &lt; maze.Length; i++)<br>        {<br>            for (int j = 0; j &lt; maze[0].Length; j++)<br>            {<br>                if (maze[i][j] == 'M')<br>                {<br>                    x = i;<br>                    y = j;<br>                }<br>            }<br>        }<br>        Queue&lt;Node&gt; q = new Queue&lt;Node&gt;();<br>        Node start = new Node();<br>        start.x = x;<br>        start.y = y;<br>        start.c = 0;<br>        v[x, y] = true;<br>        q.Enqueue(start);<br><br>        while (q.Count &gt; 0)<br>        {<br>            Node cur = q.Dequeue();<br>            if (maze[cur.x][cur.y] == '*')<br>                return cur.c;<br>            <br>            int cnt = 0;<br>            for (int i = 0; i &lt; 4; i++)<br>            {<br>                int xx = cur.x + dx[i];<br>                int yy = cur.y + dy[i];<br>                if (In(xx, yy) &amp;&amp; maze[xx][yy] != 'X' &amp;&amp; !v[xx, yy])<br>                {<br>                    cnt++;<br>                }<br>            }<br><br>            for (int i = 0; i &lt; 4; i++)<br>            {<br>                int xx = cur.x + dx[i];<br>                int yy = cur.y + dy[i];<br>                if (In(xx, yy) &amp;&amp; maze[xx][yy] != 'X' &amp;&amp; !v[xx, yy])<br>                {<br>                    v[xx, yy] = true;<br>                    Node newNode = new Node();<br>                    newNode.x = xx;<br>                    newNode.y = yy;                   <br>                    newNode.c = cur.c;<br>                    if (cnt &gt; 1)<br>                        newNode.c++;<br>                    q.Enqueue(newNode);<br>                }<br>            }<br>        }<br><br>        return 0;<br>    }<br>    <br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003] [modified for C# by Petr]<br>// Powered by CodeProcessor<br></td>