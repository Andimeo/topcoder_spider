<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br><br>public class Deposit {<br>    public double successProbability(int[] siteX, int[] siteY, int[] depositX, int[] depositY) {<br>        double res = 0.0;<br>        for (int destination = 0; destination &lt; siteX.length; ++destination) {<br>            int destinationX = siteX[destination];<br>            int destinationY = siteY[destination];<br>            for (int sourceSide = 0; sourceSide &lt; siteX.length; ++sourceSide) {<br>                int x1 = siteX[sourceSide];<br>                int y1 = siteY[sourceSide];<br>                int x2 = siteX[(sourceSide + 1) % siteX.length];<br>                int y2 = siteY[(sourceSide + 1) % siteY.length];<br>                double len = Math.hypot(x2 - x1, y2 - y1);<br>                double dx = (x2 - x1) / len;<br>                double dy = (y2 - y1) / len;<br>                double left = 0;<br>                double right = len;<br>                for (int otherDestination = 0; otherDestination &lt; siteX.length; ++otherDestination) {<br>                    int otherX = siteX[otherDestination];<br>                    int otherY = siteY[otherDestination];<br>                    long a = 2 * (otherX - destinationX);<br>                    long b = 2 * (otherY - destinationY);<br>                    long c = destinationX * destinationX + destinationY * destinationY - otherX * otherX - otherY * otherY;<br>                    int side1 = sign(a * x1 + b * y1 + c);<br>                    int side2 = sign(a * x2 + b * y2 + c);<br>                    if (side1 == 0 &amp;&amp; side2 == 0)<br>                        continue;<br>                    if (side1 == 0 || side2 == 0 || side1 == side2) {<br>                        if (side1 + side2 &lt; 0) {<br>                            left = len;<br>                            right = 0;<br>                            break;<br>                        } else {<br>                            continue;<br>                        }<br>                    }<br>                    double middle = (-a * x1 - b * y1 - c) / (a * dx + b * dy);<br>                    if (side1 &gt; 0) {<br>                        right = Math.min(right, middle);<br>                    } else {<br>                        left = Math.max(left, middle);<br>                    }<br>                }<br>                if (left &gt;= right)<br>                    continue;<br>                res += probHit(x1 + dx * left, y1 + dy * left, dx, dy, right - left, destinationX, destinationY, depositX, depositY);<br>            }<br>        }<br>        double total = 0;<br>        for (int sourceSide = 0; sourceSide &lt; siteX.length; ++sourceSide) {<br>            int x1 = siteX[sourceSide];<br>            int y1 = siteY[sourceSide];<br>            int x2 = siteX[(sourceSide + 1) % siteX.length];<br>            int y2 = siteY[(sourceSide + 1) % siteY.length];<br>            double len = Math.hypot(x2 - x1, y2 - y1);<br>            total += len;<br>        }<br>        return res / total;<br>    }<br><br>    private double probHit(double x1, double y1, double dx, double dy, double len, double destinationX, double destinationY, int[] depositX, int[] depositY) {<br>        double res = 0.0;<br>        for (int innerSide = 0; innerSide &lt; depositX.length; ++innerSide) {<br>            double ix1 = depositX[innerSide];<br>            double iy1 = depositY[innerSide];<br>            double ix2 = depositX[(innerSide + 1) % depositX.length];<br>            double iy2 = depositY[(innerSide + 1) % depositY.length];<br>            double left = 0;<br>            double right = len;<br>            {<br>                double a1 = (iy1 - destinationY);<br>                double b1 = (destinationX - ix1);<br>                double c1 = -(a1 * destinationX + b1 * destinationY);<br>                if (a1 * ix2 + b1 * iy2 + c1 == 0)<br>                    continue;<br>                if (a1 * ix2 + b1 * iy2 + c1 &lt; 0) {<br>                    a1 = -a1;<br>                    b1 = -b1;<br>                    c1 = -c1;<br>                }<br>                double side1 = signd((a1 * x1 + b1 * y1 + c1) / Math.hypot(a1, b1));<br>                double side2 = signd((a1 * (x1 + len * dx) + b1 * (y1 + len * dy) + c1) / Math.hypot(a1, b1));<br>                if (side1 == 0 || side2 == 0 || side1 == side2) {<br>                    if (side1 + side2 &lt; 0) {<br>                        left = len;<br>                        right = 0;<br>                    }<br>                } else {<br>                    double middle = (-a1 * x1 - b1 * y1 - c1) / (a1 * dx + b1 * dy);<br>                    if (side1 &gt; 0) {<br>                        right = Math.min(right, middle);<br>                    } else {<br>                        left = Math.max(left, middle);<br>                    }<br>                }<br>            }<br>            {<br>                double a2 = (iy2 - destinationY);<br>                double b2 = (destinationX - ix2);<br>                double c2 = -(a2 * destinationX + b2 * destinationY);<br>                if (a2 * ix1 + b2 * iy1 + c2 &lt; 0) {<br>                    a2 = -a2;<br>                    b2 = -b2;<br>                    c2 = -c2;<br>                }<br>                double side1 = signd((a2 * x1 + b2 * y1 + c2) / Math.hypot(a2, b2));<br>                double side2 = signd((a2 * (x1 + len * dx) + b2 * (y1 + len * dy) + c2) / Math.hypot(a2, b2));<br>                if (side1 == 0 || side2 == 0 || side1 == side2) {<br>                    if (side1 + side2 &lt; 0) {<br>                        left = len;<br>                        right = 0;<br>                    }<br>                } else {<br>                    double middle = (-a2 * x1 - b2 * y1 - c2) / (a2 * dx + b2 * dy);<br>                    if (side1 &gt; 0) {<br>                        right = Math.min(right, middle);<br>                    } else {<br>                        left = Math.max(left, middle);<br>                    }<br>                }<br>            }<br>            if (left &lt; right)<br>                res += right - left;<br>        }<br>        return res / 2.0;<br>    }<br><br>    private double signd(double v) {<br>        if (Math.abs(v) &lt; 1e-12)<br>            return 0;<br>        if (v &lt; 0)<br>            return -1;<br>        else<br>            return 1;<br>    }<br><br>    private int sign(long x) {<br>        if (x == 0)<br>            return 0;<br>        else if (x &gt; 0)<br>            return 1;<br>        else<br>            return -1;<br>    }<br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by RETester [based on ExampleBuilder]<br>// Powered by CodeProcessor<br></td>