<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections.Generic;<br><br>public class PawnsAndKings {<br>    const int INF = 1000000;<br><br>  public int minNumberOfMoves(string[] board) {<br>        int height = board.Length;<br>        int width = board[0].Length;<br>        List&lt;int&gt; pawnRow = new List&lt;int&gt;();<br>        List&lt;int&gt; pawnCol = new List&lt;int&gt;();<br>        for (int row = 0; row &lt; height; ++row)<br>            for (int col = 0; col &lt; width; ++col)<br>                if (board[row][col] == 'P')<br>                {<br>                    pawnRow.Add(row);<br>                    pawnCol.Add(col);<br>                }<br>        int n = pawnRow.Count;<br>        int[,] simpleCost = new int[1 &lt;&lt; n, n];<br>        for (int set = 0; set &lt; (1 &lt;&lt; n); ++set)<br>            for (int i = 0; i &lt; n; ++i)<br>                if (((set &gt;&gt; i) &amp; 1) == 0)<br>                    simpleCost[set, i] = INF;<br>                else<br>                {<br>                    int nset = set ^ (1 &lt;&lt; i);<br>                    if (nset == 0)<br>                    {<br>                        simpleCost[set, i] = 0;<br>                    }<br>                    else<br>                    {<br>                        int res = INF;<br>                        for (int j = 0; j &lt; n; ++j)<br>                            if (((nset &gt;&gt; j) &amp; 1) != 0)<br>                            {<br>                                res = Math.Min(res, simpleCost[nset, j] + Math.Max(Math.Abs(pawnRow[i] - pawnRow[j]), Math.Abs(pawnCol[i] - pawnCol[j])));<br>                            }<br>                        simpleCost[set, i] = res;<br>                    }<br>                }<br>        int[] totalCost = new int[1 &lt;&lt; n];<br>        for (int i = 0; i &lt; (1 &lt;&lt; n); ++i)<br>            totalCost[i] = INF;<br>        totalCost[0] = 0;<br>        for (int row = 0; row &lt; height; ++row)<br>            for (int col = 0; col &lt; width; ++col)<br>                if (board[row][col] == 'K')<br>                {<br>                    int[] nextTotalCost = (int[])totalCost.Clone();<br>                    for (int set = 0; set &lt; (1 &lt;&lt; n); ++set)<br>                        for (int i = 0; i &lt; n; ++i)<br>                        {<br>                            int cost = simpleCost[set, i] + Math.Max(Math.Abs(row - pawnRow[i]), Math.Abs(col - pawnCol[i]));<br>                            if (cost &lt; INF)<br>                            {<br>                                int mask = ~set;<br>                                for (int nset = ((1 &lt;&lt; n) - 1) &amp; mask; nset &gt; 0; nset = (nset - 1) &amp; mask)<br>                                {<br>                                    nextTotalCost[nset ^ set] = Math.Min(nextTotalCost[nset ^ set], cost + totalCost[nset]);<br>                                }<br>                                nextTotalCost[set] = Math.Min(nextTotalCost[set], cost);<br>                            }<br>                        }<br>                    totalCost = nextTotalCost;<br>                }<br>        return totalCost[(1 &lt;&lt; n) - 1];<br>  }<br><br><br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003] [modified for C# by Petr]<br>// Powered by CodeProcessor<br></td>