<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;vector&gt;<br>#include &lt;list&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;deque&gt;<br>#include &lt;queue&gt;<br>#include &lt;stack&gt;<br>#include &lt;bitset&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;functional&gt;<br>#include &lt;numeric&gt;<br>#include &lt;utility&gt;<br>#include &lt;sstream&gt;<br>#include &lt;iostream&gt;<br>#include &lt;iomanip&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cctype&gt;<br>#include &lt;string&gt;<br>#include &lt;cstring&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;ctime&gt;<br><br>using namespace std;<br><br>#define two(X) (1&lt;&lt;(X))<br>#define contain(S,X) (((S)&amp;two(X))!=0)<br>template&lt;class T&gt; inline void checkmin(T &amp;a,T b){if(b&lt;a) a=b;}<br><br>class PawnsAndKings<br>{<br>public:<br>  int n,m;<br>  int X1[12],Y1[12],X2[12],Y2[12];<br>  int f[12][12][two(10)];<br>  int g[12][two(10)];<br>  int solvef(int key,int set,int pos)<br>  {<br>    if (set==0)<br>      return 0;<br>    int &amp;ret=f[key][pos+1][set];<br>    if (ret!=-1)<br>      return ret;<br>    if (set==0) <br>      return ret=0;<br>    ret=100000000;<br>    for (int i=0;i&lt;n;i++)<br>      if (contain(set,i))<br>      {<br>        int x1=(pos&lt;0)?X2[key]:X1[pos];<br>        int y1=(pos&lt;0)?Y2[key]:Y1[pos];<br>        int x2=X1[i];<br>        int y2=Y1[i];<br>        int t1=max(abs(x1-x2),abs(y1-y2));<br>        int t2=solvef(key,set-two(i),i);<br>        checkmin(ret,t1+t2);<br>      }<br>    return ret;<br>  }<br>  int solveg(int key,int set)<br>  {<br>    if (key==m)<br>      return (set==0)?0:100000000;<br>    int &amp;ret=g[key][set];<br>    if (ret!=-1) <br>      return ret;<br>    ret=100000000;<br>    for (int subset=set;1;subset=(subset-1)&amp;set)<br>    {<br>      int t1=solvef(key,subset,-1);<br>      int t2=solveg(key+1,set-subset);<br>      checkmin(ret,t1+t2);<br>      if (subset==0) break;<br>    }<br>    return ret;<br>  }<br>  int minNumberOfMoves(vector &lt;string&gt; board)<br>  {<br>    n=m=0;<br>    for (int i=0;i&lt;8;i++)<br>      for (int j=0;j&lt;8;j++)<br>        if (board[i][j]=='P')<br>          X1[n]=i,Y1[n++]=j;<br>        else if (board[i][j]=='K')<br>          X2[m]=i,Y2[m++]=j;<br>    memset(f,255,sizeof(f));<br>    memset(g,255,sizeof(g));<br>    int ret=solveg(0,two(n)-1);<br>    return ret;<br>  }<br>};<br></td>