<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>import java.util.regex.*;<br>import java.text.*;<br>import java.math.*;<br> <br> <br>public class PawnsAndKings<br>{<br>  public int minNumberOfMoves(String[] board)<br>  {<br>    ArrayList&lt;Integer&gt; px = new ArrayList&lt;Integer&gt;();<br>    ArrayList&lt;Integer&gt; py = new ArrayList&lt;Integer&gt;();<br>    ArrayList&lt;Integer&gt; kx = new ArrayList&lt;Integer&gt;();<br>    ArrayList&lt;Integer&gt; ky = new ArrayList&lt;Integer&gt;();<br>    for (int i = 0; i &lt; 8; ++i) {<br>      for (int j = 0; j &lt; 8; ++j) {<br>        if (board[i].charAt(j) == 'P') {<br>          px.add(i);<br>          py.add(j);<br>        }<br>        if (board[i].charAt(j) == 'K') {<br>          kx.add(i);<br>          ky.add(j);<br>        }<br>      }<br>    }<br>    int[] d = new int[1 &lt;&lt; px.size()];<br>    Arrays.fill(d, 1000000000);<br>    d[0] = 0;<br>    //System.out.println(px + " " + py);<br>    for (int k = 0; k &lt; kx.size(); ++k) {<br>      int[][] dd = new int[1 &lt;&lt; px.size()][px.size()];<br>      for (int[] ar : dd) {<br>        Arrays.fill(ar, 1000000000);<br>      }<br>      for (int i = 0; i &lt; px.size(); ++i) {<br>        dd[1 &lt;&lt; i][i] = dist(kx.get(k), ky.get(k), px.get(i), py.get(i));<br>      }<br>      for (int i = 0; i &lt; 1 &lt;&lt; px.size(); ++i) {<br>        for (int j = 0; j &lt; px.size(); ++j) {<br>          if ((i &amp; (1 &lt;&lt; j)) == 0) {<br>            continue;<br>          }<br>          for (int t = 0; t &lt; px.size(); ++t) {<br>            if ((i &amp; (1 &lt;&lt; t)) != 0) {<br>              continue;<br>            }<br>            dd[i ^ (1 &lt;&lt; t)][t] = Math.min(dd[i ^ (1 &lt;&lt; t)][t], dd[i][j] + dist(px.get(j), py.get(j), px.get(t), py.get(t)));<br>          }<br>        }<br>      }<br>      int[] ddd = new int[1 &lt;&lt; px.size()];<br>      Arrays.fill(ddd, 1000000000);<br>      for (int i = 0; i &lt; 1 &lt;&lt; px.size(); ++i) {<br>        for (int j = 0; j &lt; px.size(); ++j) {<br>          ddd[i] = Math.min(ddd[i], dd[i][j]);<br>        }<br>      }<br>      int[] nd = new int[1 &lt;&lt; px.size()];<br>      for (int i = 0; i &lt; 1 &lt;&lt; px.size(); ++i) {<br>        nd[i] = d[i];<br>        for (int j = i; j != 0; j = (j - 1) &amp; i) {<br>          nd[i] = Math.min(nd[i], d[i ^ j] + ddd[j]);<br>        }<br>      }<br>      //System.out.println(Arrays.toString(nd));<br>      d = nd;<br>    }<br>    return d[(1 &lt;&lt; px.size()) - 1];<br>  }<br>  <br>  int dist(int x1, int y1, int x2, int y2) {<br>    return Math.max(Math.abs(x1 - x2), Math.abs(y1 - y2));<br>  }<br> <br>}<br>//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!<br></td>