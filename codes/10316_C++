<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;map&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cstring&gt;<br>#include &lt;cassert&gt;<br>#include &lt;set&gt;<br>#include &lt;iostream&gt;<br>#include &lt;sstream&gt;<br>#include &lt;cstddef&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;utility&gt;<br>#include &lt;iterator&gt;<br>#include &lt;numeric&gt;<br>#include &lt;list&gt;<br>#include &lt;complex&gt;<br> <br>using namespace std;<br> <br>typedef vector&lt;int&gt; vi;<br>typedef vector&lt;string&gt; vs;<br>typedef long long ll;<br>typedef complex&lt;double&gt; pnt;<br>typedef pair&lt;int, int&gt; pii;<br> <br>#define RA(x) (x).begin(), (x).end()<br>#define FE(i, x) for (typeof((x).begin()) i = (x).begin(); i != (x).end(); i++)<br>#define SZ(x) ((int) (x).size())<br> <br> <br>class CubeOfDice<br>{<br>public:<br>    long long minimumSum(int N, vector &lt;int&gt; values);<br>};<br> <br>long long CubeOfDice::minimumSum(int N, vector &lt;int&gt; values)<br>{<br>    int minSum[7];<br> <br>    fill(minSum, minSum + 7, INT_MAX);<br>    for (int i = 1; i &lt; (1 &lt;&lt; 6); i++)<br>    {<br>        int f = __builtin_popcount(i);<br>        if (f &gt; 3) continue;<br>        if ((i &amp; 33) == 33) continue;<br>        if ((i &amp; 18) == 18) continue;<br>        if ((i &amp; 12) == 12) continue;<br>        int s = 0;<br>        for (int j = 0; j &lt; 6; j++)<br>            if (i &amp; (1 &lt;&lt; j))<br>                s += values[j];<br>        minSum[f] = min(minSum[f], s);<br>    }<br> <br>    if (N == 1)<br>    {<br>        return accumulate(RA(values), 0) - *max_element(RA(values));<br>    }<br>    else<br>    {<br>        ll n = N;<br> <br>        return 4 * minSum[3] + 4 * minSum[2]<br>            + (n - 2) * (8 * minSum[2] + 4 * minSum[1])<br>            + (n - 2) * (n - 2) * 5 * minSum[1];<br>    }<br>}<br> <br> <br>// Powered by FileEdit<br></td>