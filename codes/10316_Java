<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.Arrays;<br><br><br>public class CubeOfDice {<br>  public long minimumSum(int N, int[] values) {<br>    int[][] a = new int[3][2];<br>    a[0][0] = values[0];<br>    a[0][1] = values[5];<br>    a[1][0] = values[1];<br>    a[1][1] = values[4];<br>    a[2][0] = values[2];<br>    a[2][1] = values[3];<br>    for (int i = 0; i &lt; 3; i++) {<br>      if (a[i][0] &gt; a[i][1]) {<br>        int b = a[i][0];<br>        a[i][0] = a[i][1];<br>        a[i][1] = b;<br>      }<br>    }<br>    int max = Math.max(a[0][1], Math.max(a[1][1], a[2][1]));<br>    int sum = 0;<br>    for (int i = 0; i &lt; 6; i++) {<br>      sum += values[i];<br>    }<br>    if (N == 1) {<br>      return sum - max;<br>    }<br>    int[] b = new int[3];<br>    b[0] = a[0][0];<br>    b[1] = a[1][0];<br>    b[2] = a[2][0];<br>    Arrays.sort(b);<br>    int min1 = b[0];<br>    int min2 = b[0] + b[1];<br>    int min3 = b[0] + b[1] + b[2];<br>    long ans = 0;<br>    long n = N;<br>    ans += (4 * (n - 2) * (n - 1) + (n - 2) * (n - 2)) * min1;<br>    ans += (4 * (n - 1) + 4 * (n - 2)) * min2;<br>    ans += 4 * min3;<br>    return ans;<br>  }<br>}<br></td>