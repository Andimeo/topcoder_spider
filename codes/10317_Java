<td class="problemText" colspan="8" valign="middle" align="left">
            public class Unicorn<br>{<br>  final static int MOD = 1000000007;<br><br>  private int R;<br><br>  private int C;<br><br>  private int L;<br><br>  private int seed;<br><br>  private String word;<br><br>  int[][] table;<br><br>  int[][] dyn;<br><br>  int[][] dyn2;<br><br>  void generate()<br>  {<br>    table = new int[R][C];<br>    int x = seed;<br>    int d = (65535 / L) + 1;<br>    for (int r = 0; r &lt; R; r++)<br>      for (int c = 0; c &lt; C; c++)<br>      {<br>        x = (x * 25173 + 13849) &amp; 65535;<br>        table[r][c] = x / d;<br>      }<br>    dyn = new int[R][C];<br>    dyn2 = new int[R][C];<br>    rowSum = new int[R];<br>    colSum = new int[C];<br>  }<br><br>  void initDyn()<br>  {<br>    int x = word.charAt(0) - 'A';<br>    for (int r = 0; r &lt; R; r++)<br>    {<br>      for (int c = 0; c &lt; C; c++)<br>      {<br>        if (table[r][c] == x)<br>        {<br>          dyn[r][c] = 1;<br>        }<br>      }<br>    }<br>  }<br><br>  int total;<br><br>  int[] rowSum;<br><br>  int[] colSum;<br><br>  void addLetter(int x)<br>  {<br>    total = 0;<br>    for (int r = 0; r &lt; R; r++)<br>    {<br>      for (int c = 0; c &lt; C; c++)<br>      {<br>        total = (total + dyn[r][c]) % MOD;<br>      }<br>    }<br>    for (int r = 0; r &lt; R; r++)<br>    {<br>      rowSum[r] = 0;<br>      for (int c = 0; c &lt; C; c++)<br>      {<br>        rowSum[r] = (rowSum[r] + dyn[r][c]) % MOD;<br>      }<br>    }<br>    for (int c = 0; c &lt; C; c++)<br>    {<br>      colSum[c] = 0;<br>      for (int r = 0; r &lt; R; r++)<br>      {<br>        colSum[c] = (colSum[c] + dyn[r][c]) % MOD;<br>      }<br>    }<br>    for (int r = 0; r &lt; R; r++)<br>    {<br>      for (int c = 0; c &lt; C; c++)<br>      {<br>        if (table[r][c] != x)<br>        {<br>          dyn2[r][c] = 0;<br>          continue;<br>        }<br>        int res = total;<br>        if (r &gt; 0)<br>        {<br>          res = (res + MOD - rowSum[r - 1]) % MOD;<br>        }<br>        res = (res + MOD - rowSum[r]) % MOD;<br>        if (r &lt; R - 1)<br>        {<br>          res = (res + MOD - rowSum[r + 1]) % MOD;<br>        }<br>        if (c &gt; 0)<br>        {<br>          res = (res + MOD - colSum[c - 1]) % MOD;<br>        }<br>        res = (res + MOD - colSum[c]) % MOD;<br>        if (c &lt; C - 1)<br>        {<br>          res = (res + MOD - colSum[c + 1]) % MOD;<br>        }<br>        for (int i1 = -1; i1 &lt;= 1; i1 += 2)<br>        {<br>          for (int j1 = -1; j1 &lt;= 1; j1 += 2)<br>          {<br>            if (r + 2 * i1 &gt;= 0 &amp;&amp; r + 2 * i1 &lt; R &amp;&amp; c + 2 * j1 &gt;= 0 &amp;&amp; c + 2 * j1 &lt; C)<br>            {<br>              res = (res + MOD - dyn[r + 2 * i1][c + 2 * j1]) % MOD;<br>            }<br>          }<br>        }<br>        for (int i1 = -1; i1 &lt;= 1; i1++)<br>        {<br>          for (int j1 = -1; j1 &lt;= 1; j1++)<br>          {<br>            if (r + i1 &gt;= 0 &amp;&amp; r + i1 &lt; R &amp;&amp; c + j1 &gt;= 0 &amp;&amp; c + j1 &lt; C)<br>            {<br>              res = (res + dyn[r + i1][c + j1]) % MOD;<br>            }<br>          }<br>        }<br>        dyn2[r][c] = res;<br>      }<br>    }<br>    int[][] tmp = dyn;<br>    dyn = dyn2;<br>    dyn2 = tmp;<br>  }<br><br>  public int countWays(int R, int C, int L, int seed, String word)<br>  {<br>    this.R = R;<br>    this.C = C;<br>    this.L = L;<br>    this.seed = seed;<br>    this.word = word;<br>    generate();<br>    initDyn();<br>    for (int i = 1; i &lt; word.length(); i++)<br>    {<br>      int x = word.charAt(i) - 'A';<br>      addLetter(x);<br>    }<br>    int ans = 0;<br>    for (int r = 0; r &lt; R; r++)<br>    {<br>      for (int c = 0; c &lt; C; c++)<br>      {<br>        ans = (ans + dyn[r][c]) % MOD;<br>      }<br>    }<br>    return ans;<br>  }<br>}<br></td>