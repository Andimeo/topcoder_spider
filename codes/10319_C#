<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Text;<br>using System.Collections.Generic;<br><br>public class NumberGraph {<br>  public int largestSet(string[] graphSet, int[] joiningSet) {<br>        StringBuilder b = new StringBuilder();<br>        foreach (string s in graphSet)<br>        {<br>            b.Append(s);<br>        }<br>        int[] values = Array.ConvertAll&lt;string, int&gt;(b.ToString().Split(' '), int.Parse);<br>        int major = ((joiningSet[0] ^ (joiningSet[0] - 1)) + 1) &gt;&gt; 1;<br>        int n1 = 0;<br>        int n2 = 0;<br>        List&lt;int&gt; l1 = new List&lt;int&gt;();<br>        List&lt;int&gt; l2 = new List&lt;int&gt;();<br>        foreach (int x in values)<br>            if ((x &amp; major) == 0)<br>            {<br>                ++n1;<br>                l1.Add(x);<br>            }<br>            else<br>            {<br>                ++n2;<br>                l2.Add(x);<br>            }<br>        bool[,] graph = new bool[n1, n2];<br>        for (int i1 = 0; i1 &lt; n1; ++i1)<br>            for (int i2 = 0; i2 &lt; n2; ++i2)<br>                foreach (int delta in joiningSet)<br>                    if (l1[i1] + delta == l2[i2] || l1[i1] - delta == l2[i2])<br>                        graph[i1, i2] = true;<br>        int res = 1;<br>        for (int i1 = 0; i1 &lt; n1; ++i1)<br>            for (int i2 = 0; i2 &lt; n2; ++i2)<br>                graph[i1, i2] = !graph[i1, i2];<br>        for (int i1 = 0; i1 &lt; n1; ++i1)<br>            for (int i2 = 0; i2 &lt; n2; ++i2)<br>                if (!graph[i1, i2]) {<br>                    int m1 = 0;<br>                    int m2 = 0;<br>                    l1.Clear();<br>                    l2.Clear();<br>                    for (int j1 = 0; j1 &lt; n1; ++j1)<br>                        if (i1 != j1 &amp;&amp; !graph[j1, i2])<br>                            l1.Add(j1);<br>                    for (int j2 = 0; j2 &lt; n2; ++j2)<br>                        if (i2 != j2 &amp;&amp; !graph[i1, j2])<br>                            l2.Add(j2);<br>                    m1 = l1.Count;<br>                    m2 = l2.Count;<br>                    bool[,] ngraph = new bool[m1, m2];<br>                    for (int j1 = 0; j1 &lt; m1; ++j1)<br>                        for (int j2 = 0; j2 &lt; m2; ++j2)<br>                            ngraph[j1, j2] = graph[l1[j1], l2[j2]];<br>                    int cres = 2 + m1 + m2 - match(m1, m2, ngraph);<br>                    if (res &lt; cres) {<br>                        res = cres;<br>                    }<br>                }<br>        return res;<br>  }<br><br>    private int match(int m1, int m2, bool[,] g)<br>    {<br>        int[] m = new int[m2];<br>        for (int i = 0; i &lt; m2; ++i)<br>            m[i] = -1;<br>        bool[] mark = new bool[m1];<br>        int res = 0;<br>        for (int i = 0; i &lt; m1; ++i)<br>        {<br>            if (dfs(i, m2, g, m, mark))<br>            {<br>                ++res;<br>                for (int j = 0; j &lt; m1; ++j)<br>                    mark[j] = false;<br>            }<br>        }<br>        return res;<br>    }<br><br>    private bool dfs(int i, int m2, bool[,] g, int[] m, bool[] mark)<br>    {<br>        if (mark[i])<br>            return false;<br>        mark[i] = true;<br>        for (int j = 0; j &lt; m2; ++j)<br>            if (g[i, j])<br>            {<br>                if (m[j] &lt; 0 || dfs(m[j], m2, g, m, mark))<br>                {<br>                    m[j] = i;<br>                    return true;<br>                }<br>            }<br>        return false;<br>    }<br><br><br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003] [modified for C# by Petr]<br>// Powered by CodeProcessor<br></td>