<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;vector&gt;<br>#include &lt;list&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;deque&gt;<br>#include &lt;queue&gt;<br>#include &lt;stack&gt;<br>#include &lt;bitset&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;functional&gt;<br>#include &lt;numeric&gt;<br>#include &lt;utility&gt;<br>#include &lt;sstream&gt;<br>#include &lt;iostream&gt;<br>#include &lt;iomanip&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cctype&gt;<br>#include &lt;string&gt;<br>#include &lt;cstring&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;ctime&gt;<br><br>using namespace std;<br><br>#define SIZE(X) ((int)(X.size()))<br><br>class NumberGraph<br>{<br>public:<br>  int n;<br>  bool G[100][100],T[100][100];<br>  char S[100];<br>  int p[100];<br>  bool visited[100];<br>  bool find_path(int v)<br>  {<br>    visited[v]=true;<br>    for (int i=0;i&lt;n;i++)<br>      if (G[v][i] &amp;&amp; !visited[i])<br>      {<br>        visited[i]=true;<br>        if (p[i]&lt;0 || find_path(p[i]))<br>        {<br>          p[v]=i;<br>          p[i]=v;<br>          return true;<br>        }<br>      }<br>    return false;<br>  }<br>  int matching()<br>  {<br>    int result=0;<br>    memset(p,255,sizeof(p));<br>    for (int i=0;i&lt;n;i++)<br>      for (int j=0;j&lt;n;j++)<br>        if (p[i]&lt;0 &amp;&amp; p[j]&lt;0 &amp;&amp; G[i][j])<br>        {<br>          result++;<br>          p[i]=j;<br>          p[j]=i;<br>        }<br>    for (int i=0;i&lt;n;i++)<br>      if (p[i]&lt;0)<br>      {<br>        memset(visited,false,sizeof(visited));<br>        if (find_path(i))<br>          result++;<br>      }<br>    return result;<br>  }<br>  int solve(int P,int Q)<br>  {<br>    memset(G,false,sizeof(G));<br>    for (int i=0;i&lt;n;i++) if (T[i][Q])<br>      for (int j=0;j&lt;n;j++) if (T[j][P])<br>        if (!T[i][j])<br>          G[i][j]=G[j][i]=true;<br>    int result=0;<br>    for (int i=0;i&lt;n;i++)<br>      if (T[i][P] || T[i][Q])<br>        result++;<br>    int tmp=matching();<br>    return result-tmp;<br>  }<br>  int largestSet(vector &lt;string&gt; vs, vector &lt;int&gt; D)<br>  {<br>    vector&lt;int&gt; P;<br>    string str="";<br>    for (int i=0;i&lt;SIZE(vs);i++)<br>      str+=vs[i];<br>    istringstream sin(str);<br>    for (int value;sin&gt;&gt;value;P.push_back(value));<br>    n=SIZE(P);<br>    memset(T,false,sizeof(T));<br>    for (int i=0;i&lt;n;i++)<br>      for (int j=0;j&lt;n;j++)<br>        for (int k=0;k&lt;SIZE(D);k++)<br>          if (i!=j &amp;&amp; abs(P[i]-P[j])==D[k])<br>            T[i][j]=true;<br>    int result=1;<br>    for (int i=0;i&lt;n;i++)<br>      for (int j=i+1;j&lt;n;j++)<br>        if (T[i][j])<br>        {<br>          int tmp=solve(i,j);<br>          if (tmp&gt;result)<br>            result=tmp;<br>        }<br>    return result;<br>  }<br>};<br></td>