<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;iostream&gt;<br>#include &lt;fstream&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;vector&gt;<br>#include &lt;string&gt;<br>#include &lt;set&gt;<br>#include &lt;map&gt;<br>#include &lt;sstream&gt;<br>using namespace std;<br><br>const long double eps = 1e-12;<br>const int segs[10] = {6, 2, 5, 5, 4, 5, 6, 3, 7, 5};<br><br>class DigitalCounter<br>{<br>public:<br>  long long GetNum(string s)<br>  {<br>    istringstream iss(s);<br>    long long a;<br>    iss &gt;&gt; a;<br>    return a;<br>  }<br>  string s;<br>  int have[30][2][100];<br>  int n;<br>  int Count(int pos, int gr, int ss)<br>  {<br>    if (have[pos][gr][ss] != -1) return have[pos][gr][ss];<br>    if (pos == n)<br>    {<br>      if ((ss == 0) &amp;&amp; (gr == 1)) have[pos][gr][ss] = 1;<br>      else have[pos][gr][ss] = 0;<br>      return have[pos][gr][ss];<br>    }<br>    int i;<br>    have[pos][gr][ss] = 0;<br>    for (i = 0; i &lt;= 9; i++)<br>    {<br>      if (ss - segs[i] &lt; 0) continue;<br>      if ((gr == 0) &amp;&amp; (i &lt; s[pos] - '0')) continue;<br>      int ngr = gr;<br>      if (i &gt; s[pos] - '0') ngr = 1;<br>      if (Count(pos + 1, ngr, ss - segs[i]) == 1)<br>      {<br>        have[pos][gr][ss] = 1;<br>      }<br>    }<br>    return have[pos][gr][ss];<br>  }<br>  <br>  string RAns(int pos, int gr, int ss)<br>  {<br>    int i;<br>    string res = "";<br>    while (pos != n)<br>    {<br>      for (i = 0; i &lt;= 9; i++)<br>      {<br>        if (ss - segs[i] &lt; 0) continue;<br>        if ((gr == 0) &amp;&amp; (i &lt; s[pos] - '0')) continue;<br>        int ngr = gr;<br>        if (i &gt; s[pos] - '0') ngr = 1;<br>        if (Count(pos + 1, ngr, ss - segs[i]) == 1)<br>        {<br>          res += (char)(i + '0');<br>          pos++;<br>          gr = ngr;<br>          ss -= segs[i];<br>          break;<br>        }<br>      }  <br>    }<br>    return res;<br>  }<br>  <br>  long long nextEvent(string current)<br>  {<br>    s = current;<br>    n = s.length();<br>    memset(have, 0xFF, sizeof(have));<br>    int need = 0;<br>    int i;<br>    for (i = 0; i &lt; n; i++) need += segs[s[i] - '0'];<br>    if (Count(0, 0, need) == 1)<br>    {<br>      string q = RAns(0, 0, need);<br>      return GetNum(q) - GetNum(s);<br>    }<br>    string ss = "1";<br>    for (i = 0; i &lt; n; i++) ss += "0";<br>    long long ans = GetNum(ss) - GetNum(s);<br>    s = "";<br>    for (i = 0; i &lt; n; i++) s += "0";<br>    memset(have, 0xFF, sizeof(have));<br>    if (Count(0, 1, need) == 1)<br>    {<br>      string q = RAns(0, 1, need);<br>      return ans + GetNum(q);<br>    }<br>    else return -1;<br>  }<br>};<br></td>