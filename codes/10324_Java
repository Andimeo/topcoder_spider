<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br><br>public class DigitalCounter {<br>  private static final int[] d = { 6, 2, 5, 5, 4, 5, 6, 3, 7, 5 };<br>  private static final long inf = Long.MAX_VALUE / 3;<br>  <br>    public long nextEvent(String current) {<br>      int len = current.length();<br>      long[][] minNumber = new long[len + 1][10 * len];<br>      for (int i = 0; i &lt;= len; i++) {<br>        Arrays.fill(minNumber[i], inf);<br>      }<br>      minNumber[0][0] = 0;<br>      long[] pow = new long[len + 1];<br>      pow[0] = 1;<br>      for (int i = 1; i &lt; pow.length; i++) {<br>        pow[i] = 10 * pow[i - 1];<br>      }<br>      for (int i = 0; i &lt; len; i++) {<br>        for (int j = 0; j &lt; minNumber[i].length; j++) {<br>          if (minNumber[i][j] == inf) {<br>            continue;<br>          }<br>          for (int f = 0; f &lt; 10; f++) {<br>            minNumber[i + 1][j + d[f]] = Math.min(minNumber[i + 1][j + d[f]], minNumber[i][j] + f * pow[i]);<br>          }<br>        }<br>      }<br>      int expectedLit = 0;<br>      for (int i = 0; i &lt; current.length(); i++) {<br>        expectedLit += d[current.charAt(i) - '0'];<br>      }<br>      long answer = inf;<br>      long startValue = Long.parseLong(current);<br>      for (int i = 0; i &lt; current.length(); i++) {<br>        for (int newDigit = current.charAt(i) - '0' + 1; newDigit &lt; 10; newDigit++) {<br>          int currentLit = 0;<br>          long x = 0;<br>          for (int j = 0; j &lt; i; j++) {<br>            int digit = (current.charAt(j) - '0');<br>            currentLit += d[digit]; <br>            x = 10 * x + digit;<br>          }<br>          x = 10 * x + newDigit;<br>          currentLit += d[newDigit];<br>          if (currentLit &gt; expectedLit) {<br>            continue;<br>          }<br>          int addonLit = expectedLit - currentLit;<br>          int addonChars = current.length() - i - 1;<br>          long addon = minNumber[addonChars][addonLit];<br>          long value = x * pow[addonChars] + addon;<br>          answer = Math.min(answer, value - startValue);<br>        }<br>      }<br>      answer = Math.min(answer, pow[len] - startValue + minNumber[len][expectedLit]);<br>      return answer;<br>    }<br>}<br></td>