<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br><br>public class ConnectingAirports {<br>  public string[] getSchedule(int[] capacityA, int[] capacityB) {<br>        int nA = capacityA.Length;<br>        int nB = capacityB.Length;<br>        int n = 2 + nA + nB;<br>        int[,] c = new int[n, n];<br>        int totalA = 0;<br>        int totalB = 0;<br>        for (int i = 0; i &lt; nA; ++i)<br>        {<br>            c[n - 2, i] = capacityA[i];<br>            totalA += capacityA[i];<br>        }<br>        for (int i = 0; i &lt; nB; ++i)<br>        {<br>            c[nA + i, n - 1] = capacityB[i];<br>            totalB += capacityB[i];<br>        }<br>        for (int i = 0; i &lt; nA; ++i)<br>            for (int j = 0; j &lt; nB; ++j)<br>                c[i, nA + j] = 1;<br>        if (totalA != totalB)<br>            return new string[0];<br>        int[,] f = new int[n, n];<br>        if (flow(n, c, f, n - 2, n - 1) != totalA)<br>            return new string[0];<br>        string[] res = new string[nA];<br>        for (int i = 0; i &lt; nA; ++i)<br>            for (int j = 0; j &lt; nB; ++j)<br>            {<br>                if (f[i, nA + j] == 0)<br>                {<br>                    res[i] += "0";<br>                    c[i, nA + j] = 0;<br>                }<br>                else<br>                {<br>                    --f[i, nA + j];<br>                    ++f[nA + j, i];<br>                    --f[n - 2, i];<br>                    ++f[i, n - 2];<br>                    --f[nA + j, n - 1];<br>                    ++f[n - 1, nA + j];<br>                    c[i, nA + j] = 0;<br>                    if (flow(n, c, f, n - 2, n - 1) &gt; 0)<br>                    {<br>                        res[i] += "0";<br>                    }<br>                    else<br>                    {<br>                        res[i] += "1";<br>                        c[i, nA + j] = 1;<br>                        flow(n, c, f, n - 2, n - 1);<br>                    }<br>                }<br>            }<br>        return res;<br>  }<br><br>    private int flow(int n, int[,] c, int[,] f, int s, int t)<br>    {<br>        int res = 0;<br>        while (true)<br>        {<br>            bool[] visited = new bool[n];<br>            if (dfs(n, c, f, s, t, visited))<br>            {<br>                ++res;<br>            }<br>            else<br>            {<br>                break;<br>            }<br>        }<br>        return res;<br>    }<br><br>    private bool dfs(int n, int[,] c, int[,] f, int a, int t, bool[] visited)<br>    {<br>        if (visited[a])<br>            return false;<br>        if (a == t)<br>            return true;<br>        visited[a] = true;<br>        for (int i = 0; i &lt; n; ++i)<br>        {<br>            if (f[a, i] &lt; c[a, i] &amp;&amp; dfs(n, c, f, i, t, visited))<br>            {<br>                ++f[a, i];<br>                --f[i, a];<br>                return true;<br>            }<br>        }<br>        return false;<br>    }<br><br><br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003] [modified for C# by Petr]<br>// Powered by CodeProcessor<br></td>