<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;vector&gt;<br>#include &lt;list&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;deque&gt;<br>#include &lt;queue&gt;<br>#include &lt;stack&gt;<br>#include &lt;bitset&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;functional&gt;<br>#include &lt;numeric&gt;<br>#include &lt;utility&gt;<br>#include &lt;sstream&gt;<br>#include &lt;iostream&gt;<br>#include &lt;iomanip&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cctype&gt;<br>#include &lt;string&gt;<br>#include &lt;cstring&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;ctime&gt;<br><br>using namespace std;<br><br>#define SIZE(X) ((int)(X.size()))<br><br>const int maxnode=20000+5;<br>const int maxedge=1000000+5;<br>const int oo=1000000000;<br><br>int node,src,dest,nedge;<br>int head[maxnode],point[maxedge],next[maxedge],flow[maxedge],capa[maxedge];<br>int dist[maxnode],Q[maxnode],work[maxnode];<br><br>void init(int _node,int _src,int _dest)<br>{<br>  node=_node;<br>  src=_src-1;<br>  dest=_dest-1;<br>  for (int i=0;i&lt;node;i++) head[i]=-1;<br>  nedge=0;<br>}<br>void addedge(int u,int v,int c1,int c2)<br>{<br>  u--;v--;<br>  point[nedge]=v,capa[nedge]=c1,flow[nedge]=0,next[nedge]=head[u],head[u]=(nedge++);<br>  point[nedge]=u,capa[nedge]=c2,flow[nedge]=0,next[nedge]=head[v],head[v]=(nedge++);<br>}<br>bool dinic_bfs()<br>{<br>  memset(dist,255,sizeof(dist));<br>  dist[src]=0;<br>  int sizeQ=0;<br>  Q[sizeQ++]=src;<br>  for (int cl=0;cl&lt;sizeQ;cl++)<br>    for (int k=Q[cl],i=head[k];i&gt;=0;i=next[i])<br>      if (flow[i]&lt;capa[i] &amp;&amp; dist[point[i]]&lt;0)<br>      {<br>        dist[point[i]]=dist[k]+1;<br>        Q[sizeQ++]=point[i];<br>      }<br>  return dist[dest]&gt;=0;<br>}<br>int dinic_dfs(int x,int exp)<br>{<br>  if (x==dest) return exp;<br>  for (int &amp;i=work[x];i&gt;=0;i=next[i])<br>  {<br>    int v=point[i],tmp;<br>    if (flow[i]&lt;capa[i] &amp;&amp; dist[v]==dist[x]+1 &amp;&amp; (tmp=dinic_dfs(v,min(exp,capa[i]-flow[i])))&gt;0)<br>    {<br>      flow[i]+=tmp;<br>      flow[i^1]-=tmp;<br>      return tmp;<br>    }<br>  }<br>  return 0;<br>}<br>int dinic_flow()<br>{<br>  int result=0;<br>  while (dinic_bfs())<br>  {<br>    for (int i=0;i&lt;node;i++) work[i]=head[i];<br>    while (1)<br>    {<br>      int delta=dinic_dfs(src,oo);<br>      if (delta==0) break;<br>      result+=delta;<br>    }<br>  }<br>  return result;<br>}<br><br>class ConnectingAirports<br>{<br>public:<br>  int n,m;<br>  vector&lt;int&gt; A,B;<br>  int C[600],D[600];<br>  bool check(vector&lt;string&gt; &amp;R)<br>  {<br>    for (int i=0;i&lt;n;i++) C[i+1]=A[i];<br>    for (int i=0;i&lt;m;i++) D[i+1]=B[i];<br>    int node=n+m+2;<br>    int src=node-1;<br>    int dest=node;<br>    init(node,src,dest);<br>    for (int i=1;i&lt;=n;i++)<br>      for (int j=1;j&lt;=m;j++)<br>        if (R[i-1][j-1]=='?')<br>          addedge(i,j+n,1,0);<br>        else if (R[i-1][j-1]=='1')<br>        {<br>          C[i]--;<br>          D[j]--;<br>          if (C[i]&lt;0 || D[j]&lt;0) return false;<br>        }<br>    for (int i=1;i&lt;=n;i++)<br>      if (C[i]&gt;0)<br>        addedge(src,i,C[i],0);<br>    for (int i=1;i&lt;=m;i++)<br>      if (D[i]&gt;0)<br>        addedge(i+n,dest,D[i],0);<br>    int flow=dinic_flow();<br>    int totalC=0;<br>    for (int i=1;i&lt;=n;i++) totalC+=C[i];<br>    int totalD=0;<br>    for (int i=1;i&lt;=m;i++) totalD+=D[i];<br>    return flow==totalC &amp;&amp; flow==totalD;<br>  }<br>  vector &lt;string&gt; getSchedule(vector &lt;int&gt; _A, vector &lt;int&gt; _B)<br>  {<br>    A=_A;<br>    B=_B;<br>    n=SIZE(A);<br>    m=SIZE(B);<br>    vector&lt;string&gt; R;<br>    for (int i=0;i&lt;n;i++)<br>    {<br>      string str="";<br>      for (int j=0;j&lt;m;j++) str+="?";<br>      R.push_back(str);<br>    }<br>    if (!check(R))<br>    {<br>      R.clear();<br>      return R;<br>    }<br>    for (int i=0;i&lt;n;i++)<br>      for (int j=0;j&lt;m;j++)<br>      {<br>        R[i][j]='0';<br>        if (check(R)) <br>          continue;<br>        R[i][j]='1';<br>      }<br>    return R;<br>  }<br>};<br></td>