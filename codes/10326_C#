<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections;<br>using System.Collections.Generic;<br><br>public class MismatchedStrings<br>{<br>  public string getString(int N, long K)<br>  {<br>    for (int i = 0; i &lt; 60; i++) for (int j = 0; j &lt; 200; j++) for (int k = 0; k &lt; 2; k++)<br>    {<br>      lut[i, j, k] = new Dictionary&lt;long, string&gt;();<br>    }<br>    return getString2(N, K, 0, 1);<br>  }<br>  Dictionary&lt;long, string&gt;[, ,] lut = new Dictionary&lt;long, string&gt;[60, 200, 2];<br>  public string getString2(int N, long K, int open,int good) <br>  {<br>    string val;<br>    if (lut[N, open + 100, good].TryGetValue(K, out val))<br>    {<br>      return val;<br>    }<br>    string ret = string.Empty;<br>    if (open &lt; 0)<br>    {<br>      good = 0;<br>    }<br>    if (N == 1)<br>    {<br>      switch (K)<br>      {<br>        case 0:<br>          ret = "(";<br>          goto end;<br>        case 1:<br>          if (open == 1 &amp;&amp; good == 1)<br>          {<br>            goto end;<br>          }<br>          else<br>          {<br>            ret = ")";<br>            goto end;<br>          }<br>        default:<br>          goto end;<br>      }<br>    }<br><br>    long v = good == 1? valid(N - 1, open + 1) : 0;<br>    long howMany = N &gt; 0 ? (1L &lt;&lt; (N - 1)) - v : 0;<br>    if (howMany &gt; K)<br>    {<br>      ret = getString2(N - 1, K, open + 1, good);<br>      if (ret != string.Empty)<br>      {<br>        ret = "(" + ret;<br>      }<br>    }<br>    else<br>    {<br>      ret = getString2(N - 1, K - howMany, open - 1, good);<br>      if (ret != string.Empty)<br>      {<br>        ret = ")" + ret;<br>      }<br>    }<br>    <br>  end: ;<br>    lut[N, open + 100, good][K] = ret;<br>    return ret;<br>  }<br>  long[,] lut2 = new long[51, 51];<br>  long valid(int N, int open)<br>  {<br>    if (open &gt; N) return 0;<br>    if (open &lt; 0) return 0;<br>    if (N == 0 &amp;&amp; open == 0) return 1;<br>    if (N == 0) return 0;<br>    if (lut2[N, open] != 0) return lut2[N, open] - 1;<br>    long ret = valid(N - 1, open + 1) + valid(N - 1, open - 1);<br>    lut2[N, open] = ret + 1;<br>    return ret;<br>  }<br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by CodeProcessor<br></td>