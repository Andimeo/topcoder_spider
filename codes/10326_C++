<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;algorithm&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cctype&gt;<br>#include &lt;cmath&gt;<br>#include &lt;iostream&gt;<br>#include &lt;sstream&gt;<br>#include &lt;string&gt;<br>#include &lt;utility&gt;<br>#include &lt;vector&gt;<br>using namespace std;<br>#define FOR(i,a,b) for(int i=(a),_b=(b);i&lt;=_b;++i)<br>#define FORD(i,a,b) for(int i=(a),_b=(b);i&gt;=_b;--i)<br>typedef long long LL;<br>const int INF = 1000000000;<br> <br>LL countNice[64][64];<br> <br>struct MismatchedStrings {<br>string getString(int N, long long nr) {<br>  countNice[0][0] = 1;<br>  FOR(k,1,N) countNice[0][k] = 0;<br>  FOR(n,1,N) {<br>    countNice[n][0] = countNice[n-1][1];<br>    FOR(k,1,N) {<br>      countNice[n][k] = countNice[n-1][k-1];<br>      if(k&lt;N) countNice[n][k] += countNice[n-1][k+1];<br>    }<br>  }<br> <br>  string result;<br>  if (nr &gt;= (1LL &lt;&lt; N) - countNice[N][0]) return result;<br>  int cc = 0;<br>  FORD(n,N,1) {<br>    LL leftBracket = 1LL &lt;&lt; (n-1);<br>    if(cc&gt;=0) leftBracket -= countNice[n-1][cc+1];<br>    if (nr &lt; leftBracket) {<br>      result += '(';<br>      ++cc;<br>    } else {<br>      nr -= leftBracket;<br>      result += ')';<br>      --cc;<br>      if(cc&lt;0) cc = -INF;<br>    }<br>  }<br>  return result;<br>}<br> <br>};<br> <br>// Powered by FileEdit<br> <br>// Powered by TomekAI<br>// Powered by TZTester 1.01 [25-Feb-2003]<br> <br>// Powered by CodeProcessor<br></td>