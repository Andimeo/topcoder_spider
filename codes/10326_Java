<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>public class MismatchedStrings {<br>  private final Count count = new Count();<br> <br>  public String get(int n, int y, long k) {<br>    if (n == 0) {<br>      return "";<br>    }<br>    if (y &lt; 0) {<br>      long t = 1l &lt;&lt; (n - 1);<br>      return k &lt; t ? ("(" + get(n - 1, y, k)) : (")" + get(n - 1, y, k - t));<br>    }<br>    long t = count.get(n - 1, y + 1);<br>    return k &lt; t ? ("(" + get(n - 1, y + 1, k)) : (")" + get(n - 1, y - 1, k - t));<br>  }<br>  <br>  public String getString(int N, long K) {<br>    if (K &gt;= count.get(N, 0)) {<br>      return "";<br>    }<br>    return get(N, 0, K);<br>  }<br>  <br>  public static class Count extends DP2&lt;Long&gt; {<br>    @Override<br>    protected Long calc(int x, int y) {<br>      if (x == 0) {<br>        return y == 0 ? 0l : 1l;<br>      }<br>      if (y &lt; 0) {<br>        return 1l &lt;&lt; x;<br>      }<br>      return get(x - 1, y - 1) + get(x - 1, y + 1);<br>    }<br>  }<br> <br>  public abstract static class DP2&lt;T&gt;<br>  {<br>    private final transient Map&lt;Integer, Map&lt;Integer, T&gt;&gt; map = new HashMap&lt;Integer, Map&lt;Integer, T&gt;&gt;();<br> <br>    protected abstract T calc(int x, int y);<br> <br>    public final T get(final int x, final int y) {<br>      if (map.containsKey(x)) {<br>      final Map&lt;Integer, T&gt; m = map.get(x);<br>        if (m.containsKey(y)) {<br>          return m.get(y);<br>        }<br>      } else {<br>        map.put(x, new HashMap&lt;Integer, T&gt;());<br>      } <br>      final T r = calc(x, y);<br>      map.get(x).put(y, r);<br>      return r;<br>    }<br>  }<br> <br>}<br> <br> <br>// Powered by FileEdit<br>// Powered by CodeProcessor<br></td>