<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br><br>public class DoNotTurn {<br>    int maxQueue;<br><br>    int[] dx = new int[4] { 1, 0, -1, 0 };<br>    int[] dy = new int[4] { 0, 1, 0, -1 };<br><br>    public int minimumTurns(int N, int X0, int A, int B, int Y0, int C, int D, int P, int M) {<br>        bool[,] f = new bool[N, N];<br>        if (M &gt; 0)<br>        {<br>            int[] X = new int[M];<br>            X[0] = X0 % P;<br>            for (int i = 1; i &lt; X.Length; ++i)<br>                X[i] = (int)((X[i - 1] * (long)A + B) % P);<br>            int[] Y = new int[M];<br>            Y[0] = Y0 % P;<br>            for (int i = 1; i &lt; Y.Length; ++i)<br>                Y[i] = (int)((Y[i - 1] * (long)C + D) % P);<br>            for (int i = 0; i &lt; M; ++i)<br>                f[X[i] % N, Y[i] % N] = true;<br>            f[0, 0] = false;<br>            f[N - 1, N - 1] = false;<br>        }<br>        maxQueue = 2 * 4 * N * N + 1;<br>        int[] qx = new int[maxQueue];<br>        int[] qy = new int[maxQueue];<br>        int[] qd = new int[maxQueue];<br>        int[] qdist = new int[maxQueue];<br>        int[, ,] dist = new int[N, N, 4];<br>        for (int x = 0; x &lt; N; ++x)<br>            for (int y = 0; y &lt; N; ++y)<br>                for (int d = 0; d &lt; 4; ++d)<br>                    dist[x, y, d] = int.MaxValue;<br>        int qt = 0;<br>        int qh = 0;<br>        for (int i = 0; i &lt; 4; ++i)<br>        {<br>            dist[0, 0, i] = 0;<br>            qx[qh] = 0;<br>            qy[qh] = 0;<br>            qd[qh] = i;<br>            qdist[qh] = 0;<br>            qh = next(qh);<br>        }<br>        while (qt != qh)<br>        {<br>            int x = qx[qt];<br>            int y = qy[qt];<br>            int d = qd[qt];<br>            int ndist = dist[x, y, d];<br>            if (qdist[qt] != ndist)<br>            {<br>                qt = next(qt);<br>                continue;<br>            }<br>            qt = next(qt);<br>            int nx = x + dx[d];<br>            int ny = y + dy[d];<br>            int nd = d;<br>            if (nx &gt;= 0 &amp;&amp; nx &lt; N &amp;&amp; ny &gt;= 0 &amp;&amp; ny &lt; N &amp;&amp; !f[nx, ny] &amp;&amp; dist[nx, ny, nd] &gt; ndist)<br>            {<br>                dist[nx, ny, nd] = ndist;<br>                qt = prev(qt);<br>                qx[qt] = nx;<br>                qy[qt] = ny;<br>                qd[qt] = nd;<br>                qdist[qt] = ndist;<br>            }<br>            ++ndist;<br>            nd = (d + 1) % 4;<br>            nx = x;<br>            ny = y;<br>            if (dist[nx, ny, nd] &gt; ndist)<br>            {<br>                dist[nx, ny, nd] = ndist;<br>                qx[qh] = nx;<br>                qy[qh] = ny;<br>                qd[qh] = nd;<br>                qdist[qh] = ndist;<br>                qh = next(qh);<br>            }<br>            nd = (d + 3) % 4;<br>            if (dist[nx, ny, nd] &gt; ndist)<br>            {<br>                dist[nx, ny, nd] = ndist;<br>                qx[qh] = nx;<br>                qy[qh] = ny;<br>                qd[qh] = nd;<br>                qdist[qh] = ndist;<br>                qh = next(qh);<br>            }<br>        }<br>        int res = int.MaxValue;<br>        for (int i = 0; i &lt; 4; ++i)<br>            res = Math.Min(res, dist[N - 1, N - 1, i]);<br>        if (res == int.MaxValue)<br>            return -1;<br>        else<br>            return res;<br>    }<br><br>    private int prev(int qt)<br>    {<br>        if (qt == 0)<br>            return maxQueue - 1;<br>        else<br>            return qt - 1;<br>    }<br><br>    private int next(int qh)<br>    {<br>        if (qh == maxQueue - 1)<br>            return 0;<br>        else<br>            return qh + 1;<br>    }<br><br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003] [modified for C# by Petr]<br>// Powered by CodeProcessor<br></td>