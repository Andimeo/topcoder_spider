<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;vector&gt;<br>#include &lt;list&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;deque&gt;<br>#include &lt;queue&gt;<br>#include &lt;stack&gt;<br>#include &lt;bitset&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;functional&gt;<br>#include &lt;numeric&gt;<br>#include &lt;utility&gt;<br>#include &lt;sstream&gt;<br>#include &lt;iostream&gt;<br>#include &lt;iomanip&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cctype&gt;<br>#include &lt;string&gt;<br>#include &lt;cstring&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;ctime&gt;<br><br>using namespace std;<br><br>typedef long long int64;<br><br>const int maxm=1200000+5;<br>const int maxn=600+5;<br><br>const int MX[]={-1,0,1,0};<br>const int MY[]={0,1,0,-1};<br><br>class DoNotTurn<br>{<br>public:<br>  int n,X[maxm],Y[maxm];<br>  bool A[maxn][maxn];<br>  int Q[maxn*maxn*4];<br>  int sizeQ;<br>  bool visited[maxn][maxn][4];<br>  void addnode(int x,int y,int d)<br>  {<br>    if (x&lt;0 || x&gt;=n || y&lt;0 || y&gt;=n || !A[x][y]) return;<br>    if (visited[x][y][d]) return;<br>    visited[x][y][d]=true;<br>    Q[sizeQ++]=x*1000000+y*1000+d;<br>  }<br>  void init(int n,int X[],int64 X0,int64 P,int64 A,int64 B)<br>  {<br>    X[0]=(int)(X0%P);<br>    for (int i=1;i&lt;n;i++)<br>      X[i]=(int)((A*(int64)X[i-1]+B)%P);<br>  }<br>  int minimumTurns(int _n, int X0, int AA, int B, int Y0, int CC, int D, int P, int M)<br>  {<br>    n=_n;<br>    init(M,X,X0,P,AA,B);<br>    init(M,Y,Y0,P,CC,D);<br>    memset(A,true,sizeof(A));<br>    for (int i=0;i&lt;M;i++)<br>      A[X[i]%n][Y[i]%n]=false;<br>    A[0][0]=A[n-1][n-1]=true;<br>    memset(visited,false,sizeof(visited));<br>    sizeQ=0;<br>    for (int k=0;k&lt;4;k++) addnode(0,0,k);<br>    for (int R=0,cl=0;cl&lt;sizeQ;R++)<br>    {<br>      int _cl=cl;<br>      for (;cl&lt;sizeQ;cl++)<br>      {<br>        int x=Q[cl]/1000000;<br>        int y=Q[cl]/1000%1000;<br>        int d=Q[cl]%1000;<br>        int x2=x+MX[d];<br>        int y2=y+MY[d];<br>        addnode(x2,y2,d);<br>      }<br>      int _sizeQ=sizeQ;<br>      for (cl=_cl;cl&lt;_sizeQ;cl++)<br>      {<br>        int x=Q[cl]/1000000;<br>        int y=Q[cl]/1000%1000;<br>        int d=Q[cl]%1000;<br>        if (x==n-1 &amp;&amp; y==n-1) return R;<br>        for (int d2=0;d2&lt;4;d2++)<br>        {<br>          int s=(d-d2+4)%4;<br>          if (s==1 || s==3)<br>          {<br>            int x2=x+MX[d2];<br>            int y2=y+MY[d2];<br>            addnode(x2,y2,d2);<br>          }<br>        }<br>      }<br><br>    }<br>    return -1;<br>  }<br>};<br></td>