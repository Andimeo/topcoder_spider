<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>import java.util.regex.*;<br>import java.text.*;<br>import java.math.*;<br> <br> <br>public class DoNotTurn<br>{<br>  boolean[][] f;<br>  <br>  int[] dx = {-1, 0, 1, 0};<br>  int[] dy = {0, -1, 0, 1};<br> <br>  public int minimumTurns(int n, int x0, int a, int b, int y0, int c, int D, int p, int m)<br>  {<br>    f = new boolean[n][n];<br>    long x1 = x0 % p;<br>    long y1 = y0 % p;<br>    for (int i = 0; i &lt; m; ++i) {<br>      x0 = (int)(x1 % n);<br>      y0 = (int)(y1 % n);<br>      if ((x0 != 0 || y0 != 0) &amp;&amp; (x0 != n - 1 || y0 != n - 1)) {<br>        f[x0][y0] = true;<br>      }<br>      x1 = (x1 * a + b) % p;<br>      y1 = (y1 * c + D) % p;<br>    }<br>    int[][][] dist = new int[4][n][n];<br>    for (int[][] arr : dist) {<br>      for (int[] ar : arr) {<br>        Arrays.fill(ar, -1);<br>      }<br>    }<br>    ArrayList&lt;Integer&gt; qx = new ArrayList&lt;Integer&gt;();<br>    ArrayList&lt;Integer&gt; qy = new ArrayList&lt;Integer&gt;();<br>    ArrayList&lt;Integer&gt; qd = new ArrayList&lt;Integer&gt;();<br>    ArrayList&lt;Integer&gt; qx1 = new ArrayList&lt;Integer&gt;();<br>    ArrayList&lt;Integer&gt; qy1 = new ArrayList&lt;Integer&gt;();<br>    ArrayList&lt;Integer&gt; qd1 = new ArrayList&lt;Integer&gt;();<br>    for (int d = 0; d &lt; 4; ++d) {<br>      dist[d][0][0] = 0;<br>      qx.add(0);<br>      qy.add(0);<br>      qd.add(d);<br>    }<br>    for (int l = 0; !qd.isEmpty(); ++l) {<br>      for (int it = 0; it &lt; qd.size(); ++it) {<br>        int x = qx.get(it);<br>        int y = qy.get(it);<br>        if (x == n - 1 &amp;&amp; y == n - 1) {<br>          return l;<br>        }<br>        int d = qd.get(it);<br>        if (dist[d][x][y] != l) {<br>          continue;<br>        }<br>        if (dist[(d + 1) % 4][x][y] == -1) {<br>          dist[(d + 1) % 4][x][y] = l + 1;<br>          qx1.add(x);<br>          qy1.add(y);<br>          qd1.add((d + 1) % 4);<br>        }<br>        if (dist[(d + 3) % 4][x][y] == -1) {<br>          dist[(d + 3) % 4][x][y] = l + 1;<br>          qx1.add(x);<br>          qy1.add(y);<br>          qd1.add((d + 3) % 4);<br>        }<br>        int xx = x + dx[d];<br>        int yy = y + dy[d];<br>        if (xx &gt;= 0 &amp;&amp; xx &lt; n &amp;&amp; yy &gt;= 0 &amp;&amp; yy &lt; n &amp;&amp; !f[xx][yy] &amp;&amp; (dist[d][xx][yy] == -1 || dist[d][xx][yy] &gt; l)) {<br>          dist[d][xx][yy] = l;<br>          qx.add(xx);<br>          qy.add(yy);<br>          qd.add(d);<br>        }<br>      }<br>      qx = qx1;<br>      qy = qy1;<br>      qd = qd1;<br>      qx1 = new ArrayList&lt;Integer&gt;();<br>      qy1 = new ArrayList&lt;Integer&gt;();<br>      qd1 = new ArrayList&lt;Integer&gt;();<br>    }<br>    return -1;<br>  }<br>  <br> <br>}<br>//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!<br></td>