<td class="problemText" colspan="8" valign="middle" align="left">
            // made by diver_ru, made with love<br>using System;<br>using System.Text;<br>using System.Collections.Generic;<br><br>public class EndlessStringMachine{ <br><br><br>    public string getFragment(string input, string program, int s, int min, int max){<br>        int cntSpec = 0;<br>        for (int i = 0; i &lt; program.Length; ++i)<br>            if (program[i] == '$')<br>                ++cntSpec;<br>        <br>        --min;<br>        --max;<br><br>        if (cntSpec == 1)<br>        {<br>            String res = "";<br>            if (min &lt; input.Length)<br>            {<br>                for (int i = 0; i &lt; input.Length &amp;&amp; i &lt;= max; ++i)<br>                    res += input[i];<br>                min = input.Length;<br>            }<br>            program = program.Substring(1);<br><br>            int shift = (min - input.Length) % program.Length;<br>            for (; min &lt;= max; ++min, ++shift)<br>            {<br>                if (min &lt; input.Length + (long) program.Length * s)<br>                    res += program[shift % program.Length];<br>                else<br>                    res += '-';<br>            }<br>            return res;<br>        }<br>        else<br>            return solveIt(input, program, s, min, max, cntSpec);<br>    }<br><br>    private char getCharAt(string input, string program, int gen, long pos, List&lt;long&gt; lengths)<br>    {<br>        if (lengths[gen] &lt;= pos)<br>            return '-';<br>        if (gen == 0)<br>            return input[(int)pos];<br><br><br>        long cur = 0;<br><br>        for (int i = 0; i &lt; program.Length; ++i)<br>        {<br>            if (cur == pos &amp;&amp; program[i] != '$')<br>                return program[i];<br>            if (program[i] == '$')<br>            {<br>                if (pos &lt; cur + lengths[gen - 1])<br>                    return getCharAt(input, program, gen - 1, pos - cur, lengths);<br>                else<br>                    cur += lengths[gen - 1];<br>            }<br>            else<br>                ++cur;<br>        }<br>        return '?';<br>    }<br><br>    private String solveIt(string input, string program, int s, int min, int max, int cntSpec)<br>    {<br>        List&lt;long&gt; lengths = new List&lt;long&gt;();<br>        lengths.Add(input.Length);<br>        for (int i = 1; i &lt;= s &amp;&amp; lengths[i - 1] &lt; max; ++i)<br>            lengths.Add(lengths[i - 1] * cntSpec + program.Length - cntSpec);<br>        String res = "";<br><br>        for (int i = min; i &lt;= max; ++i)<br>            res += getCharAt(input, program, lengths.Count - 1, i, lengths);<br>        <br>        return res;<br>    }<br><br><br>    <br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003] Modified by diver_ru [05-Aug-2008]<br>// Powered by CodeProcessor<br></td>