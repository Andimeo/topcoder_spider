<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;algorithm&gt;<br>#include &lt;string&gt;<br>#include &lt;set&gt;<br>#include &lt;map&gt;<br>#include &lt;vector&gt;<br>#include &lt;queue&gt;<br>#include &lt;iostream&gt;<br>#include &lt;iterator&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;sstream&gt;<br><br>using namespace std;<br><br>#define SZ(c) (int)(c).size()<br>#define REP(i,n) for (int i=0,_n=(n); i &lt; _n; i++)<br>typedef long long LL;<br>typedef vector&lt;int&gt; VI;<br>typedef vector&lt;VI&gt; VVI;<br><br>class EndlessStringMachine {<br>public:<br>  VI ins;<br>  LL c1,c2;<br>  LL lens[128];<br>  string inp,pr;<br>  char get(int s, LL pos)<br>  {<br>    if (c1==1)<br>    {<br>      if (pos &lt; SZ(inp))<br>        return inp[pos];<br>      return pr[((pos-SZ(inp))%c2)+1];<br>    }<br>    if (s==0)<br>      return inp[pos];<br>    REP(i,SZ(pr))<br>    {<br>      if (pr[i]=='$')<br>      {<br>        if (pos &lt; lens[s-1])<br>          return get(s-1,pos);<br>        pos-=lens[s-1];<br>      }<br>      else<br>      {<br>        if (pos==0)<br>          return pr[i];<br>        pos--;<br>      }<br>    }<br>    return '-';<br>  }<br>  string getFragment(string input, string program, int s, int mn, int mx) {<br>    inp = input;<br>    pr=program;<br>    string res;<br>    ins.clear();<br>    REP(i,SZ(pr))<br>      if (pr[i]=='$')<br>        ins.push_back(i);<br>    c1 = SZ(ins);<br>    c2 = SZ(pr)-c1;<br>    int ss=s;<br>    LL len;<br>    if (c1&gt;1)<br>    {<br>      lens[0] = len = SZ(input);<br>      ss=0;<br>      while (len&lt;mx &amp;&amp; ss&lt;s)<br>      {<br>        ss++;<br>        lens[ss] = len = len*c1+c2;<br>      }<br>    }<br>    else<br>      len = SZ(input)+c2*s;<br>    res.clear();<br>    for (int i = mn; i &lt;= mx; i++)<br>      if (i&gt;len)<br>        res.push_back('-');<br>      else<br>      {<br>        res.push_back(get(ss,i-1));<br>      }<br>    return res;<br>  }<br>  <br><br>};<br><br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003]<br>// Powered by CodeProcessor<br></td>