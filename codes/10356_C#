<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections;<br>using System.Collections.Generic;<br> <br>public class UnluckyIntervals<br>{<br>  struct Foo : IComparable&lt;Foo&gt;<br>  {<br>    public int num;<br>    public long que;<br> <br>    public int CompareTo (Foo f)<br>    {<br>      if (this.que.CompareTo (f.que) != 0)<br>        return this.que.CompareTo (f.que);<br> <br>      return this.num.CompareTo (f.num);<br>    }<br>  }<br>  <br>  public int[] getLuckiest (int[] luckySet, int n)<br>  {<br>    List&lt;int&gt; ls = new List&lt;int&gt; (luckySet);<br>    ls.Add (0);<br>    ls.Sort ();<br> <br>    List&lt;int&gt; cnd = new List&lt;int&gt; ();<br>    foreach (int i in ls)<br>      for (int j = i - 100; j &lt;= i + 100; ++j)<br>        if (j &gt;= 1)<br>          cnd.Add (j);<br> <br>    cnd.Sort ();<br> <br>    List&lt;int&gt; cnd2 = new List&lt;int&gt; ();<br>    foreach (int i in cnd)<br>      if (cnd2.Count == 0 || cnd2[cnd2.Count - 1] != i)<br>        cnd2.Add (i);<br> <br>    cnd = cnd2;<br> <br>    Foo[] qq = new Foo[cnd.Count];<br> <br>    for (int i = 0; i &lt; cnd.Count; ++i)<br>    {<br>      qq[i].num = cnd[i];<br>      int q = cnd[i];<br>      int j = 0;<br>      while (j &lt; ls.Count &amp;&amp; ls[j] &lt; q)<br>        ++j;<br> <br>      if (j == ls.Count)<br>      {<br>        qq[i].que = long.MaxValue;<br>        continue;<br>      }<br> <br>      if (ls[j] == q)<br>      {<br>        qq[i].que = 0;<br>        continue;<br>      }<br> <br>      long a = ls[j - 1];<br>      long b = ls[j];<br> <br>      qq[i].que = (q - a) * (b - q) - 1;<br>    }<br> <br>    Array.Sort (qq);<br> <br>    int[] res = new int[n];<br>    for (int i = 0; i &lt; n; ++i)<br>      res[i] = qq[i].num;<br> <br>    return res;<br>  }<br>  <br>  <br> <br>}<br> <br> <br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003] [modified for C# by Petr]<br>// Powered by CodeProcessor<br></td>