<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;cmath&gt;<br>#include &lt;queue&gt;<br>#include &lt;vector&gt;<br>#include &lt;string&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;climits&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cstring&gt;<br>#include &lt;cassert&gt;<br>#include &lt;numeric&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;iostream&gt;<br>#include &lt;sstream&gt;<br>#include &lt;cctype&gt;<br>#include &lt;ctime&gt;<br>#include &lt;float.h&gt;<br>using namespace std;<br><br>typedef long long int64;<br>typedef vector&lt;int&gt; vi;<br><br>#define For(i,a,b) for (int i(a),_b(b); i &lt;= _b; ++i)<br>#define Ford(i,a,b) for (int i(a),_b(b); i &gt;= _b; --i)<br>#define Rep(i,n) for (int i(0),_n(n); i &lt; _n; ++i)<br>#define Repd(i,n) for (int i((n)-1); i &gt;= 0; --i)<br>template&lt;typename T&gt; inline int size(const T&amp; c) { return (int)c.size(); }<br><br>class UnluckyIntervals {<br>  public:<br>  vector &lt;int&gt; getLuckiest(vector &lt;int&gt; luckySet, int n) {<br>    set&lt;int&gt; x;<br>    For(i, 1, n)<br>      x.insert(i);<br>    Rep(i, size(luckySet)) {<br>      For(j, -n, n) {<br>        int t = luckySet[i]+j;<br>        if (t &gt; 0)<br>          x.insert(t);<br>      }<br>    }<br>    set&lt;pair&lt;int64,int&gt; &gt; y;<br>    for (set&lt;int&gt;::iterator it = x.begin(); it != x.end(); ++it) {<br>      int t = *it;<br>      int i = 0, j = -1;<br>      Rep(k, size(luckySet)) {<br>        int z = luckySet[k];<br>        if (z &lt;= t) {<br>          if (i == -1 || z &gt; i)<br>            i = z;<br>        } else {<br>          if (j == -1 || z &lt; j)<br>            j = z;<br>        }<br>      }<br>      if (i == t)<br>        y.insert(make_pair((int64)0, t));<br>      else if (j == -1)<br>        y.insert(make_pair(LLONG_MAX, t));<br>      else<br>        y.insert(make_pair(int64(t-i)*(j-t)-1, t));<br>    }<br>    vi res;<br>    for (set&lt;pair&lt;int64,int&gt; &gt;::iterator it = y.begin(); n --&gt; 0; ++it) {<br>      res.push_back(it-&gt;second);<br>    }<br>    return res;<br>  }<br>};<br><br><br><br>// Powered by FileEdit<br>// Powered by moj 4.12 [modified TZTester]<br>// Powered by CodeProcessor<br></td>