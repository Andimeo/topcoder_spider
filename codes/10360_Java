<td class="problemText" colspan="8" valign="middle" align="left">
            import java.io.*;<br>import java.util.*;<br>import java.lang.*;<br><br>public class FeudaliasBattle {<br><br>  public double getMinimumTime(int[] baseX, int[] baseY, int[] siloX, int[] siloY, int takeOffTime, int rechargeTime, int missileSpeed) {<br>    double ret = 1e12;<br>    for (int i = 0;i&lt;2;i++)<br>      for (int j = 0 ;j&lt;2;j++)<br>        for (int i1 = 0;i1&lt;2;i1++)<br>          for (int j1 = 0;j1&lt;2;j1++) if (i1!=j1){<br>            double curtime = 0.;<br>            curtime+=1.*takeOffTime/60;<br>            double t1 = Math.sqrt( 1.*(siloX[i]-baseX[i1])*(siloX[i]-baseX[i1]) + 1.*(siloY[i]-baseY[i1])*(siloY[i]-baseY[i1]))/missileSpeed;<br>            curtime+=t1;<br>            if (i==j){<br>              double t2 = 0.;<br>              t2+=rechargeTime;<br>              t2+=2.*takeOffTime/60;<br>              t2+=Math.sqrt( 1.*(siloX[j]-baseX[j1])*(siloX[j]-baseX[j1]) + 1.*(siloY[j]-baseY[j1])*(siloY[j]-baseY[j1]))/missileSpeed;<br>              curtime = Math.max(t2, curtime);<br>            }<br>            else<br>            {<br>              double t2 = 0.;<br>              t2+=1.*takeOffTime/60;<br>              t2+=Math.sqrt( 1.*(siloX[j]-baseX[j1])*(siloX[j]-baseX[j1]) + 1.*(siloY[j]-baseY[j1])*(siloY[j]-baseY[j1]))/missileSpeed;<br>              curtime = Math.max(t2, curtime);<br>            }<br>            if (curtime&lt;ret)<br>              ret = curtime;<br>          }<br>    return ret;<br>  }<br><br>}<br></td>