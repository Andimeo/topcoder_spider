<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections.Generic;<br><br>public class TheSwap {<br>  public int findMax(int n, int k) {<br>        int res = -1;<br>        Dictionary&lt;State, object&gt; visited = new Dictionary&lt;State, object&gt;();<br>        doit(n, k, ref res, visited);<br>        return res;<br>  }<br><br>    class State<br>    {<br>        int n;<br>        int k;<br><br>        public State(int n, int k)<br>        {<br>            this.n = n;<br>            this.k = k;<br>        }<br><br>        public override bool Equals(object obj)<br>        {<br>            State s = (State)obj;<br>            return n == s.n &amp;&amp; k == s.k;<br>        }<br><br>        public override int GetHashCode()<br>        {<br>            return unchecked(n * 3137 + k);<br>        }<br>    }<br><br>    private void doit(int n, int k, ref int res, Dictionary&lt;State, object&gt; visited)<br>    {<br>        if (k == 0)<br>            res = Math.Max(res, n);<br>        else<br>        {<br>            State s = new State(n, k);<br>            if (visited.ContainsKey(s))<br>                return;<br>            visited[s] = null;<br>            string st = "" + n;<br>            for (int i = 0; i &lt; st.Length; ++i)<br>            {<br>                for (int j = i + 1; j &lt; st.Length; ++j)<br>                {<br>                    if (st[j] != '0' || i &gt; 0)<br>                    {<br>                        int next = int.Parse(st.Substring(0, i) + st[j] + st.Substring(i + 1, j - i - 1) + st[i] + st.Substring(j + 1));<br>                        doit(next, k - 1, ref res, visited);<br>                    }<br>                }<br>            }<br>        }<br>    }<br><br><br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003] [modified for C# by Petr]<br>// Powered by CodeProcessor<br></td>