<td class="problemText" colspan="8" valign="middle" align="left">
            #include&lt;iostream&gt;<br>#include&lt;ctime&gt;<br>#include&lt;cstring&gt;<br>#include&lt;algorithm&gt;<br>#include&lt;sstream&gt;<br>#include&lt;string&gt;<br>#include&lt;vector&gt;<br>#include&lt;cmath&gt;<br>#include&lt;cstdio&gt;<br>#include&lt;cstdlib&gt;<br>#include&lt;fstream&gt;<br>#include&lt;cassert&gt;<br>#include&lt;numeric&gt;<br>#include&lt;set&gt;<br>#include&lt;map&gt;<br>#include&lt;queue&gt;<br>#include&lt;list&gt;<br>#include&lt;deque&gt;<br><br>using namespace std;<br>typedef vector&lt;int&gt; VI;<br>typedef vector&lt;VI&gt; VVI;<br><br>#define FOR(i,a,b) for(int i = (a); i &lt; (b); ++i)<br>#define REP(i,n) FOR(i,0,n)<br>#define FORE(it,x) for(typeof(x.begin()) it=x.begin();it!=x.end();++it)<br>#define pb push_back<br>#define all(x) (x).begin(),(x).end()<br>#define CLEAR(x,with) memset(x,with,sizeof(x))<br>#define sz size()<br><br>bool seen[1000010];<br><br>struct TheSwap <br>{<br>  int findMax(int n, int k) <br>  {<br>    queue&lt;int&gt; q;<br>    q.push(n);<br>    seen[n] = true;<br>    char buf[1024];<br>    REP(moves,k)<br>    {<br>      int qs = q.size();<br>      CLEAR(seen,0);<br>      REP(qq,qs)<br>      {<br>        int here = q.front(); q.pop();<br>        sprintf(buf, "%d", here);<br>        int len = strlen(buf);<br>        REP(i,len) FOR(j,i+1,len)<br>        {<br>          if(i == 0 &amp;&amp; buf[j] == '0') continue;<br>          swap(buf[i], buf[j]);<br>          int there = atoi(buf);<br>          if(!seen[there])<br>          {<br>            seen[there] = true;<br>            q.push(there);<br>          }<br>          swap(buf[i], buf[j]);<br>        }<br>      }<br>    }<br>    int ret = -1;<br>    while(!q.empty()) <br>    {<br>      ret = max(ret, q.front());<br>      q.pop();<br>    }<br>    return ret;<br>  }<br>};<br><br><br><br>// Powered by FileEdit<br>// Powered by moj 4.11 [modified TZTester]<br>// Powered by CodeProcessor<br></td>