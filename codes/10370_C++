<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;vector&gt;<br>#include &lt;list&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;deque&gt;<br>#include &lt;stack&gt;<br>#include &lt;bitset&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;functional&gt;<br>#include &lt;numeric&gt;<br>#include &lt;utility&gt;<br>#include &lt;sstream&gt;<br>#include &lt;iostream&gt;<br>#include &lt;iomanip&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstring&gt;<br>#include &lt;cassert&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;ctime&gt;<br> <br>using namespace std;<br>typedef long long int64;<br>#define E(c) cerr&lt;&lt;#c<br>#define Eo(x) cerr&lt;&lt;#x&lt;&lt;" = "&lt;&lt;(x)&lt;&lt;endl<br> <br>class ChuckContest {<br>public:<br>  string chuckRules(int, vector &lt;string&gt;, vector &lt;string&gt;, vector &lt;int&gt;);<br>};<br> <br>int n;<br>int bord[64];<br>int bleft[64][2], bright[64][2];<br>bool res[2][64][100010];<br>bool temp[100010];<br> <br>string ChuckContest::chuckRules(int m, vector &lt;string&gt; lb, vector &lt;string&gt; ub, vector &lt;int&gt; pt) {<br>  n = pt.size();<br>  bord[0] = 0;<br>  for (int i = 0; i&lt;n; i++) {<br>    bord[i+1] = pt[i];<br>    sscanf(lb[i].c_str(), "%d%d", &amp;bleft[i][0], &amp;bleft[i][1]);<br>    sscanf(ub[i].c_str(), "%d%d", &amp;bright[i][0], &amp;bright[i][1]);<br>  }<br> <br>  memset(res, 0, sizeof(res));<br>  res[0][0][0] = true;<br>  for (int i = 0; i&lt;n; i++) {<br>    for (int k = 0; k&lt;m; k++) {<br>      int rem = 0;<br>      int offs = bord[i]+1;<br>      int mx = bord[i+1] - bord[i];<br>      memcpy(temp, res[i&amp;1][k], sizeof(temp));<br>      bool *ptr = res[i&amp;1][k+1] + offs;<br>      for (int p = 0; p+offs&lt;100010; p++) {<br>        if (temp[p]) {<br>          if (p+20 &lt; 100010) temp[p+20] = true;<br>          rem = mx;<br>        }<br>        if (rem) {<br>          *ptr = true;<br>//          res[i&amp;1][k+1][p+offs] = true;<br>          rem--;<br>        }<br>        ptr++;<br>      }<br>    }<br>    memset(res[(i+1)&amp;1], 0, sizeof(res[0]));<br>    for (int k = 0; k&lt;=m; k++) {<br>      if (k &lt; bleft[i][0]) continue;<br>      if (k &gt; bright[i][0]) continue;<br>      int tl = (k==bright[i][0] ? bright[i][1]+1 : 0);<br>      int tr = (k==bleft[i][0] ? bleft[i][1] : 100010);<br>      for (int p = tl; p&lt;tr; p++) if (res[i&amp;1][k][p]) {<br>//        if (k &gt; bleft[i][0] || (k == bleft[i][0] &amp;&amp; p &lt; bleft[i][1])) if (k &lt; bright[i][0] || (k == bright[i][0] &amp;&amp; p &gt; bright[i][1]))<br>          res[(i+1)&amp;1][k][p] = true;<br>      }<br>    }<br>  }<br>  <br>  int ans[2] = {-1, 0};<br>  for (int k = 0; k&lt;=m; k++)<br>    for (int p = 0; p&lt;100010; p++) if (res[n&amp;1][k][p]) {<br>      if (ans[0] &lt; k || (ans[0] == k &amp;&amp; ans[1] &gt; p)) {<br>        ans[0] = k;<br>        ans[1] = p;<br>      }<br>    }<br>  if (ans[0] &lt; 0) return string();<br>  char buff[256];<br>  sprintf(buff, "%d %d", ans[0], ans[1]);<br>  return buff;<br>}<br> <br> <br>//Powered by [KawigiEdit] 2.0!<br></td>