<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.Arrays;<br><br><br>public class ChuckContest {<br>  boolean better(int p1, int t1, int p2, int t2) {<br>    if (p1 == p2) {<br>      return t1 &lt; t2;<br>    }<br>    return p1 &gt; p2;<br>  }<br>  <br>  public String chuckRules(int numProblems, String[] lowerBounds, String[] upperBounds, int[] partTimes) {<br>    int inf = 10000000;<br>    int n = partTimes.length;<br>    int T = partTimes[n - 1];<br>    int[] low1 = new int[T + 1];<br>    int[] low2 = new int[T + 1];<br>    int[] hi1 = new int[T + 1];<br>    int[] hi2 = new int[T + 1];<br>    for (int i = 0; i &lt; n; i++) {<br>      int t = partTimes[i];<br>      String[] s = lowerBounds[i].split(" ");<br>      low1[t] = Integer.parseInt(s[0]);<br>      low2[t] = Integer.parseInt(s[1]);<br>      s = upperBounds[i].split(" ");<br>      hi1[t] = Integer.parseInt(s[0]);<br>      hi2[t] = Integer.parseInt(s[1]);<br>    }<br>    int[][][] a = new int[T + 1][numProblems + 1][20];<br>    int[][][] b = new int[T + 1][numProblems + 1][20];<br>    for (int t = 0; t &lt;= T; t++) {<br>      for (int p = 0; p &lt;= numProblems; p++) {<br>        Arrays.fill(a[t][p], inf);<br>        Arrays.fill(b[t][p], 0);<br>      }<br>    }<br>    a[0][0][0] = 0;<br>    b[0][0][0] = 0;<br>    int ans1 = 0;<br>    int ans2 = inf;<br>    for (int t = 0; t &lt;= T; t++) {<br>      int t1 = t + 1;<br>      for (int p = 0; p &lt;= numProblems; p++) {<br>        for (int r = 0; r &lt; 20; r++) {<br>          if (a[t][p][r] == inf)<br>            continue;<br>          if (low1[t] &gt; 0) {<br>            if (p &lt; low1[t])<br>              continue;<br>            if (p &gt; hi1[t])<br>              continue;<br>            if (p == low1[t]) {<br>              int tt = low2[t] - 1;<br>              int dec = (tt % 20) - r;<br>              if (dec &lt; 0)<br>                dec += 20;<br>              tt -= dec;<br>              b[t][p][r] = Math.min(b[t][p][r], tt);<br>            }<br>            if (p == hi1[t]) {<br>              int tt = hi2[t] + 1;<br>              int inc = r - (tt % 20);<br>              if (inc &lt; 0)<br>                inc += 20;<br>              tt += inc;<br>              a[t][p][r] = Math.max(a[t][p][r], tt);<br>            }<br>            if (a[t][p][r] &gt; b[t][p][r])<br>              continue;<br>          }<br>          if (t == T) {<br>            if (better(p, a[t][p][r], ans1, ans2)) {<br>              ans1 = p;<br>              ans2 = a[t][p][r];<br>            }<br>            continue;<br>          }<br>          for (int s = 0; p + s &lt;= numProblems; s++) {<br>            int rr = (r + s * t1) % 20;<br>            int add = s * t1;<br>            a[t1][s + p][rr] = Math.min(a[t1][s + p][rr], a[t][p][r] + add);<br>            if (s == 0) {<br>              b[t1][s + p][rr] = Math.max(b[t1][s + p][rr], b[t][p][r] + add);<br>            } else {<br>              b[t1][s + p][rr] = inf;<br>            }<br>          }<br>        }<br>      }<br>    }<br>    if (ans1 == 0)<br>      return "";<br>    return ans1 + " " + ans2;<br>  }<br>}<br></td>