<td class="problemText" colspan="8" valign="middle" align="left">
            #include&lt;iostream&gt;<br>#include&lt;ctime&gt;<br>#include&lt;cstring&gt;<br>#include&lt;algorithm&gt;<br>#include&lt;sstream&gt;<br>#include&lt;string&gt;<br>#include&lt;vector&gt;<br>#include&lt;cmath&gt;<br>#include&lt;cstdio&gt;<br>#include&lt;cstdlib&gt;<br>#include&lt;fstream&gt;<br>#include&lt;cassert&gt;<br>#include&lt;numeric&gt;<br>#include&lt;set&gt;<br>#include&lt;map&gt;<br>#include&lt;queue&gt;<br>#include&lt;list&gt;<br>#include&lt;deque&gt;<br><br>using namespace std;<br>typedef vector&lt;int&gt; VI;<br>typedef vector&lt;VI&gt; VVI;<br><br>#define all(x) (x).begin(),(x).end()<br>#define CLEAR(x,with) memset(x,with,sizeof(x))<br><br>typedef long long LL;<br><br>map&lt;pair&lt;string,int&gt;,LL &gt; cache[1&lt;&lt;13];<br>struct PalindromePhrases <br>{<br>  int n;<br>  vector&lt;string&gt; w[2];<br>  bool isPalindrome(const string&amp; s)<br>  {<br>    int i = 0, j = int(s.size()) - 1;<br>    while(i &lt; j &amp;&amp; s[i] == s[j]) { ++i; --j; }<br>    return i &gt;= j;<br>  }<br>  int getCommonPrefix(const string&amp; a, const string&amp; b)<br>  {<br>    int ret = 0;<br>    while(ret &lt; a.size() &amp;&amp; ret &lt; b.size() &amp;&amp; a[ret] == b[ret]) ++ret;<br>    return ret;<br>  }<br>  LL go(int used, const string&amp; excess, int reversed)<br>  {<br>    if(used == (1&lt;&lt;n)-1) return isPalindrome(excess) ? 1 : 0;<br>    pair&lt;string,int&gt; key(excess, reversed);<br>    if(cache[used].count(key)) return cache[used][key];<br>    LL&amp; ret = cache[used][key];<br>    ret = 0;<br>    if(isPalindrome(excess)) ++ret;<br>    for(int i = 0; i &lt; n; ++i) if((used &amp; (1&lt;&lt;i)) == 0)<br>    {<br>      int wl = w[0][i].size();<br>      int pl = getCommonPrefix(w[reversed][i], excess);<br>      if(pl != wl &amp;&amp; pl != excess.size()) continue;<br>      if(pl &lt; excess.size())<br>        ret += go(used | (1&lt;&lt;i), excess.substr(pl), reversed);<br>      else<br>        ret += go(used | (1&lt;&lt;i), w[reversed][i].substr(pl), 1 - reversed);<br>    }<br>    return ret;<br>  }<br>  long long getAmount(vector &lt;string&gt; words) <br>  {<br>    w[0] = w[1] = words;<br>    n = w[0].size();<br>    for(int i = 0; i &lt; n; ++i)<br>      reverse(all(w[1][i]));<br>    for(int i = 0; i &lt; (1&lt;&lt;n); ++i) cache[i].clear();<br>    return go(0, "", 0) - 1;<br>  }<br>};<br><br><br><br>// Powered by FileEdit<br>// Powered by moj 4.11 [modified TZTester]<br>// Powered by CodeProcessor<br></td>