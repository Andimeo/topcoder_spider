<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br> <br>public class PalindromePhrases {<br>    boolean[][][] gotLeft;<br>    boolean[][][] gotRight;<br>    long[][][] amountLeft;<br>    long[][][] amountRight;<br>    int n;<br>    int maxLen;<br>    String[] words;<br>    String[] rwords;<br> <br>    public long getAmount(String[] _words) {<br>        words = _words;<br>        n = words.length;<br>        maxLen = 0;<br>        for (String word : words)<br>            maxLen = Math.max(maxLen, word.length());<br>        rwords = new String[n];<br>        for (int i = 0; i &lt; n; ++i) {<br>            rwords[i] = "";<br>            for (int j = 0; j &lt; words[i].length(); ++j)<br>                rwords[i] += words[i].charAt(words[i].length() - 1 - j);<br>        }<br>        amountLeft = new long[1 &lt;&lt; n][n][maxLen + 1];<br>        gotLeft = new boolean[1 &lt;&lt; n][n][maxLen + 1];<br>        amountRight = new long[1 &lt;&lt; n][n][maxLen + 1];<br>        gotRight = new boolean[1 &lt;&lt; n][n][maxLen + 1];<br>        return getLeft((1 &lt;&lt; n) - 1, 0, 0) - 1;<br>    }<br> <br>    private long getLeft(int mask, int id, int len) {<br>        if (gotLeft[mask][id][len])<br>            return amountLeft[mask][id][len];<br>        int pos = words[id].length() - len;<br>        String suffix = words[id].substring(pos);<br>        long res = 0;<br>        if (isPalindrome(suffix)) {<br>            ++res;<br>        }<br>        for (int rid = 0; rid &lt; n; ++rid)<br>            if (((mask &gt;&gt; rid) &amp; 1) != 0) {<br>                int rlen = Math.min(len, words[rid].length());<br>                if (words[id].substring(pos, pos + rlen).equals(rwords[rid].substring(0, rlen))) {<br>                    if (len &gt; rlen)<br>                        res += getLeft(mask ^ (1 &lt;&lt; rid), id, len - rlen);<br>                    else<br>                        res += getRight(mask ^ (1 &lt;&lt; rid), rid, words[rid].length() - rlen);<br>                }<br>            }<br>        gotLeft[mask][id][len] = true;<br>        amountLeft[mask][id][len] = res;<br>        return res;<br>    }<br> <br>    private long getRight(int mask, int id, int len) {<br>        if (gotRight[mask][id][len])<br>            return amountRight[mask][id][len];<br>        int pos = rwords[id].length() - len;<br>        String suffix = rwords[id].substring(pos);<br>        long res = 0;<br>        if (isPalindrome(suffix)) {<br>            ++res;<br>        }<br>        for (int rid = 0; rid &lt; n; ++rid)<br>            if (((mask &gt;&gt; rid) &amp; 1) != 0) {<br>                int rlen = Math.min(len, words[rid].length());<br>                if (rwords[id].substring(pos, pos + rlen).equals(words[rid].substring(0, rlen))) {<br>                    if (len &gt; rlen)<br>                        res += getRight(mask ^ (1 &lt;&lt; rid), id, len - rlen);<br>                    else<br>                        res += getLeft(mask ^ (1 &lt;&lt; rid), rid, words[rid].length() - rlen);<br>                }<br>            }<br>        gotRight[mask][id][len] = true;<br>        amountRight[mask][id][len] = res;<br>        return res;<br>    }<br> <br>    private boolean isPalindrome(String s) {<br>        for (int i = 0; i &lt; s.length() - 1 - i; ++i)<br>            if (s.charAt(i) != s.charAt(s.length() - 1 - i))<br>                return false;<br>        return true;<br>    }<br> <br>}<br> <br> <br>// Powered by FileEdit<br>// Powered by RETester [based on ExampleBuilder]<br>// Powered by CodeProcessor<br></td>