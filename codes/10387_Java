<td class="problemText" colspan="8" valign="middle" align="left">
            import static java.lang.Math.*;<br>import static java.math.BigInteger.*;<br>import static java.util.Arrays.*;<br>import static java.util.Collections.*;<br>import java.math.*;<br>import java.util.*;<br><br>public class BinaryFlips {<br>  public int minimalMoves(int A, int B, int K) {<br>    int n = A + B;<br>    if (A == 0) return 0;<br>    if (n &lt; K) return -1;<br>    int[] dp = new int[n + 1];<br>    Queue&lt;Integer&gt; que = new LinkedList&lt;Integer&gt;();<br>    TreeSet&lt;Integer&gt; odd = new TreeSet&lt;Integer&gt;();<br>    TreeSet&lt;Integer&gt; even = new TreeSet&lt;Integer&gt;();<br>    for (int i = 0; i &lt; n; i++) {<br>      if ((i % 2) == 0) even.add(i);<br>      else odd.add(i);<br>    }<br>    if (A % 2 == 0) even.remove(A);<br>    else odd.remove(A);<br>    que.offer(A);<br>    while (!que.isEmpty()) {<br>      int i = que.poll();<br>      if (i == 0) return dp[i];<br>      int max = i + K - 2 * max(0, K - n + i), min = i + K - 2 * min(K, i);<br>      SortedSet&lt;Integer&gt; sub;<br>      if ((i + K) % 2 == 0) {<br>        sub = even.subSet(min, max + 1);<br>      } else {<br>        sub = odd.subSet(min, max + 1);<br>      }<br>      for (int j : sub) {<br>        que.offer(j);<br>        dp[j] = dp[i] + 1;<br>      }<br>      sub.clear();<br>    }<br>    return -1;<br>  }<br>  void debug(Object...os) {<br>    System.err.println(deepToString(os));<br>  }<br>}<br></td>