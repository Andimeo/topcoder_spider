<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections;<br>using System.Collections.Generic;<br>using System.Collections.Specialized;<br>using System.Text;<br>using System.Text.RegularExpressions;<br> <br> <br>public class StrongEconomy<br>{<br>    long more(long n, long k)<br>    {<br>        if (n &gt; k)<br>            return n * (k + 1);<br>        else<br>            return (n + 1)*k;<br>    }<br> <br>  public long earn(long n, long k, long price, long target)<br>  {<br>        if ((double)n * k &gt;= target)<br>            return 1;<br>      long C = 0;<br>      long q = 0;<br>    while (C &lt; target)<br>    {<br>        long T = (Math.Min(price, target) - C + n*k - 1)/(n*k);<br>        T = Math.Max(T, 1);<br>            q += T;<br>            C += n * k * T;<br>            if (C &gt;= target) break;<br>            bool any = false;<br>            while (C &gt;= price &amp;&amp; C + n * k &lt; target)<br>            {<br>                long nv = more(n, k);<br>                long p1 = (target - C + n*k - 1)/(n*k);<br>                long p2 = (target - C + price + nv - 1)/nv;<br>                if (p2 &lt;= p1)<br>                {<br>                    if (n &gt; k)<br>                        k++;<br>                    else<br>                        n++;<br>                    C -= price;<br>                    any = true;<br>                }<br>                else break;<br>            }<br>            if (!any)<br>            {<br>                T = (target - C + n * k - 1) / (n * k);<br>                T = Math.Max(T, 1);<br>                q += T;<br>                C += n * k * T;<br>            }<br>    }<br>        return q;<br>  }<br>}<br></td>