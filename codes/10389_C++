<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;vector&gt;<br>#include &lt;list&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;deque&gt;<br>#include &lt;stack&gt;<br>#include &lt;bitset&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;functional&gt;<br>#include &lt;numeric&gt;<br>#include &lt;utility&gt;<br>#include &lt;sstream&gt;<br>#include &lt;iostream&gt;<br>#include &lt;iomanip&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;ctime&gt;<br><br>using namespace std;<br><br>class StrongEconomy {<br>public:<br>  long long earn(long long, long long, long long, long long);<br>};<br><br>long long number_of_days(long long n, long long k, long long price, long long have) {<br>  long long rest = price - have;<br>  if (rest &lt;= 0)<br>    return 0;<br>  if (n &gt; rest / k + 1)<br>    return 1;<br>  long long income = n * k;<br>  return (rest - 1) / income + 1;<br>}<br><br>long long StrongEconomy::earn(long long n, long long k, long long price, long long target) {<br>  long long result = target;<br>  long long have = 0;<br>  long long days_passed = 0;<br>  while (true) {<br>    result = min(result, days_passed + number_of_days(n, k, target, have));<br>    if (number_of_days(n, k, target, have) &lt;= 1) break;<br>    long long next_buying = number_of_days(n, k, price, have);<br>    days_passed += next_buying;<br>    have = have + n * k * next_buying - price;<br>    if (n &lt; k) ++n; else ++k;<br>  }<br>  return result;<br>}<br><br>//Powered by [KawigiEdit] 2.0!<br></td>