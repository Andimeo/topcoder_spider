<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Text;<br>using System.Collections.Generic;<br><br>public class Automaton {<br>    int[,] quickJump;<br>    string[] transitions;<br>    int numStates;<br><br>    public int numberOfMatchings(string[] transitions, int stringLength, int[] x0, int[] xa, int[] c0, int[] ca, int modifications) {<br>        int initElements = x0.Length;<br>        int letters = transitions[0].Length;<br>        int[] x = new int[modifications];<br>        int[] c = new int[modifications];<br><br>        for (int i = 0; i &lt; initElements; i++) {<br>          x[i] = x0[i] % stringLength;<br>          c[i] = c0[i] % letters;<br>        }<br><br>        for (int i = initElements; i &lt; modifications; i++) {<br>          x[i] = 0;<br>          c[i] = 0;  <br>          for (int j = i - initElements; j &lt; i; j++) {<br>            x[i] = (int) ((x[i] + xa[j - i + initElements] * (long) x[j]) % stringLength);<br>            c[i] = (int) ((c[i] + ca[j - i + initElements] * (long) c[j]) % letters);<br>          }<br>        }<br><br>        numStates = transitions.Length;<br>        this.transitions = transitions;<br><br>        quickJump = new int[4 * (stringLength + 1), numStates];<br>        buildInitial(0, 0, stringLength - 1);<br><br>        int res = 0;<br>        if (quickJump[0, 0] == numStates - 1)<br>            ++res;<br>        for (int i = 0; i &lt; modifications; ++i) {<br>            update(0, 0, stringLength - 1, x[i], c[i]);<br>            if (quickJump[0, 0] == numStates - 1)<br>                ++res;<br>        }<br>        return res;<br>    }<br><br>    void buildInitial(int root, int rl, int rr) {<br>        if (rl == rr) {<br>            for (int i = 0; i &lt; numStates; ++i)<br>                quickJump[root, i] = transitions[i][0] - 'A';<br>        } else {<br>            int rm = (rl + rr) / 2;<br>            buildInitial(root * 2 + 1, rl, rm);<br>            buildInitial(root * 2 + 2, rm + 1, rr);<br>            for (int i = 0; i &lt; numStates; ++i)<br>                quickJump[root, i] = quickJump[root * 2 + 2, quickJump[root * 2 + 1, i]];<br>        }<br>    }<br><br>    void update(int root, int rl, int rr, int x, int c) {<br>        if (rl == rr) {<br>            if (x != rl)<br>                throw new Exception();<br>            for (int i = 0; i &lt; numStates; ++i)<br>                quickJump[root, i] = transitions[i][c] - 'A';<br>        } else {<br>            int rm = (rl + rr) / 2;<br>            if (x &lt;= rm)<br>                update(root * 2 + 1, rl, rm, x, c);<br>            else<br>                update(root * 2 + 2, rm + 1, rr, x, c);<br>            for (int i = 0; i &lt; numStates; ++i)<br>                quickJump[root, i] = quickJump[root * 2 + 2, quickJump[root * 2 + 1, i]];<br>        }<br>    }<br>}<br><br><br>// Powered by FileEdit<br></td>