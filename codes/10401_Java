<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>import java.util.regex.*;<br>import java.text.*;<br>import java.math.*;<br>import java.awt.geom.*;<br> <br>public class Automaton<br>{<br>  int[] mul(int[] a, int[] b) {<br>    int n = a.length;<br>    int[] r = new int[n];<br>    for (int i = 0; i &lt; n; ++i) {<br>      r[i] = b[a[i]];<br>    }<br>    return r;<br>  }<br>  <br>  boolean accepts(int[] x, int[][] ts) {<br>    /*int[] a = new int[n];<br>    for (int i = 0; i &lt; n; ++i) {<br>      a[i] = i;<br>    }<br>    for (int i = 0; i &lt; x.length; ++i) {<br>      a = mul(a, ts[x[i]]);<br>    }<br>    return a[0] == n - 1;*/<br>    return tree[0][0] == n - 1;<br>  }<br>  <br>  int n, m;<br>  <br>  int[][] tree;<br>  <br>  void modify(int i, int[] val) {<br>    tree[i] = val;<br>    while (i &gt; 0) {<br>      i = (i - 1) / 2;<br>      tree[i] = mul(tree[2 * i + 1], tree[2 * i + 2]);<br>    }<br>  }<br> <br>  public int numberOfMatchings(String[] g, int k, int[] x0, int[] xa, int[] c0, int[] ca, int ms)<br>  {<br>    n = g.length;<br>    m = g[0].length();<br>    int iE = x0.length;<br>    <br>    int[][] ts = new int[m][n];<br>    for (int i = 0; i &lt; m; ++i) {<br>      for (int j = 0; j &lt; n; ++j) {<br>        ts[i][j] = g[j].charAt(i) - 'A';<br>      }<br>    }<br>    <br>    int[] x = new int[ms];<br>    int[] c = new int[ms];<br>    <br>    for (int i = 0; i &lt; iE; i++) {<br>      x[i] = x0[i] % k;<br>      c[i] = c0[i] % m;<br>    }<br>    <br>    int ans = 0;<br>    int tt = 0;<br>    <br>    for (int i = iE; i &lt; ms; i++) {<br>      x[i] = 0;<br>      c[i] = 0;  <br>      for (int j = i - iE; j &lt; i; j++) {<br>        x[i] = (x[i] + xa[j - i + iE] * x[j]) % k;<br>        c[i] = (c[i] + ca[j - i + iE] * c[j]) % m;<br>        ++tt;<br>      }<br>    }<br>    <br>    int[] f = new int[k];<br>    int k2 = 1;<br>    while (k2 &lt; k) {<br>      k2 *= 2;<br>    }<br>    tree = new int[2 * k2 - 1][];<br>    int[] id = new int[n];<br>    for (int i = 0; i &lt; n; ++i) {<br>      id[i] = i;<br>    }<br>    Arrays.fill(tree, id);<br>    for (int i = 0; i &lt; k; ++i) {<br>      tree[k2 - 1 + i] = ts[0];<br>    }<br>    for (int i = k2 - 2; i &gt;= 0; --i) {<br>      tree[i] = mul(tree[2 * i + 1], tree[2 * i + 2]);<br>    }<br>    if (accepts(f, ts)) {<br>      ans++;<br>    }<br>    for (int i = 0; i &lt; ms; ++i) {<br>      f[x[i]] = c[i];<br>      modify(k2 - 1 + x[i], ts[c[i]]);<br>      if (accepts(f, ts)) {<br>        ans++;<br>      }<br>    }<br>    <br>    //System.out.println(Arrays.toString(x) + " " + Arrays.toString(c));<br>    <br>    return ans;<br>  }<br>}<br>//Powered by [KawigiEditNonTest] modified by pivanof!<br></td>