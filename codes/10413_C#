<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Text;<br>using System.Collections.Generic;<br><br>public class SequenceSum {<br>//    long[] cnt;<br>    Dictionary&lt;int, int&gt;[] where;<br><br>    public long findSubstring(int[] A, int[] B, int[] C, int[] D, int[] E, int[] F, string[] Z) {<br>        List&lt;int[]&gt; all = new List&lt;int[]&gt;();<br>        all.Add(A);<br>        all.Add(B);<br>        all.Add(C);<br>        all.Add(D);<br>        all.Add(E);<br>        all.Add(F);<br>/*        Random random = new Random(541541);<br>        all.Clear();<br>        for (int i = 0; i &lt; 6; ++i) {<br>            int[] zz = new int[50];<br>            for (int j = 0; j &lt; 50; ++j)<br>                zz[j] = 0;<br>            all.Add(zz);<br>        }*/<br><br>        StringBuilder b = new StringBuilder();<br>        foreach (string s in Z)<br>            b.Append(s);<br>        int[] z = Array.ConvertAll&lt;string, int&gt;(b.ToString().Split(' '), int.Parse);<br>//        z = new int[1250];<br><br>/*        z = new int[1250];<br>        cnt = new long[7];*/<br>        where = new Dictionary&lt;int, int&gt;[4];<br>        int[] now = new int[]{0};<br>        for (int i = 0; i &lt; 3; ++i) {<br>            now = mult(now, all[i]);<br>            where[i + 1] = new Dictionary&lt;int, int&gt;();<br>            for (int j = now.Length - 1; j &gt;= 0; --j)<br>                where[i + 1][now[j]] = j;<br>        }<br><br>        return doit(all, z);<br>/*        for (int i = 0; i &lt; 7; ++i)<br>            Console.WriteLine(cnt[i]);<br>        return 0;*/<br>    }<br><br>    int[] mult(int[] a, int[] b) {<br>        int[] res = new int[a.Length * b.Length];<br>        for (int i = 0; i &lt; a.Length; ++i)<br>            for (int j = 0; j &lt; b.Length; ++j)<br>                res[i * b.Length + j] = a[i] + b[j];<br>        return res;<br>    }<br><br>    long doit(List&lt;int[]&gt; all, int[] z) {<br>        if (all.Count == 0) {<br>            if (z.Length == 1 &amp;&amp; z[0] == 0)<br>                return 0;<br>            else<br>                return -1;<br>        }<br>        if (z.Length == 1 &amp;&amp; all.Count &lt;= 3) {<br>            if (where[all.Count].ContainsKey(z[0])) {<br>                return where[all.Count][z[0]];<br>            } else {<br>                return -1;<br>            }<br>        }<br>        int[] last = all[all.Count - 1];<br>        long res = -1;<br>        for (int shift = 0; shift &lt; last.Length; ++shift) {<br>            int[] nz = new int[(z.Length - 1 + shift) / last.Length + 1];<br>            int ppos = -1;<br>            int at = shift;<br>            bool ok = true;<br>            for (int j = 0; j &lt; z.Length; ++j) {<br>                int cpos = (j + shift) / last.Length;<br>                if (cpos == ppos) {<br>                    if (z[j] - last[at] != nz[cpos]) {<br>                        ok = false;<br>                        break;<br>                    }<br>                } else {<br>                    nz[cpos] = z[j] - last[at];<br>                }<br>                ppos = cpos;<br>                at = at + 1;<br>                if (at == last.Length)<br>                    at = 0;<br>            }<br>            if (ok) {<br>                all.RemoveAt(all.Count - 1);<br>/*                for (int i = 0; i &lt; nz.Length; ++i) {<br>                    Console.Write(nz[i] + " ");<br>                }<br>                Console.WriteLine();*/<br>                long r = doit(all, nz);<br>                if (r &gt;= 0) {<br>                    r = r * last.Length + shift;<br>                    if (res &lt; 0 || r &lt; res)<br>                        res = r;<br>                }<br>                all.Add(last);<br>            }<br>        }<br>        return res;<br>    }<br>}<br><br><br>// Powered by FileEdit<br></td>