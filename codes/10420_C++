<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;vector&gt;<br>#include &lt;list&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;deque&gt;<br>#include &lt;queue&gt;<br>#include &lt;stack&gt;<br>#include &lt;bitset&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;functional&gt;<br>#include &lt;numeric&gt;<br>#include &lt;utility&gt;<br>#include &lt;sstream&gt;<br>#include &lt;iostream&gt;<br>#include &lt;iomanip&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cctype&gt;<br>#include &lt;string&gt;<br>#include &lt;cstring&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;ctime&gt;<br><br>using namespace std;<br><br>#define SIZE(X) ((int)(X.size()))<br>#define MP(X,Y) make_pair(X,Y)<br>typedef long long int64;<br>#define two(X) (1&lt;&lt;(X))<br>#define contain(S,X) (((S)&amp;two(X))!=0)<br>template&lt;class T&gt; inline T gcd(T a,T b)<br>  {if(a&lt;0)return gcd(-a,b);if(b&lt;0)return gcd(a,-b);return (b==0)?a:gcd(b,a%b);}<br><br>const int GLAST[]={<br>1,2,4,4,8,16,16,16,32,60,<br>106,103,172,396,169,123,160,323,224,354,<br>435,154,217,271,424,152,624,159,202,552,<br>165,463,387,389,1573,117,478,121,364,283,<br>257,124,186,209,157,125,483,109,363,265,<br>184,112,854,3093,181,112,145,114,568,115,<br>456,220,1117,135,183,140,260,89,316,302,<br>265,1969,300,89,1137,89,402,297,517,85,<br>1939,288,146,2861,453,126,281,397,114,2147,<br>506,367,885,85,706,190,501,633,566,66,<br>98,251,126,66,1158,246,126,2280,145,328,<br>256,275,164,258,259,111,2644,255,849,261,<br>587,65,386,65,98,1045,39,43,453,90,<br>39,21,28,124,39,233,127,21,117,21,<br>28,21,277,2147,26,43,34,21,61,105,<br>146,44,26,61,34,21,164,90,34,21,<br>52,21,163,43,26,71,108,105,71,43,<br>34,21,26,61,214,21,26,21,108,21,<br>318,509,78,170,82,90,121,44,26,21,<br>48,18,90,18,22,18,21,18,22,33,<br>187,18,22,18,21,18,109,18,43,18,<br>22,117,21,78,44,18,21,33,22,78,<br>90,18,22,17,21,44,108,17,21,94,<br>47,17,43,17,22,33,21,17,145,17,<br>47,233,116,17,43,17,22,17,90,94,<br>141,17,21,33,8,8,40,18,8,8,<br>8,8,8,8,8,34,8,8,18,40,<br>87,255,8,8,8,8,8,34,8,18,<br>62,8,8,8,87,8,8,8,180,8,<br>8,8,8,18,18,8,8,32,8,8,<br>8,8,8,8,8,181,108,8,164,8,<br>8,8,205,37,40,18,8,8,8,8,<br>18,33,8,18,8,8,8,37,8,18,<br>8,8,8,8,8,8,8,8,8,34,<br>40,18,18,8,38,8,8,8,8,8,<br>8,8,8,8,8,8,18,8,8,40,<br>8,8,8,8,8,18,8,18,87,8,<br>8,8,8,261,8,8,34,8,224,8,<br>8,240,40,13,8,6,8,6,8,59,<br>8,6,8,6,18,6,40,6,8,6,<br>8,13,8,29,40,6,8,219,8,31,<br>87,6,18,6,8,6,18,29,62,13,<br>8,6,8,6,40,13,8,6,8,6,<br>8,59,8,6,34,6,8,13,87,6,<br>8,220,8,6,41,29,18,6,8,40,<br>8,6,87,6,8,13,8,6,40,6,<br>8,6,8,6,396,6,40,33,8,32,<br>8,6,8,13,41,221,8,44,8,424,<br>40,6,141,6,41,6,8,26,18,6,<br>8,13,230,6,181,6,8,6,43,6,<br>18,29,8,25,48,6,8,6,40,13,<br>17,3,32,3,4,3,30,17,4,3,<br>4,3,4,3,17,3,4,3,4,3,<br>4,13,4,24,4,3,4,3,17,4,<br>4,3,4,4,4,13,4,3,4,3,<br>4,3,17,3,4,3,4,3,4,13,<br>4,4,4,3,4,3,17,3,4,3,<br>48,3,4,13,43,3,4,3,4,348,<br>17,3,4,23,4,3,4,3,4,4,<br>4,4,4,3,17,3,4,3,4,3,<br>4,3,4,3,4,3,4,3,17,25,<br>4,3,4,3,4,4,18,3,4,24,<br>4,32,17,3,4,3,4,4,4,13,<br>4,116,4,4,4,3,17,3,4,3,<br>4,3,4,17,4,3,4,3,4,4,<br>17,3,4,3,43,9,33,3,4,3,<br>4,4,4,3,4,3,4,3,4,3,<br>4,13,4,3,226,3,4,3,17,25,<br>4,19,4,3,4,17,4,4,4,25,<br>4,3,31,9,4,3,42,3,4,13,<br>4,3,4,3,4,3,17,3,4,3,<br>4,19,4,3,21,4,4,3,4,3,<br>4,3,4,3,43,3,4,3,4,25,<br>4,9,4,4,17,3,4,4,4,3,<br>4,13,33,3,4,3,4,3,17,21,<br>4,3,4,31,4,13,4,3,4,4,<br>4,3,17,3,4,3,4,3,3,17,<br>4,3,3,3,4,3,13,3,4,3,<br>4,19,4,7,3,23,4,3,3,3,<br>17,41,3,3,18,3,3,7,4,3,<br>3,19,4,3,3,4,41,3,3,9,<br>4,3,3,3,43,3,3,3,4,3,<br>3,3,4,3,4,62,4,4,3,3,<br>4,19,17,3,4,4,3,3,4,3,<br>23,4,4,3,3,3,17,3,3,3,<br>4,3,24,17,43,3,3,3,4,3,<br>13,3,4,3,3,3,4,3,4,3,<br>4,3,3,3,21,31,3,4,4,4,<br>3,7,4,9,25,3,4,3,13,21,<br>4,3,3,3,4,17,9,3,4,3,<br>3,3,17,3,3,3,33,3,3,7,<br>4,3,3,4,4,3,3,3,4,3,<br>3,3,4,7,4,3,4,3,4,3,<br>4,4,3,3,4,3,3,17,4,3,<br>3,3,4,3,3,3,4,3,32,4,<br>48,7,3,3,43,3,3,3,17,3,<br>3,3,4,3,3,7,4,4,3,3,<br>4,3,52,3,4,3,4,3,19,17,<br>3,3,4,3,3,4,17,3,3,3,<br>4,3,3,7,4,3,3,22,4,3,<br>17,3,4,4,3,3,4,7,3,3,<br>4,3,4,3,17,3,3,3,4,3,<br>3,17,2,1,2,6,2,1,4,1,<br>2,1,7,1,2,1,2,3,2,13,<br>2,1,2,1,2,1,7,1,2,1,<br>4,1,2,6,4,68,2,1,2,1,<br>2,1,2,3,2,1,2,5,2,1,<br>2,1,4,1,2,3,2,1,2,1,<br>2,13,2,1,2,1,2,1,7,3,<br>2,1,2,1,2,1,8,1,2,1,<br>4,1,17,1,2,1,2,1,2,6,<br>2,3,2,1,2,1,7,1,2,1,<br>2,69,2,1,2,3,4,1,2,1,<br>2,1,2,1,2,1,2,6,4,1,<br>2,1,2,1,17,1,2,3,2,1,<br>2,6,2,1,18,1,2,1,7,1,<br>4,1,2,3,2,6,2,1,2,1,<br>2,1,4,5,2,1,2,1,2,6,<br>2,3,2,1,2,3,2,71,2,1,<br>2,1,2,6,2,1,4,1,4,1,<br>2,1,2,1,2,1,2,13,2,1,<br>2,1,2,1,7,3,2,1,2,1,<br>105,6,2,1,2,1,4,1,7,1,<br>2,1,2,3,2,6,2,1,2,1,<br>2,1,7,1,4,1,2,1,4,6,<br>2,3,2,73,2,1,7,3,2,1,<br>2,1,2,6,2,1,2,1,2,3,<br>17,1,2,1,2,1,2,6,2,1,<br>4,1,2,3,2,1,2,1,2,9,<br>2,1,2,1,2,1,2,1,2,1,<br>2,3,4,1,2,6,2,1,2,1,<br>2,1,2,1,2,1,4,1,2,74,<br>2,1,2,1,2,3,2,3,2,1,<br>2,1,2,1,2,1,2,1,4,1,<br>2,1,2,1,2,1,4,1,2,1,<br>2,1,4,1,2,3,2,1,2,1,<br>2,6,2,5,4,1,2,1,7,1,<br>2,1,2,3,2,1,2,3,2,1,<br>2,1,2,1,2,75,2,1,4,1,<br>4,1,2,1,2,1,2,1,2,3,<br>8,1,2,1,2,1,4,1,2,1,<br>2,1,2,1,2,3,2,6,2,1,<br>2,1,2,1,4,1,2,3,2,1,<br>2,6,2,3,47,1,2,1,2,1,<br>2,1,4,1,2,1,2,1,4,1,<br>2,3,2,1,2,1,2,1,8,1,<br>4,1,2,1,2,1,2,1,2,3,<br>2,1,2,6,2,1,2,3,4,1,<br>7,1,2,1,107,1,2,6,2,1,<br>4,1,2,1,7,1,4,1,2,3,<br>2,6,2,3,2,1,2,1,2,1,<br>2,5,2,1,4,1,2,77,2,1,<br>2,3,2,1,2,1,2,1,2,6,<br>2,1,4,1,2,1,6,1,2,1,<br>5,3,4,1,1,1,2,1,1,1,<br>7,1,1,1,4,1,1,1,2,1,<br>3,1,2,3,6,1,2,3,1,1,<br>2,1,1,1,2,1,1,1,4,1,<br>1,1,2,94,1,3,2,1,1,1,<br>2,1,6,1,2,1,3,1,2,1,<br>1,1,2,1,3,1,2,1,1,1,<br>2,1,1,3,2,3,95,1,2,1,<br>6,1,2,1,1,1,4,1,1,1,<br>4,1,1,1,2,1,1,1,2,3,<br>1,1,2,1,1,1,2,1,13,96,<br>2,3,1,1,2,1,1,3,2,1,<br>1,1,7,1,3,1,2,3,1,1,<br>2,1,1,3,2,1,6,1,2,1,<br>1,1,2,1,1,3,4,1,1,1,<br>7,1,5,1,2,1,1,1,2,1,<br>3,1,2,1,6,1,2,1,1,3,<br>2,3,1,1,2,97,1,1,7,1,<br>1,1,4,1,1,1,2,1,1,1,<br>4,1,6,1,2,1,3,1,2,3,<br>1,1,2,5,1,1,7,1,3,1,<br>2,1,1,1,2,1,1,3,2,1,<br>6,3,8,1,1,1,2,1,1,1,<br>2,1,3,1,17,1,1,1,2,1,<br>1,5,2,3,1,1,2,1,6,1,<br>2,1,1,3,2,1,1,1,2,1,<br>1,1,2,1,3,1,18,1,1,1,<br>2,1,1,1,2,3,6,1,2,1,<br>1,1,2,1,1,1,2,1,1,3,<br>4,1,1,1,2,1,1,1,2,1,<br>1,1,4,1,5,1,2,99,3,1,<br>2,3,1,1,2,1,3,1,2,3,<br>1,1,2,1,1,3,2,1,1,1,<br>2,1,6,1,2,1,1,3,4,1,<br>100,1,8,1,1,1,2,1,1,1,<br>2,1,3,1,2,1,1,5,2,1,<br>1,3,2,3,1,1,2,1,1,1,<br>2,1,1,101,4,1,1,1,2,3,<br>1,1,2,1,1,1,2,1,6,1,<br>4,1,1,1,2,1,1,3,2,1,<br>1,1,7,1,1,1,2,1,3,1,<br>2,1,3,1,2,9,1,1,2,1,<br>1,3,2,1,1,1,2,1,1,1,<br>2,1,1,3,4,1,1,1,2,102,<br>1,1,4,1,26,1,2,1,1,1,<br>2,3,1,1,2,1,1,1,7,1,<br>3,1,2,3,1,1,2,1,1,3,<br>2,1,6,1,2,1,1,1,4,1,<br>1,1,2,1,3,1,2,3,1,1,<br>2,1,1,1,2,1,3,1,2,1,<br>6,1,2,1,1,3};<br><br>class TheAlmostLuckyNumbers<br>{<br>public:<br>  int n;<br>  int64 A[10000];<br>  vector&lt;pair&lt;int64,int64&gt; &gt; Q;<br>  map&lt;int64,int64&gt; M;<br>  int64 count(int64 a, int64 b)<br>  {<br>    n=0;<br>    for (int L=1;L&lt;=10;L++)<br>      for (int set=0;set&lt;two(L);set++)<br>      {<br>        int64 key=0;<br>        for (int i=0;i&lt;L;i++)<br>          if (contain(set,i))<br>            key=key*10+4;<br>          else<br>            key=key*10+7;<br>        A[n++]=key;<br>      }<br>    sort(A,A+n);<br>    a--;<br>    Q.clear();<br>    M.clear();<br>    Q.push_back(MP(1,1));<br>    M[1]+=1;<br>    for (int step=0;step&lt;n;step++)<br>    {<br>      for (int i=0;i&lt;GLAST[step];i++)<br>      {<br>        int64 state=Q[i].first;<br>        int64 multiply=Q[i].second;<br>        int64 v1=state;<br>        int64 v2=A[step]/gcd(A[step],state);<br>        if (v1&lt;=100000LL*100000LL/v2)<br>          M[v1*v2]-=multiply;<br>      }<br>      Q.clear();<br>      for (map&lt;int64,int64&gt;::iterator it=M.begin();it!=M.end();++it)<br>        if (it-&gt;second!=0)<br>          Q.push_back(*it);<br>    }<br>    int64 R=0;<br>    for (int i=SIZE(Q)-1;i&gt;=0;i--)<br>    {<br>      int64 state=Q[i].first;<br>      int64 multiply=Q[i].second;<br>      R+=multiply*(b/state-a/state);<br>    }<br>    R=(b-a)-R;<br>    return R;<br>  }<br>};<br></td>