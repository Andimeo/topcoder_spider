<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br> <br>public class TheAlmostLuckyNumbers {<br>    public long count(long a, long b) {<br>        Set&lt;Long&gt; prev = new HashSet&lt;Long&gt;();<br>        for (int len = 1; len &lt;= 10; ++len)<br>            for (int i = 0; i &lt; (1 &lt;&lt; len); ++i) {<br>                long z = 0;<br>                for (int j = 0; j &lt; len; ++j) {<br>                    z = z * 10 + 4;<br>                    if ((i &amp; (1 &lt;&lt; j)) != 0)<br>                        z += 3;<br>                }<br>                boolean ok = true;<br>                for (long x : prev)<br>                    if (z % x == 0) {<br>                        ok = false;<br>                        break;<br>                    }<br>                if (ok)<br>                    prev.add(z);<br>            }<br>        Long[] data = prev.toArray(new Long[0]);<br>        Arrays.sort(data, new Comparator&lt;Long&gt;() {<br>            public int compare(Long aLong, Long aLong1) {<br>                if (aLong &gt; aLong1)<br>                    return -1;<br>                else if (aLong &lt; aLong1)<br>                    return 1;<br>                else<br>                    return 0;<br>            }<br>        });<br>        long[] dl = new long[data.length];<br>        for (int i = 0; i &lt; data.length; ++i)<br>            dl[i] = data[i];<br>        return (b - get(dl, b, 1, 0)) - (a - 1 - get(dl, a - 1, 1, 0));<br>    }<br> <br>    long gcd(long a, long b) {<br>        while (b &gt; 0) {<br>            long t = a % b;<br>            a = b;<br>            b = t;<br>        }<br>        return a;<br>    }<br> <br>    static final long MAX = 10000000000L;<br> <br>    long lcm(long a, long b) {<br>        long z = a / gcd(a, b);<br>        if (MAX / z &lt; b)<br>            return MAX + 1;<br>        else<br>            return b * z;<br>    }<br> <br>    private long get(long[] d, long max, long cur, int at) {<br>        long res = max / cur;<br>        for (int nxt = at; nxt &lt; d.length; ++nxt) {<br>            long ncur = lcm(cur, d[nxt]);<br>            if (ncur &lt;= max) {<br>                res -= get(d, max, ncur, nxt + 1);<br>            }<br>        }<br>        return res;<br>    }<br> <br>}<br> <br> <br>// Powered by FileEdit<br>// Powered by RETester [based on ExampleBuilder]<br>// Powered by CodeProcessor<br></td>