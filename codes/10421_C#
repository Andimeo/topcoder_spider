<td class="problemText" colspan="8" valign="middle" align="left">
            using System; <br>using System.Collections; <br>using System.Collections.Generic; <br>using System.Collections.Specialized; <br>using System.Text; <br>using System.Text.RegularExpressions; <br> <br>public class TheProduct {<br>    public long maxProduct(int[] numbers, int k, int maxDist) <br>    {<br>        int n = numbers.Length;<br>        long[,] dpMax = new long[n, k + 1];<br>        long[,] dpMin = new long[n, k + 1];<br><br>        for (int i = 0; i &lt; n; i++)<br>        {<br>            for (int j = 0; j &lt; k + 1; j++)<br>            {<br>                if (j == 0)<br>                {<br>                    dpMax[i, j] = dpMin[i, j] = 1;<br>                }<br>                else<br>                {<br>                    dpMax[i, j] = long.MinValue / 51;<br>                    dpMin[i, j] = long.MaxValue / 51;<br>                }<br>            }<br>        }<br>        dpMax[0, 1] = dpMin[0, 1] = numbers[0];<br><br>        for (int i = 1; i &lt; n; i++)<br>        {<br>            for (int j = 1; j &lt;= i + 1 &amp;&amp; j &lt;= k; j++)<br>            {<br>                for (int p = i - 1; p &gt;= j - 2 &amp;&amp; p &gt;= i - maxDist &amp;&amp; p &gt;= 0; p--)<br>                {<br>                    dpMax[i, j] = Math.Max(dpMax[i, j], Math.Max(dpMax[p, j - 1] * numbers[i], dpMin[p, j - 1] * numbers[i]));<br>                    dpMin[i, j] = Math.Min(dpMin[i, j], Math.Min(dpMax[p, j - 1] * numbers[i], dpMin[p, j - 1] * numbers[i]));<br>                }<br>            }<br>        }<br><br>        //for (int i = 0; i &lt; n; i++)<br>        //{<br>        //    for (int j = 0; j &lt; k + 1; j++)<br>        //    {<br>        //        Console.WriteLine("{0} {1} max: {2}  min:{3}", i, j, dpMax[i, j], dpMin[i, j]);<br>        //    }<br>        //}<br><br>        long ret = long.MinValue / 2;<br>        for (int i =k - 1; i &lt; n; i++)<br>        {<br>            if (dpMax[i, k] &gt; ret)<br>                ret = dpMax[i, k];<br>            if (dpMin[i, k] &gt; ret)<br>                ret = dpMin[i, k];<br>        }<br>        return ret;<br>    }<br><br><br>} <br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003] [modified for C# by Petr]<br>// Powered by CodeProcessor<br></td>