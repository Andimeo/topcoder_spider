<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>import java.util.regex.*;<br>import java.text.*;<br>import java.math.*;<br>import java.awt.geom.*;<br> <br>public class FractalWheels<br>{<br>  int[] u, v;<br>  int n;<br>  ArrayList&lt;Integer&gt;[] edges;<br>  <br>  int[] check(int f) {<br>    int[] col = new int[n];<br>    Arrays.fill(col, -1);<br>    ArrayList&lt;ArrayList&lt;Integer&gt;&gt; ls = new ArrayList&lt;ArrayList&lt;Integer&gt;&gt;();<br>    ArrayList&lt;Integer&gt; start = new ArrayList&lt;Integer&gt;();<br>    start.add(f);<br>    col[f] = 0;<br>    ls.add(start);<br>    for (int i = 0; i &lt; ls.size(); ++i) {<br>      ArrayList&lt;Integer&gt; l = ls.get(i);<br>      ArrayList&lt;Integer&gt; nl = new ArrayList&lt;Integer&gt;();<br>      for (int j : l) {<br>        for (int k : edges[j]) {<br>          if (col[k] == -1) {<br>            col[k] = i + 1;<br>            nl.add(k);<br>          }<br>        }<br>      }<br>      if (!nl.isEmpty()) {<br>        ls.add(nl);<br>      }<br>    }<br>    int d = ls.size() - 2;<br>    if (d &lt; 0) {<br>      return null;<br>    }<br>    int s = ls.get(1).size();<br>    if (s &lt; 3) {<br>      return null;<br>    }<br>    for (int i = 1, p = s; i &lt; ls.size(); ++i) {<br>      if (ls.get(i).size() != p) {<br>        return null;<br>      }<br>      p *= s;<br>    }<br>    int[] sub = new int[n];<br>    ArrayList&lt;Integer&gt;[] nsa = new ArrayList[n];<br>    int[] ps = new int[n];<br>    for (int i = 0; i &lt; n; ++i) {<br>      if (col[i] == 0) {<br>        continue;<br>      }<br>      if (col[i] == -1) {<br>        return null;<br>      }<br>      int p = -1;<br>      int count = 0;<br>      ArrayList&lt;Integer&gt; ns = new ArrayList&lt;Integer&gt;();<br>      for (int j : edges[i]) {<br>        if (col[j] == col[i]) {<br>          ns.add(j);<br>        } else if (col[j] == col[i] - 1) {<br>          if (p == -1) {<br>            p = j;<br>          } else {<br>            return null;<br>          }<br>        } else {<br>          count++;<br>        }<br>      }<br>      if (count != (col[i] == ls.size() - 1 ? 0 : s) || p == -1 || ns.size() != 2) {<br>        return null;<br>      }<br>      nsa[i] = ns;<br>      ps[i] = p;<br>    }<br>    boolean[] col2 = new boolean[n];<br>    for (int i = 0; i &lt; n; ++i) {<br>      if (col[i] == 0) {<br>        continue;<br>      }<br>      for (int j : nsa[i]) {<br>        if (ps[i] != ps[j]) {<br>          return null;<br>        }<br>      }<br>      if (!col2[i]) {<br>        if (dfs(i, col2, nsa) != s) {<br>          return null;<br>        }<br>      }<br>    }<br>    return new int[] {d, s};<br>  }<br>  <br>  int dfs(int i, boolean[] col, ArrayList&lt;Integer&gt;[] es) {<br>    if (col[i]) {<br>      return 0;<br>    }<br>    col[i] = true;<br>    int r = 1;<br>    for (int j : es[i]) {<br>      r += dfs(j, col, es);<br>    }<br>    return r;<br>  }<br>  <br>  public int[] describeWheel(int N, String[] Edges)<br>  {<br>    this.n = N;<br>    StringBuilder sb = new StringBuilder();<br>    for (String s : Edges) {<br>      sb.append(s);<br>    }<br>    String[] tmp1 = sb.toString().split(",");<br>    u = new int[tmp1.length];<br>    v = new int[tmp1.length];<br>    edges = new ArrayList[n];<br>    for (int i = 0; i &lt; n; ++i) {<br>      edges[i] = new ArrayList&lt;Integer&gt;();<br>    }<br>    for (int i = 0; i &lt; tmp1.length; ++i) {<br>      String[] tmp2 = tmp1[i].split(" ");<br>      u[i] = Integer.parseInt(tmp2[0]);<br>      v[i] = Integer.parseInt(tmp2[1]);<br>      edges[u[i]].add(v[i]);<br>      edges[v[i]].add(u[i]);<br>    }<br>    for (int i = 0; i &lt; n; ++i) {<br>      int[] ar = check(i);<br>      if (ar != null) {<br>        return ar;<br>      }<br>    }<br>    return new int[0];<br>  }<br>}<br>//Powered by [KawigiEditNonTest] modified by pivanof!<br></td>