<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;vector&gt;<br>#include &lt;string&gt;<br>using namespace std;<br> <br>bool check(string text, string w, int start)<br>{<br>  int second = start+1;<br>  while (1)<br>  {<br>    while (second &lt; text.size() &amp;&amp; text[second] != w[1])<br>      second++;<br>    if (second == text.size())<br>      return false;<br> <br>    int step = second - start;<br>    int index = 2; int pos = second + step;<br>    while (pos &lt; text.size() &amp;&amp; index &lt; w.size())<br>    {<br>      if (w[index] != text[pos])<br>        break;<br>      index ++;<br>      pos +=step;<br>    }<br>    <br>    if (index == w.size())<br>      return true;<br> <br>    second++;<br>  }<br>}<br> <br>struct WordSpaces<br>{<br>  vector&lt;int&gt; find(string text, vector&lt;string&gt; words)<br>  {<br>    vector&lt;int&gt; ret;<br> <br>    for (int i=0;i&lt;words.size();i++)<br>    {<br>      string w = words[i];<br>      int start = 0;<br> <br>      while (1)<br>      {<br>        while (start &lt; text.size() &amp;&amp; text[start] != w[0])<br>          start++;<br>        if (start == text.size())<br>        {<br>          ret.push_back(-1);<br>          break;<br>        }<br> <br>        if (w.size() == 1 || check(text, w, start))<br>        {<br>          ret.push_back(start);<br>          break;<br>        }<br> <br>        start++;<br>      }<br>    }<br> <br>    return ret;<br>  }<br>};<br></td>