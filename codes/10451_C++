<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;cmath&gt;<br>#include &lt;queue&gt;<br>#include &lt;vector&gt;<br>#include &lt;string&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cstring&gt;<br>#include &lt;cassert&gt;<br>#include &lt;numeric&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;iostream&gt;<br>#include &lt;sstream&gt;<br>#include "float.h"<br>#include &lt;ctime&gt;<br>using namespace std;<br><br>class MazeMaker {<br>public:<br>  int longestPath(vector &lt;string&gt; maze, int startRow, int startCol, vector &lt;int&gt; moveRow, vector &lt;int&gt; moveCol);<br>};<br><br>#define FOR(i, a, b) for (int i(a), _b(b); i &lt;= _b; ++i)<br>#define FORD(i,a,b) for (int i(a),_b(b); i &gt;= _b; --i)<br>#define REP(i,n) for (int i(0),_n(n); i &lt; _n; ++i)<br>#define REPD(i,n) for (int i((n)-1); i &gt;= 0; --i)<br><br>template&lt;typename T&gt; inline int size(const T&amp; c) { return (int)c.size(); }<br><br>int MazeMaker::longestPath(vector &lt;string&gt; maze, int startRow, int startCol, vector &lt;int&gt; moveRow, vector &lt;int&gt; moveCol) {    <br>  int r = size(maze), c = size(maze[0]);<br>  vector&lt;vector&lt;int&gt; &gt; dist(r, vector&lt;int&gt;(c, -1));<br>  queue&lt;int&gt; que;<br>  dist[startRow][startCol] = 0;<br>  que.push(startRow); que.push(startCol);<br>  while (!que.empty()) {<br>    int i = que.front(); que.pop();<br>    int j = que.front(); que.pop();<br>    REP(dir, size(moveRow)) {<br>      int ni = i+moveRow[dir], nj = j+moveCol[dir];<br>      if (0 &lt;= ni &amp;&amp; ni &lt; r &amp;&amp; 0 &lt;= nj &amp;&amp; nj &lt; c &amp;&amp; maze[ni][nj] == '.' &amp;&amp; dist[ni][nj] == -1) {<br>        dist[ni][nj] = dist[i][j]+1;<br>        que.push(ni); que.push(nj);<br>      }<br>    }<br>  }<br>  int res = 0;<br>  REP(i, r) REP(j, c)<br>    if (maze[i][j] == '.')<br>      if (dist[i][j] == -1)<br>        return -1;<br>      else<br>        res = max(res, dist[i][j]);<br>  return res;<br>}<br><br><br><br>// Powered by FileEdit<br>// Powered by moj 4.12 [modified TZTester]<br>// Powered by CodeProcessor<br></td>