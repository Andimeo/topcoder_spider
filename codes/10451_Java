<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br> <br>public class MazeMaker {<br>    public int longestPath(String[] maze, int startRow, int startCol, int[] moveRow, int[] moveCol) {<br>        int height = maze.length;<br>        int width = maze[0].length();<br>        int[] qrow = new int[height * width];<br>        int[] qcol = new int[height * width];<br>        int qh = 1;<br>        int qt = 0;<br>        qrow[0] = startRow;<br>        qcol[0] = startCol;<br>        int[][] mark = new int[height][width];<br>        mark[startRow][startCol] = 1;<br>        while (qt &lt; qh) {<br>            int crow = qrow[qt];<br>            int ccol = qcol[qt];<br>            ++qt;<br>            for (int i = 0; i &lt; moveRow.length; ++i) {<br>                int nrow = crow + moveRow[i];<br>                int ncol = ccol + moveCol[i];<br>                if (nrow &gt;= 0 &amp;&amp; nrow &lt; height &amp;&amp; ncol &gt;= 0 &amp;&amp; ncol &lt; width) {<br>                    if (maze[nrow].charAt(ncol) == '.' &amp;&amp; mark[nrow][ncol] == 0) {<br>                        mark[nrow][ncol] = mark[crow][ccol] + 1;<br>                        qrow[qh] = nrow;<br>                        qcol[qh] = ncol;<br>                        ++qh;<br>                    }<br>                }<br>            }<br>        }<br>        int res = 0;<br>        for (int row = 0; row &lt; height; ++row)<br>            for (int col = 0; col &lt; width; ++col)<br>                if (maze[row].charAt(col) == '.') {<br>                    if (mark[row][col] == 0)<br>                        return -1;<br>                    res = Math.max(res, mark[row][col] - 1);<br>                }<br>        return res;<br>    }<br>}<br> <br> <br>// Powered by FileEdit<br>// Powered by RETester [based on ExampleBuilder]<br>// Powered by CodeProcessor<br></td>