<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections.Generic;<br><br>public class PaperAndPaint {<br>    class Rectangle<br>    {<br>        public long x1;<br>        public long y1;<br>        public long x2;<br>        public long y2;<br>        public Rectangle nextSameTop;<br>        public Rectangle nextSameBottom;<br><br>        public Rectangle Clone()<br>        {<br>            Rectangle r = new Rectangle();<br>            r.x1 = x1;<br>            r.x2 = x2;<br>            r.y1 = y1;<br>            r.y2 = y2;<br>            return r;<br>        }<br><br>        public void Transform(long kx, long ax, long ky, long ay)<br>        {<br>            x1 = x1 * kx + ax;<br>            x2 = x2 * kx + ax;<br>            if (kx &lt; 0)<br>            {<br>                long t = x1;<br>                x1 = x2;<br>                x2 = t;<br>            }<br>            y1 = y1 * ky + ay;<br>            y2 = y2 * ky + ay;<br>            if (ky &lt; 0)<br>            {<br>                long t = y1;<br>                y1 = y2;<br>                y2 = t;<br>            }<br>        }<br>    }<br><br>  public long computeArea(int width, int height, int[] xfold, int[] cnt, int[] x1, int[] y1, int[] x2, int[] y2) {<br>        List&lt;Rectangle&gt; all = new List&lt;Rectangle&gt;();<br>        for (int i = 0; i &lt; xfold.Length; ++i)<br>        {<br>            List&lt;Rectangle&gt; bottom = GetRectangles(width - xfold[i], height, cnt[i], x1[i], y1[i], x2[i], y2[i]);<br>            foreach (Rectangle r in bottom)<br>                r.Transform(1, xfold[i], 1, 0);<br>            List&lt;Rectangle&gt; top = GetRectangles(xfold[i], height, cnt[i], x1[i], y1[i], x2[i], y2[i]);<br>            foreach (Rectangle r in top)<br>                r.Transform(-1, xfold[i], 1, 0);<br>            all.AddRange(bottom);<br>            all.AddRange(top);<br>        }<br>        return width * (long) height - IntersectionArea(all);        <br>  }<br><br>    private long IntersectionArea(List&lt;Rectangle&gt; all)<br>    {<br>        Dictionary&lt;long, long&gt; Xs = new Dictionary&lt;long, long&gt;();<br>        Dictionary&lt;long, long&gt; Ys = new Dictionary&lt;long, long&gt;();<br>        Xs[0] = -1;<br>        Xs[1] = -1;<br>        Ys[0] = -1;<br>        Ys[1] = -1;<br>        foreach (Rectangle r in all)<br>        {<br>            Xs[r.x1] = -1;<br>            Ys[r.y1] = -1;<br>            Xs[r.x2] = -1;<br>            Ys[r.y2] = -1;<br>        }<br>        long[] xs = new long[Xs.Count];<br>        int k = 0;<br>        foreach (long x in Xs.Keys)<br>            xs[k++] = x;<br>        Array.Sort(xs);<br>        long[] ys = new long[Ys.Count];<br>        k = 0;<br>        foreach (long y in Ys.Keys)<br>            ys[k++] = y;<br>        Array.Sort(ys);<br>        for (int i = 0; i &lt; xs.Length; ++i)<br>            Xs[xs[i]] = i;<br>        for (int i = 0; i &lt; ys.Length; ++i)<br>            Ys[ys[i]] = i;<br>        foreach (Rectangle r in all)<br>        {<br>            r.x1 = Xs[r.x1];<br>            r.y1 = Ys[r.y1];<br>            r.x2 = Xs[r.x2];<br>            r.y2 = Ys[r.y2];<br>        }<br>        int n = xs.Length;<br>        int[] delta = new int[4 * (n + 1)];<br>        long[] sum = new long[4 * (n + 1)];<br>        Rectangle[] firstTop = new Rectangle[ys.Length];<br>        Rectangle[] firstBottom = new Rectangle[ys.Length];<br>        foreach (Rectangle r in all)<br>        {<br>            r.nextSameTop = firstTop[r.y2];<br>            firstTop[r.y2] = r;<br>            r.nextSameBottom = firstBottom[r.y1];<br>            firstBottom[r.y1] = r;<br>        }<br>        long res = 0;<br>        for (int y = 0; y &lt; ys.Length - 1; ++y)<br>        {<br>            Rectangle r = firstBottom[y];<br>            while (r != null)<br>            {<br>                Change(delta, sum, 0, 0, n - 2, (int)r.x1, (int)r.x2 - 1, 1, xs);<br>                r = r.nextSameBottom;<br>            }<br>            r = firstTop[y];<br>            while (r != null)<br>            {<br>                Change(delta, sum, 0, 0, n - 2, (int)r.x1, (int)r.x2 - 1, -1, xs);<br>                r = r.nextSameTop;<br>            }<br>            res += sum[0] * (ys[y + 1] - ys[y]);<br>        }<br>        return res;<br>    }<br><br>    private void Change(int[] delta, long[] sum, int root, int rl, int rr, int l, int r, int by, long[] xs)<br>    {<br>        if (l &gt; r)<br>            return;<br>        if (rl == l &amp;&amp; rr == r)<br>        {<br>            delta[root] += by;<br>            if (delta[root] &lt; 0)<br>                throw new Exception();<br>        } else {<br>            if (rl == rr)<br>                throw new Exception();<br>            int rm = (rl + rr) / 2;<br>            Change(delta, sum, root * 2 + 1, rl, rm, l, Math.Min(rm, r), by, xs);<br>            Change(delta, sum, root * 2 + 2, rm + 1, rr, Math.Max(l, rm + 1), r, by, xs);<br>        }<br>        if (delta[root] &gt; 0)<br>        {<br>            sum[root] = xs[rr + 1] - xs[rl];<br>        }<br>        else<br>        {<br>            if (rl == rr)<br>                sum[root] = 0;<br>            else<br>            {<br>                sum[root] = sum[root * 2 + 1] + sum[root * 2 + 2];<br>            }<br>        }<br>    }<br><br>    private List&lt;Rectangle&gt; GetRectangles(int width, int height, int cnt, int x1, int y1, int x2, int y2)<br>    {<br>        int delta = height / (cnt + 1);<br>        Rectangle each = GetRectangle(width, delta, x1, y1, x2, y2);<br>        List&lt;Rectangle&gt; res = new List&lt;Rectangle&gt;();<br>        if (each == null)<br>            return res;<br>        for (int step = 0; step &lt;= cnt; ++step)<br>        {<br>            Rectangle r = each.Clone();<br>            if (step % 2 != 0)<br>                r.Transform(1, 0, -1, delta);<br>            r.Transform(1, 0, 1, step * delta);<br>            res.Add(r);<br>        }<br>        return res;<br>    }<br><br>    private Rectangle GetRectangle(int width, int height, int x1, int y1, int x2, int y2)<br>    {<br>        if (x1 &gt;= width || y1 &gt;= height || x2 &lt;= 0 || y2 &lt;= 0)<br>            return null;<br>        Rectangle r = new Rectangle();<br>        r.x1 = Math.Max(x1, 0);<br>        r.y1 = Math.Max(y1, 0);<br>        r.x2 = Math.Min(x2, width);<br>        r.y2 = Math.Min(y2, height);<br>        return r;<br>    }<br><br><br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003] [modified for C# by Petr]<br>// Powered by CodeProcessor<br></td>