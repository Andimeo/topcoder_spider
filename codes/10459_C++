<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;vector&gt;<br>#include &lt;list&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;deque&gt;<br>#include &lt;queue&gt;<br>#include &lt;stack&gt;<br>#include &lt;bitset&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;functional&gt;<br>#include &lt;numeric&gt;<br>#include &lt;utility&gt;<br>#include &lt;sstream&gt;<br>#include &lt;iostream&gt;<br>#include &lt;iomanip&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cctype&gt;<br>#include &lt;string&gt;<br>#include &lt;cstring&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;ctime&gt;<br> <br>using namespace std;<br> <br>#define SIZE(X) ((int)(X.size()))<br>#define MP(X,Y) make_pair(X,Y)<br>typedef long long int64;<br>typedef pair&lt;int,int&gt; ipair;<br> <br>class PaperAndPaint<br>{<br>public:<br>  int64 computeArea(int width, int height, vector &lt;int&gt; xfold, vector &lt;int&gt; cnt, vector &lt;int&gt; x1, vector &lt;int&gt; y1, vector &lt;int&gt; x2, vector &lt;int&gt; y2)<br>  {<br>    int n=SIZE(xfold);<br>    int64 result=0;<br>    vector&lt;int&gt; lstX;<br>    lstX.push_back(0);<br>    lstX.push_back(width);<br>    for (int i=0;i&lt;n;i++)<br>    {<br>      lstX.push_back(xfold[i]);<br>      if (x1[i]&lt;xfold[i])<br>        lstX.push_back(xfold[i]-x1[i]);<br>      if (x2[i]&lt;xfold[i])<br>        lstX.push_back(xfold[i]-x2[i]);<br>      if (x1[i]&lt;width-xfold[i])<br>        lstX.push_back(x1[i]+xfold[i]);<br>      if (x2[i]&lt;width-xfold[i])<br>        lstX.push_back(x2[i]+xfold[i]);<br>    }<br>    sort(lstX.begin(),lstX.end());<br>    lstX.resize(unique(lstX.begin(),lstX.end())-lstX.begin());<br>    for (int step=0;step&lt;SIZE(lstX)-1;step++)<br>    {<br>      int minx=lstX[step];<br>      int maxx=lstX[step+1];<br>      vector&lt;ipair&gt; Q;<br>      for (int i=0;i&lt;n;i++)<br>      {<br>        int p1,p2;<br>        if (minx&lt;=xfold[i] &amp;&amp; maxx&lt;=xfold[i])<br>          p1=xfold[i]-maxx,p2=xfold[i]-minx;<br>        else<br>          p1=minx-xfold[i],p2=maxx-xfold[i];<br>        if (x1[i]&lt;=p1 &amp;&amp; p2&lt;=x2[i])<br>        {<br>          int H=height/(cnt[i]+1);<br>          for (int k=0;k&lt;=cnt[i];k++)<br>            if (k%2==0)<br>              Q.push_back(MP(H*k+y1[i],H*k+y2[i]));<br>            else<br>              Q.push_back(MP(H*k+H-y2[i],H*k+H-y1[i]));<br>        }<br>      }<br>      sort(Q.begin(),Q.end());<br>      int L=-1;<br>      for (int i=0;i&lt;SIZE(Q);i++)<br>      {<br>        if (Q[i].first&gt;L)<br>          L=Q[i].first;<br>        if (Q[i].second&gt;L)<br>        {<br>          result+=(int64)(maxx-minx)*(int64)(Q[i].second-L);<br>          L=Q[i].second;<br>        }<br>      }<br>    }<br>    return (int64)width*(int64)height-result;<br>  }<br>};<br> <br> <br> <br>// Powered by PopsEdit<br></td>