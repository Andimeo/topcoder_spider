<td class="problemText" colspan="8" valign="middle" align="left">
            import static java.lang.Math.*;<br>import static java.math.BigInteger.*;<br>import static java.util.Arrays.*;<br>import static java.util.Collections.*;<br>import java.math.*;<br>import java.util.*;<br><br>public class PaperAndPaint {<br>  public long computeArea(int width, int height, int[] xfold, int[] cnt, int[] x1, int[] y1, int[] x2, int[] y2) {<br>    int n = xfold.length;<br>    TreeSet&lt;Integer&gt; xset = new TreeSet&lt;Integer&gt;();<br>    TreeSet&lt;Integer&gt; yset = new TreeSet&lt;Integer&gt;();<br>    xset.add(0);<br>    xset.add(width);<br>    for (int i = 0; i &lt; n; i++) {<br>      if (xfold[i] - x2[i] &gt;= 0) xset.add(xfold[i] - x2[i]);<br>      if (xfold[i] - x1[i] &gt;= 0) xset.add(xfold[i] - x1[i]);<br>      if (xfold[i] + x1[i] &lt;= width) xset.add(xfold[i] + x1[i]);<br>      if (xfold[i] + x2[i] &lt;= width) xset.add(xfold[i] + x2[i]);<br>      int dy = height / (cnt[i] + 1);<br>      int ly = 0;<br>      for (int j = 0; j &lt;= cnt[i]; j++) {<br>        if (j % 2 == 0) {<br>          yset.add(ly + y1[i]);<br>          yset.add(ly + y2[i]);<br>        } else {<br>          yset.add(ly + dy - y2[i]);<br>          yset.add(ly + dy - y1[i]);<br>        }<br>        ly += dy;<br>      }<br>    }<br>    int[] xs = toi(xset.toArray(new Integer[0]));<br>    int[] ys = toi(yset.toArray(new Integer[0]));<br>    int nx = xs.length, ny = ys.length;<br>    long res = 0;<br>    int[] is = new int[ny];<br>    for (int x = 0; x + 1 &lt; nx; x++) {<br>      long lx = xs[x], rx = xs[x + 1];<br>      long dx = rx - lx;<br>      fill(is, 0);<br>      for (int i = 0; i &lt; n; i++) {<br>        if ((xfold[i] - x2[i] &lt;= lx &amp;&amp; rx &lt;= xfold[i] - x1[i]) || (xfold[i] + x1[i] &lt;= lx &amp;&amp; rx &lt;= xfold[i] + x2[i])) {<br>          int dy = height / (cnt[i] + 1);<br>          int ly = 0;<br>          for (int j = 0; j &lt;= cnt[i]; j++) {<br>            if (j % 2 == 0) {<br>              is[binarySearch(ys, ly + y1[i])]++;<br>              is[binarySearch(ys, ly + y2[i])]--;<br>            } else {<br>              is[binarySearch(ys, ly + dy - y2[i])]++;<br>              is[binarySearch(ys, ly + dy - y1[i])]--;<br>            }<br>            ly += dy;<br>          }<br>        }<br>      }<br>      int num = 0;<br>      for (int y = 0; y &lt; ny; y++) {<br>        if (num &gt; 0) res += dx * (ys[y] - ys[y - 1]);<br>        num += is[y];<br>      }<br>    }<br>    return ((long)width) * height - res;<br>  }<br>  int[] toi(Integer[] Is) {<br>    int n = Is.length;<br>    int[] is = new int[n];<br>    for (int i = 0; i &lt; n; i++) is[i] = Is[i];<br>    return is;<br>  }<br>  void debug(Object...os) {<br>    System.err.println(deepToString(os));<br>  }<br>}<br></td>