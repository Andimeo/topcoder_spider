<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;vector&gt;<br>#include &lt;list&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;deque&gt;<br>#include &lt;stack&gt;<br>#include &lt;bitset&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;functional&gt;<br>#include &lt;numeric&gt;<br>#include &lt;utility&gt;<br>#include &lt;sstream&gt;<br>#include &lt;iostream&gt;<br>#include &lt;iomanip&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;ctime&gt;<br>#include &lt;cstring&gt;<br>using namespace std;<br><br>class EqualTowers {<br>public:<br>  int height(vector &lt;int&gt;);<br>};<br>int b[2][500001];<br>int abs(int n){<br>  return n&lt;0?-n:n;<br>}<br>int EqualTowers::height(vector &lt;int&gt; bricks) {<br>  int i, end, j, k,p,N=bricks.size();<br>  memset ( b, -1, sizeof ( b ) );<br>    b[1][0] = 0, p = 0, end = 0;<br>    for ( i = 0; i &lt; N; i ++, p = 1 - p )<br>    {<br>            memcpy ( b[p], b[1 - p], sizeof ( b[p] ) );<br>            end += bricks[i];<br>            for ( j = 0; j &lt;= end; j ++ )<br>            {<br>                k = abs ( j + bricks[i] );<br>                if ( k &lt;= end &amp;&amp; b[1 - p][j] &gt;= 0 &amp;&amp; b[p][k] &lt; b[1 - p][j] + bricks[i] )<br>                {<br>                    b[p][j + bricks[i]] = b[1 - p][j] + bricks[i];<br>                }<br>                k = abs ( j - bricks[i] );<br>                if ( k &lt;= end &amp;&amp; b[1 - p][j] &gt;= 0 &amp;&amp; b[p][k] &lt; b[1 - p][j] + bricks[i] )<br>                {<br>                    b[p][k] = b[1 - p][j] + bricks[i];<br>                }<br>            }   <br>     }<br>     if ( b[1 - p][0] ) return b[1 - p][0] / 2;<br>     else return -1;<br>}<br><br>//Powered by [KawigiEdit] 2.0!<br></td>