<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;vector&gt;<br>#include &lt;string&gt;<br>#include &lt;list&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;deque&gt;<br>#include &lt;queue&gt;<br>#include &lt;stack&gt;<br>#include &lt;bitset&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;functional&gt;<br>#include &lt;numeric&gt;<br>#include &lt;utility&gt;<br>#include &lt;sstream&gt;<br>#include &lt;iostream&gt;<br>#include &lt;iomanip&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cctype&gt;<br>#include &lt;string&gt;<br>#include &lt;cstring&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;ctime&gt;<br><br>#define FOR(start,by,stop) for(int by = (start);by &lt; (int)(stop);++by)<br>#define ROF(start,by,stop) for(int by = (start);by &gt; (int)(stop);--by)<br><br>using namespace std;<br><br>class PerfectPermutationHard<br>{<br>public:<br>    vector &lt;int&gt; reorder(vector &lt;int&gt; P)<br>    {<br>      //Calculate presence<br>      vector&lt;bool&gt; present(P.size(), false);<br>      int current = 0;<br>      FOR(0,i,P.size())<br>      {<br>        cerr &lt;&lt; "Found: " &lt;&lt; current &lt;&lt; endl;<br>        present[current] = true;<br>        current = P[current];<br>      }<br><br>      //Calculate value to index<br>      vector&lt;int&gt; valueToIndex(P.size(), 0);<br>      FOR(0,i,P.size())<br>      {<br>        valueToIndex[P[i]] = i;<br>      }<br><br>      FOR(0,i,P.size())<br>      {<br>        cerr &lt;&lt; "present[" &lt;&lt; i &lt;&lt; "] = " &lt;&lt; present[i] &lt;&lt; " ";<br>      }<br>      cerr &lt;&lt; endl;<br>      FOR(0,i,P.size())<br>      {<br>        cerr &lt;&lt; i &lt;&lt; ": " &lt;&lt; valueToIndex[i] &lt;&lt; endl;<br>      }<br>      cerr &lt;&lt; endl;<br><br>      //Do the swaps<br>    int last = -1;<br>      FOR(0,i,P.size())<br>      {<br>        if(!present[i])<br>        {<br>          cerr &lt;&lt; "trying to insert: " &lt;&lt; i &lt;&lt; endl;<br>          //Find position<br>          if(last == -1)<br>          {<br>            last = 0;<br>              while(P[last] &lt; i &amp;&amp; P[last] != 0)<br>              {<br>                last = P[last];<br>              }<br>          }<br><br>          //Insert<br>          swap(P[last], P[valueToIndex[i]]);<br>          last = valueToIndex[i];<br><br>          //Fix permutation<br>          int temp = 0;<br>            FOR(0,i,P.size())<br>            {<br>              present[temp] = true;<br>              temp = P[temp];<br><br>              cerr &lt;&lt; "P[" &lt;&lt; i &lt;&lt; "] = " &lt;&lt; P[i] &lt;&lt; " [" &lt;&lt; present[i] &lt;&lt; "]" &lt;&lt; endl;<br>            }<br>        }<br>      }<br><br>    FOR(0,i,P.size())<br>    {<br>      cerr &lt;&lt; P[i] &lt;&lt; " ";<br>    }<br>    cerr &lt;&lt; endl;<br><br>      return P;<br>    }<br><br><br><br>};<br><br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003]<br>// Powered by CodeProcessor<br></td>