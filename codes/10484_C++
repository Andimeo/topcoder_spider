<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;vector&gt;<br>#include &lt;list&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;deque&gt;<br>#include &lt;stack&gt;<br>#include &lt;bitset&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;functional&gt;<br>#include &lt;numeric&gt;<br>#include &lt;utility&gt;<br>#include &lt;sstream&gt;<br>#include &lt;iostream&gt;<br>#include &lt;iomanip&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;ctime&gt;<br> <br>using namespace std;<br> <br>class UnfoldingTriangles {<br>public:<br>  int solve(vector &lt;string&gt;, int);<br>};<br> <br>int UnfoldingTriangles::solve(vector &lt;string&gt; g, int up) {<br>  int n = g.size(), m = g[0].length(), ans = -1, i, j, d, p, mx, kr, ks, ok;<br>  for (i=0;i&lt;n;i++)<br>    for (j=0;j&lt;m;j++) {<br>      mx = up;<br>      for (d=0;d&lt;=i &amp;&amp; d&lt;=j;d++) {<br>        if (i &lt; n-1)<br>          if (g[i+1][j-d] == '#') break;<br>        if (j &lt; m-1)<br>          if (g[i-d][j+1] == '#') break;<br>        ok = 1;<br>        kr = 0; ks = 0;<br>        for (p=i;p&gt;=i-d;p--)<br>          if (g[p][i+j-p-d] == '.') {<br>            ok = 0;<br>            break;<br>          } else<br>          if (g[p][i+j-p-d] == '#') kr++;<br>          else ks++;<br>        if (!ok) break;<br>        if (kr == 0)<br>          if ((d+1)*(d+2)/2 &gt; ans) ans = (d+1)*(d+2)/2;<br>        mx -= ks;<br>        if (mx &lt; 0) break;<br>      }<br>    }<br>  return ans;<br>}<br> <br> <br>//Powered by [KawigiEdit] 2.0!<br></td>