<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Text;<br><br>public class ShuffledPlaylist {<br>    const int MODULO = 600921647;<br><br>    public int count(string[] songs, string[] transitions, int minLength, int maxLength)<br>    {<br>        int numGenres = transitions.Length;<br>        StringBuilder b = new StringBuilder();<br>        foreach (string s in songs)<br>            b.Append(s);<br>        string[] items;<br>        if (b.Length == 0)<br>            items = new string[0];<br>        else<br>            items = b.ToString().Split(',');<br>        int numSongs = items.Length;<br>        int[] size = new int[numSongs];<br>        int[] genre = new int[numSongs];<br>        int maxSize = 1;<br>        for (int i = 0; i &lt; numSongs; ++i)<br>        {<br>            string[] p = items[i].Split(' ');<br>            genre[i] = int.Parse(p[0]);<br>            size[i] = int.Parse(p[1]);<br>            maxSize = Math.Max(maxSize, size[i]);<br>        }<br>        int[,] trans = new int[maxSize * numGenres, maxSize * numGenres];<br>        for (int i = 0; i &lt; (maxSize - 1) * numGenres; ++i)<br>            trans[i, i + numGenres] = 1;<br>        {<br>            for (int i = 0; i &lt; numSongs; ++i)<br>            {<br>                for (int j = 0; j &lt; numGenres; ++j)<br>                    if (transitions[j][genre[i]] == 'Y')<br>                        ++trans[(maxSize - 1) * numGenres + genre[i], (maxSize - size[i]) * numGenres + j];<br>            }<br>        }<br>        return (getSum(maxSize * numGenres, trans, maxSize, numGenres, numSongs, size, genre, maxLength + 1) - getSum(maxSize * numGenres, trans, maxSize, numGenres, numSongs, size, genre, minLength) + MODULO) % MODULO;<br>    }<br><br>    private int getSum(int n, int[,] trans, int maxSize, int numGenres, int numSongs, int[] size, int[] genre, int maxLength)<br>    {<br>        int[] now = new int[n];<br>        int res = 0;<br>        for (int i = 1; i &lt; Math.Min(maxSize + 1, maxLength); ++i)<br>        {<br>            now = mul(n, trans, now);<br>            for (int j = 0; j &lt; numSongs; ++j)<br>                if (size[j] == i)<br>                {<br>                    now[(maxSize - 1) * numGenres + genre[j]] = (now[(maxSize - 1) * numGenres + genre[j]] + 1) % MODULO;<br>                }<br>            for (int j = 0; j &lt; numGenres; ++j)<br>                res = (res + now[(maxSize - 1) * numGenres + j]) % MODULO;<br>        }<br>        if (maxSize + 1 &lt; maxLength) {<br>            now = mul(n, trans, now);<br>            int[,] m;<br>            int[,] dummy;<br>            getSumPow(n, trans, maxLength - maxSize - 1, out m, out dummy);<br>            now = mul(n, m, now);<br>            for (int j = 0; j &lt; numGenres; ++j)<br>                res = (res + now[(maxSize - 1) * numGenres + j]) % MODULO;<br>        }<br>        return res;<br>    }<br><br>    private void getSumPow(int n, int[,] a, int maxPow, out int[,] sum, out int[,] max)<br>    {<br>        if (maxPow == 1)<br>        {<br>            sum = new int[n, n];<br>            for (int i = 0; i &lt; n; ++i)<br>                sum[i, i] = 1;<br>            max = a;<br>        }<br>        else<br>        {<br>            if (maxPow % 2 == 0)<br>            {<br>                int[,] psum;<br>                int[,] pmax;<br>                getSumPow(n, a, maxPow / 2, out psum, out pmax);<br>                sum = add(n, psum, mul(n, psum, pmax));<br>                max = mul(n, pmax, pmax);<br>            }<br>            else<br>            {<br>                int[,] psum;<br>                int[,] pmax;<br>                getSumPow(n, a, maxPow - 1, out psum, out pmax);<br>                sum = add(n, psum, pmax);<br>                max = mul(n, a, pmax);<br>            }<br>        }<br>    }<br><br>    private int[,] add(int n, int[,] a, int[,] b)<br>    {<br>        int[,] res = new int[n, n];<br>        for (int i = 0; i &lt; n; ++i)<br>            for (int j = 0; j &lt; n; ++j)<br>                res[i, j] = (a[i, j] + b[i, j]) % MODULO;<br>        return res;<br>    }<br><br>    private int[,] mul(int n, int[,] a, int[,] b)<br>    {<br>        int[,] res = new int[n, n];<br>        for (int i = 0; i &lt; n; ++i)<br>            for (int j = 0; j &lt; n; ++j)<br>            {<br>                long r = 0;<br>                for (int k = 0; k &lt; n; ++k)<br>                    r = (r + a[i, k] * (long)b[k, j]) % MODULO;<br>                res[i, j] = (int)r;<br>            }<br>        return res;<br>    }<br><br>    private int[] mul(int n, int[,] m, int[] a)<br>    {<br>        int[] res = new int[n];<br>        for (int i = 0; i &lt; n; ++i) {<br>            long r = 0;<br>            for (int j = 0; j &lt; n; ++j) {<br>                r = (r + m[i, j] * (long) a[j]) % MODULO;<br>            }<br>            res[i] = (int) r;<br>        }<br>        return res;<br>    }<br><br><br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003] [modified for C# by Petr]<br>// Powered by CodeProcessor<br></td>