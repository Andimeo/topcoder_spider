<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;vector&gt;<br>#include &lt;list&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;deque&gt;<br>#include &lt;queue&gt;<br>#include &lt;stack&gt;<br>#include &lt;bitset&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;functional&gt;<br>#include &lt;numeric&gt;<br>#include &lt;utility&gt;<br>#include &lt;sstream&gt;<br>#include &lt;iostream&gt;<br>#include &lt;iomanip&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cctype&gt;<br>#include &lt;string&gt;<br>#include &lt;cstring&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;ctime&gt;<br> <br>using namespace std;<br> <br> <br>const int MOD = 600921647;<br> <br>int n, gap[1000], len[1000], A[101][101], B[101][101], C[101][101], D[101][101], T[101][101];<br> <br>class ShuffledPlaylist<br>{<br>public:<br>  void multiply(int C[101][101], int A[101][101], int B[101][101])<br>  {<br>    int C2[101][101];<br>    for (int i = 0; i &lt; 101; i++)<br>      for (int j = 0; j &lt; 101; j++)<br>      {<br>        long long t = 0;<br>        for (int k = 0; k &lt; 101; k++) if (A[i][k] != 0 &amp;&amp; B[k][j] != 0)<br>        {<br>          t += (long long)A[i][k] * B[k][j];<br>          t %= MOD;<br>        }<br>        C2[i][j] = (int)t;<br>      }<br>    for (int i = 0; i &lt; 101; i++)<br>      for (int j = 0; j &lt; 101; j++)<br>        C[i][j] = C2[i][j];<br>  }<br>  void doIt(int ew)<br>  {<br>    if (ew == 0)<br>    {<br>      memset(B, 0, sizeof(B));<br>      for (int i = 0; i &lt; 101; i++) {<br>        B[i][i] = 1;<br>      }<br>      return;<br>    }<br>    if (ew % 2 == 1)<br>    {<br>      doIt(ew - 1);<br>      multiply(B, B, A);<br>    }<br>    else<br>    {<br>      doIt(ew / 2);<br>      multiply(B, B, B);<br>    }<br>  }<br>  void doIt2(int ew)<br>  {<br>    if (ew == 0)<br>    {<br>      memset(B, 0, sizeof(B));<br>      for (int i = 0; i &lt; 101; i++) {<br>        B[i][i] = 1;<br>      }<br>      memcpy(C, A, sizeof(C));<br>      return;<br>    }<br>    if (ew % 2 == 0)<br>    {<br>      doIt2(ew - 1);<br>      for (int i = 0; i &lt; 101; i++)<br>        for (int j = 0; j &lt; 101; j++) {<br>          B[i][j] += C[i][j];<br>          if (B[i][j] &gt;= MOD)<br>            B[i][j] -= MOD;<br>        }<br>      multiply(C, C, A);<br>    }<br>    else<br>    {<br>      doIt2(ew / 2);<br>      memcpy(D, C, sizeof(C));<br>      for (int i = 0; i &lt; 101; i++)<br>      {<br>        D[i][i] ++;<br>        if (D[i][i] &gt;= MOD)<br>          D[i][i] -= MOD;<br>      }<br>      multiply(B, B, D); <br>      multiply(C, C, C);<br>    }<br>  }<br>  int count(vector &lt;string&gt; songs, vector &lt;string&gt; transitions, int minLength, int maxLength)<br>  {<br>    string str = "";<br>    for (int i = 0; i &lt; songs.size(); i++) str += songs[i];<br>    n = 0;<br>    int g,l;<br>    for (int i = 0; i &lt; str.length(); i++) <br>      if (str[i] == ',')<br>        str[i] = ' ';<br>    istringstream sin(str);<br>    for (;sin&gt;&gt;g&gt;&gt;l;)<br>    {<br>      gap[n] = g;<br>      len[n] = l;<br>      n++;<br>    }<br>    memset(A,0,sizeof(A));<br>    for (int i = 0; i &lt; n; i++) {<br>      A[100][gap[i] * 10 + len[i] - 1]++;<br>    }<br>    for (int i = 0; i &lt; transitions.size(); i++) {<br>      for (int j = 0; j &lt; n; j++) {<br>        if (transitions[i][gap[j]] == 'Y')<br>        {<br>          A[i * 10 + 0][gap[j] * 10 + len[j] - 1]++;<br>        }<br>      }<br>    }<br>    for (int i = 0; i &lt; transitions.size(); i++) {<br>      for (int j = 1; j &lt;= 9; j++) {<br>        A[i * 10 + j][i * 10 + (j - 1)]++;<br>      }<br>    }<br>    doIt(minLength);<br>    for (int i = 0; i &lt; 101; i++)<br>      for (int j = 0; j &lt; 101; j++)<br>      {<br>        T[i][j] = B[i][j];<br>      }<br>    doIt2(maxLength - minLength);<br>    multiply(B, T, B);<br>    int res = 0;<br>    for (int i = 0; i &lt; transitions.size(); i++) {<br>      res = (res + B[100][i * 10]) % MOD;<br>    }<br>    return res;<br>  }<br>};<br></td>