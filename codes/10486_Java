<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>import java.util.regex.*;<br>import java.text.*;<br>import java.math.*;<br> <br> <br>public class ShuffledPlaylist<br>{<br>  int p = 600921647;<br>  <br>  int[][] mul(int[][] a, int[][] b) {<br>    int[][] r = new int[a.length][a.length];<br>    for (int i = 0; i &lt; a.length; ++i) {<br>      for (int j = 0; j &lt; a.length; ++j) {<br>        long tmp = 0;<br>        for (int k = 0; k &lt; a.length; ++k) {<br>          //r[i][j] = (int)((r[i][j] + a[i][k] * (long)b[k][j]) % p);<br>          tmp += a[i][k] * (long)b[k][j];<br>          if (tmp &gt; 1000000000000000000L) {<br>            tmp %= p;<br>          }<br>        }<br>        r[i][j] = (int)(tmp % p);<br>      }<br>    }<br>    return r;<br>  }<br>  <br>  int[][] pow(int[][] x, int pow) {<br>    int[][] r = new int[x.length][x.length];<br>    for (int i = 0; i &lt; x.length; ++i) {<br>      r[i][i] = 1;<br>    }<br>    while (pow &gt; 0) {<br>      if (pow % 2 == 1) {<br>        r = mul(r, x);<br>      }<br>      pow /= 2;<br>      x = mul(x, x);<br>    }<br>    return r;<br>  }<br>  <br>  public int count(String[] songs, String[] ts, int minLength, int maxLength)<br>  {<br>    int n = ts.length;<br>    int[][] m = new int[10 * (n + 1) + 1][10 * (n + 1) + 1];<br>    StringBuilder sb = new StringBuilder();<br>    for (String s : songs) {<br>      sb.append(s);<br>    }<br>    for (int i = 0; i &lt;= n; ++i) {<br>      for (int j = 0; j &lt; 9; ++j) {<br>        m[i * 10 + j][i * 10 + j + 1] = 1;<br>      }<br>      m[(n + 1) * 10][i * 10 + 9] = 1;<br>    }<br>    m[(n + 1) * 10][(n + 1) * 10] = 1;<br>    for (String s : sb.toString().split(",")) {<br>      String[] tmp = s.split(" ");<br>      int i = Integer.parseInt(tmp[0]);<br>      int l = Integer.parseInt(tmp[1]);<br>      for (int j = 0; j &lt;= n; ++j) {<br>        if (j != n &amp;&amp; ts[j].charAt(i) == 'N') {<br>          continue;<br>        }<br>        m[i * 10 + 9][j * 10 + 10 - l]++;<br>      }<br>    }<br>    return (f(m, n * 10 + 9, maxLength + 1) + p - f(m, n * 10 + 9, minLength)) % p;<br>  }<br>  <br>  int f(int[][] m, int one, int x) {<br>    m = pow(m, x);<br>    return m[m.length - 1][one];<br>  }<br>  <br> <br>}<br>//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!<br></td>