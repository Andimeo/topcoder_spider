<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;vector&gt;<br>#include &lt;list&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;queue&gt;<br>#include &lt;deque&gt;<br>#include &lt;stack&gt;<br>#include &lt;bitset&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;functional&gt;<br>#include &lt;numeric&gt;<br>#include &lt;utility&gt;<br>#include &lt;sstream&gt;<br>#include &lt;iostream&gt;<br>#include &lt;iomanip&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;ctime&gt;<br>#include &lt;complex&gt;<br>using namespace std;<br>int di[]={-1,0,1,0};<br>int dj[]={0,1,0,-1};<br>string s[3][3]={{"RED","BLUE","RED"},{"BLUE","GREEN","BLUE"},{"RED","BLUE","RED"}};<br>class CubeWalking {<br>public:<br>  string finalPosition(string m) {<br>        int i=1,j=1,k=0;<br>        for(int x=0;x&lt;m.size();x++)<br>            if(m[x]=='L')<br>                k=(k+3)%4;<br>            else if(m[x]=='R')<br>                k=(k+1)%4;<br>            else{<br>                i=(i+di[k]+3)%3;<br>                j=(j+dj[k]+3)%3;<br>            }<br>        return s[i][j];<br>  }<br>};<br></td>