<td class="problemText" colspan="8" valign="middle" align="left">
            # include &lt;string&gt;<br># include &lt;vector&gt;<br># include &lt;iostream&gt;<br># include &lt;sstream&gt;<br># include &lt;cstdio&gt;<br># include &lt;cstdlib&gt;<br># include &lt;cmath&gt;<br># include &lt;cctype&gt;<br># include &lt;cstring&gt;<br># include &lt;map&gt;<br># include &lt;queue&gt;<br># include &lt;deque&gt;<br># include &lt;set&gt;<br># include &lt;algorithm&gt;<br># include &lt;utility&gt;<br># include &lt;functional&gt;<br># include &lt;stack&gt;<br># include &lt;bitset&gt;<br># include &lt;complex&gt;<br># include &lt;cassert&gt;<br># include &lt;ctime&gt;<br># include &lt;list&gt;<br># include &lt;valarray&gt;<br><br>using namespace std ;<br><br>typedef long long ll;<br>typedef pair&lt;int, int&gt; pii;<br>typedef vector&lt;int&gt; vi;<br>typedef vector&lt;vi&gt; vvi;<br>typedef vector&lt;vvi&gt; vvvi;<br>typedef long double ld;<br>typedef vector&lt;ld&gt; vd;<br>typedef vector&lt;bool&gt; vb;<br><br>#define all(v) (v).begin(), (v).end()<br>#define MP make_pair<br><br>typedef vector&lt; vector&lt;ll&gt; &gt; Matrix;<br>const ll MINUS_INF = -ll(1) &lt;&lt; 62;<br><br>ll max(ll a, ll b) {<br>  if (a &gt; b) {<br>    return a;<br>  }<br>  return b;<br>}<br><br>void multiply1(const Matrix&amp; a, const Matrix&amp; b, Matrix&amp; c) {<br>  c = Matrix(a.size(), a.size());<br>  for (int i = 0; i &lt; a.size(); ++i) {<br>    for (int j = 0; j &lt; a.size(); ++j) {<br>      c[i][j] = MINUS_INF;<br>      for (int k = 0; k &lt; a.size(); ++k) {<br>        if (a[i][k] &gt; MINUS_INF &amp;&amp; b[k][j] &gt; MINUS_INF) {<br>          c[i][j] = max(c[i][j], a[i][k] + b[k][j]);<br>        }<br>      }<br>    }<br>  }<br>}<br><br>void multiply2(const Matrix&amp; a, const Matrix&amp; b, Matrix&amp; c) {<br>  c = Matrix(a.size(), a.size());<br>  for (int i = 0; i &lt; a.size(); ++i) {<br>    for (int j = 0; j &lt; a.size(); ++j) {<br>      c[i][j] = max(a[i][j], b[i][j]);<br>      for (int k = 0; k &lt; a.size(); ++k) {<br>        if (a[i][k] &gt; MINUS_INF &amp;&amp; b[k][j] &gt; MINUS_INF) {<br>          c[i][j] = max(c[i][j], a[i][k] + b[k][j]);<br>        }<br>      }<br>    }<br>  }<br>}<br><br>void power(const Matrix&amp; a, ll n, void (*mult)(const Matrix&amp;, const Matrix&amp;, Matrix&amp;), Matrix&amp; res) {<br>  if (n == 1) {<br>    res = a;<br>    return;<br>  }<br>  power(a, n / 2, mult, res);<br>  Matrix tmp;<br>  mult(res, res, tmp);<br>  if (n % 2) {<br>    mult(tmp, a, res);<br>  } else {<br>    res = tmp;<br>  }<br>}<br><br>class AntOnGraph<br>{<br>public :<br>  string maximumBonus ( vector &lt;string&gt; p0, vector &lt;string&gt; p1, vector &lt;string&gt; p2, int stepsPerSecond, int timeLimit )<br>  {<br>    string res ;<br>    int n = p0.size();<br>    Matrix A(n, n);<br>    for (int i = 0; i &lt; n; ++i) {<br>      for (int j = 0; j &lt; n; ++j) {<br>        int x = 100 * (p0[i][j] - '0') + 10 * (p1[i][j] - '0') + (p2[i][j] - '0');<br>        if (x == 0) {<br>          A[i][j] = -ll(1) &lt;&lt; 62;<br>        } else {<br>          A[i][j] = x - 500;<br>        }<br>      }<br>    }<br>    Matrix B;<br>    power(A, stepsPerSecond, &amp;multiply1, B);<br>    Matrix C;<br>    power(B, timeLimit, &amp;multiply2, C);<br>    if (C[0][1] &gt; (-ll(1) &lt;&lt; 62)) {<br>      ostringstream out;<br>      out &lt;&lt; C[0][1];<br>      res = out.str();<br>    } else {<br>      res = "IMPOSSIBLE";<br>    }<br>    return res ;<br>  }<br>  <br><br>} ;<br><br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003]<br>// Powered by CodeProcessor<br></td>