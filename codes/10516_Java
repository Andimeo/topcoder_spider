<td class="problemText" colspan="8" valign="middle" align="left">
            import static java.lang.Math.*;<br>import static java.math.BigInteger.*;<br>import static java.util.Arrays.*;<br>import static java.util.Collections.*;<br>import java.math.*;<br>import java.util.*;<br><br>public class AntOnGraph {<br>  long INF = 1L &lt;&lt; 60;<br>  public String maximumBonus(String[] p0, String[] p1, String[] p2, int stepsPerSecond, int timeLimit) {<br>    int n = p0.length;<br>    int[][] g = new int[n][n];<br>    for (int i = 0; i &lt; n; i++) {<br>      for (int j = 0; j &lt; n; j++) {<br>        g[i][j] = Integer.parseInt("" + p0[i].charAt(j) + p1[i].charAt(j) + p2[i].charAt(j)) - 500;<br>      }<br>    }<br>    long[][] d = new long[n][n];<br>    for (int i = 0; i &lt; n; i++) {<br>      long[] crt = new long[n];<br>      fill(crt, -INF);<br>      crt[i] = 0;<br>      for (int t = 0; t &lt; stepsPerSecond; t++) {<br>        long[] next = new long[n];<br>        fill(next, -INF);<br>        for (int j = 0; j &lt; n; j++) if (crt[j] &gt; -INF) {<br>          for (int k = 0; k &lt; n; k++) if (g[j][k] &gt; -500) {<br>            if (next[k] &lt; crt[j] + g[j][k]) next[k] = crt[j] + g[j][k];<br>          }<br>        }<br>        crt = next;<br>      }<br>      d[i] = crt;<br>    }<br>    d = pow(d, timeLimit);<br>    if (d[0][1] &lt;= -INF) return  "IMPOSSIBLE";<br>    return "" + d[0][1];<br>  }<br>  long[][] pow(long[][] A, long b) {<br>    int n = A.length;<br>    long[][] res = new long[n][n];<br>    for (int i = 0; i &lt; n; i++) {<br>      fill(res[i], -INF);<br>      res[i][i] = 0;<br>    }<br>    while (b &gt; 0) {<br>      if ((b &amp; 1) == 1) res = mul(res, A);<br>      A = mul(A, A);<br>      b &gt;&gt;&gt;= 1;<br>    }<br>    return res;<br>  }<br>  long[][] mul(long[][] A, long[][] B) {<br>    int n = A.length;<br>    long[][] C = new long[n][n];<br>    for (int i = 0; i &lt; n; i++) {<br>      for (int j = 0; j &lt; n; j++) {<br>        long t = A[i][j];<br>        if (t &lt; B[i][j]) t = B[i][j];<br>        for (int k = 0; k &lt; n; k++) if (A[i][k] &gt; -INF &amp;&amp; B[k][j] &gt; -INF) {<br>          if (t &lt; A[i][k] + B[k][j]) t = A[i][k] + B[k][j];<br>        }<br>        C[i][j] = t;<br>      }<br>    }<br>    return C;<br>  }<br>  void debug(Object...os) {<br>    System.err.println(deepToString(os));<br>  }<br>}<br></td>