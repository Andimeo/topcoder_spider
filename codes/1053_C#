<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections;<br>public class Execution {<br>  public class Node {<br>    public ArrayList subNodes=null;<br>    public long calc() {<br>      long time=calcTime;<br>      if (subNodes!=null) {<br>        foreach (Node n in subNodes) {<br>          time+=loopCount*n.calc();<br>        }<br>      }<br>      return time;<br>    }<br><br>    public long loopCount=0;<br>    public long calcTime=0;<br>  }<br>  <br>  public class InvalidConstruct : Exception {}<br>  <br>  public Node ParseFor(string s,long nm) {<br>    Node n=new Node(),t;<br>    n.loopCount=nm;<br>    n.subNodes=new ArrayList();<br>    while (s.Length!=0) {<br>      if (s.StartsWith("BASIC;")) {<br>        t=new Node();<br>        t.calcTime=1;<br>        n.subNodes.Add(t);<br><br>        s=s.Remove(0,6);<br>        continue;<br>      } else if (s.StartsWith("for")) {<br>        int pos=3;<br>        for (;pos&lt;s.Length;pos++) {<br>          if (s[pos]=='(') break;<br>        }<br>        int epos=pos;<br>        for (;epos&lt;s.Length;epos++) {<br>          if (s[epos]==')') break;<br>        }<br>        string num=s.Substring(pos+1,epos-pos-1);<br>        pos=epos+1;<br>        for (;pos&lt;s.Length;pos++) {<br>          if (s[pos]=='{') break;<br>        }<br>        epos=pos+1;<br>        int nest=0;<br>        for (;epos&lt;s.Length;epos++) {<br>          if (s[epos]=='{') nest++;<br>          if (s[epos]=='}' &amp;&amp; nest==0) break;<br>          if (s[epos]=='}') nest--;<br>        }<br>        string sub=s.Substring(pos+1,epos-pos-1);<br><br>        t=ParseFor(sub,long.Parse(num));<br>        n.subNodes.Add(t);<br>        s=s.Substring(epos+1,s.Length-(epos+1));<br>        continue;<br><br>      } else if (s[0]==' ') {<br>        s=s.Remove(0,1);<br>        continue;<br>      }<br>      <br>    }<br>    return n;<br>  }<br><br>  public long analyze(string[] code) {<br>    ArrayList al=new ArrayList();<br>    string totalCode="";<br>    for (int i=0;i&lt;code.Length-1;i++) {<br>      totalCode+=code[i]+" ";<br>    }<br>    totalCode+=code[code.Length-1];<br><br>    <br>    Node t;<br>    while (totalCode.Length!=0) {<br>      if (totalCode.StartsWith("BASIC;")) {<br>        t=new Node();<br>        t.calcTime=1;<br>        al.Add(t);<br><br>        totalCode=totalCode.Substring(6,totalCode.Length-6);<br>        continue;<br>      } else if (totalCode.StartsWith("for")) {<br>        int pos=3;<br>        for (;pos&lt;totalCode.Length;pos++) {<br>          if (totalCode[pos]=='(') break;<br>        }<br>        int epos=pos;<br>        for (;epos&lt;totalCode.Length;epos++) {<br>          if (totalCode[epos]==')') break;<br>        }<br>        string num=totalCode.Substring(pos+1,epos-pos-1);<br>        pos=epos+1;<br>        int nest=0;<br>        for (;pos&lt;totalCode.Length;pos++) {<br>          if (totalCode[pos]=='{') break;<br>        }<br>        epos=pos+1;<br>        for (;epos&lt;totalCode.Length;epos++) {<br>          if (totalCode[epos]=='{') nest++;<br>          if (totalCode[epos]=='}' &amp;&amp; nest==0) break;<br>          if (totalCode[epos]=='}') nest--;<br>        }<br>        string sub=totalCode.Substring(pos+1,epos-pos-1);<br><br>        t=ParseFor(sub,long.Parse(num));<br>        al.Add(t);<br>        totalCode=totalCode.Substring(epos+1,totalCode.Length-(epos+1));<br>        continue;<br>      } else if (totalCode[0]==' ') {<br>        totalCode=totalCode.Remove(0,1);<br>        continue;<br>      }<br>    }<br>    <br>    long N=0;<br>    foreach (Node n in al) {<br>      N+=n.calc();<br>    }<br>    return N;<br>  }<br>}<br></td>