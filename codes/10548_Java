<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>import java.util.regex.*;<br>import java.text.*;<br>import java.math.*;<br> <br> <br>public class MaxTriangle<br>{<br> <br>    double square(double x1, double y1, double x2, double y2, double x3, double y3) {<br>        double a = Math.sqrt((x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2));<br>        double b = Math.sqrt((x1 - x3) * (x1 - x3) + (y1 - y3) * (y1 - y3));<br>        double c = Math.sqrt((x2 - x3) * (x2 - x3) + (y2 - y3) * (y2 - y3));<br>        if (a == 0 || b == 0 || c == 0 || (a + b &lt; c) || a + c &lt; b || b + c &lt; a) {<br>            return -100;<br>        }<br>        double p = (a + b + c) / 2.0;<br>        return Math.sqrt(p * (p - a) * (p - b) * (p - c));<br> <br>    }<br>    public double calculateArea(int a, int b) {<br>        int n = 0, m = 0;<br>        int[] ax = new int[10000];<br>        int[] ay = new int[10000];<br>        int[] bx = new int[10000];<br>        int[] by = new int[10000];<br>        for (int x = 0; x * x &lt;= a; ++x) {<br>            int bb = a - x * x;<br>            bb = (int) Math.round(Math.sqrt(bb));<br>            if (bb * bb + x * x == a) {<br>                ax[n] = x;<br>                ay[n] = bb;<br>                ++n;<br>            }<br>        }<br>        for (int x = 0; x * x &lt;= b; ++x) {<br>            int bb = b - x * x;<br>            bb = (int) Math.round(Math.sqrt(bb));<br>            if (bb * bb + x * x == b) {<br>                bx[m] = x;<br>                by[m] = bb;<br>                ++m;<br>            }<br>        }<br>        double ans = -1;<br>        for (int i = 0; i &lt; n; ++i) {<br>            for (int j = 0; j &lt; m; ++j) {<br>                double cur = square(0, 0, ax[i], ay[i], bx[j], by[j]);<br>                if (cur != -100 &amp;&amp; (ans == -1 || ans &lt; cur)) {<br>                    ans = cur;<br>                }<br> <br>                cur = square(0, 0, ax[i], ay[i], bx[j], -by[j]);<br>                if (cur != -100 &amp;&amp; (ans == -1 || ans &lt; cur)) {<br>                    ans = cur;<br>                }<br> <br>                cur = square(0, 0, ax[i], ay[i], -bx[j], by[j]);<br>                if (cur != -100 &amp;&amp; (ans == -1 || ans &lt; cur)) {<br>                    ans = cur;<br>                }<br> <br>                cur = square(0, 0, ax[i], ay[i], -bx[j], -by[j]);<br>                if (cur != -100 &amp;&amp; (ans == -1 || ans &lt; cur)) {<br>                    ans = cur;<br>                }<br> <br>                cur = square(0, 0, ax[i], -ay[i], bx[j], by[j]);<br>                if (cur != -100 &amp;&amp; (ans == -1 || ans &lt; cur)) {<br>                    ans = cur;<br>                }<br> <br>                cur = square(0, 0, ax[i], -ay[i], bx[j], -by[j]);<br>                if (cur != -100 &amp;&amp; (ans == -1 || ans &lt; cur)) {<br>                    ans = cur;<br>                }<br> <br>                cur = square(0, 0, ax[i], -ay[i], -bx[j], by[j]);<br>                if (cur != -100 &amp;&amp; (ans == -1 || ans &lt; cur)) {<br>                    ans = cur;<br>                }<br> <br>                cur = square(0, 0, ax[i], -ay[i], -bx[j], -by[j]);<br>                if (cur != -100 &amp;&amp; (ans == -1 || ans &lt; cur)) {<br>                    ans = cur;<br>                }<br> <br> <br>            }<br>        }<br> <br> <br> <br> <br>        return ans;<br> <br>    }<br>  <br> <br>}<br>//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!<br></td>