<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br><br>public class HexagonalBattlefield {<br>    const long MOD = 2000000011;<br><br>  public int countArrangements(int[] X, int[] Y, int N) {<br>        bool[,] taken = new bool[3 * N + 2, 3 * N + 2];<br>        for (int i = 0; i &lt; X.Length; ++i)<br>            taken[X[i] + N, Y[i] + N] = true;<br>        long[] cnt = new long[1 &lt;&lt; (N - 1)];<br>        cnt[cnt.Length - 1] = 1;<br>        for (int x = -N + 1; x &lt;= N - 1; ++x)<br>        {<br>            int minY = Math.Max(-N + 1, x - N + 1);<br>            int maxY = Math.Min(N - 1, x + N - 1);<br>            int sizeY = maxY - minY + 1;<br>            if (x &gt; 0)<br>                ++sizeY;<br>            for (int y = minY; y &lt;= maxY; ++y)<br>            {<br>                long[] ncnt = new long[1 &lt;&lt; sizeY];<br>                for (int prevMask = 0; prevMask &lt; cnt.Length; ++prevMask)<br>                {<br>                    if (cnt[prevMask] != 0)<br>                    {<br>                        for (int takeThis = 0; takeThis &lt;= 1; ++takeThis)<br>                        {<br>                            int takenThis = taken[x + N, y + N] ? 1 : 0;<br>                            if (takeThis + takenThis &gt; 1)<br>                                continue;<br>                            int nmask = prevMask;<br>                            bool mustTake = false;<br>                            if (x &lt;= 0)<br>                            {<br>                                if (y == minY)<br>                                    nmask &lt;&lt;= 1;<br>                                else<br>                                {<br>                                    if (((nmask &gt;&gt; (y - minY)) &amp; 1) == 0)<br>                                    {<br>                                        mustTake = true;<br>                                    } else {<br>                                        nmask -= 1 &lt;&lt; (y - minY);<br>                                    }<br>                                }<br>                            }<br>                            else<br>                            {<br>                                if (((nmask &gt;&gt; (y - minY)) &amp; 1) == 0)<br>                                {<br>                                    mustTake = true;<br>                                }<br>                                else<br>                                {<br>                                    nmask -= 1 &lt;&lt; (y - minY);<br>                                }<br>                                if (y == maxY)<br>                                {<br>                                    if (((nmask &gt;&gt; (maxY - minY + 1)) &amp; 1) == 0)<br>                                    {<br>                                        if (mustTake)<br>                                            continue;<br>                                        mustTake = true;<br>                                    }<br>                                    else<br>                                    {<br>                                        nmask -= 1 &lt;&lt; (maxY - minY + 1);<br>                                    }<br>                                }<br>                            }<br>                            nmask += (takenThis + takeThis) &lt;&lt; (y - minY);<br>                            if (takeThis == 0)<br>                            {<br>                                if (!mustTake)<br>                                {<br>                                    ncnt[nmask] = (ncnt[nmask] + cnt[prevMask]) % MOD;<br>                                }<br>                            }<br>                            else<br>                            {<br>                                if (mustTake)<br>                                {<br>                                    ncnt[nmask] = (ncnt[nmask] + cnt[prevMask]) % MOD;<br>                                }<br>                                else<br>                                {<br>                                    if (y &gt; minY &amp;&amp; (((nmask &gt;&gt; (y - 1 - minY)) &amp; 1) == 0))<br>                                    {<br>                                        ncnt[nmask + (1 &lt;&lt; (y - 1 - minY))] = (ncnt[nmask + (1 &lt;&lt; (y - 1 - minY))] + cnt[prevMask]) % MOD;<br>                                    }<br>                                    if (y &lt; maxY &amp;&amp; (((nmask &gt;&gt; (y + 1 - minY)) &amp; 1) == 0))<br>                                    {<br>                                        ncnt[nmask + (1 &lt;&lt; (y + 1 - minY))] = (ncnt[nmask + (1 &lt;&lt; (y + 1 - minY))] + cnt[prevMask]) % MOD;<br>                                    }<br>                                }<br>                            }<br>                        }<br>                    }<br>                }<br>                cnt = ncnt;<br>            }<br>        }<br>        return (int) (cnt[(1 &lt;&lt; N) - 1] % MOD);<br>  }<br><br><br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003] [modified for C# by Petr]<br>// Powered by CodeProcessor<br></td>