<td class="problemText" colspan="8" valign="middle" align="left">
            import static java.lang.Math.*;<br>import static java.math.BigInteger.*;<br>import static java.util.Arrays.*;<br>import static java.util.Collections.*;<br>import java.math.*;<br>import java.util.*;<br><br>public class HexagonalBattlefield {<br>  long M = 2000000011;<br>  int[] dx = {1, 1, 0}, dy = {0, 1, 1};<br>  public int countArrangements(int[] X, int[] Y, int N) {<br>    int n = X.length;<br>    List&lt;V&gt; vlist = new ArrayList&lt;V&gt;();<br>    V[][] vs = new V[N * 2 - 1][N * 2 - 1];<br>    for (int x = -N + 1; x &lt;= N - 1; x++) {<br>      int sy = max(-N + 1, x - N + 1);<br>      int ty = min(x + N - 1, N - 1);<br>      for (int y = sy; y &lt;= ty; y++) {<br>        vs[x + N - 1][y + N - 1] = new V();<br>      }<br>    }<br>    for (int i = 0; i &lt; n; i++) {<br>      vs[X[i] + N - 1][Y[i] + N - 1] = null;<br>    }<br>    for (int i = 0; i &lt; N * 2 - 1; i++) {<br>      for (int j = 0; j &lt; N * 2 - 1; j++) {<br>        for (int k = 0; k &lt; 3; k++) {<br>          int i2 = i + dx[k], j2 = j + dy[k];<br>          if (i2 &lt; N * 2 - 1 &amp;&amp; j2 &lt; N * 2 - 1) {<br>            connect(vs[i][j], vs[i2][j2]);<br>          }<br>        }<br>      }<br>    }<br>    for (V[] a : vs) for (V v : a) if (v != null) vlist.add(v);<br>    return (int)match(vlist.toArray(new V[0]));<br>  }<br>  long match(V[] vs) {<br>    int n = vs.length;<br>    for (int i = 0; i &lt; n; i++) vs[i].id = i;<br>    for (V v : vs) for (V u : v) v.max = max(v.max, u.id);<br>    long[] crt = {1};<br>    int[] cvi = new int[n], civ = new int[n];<br>    int cn = 0;<br>    fill(cvi, -1);<br>    for (int k = 0; k &lt; n; k++) {<br>      int nn = 0;<br>      int[] nvi = new int[n], niv = new int[n];<br>      fill(nvi, -1);<br>      for (int i = 0; i &lt;= k; i++) if (vs[i].max &gt; k) {<br>        niv[nn] = i;<br>        nvi[i] = nn++;<br>      }<br>      long[] next = new long[1 &lt;&lt; nn];<br>      loop : for (int i = 0; i &lt; 1 &lt;&lt; cn; i++) if (crt[i] &gt; 0) {<br>        int i2 = 0;<br>        boolean need = false;<br>        for (int j = 0; j &lt; cn; j++) if ((i &gt;&gt; j &amp; 1) != 0) {<br>          if (nvi[civ[j]] &lt; 0) {<br>            if (need) continue loop;<br>            need = true;<br>          } else {<br>            i2 |= 1 &lt;&lt; nvi[civ[j]];<br>          }<br>        }<br>        if (need) {<br>          next[i2] += crt[i];<br>          if (next[i2] &gt;= M) next[i2] -= M;<br>        } else {<br>          if (nvi[k] &gt;= 0) {<br>            next[i2 | 1 &lt;&lt; nvi[k]] += crt[i];<br>            if (next[i2 | 1 &lt;&lt; nvi[k]] &gt;= M) next[i2 | 1 &lt;&lt; nvi[k]] -= M;<br>          }<br>          for (V u : vs[k]) if (u.id &lt; k &amp;&amp; (i &gt;&gt; cvi[u.id] &amp; 1) != 0) {<br>            next[i2 ^ 1 &lt;&lt; nvi[u.id]] += crt[i];<br>            if (next[i2 ^ 1 &lt;&lt; nvi[u.id]] &gt;= M) next[i2 ^ 1 &lt;&lt; nvi[u.id]] -= M;<br>          }<br>        }<br>      }<br>      crt = next;  cvi = nvi; civ = niv; cn = nn;<br>    }<br>    return crt[0];<br>  }<br>  void connect(V v, V u) {<br>    if (v != null &amp;&amp; u != null) {<br>      v.add(u);<br>      u.add(v);<br>    }<br>  }<br>  class V extends ArrayList&lt;V&gt; {<br>    int id, max = -1;<br>  }<br>  void debug(Object...os) {<br>    System.err.println(deepToString(os));<br>  }<br>}<br></td>