<td class="problemText" colspan="8" valign="middle" align="left">
            // This is more complicated than it needs to be because I misread the problem<br>// and I thought we had to handle boards up to one size bigger. Oops!<br> <br>#include &lt;vector&gt;<br>#include &lt;string&gt;<br>#include &lt;cmath&gt;<br>#include &lt;map&gt;<br> <br>using std::vector;<br> <br>std::string code(char a[100]) {<br>  std::string s;<br>  for (int j = 0; j &lt; 100; ++j) {<br>    if (a[j]) s += char(j);<br>  }<br>  return s;<br>}<br> <br>long narr(char a[100]) {<br>  static std::map&lt;std::string, long&gt; cache;<br>  std::string s = code(a);<br>  if (s.length() == 0) return 1;<br>  if (cache.count(s) == 0) {<br>    long total = 0;<br>    char b[100];<br>    for (int j = 0; j &lt; 100; ++j) b[j] = a[j];<br>    int k = int(s[0]);<br>    b[k] = 0;<br>    if (b[k+1]) {<br>      b[k+1] = 0;<br>      total += narr(b);<br>      b[k+1] = 1;<br>    }<br>    if (b[k+10]) {<br>      b[k+10] = 0;<br>      total += narr(b);<br>      b[k+10] = 1;<br>    }<br>    if (b[k+11]) {<br>      b[k+11] = 0;<br>      total += narr(b);<br>      b[k+11] = 1;<br>    }<br>    cache[s] = total;<br>  }<br>  return cache[s];<br>}<br> <br> <br>class HexagonalBattlefieldEasy {<br>  public:<br>  static int countArrangements(vector&lt;int&gt; X, vector&lt;int&gt; Y, int N) {<br>    char a[100];<br>    N -= 1;<br>    for (int x = -4; x &lt;= 5; ++x) {<br>      for (int y = -4; y &lt;= 5; ++y) {<br>        int n = (4+y) * 10 + (4+x);<br>        a[n] = 1;<br>        if (x &gt; N or x &lt; -N or y &gt; N or y &lt; -N) a[n] = 0;<br>        if (x-y &gt; N or y-x &gt; N) a[n] = 0;<br>      }<br>    }<br>    for (int j = 0; j &lt; X.size(); ++j) {<br>      a[(4+Y[j]) * 10 + (4+X[j])] = 0;<br>    }<br> <br>    return narr(a);<br>  }<br>};<br></td>