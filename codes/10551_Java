<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>import java.util.regex.*;<br>import java.text.*;<br>import java.math.*;<br> <br> <br>public class StairsColoring<br>{<br>  static long mod = 1000000123L;<br>  static long modp = 1000000122L;<br>  <br>  static long modPow(long x, long pow) {<br>    long r = 1;<br>    while (pow &gt; 0) {<br>      if (pow % 2 == 1) {<br>        r = (r * x) % mod;<br>      }<br>      x = (x * x) % mod;<br>      pow /= 2;<br>    }<br>    return r;<br>  }<br>  <br>  static long[] factors = new long[] {2, 3, 11, 2089, 7253};<br>  <br>  static class Number {<br>    long[] mod;<br>    int[] pow;<br>    <br>    Number() {<br>      mod = new long[factors.length];<br>      pow = new int[factors.length];<br>    }<br>    <br>    Number mul(Number b) {<br>      Number r = new Number();<br>      for (int i = 0; i &lt; factors.length; ++i) {<br>        r.mod[i] = (mod[i] * b.mod[i]) % factors[i];<br>        r.pow[i] = pow[i] + b.pow[i];<br>      }<br>      return r;<br>    }<br>    <br>    static long modInverse(long x, long p) {<br>      return BigInteger.valueOf(x).modInverse(BigInteger.valueOf(p)).longValue();<br>    }<br>    <br>    Number div(Number b) {<br>      Number r = new Number();<br>      for (int i = 0; i &lt; factors.length; ++i) {<br>        r.mod[i] = (mod[i] * modInverse(b.mod[i], factors[i])) % factors[i];<br>        r.pow[i] = pow[i] - b.pow[i];<br>      }<br>      return r;<br>    }<br>    <br>    static Number valueOf(long x) {<br>      Number r = new Number();<br>      for (int i = 0; i &lt; factors.length; ++i) {<br>        long xx = x;<br>        while (xx % factors[i] == 0) {<br>          r.pow[i]++;<br>          xx /= factors[i];<br>        }<br>        r.mod[i] = xx % factors[i];<br>      }<br>      return r;<br>    }<br>    <br>    long longValue() {<br>      long mul = 1;<br>      long x = 0;<br>      for (int i = 0; i &lt; factors.length; ++i) {<br>        if (pow[i] &lt; 0) {<br>          throw new AssertionError();<br>        }<br>        long m = pow[i] == 0 ? mod[i] : 0;<br>        long p = factors[i];<br>        long newMul = mul * p;<br>        long newx = (x * p * modInverse(p, mul) + m * mul * modInverse(mul, p)) % newMul;<br>        mul = newMul;<br>        x = newx;<br>      }<br>      if (mul != modp) {<br>        throw new AssertionError();<br>      }<br>      return x;<br>    }<br>  }<br>  <br>  static Number fact(long x) {<br>    Number r = new Number();<br>    for (int i = 0; i &lt; factors.length; ++i) {<br>      r.mod[i] = 1;<br>      setFact(r, i, x);<br>    }<br>    return r;<br>  }<br>  <br>  static void setFact(Number r, int i, long x) {<br>    if (x == 0) {<br>      return;<br>    }<br>    long p = factors[i];<br>    long a = x / p;<br>    long b = x % p;<br>    if (a % 2 == 1) {<br>      r.mod[i] = (p - r.mod[i]) % p;<br>    }<br>    for (int t = 1; t &lt;= b; ++t) {<br>      r.mod[i] = (r.mod[i] * t) % p;<br>    }<br>    r.pow[i] += a;<br>    setFact(r, i, a);<br>  }<br>  <br>  public int coloringCount(int N, int K)<br>  {<br>    long mod = fact(2 * N).div(fact(N)).div(fact(N)).div(Number.valueOf(N + 1)).longValue();<br>    System.out.println(mod);<br>    return (int)modPow(K, mod);<br>  }<br>  <br> <br>}<br>//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!<br></td>