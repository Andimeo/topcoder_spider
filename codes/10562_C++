<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;cassert&gt;<br>#include &lt;cctype&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cstring&gt;<br>#include &lt;ctime&gt;<br> <br>#include &lt;algorithm&gt;<br>#include &lt;functional&gt;<br>#include &lt;map&gt;<br>#include &lt;queue&gt;<br>#include &lt;set&gt;<br>#include &lt;stack&gt;<br>#include &lt;string&gt;<br>#include &lt;utility&gt;<br>#include &lt;vector&gt;<br> <br>#include &lt;iostream&gt;<br>#include &lt;sstream&gt;<br>#include &lt;fstream&gt;<br>using namespace std;<br>const int NULA = 0;<br> <br> <br>typedef long long llint;<br> <br>llint dp[ 2 ][ 501 ][ 501 ];<br> <br>class RandomAppleEasy {<br>   public:<br>      double theRed( vector &lt;int&gt; r, vector &lt;int&gt; g ) {<br>   int N = r.size();<br>   <br>   for( int i = N; i &gt;= 0; --i ) {<br>      int I = ( i &amp; 1 );<br>      for( int j = 0; j &lt;= 500; ++j )<br>      for( int k = 0; k &lt;= 500; ++k ) {<br>         if( i == N ) { dp[I][j][k] = ( j == 0 &amp;&amp; k == 0 ); continue; }<br>         dp[I][j][k] = dp[I^1][j][k];<br>         if( j &gt;= r[i] &amp;&amp; k &gt;= g[i] ) <br>      dp[I][j][k] += dp[I^1][j-r[i]][k-g[i]];<br>      }<br>   }<br> <br>   double Sol = 0.0;<br>   for( int i = 0; i &lt;= 500; ++i )<br>   for( int j = 0; j &lt;= 500; ++j ) {<br>      if( i == 0 &amp;&amp; j == 0 ) continue;<br>      Sol += double( i )/double( i+j )*double( dp[0][i][j] );<br>   }<br> <br>   Sol /= double( ( 1LL &lt;&lt; N )-1 );<br> <br>   return Sol;<br>      }<br>};<br> <br> <br> <br> <br> <br> <br>// Powered by FileEdit<br>// Powered by moj 3.0 beta 11 [modified TZTester]<br>// Powered by CodeProcessor<br></td>