<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;iostream&gt;<br>#include &lt;vector&gt;<br>#include &lt;string&gt;<br><br>using namespace std;<br><br>bool vis[100];<br>int d[100];<br>vector &lt;string&gt; road;<br>int n;<br><br>class HamiltonPath<br>{<br>    void dfs(int now)<br>    {<br>        vis[now]=true;<br>        for (int i=0;i&lt;n;i++)<br>            if ((road[now][i]=='Y')&amp;&amp;(!vis[i])) dfs(i);<br>    }<br>    <br>public:<br>    int countPaths(vector &lt;string&gt; roads)<br>    {<br>        road=roads;<br>        memset(vis,false,sizeof(vis));<br>        n=roads.size();<br>        for (int i=0;i&lt;n;i++)<br>        {<br>            int s=0;<br>            for (int j=0;j&lt;n;j++)<br>                if (roads[i][j]=='Y') s++;<br>            if (s&gt;2) return 0;<br>            d[i]=s;<br>        }<br>        int tot1=0,tot2=0;<br>        for (int i=0;i&lt;n;i++)<br>            if ((!vis[i])&amp;&amp;(d[i]&lt;2)) <br>            {<br>                dfs(i);<br>                if (d[i]==0) tot1++;<br>                    else tot2++;<br>            }<br>        for (int i=0;i&lt;n;i++)<br>            if (!vis[i]) return 0;<br>        long long ans=1;<br>        for (long long i=0;i&lt;tot1+tot2;i++) ans=(ans*(i+1)) % 1000000007;<br>        for (int i=0;i&lt;tot2;i++)<br>            ans=(ans*2) % 1000000007;<br>        return ans;<br>    }<br>};<br></td>