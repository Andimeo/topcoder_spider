<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>import java.util.regex.*;<br>import java.text.*;<br>import java.math.*;<br>import java.awt.geom.*;<br> <br>public class HamiltonPath<br>{<br>  final long MOD = 1000000007;<br>  int n;<br>  boolean[][] con;<br>  boolean[] used;<br>  boolean bad;<br>  <br>  int dfs(int a, int p){<br>    int res = 1;<br>    used[a] = true;<br>    for (int i = 0; i &lt; n; ++i)<br>      if (con[a][i] &amp;&amp; i != p){<br>        if (used[i])<br>          bad = true;<br>        else<br>          res += dfs(i, a);<br>      }<br>    return res;<br>  }<br>  <br>  public int countPaths(String[] roads)<br>  {<br>    bad = false;<br>    n = roads.length;<br>    con = new boolean[n][n];<br>    for (int i = 0; i &lt; n; ++i)<br>      for (int j = 0; j &lt; n; ++j)<br>        con[i][j] = roads[i].charAt(j) == 'Y';<br>    int[] cnt = new int[n];<br>    int allcnt = 0;<br>    used = new boolean[n];<br>    int one = 0, more1 = 0;<br>    for (int i = 0; i &lt; n; ++i){<br>      for (int j = 0; j &lt; n; ++j)<br>        if (con[i][j])<br>          ++cnt[i];<br>      allcnt += cnt[i];<br>      if (cnt[i] &gt; 2)<br>        return 0;<br>      if (!used[i]){<br>        int cur = dfs(i, -1);<br>        if (cur &gt; 1)<br>          ++more1;<br>        else<br>          ++one;<br>      }<br>    }<br>    allcnt /= 2;<br>    if (allcnt &gt;= n || bad)<br>      return 0;<br>    long ans = 1;<br>    for (long i = 1; i &lt;= (one + more1); ++i)<br>      ans = (ans * i) % MOD;<br>    for (int i = 0; i &lt; more1; ++i)<br>      ans = (ans * 2L) % MOD;<br>    <br>    return (int)(ans);<br>  }<br>  <br>  <br>}<br>//Powered by [KawigiEdit] 2.0!<br></td>