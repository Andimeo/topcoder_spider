<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;cstdlib&gt;<br>#include &lt;cctype&gt;<br>#include &lt;cstring&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cmath&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;vector&gt;<br>#include &lt;string&gt;<br>#include &lt;iostream&gt;<br>#include &lt;sstream&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;queue&gt;<br>#include &lt;stack&gt;<br>#include &lt;fstream&gt;<br>#include &lt;numeric&gt;<br>#include &lt;iomanip&gt;<br>#include &lt;bitset&gt;<br>#include &lt;list&gt;<br>#include &lt;stdexcept&gt;<br>#include &lt;functional&gt;<br>#include &lt;utility&gt;<br>#include &lt;ctime&gt;<br>using namespace std;<br><br>#define PB push_back<br>#define MP make_pair<br><br>#define REP(i,n) for(i=0;i&lt;(n);++i)<br>#define FOR(i,l,h) for(i=(l);i&lt;=(h);++i)<br>#define FORD(i,h,l) for(i=(h);i&gt;=(l);--i)<br><br>typedef vector&lt;int&gt; VI;<br>typedef vector&lt;string&gt; VS;<br>typedef vector&lt;double&gt; VD;<br>typedef long long LL;<br>typedef pair&lt;int,int&gt; PII;<br><br><br>class HanoiTower<br>{<br>        public:<br>        map&lt;vector&lt;string&gt;, int&gt; m;<br>        priority_queue&lt;pair&lt;int, vector&lt;string&gt; &gt; &gt; que;<br>        int cc[3];<br>        int cal(vector&lt;string&gt; v, int x){<br>            int ret = x;<br>            for(int i = 0; i &lt; 3; i ++){<br>                bool b = true;<br>                for(int j = 0; j &lt; v[i].size(); j ++){<br>                    if(v[i][j] != 'A' + i) b = false;<br>                    if(!b) ret ++;<br>                }<br>            }<br>            return 100000 - ret;<br>        }<br>        bool test(vector&lt;string&gt; v, int x){<br>//            cout &lt;&lt; v[0] &lt;&lt; " " &lt;&lt; v[1] &lt;&lt; " " &lt;&lt; v[2] &lt;&lt; endl;<br>            if(m.count(v) == 0){<br>                m[v] = x;<br>                que.push(make_pair(cal(v, x), v));<br>            }<br>            for(int i = 0; i &lt; v[0].size(); i ++) if(v[0][i] != 'A') return false;<br>            for(int i = 0; i &lt; v[1].size(); i ++) if(v[1][i] != 'B') return false;<br>            for(int i = 0; i &lt; v[2].size(); i ++) if(v[2][i] != 'C') return false;<br>            return true;<br>        }<br>        bool con(string s, char c){<br>            for(int i = 0; i &lt; s.size(); i ++) if(s[i] != c) return false;<br>            return true;<br>        }<br>        int moves(string pegA, string pegB, string pegC)<br>        {<br>            m.clear();<br>            while(!que.empty()) que.pop();<br>            vector&lt;string&gt; v(3), tmp(3);<br>            v[0] = pegA; v[1] = pegB; v[2] = pegC;<br>            if(test(v, 0)) return 0;<br>            while(!que.empty()){<br>                v = que.top().second; que.pop();<br>//                cout &lt;&lt; v[0] &lt;&lt; " " &lt;&lt; v[1] &lt;&lt; " " &lt;&lt; v[2] &lt;&lt; endl;<br>                int x = m[v];<br>                cc[0] = con(v[0], 'A');<br>                cc[1] = con(v[1], 'B');<br>                cc[2] = con(v[2], 'C');<br>                bool over = false;<br>                for(int i = 0; i &lt; 3; i ++){<br>                    if(cc[i]){<br>                        for(int j = 0; j &lt; 3; j ++)if(i!=j){<br>                            if(v[j].size() != 0 &amp;&amp; v[j][v[j].size()-1] == 'A'+i){<br>                                v[i] += 'A' + i;<br>                                v[j] = v[j].substr(0, v[j].size()-1);<br>                                 if(test(v, x + 1)) return x + 1;<br>                                 over = true; break;<br>                            }<br>                        }<br>                        if(over) break;<br>                    }<br>                }<br>                if(over) continue;<br>                if(v[0].size() != 0 &amp;&amp; !cc[0]){<br>                    //                    cout &lt;&lt; v[0] &lt;&lt; " " &lt;&lt; v[1] &lt;&lt; " " &lt;&lt; v[2] &lt;&lt; endl;<br>                    tmp[0] = v[0].substr(0, v[0].size() - 1);<br>                    //                    cout &lt;&lt; v[0] &lt;&lt; " " &lt;&lt; v[1] &lt;&lt; " " &lt;&lt; v[2] &lt;&lt; endl;<br>                    tmp[1] = v[1] + v[0][v[0].size()-1];<br>                    tmp[2] = v[2];<br>                    if(test(tmp, x + 1)) return x + 1;<br>                    tmp[2] = v[2] + v[0][v[0].size()-1];<br>                    tmp[1] = v[1];<br>                    if(test(tmp, x + 1)) return x + 1;<br>                }<br>                if(v[1].size() != 0  &amp;&amp; !cc[1]){<br>                    tmp[1] = v[1].substr(0, v[1].size() - 1);<br>                    tmp[0] = v[0] + v[1][v[1].size()-1];<br>                    tmp[2] = v[2];<br>                    if(test(tmp, x + 1)) return x + 1;<br>                    tmp[2] = v[2] + v[1][v[1].size()-1];<br>                    tmp[0] = v[0];<br>                    if(test(tmp, x + 1)) return x + 1;<br>                }<br>                if(v[2].size() != 0  &amp;&amp; !cc[2]){<br>                    tmp[2] = v[2].substr(0, v[2].size() - 1);<br>                    tmp[1] = v[1] + v[2][v[2].size()-1];<br>                    tmp[0] = v[0];<br>                    if(test(tmp, x + 1)) return x + 1;<br>                    tmp[0] = v[0] + v[2][v[2].size()-1];<br>                    tmp[1] = v[1];<br>                    if(test(tmp, x + 1)) return x + 1;<br>                }<br>            }<br>            return -1;<br>        }<br>        <br><br>};<br><br><br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003]<br>// Powered by CodeProcessor<br></td>