<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>import java.math.*;<br><br>public class  HanoiTower{<br>  public  int moves(String pegA, String pegB, String pegC){<br>    if(pegA.replaceAll("A", "").equals("")&amp;&amp;pegB.replaceAll("B", "").equals("")&amp;&amp;pegC.replaceAll("C", "").equals(""))<br>      return 0;<br>      <br>    TreeSet&lt;pos&gt; ts = new TreeSet&lt;pos&gt;();<br>    pos.start.a = pegA;<br>    pos.start.b = pegB;<br>    pos.start.c = pegC;<br>    pos.start.score =999;<br>    ts.add(pos.start);<br>    while(true){<br>      pos first = ts.first();<br>      if(first.score==0)<br>        return first.step;<br>      ts.remove(first);<br>      if(first.score==0)<br>        return first.step;<br>      for(int i=0;i&lt;3;i++)<br>        for( int j=0;j&lt;3;j++){<br>          pos ret = pos.m(first, i,j);<br>          if(ret==null)<br>            continue;<br>          ts.add(ret);<br>          <br>        }<br>      <br>    <br>    <br>    }<br>  }<br>}<br>class pos implements Comparable{<br>  static pos start = new pos();<br>  public int compareTo(Object o){<br>    pos g = (pos)o;<br>    if(g.score+g.step&gt;score+step)<br>      return -1;<br>    if(g.score+g.step&lt;score+step)<br>      return 1;<br>    int v = 0;<br>    v = g.a.compareTo(a);<br>    if(v!=0)<br>      return v;<br>    v = g.b.compareTo(b);<br>    if(v!=0)<br>      return v;<br>    v = g.c.compareTo(c);<br>      return v;<br>  <br>  }<br>  public String a, b, c;<br>  public int score = 0;<br>  public int step = 0;<br>  private pos(){}<br>  private static TreeSet&lt;String&gt; ts = new TreeSet&lt;String&gt;();<br>  public static pos m(pos P, int f, int t){<br>    if(f==t)<br>      return null;<br>    String A = P.a;<br>    String B = P.b;<br>    String C = P.c;<br>    int st = P.step;<br>    while(A.startsWith("A"))<br>      A=A.substring(1);<br>    while(B.startsWith("B"))<br>      B=B.substring(1);<br>    while(C.startsWith("C"))<br>      C=C.substring(1);<br>    String[] l = {A,B,C};<br>    if(l[f].length()==0)<br>      return null;<br>    int orgS = 0;<br>    for(int i=0;i&lt;3;i++)<br>      orgS += l[i].length();<br>    l[t]+=l[f].substring(l[f].length()-1);<br>    l[f]=l[f].substring(0,l[f].length()-1);<br>    for(int i=0;i&lt;3;i++)<br>      orgS -= l[i].length();<br>    if(orgS!=0)<br>      System.out.println("Length is changing!");<br>    int s=0;<br>    for(int i=0;i&lt;3;i++){<br>      while(l[i].startsWith(i==0?"A":(i==1?"B":"C")))<br>        l[i]=l[i].substring(1);<br>      s+=l[i].length();<br>    }<br>    pos ret = new pos();<br>    ret.a = l[0];<br>    ret.b = l[1];<br>    ret.c = l[2];<br>    ret.score = s;<br>    ret.step = st+1;<br>    String memv = ret.a + "|" + ret.b + "|" + ret.c;<br>    if(ts.contains(memv))<br>      return null;<br>    else<br>      ts.add(memv);<br>    return ret;<br>    <br>  }<br>}<br></td>