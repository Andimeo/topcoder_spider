<td class="problemText" colspan="8" valign="middle" align="left">
            Imports Microsoft.VisualBasic<br>Imports System<br>Imports System.Collections<br>Imports System.Text<br>Imports System.Diagnostics<br>Imports System.Collections.Generic<br> <br>Public Class KnightsTour<br>    Structure Point<br>        Public X, Y As Integer<br>        Public AccNumber As Integer<br>        Public Sub New(ByVal x As Integer, ByVal y As Integer)<br>            Me.X = x<br> <br>            Me.Y = y<br>        End Sub<br>    End Structure<br> <br>    Dim offsets As Point() = New Point() { _<br>        New Point(1, 2), New Point(-1, 2), New Point(1, -2), New Point(-1, -2), _<br>        New Point(2, 1), New Point(-2, 1), New Point(2, -1), New Point(-2, -1)}<br> <br>    Public Function visitedPositions(ByVal board As String()) As Integer<br>        board = CType(board.Clone(), String())<br>        Dim currentPoint As Point<br>        For x As Integer = 0 To board(0).Length - 1<br>            For y As Integer = 0 To board.Length - 1<br>                If board(y)(x) = "K"c Then<br>                    currentPoint = New Point(x, y)<br>                    GoTo start<br>                End If<br>            Next<br>        Next<br>start:<br>        Dim ret As Integer = 0<br>        Do<br>            ret += 1<br>            Dim accessibleCells As List(Of Point) = GetAccessibleCells(board, currentPoint.X, currentPoint.Y)<br>            If accessibleCells.Count = 0 Then<br>                Exit Do<br>            End If<br>            currentPoint = accessibleCells(0)<br>            Dim chars() As Char = board(currentPoint.Y).ToCharArray()<br>            chars(currentPoint.X) = "*"c<br>            board(currentPoint.Y) = New String(chars)<br>        Loop<br>        Return ret<br>    End Function<br> <br>    Public Function GetAccessibleCells(ByVal board As String(), ByVal x As Integer, ByVal y As Integer) As List(Of Point)<br>        Dim ret As New List(Of Point)<br>        For Each offset As Point In offsets<br>            Dim target As New Point(x + offset.X, y + offset.Y)<br>            If IsAccessible(board, target.X, target.Y) Then<br>                target.AccNumber = CalcAccNumber(board, target.X, target.Y)<br>                ret.Add(target)<br>            End If<br>        Next<br>        ret.Sort(AddressOf PointComparison)<br>        Return ret<br>    End Function<br> <br>    Function PointComparison(ByVal a As Point, ByVal b As Point) As Integer<br> <br>        If a.AccNumber &lt;&gt; b.AccNumber Then<br>            Return a.AccNumber.CompareTo(b.AccNumber)<br>        End If<br>        If a.Y &lt;&gt; b.Y Then<br>            Return a.Y.CompareTo(b.Y)<br>        End If<br>        Return a.X.CompareTo(b.X)<br>    End Function<br> <br>    Function CalcAccNumber(ByVal board As String(), ByVal x As Integer, ByVal y As Integer) As Integer<br>        Debug.Assert(x &lt; board(0).Length)<br>        Debug.Assert(y &lt; board.Length)<br>        Dim ret As Integer<br>        If IsAccessible(board, x + 1, y + 2) Then<br>            ret += 1<br>        End If<br>        If IsAccessible(board, x + 1, y - 2) Then<br>            ret += 1<br>        End If<br>        If IsAccessible(board, x - 1, y + 2) Then<br>            ret += 1<br>        End If<br>        If IsAccessible(board, x - 1, y - 2) Then<br>            ret += 1<br>        End If<br>        If IsAccessible(board, x + 2, y + 1) Then<br>            ret += 1<br>        End If<br>        If IsAccessible(board, x + 2, y - 1) Then<br>            ret += 1<br>        End If<br>        If IsAccessible(board, x - 2, y + 1) Then<br>            ret += 1<br>        End If<br>        If IsAccessible(board, x - 2, y - 1) Then<br>            ret += 1<br>        End If<br>        Return ret<br>    End Function<br> <br>    Function IsAccessible(ByVal board As String(), ByVal x As Integer, ByVal y As Integer) As Boolean<br>        If x &lt; 0 OrElse y &lt; 0 Then<br>            Return False<br>        End If<br>        If x &gt; board(0).Length - 1 OrElse y &gt; board.Length - 1 Then<br>            Return False<br>        End If<br>        Return board(y)(x) = "."c<br>    End Function<br>End Class<br> <br> <br>'Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!<br></td>