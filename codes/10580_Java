<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>import java.util.regex.*;<br>import java.text.*;<br>import java.math.*;<br>import java.awt.geom.*;<br> <br>public class PeopleYouMayKnow<br>{<br>  int n, m;<br>  boolean[][] map;<br>  void parse(String[] in, char on)<br>  {<br>    n = in.length;<br>    m = in[0].length();<br>    map = new boolean[n][m];<br>    for (int i = 0; i &lt; n; i++)<br>    {<br>      for (int j = 0; j &lt; m; j++)<br>      {<br>        map[i][j] = in[i].charAt(j) == on;<br>      }<br>    }<br>  }<br> <br>  int[] bfs(int a)<br>  {<br>    int[] res = new int[n];<br>    boolean[] vis = new boolean[n];<br>    int[] q = new int[n];<br>    int qh, qt;<br>    q[0] = a;<br>    vis[a] = true;<br>    for (qh = 0, qt = 1; qh != qt; qh++)<br>    {<br>      int u = q[qh];<br>      for (int v = 0; v &lt; n; v++)<br>      {<br>        if (!map[u][v] || vis[v]) continue;<br>        vis[v] = true;<br>        q[qt++] = v;<br>        res[v] = res[u] + 1;<br>      }<br>    }<br>    return res;<br>  }<br>  public int maximalScore(String[] friends, int a, int b)<br>  {<br>    parse(friends, 'Y');<br>    boolean[] out = new boolean[n];<br>    out[a] = true;<br>    out[b] = true;<br>    int res = 0;<br>    int[] d1 = bfs(a);<br>    int[] d2 = bfs(b);<br>    for (int i = 0; i &lt; n; i++)<br>    {<br>      if (d1[i] == 1 &amp;&amp; d2[i] == 1)<br>      {<br>        out[i] = true;<br>        res++;<br>      }<br>    }<br>    int n2 = 1 + n + n + 1;<br>    int[][] c = new int[n2][n2];<br>    for (int i = 0; i &lt; n; i++)<br>    {<br>      if (out[i]) continue;<br>      if (d1[i] == 1)<br>      {<br>        c[0][i + 1] = 1;<br>      }<br>      if (d2[i] == 1)<br>      {<br>        c[n + 1 + i][n2 - 1] = 1;<br>      }<br>      for (int j = 0; j &lt; n; j++)<br>      {<br>        if (out[j]) continue;<br>        if (map[i][j])<br>        {<br>          c[1 + i][n + 1 + j] = 1;<br>        }<br>      }<br>    }<br>    return res + maxFlow(c);<br>    <br>    <br>  }<br> <br>  <br>  int[] maxFlowBFS(int[][] c, ArrayList&lt;Integer&gt;[] to)<br>  {<br>    int n = c.length;<br>    int[] from = new int[n];<br>    boolean[] used = new boolean[n];<br>    int[] q = new int[n];<br>    q[0] = 0;<br>    used[0] = true;<br>    int h, t;<br>    for (h = 0, t = 1; h != t; h++)<br>    {<br>      int u = q[h];<br>      for (int v : to[u])<br>      {<br>        if (used[v]) continue;<br>        if (c[u][v] &lt;= 0) continue;<br>        from[v] = u;<br>        used[v] = true;<br>        q[t++] = v;<br>      }<br>    }<br>    if (!used[n - 1]) return null;<br>    int[] revpath = new int[n];<br>    int v = n - 1;<br>    int pathlen;<br>    for (pathlen = 0; pathlen &lt; n; pathlen++)<br>    {<br>      revpath[pathlen] = v;<br>      v = from[v];<br>      if (v == 0) break;<br>    }<br>    int[] res = new int[pathlen + 1];<br>    for (int i = 0; i &lt;= pathlen; i++)<br>    {<br>      res[pathlen - i] = revpath[i];<br>    }<br>    return res;<br>  }<br>  <br>  int maxFlow(int[][] c)<br>  {<br>    int n = c.length;<br>    ArrayList&lt;Integer&gt;[] to = new ArrayList[n];<br>    for (int i = 0; i &lt; n; i++)<br>    {<br>      to[i] = new ArrayList&lt;Integer&gt;();<br>      for (int j = 0; j &lt; n; j++)<br>      {<br>        if (c[i][j] &gt; 0 || c[j][i] &gt; 0)<br>        {<br>          to[i].add(j);<br>        }<br>      }<br>    }<br>    int[] path;<br>    int res = 0;<br>    while ((path = maxFlowBFS(c, to)) != null)<br>    {<br>      int u = 0;<br>      int v = path[0];<br>      int w = c[u][v];<br>      for (int i = 1; i &lt; path.length; i++)<br>      {<br>        u = v;<br>        v = path[i];<br>        w = Math.min(w, c[u][v]);<br>      }<br>      v = 0;<br>      for (int i = 0; i &lt; path.length; i++)<br>      {<br>        u = v;<br>        v = path[i];<br>        c[u][v] -= w;<br>        c[v][u] += w;<br>      }<br>      res += w;<br>    }<br>    return res;<br>  }<br>  <br>  void swapVerts(int[][] c, int u, int v)<br>  {<br>    int n = c.length;<br>    for (int i = 0; i &lt; n; i++)<br>    {<br>      int t = c[i][v]; c[i][v] = c[i][u]; c[i][u] = t;<br>    }<br>    for (int i = 0; i &lt; n; i++)<br>    {<br>      int t = c[v][i]; c[v][i] = c[u][i]; c[u][i] = t;<br>    }<br>  }<br> <br>      <br>  <br>}<br>//Powered by [KawigiEdit] 2.0!<br></td>