<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;vector&gt;<br>#include &lt;list&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;deque&gt;<br>#include &lt;queue&gt;<br>#include &lt;stack&gt;<br>#include &lt;bitset&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;functional&gt;<br>#include &lt;numeric&gt;<br>#include &lt;utility&gt;<br>#include &lt;sstream&gt;<br>#include &lt;iostream&gt;<br>#include &lt;iomanip&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cctype&gt;<br>#include &lt;string&gt;<br>#include &lt;cstring&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;ctime&gt;<br><br>using namespace std;<br><br>typedef long long int64;<br>template&lt;class T&gt; inline void checkmin(T &amp;a,T b){if(b&lt;a) a=b;}<br><br>class CellScores<br>{<br>public:<br>  int n,m;<br>  int X[2000005],Y[2000005];<br>  bool G[1600][1600];<br>  int QC[1600][1600];<br>  int SU[1600][1600],SD[1600][1600];<br>  int64 delta[1600];<br>  int U[1600],D[1600];<br>  int sizeQ,length[1600],V1[1600],V2[1600],S[1600];<br>  int64 countScores(int _n, int _m, int k, int X0, int AA, int BB, int Y0, int CC, int DD)<br>  {<br>    n=_n;<br>    m=_m;<br>    X[0]=X0%n;<br>    for (int i=1;i&lt;m+k;i++) X[i]=(X[i-1]*AA+BB)%n;<br>    Y[0]=Y0%n;<br>    for (int i=1;i&lt;m+k;i++) Y[i]=(Y[i-1]*CC+DD)%n;<br>    memset(G,true,sizeof(G));<br>    for (int i=0;i&lt;m;i++) G[X[i]][Y[i]]=false;<br>    memset(QC,0,sizeof(QC));<br>    for (int i=m;i&lt;m+k;i++) QC[X[i]][Y[i]]++;<br>    for (int i=0;i&lt;n;i++) for (int j=0;j&lt;n;j++)<br>      if (G[i][j]) SU[i][j]=(i==0)?1:(SU[i-1][j]+1);<br>      else SU[i][j]=0;<br>    for (int i=n-1;i&gt;=0;i--) for (int j=0;j&lt;n;j++)<br>      if (G[i][j]) SD[i][j]=(i==n-1)?1:(SD[i+1][j]+1);<br>      else SD[i][j]=0;<br>    int64 R=0;<br>    for (int key=0;key&lt;n;key++)<br>    {<br>      memset(delta,0,sizeof(delta));<br>      for (int i=0;i&lt;n;i++)<br>      {<br>        U[i]=SU[key][i];<br>        D[i]=SD[key][i];<br>      }<br>      for (int step=0;step&lt;2;step++)<br>      {<br>        sizeQ=0;<br>        for (int rd=0;rd&lt;n;rd++)<br>        {<br>          int i=(step==0)?(n-1-rd):(rd);<br>          length[sizeQ]=1;<br>          V1[sizeQ]=U[i];<br>          V2[sizeQ]=D[i];<br>          sizeQ++;<br>          while (sizeQ&gt;=2 &amp;&amp; V1[sizeQ-1]&lt;=V1[sizeQ-2] &amp;&amp; V2[sizeQ-1]&lt;=V2[sizeQ-2])<br>          {<br>            sizeQ--;<br>            checkmin(V1[sizeQ-1],V1[sizeQ]);<br>            checkmin(V2[sizeQ-1],V2[sizeQ]);<br>            length[sizeQ-1]+=length[sizeQ];<br>            S[sizeQ-1]=(sizeQ==1)?0:S[sizeQ-2];<br>            S[sizeQ-1]+=length[sizeQ-1]*V1[sizeQ-1]*V2[sizeQ-1];<br>          }<br>          int k=sizeQ-1;<br>          for (;k-1&gt;=0 &amp;&amp; (V1[k]&lt;V1[k-1] || V2[k]&lt;V2[k-1]);k--)<br>          {<br>            checkmin(V1[k-1],V1[k]);<br>            checkmin(V2[k-1],V2[k]);<br>          }<br>          for (;k&lt;sizeQ;k++)<br>          {<br>            S[k]=(k==0)?0:S[k-1];<br>            S[k]+=length[k]*V1[k]*V2[k];<br>          }<br>          while (sizeQ&gt;=2 &amp;&amp; V1[sizeQ-1]&lt;=V1[sizeQ-2] &amp;&amp; V2[sizeQ-1]&lt;=V2[sizeQ-2])<br>          {<br>            sizeQ--;<br>            checkmin(V1[sizeQ-1],V1[sizeQ]);<br>            checkmin(V2[sizeQ-1],V2[sizeQ]);<br>            length[sizeQ-1]+=length[sizeQ];<br>            S[sizeQ-1]=(sizeQ==1)?0:S[sizeQ-2];<br>            S[sizeQ-1]+=length[sizeQ-1]*V1[sizeQ-1]*V2[sizeQ-1];<br>          }<br>          if (step==0)<br>            delta[i]+=S[sizeQ-1];<br>          else<br>            delta[i+1]-=S[sizeQ-1];<br>        }<br>      }<br>      int64 S=0;<br>      for (int i=0;i&lt;n;i++)<br>      {<br>        S+=delta[i];<br>        R+=S*QC[key][i];<br>      }<br>    }<br>    return R;<br>  }<br>};<br></td>