<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;iostream&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;queue&gt;<br>#include &lt;cmath&gt;<br>#include &lt;map&gt;<br>#include &lt;sstream&gt;<br>#include &lt;cstdio&gt;<br>using namespace std;<br>#define REP(a,b) for(int a=0;a&lt;b;a++)<br>#define FOR(a,b,c) for(int a=b;a&lt;c;a++)<br>#define INF 100000000<br>#define SZ(a) (int)a.size()<br> <br>class SteeplechaseTrack {<br>public:<br>        int maxComplexity(vector &lt;string&gt;, vector &lt;string&gt;, int);<br>};<br> <br>int SteeplechaseTrack::maxComplexity(vector &lt;string&gt; fences, vector &lt;string&gt; tracks, int N) {<br>  int T = SZ(tracks);<br>  vector&lt;int&gt; edge[T];<br>  REP(i,T)<br>  {<br>    REP(j,T)<br>    {<br>      if( tracks[i][j]!='0' )<br>      {<br>        edge[i].push_back(j);<br>      }<br>    }<br>  }<br>  vector&lt; vector&lt;int&gt; &gt; dp( N, vector&lt;int&gt;( T) );<br>  int ans = -1;<br>  REP(i,T)<br>  {<br>    if( fences[i][1]!='0' )<br>    {<br>      dp[0][i]=fences[i][0]-'0' + fences[i][1] - '0';<br>      if( fences[i][2]!='0' )<br>        ans = max(ans,dp[0][i]+fences[i][2]-'0');<br>    }<br>  }<br>  FOR(i,1,N)<br>  {<br>    REP(j,T)<br>    {<br>      if(dp[i-1][j])<br>      {<br>        REP(k,SZ(edge[j]))<br>        {<br>          dp[i][edge[j][k]] = max(dp[i][edge[j][k]], dp[i-1][j] + tracks[j][edge[j][k]] -'0' + fences[edge[j][k]][0] - '0' );<br>          if(dp[i][edge[j][k]] &amp;&amp; fences[edge[j][k]][2]!='0')<br>          {<br>            ans = max(ans,dp[i][edge[j][k]]+fences[edge[j][k]][2]-'0');<br>          }<br>        }<br>      }<br>    }<br>  }<br>  return ans;<br>}<br> <br> <br>//Powered by [KawigiEdit] 2.0!<br> <br>//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!<br></td>