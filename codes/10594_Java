<td class="problemText" colspan="8" valign="middle" align="left">
            public class SteeplechaseTrack {<br>  public int maxComplexity(String[] fences, String[] tracks, int N) {<br>    int[][] mem = new int[2][fences.length];<br>    int[] now = mem[0], next = mem[1], swap;<br>    int result = -1;<br>    int i, j, k;<br>    java.util.Arrays.fill(now, -1);<br>    for (i = 0; i &lt; fences.length; i++) {<br>      if (fences[i].charAt(1) &gt; '0') {<br>        now[i] = (fences[i].charAt(1) - '0') + (fences[i].charAt(0) - '0');<br>      }<br>    }<br>    for (i = 0; i &lt; fences.length; i++) {<br>      if (now[i] != -1 &amp;&amp; fences[i].charAt(2) &gt; '0') {<br>        result = Math.max(result, now[i] + (fences[i].charAt(2) - '0'));<br>      }<br>    }<br>    for (i = 1; i &lt; N; i++) {<br>      java.util.Arrays.fill(next, -1);<br>      for (j = 0; j &lt; fences.length; j++) {<br>        if (now[j] == -1) {<br>          continue;<br>        }<br>        for (k = 0; k &lt; fences.length; k++) {<br>          if (tracks[j].charAt(k) &gt; '0') {<br>            next[k] = Math.max(next[k], now[j] + tracks[j].charAt(k) - '0' + fences[k].charAt(0) - '0');<br>          }<br>        }<br>      }<br>      swap = now;<br>      now = next;<br>      next = swap;<br>      for (j = 0; j &lt; fences.length; j++) {<br>        if (now[j] != -1 &amp;&amp; fences[j].charAt(2) &gt; '0') {<br>          result = Math.max(result, now[j] + (fences[j].charAt(2) - '0'));<br>        }<br>      }<br>    }<br>    return result;<br>  }<br>}<br></td>