<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;vector&gt;<br>#include &lt;list&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;deque&gt;<br>#include &lt;queue&gt;<br>#include &lt;stack&gt;<br>#include &lt;bitset&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;functional&gt;<br>#include &lt;numeric&gt;<br>#include &lt;utility&gt;<br>#include &lt;sstream&gt;<br>#include &lt;iostream&gt;<br>#include &lt;iomanip&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cctype&gt;<br>#include &lt;string&gt;<br>#include &lt;cstring&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;ctime&gt;<br><br>using namespace std;<br><br>#define SIZE(X) ((int)(X.size()))<br><br>class TheBlackJackDivOne<br>{<br>public:<br>  double solve(int s,int C[])<br>  {<br>    if (s&gt;=21) return 0;<br>    int total=0;<br>    for (int i=0;i&lt;12;i++) total+=C[i];<br>    double result=0;<br>    for (int i=0;i&lt;12;i++) if (C[i]&gt;0)<br>    {<br>      C[i]--;<br>      double t=solve(s+i,C);<br>      C[i]++;<br>      result+=t*C[i];<br>    }<br>    return result/total+1.0;<br>  }<br>  double expected(vector &lt;string&gt; cards)<br>  {<br>    int C[12];<br>    memset(C,0,sizeof(C));<br>    for (int i=2;i&lt;=9;i++) C[i]=4;<br>    C[10]=16;<br>    C[11]=4;<br>    int s=0;<br>    for (int i=0;i&lt;SIZE(cards);i++)<br>    {<br>      char c=cards[i][0];<br>      int d=0;<br>      if (c=='T' || c=='J' || c=='Q' || c=='K') d=10;<br>      else if (c=='A') d=11;<br>      else d=c-'0';<br>      C[d]--;<br>      s+=d;<br>    }<br>    double ret=solve(s,C);<br>    return ret;<br>  }<br>};<br></td>