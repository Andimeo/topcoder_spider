<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;vector&gt;<br>#include &lt;list&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;deque&gt;<br>#include &lt;queue&gt;<br>#include &lt;stack&gt;<br>#include &lt;bitset&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;functional&gt;<br>#include &lt;numeric&gt;<br>#include &lt;utility&gt;<br>#include &lt;sstream&gt;<br>#include &lt;iostream&gt;<br>#include &lt;iomanip&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cctype&gt;<br>#include &lt;string&gt;<br>#include &lt;cstring&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;ctime&gt;<br><br>using namespace std;<br><br>#define SIZE(X) ((int)(X.size()))<br>typedef long long int64;<br><br>const int64 MODE=1234567891;<br><br>struct TPoint<br>{<br>  int64 state,result;<br>  TPoint *next;<br>};<br>int memoryId=0;<br>TPoint memory[3000000];<br>TPoint  *hash[1000003];<br><br>class TheCardLineDivOne<br>{<br>public:<br>  map&lt;int64,int64&gt; M;<br>  int64 solve(int C[3][3],int side,int si,int sj)<br>  {<br>    int total_left=0;<br>    for (int i=0;i&lt;3;i++) for (int j=0;j&lt;3;j++) if (i+j&gt;0) total_left+=C[i][j];<br>    if (total_left==0) return 1;<br>    int64 state=0;<br>    for (int i=0;i&lt;3;i++) for (int j=0;j&lt;3;j++) if (i+j&gt;0) state=state*13+C[i][j];//state.push_back(C[i][j]);<br>    state=state*2+side;//state.push_back(side);<br>    state=state*4+si;//state.push_back(si);<br>    state=state*4+sj;//state.push_back(sj);<br>    int address=(int)(state%1000003);<br>    TPoint *p;<br>    for (p=hash[address];p!=NULL;p=p-&gt;next)<br>      if (p-&gt;state==state)<br>        return p-&gt;result;<br>    p=&amp;memory[memoryId++];<br>    p-&gt;state=state;<br>    p-&gt;next=hash[address];<br>    hash[address]=p;<br>    int64 &amp;ret=p-&gt;result;<br>    for (int i=0;i&lt;3;i++) for (int j=0;j&lt;3;j++) if (i+j&gt;0 &amp;&amp; C[i][j]&gt;0)<br>    {<br>      if (i&gt;0 &amp;&amp; (i==si &amp;&amp; j==sj || side==0))<br>      {<br>        int64 s=0;<br>        if (side==0) s=C[i][j]*i;<br>        else s=i;<br>        C[i][j]--;<br>        C[i-1][j]++;<br>        ret=(ret+solve(C,0,i-1,j)*s)%MODE;<br>        C[i-1][j]--;<br>        C[i][j]++;<br>      }<br>      if (j&gt;0 &amp;&amp; (i==si &amp;&amp; j==sj || side==1))<br>      {<br>        int64 s=0;<br>        if (side==1) s=C[i][j]*j;<br>        else s=j;<br>        C[i][j]--;<br>        C[i][j-1]++;<br>        ret=(ret+solve(C,1,i,j-1)*s)%MODE;<br>        C[i][j-1]--;<br>        C[i][j]++;<br>      }<br>    }<br>    return ret;<br>  }<br>  int count(vector &lt;string&gt; cards)<br>  {<br>    memset(hash,0,sizeof(hash));<br>    int C[3][3];<br>    memset(C,0,sizeof(C));<br>    int C1[256],C2[256];<br>    memset(C1,0,sizeof(C1));<br>    memset(C2,0,sizeof(C2));<br>    for (int i=0;i&lt;SIZE(cards);i++)<br>    {<br>      string s=cards[i];<br>      if (s[1]=='S' || s[1]=='C')<br>        C2[(int)s[0]]++;<br>      else<br>        C1[(int)s[0]]++;<br>    }<br>    for (int i=0;i&lt;256;i++)<br>      C[C1[i]][C2[i]]++;<br>    M.clear();<br>    int64 ret=0;<br>    for (int i=0;i&lt;3;i++)<br>      for (int j=0;j&lt;3;j++) if (i+j&gt;0 &amp;&amp; C[i][j]&gt;0)<br>      {<br>        if (i&gt;0)<br>        {<br>          int64 s=C[i][j]*i;<br>          C[i][j]--;<br>          C[i-1][j]++;<br>          ret=(ret+solve(C,0,i-1,j)*s)%MODE;<br>          C[i-1][j]--;<br>          C[i][j]++;<br>        }<br>        if (j&gt;0)<br>        {<br>          int64 s=C[i][j]*j;<br>          C[i][j]--;<br>          C[i][j-1]++;<br>          ret=(ret+solve(C,1,i,j-1)*s)%MODE;<br>          C[i][j-1]--;<br>          C[i][j]++;<br>        }<br>      }<br>/*<br>      printf("SUM  = %d\n",(int)sum);<br>    printf("RET  = %d\n",(int)ret);<br>    if (sum!=ret)<br>      exit(0);<br>*/<br>    return (int)ret;<br>  }<br>};<br></td>