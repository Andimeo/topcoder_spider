<td class="problemText" colspan="8" valign="middle" align="left">
            #line 5 "PizzaDelivery.cpp"<br>#include &lt;cstdlib&gt;<br>#include &lt;cctype&gt;<br>#include &lt;cstring&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cmath&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;vector&gt;<br>#include &lt;string&gt;<br>#include &lt;iostream&gt;<br>#include &lt;sstream&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;queue&gt;<br>#include &lt;stack&gt;<br>#include &lt;fstream&gt;<br>#include &lt;numeric&gt;<br>#include &lt;iomanip&gt;<br>#include &lt;bitset&gt;<br>#include &lt;list&gt;<br>#include &lt;sstream&gt;<br>#include &lt;stdexcept&gt;<br>#include &lt;functional&gt;<br>#include &lt;utility&gt;<br>#include &lt;ctime&gt;<br>using namespace std;<br><br>const int dx[] = {1,-1,0,0};<br>const int dy[] = {0,0,1,-1};<br><br>#define PB push_back<br>#define MP make_pair<br><br>#define REP(i,n) for(i=0;i&lt;(n);++i)<br>#define FOR(i,l,h) for(i=(l);i&lt;=(h);++i)<br>#define FORD(i,h,l) for(i=(h);i&gt;=(l);--i)<br><br>typedef vector&lt;int&gt; VI;<br>typedef vector&lt;string&gt; VS;<br>typedef vector&lt;double&gt; VD;<br>typedef long long LL;<br>typedef pair&lt;int,int&gt; PII;<br><br>char Map[55][55];<br>int dis[55][55];<br>int Dist[30];<br>int totCost[(1&lt;&lt;20)+5];<br>int e[30];<br>bool used[55][55];<br>int n,m,tot;<br><br>bool valid( int x,int y )<br>{<br>  return x&gt;=0 &amp;&amp; x&lt;n &amp;&amp; y&gt;=0 &amp;&amp; y&lt;m;<br>}<br>bool passAble( int ax,int ay,int bx,int by )<br>{<br>  if(Map[ax][ay]=='$' || Map[bx][by]=='$') return true;<br>  if(Map[ax][ay]=='X' || Map[bx][by]=='X') return true;<br>  if(Map[ax][ay]+1==Map[bx][by] || Map[ax][ay]==Map[bx][by]+1) return true;<br>  return Map[ax][ay]==Map[bx][by];<br>}<br>int cost( int ax,int ay,int bx,int by )<br>{<br>  if(Map[ax][ay]=='$' || Map[bx][by]=='$') return 2;<br>  if(Map[ax][ay]=='X' || Map[bx][by]=='X') return 2;<br>  if(Map[ax][ay]+1==Map[bx][by] || Map[ax][ay]==Map[bx][by]+1) return 3;<br>  return 1;<br>}<br>class PizzaDelivery<br>{<br>        public:<br>        int deliverAll(vector &lt;string&gt; terrain)<br>        {<br>      n=(int)terrain.size(); m=(int)terrain[0].size();<br>            for(int i=0;i&lt;n;++i)<br>              for(int j=0;j&lt;m;++j)<br>                Map[i][j]=(char)terrain[i][j];<br>            memset(used,false,sizeof(used));<br>            memset(dis,0xff,sizeof(dis));<br>            for(int i=0;i&lt;n;++i)<br>              for(int j=0;j&lt;m;++j) if(Map[i][j]=='X')<br>                dis[i][j]=0;<br>            for(int i=0;i&lt;n*m;++i)<br>            {<br>        int x,y,Min=-1;<br>        for(int j=0;j&lt;n;++j)<br>          for(int k=0;k&lt;m;++k) if(!used[j][k] &amp;&amp; dis[j][k]&gt;=0 &amp;&amp; (Min==-1 || dis[j][k]&lt;Min))<br>          {<br>            Min=dis[j][k];<br>            x=j;<br>            y=k;<br>          }<br>        if(Min==-1) break;<br>        used[x][y]=true;<br>        for(int k=0;k&lt;4;++k) if(valid(x+dx[k],y+dy[k]) &amp;&amp; passAble(x,y,x+dx[k],y+dy[k]))<br>          if(dis[x+dx[k]][y+dy[k]]&lt;0)<br>            dis[x+dx[k]][y+dy[k]]=dis[x][y]+cost(x,y,x+dx[k],y+dy[k]);<br>          else<br>            dis[x+dx[k]][y+dy[k]]=min(dis[x+dx[k]][y+dy[k]],dis[x][y]+cost(x,y,x+dx[k],y+dy[k]));<br>      }<br>      tot=0;<br>      for(int i=0;i&lt;n;++i)<br>        for(int j=0;j&lt;m;++j) if(Map[i][j]=='$')<br>          Dist[tot++]=dis[i][j];<br>      for(int i=0;i&lt;tot;++i) if(Dist[i]&lt;0) return -1;<br>      e[0]=1;<br>      for(int i=1;i&lt;tot;++i) e[i]=e[i-1]*2;<br>      sort(Dist,Dist+tot);<br>      for(int i=0;i&lt;(1&lt;&lt;tot);++i)<br>      {<br>        totCost[i]=0;<br>        for(int j=0;j&lt;tot;++j) if(i&amp;e[j]) totCost[i]+=Dist[j]*2;<br>        for(int j=tot-1;j&gt;=0;--j) if(i&amp;e[j]) <br>        {<br>          totCost[i]-=Dist[j];<br>          break;<br>        }<br>      }<br>      int ans=totCost[(1&lt;&lt;tot)-1],stat=(1&lt;&lt;tot)-1;<br>      for(int i=0;i&lt;(1&lt;&lt;tot);++i)<br>        ans = min(ans, max(totCost[i], totCost[stat-i]));<br>      return ans;<br>        }  <br>        <br><br>};<br><br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003]<br>// Powered by CodeProcessor<br></td>