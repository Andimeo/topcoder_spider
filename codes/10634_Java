<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>public class PizzaDelivery {<br>  int[] dx = {-1, 0, 1, 0};<br>  int[] dy = {0, -1, 0, 1};<br>    public int deliverAll(String[] terrain) {<br>        int res = 0;<br>        int n = terrain.length;<br>        int m = terrain[0].length();<br>        int[][] time = new int[n][m];<br>        for (int i = 0; i &lt; n; ++i) {<br>          Arrays.fill(time[i], Integer.MAX_VALUE);<br>        }<br>        int sr = 0;<br>        int sc = 0;<br>        int dc = 0;<br>        for (int i = 0; i &lt; n; ++i) {<br>          for (int j = 0; j &lt; m; ++j) {<br>            if (terrain[i].charAt(j) == 'X') {<br>              sr = i;<br>              sc = j;<br>            }<br>            else if (terrain[i].charAt(j) == '$') {<br>              ++dc;<br>            }<br>          }<br>        }<br>        time[sr][sc] = 0;<br>        int tt = sr*1000+sc;<br>        LinkedList&lt;Integer&gt; q = new LinkedList&lt;Integer&gt;();<br>        q.add(tt);<br>        while (!q.isEmpty()) {<br>          int rr = q.removeFirst();<br>          int tr = rr/1000;<br>          int tc = rr%1000;<br>          <br>          for (int k = 0; k &lt; 4; ++k) {<br>            if (tr+dx[k] &gt;= 0 &amp;&amp; tr+dx[k] &lt; n &amp;&amp; tc+dy[k] &gt;= 0 &amp;&amp; tc+dy[k] &lt; m) {<br>              if (terrain[tr].charAt(tc) == '$' || terrain[tr+dx[k]].charAt(tc+dy[k])=='$' ||<br>                  terrain[tr].charAt(tc) == 'X' || terrain[tr+dx[k]].charAt(tc+dy[k])=='X') {<br>                if (time[tr+dx[k]][tc+dy[k]] &gt; time[tr][tc]+2) {<br>                  time[tr+dx[k]][tc+dy[k]] = time[tr][tc]+2;<br>                  q.add((tr+dx[k])*1000 + tc+dy[k]);<br>                }<br>              }<br>              else {<br>                int h1 = (int)((terrain[tr].charAt(tc))-'0');<br>                int h2 = (int)(terrain[tr+dx[k]].charAt(tc+dy[k]) - '0');<br>                if (h1 == h2) {<br>                  if (time[tr+dx[k]][tc+dy[k]] &gt; time[tr][tc]+1) {<br>                      time[tr+dx[k]][tc+dy[k]] = time[tr][tc]+1;<br>                      q.add((tr+dx[k])*1000 + tc+dy[k]);<br>                    }<br>                }<br>                else if (Math.abs(h1-h2) == 1) {<br>                  if (time[tr+dx[k]][tc+dy[k]] &gt; time[tr][tc]+3) {<br>                      time[tr+dx[k]][tc+dy[k]] = time[tr][tc]+3;<br>                      q.add((tr+dx[k])*1000 + tc+dy[k]);<br>                    }<br>                }<br>              }<br>            }<br>          }     <br>        }<br>        <br>        int[] times = new int[dc];<br>      int cur = 0;<br>      for (int i = 0; i &lt; n; ++i) {<br>        for (int j = 0; j &lt; m; ++j) {<br>          if (terrain[i].charAt(j) == '$') {<br>            times[cur] = time[i][j];<br>            ++cur;<br>            if (time[i][j] == Integer.MAX_VALUE) {<br>              return -1;<br>            }<br>          }<br>        }<br>      }<br>      <br>      int rr = Integer.MAX_VALUE;<br>      Arrays.sort(times);<br>      boolean[] used = new boolean[dc];<br>      for (int i = 0; i &lt; (1&lt;&lt;dc); ++i) {<br>        Arrays.fill(used, false);<br>        int prev1 = -1;<br>        int tmp1 = 0;<br>        int nn = i;<br>        int pp = 0;<br>        while (nn &gt; 0) {<br>          if ((nn&amp;1) == 1) {<br>            used[pp] = true;<br>            tmp1 += times[pp]&lt;&lt;1;<br>            prev1 = times[pp];<br>          }<br>          ++pp;<br>          nn &gt;&gt;= 1;<br>        }<br>        if (prev1 != -1) {<br>          tmp1 -= prev1;<br>        }<br>        <br>        int tmp2 = 0;<br>        int prev2 = -1;<br>        for (int j = 0; j &lt; dc; ++j) {<br>          if (!used[j]) {<br>            tmp2 += times[j]&lt;&lt;1;<br>            prev2 = times[j];<br>          }<br>        }<br>        <br>        if (prev2 != -1) {<br>          tmp2 -= prev2;<br>        }<br>        <br>        rr = Math.min(Math.max(tmp1, tmp2), rr);<br>      }<br>        <br>        return rr;<br>    }<br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by CodeProcessor<br></td>