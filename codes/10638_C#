<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections;<br>using System.Collections.Generic;<br>using System.Collections.Specialized;<br>using System.Text;<br>using System.Text.RegularExpressions;<br> <br> <br>public class TwistedMatrix<br>{<br>    bool compare(string[] A, string[] B)<br>    {<br>        for (int i = 0; i &lt; A.Length; i++)<br>        {<br>            for (int j = 0; j &lt; A[0].Length; j++)<br>            {<br>                if (A[i][j] != '?' &amp;&amp; B[i][j] != '?' &amp;&amp; A[i][j] != B[i][j])<br>                    return false;<br>            }<br>        }<br>        return true;<br>    }<br> <br>    string[] R;<br> <br>    void UP(string[] A, string[] B)<br>    {<br>        for (int i = 0; i &lt; A.Length; i++)<br>        {<br>            for (int j = 0; j &lt; A[0].Length; j++)<br>            {<br>                if (A[i][j] == '?')<br>                {<br>                    if (B[i][j] != '?')<br>                        A[i] = A[i].Substring(0, j) + B[i][j].ToString() + A[i].Substring(j + 1);<br>                    else<br>                        A[i] = A[i].Substring(0, j) + "0" + A[i].Substring(j + 1);<br>                }<br>            }<br>        }<br>        if (R.Length == 0)<br>        {<br>            R = A;<br>        }<br>        for (int i = 0; i &lt; A.Length; i++)<br>        {<br>            int f = R[i].CompareTo(A[i]);<br>            if (f &lt; 0)<br>            {<br>                return;<br>            } <br>            if (f &gt; 0)<br>            {<br>                R = A;<br>                return;<br>            }<br>        }<br>    }<br> <br>  public string[] solve(string[] A, string[] B)<br>  {<br>        R = new string[] { };<br>        for (int i = 0; i &lt; A.Length-1; i++)<br>        {<br>            for (int j = 0; j &lt; A[0].Length-1; j++)<br>            {<br>                string[] C = (string[])A.Clone();<br>                C[i] = C[i].Substring(0, j) + A[i][j + 1].ToString() + C[i].Substring(j + 1);<br>                C[i] = C[i].Substring(0, j + 1) + A[i + 1][j + 1].ToString() + C[i].Substring(j + 2);<br>                C[i + 1] = C[i + 1].Substring(0, j) + A[i][j].ToString() + C[i + 1].Substring(j + 1);<br>                C[i + 1] = C[i + 1].Substring(0, j + 1) + A[i + 1][j].ToString() + C[i + 1].Substring(j + 2);<br>                if (compare(C, B))<br>                    UP(C, B);<br>                C = (string[])A.Clone();<br>                C[i] = C[i].Substring(0, j) + A[i+ 1][j ].ToString() + C[i].Substring(j + 1);<br>                C[i] = C[i].Substring(0, j + 1) + A[i ][j ].ToString() + C[i].Substring(j + 2);<br>                C[i + 1] = C[i + 1].Substring(0, j) + A[i+ 1][j+ 1].ToString() + C[i + 1].Substring(j + 1);<br>                C[i + 1] = C[i + 1].Substring(0, j + 1) + A[i ][j+ 1].ToString() + C[i + 1].Substring(j + 2);<br>                if (compare(C, B))<br>                    UP(C, B);<br>            }<br>        }<br> <br>        return R;<br>  }<br> <br> <br>}<br>//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!<br></td>