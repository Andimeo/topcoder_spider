<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;vector&gt;<br>#include &lt;list&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;deque&gt;<br>#include &lt;queue&gt;<br>#include &lt;stack&gt;<br>#include &lt;bitset&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;functional&gt;<br>#include &lt;numeric&gt;<br>#include &lt;utility&gt;<br>#include &lt;sstream&gt;<br>#include &lt;iostream&gt;<br>#include &lt;iomanip&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cctype&gt;<br>#include &lt;string&gt;<br>#include &lt;cstring&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;ctime&gt;<br> <br>using namespace std;<br> <br>#define SIZE(X) ((int)(X.size()))<br>#define LENGTH(X) ((int)(X.length()))<br> <br>class TwistedMatrix<br>{<br>public:<br>  vector &lt;string&gt; solve(vector &lt;string&gt; A, vector &lt;string&gt; B)<br>  {<br>    int n=SIZE(A);<br>    int m=LENGTH(A[0]);<br>    vector&lt;string&gt; R;<br>    for (int i=0;i+1&lt;n;i++)<br>      for (int j=0;j+1&lt;m;j++)<br>        for (int rotate=0;rotate&lt;2;rotate++)<br>        {<br>          vector&lt;string&gt; C=A;<br>          for (int s=1+rotate*2;s&gt;0;s--)<br>          {<br>            char a=C[i][j];<br>            char b=C[i][j+1];<br>            char c=C[i+1][j+1];<br>            char d=C[i+1][j];<br>            C[i][j]=b;<br>            C[i][j+1]=c;<br>            C[i+1][j+1]=d;<br>            C[i+1][j]=a;<br>          }<br>          vector&lt;string&gt; D=B;<br>          bool isGood=true;<br>          for (int x=0;x&lt;n;x++)<br>            for (int y=0;y&lt;m;y++)<br>              if (C[x][y]!='?' &amp;&amp; B[x][y]!='?')<br>              {<br>                if (C[x][y]!=B[x][y]) isGood=false;<br>                D[x][y]=B[x][y];<br>              }<br>              else if (C[x][y]!='?')<br>                D[x][y]=C[x][y];<br>              else if (B[x][y]!='?')<br>                D[x][y]=B[x][y];<br>              else<br>                D[x][y]='0';<br>          if (isGood &amp;&amp; (R.empty() || D&lt;R)) R=D;<br>        }<br>    return R;<br>  }<br>};<br></td>