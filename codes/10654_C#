<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections;<br>using System.Collections.Generic;<br>using System.Collections.Specialized;<br>using System.Text;<br>using System.Text.RegularExpressions;<br> <br> <br>public class TransportationNetwork<br>{<br>    int[] xs, ys;<br>    int n;<br> <br>    double getDist(int i, int j)<br>    {<br>        double dx = xs[i] - xs[j];<br>        double dy = ys[i] - ys[j];<br>        return Math.Sqrt(dx * dx + dy * dy);<br>    }<br> <br>  public double minCost(int[] cityX, int[] cityY, double roadCost, double airportCost)<br>  {<br>        xs = cityX;<br>        ys = cityY;<br>        n = xs.Length;<br>        int[] colors = new int[n];<br>        for (int i = 0; i &lt; n; i++)<br>            colors[i] = i;<br> <br>        double[] costs = new double[n - 1];<br> <br>        double best = 0;<br> <br>        for(int it = 0; it &lt; n - 1; it++)<br>        {<br>            int bestI = -1, bestJ = -1;<br>            double bestCost = double.PositiveInfinity;<br> <br>            for (int i = 0; i &lt; n; i++)<br>                for (int j = i + 1; j &lt; n; j++)<br>                    if (colors[i] != colors[j])<br>                    {<br>                        double cost = getDist(i, j);<br>                        cost *= roadCost;<br>                        if (cost &lt; bestCost)<br>                        {<br>                            bestCost = cost;<br>                            bestI = i;<br>                            bestJ = j;<br>                        }<br>                    }<br>            int what = colors[bestI];<br>            int to = colors[bestJ];<br>            for (int i = 0; i &lt; n; i++)<br>            {<br>                if (colors[i] == what)<br>                    colors[i] = to;<br>            }<br>            costs[it] = bestCost;<br>            best += bestCost;<br>        }<br> <br>        double curSum = 0;<br> <br>        for (int i = 0; i + 1 &lt; n; i++)<br>        {<br>            double curAns = curSum + (n - i) * airportCost;<br>            best = Math.Min(best, curAns);<br>            curSum += costs[i];<br>        }<br> <br>        return best;<br> <br>  }<br> <br> <br>}<br>//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!<br></td>