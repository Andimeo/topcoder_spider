<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;iostream&gt;<br>#include &lt;cassert&gt;<br>#include &lt;algorithm&gt;<br><br>typedef long long int64;<br>using namespace std;<br>#define Eo(x) { cerr &lt;&lt; #x &lt;&lt; " = " &lt;&lt; (x) &lt;&lt; endl; }<br><br>const int maxn = 10;<br>int x[maxn];<br>int64 out;<br><br>int who[maxn];<br>int many[maxn];<br>int n,k;<br><br>void go(int pos, int cen, int64 cur){<br>  if (pos == 6) { <br>    out += cur; return; <br>  }<br>  for (int i = 0; i &lt; k; i++) if (i != cen &amp;&amp; many[i] &lt; x[i]){<br>    if (pos &amp;&amp; who[pos-1] == i) continue;<br>    if (pos == 5 &amp;&amp; i == who[0]) continue;<br>    who[pos] = i;<br>    many[i]++;<br>    go(pos+1,cen,cur*(x[i]-many[i]+1));<br>    many[i]--;<br>    who[pos] = -1;<br>  }<br>}<br><br>class TheHexagonsDivTwo{<br>public:<br>int64 count(int n, int k){<br>::n = n;<br>::k = k;<br>int r = n%k;<br>int d = n/k;<br>for (int z = 0; z &lt; k; z++) x[z] = d;<br>for (int z = 1; z &lt; k &amp;&amp; r; z++, r--) x[z]++;<br>if (r) { x[0]++; r--; assert(!r); }<br>for (int cen = 0; cen &lt; k; cen++){<br>  go(0,cen,x[cen]);<br>}<br>return out/6;<br>}<br>};<br></td>