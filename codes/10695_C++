<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;cstdio&gt;<br>#include &lt;queue&gt;<br>#include &lt;vector&gt;<br>#include &lt;string&gt;<br>using namespace std;<br> <br>struct ST {<br>  int x, y, p, d;<br>  ST() { }<br>  ST(int _x, int _y, int _p) { x = _x; y = _y; p = _p; }<br>};<br>int dx[] = {-1,0,1,0}, dy[] = {0,1,0,-1};<br>queue&lt;ST&gt; q;<br>int N, M;<br>int dist[51][51][2];<br>bool vis[51][51][2];<br> <br>class MazeOnFire {<br>public:<br>  int maximumTurns(vector&lt;string&gt; maze) {<br>    N = maze.size();<br>    M = maze[0].size();<br>    int sx = 0, sy = 0;<br>    for(int i = 0; i &lt; N; i++)<br>      for(int j = 0; j &lt; M; j++)<br>        if(maze[i][j] == '$') {<br>          sx = i;<br>          sy = j;<br>        }<br>        else if(maze[i][j] == 'F') {<br>          q.push(ST(i,j,0));<br>          vis[i][j][0] = true;<br>        }<br>    q.push(ST(sx,sy,1));<br>    vis[sx][sy][1] = true;<br>    int ans = 0;<br>    while(!q.empty()) {<br>      ST t = q.front(); q.pop();<br>      for(int d = 0; d &lt; 4; d++) {<br>        int tx = t.x + dx[d];<br>        int ty = t.y + dy[d];<br>        if(tx &gt;= 0 &amp;&amp; ty &gt;= 0 &amp;&amp; tx &lt; N &amp;&amp; ty &lt; M &amp;&amp; maze[tx][ty] != '#' &amp;&amp; !vis[tx][ty][0] &amp;&amp; (t.p == 0 || t.p == 1 &amp;&amp; !vis[tx][ty][1])) {<br>          q.push(ST(tx,ty,t.p));<br>          vis[tx][ty][t.p] = true;<br>          dist[tx][ty][t.p] = dist[t.x][t.y][t.p]+1;<br>        }<br>      }<br>    }<br>    for(int i = 0; i &lt; N; i++)<br>      for(int j = 0; j &lt; M; j++)<br>        if(vis[i][j][1])<br>          if(!vis[i][j][0])<br>            return -1;<br>          else<br>            ans = max(ans, dist[i][j][0]);<br>    return ans;<br>  }<br>};<br></td>