<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;map&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cstring&gt;<br>#include &lt;cassert&gt;<br>#include &lt;set&gt;<br>#include &lt;iostream&gt;<br>#include &lt;sstream&gt;<br>#include &lt;cstddef&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;utility&gt;<br>#include &lt;iterator&gt;<br>#include &lt;numeric&gt;<br>#include &lt;list&gt;<br>#include &lt;complex&gt;<br>#include &lt;queue&gt;<br>#include &lt;climits&gt;<br> <br>using namespace std;<br> <br>typedef vector&lt;int&gt; vi;<br>typedef vector&lt;string&gt; vs;<br>typedef long long ll;<br>typedef complex&lt;double&gt; pnt;<br>typedef pair&lt;int, int&gt; pii;<br>typedef unsigned long long ull;<br> <br>#define RA(x) (x).begin(), (x).end()<br>#define FE(i, x) for (typeof((x).begin()) i = (x).begin(); i != (x).end(); i++)<br>#define SZ(x) ((int) (x).size())<br> <br> <br>class SkewedPerspective<br>{<br>public:<br>    int countThem(vector &lt;int&gt; cubes, int B, int w);<br>};<br> <br>#define MOD 1000000007<br> <br>static vi cubes;<br>static int w;<br>static int C;<br>static int B;<br>static int choose[2501][2501];<br>static int pccache[51][2501];<br>static int rcache[51][11][11][81][9][2];<br> <br>static int pick_cols(int b, int col)<br>{<br>    int &amp;ans = pccache[b][col];<br>    if (ans &gt;= 0)<br>        return ans;<br> <br>    if (b == SZ(cubes))<br>        return ans = (col == 0);<br>    else<br>    {<br>        ans = 0;<br>        for (int i = 0; i &lt;= min(col, cubes[b]); i++)<br>        {<br>            ans = (ans + (ll) choose[col][i] * (ll) pick_cols(b + 1, col - i)) % MOD;<br>        }<br>        return ans;<br>    }<br>}<br> <br>static ll recurse(int col, int half, int full, int gaps, int oddgaps, bool endhalf)<br>{<br>    int h = col + half + 2 * full;<br>    if (col + oddgaps &gt; C)<br>        return 0;<br>    if (half + full &gt; B)<br>        return 0;<br>    if (col + 2 * (half + full) + gaps &gt; 2 * B + C)<br>        return 0;<br> <br>    int &amp;cached = rcache[col][half][full][gaps][oddgaps][endhalf];<br>    if (cached &gt;= 0)<br>        return cached;<br> <br>    ll ans = pick_cols(0, col);<br>    // cout &lt;&lt; col &lt;&lt; ' ' &lt;&lt; half &lt;&lt; ' ' &lt;&lt; full &lt;&lt; ' ' &lt;&lt; gaps &lt;&lt; ' ' &lt;&lt; oddgaps &lt;&lt; ' ' &lt;&lt; endhalf &lt;&lt; ' ' &lt;&lt; ans &lt;&lt; endl;<br>    if (half &lt; w - 1 &amp;&amp; half + full &lt; B &amp;&amp; !endhalf)<br>    {<br>        ans += recurse(col, half + 1, full, gaps + h - 1, oddgaps + ((h - 1) &amp; 1), true);<br>    }<br>    if (half + full &lt; B)<br>    {<br>        ans += recurse(col, half, full + 1, gaps, oddgaps, h != 0);<br>    }<br>    if (col &lt; C)<br>    {<br>        ans += recurse(col + 1, half, full, gaps, oddgaps, false);<br>    }<br>    ans %= MOD;<br>    cached = ans;<br>    return ans;<br>}<br> <br>int SkewedPerspective::countThem(vector &lt;int&gt; cubes, int B, int w)<br>{<br>    for (int i = 0; i &lt;= 2500; i++)<br>    {<br>        choose[i][0] = choose[i][i] = 1;<br>        for (int j = 1; j &lt; i; j++)<br>        {<br>            choose[i][j] = choose[i - 1][j - 1] + choose[i - 1][j];<br>            if (choose[i][j] &gt;= MOD)<br>                choose[i][j] -= MOD;<br>        }<br>    }<br>    memset(pccache, -1, sizeof(pccache));<br>    memset(rcache, -1, sizeof(rcache));<br> <br>    ::cubes = cubes;<br>    ::B = B;<br>    ::w = w;<br>    C = accumulate(RA(cubes), 0);<br>    ll ans = (recurse(0, 0, 0, 0, 0, true) - 1) % MOD;<br>    if (ans &lt; 0) ans += MOD;<br>    return ans;<br>}<br> <br> <br>// Powered by FileEdit<br></td>