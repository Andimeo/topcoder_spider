<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Text;<br>using System.Text.RegularExpressions;<br>using System.Collections;<br>using System.Collections.Generic;<br><br>public class TheHexagonsDivOne {<br>    static bool[,] map = new bool[,]<br>    {<br>        {false, true, true, true, false, false, false},<br>        {true, false, false, true, true, false, false},<br>        {true, false, false, true, false, true, false},<br>        {true, true, true, false, true, true, true},<br>        {false, true, false, true, false, false, true},<br>        {false, false, true, true, false, false, true},<br>        {false, false, false, true, true, true, false}<br>};<br><br>  public long count(int n) {<br>        long[,] res = new long[n + 1, 1 &lt;&lt; 7];<br>      res[0, 0] = 1;<br>        for (int i = 1; i &lt; n + 1; i++)<br>      {<br>          for (int m = 0; m &lt; 1 &lt;&lt; 7; m++)<br>          {<br>              res[i, m] = res[i - 1, m];<br>              for (int k = 0; k &lt; 7*7; k++)<br>              {<br>                  int a1 = k % 7, a2 = k / 7;<br>                    if (!Bit(m, a1) || !Bit(m, a2) || map[a1, a2])<br>                        continue;<br>                    if (a1 == a2)<br>                    {<br>                        res[i, m] += 2 * res[i - 1, m ^ (1 &lt;&lt; a1)];<br>                    } else<br>                    {<br>                        res[i, m] += res[i - 1, (m ^ (1 &lt;&lt; a1)) ^ (1 &lt;&lt; a2)];<br>                    }<br>              }<br>          }<br>      }<br>        return res[n, (1 &lt;&lt; 7) - 1] / 6;<br>    }<br><br>    bool Bit(int n, int num)<br>    {<br>        return ((1 &lt;&lt; num) &amp; n) != 0;<br>    }<br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by CodeProcessor<br></td>