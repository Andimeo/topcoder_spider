<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;algorithm&gt;<br>#include &lt;bitset&gt;<br>#include &lt;cassert&gt;<br>#include &lt;cctype&gt;<br>#include &lt;climits&gt;<br>#include &lt;cmath&gt;<br>#include &lt;complex&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cstring&gt;<br>#include &lt;ctime&gt;<br>#include &lt;deque&gt;<br>#include &lt;fstream&gt;<br>#include &lt;functional&gt;<br>#include &lt;iomanip&gt;<br>#include &lt;iostream&gt;<br>#include &lt;limits&gt;<br>#include &lt;list&gt;<br>#include &lt;map&gt;<br>#include &lt;numeric&gt;<br>#include &lt;queue&gt;<br>#include &lt;set&gt;<br>#include &lt;sstream&gt;<br>#include &lt;stack&gt;<br>#include &lt;string&gt;<br>#include &lt;utility&gt;<br>#include &lt;vector&gt;<br>using namespace std;<br> <br>const long long MOD = 1000000007;<br> <br>long long R, C;<br> <br>inline pair &lt;long long, long long&gt; loc (long long N)<br>{<br>    long long s = (long long) sqrt (N - 0.5);<br> <br>    if (s % 2 == 0)<br>    {<br>        if (N &lt;= s * s + s)<br>            return make_pair (s, N - s * s - 1);<br>        else<br>            return make_pair ((s + 1) * (s + 1) - N, s);<br>    }<br>    else<br>    {<br>        if (N &lt;= s * s + s)<br>            return make_pair (N - s * s - 1, s);<br>        else<br>            return make_pair (s, (s + 1) * (s + 1) - N);<br>    }<br>}<br> <br>inline long long sum_to_n (long long n)<br>{<br>    if (n % 2 == 0)<br>        return ((n / 2) % MOD) * ((n + 1) % MOD) % MOD;<br>    else<br>        return (n % MOD) * ((n + 1) / 2 % MOD) % MOD;<br>}<br> <br>inline long long sum2_to_n (long long n)<br>{<br>    long long a = n, b = n + 1, c = 2 * n + 1;<br> <br>    if (a % 2 == 0)<br>        a /= 2;<br>    else<br>        b /= 2;<br> <br>    if (a % 3 == 0)<br>        a /= 3;<br>    else if (b % 3 == 0)<br>        b /= 3;<br>    else if (c % 3 == 0)<br>        c /= 3;<br> <br>    return (a % MOD) * (b % MOD) % MOD * (c % MOD) % MOD;<br>}<br> <br>inline long long inc_sum (long long a, long long b, long long c, long long d, long long n)<br>{<br>    a %= MOD; b %= MOD; c %= MOD; d %= MOD;<br>    return ((a * b % MOD * n % MOD + (a * d + b * c) % MOD * sum_to_n (n - 1) % MOD + c * d % MOD * sum2_to_n (n - 1)) % MOD + MOD) % MOD;<br>}<br> <br>inline long long col_sum (long long c, long long n)<br>{<br>    if (c % 2 == 0)<br>    {<br>        long long start = (c + 1) * (c + 1) - n + 1;<br>        pair &lt;long long, long long&gt; p = loc (start);<br>        return inc_sum (start, (R - p.first + 1) * (C - p.second + 1) % MOD, 1, C - p.second + 1, n);<br>    }<br>    else<br>    {<br>        long long start = c * c + 1;<br>        pair &lt;long long, long long&gt; p = loc (start);<br>        return inc_sum (start, (R - p.first + 1) * (C - p.second + 1) % MOD, 1, -(C - p.second + 1), n);<br>    }<br>}<br> <br>inline long long row_sum (long long r, long long n)<br>{<br>    if (r % 2 == 0)<br>    {<br>        long long start = r * r + 1;<br>        pair &lt;long long, long long&gt; p = loc (start);<br>        return inc_sum (start, (R - p.first + 1) * (C - p.second + 1) % MOD, 1, -(R - p.first + 1), n);<br>    }<br>    else<br>    {<br>        long long start = (r + 1) * (r + 1) - n + 1;<br>        pair &lt;long long, long long&gt; p = loc (start);<br>        return inc_sum (start, (R - p.first + 1) * (C - p.second + 1) % MOD, 1, R - p.first + 1, n);<br>    }<br>}<br> <br>struct MegaSum<br>{<br>    int calculate (long long N)<br>    {<br>        R = loc (N).first; C = loc (N).second;<br>        long long S = min (R, C), total = 0;<br> <br>        for (long long i = 0; i &lt;= S; i++)<br>            total = (total + row_sum (i, i) + col_sum (i, i + 1)) % MOD;<br> <br>        if (R &lt; C)<br>        {<br>            for (long long i = R + 1; i &lt;= C; i++)<br>                total = (total + col_sum (i, R + 1)) % MOD;<br>        }<br>        else<br>        {<br>            for (long long i = C + 1; i &lt;= R; i++)<br>                total = (total + row_sum (i, C + 1)) % MOD;<br>        }<br> <br>        return (total % MOD + MOD) % MOD;<br>    }<br>};<br> <br> <br> <br>// Powered by FileEdit<br>// Powered by moj 4.11 [modified TZTester]<br>// Powered by CodeProcessor<br></td>