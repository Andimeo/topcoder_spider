<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;vector&gt;<br>#include &lt;list&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;deque&gt;<br>#include &lt;stack&gt;<br>#include &lt;bitset&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;functional&gt;<br>#include &lt;numeric&gt;<br>#include &lt;utility&gt;<br>#include &lt;sstream&gt;<br>#include &lt;iostream&gt;<br>#include &lt;iomanip&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;ctime&gt;<br> <br>using namespace std;<br> <br>typedef long long LL;<br>typedef vector &lt;LL&gt; vll;<br>typedef vector &lt;int&gt; vi;<br>typedef vector &lt;string&gt; vs;<br>typedef vector &lt;double&gt; vd;<br> <br>class DonutsOnTheGridEasy {<br>public:<br>  int calc(vector &lt;string&gt;);<br>};<br> <br>vs mm;<br>int n, m;<br>char dp[50][50][50][50];<br> <br>bool is_rect(int y1, int x1, int y2, int x2)<br>{<br>  int i;<br>  for (i=x1; i&lt;=x2; i++)<br>  {<br>    if (mm[y1][i] != '0') return false;<br>    if (mm[y2][i] != '0') return false;<br>  }<br>  for (i=y1; i&lt;=y2; i++)<br>  {<br>    if (mm[i][x1] != '0') return false;<br>    if (mm[i][x2] != '0') return false;<br>  }<br>  return true;<br>}<br> <br>char doit(int y1, int x1, int y2, int x2)<br>{<br>  if (y2 - y1 &lt; 2) return 0;<br>  if (x2 - x1 &lt; 2) return 0;<br>  <br>  char&amp; res = dp[y1][x1][y2][x2];<br>  if (res != -1) return res;<br>  <br>  res = doit(y1+1, x1, y2, x2);<br>  res &gt;?= doit(y1, x1+1, y2, x2);<br>  res &gt;?= doit(y1, x1, y2-1, x2);<br>  res &gt;?= doit(y1, x1, y2, x2-1);<br>  <br>  if (is_rect(y1,x1,y2,x2)) res &gt;?= 1 + doit(y1+1, x1+1, y2-1, x2-1);<br>  return res;<br>}<br> <br>int DonutsOnTheGridEasy::calc(vector &lt;string&gt; grid) {<br>  mm = grid;<br>  n = mm.size();<br>  m = mm[0].length();<br>  <br>  int i, j;<br>  memset(dp, -1, sizeof(dp));<br>  char res = doit(0, 0, n-1, m-1);<br>  return res;<br>}<br> <br> <br>//Powered by [KawigiEdit] 2.0!<br></td>