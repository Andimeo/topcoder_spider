<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>import java.io.*;<br>import java.text.*;<br>import java.math.*;<br>import java.util.regex.*;<br>import static java.lang.Math.*;<br>import static java.util.Arrays.*;<br>import static java.util.Collections.*;<br>import static java.lang.Integer.*;<br>import static java.lang.Long.*;<br>public class DonutsOnTheGridEasy {<br>  public int calc(String[] grid) {<br>    map = new char[grid.length][];<br>    for(int i = 0; i &lt; grid.length; i++){<br>      map[i] = grid[i].toCharArray();<br>    }<br>    return go(0,0,grid.length, grid[0].length());<br>  }<br>  <br>  int[][][][] memo = new int[51][51][51][51];<br>  char[][] map;<br>  int go(int sx, int sy, int ex, int ey){<br>    if(ex-sx &lt; 3 || ey - sy &lt; 3) return 0;<br>    if(memo[sx][sy][ex][ey] != 0) return memo[sx][sy][ex][ey]-1;<br>    int ret = 0;<br>    if(ok(sx, sy, ex, ey)) ret = max(ret, 1+go(sx+1, sy+1, ex-1, ey-1));<br>    ret = max(ret, go(sx+1, sy, ex, ey));<br>    ret = max(ret, go(sx, sy+1, ex, ey));<br>    ret = max(ret, go(sx, sy, ex-1, ey));<br>    ret = max(ret, go(sx, sy, ex, ey-1));<br>    memo[sx][sy][ex][ey] = ret+1;<br>    return ret;<br>  }<br>  boolean ok(int sx, int sy, int ex, int ey){<br>    for(int i = sx; i &lt; ex; i++){<br>      if(map[i][sy] != '0') return false;<br>      if(map[i][ey-1] != '0') return false;<br>    }<br>    for(int i = sy; i &lt; ey; i++){<br>      if(map[sx][i] != '0') return false;<br>      if(map[ex-1][i] != '0') return false;<br>    }<br>    return true;<br>  }<br> <br>}<br> <br>// Powered by PopsEdit<br>// Powered by CodeProcessor<br></td>