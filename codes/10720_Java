<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>import java.util.regex.*;<br>import java.text.*;<br>import java.math.*;<br> <br> <br>public class ActivateTree<br>{<br>  static class Tree {<br>    ArrayList&lt;Integer&gt;[] edges;<br>    <br>    Tree(String s) {<br>      String[] ar = s.split(" ");<br>      edges = new ArrayList[ar.length];<br>      for (int i = 0; i &lt; ar.length; ++i) {<br>        edges[i] = new ArrayList&lt;Integer&gt;();<br>      }<br>      for (int i = 0; i &lt; ar.length; ++i) {<br>        int p = Integer.parseInt(ar[i]);<br>        if (p != -1) {<br>          edges[p].add(i);<br>        }<br>      }<br>    }<br>  }<br>  <br>  int m;<br>  <br>  final int INF = -1;<br>  <br>  public int minCost(String[] ts_, String t_, int[] costs)<br>  {<br>    int n = ts_.length;<br>    Tree[] ts = new Tree[n];<br>    for (int i = 0; i &lt; n; ++i) {<br>      ts[i] = new Tree(ts_[i]);<br>    }<br>    Tree t = new Tree(t_);<br>    m = t.edges.length;<br>    int[] d = new int[1 &lt;&lt; m];<br>    Arrays.fill(d, INF);<br>    d[1] = 0;<br>    for (int i = 0; i &lt; n; ++i) {<br>      int[] st1 = new int[ts[i].edges.length];<br>      int[] st2 = new int[ts[i].edges.length];<br>      for (int j = 0; j &lt; m; ++j) {<br>        int[] td = d.clone();<br>        for (int k = 0; k &lt; 1 &lt;&lt; m; ++k) {<br>          if (d[k] != INF) {<br>            st1[0] = j;<br>            st2[0] = 0;<br>            inc(t, ts[i], st1, st2, 0, 1, 0, k, 0, d[k] + costs[i], td);<br>          }<br>        }<br>        d = td;<br>      }<br>    }<br>    return d[(1 &lt;&lt; m) - 1];<br>  }<br>  <br>  void inc(Tree t0, Tree t, int[] st1, int[] st2, int i, int i1, int j, int mask1, int mask2, int val, int[] d) {<br>    while (i &lt; st1.length &amp;&amp; j == t.edges[st2[i]].size()) {<br>      i++;<br>      j = 0;<br>    }<br>    if (i == st1.length) {<br>      d[mask1] = d[mask1] == INF || d[mask1] &gt; val ? val : d[mask1];<br>      return;<br>    }<br>    for (int k : t0.edges[st1[i]]) {<br>      if ((mask2 &amp; (1 &lt;&lt; k)) == 0) {<br>        st1[i1] = k;<br>        st2[i1] = t.edges[st2[i]].get(j);<br>        inc(t0, t, st1, st2, i, i1 + 1, j + 1, mask1 ^ (1 &lt;&lt; k), mask2 | (1 &lt;&lt; k), val, d);<br>      }<br>    }<br>  }<br>  <br> <br>}<br>//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!<br></td>