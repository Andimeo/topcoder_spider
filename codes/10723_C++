<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;cstdio&gt;<br>#include &lt;cmath&gt;<br>#include &lt;iostream&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;sstream&gt;<br>#include &lt;cstring&gt;<br>#include &lt;functional&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;queue&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;cctype&gt;<br>#include &lt;string&gt;<br>#include &lt;vector&gt;<br><br>using namespace std;<br><br>class ParkAmusement<br>{<br>public:<br>  double getProbability(vector &lt;string&gt; landings, int startLanding, int K);<br>};<br><br>vector &lt;string&gt; landings;<br>int n;<br>double dp[64][64];<br>int outnum[64];<br><br>double calp(int start, int k)<br>{<br>  if (landings[start][start] == 'E' || landings[start][start] == 'P') return 0;<br>  memset(dp, 0, sizeof(dp));<br>  dp[start][0] = 1.0;<br>  for (int i = 0; i &lt; k; ++i) {<br>    for (int now = 0; now &lt; n; ++now) {<br>      if (dp[now][i] == 0) continue;<br>      if (landings[now][now] != '0') continue;<br>      for (int j = 0; j &lt; n; ++j) {<br>        if (landings[now][j] == '1') {<br>          dp[j][i + 1] += dp[now][i] / outnum[now];<br>        }<br>      }<br>    }<br>  }<br>  double ret = 0;<br>  for (int i = 0; i &lt; n; ++i) {<br>    if (landings[i][i] == 'E') ret += dp[i][k];<br>  }<br>  return ret;<br>}<br><br>double ParkAmusement::getProbability(vector &lt;string&gt; _landings, int startLanding, int K)<br>{<br>  landings = _landings;<br>  n = landings.size();<br>  memset(outnum, 0, sizeof(outnum));<br>  for (int i = 0; i &lt; n; ++i) {<br>    for (int j = 0; j &lt; n; ++j) {<br>      if (landings[i][j] == '1') ++outnum[i];<br>    }<br>  }<br>  double p = calp(startLanding, K);<br>  double sum = 0;<br>  for (int i = 0; i &lt; n; ++i) {<br>    sum += calp(i, K);<br>  }<br>  return p / sum;<br>}<br><br><br><br>// Powered by FileEdit<br>// Powered by CodeProcessor<br></td>