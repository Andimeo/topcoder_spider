<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;algorithm&gt;<br>#include &lt;cctype&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cstring&gt;<br>#include &lt;ctime&gt;<br>#include &lt;iostream&gt;<br>#include &lt;string&gt;<br>#include &lt;vector&gt;<br>using namespace std;<br><br>typedef long long llint;<br><br>#define MOD 1000000007<br><br>struct node {<br>   llint a, b, c;<br><br>   bool has_parent() { return c-b != b-a; }<br><br>   friend bool equal( const node &amp;A, const node &amp;B ) {<br>      return A.a == B.a &amp;&amp; A.b == B.b &amp;&amp; A.c == B.c;<br>   }<br><br>   node get_parent() {<br>      node ret;<br>      if( c-b &lt; b-a ) {<br>         ret.a = a;<br>         ret.b = 2*b-c;<br>         ret.c = b;<br>      } else {<br>         ret.a = b;<br>         ret.b = 2*b-a;<br>         ret.c = c;<br>      }<br><br>      return ret;<br>   }<br><br>   void read( vector&lt;llint&gt; x ) {<br>      sort( x.begin(), x.end() ); <br>      a = x[0];<br>      b = x[1];<br>      c = x[2];<br>   }<br>};<br><br>void add( int &amp;a, int b ) {<br>   a += b;<br>   if( a &gt;= MOD ) a -= MOD;<br>}<br><br>int aa, bb, cc;<br>int memo[101][151][151][2];<br><br>class RabbitPuzzle {<br>public:<br><br>   int rec( int K, int x, int y, bool flag ) {<br>      if( x &gt; 150 || y &gt; 150 ) return 0;<br>      if( K == 0 ) return x == 0 &amp;&amp; y == 0;<br><br>      int &amp;ret = memo[K][x][y][flag];<br>      if( ret &gt;= 0 ) return ret;<br><br>      ret = 0;<br>      if( y == 0 ) {<br>         if( x == 0 ) {<br>            add( ret, rec( K-1, 0, 1, false ) );<br>            add( ret, rec( K-1, 0, 1, false ) );<br>            if( x &lt; cc ) add( ret, rec( K-1, 1, 0, true ) );<br>         } else {<br>            add( ret, rec( K-1, x-1, 0, false ) );<br>            add( ret, rec( K-1, x, 1, false ) );<br>            if( x &lt; cc ) add( ret, rec( K-1, x+1, 0, true ) );<br>         }<br>      } else {<br>         add( ret, rec( K-1, x, y-1, flag ) );<br>         add( ret, rec( K-1, x, y+1, flag ) );<br>         if( flag == false || x != cc ) {<br>            add( ret, rec( K-1, x, y+1, false ) );<br>         }<br>      }<br><br>      return ret;<br>   }<br><br>   int theCount( vector&lt;llint&gt; rabbits, vector&lt;llint&gt; nests, int K ) {<br>      node a; a.read( rabbits );<br>      node b; b.read( nests );<br>      vector&lt;node&gt; A; A.push_back( a );<br>      vector&lt;node&gt; B; B.push_back( b );<br>      while( A.size() &lt; 250 &amp;&amp; A.back().has_parent() ) A.push_back( A.back().get_parent() );<br>      while( B.size() &lt; 250 &amp;&amp; B.back().has_parent() ) B.push_back( B.back().get_parent() );<br><br>      aa = -1; bb = -1;<br>      for( int i = 0; aa == -1 &amp;&amp; i &lt; A.size(); ++i ) <br>         for( int j = 0; bb == -1 &amp;&amp; j &lt; B.size(); ++j ) <br>            if( equal( A[i], B[j] ) ) {<br>               aa = i;<br>               bb = j;<br>            }<br><br>      if( aa == -1 &amp;&amp; bb == -1 ) return 0;<br>      if( aa + bb &gt; K ) return 0;<br><br>      cc = A.size() - 1;<br><br>      memset( memo, -1, sizeof memo );<br>      return rec( K, aa, bb, false );<br>   }<br>};<br><br><br><br>// Powered by FileEdit<br>// Powered by moj 4.12 [modified TZTester]<br>// Powered by CodeProcessor<br></td>