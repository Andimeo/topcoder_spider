<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections.Generic;<br><br>public class BuildingCities {<br>    public int findMinimumCities(int maxDirect, int maxTravel, int[] cityX, int[] cityY) {<br>        int maxAmount = 4000;<br>        double[,] best = new double[cityX.Length, maxAmount + 1];<br>        for (int i = 0; i &lt; cityX.Length; ++i)<br>            for (int j = 0; j &lt;= maxAmount; ++j)<br>                best[i, j] = 1e100;<br>        best[0, 0] = 0.0;<br>        List&lt;int&gt; pqCity = new List&lt;int&gt;();<br>        List&lt;int&gt; pqAmount = new List&lt;int&gt;();<br>        int[,] pqWhere = new int[cityX.Length, maxAmount + 1];<br>        for (int i = 0; i &lt; cityX.Length; ++i)<br>            for (int j = 0; j &lt;= maxAmount; ++j)<br>                pqWhere[i, j] = -1;<br>        pqCity.Add(0);<br>        pqAmount.Add(0);<br>        pqWhere[0, 0] = 0;<br>        double[,] dist = new double[cityX.Length, cityX.Length];<br>        for (int i = 0; i &lt; cityX.Length; ++i)<br>            for (int j = 0; j &lt; cityX.Length; ++j)<br>            {<br>                dist[i, j] = Math.Sqrt((cityX[i] - cityX[j]) * (cityX[i] - cityX[j]) + (cityY[i] - cityY[j]) * (cityY[i] - cityY[j]));<br>            }<br>        while (pqCity.Count &gt; 0)<br>        {<br>            int city = pqCity[0];<br>            int amount = pqAmount[0];<br>            pqCity[0] = pqCity[pqCity.Count - 1];<br>            pqAmount[0] = pqAmount[pqAmount.Count - 1];<br>            pqCity.RemoveAt(pqCity.Count - 1);<br>            pqAmount.RemoveAt(pqAmount.Count - 1);<br>            if (pqCity.Count &gt; 0) siftDown(pqCity, pqAmount, pqWhere, 0, best);<br>            for (int j = 0; j &lt; cityX.Length; ++j)<br>                if (j != city)<br>                {<br>                    double d = dist[city, j];<br>                    int needAdd = (int) Math.Floor((d - 1e-8) / maxDirect);<br>                    double nd = best[city, amount] + d;<br>                    if (amount + needAdd &gt; maxAmount)<br>                        continue;<br>                    if (nd &gt; maxTravel + 1e-8)<br>                        continue;<br>                    if (nd &gt;= best[j, amount + needAdd])<br>                        continue;<br>                    best[j, amount + needAdd] = nd;<br>                    if (pqWhere[j, amount + needAdd] &lt; 0)<br>                    {<br>                        pqCity.Add(j);<br>                        pqAmount.Add(amount + needAdd);<br>                        pqWhere[j, amount + needAdd] = pqCity.Count - 1;<br>                    }<br>                    siftUp(pqCity, pqAmount, pqWhere, pqWhere[j, amount + needAdd], best);<br>                }<br>        }<br>        for (int i = 0; i &lt;= maxAmount; ++i)<br>            if (best[cityX.Length - 1, i] &lt; 1e50)<br>                return i;<br>        return -1;<br>    }<br><br>    private void siftUp(List&lt;int&gt; pqCity, List&lt;int&gt; pqAmount, int[,] pqWhere, int p, double[,] best)<br>    {<br>        while (p &gt; 0 &amp;&amp; best[pqCity[(p - 1) / 2], pqAmount[(p - 1) / 2]] &gt; best[pqCity[p], pqAmount[p]])<br>        {<br>            swap(pqCity, pqAmount, pqWhere, (p - 1) / 2, p);<br>            p = (p - 1) / 2;<br>        }<br>    }<br><br>    private void siftDown(List&lt;int&gt; pqCity, List&lt;int&gt; pqAmount, int[,] pqWhere, int p, double[,] best)<br>    {<br>        while (true)<br>        {<br>            int i = p;<br>            if (2 * p + 1 &lt; pqCity.Count &amp;&amp; best[pqCity[2 * p + 1], pqAmount[2 * p + 1]] &lt; best[pqCity[i], pqAmount[i]])<br>                i = 2 * p + 1;<br>            if (2 * p + 2 &lt; pqCity.Count &amp;&amp; best[pqCity[2 * p + 2], pqAmount[2 * p + 2]] &lt; best[pqCity[i], pqAmount[i]])<br>                i = 2 * p + 2;<br>            if (i == p)<br>                return;<br>            swap(pqCity, pqAmount, pqWhere, i, p);<br>            p = i;<br>        }<br>    }<br><br>    private void swap(List&lt;int&gt; pqCity, List&lt;int&gt; pqAmount, int[,] pqWhere, int i, int p)<br>    {<br>        int t = pqCity[i];<br>        pqCity[i] = pqCity[p];<br>        pqCity[p] = t;<br>        t = pqAmount[i];<br>        pqAmount[i] = pqAmount[p];<br>        pqAmount[p] = t;<br>        pqWhere[pqCity[i], pqAmount[i]] = i;<br>        pqWhere[pqCity[p], pqAmount[p]] = p;<br>    }<br><br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003] [modified for C# by Petr]<br>// Powered by CodeProcessor<br></td>