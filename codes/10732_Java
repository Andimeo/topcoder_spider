<td class="problemText" colspan="8" valign="middle" align="left">
            import static java.lang.Math.*;<br>import static java.math.BigInteger.*;<br>import static java.util.Arrays.*;<br>import static java.util.Collections.*;<br>import java.math.*;<br>import java.util.*;<br><br>public class BuildingCities {<br>  public int findMinimumCities(int maxDirect, int maxTravel, int[] cityX, int[] cityY) {<br>    int n = cityX.length;<br>    double[][] d = new double[n][n];<br>    for (int i = 0; i &lt; n; i++) {<br>      for (int j = 0; j &lt; n; j++) {<br>        d[i][j] = dis(cityX[i] - cityX[j], cityY[i] - cityY[j]);<br>      }<br>    }<br>    if (d[0][n - 1] &gt; maxTravel) return -1;<br>    int[][] g = new int[n][n];<br>    for (int i = 0; i &lt; n; i++) {<br>      for (int j = 0; j &lt; n; j++) {<br>        g[i][j] = max(0, (int)((d[i][j] - EPS) / maxDirect));<br>      }<br>    }<br>    double[][] min = new double[n][N];<br>    for (int i = 0; i &lt; n; i++) fill(min[i], INF);<br>    min[0][0] = 0;<br>    PriorityQueue&lt;Entry&gt; que = new PriorityQueue&lt;Entry&gt;();<br>    que.offer(new Entry(0, 0, 0));<br>    int num = 0;<br>    while (!que.isEmpty()) {<br>      num++;<br>      Entry e = que.poll();<br>      int v = e.a, m = e.b;<br>      if (min[v][m] &lt; e.c) continue;<br>      for (int i = 0; i &lt; n; i++) {<br>        if (m + g[v][i] &lt; N &amp;&amp; min[i][m + g[v][i]] &gt; min[v][m] + d[v][i]) {<br>          min[i][m + g[v][i]] = min[v][m] + d[v][i];<br>          que.offer(new Entry(i, m + g[v][i], min[i][m + g[v][i]]));<br>        }<br>      }<br>    }<br>    debug(num);<br>    for (int i = 0; i &lt; N; i++) if (min[n - 1][i] &lt; maxTravel + EPS) return i;<br>    return -1;<br>  }<br>  int N = 3000;<br>  double EPS = 1e-9;<br>  double INF = Double.POSITIVE_INFINITY;<br>  class Entry implements Comparable&lt;Entry&gt; {<br>    int a, b;<br>    double c;<br>    Entry(int a, int b, double c) {<br>      this.a = a;<br>      this.b = b;<br>      this.c = c;<br>    }<br>    public int compareTo(Entry o) {<br>      if (c &lt; o.c) return -1;<br>      if (c &gt; o.c) return 1;<br>      return 0;<br>    }<br>  }<br>  double dis(double x, double y) {<br>    return sqrt(x * x + y * y);<br>  }<br>  void debug(Object...os) {<br>    System.err.println(deepToString(os));<br>  }<br>}<br></td>