<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections.Generic;<br><br>public class FencingGarden {<br>    public long computeWidth(int[] segment) {<br>        long sum = 0;<br>        for (int i = 0; i &lt; segment.Length; ++i)<br>        {<br>            segment[i] *= 4;<br>            sum += segment[i];<br>        }<br>        List&lt;long&gt; bigs = getClosestSums(segment, sum / 2);<br>        List&lt;long&gt; smalls = getClosestSums(segment, sum / 4);<br>        foreach (long x in smalls)<br>            bigs.Add(sum - 2 * x);<br>        long best = bigs[0];<br>        foreach (long x in bigs)<br>        {<br>            if (Math.Abs(x - sum / 2) &lt; Math.Abs(best - sum / 2) ||<br>                Math.Abs(x - sum / 2) == Math.Abs(best - sum / 2) &amp;&amp; x &gt; best)<br>                best = x;<br>        }<br>        return best / 4;<br>    }<br><br>    List&lt;long&gt; getClosestSums(int[] data, long need)<br>    {<br>        int half = data.Length / 2;<br>        long[] sums1 = getAllSums(data, 0, half);<br>        long[] sums2 = getAllSums(data, half, data.Length - half);<br>        List&lt;long&gt; res = new List&lt;long&gt;();<br>        res.Add(0);<br>        int p2 = sums2.Length - 1;<br>        for (int p1 = 0; p1 &lt; sums1.Length; ++p1)<br>        {<br>            while (p2 &gt; 0 &amp;&amp; Math.Abs(sums1[p1] + sums2[p2] - need) &gt;= Math.Abs(sums1[p1] + sums2[p2 - 1] - need))<br>                --p2;<br>            update(sums1[p1] + sums2[p2], need, res);<br>            if (p2 &lt; sums2.Length - 1) update(sums1[p1] + sums2[p2 + 1], need, res);<br>            if (p2 &gt; 0) update(sums1[p1] + sums2[p2 - 1], need, res);<br>        }<br>        return res;<br>    }<br><br>    private void update(long got, long need, List&lt;long&gt; res)<br>    {<br>        if (Math.Abs(got - need) &gt; Math.Abs(res[0] - need))<br>            return;<br>        if (Math.Abs(got - need) &lt; Math.Abs(res[0] - need))<br>            res.Clear();<br>        for (int i = 0; i &lt; res.Count; ++i)<br>            if (res[i] == got)<br>                return;<br>        res.Add(got);<br>    }<br><br>    private long[] getAllSums(int[] data, int start, int len)<br>    {<br>        long[] res = new long[1 &lt;&lt; len];<br>        for (int i = 0; i &lt; (1 &lt;&lt; len); ++i)<br>        {<br>            long sum = 0;<br>            for (int j = 0; j &lt; len; ++j)<br>                if ((i &amp; (1 &lt;&lt; j)) != 0)<br>                    sum += data[start + j];<br>            res[i] = sum;<br>        }<br>        Array.Sort(res);<br>        int num = 1;<br>        for (int i = 1; i &lt; res.Length; ++i)<br>            if (res[i] != res[i - 1])<br>                ++num;<br>        long[] arr = new long[num];<br>        arr[0] = res[0];<br>        num = 1;<br>        for (int i = 1; i &lt; res.Length; ++i)<br>            if (res[i] != res[i - 1])<br>                arr[num++] = res[i];<br>        return arr;<br>    }<br><br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003] [modified for C# by Petr]<br>// Powered by CodeProcessor<br></td>