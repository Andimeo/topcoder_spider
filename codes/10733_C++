<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;iostream&gt;<br>#include &lt;sstream&gt;<br>#include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;deque&gt;<br>#include &lt;queue&gt;<br>#include &lt;set&gt;<br>#include &lt;map&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;functional&gt;<br>#include &lt;utility&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;ctime&gt;<br><br>using namespace std;<br><br>#define REP(i,n) for((i)=0;(i)&lt;(int)(n);(i)++)<br><br>typedef long long ll;<br>#define INF (1ll&lt;&lt;60)<br>#define _abs(x) ((x)&gt;0?(x):-(x))<br>ll A[(1&lt;&lt;20)],B[(1&lt;&lt;20)];<br>int asz,bsz;<br><br>class FencingGarden{<br>  public:<br>  <br>  ll search_high(ll x){<br>    int i=asz-1,j=0;<br>    ll ans = INF;<br>    <br>    while(i &gt;= 0){<br>      while(j &lt; bsz &amp;&amp; A[i] + B[j] &lt; x) j++;<br>      if(j &lt; bsz) ans = min(ans,A[i]+B[j]);<br>      i--;<br>    }<br>    <br>    if(ans == INF) return -1;<br>    return ans;<br>  }<br>  <br>  ll search_low(ll x){<br>    int i=0,j=bsz-1;<br>    ll ans = -INF;<br>    <br>    while(i &lt; asz){<br>      while(j &gt;= 0 &amp;&amp; A[i] + B[j] &gt; x) j--;<br>      if(j &gt;= 0) ans = max(ans,A[i]+B[j]);<br>      i++;<br>    }<br>    <br>    if(ans == -INF) return -1;<br>    return ans;<br>  }<br><br>  long long computeWidth(vector &lt;int&gt; segment){<br>    int n=segment.size(),i,j;<br>    <br>    int L = n / 2;<br>    int R = n - L;<br>    <br>    REP(i,(1&lt;&lt;L)){<br>      ll tmp = 0;<br>      REP(j,L) if(i&amp;(1&lt;&lt;j)) tmp += segment[j];<br>      A[asz] = tmp; asz++;<br>    }<br>    sort(A,A+asz);<br>    <br>    REP(i,(1&lt;&lt;R)){<br>      ll tmp = 0;<br>      REP(j,R) if(i&amp;(1&lt;&lt;j)) tmp += segment[L+j];<br>      B[bsz] = tmp; bsz++;<br>    }<br>    sort(B,B+bsz);<br>    <br>    ll S = 0;<br>    ll x;<br>    REP(i,n) S += segment[i];<br>    vector &lt;ll&gt; v;<br>    x = search_high((S+1)/2); if(x != -1) v.push_back(S-x);<br>    x = search_low(S/2); if(x != -1) v.push_back(S-x);<br>    x = search_high((S+3)/4); if(x != -1) v.push_back(S-2*x);<br>    x = search_low(S/4); if(x != -1) v.push_back(S-2*x);<br>    <br>    ll ans = 0;<br>    REP(i,v.size()) if(_abs(v[i]*2-S) &lt; _abs(ans*2-S) || (_abs(v[i]*2-S) == _abs(ans*2-S) &amp;&amp; v[i] &gt; ans)) ans = v[i];<br>    return ans;<br>  }<br><br>};<br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003]<br>// Powered by CodeProcessor<br></td>