<td class="problemText" colspan="8" valign="middle" align="left">
            import static java.lang.Math.*;<br>import static java.math.BigInteger.*;<br>import static java.util.Arrays.*;<br>import static java.util.Collections.*;<br>import java.math.*;<br>import java.util.*;<br><br>public class DrawingLines {<br>  public double countLineCrossings(int n, int[] startDot, int[] endDot) {<br>    int m = n - startDot.length;<br>    int[] to = new int[n];<br>    fill(to, -1);<br>    int[] sum = new int[n + 1];<br>    fill(sum, 1);<br>    for (int i = 0; i &lt; startDot.length; i++) {<br>      to[startDot[i] - 1] = endDot[i] - 1;<br>      sum[endDot[i]]--;<br>    }<br>    sum[0] = 0;<br>    for (int i = 0; i &lt; n; i++) {<br>      sum[i + 1] += sum[i];<br>    }<br>//    debug(sum);<br>    double res = 0;<br>    for (int i = 0; i &lt; n; i++) {<br>      for (int j = i + 1; j &lt; n; j++) {<br>        if (to[i] &gt;= 0 &amp;&amp; to[j] &gt;= 0) {<br>          if (to[i] &gt; to[j]) res += 1;<br>        } else if (to[i] &gt;= 0) {<br>          res += (double)sum[to[i]] / m;<br>        } else if (to[j] &gt;= 0) {<br>          res += (double)(m - sum[to[j]]) / m;<br>        } else {<br>          res += 0.5;<br>        }<br>      }<br>    }<br>    return res;<br>  }<br>  void debug(Object...os) {<br>    System.err.println(deepToString(os));<br>  }<br>}<br></td>