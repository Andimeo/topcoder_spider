<td class="problemText" colspan="8" valign="middle" align="left">
            import static java.lang.Math.*;<br>import static java.math.BigInteger.*;<br>import static java.util.Arrays.*;<br>import static java.util.Collections.*;<br>import java.math.*;<br>import java.util.*;<br><br>public class ColorfulDecoration {<br>  public int getMaximum(int[] xa, int[] ya, int[] xb, int[] yb) {<br>    int n = xa.length;<br>    int left = 0, right = 1010000000;<br>    while (right - left &gt; 1) {<br>      int mid = (left + right) &gt;&gt;&gt; 1;<br>      V[] vs = new V[n * 2];<br>      for (int i = 0; i &lt; n * 2; i++) vs[i] = new V();<br>      for (int i = 0; i &lt; n; i++) {<br>        for (int j = 0; j &lt; n; j++) if (i != j) {<br>          if (max(abs(xa[i] - xa[j]), abs(ya[i] - ya[j])) &lt; mid) {<br>            vs[i].add(vs[n + j]);<br>          }<br>          if (max(abs(xa[i] - xb[j]), abs(ya[i] - yb[j])) &lt; mid) {<br>            vs[i].add(vs[j]);<br>          }<br>          if (max(abs(xb[i] - xa[j]), abs(yb[i] - ya[j])) &lt; mid) {<br>            vs[n + i].add(vs[n + j]);<br>          }<br>          if (max(abs(xb[i] - xb[j]), abs(yb[i] - yb[j])) &lt; mid) {<br>            vs[n + i].add(vs[j]);<br>          }<br>        }<br>      }<br>      scc(vs);<br>      boolean ok = true;<br>      for (int i = 0; i &lt; n; i++) {<br>        if (vs[i].comp == vs[n + i].comp) ok = false;<br>      }<br>      if (ok) {<br>        left = mid;<br>      } else {<br>        right = mid;<br>      }<br>    }<br>    return left;<br>  }<br>  int scc(V[] vs) {<br>    int n = vs.length;<br>    V[] us = new V[n];<br>    for (V v : vs) if (!v.visit) {<br>      while (v != null) {<br>        v.visit = true;<br>        if (v.p &lt; v.fs.size()) {<br>          V u = v.fs.get(v.p++);<br>          if (!u.visit) {<br>            u.prev = v;<br>            v = u;<br>          }<br>        } else {<br>          us[--n] = v;<br>          v = v.prev;<br>        }<br>      }<br>    }<br>    for (V v : vs) {<br>      v.visit = false;<br>      v.p = 0;<br>      v.prev = null;<br>    }<br>    for (V v : us) if (!v.visit) {<br>      while (v != null) {<br>        v.visit = true;<br>        if (v.p &lt; v.rs.size()) {<br>          V u = v.rs.get(v.p++);<br>          if (!u.visit) {<br>            u.prev = v;<br>            v = u;<br>          }<br>        } else {<br>          v.comp = n;<br>          v = v.prev;<br>        }<br>      }<br>      n++;<br>    }<br>    return n;<br>  }<br>  class V {<br>    ArrayList&lt;V&gt; fs = new ArrayList&lt;V&gt;(), rs = new ArrayList&lt;V&gt;();<br>    int comp, p;<br>    boolean visit;<br>    V prev;<br>    void add(V to) {<br>      fs.add(to);<br>      to.rs.add(this);<br>    }<br>  }<br>  void debug(Object...os) {<br>    System.err.println(deepToString(os));<br>  }<br>}<br></td>