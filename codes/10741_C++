<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;algorithm&gt;<br>#include &lt;cctype&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cstring&gt;<br>#include &lt;ctime&gt;<br>#include &lt;iostream&gt;<br>#include &lt;string&gt;<br>#include &lt;vector&gt;<br>using namespace std;<br><br>int R, C;<br>char a[50][50];<br>double p[7];<br><br>double memo[50][50][1&lt;&lt;7][8];<br>int cookie[50][50], COOKIE;<br><br>const int dr[4] = { -1, 0, 1, 0 };<br>const int dc[4] = { 0, 1, 0, -1 }; <br><br>typedef pair&lt;int,int&gt; par;<br><br>class ColorfulMaze {<br>public:<br><br>   double rec( int r, int c, int mask, int t ) {<br>      if( memo[r][c][mask][t] &gt;= -1.0 ) return memo[r][c][mask][t];<br><br>      if( a[r][c] == 'A' + t ) {<br>         double ret = 0.0;<br>         for( int d = 0; d &lt; 4; ++d ) {<br>            int rr = r + dr[d];<br>            int cc = c + dc[d];<br>            if( rr &lt; 0 || rr &gt;= R ) continue;<br>            if( cc &lt; 0 || cc &gt;= C ) continue;<br>            if( a[rr][cc] == '#' || a[rr][cc] == 'A' + t ) continue;<br>            if( a[rr][cc] == '!' ) return 1.0;<br>            if( isalpha(a[rr][cc]) &amp;&amp; !((mask&gt;&gt;(a[rr][cc]-'A'))&amp;1) ) {<br>               int color = a[rr][cc]-'A';<br>               ret = max( ret, (1-p[color]) * rec( rr, cc, mask | (1&lt;&lt;color), t ) );<br>            } else {<br>               ret = max( ret, rec( rr, cc, mask, t ) );<br>            }<br>         }<br>         return ret;<br>      } else {<br>         bool exit = false;<br>         vector&lt;par&gt; walk;<br>         vector&lt;par&gt; border;<br>         ++COOKIE;<br>         walk.push_back( par(r,c) );<br>         cookie[r][c] = COOKIE;<br>         for( int i = 0; i &lt; walk.size(); ++i ) {<br>            for( int d = 0; d &lt; 4; ++d ) {<br>               int rr = walk[i].first + dr[d];<br>               int cc = walk[i].second + dc[d];<br>               if( rr &lt; 0 || rr &gt;= R ) continue;<br>               if( cc &lt; 0 || cc &gt;= C ) continue;<br>               if( a[rr][cc] == '#' || a[rr][cc] == 'A' + t ) continue;<br>               if( cookie[rr][cc] == COOKIE ) continue;<br>               cookie[rr][cc] = COOKIE;<br>               if( a[rr][cc] == '!' ) exit = true;<br>               if( isalpha(a[rr][cc]) &amp;&amp; !((mask&gt;&gt;(a[rr][cc]-'A'))&amp;1) ) {<br>                  border.push_back( par(rr,cc) );<br>               } else {<br>                  walk.push_back( par(rr,cc) );<br>               }<br>            }<br>         }<br><br>         double ret = 0.0;<br>         if( exit ) ret = 1.0;<br>         else {<br>            for( vector&lt;par&gt;::iterator it = border.begin(); it != border.end(); ++it ) {<br>               int rr = it-&gt;first;<br>               int cc = it-&gt;second;<br>               int color = a[rr][cc]-'A';<br>               <br>               double p1 = (1-p[color]) * rec( rr, cc, mask | (1&lt;&lt;color), t );<br>               double p2 = t == 7 ? p[color] * rec( rr, cc, mask | (1&lt;&lt;color), color ) : 0.0;<br>               ret = max( ret, p1+p2 );<br>            }<br>         }<br><br>         for( vector&lt;par&gt;::iterator it = walk.begin(); it != walk.end(); ++it ) <br>            memo[it-&gt;first][it-&gt;second][mask][t] = ret;<br><br>         return ret;<br>      }<br>   }<br><br>   double getProbability( vector &lt;string&gt; maze, vector &lt;int&gt; trap ) {<br>      R = maze.size();<br>      C = maze[0].size();<br><br>      for( int i = 0; i &lt; 7; ++i ) p[i] = trap[i] / 100.0;<br><br>      int r1 = -1, c1 = -1;<br>      for( int r = 0; r &lt; R; ++r ) <br>         for( int c = 0; c &lt; C; ++c ) {<br>            a[r][c] = maze[r][c];<br>            if( a[r][c] == '$' ) {<br>               r1 = r;<br>               c1 = c;<br>               a[r][c] = '.';<br>            }<br>         }<br>      <br>      memset( cookie, 0, sizeof cookie );<br>      COOKIE = 0;<br><br>      for( int r = 0; r &lt; R; ++r ) <br>         for( int c = 0; c &lt; C; ++c ) <br>            for( int mask = 0; mask &lt; (1&lt;&lt;7); ++mask ) <br>               for( int t = 0; t &lt; 8; ++t ) <br>                  memo[r][c][mask][t] = -2.0;<br><br>      double ret = rec( r1, c1, 0, 7 );<br>      return ret;<br>   }<br>};<br><br><br><br>// Powered by FileEdit<br>// Powered by moj 4.12 [modified TZTester]<br>// Powered by CodeProcessor<br></td>