<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>public class ColorfulMazeTwo {<br>  public double getProbability(String[] maze, int[] trap) {<br>    int[][] offs = new int[][] {{0, -1}, {-1, 0}, {0, 1}, {1, 0}};<br>    int R = maze.length, C = maze[0].length(), rS=-1, cS=-1, rD=-1, cD=-1;<br>    double bestP = 0.0;<br>    <br>    for (int r = 0; r &lt; R; ++r)<br>      for (int c = 0; c &lt; C; ++c)<br>        if (maze[r].charAt(c) == '$')<br>          {rS = r; cS = c;}<br>        else if (maze[r].charAt(c) == '!')<br>          {rD = r; cD = c;}<br>    <br>    for (int u = 0; u &lt; 1 &lt;&lt; 7; ++u) {<br>      double p = 1.0;<br>      for (int i = 0; i &lt; 7; ++i)<br>        if (((u &gt;&gt; i) &amp; 1) != 0)<br>          p *= 1.0 - trap[i] / 100.0;<br>      if (p &lt;= bestP) continue;<br>      <br>      boolean[][] T = new boolean[R][C];<br>      T[rS][cS] = true;<br>      Stack&lt;int[]&gt; S = new Stack&lt;int[]&gt;();<br>      S.add(new int[] {rS, cS});<br>      W: while (!S.isEmpty()) {<br>        int[] x = S.pop();<br>        for (int[] o : offs) {<br>          int rp = x[0] + o[0], cp = x[1] + o[1];<br>          if (rp &lt; 0 || rp == R || cp &lt; 0 || cp == C) continue;<br>          if (T[rp][cp]) continue;<br>          char c = maze[rp].charAt(cp);<br>          if (c == '#') continue;<br>          if (c &gt;= 'A' &amp;&amp; c &lt;= 'G') {<br>            int of = c - 'A';<br>            if (((u &gt;&gt; of) &amp; 1) == 0)<br>              continue;<br>          }<br>          T[rp][cp] = true;<br>          S.add(new int[] {rp, cp});<br>        }<br>      }<br>      <br>      if (T[rD][cD]) {<br>        bestP = p;<br>        System.out.println(Integer.toString(u, 2));<br>      }<br>    }<br>    return bestP;<br>  }<br>}<br></td>