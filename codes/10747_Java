<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>public class NameInput {<br>  int chto(char c) {<br>    if (c &gt;= 'a' &amp;&amp; c &lt;= 'z') {<br>      return (int)(c-'a');<br>    }<br>    if (c &gt;= 'A' &amp;&amp; c &lt;= 'Z') {<br>      return (int)(c-'A') + 26;<br>    }<br>    if (c &gt;= '0' &amp;&amp; c &lt;= '9') {<br>      return (int)(c-'0')+52;<br>    }<br>    return -1;<br>  }<br>  <br>    public int countUpDownKeyPresses(String[] predictionSequence, String[] name) {<br>        int res = Integer.MAX_VALUE;<br>        <br>        String p = "";<br>        String nn = "";<br>        for (int i = 0; i &lt; predictionSequence.length; ++i) {<br>          p += predictionSequence[i];<br>        }<br>        for (int i = 0; i &lt; name.length; ++i) {<br>          nn += name[i];<br>        }<br>        <br>        int[][] dist = new int[nn.length()+1][p.length()];<br>        for (int i = 0; i &lt; nn.length()+1; ++i) {<br>          Arrays.fill(dist[i], Integer.MAX_VALUE);<br>        }<br>        dist[0][0] = 0;<br>        LinkedList&lt;Integer&gt; q = new LinkedList&lt;Integer&gt;();<br>        q.add(0);<br>        while (!q.isEmpty()) {<br>          int tmp = q.removeFirst();<br>          int cur = tmp/10000;<br>          int pos = tmp%10000;<br>          <br>          if (cur &lt; nn.length()) {<br>            if (nn.charAt(cur) == p.charAt(pos)) {<br>              if (dist[cur+1][pos] &gt;= dist[cur][pos] + 1) {<br>                dist[cur+1][pos] = dist[cur][pos];<br>                q.addLast((cur+1)*10000 + pos);<br>              }<br>            }<br>            if (dist[cur][(pos+1)%p.length()] &gt;= dist[cur][pos] + 1) {<br>              dist[cur][(pos+1)%p.length()] = dist[cur][pos] + 1;<br>              q.addLast(cur*10000 + ((pos+1)%p.length()));<br>            }<br>            if (dist[cur][(pos-1+p.length())%p.length()] &gt;= dist[cur][pos] + 1) {<br>              dist[cur][(pos-1+p.length())%p.length()] = dist[cur][pos] + 1;<br>              q.addLast(cur*10000 + ((pos-1+p.length())%p.length()));<br>            }<br>          }<br>        }<br>        <br>        for (int i = 0; i &lt; p.length(); ++i) {<br>          res = Math.min(res, dist[nn.length()][i]);<br>        }<br>        if (res == Integer.MAX_VALUE) {<br>          res = -1;<br>        }<br>        <br>        return res;<br>    }<br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by CodeProcessor<br></td>