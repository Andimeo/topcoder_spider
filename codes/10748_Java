<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br><br>public class StringDecryption {<br>    static final long MODULO = 1000000009;<br><br>    public int decrypt(String[] code) {<br>        StringBuilder b = new StringBuilder();<br>        for (String x : code) b.append(x);<br>        String input = b.toString();<br>        int n = input.length();<br>        long[][][] am = new long[n + 1][11][2];<br>        am[0][10][1] = 1;<br>        for (int last = 1; last &lt;= n; ++last) {<br>            long mult = 0;<br>            long p10 = 1;<br>            int lastChar = input.charAt(last - 1) - '0';<br>            for (int prev = last - 2; prev &gt;= 0; --prev) {<br>                mult = (mult + p10 * (input.charAt(prev) - '0')) % MODULO;<br>                p10 = (p10 * 10) % MODULO;<br>                if (input.charAt(prev) == '0')<br>                    continue;<br>                if (prev &gt; 0 &amp;&amp; input.charAt(prev - 1) - '0' == lastChar)<br>                    continue;<br>                for (int prevDigit = 0; prevDigit &lt; 11; ++prevDigit) {<br>                    for (int prevLastTaken = 0; prevLastTaken &lt; 2; ++prevLastTaken) {<br>                        if (am[prev][prevDigit][prevLastTaken] == 0)<br>                            continue;<br>                        if (lastChar == 0 &amp;&amp; prevLastTaken == 1)<br>                            continue;<br>                        am[last][prevDigit][0] = (am[last][prevDigit][0] + am[prev][prevDigit][prevLastTaken]) % MODULO;<br>                        if (prevDigit != lastChar) {<br>                            if (lastChar &gt; 0 &amp;&amp; (prev &lt; last - 2 || mult &gt; 1)) {<br>                                am[last][lastChar][0] = ((am[last][lastChar][0] + am[prev][prevDigit][prevLastTaken] * (mult - 1 - prevLastTaken + MODULO) % MODULO) % MODULO);<br>                            }<br>                            if (prev &lt; last - 2 || mult &gt; 1 || prevLastTaken == 0)<br>                                am[last][lastChar][1] = ((am[last][lastChar][1] + am[prev][prevDigit][prevLastTaken]) % MODULO);<br>                        }<br>                    }<br>                }<br>            }<br>        }<br>        return (int) am[n][input.charAt(n - 1) - '0'][1];<br>    }<br>}<br><br><br>// Powered by FileEdit<br>// Powered by RETester [based on ExampleBuilder]<br>// Powered by CodeProcessor<br></td>