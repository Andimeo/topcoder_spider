<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>class Node implements Comparable&lt;Node&gt;<br>{<br>  int x;<br>  int y;<br>  int cost;<br>  public Node(int i,int j,int c)<br>  {<br>    x=i;<br>    y=j;<br>    cost=c;<br>  }<br>  public int compareTo(Node temp)<br>  {<br>    if(cost&gt;temp.cost) return -1;<br>    if(cost&lt;temp.cost) return 1;<br>    return 0;<br>  }<br>}<br> <br>public class ActivateGame {<br>  public static int get(char c)<br>  {<br>    if (Character.isDigit(c)) return Integer.parseInt(""+c);<br>    if(Character.isLowerCase(c)) return c-'a'+10;<br>    else return c-'A'+36;<br>  }<br>  public static int findMaxScore(String[] grid)<br>  {<br>    PriorityQueue&lt;Node&gt; A = new PriorityQueue&lt;Node&gt;();<br>    char[][] B = new char[grid.length][grid[0].length()];<br>    for (int i = 0; i &lt; B.length; i++) {<br>      B[i]=grid[i].toCharArray();<br>    }<br>    <br>    A.add(new Node(0,0,0));<br>    int t = grid.length*grid[0].length();<br>    int sum=0;<br>    boolean visited[][] = new boolean[B.length][B[0].length];<br>    while(!A.isEmpty())<br>    {<br>      Node temp=A.poll();<br>      int x=temp.x;<br>      int y=temp.y;<br>      int cost=temp.cost;<br>      if(visited[x][y]) continue;<br>      visited[x][y]=true;<br>      sum+=cost;<br>      if(x&gt;0) A.add(new Node(x-1,y,Math.abs(get(B[x][y])-get(B[x-1][y]))));<br>      if(x&lt;B.length-1) A.add(new Node(x+1,y,Math.abs(get(B[x][y])-get(B[x+1][y]))));<br>      if(y&gt;0) A.add(new Node(x,y-1,Math.abs(get(B[x][y])-get(B[x][y-1]))));<br>      if(y&lt;B[0].length-1) A.add(new Node(x,y+1,Math.abs(get(B[x][y])-get(B[x][y+1]))));<br>    }<br>    return sum;<br>  }<br>}<br></td>