<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections;<br>using System.Collections.Generic;<br>using System.Collections.Specialized;<br>using System.Text;<br>using System.Text.RegularExpressions;<br> <br>public class ColorfulTiles<br>{<br>    static int MOD = 1000000007;<br>    int doIt(int n, int[,] cost, int K)<br>    {<br>        int[,] f = new int[n, K + 1];<br>        for (int i = 0; i &lt; n; ++i)<br>            for (int k = 0; k &lt;= K; ++k)<br>                for (int c = 0; c &lt; 2; ++c)<br>                {<br>                    int next_k = k - cost[i, c];<br>                    if (next_k &lt; 0)<br>                        continue;<br>                    if (i == 0)<br>                        f[i, k] = (f[i, k] + 1) % MOD;<br>                    else<br>                        f[i, k] = (f[i, k] + f[i - 1, next_k]) % MOD;<br>                }<br>        return f[n - 1, K];<br>    }<br>    int doIt(string[] room, int K)<br>    {<br>        int height = room.Length;<br>        int width = room[0].Length;<br>        int[,] colors = new int[height, width];<br>        for (int i = 0; i &lt; height; ++i)<br>            for (int j = 0; j &lt; width; ++j)<br>            {<br>                switch (room[i][j])<br>                {<br>                    case 'R': colors[i, j] = 0; break;<br>                    case 'G': colors[i, j] = 1; break;<br>                    case 'B': colors[i, j] = 2; break;<br>                    case 'Y': colors[i, j] = 3; break;<br>                }<br>            }<br>        int results = 0;<br>        for (int c1 = 0; c1 &lt; 4; ++c1)<br>            for (int c2 = c1 + 1; c2 &lt; 4; ++c2)<br>            {<br>                int c3 = 0;<br>                if (c1 != 0 &amp;&amp; c2 != 0)<br>                    c3 = 0;<br>                else if (c1 != 1 &amp;&amp; c2 != 1)<br>                    c3 = 1;<br>                else<br>                    c3 = 2;<br>                int c4 = 6 - c1 - c2 - c3;<br>                int[, ] costs = new int[height, 2];<br>                for (int i = 0; i &lt; height; ++i)<br>                    for (int j = 0; j &lt; 2; ++j)<br>                        for (int k = 0; k &lt; width; ++k)<br>                        {<br>                            int color;<br>                            if ((i &amp; 1) == 0)<br>                                color = (((k + j) &amp; 1) == 0) ? c3 : c4;<br>                            else<br>                                color = (((k + j) &amp; 1) == 0) ? c1 : c2;<br>                            if (colors[i, k] != color)<br>                                ++costs[i, j];<br>                        }<br>                results = (results + doIt(height, costs, K)) % MOD;<br>            }<br>        return results;<br>    }<br>    public int theCount(string[] room, int K)<br>    {<br>        int height = room.Length;<br>        int width = room[0].Length;<br>        string[] t = new string[width];<br>        for (int i = 0; i &lt; width; ++i)<br>        {<br>            StringBuilder b = new StringBuilder();<br>            for (int j = 0; j &lt; height; ++j)<br>                b.Append(room[j][i]);<br>            t[i] = b.ToString();<br>        }<br>        if (height &lt; width)<br>            return theCount(t, K);<br>        if (width == 1)<br>        {<br>            int[, ,] f = new int[height, K + 1, 4];<br>            for (int i = 0; i &lt; height; ++i)<br>                for (int k = 0; k &lt;= K; ++k)<br>                    for (int c = 0; c &lt; 4; ++c)<br>                    {<br>                        int next_k = k;<br>                        int color = -1;<br>                        switch (room[i][0])<br>                        {<br>                            case 'R': color = 0; break;<br>                            case 'G': color = 1; break;<br>                            case 'B': color = 2; break;<br>                            case 'Y': color = 3; break;<br>                        }<br>                        if (c != color)<br>                            --next_k;<br>                        if (next_k &lt; 0)<br>                            continue;<br>                        if (i == 0)<br>                            f[i, k, c] = (f[i, k, c] + 1) % MOD;<br>                        else<br>                        {<br>                            for (int next_c = 0; next_c &lt; 4; ++next_c)<br>                                if (c != next_c)<br>                                    f[i, k, c] = (f[i, k, c] + f[i - 1, next_k, next_c]) % MOD;<br>                        }<br>                    }<br>            int cnt = 0;<br>            for (int c = 0; c &lt; 4; ++c)<br>                cnt = (cnt + f[height - 1, K, c]) % MOD;<br>            return cnt % MOD;<br>        }<br>        int results = 0;<br>        results = (results + doIt(room, K)) % MOD;<br>        results = (results + doIt(t, K)) % MOD;<br>        for (int c1 = 0; c1 &lt; 4; ++c1)<br>            for (int c2 = 0; c2 &lt; 4; ++c2)<br>                if (c1 != c2)<br>                    for (int c3 = 0; c3 &lt; 4; ++c3)<br>                        if (c1 != c3 &amp;&amp; c2 != c3)<br>                        {<br>                            int c4 = 6 - c1 - c2 - c3;<br>                            int next_K = K;<br>                            for (int i = 0; i &lt; height; ++i)<br>                                for (int j = 0; j &lt; width; ++j)<br>                                {<br>                                    int color = -1;<br>                                    switch (room[i][j])<br>                                    {<br>                                        case 'R': color = 0; break;<br>                                        case 'G': color = 1; break;<br>                                        case 'B': color = 2; break;<br>                                        case 'Y': color = 3; break;<br>                                    }<br>                                    int c = -1;<br>                                    if ((i &amp; 1) == 0 &amp;&amp; (j &amp; 1) == 0)<br>                                        c = c1;<br>                                    if ((i &amp; 1) == 0 &amp;&amp; (j &amp; 1) == 1)<br>                                        c = c2;<br>                                    if ((i &amp; 1) == 1 &amp;&amp; (j &amp; 1) == 0)<br>                                        c = c3;<br>                                    if ((i &amp; 1) == 1 &amp;&amp; (j &amp; 1) == 1)<br>                                        c = c4;<br>                                    if (c != color)<br>                                        --next_K;<br>                                }<br>                            if (next_K &gt;= 0)<br>                                results = (results - 1 + MOD) % MOD;<br>                        }<br>        return results % MOD;<br>    }<br>}<br></td>