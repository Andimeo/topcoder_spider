<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;iostream&gt;<br>#include &lt;limits&gt;<br>#include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;strstream&gt;<br>using namespace std;<br> <br>struct info<br>{<br>  info(int nd, int t, bool c1, bool c2)<br>  {<br>    numDigits = nd;<br>    target = t;<br>    checkMin = c1;<br>    checkMax = c2;<br>  }<br> <br>  int numDigits, target;<br>  bool checkMin, checkMax;<br>};<br> <br>bool operator&lt;(const info &amp;i1, const info &amp;i2)<br>{<br>  if (i1.numDigits != i2.numDigits)<br>    return i1.numDigits &lt; i2.numDigits;<br>  if (i1.target != i2.target)<br>    return i1.target &lt; i2.target;<br>  if (i1.checkMin != i2.checkMin)<br>    return i1.checkMin;<br>  return i1.checkMax;<br>}<br> <br>class SumSort<br>{<br>public:<br> <br>string minbound;<br>string maxbound;<br>map&lt;info, int&gt; freq; <br> <br>int getFreq(int numDigits, int target, bool checkMin, bool checkMax)<br>{<br>  int minfirstd = minbound[numDigits] - '0';<br>  int maxfirstd = maxbound[numDigits] - '0';<br>  info thisinfo(numDigits, target, checkMin, checkMax);<br> <br>  if (target &lt; 0)<br>    return 0;<br>  else if (numDigits &gt;= maxbound.size())<br>    return 1;<br>  else if (freq.count(thisinfo))<br>    return freq[thisinfo];<br> <br>  int count = 0;<br>  for (int d1 = 0; d1 &lt; 10; d1++)<br>  {<br>    bool isOkay = true;<br>    bool newCheckMin = false;<br>    bool newCheckMax = false;<br> <br>    if (d1 &lt; minfirstd &amp;&amp; checkMin)<br>      isOkay = false;<br>    if (d1 &gt; maxfirstd &amp;&amp; checkMax)<br>      isOkay = false;<br>    if (d1 == minfirstd &amp;&amp; checkMin)<br>      newCheckMin = true;<br>    if (d1 == maxfirstd &amp;&amp; checkMax)<br>      newCheckMax = true;<br>  <br>    int c2 = 0;<br>    if (isOkay)<br>      c2 = getFreq(numDigits+1, target - d1, newCheckMin, newCheckMax);<br>    count += c2;<br>/*    if (c2 &gt; 0)<br>      cout &lt;&lt; d1 &lt;&lt; " " &lt;&lt; numDigits &lt;&lt; " " &lt;&lt; minfirstd &lt;&lt; " " &lt;&lt; maxfirstd &lt;&lt; " " &lt;&lt; target &lt;&lt; endl;*/<br>  }<br> <br>  freq[thisinfo] = count;<br>  return count;<br>}<br> <br>int getFreq(int target)<br>{<br>  return getFreq(0, target, true, true);<br>}<br> <br>void setRanges(int rlow, int rhigh)<br>{<br>  minbound = "";<br>  maxbound = "";<br> <br>  while (rhigh &gt; 0)<br>  {<br>    string old1 = minbound;<br>    string old2 = maxbound;<br>    minbound.resize(minbound.size()+1);<br>    maxbound.resize(maxbound.size()+1);<br>    for (int i = 0; i &lt; minbound.size(); i++)<br>    {<br>      if (i == 0)<br>      {<br>        minbound[i] = '0' + (rlow%10);<br>        maxbound[i] = '0' + (rhigh%10);<br>      }<br>      else<br>      {<br>        minbound[i] = old1[i-1];<br>        maxbound[i] = old2[i-1];<br>      }<br>    }<br>    rlow /= 10;<br>    rhigh /= 10;<br>  }<br>}<br> <br>int valueAt(int rangeLow, int rangeHigh, int pos)<br>{<br>  setRanges(rangeLow, rangeHigh);<br>  int correctsum = -1;<br> <br>  pos++;<br>  for (int i = 1; i &lt; 100; i++)<br>  {<br>    if (getFreq(i) &gt;= pos &amp;&amp; getFreq(i-1) &lt; pos)<br>      correctsum = i;<br>  }<br>  if (pos == 1 &amp;&amp; rangeLow == 0)<br>    return 0;<br> <br>  int oldv1 = getFreq(correctsum) - getFreq(correctsum-1);<br>  int oldv2 = getFreq(correctsum-1);<br> <br>  int minMax = rangeLow;<br>  int maxMax = rangeHigh;<br>  while (minMax &lt; maxMax)<br>  {<br>    int midMax = (minMax + maxMax) / 2;<br>    freq.clear();<br>    setRanges(rangeLow, midMax);<br>    int count = getFreq(correctsum) - getFreq(correctsum-1) + oldv2;<br>    if (count &lt; pos)<br>      minMax = midMax+1;<br>    else<br>      maxMax = midMax;<br>  }<br> <br>  return minMax;<br>}<br> <br>};<br></td>