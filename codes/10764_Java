<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>import java.util.regex.*;<br>import java.text.*;<br>import java.math.*;<br>import java.awt.geom.*;<br> <br>public class RoadOrFlightEasy<br>{<br>  boolean bool[]=new boolean[50];<br>  <br>  public int maxdiff(int dif[])<br>  {<br>    int m=0,i=0,max=0;<br>    for(i=0;i&lt;dif.length;i++)<br>    {<br>      if(bool[i]==false)<br>      {<br>        if(dif[i]&gt;max)<br>        {<br>          max=dif[i];<br>          m=i;<br>        }  <br>      }<br>    }<br>    if(max==0)<br>      return -1;<br>    else  <br>      return m;<br>  }<br>  <br>  public int minTime(int N, int[] road, int[] f, int K)<br>  {<br>    int dif[]=new int[road.length];<br>    int nn=K;<br>    int sum=0,i=0,j=0;<br>    Arrays.fill(bool,false);<br>    for(i=0;i&lt;road.length;i++)<br>    {  if(road[i]-f[i]&lt;0)<br>        dif[i]=0;<br>      else  <br>        dif[i]=road[i]-f[i];<br>    }<br>    for(i=0;i&lt;nn;i++)<br>    {<br>      j=maxdiff(dif);<br>      if(j==-1)<br>        break;<br>      if(j&gt;-1)<br>      {  bool[j]=true;<br>        road[j]=f[j];<br>      }  <br>    }  <br>    for(i=0;i&lt;road.length;i++)<br>      sum+=road[i];<br>    return sum;  <br>  }<br>          <br>  <br>  <br>  <br>}<br>//Powered by [KawigiEdit] 2.0!<br></td>