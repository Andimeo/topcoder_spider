<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections;<br>using System.Collections.Generic;<br>using System.Text;<br><br>class Bipartite<br>{<br>    static int m = 0, n = 0;<br>    static bool[] visited;<br>    static int[] f;<br>    static bool[,] a;<br>    static bool go(int x)<br>    {<br>        for (int i = 0; i &lt; n; i++)<br>            if (!visited[i] &amp;&amp; a[x, i])<br>            {<br>                visited[i] = true;<br>                if (f[i] == -1 || go(f[i])) { f[i] = x; return true; }<br>            }<br>        return false;<br>    }<br>    public static int FindMatch(bool[,] a)<br>    {<br>        Bipartite.a = a;<br>        m = a.GetLength(0); n = a.GetLength(1);<br>        f = new int[n]; visited = new bool[n];<br>        int res = 0;<br>        for (int i = 0; i &lt; n; i++) f[i] = -1;<br>        for (int i = 0; i &lt; m; i++)<br>        {<br>            Array.Clear(visited, 0, n);<br>            if (go(i)) res++;<br>        }<br>        return res;<br>    }<br>}<br><br><br>public class PythTriplets <br>{<br>  const int INF = 987654321;<br><br>    <br><br>    static int gcd(int a, int b)<br>    {<br>        while (a % b &gt; 0) { int x = a % b; a = b; b = x; }<br>        return b;<br>    }<br><br>  public int findMax(string[] stick) <br>  {<br>        StringBuilder sb = new StringBuilder();<br>        foreach (string s in stick)<br>        {<br>            sb.Append(s);<br>        }<br><br>        int[] a = Array.ConvertAll&lt;string, int&gt;(sb.ToString().Split(new char[] { ' ' }, StringSplitOptions.RemoveEmptyEntries), int.Parse);<br>        int n = a.Length;<br><br>        Array.Sort(a);<br><br>        bool[,] good = new bool[n, n];<br>        for (int i = 0; i &lt; n; i++)<br>        {<br>            for (int j = 0; j &lt; i; j++)<br>            {<br>                if (gcd(a[i], a[j]) == 1)<br>                {<br>                    long K = (long)a[i]*a[i] + (long)a[j] * a[j];<br>                    long T = (long)Math.Round(Math.Sqrt(K));<br>                    if (T * T == K)<br>                    {<br>                        good[i, j] = good[j,i] = true;<br>                    }<br>                }<br>            }<br>        }<br><br>        List&lt;int&gt; even = new List&lt;int&gt;();<br>        List&lt;int&gt; odd = new List&lt;int&gt;();<br><br>        for (int i = 0; i &lt; n; i++)<br>        {<br>            if (a[i] % 2 == 0)<br>                even.Add(i);<br>            else<br>                odd.Add(i);<br>        }<br><br>        int m1 = even.Count;<br>        int m2 = odd.Count;<br><br>        bool[,] b = new bool[m1, m2];<br>        for (int i = 0; i &lt; m1; i++)<br>        {<br>            int u = even[i];<br>            for (int j = 0; j &lt; m2; j++)<br>            {<br>                int v = odd[j];<br>                b[i, j] = good[u, v];<br>            }<br>        }<br><br>        return Bipartite.FindMatch(b);<br>  }<br><br><br><br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003] [modified for C# by Petr]<br>// Powered by CodeProcessor<br></td>