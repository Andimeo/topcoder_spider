<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;algorithm&gt;<br>#include &lt;bitset&gt;<br>#include &lt;cassert&gt;<br>#include &lt;cctype&gt;<br>#include &lt;climits&gt;<br>#include &lt;cmath&gt;<br>#include &lt;complex&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cstring&gt;<br>#include &lt;ctime&gt;<br>#include &lt;deque&gt;<br>#include &lt;fstream&gt;<br>#include &lt;functional&gt;<br>#include &lt;iomanip&gt;<br>#include &lt;iostream&gt;<br>#include &lt;limits&gt;<br>#include &lt;list&gt;<br>#include &lt;map&gt;<br>#include &lt;numeric&gt;<br>#include &lt;queue&gt;<br>#include &lt;set&gt;<br>#include &lt;sstream&gt;<br>#include &lt;stack&gt;<br>#include &lt;string&gt;<br>#include &lt;utility&gt;<br>#include &lt;vector&gt;<br>using namespace std;<br> <br>const int MAXA = 10005, MAXB = 10005, MAXE = 100005, INF = 1000000005;<br> <br>struct DfsMatch<br>{<br>    int A, B, eind, eadj [MAXE], eprev [MAXE], elast [MAXA];<br>    int start, vis [MAXA], prev [MAXB];<br> <br>    inline DfsMatch ()<br>    {<br>        A = B = -1;<br>    }<br> <br>    inline void init (int a, int b)<br>    {<br>        A = a; B = b; eind = 0;<br>        memset (elast, -1, A * sizeof (int));<br>    }<br> <br>    inline void addedge (int a, int b)<br>    {<br>        eadj [eind] = b; eprev [eind] = elast [a]; elast [a] = eind++;<br>    }<br> <br>    bool dfs (int num)<br>    {<br>        if (vis [num] == start)<br>            return false;<br> <br>        vis [num] = start;<br> <br>        for (int i = elast [num]; i != -1; i = eprev [i])<br>            if (prev [eadj [i]] == -1)<br>            {<br>                prev [eadj [i]] = num;<br>                return true;<br>            }<br> <br>        for (int i = elast [num]; i != -1; i = eprev [i])<br>            if (dfs (prev [eadj [i]]))<br>            {<br>                prev [eadj [i]] = num;<br>                return true;<br>            }<br> <br>        return false;<br>    }<br> <br>    int match ()<br>    {<br>        if (A == -1 &amp;&amp; B == -1)<br>            return -INF;<br> <br>        memset (prev, -1, B * sizeof (int));<br>        memset (vis, -1, A * sizeof (int));<br>        int total = 0;<br> <br>        for (int i = 0; i &lt; A; i++)<br>        {<br>            start = i;<br> <br>            if (dfs (i))<br>                total++;<br>        }<br> <br>        return total;<br>    }<br>};<br> <br>DfsMatch graph;<br> <br>struct PythTriplets<br>{<br>    int findMax (vector &lt;string&gt; stick)<br>    {<br>        vector &lt;int&gt; even, odd;<br>        string all = accumulate (stick.begin (), stick.end (), string ());<br>        istringstream in (all);<br> <br>        int len;<br> <br>        while (in &gt;&gt; len)<br>        {<br>            if (len % 2 == 0)<br>                even.push_back (len);<br>            else<br>                odd.push_back (len);<br>        }<br> <br>        int E = even.size (), O = odd.size ();<br>        graph.init (E, O);<br> <br>        for (int i = 0; i &lt; E; i++)<br>            for (int j = 0; j &lt; O; j++)<br>            {<br>                long long c2 = (long long) even [i] * even [i] + (long long) odd [j] * odd [j];<br>                long long c = (long long) sqrt (c2 + 0.5);<br> <br>                if (__gcd (even [i], odd [j]) == 1 &amp;&amp; c * c == c2)<br>                    graph.addedge (i, j);<br>            }<br> <br>        return graph.match ();<br>    }<br>};<br> <br> <br> <br>// Powered by FileEdit<br>// Powered by moj 4.16 [modified TZTester]<br>// Powered by CodeProcessor<br></td>