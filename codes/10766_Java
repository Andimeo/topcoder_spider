<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br> <br>public class PythTriplets {<br>    boolean[][] g;<br>    int nl;<br>    int nr;<br>    boolean[] mark;<br>    int[] match;<br> <br>    public int findMax(String[] stick) {<br>        StringBuilder b = new StringBuilder();<br>        for (String x : stick)<br>            b.append(x);<br>        String[] parts = b.toString().split(" ", -1);<br>        int[] a = new int[parts.length];<br>        for (int i = 0; i &lt; a.length; ++i)<br>            a[i] = Integer.parseInt(parts[i]);<br>        nl = 0;<br>        nr = 0;<br>        for (int i = 0; i &lt; a.length; ++i)<br>            if (a[i] % 2 == 0)<br>                ++nl;<br>            else<br>                ++nr;<br>        int[] l = new int[nl];<br>        int[] r = new int[nr];<br>        nl = 0;<br>        nr = 0;<br>        for (int i = 0; i &lt; a.length; ++i)<br>            if (a[i] % 2 == 0)<br>                l[nl++] = a[i];<br>            else<br>                r[nr++] = a[i];<br>        g = new boolean[nl][nr];<br>        for (int i = 0; i &lt; nl; ++i)<br>            for (int j = 0; j &lt; nr; ++j) {<br>                long al = l[i];<br>                long ar = r[j];<br>                long z = al * al + ar * ar;<br>                long sq = (long) Math.sqrt(z) - 1;<br>                while (sq * sq &lt; z)<br>                    ++sq;<br>                if (sq * sq == z &amp;&amp; gcd(al, ar) == 1) {<br>                    g[i][j] = true;<br>                }<br>            }<br>        int res = 0;<br>        match = new int[nr];<br>        Arrays.fill(match, -1);<br>        mark = new boolean[nl];<br>        for (int i = 0; i &lt; nl; ++i) {<br>            if (dfs(i)) {<br>                ++res;<br>                Arrays.fill(mark, false);<br>            }<br>        }<br>        return res;<br>    }<br> <br>    private boolean dfs(int at) {<br>        if (mark[at])<br>            return false;<br>        mark[at] = true;<br>        for (int i = 0; i &lt; nr; ++i)<br>            if (g[at][i])<br>                if (match[i] &lt; 0 || dfs(match[i])) {<br>                    match[i] = at;<br>                    return true;<br>                }<br>        return false;<br>    }<br> <br>    private long gcd(long x, long y) {<br>        while (y &gt; 0) {<br>            long t = x % y;<br>            x = y;<br>            y = t;<br>        }<br>        return x;<br>    }<br> <br>}<br> <br> <br>// Powered by FileEdit<br>// Powered by RETester [based on ExampleBuilder]<br>// Powered by CodeProcessor<br></td>