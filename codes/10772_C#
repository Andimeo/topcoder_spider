<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections.Generic;<br>using System.Text;<br><br>class TheFansAndMeetingsDivTwo<br>{<br><br>    public double find(int[] minJ, int[] maxJ, int[] minB, int[] maxB)<br>    {<br>        SortedList&lt;int, double&gt; john = new SortedList&lt;int, double&gt;(256);<br>        SortedList&lt;int, double&gt; brus = new SortedList&lt;int, double&gt;(256);<br><br>        // John.<br>        int cityCount = minJ.Length;<br>        double cityProb = 1.0 / (double)cityCount;<br>        for (int i = 0; i &lt; cityCount; ++i)<br>        {<br>            int countJ = maxJ[i] - minJ[i] + 1;<br>            double probJ = cityProb / (double)countJ;<br>            for (int n = minJ[i]; n &lt;= maxJ[i]; ++n)<br>            {<br>                if (!john.ContainsKey(n))<br>                {<br>                    john.Add(n, 0);<br>                }<br>                john[n] += probJ;<br>            }<br>        }<br><br>        // Brus.<br>        cityCount = minB.Length;<br>        cityProb = 1.0 / (double)cityCount;<br>        for (int i = 0; i &lt; cityCount; ++i)<br>        {<br>            int countB = maxB[i] - minB[i] + 1;<br>            double probB = cityProb / (double)countB;<br>            for (int n = minB[i]; n &lt;= maxB[i]; ++n)<br>            {<br>                if (!brus.ContainsKey(n))<br>                {<br>                    brus.Add(n, 0);<br>                }<br>                brus[n] += probB;<br>            }<br>        }<br><br>        double probSame = 0.0;<br>        foreach (int number in john.Keys)<br>        {<br>            if (brus.ContainsKey(number))<br>            {<br>                probSame += john[number] * brus[number];<br>            }<br>        }<br><br>        return probSame;<br>    }<br><br>}<br></td>