<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;algorithm&gt;<br>#include &lt;bitset&gt;<br>#include &lt;cassert&gt;<br>#include &lt;cctype&gt;<br>#include &lt;climits&gt;<br>#include &lt;cmath&gt;<br>#include &lt;complex&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cstring&gt;<br>#include &lt;ctime&gt;<br>#include &lt;deque&gt;<br>#include &lt;fstream&gt;<br>#include &lt;functional&gt;<br>#include &lt;iomanip&gt;<br>#include &lt;iostream&gt;<br>#include &lt;limits&gt;<br>#include &lt;list&gt;<br>#include &lt;map&gt;<br>#include &lt;numeric&gt;<br>#include &lt;queue&gt;<br>#include &lt;set&gt;<br>#include &lt;sstream&gt;<br>#include &lt;stack&gt;<br>#include &lt;string&gt;<br>#include &lt;utility&gt;<br>#include &lt;vector&gt;<br>using namespace std;<br> <br>const int MAXN = 5005;<br> <br>int N, D;<br>double aprob [MAXN], bprob [MAXN], temp [MAXN];<br> <br>inline void iter (double *prob)<br>{<br>    for (int i = 1; i &lt;= N; i++)<br>        temp [i] = 0;<br>    <br>    double sum = 0;<br>    <br>    for (int i = 1; i &lt;= N; i++)<br>    {<br>        temp [i] += sum;<br>        sum += prob [i];<br>        <br>        if (i &gt; D)<br>            sum -= prob [i - D];<br>    }<br>    <br>    sum = 0;<br>    <br>    for (int i = N - D + 1; i &lt; N; i++)<br>        sum += prob [i];<br>    <br>    for (int i = N - 1; i &gt;= N - D + 1; i--)<br>    {<br>        temp [i] += sum;<br>        sum -= prob [2 * N - i - D];<br>    }<br>    <br>    double mult = 1.0 / D;<br>    <br>    for (int i = 1; i &lt;= N; i++)<br>        prob [i] = temp [i] * mult;<br>}<br> <br>struct BouncingDiceGame<br>{<br>    double winProbability (int n, int d, int x, int y)<br>    {<br>        N = n;<br>        D = d;<br>        <br>        for (int i = 1; i &lt;= N; i++)<br>            aprob [i] = bprob [i] = 0;<br>        <br>        aprob [x] = bprob [y] = 1;<br>        <br>        double total = 0, bsum = 1;<br>        <br>        for (int i = 0; i &lt; N + 10; i++)<br>        {<br>            iter (aprob);<br>            total += aprob [N] * bsum;<br>            iter (bprob);<br>            bsum -= bprob [N];<br>        }<br>        <br>        if (D == 1)<br>            return total;<br>        <br>        double A = accumulate (aprob + 1, aprob + N, 0.0), B = accumulate (bprob + 1, bprob + N, 0.0);<br>        return total + (A * B / D) / (1 - (1 - 1.0 / D) * (1 - 1.0 / D));<br>    }<br>};<br> <br> <br>//Powered by [KawigiEdit] 2.0!<br></td>