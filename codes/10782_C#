<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections;<br>using System.Collections.Generic;<br>using System.Collections.Specialized;<br>using System.Text;<br>using System.Text.RegularExpressions;<br> <br>public class TimeTravellingTour<br>{<br>    public long determineCost(int n, int[] cities, string[] roads)<br>    {<br>        long[,] distance = new long[n, n];<br>        for (int i = 0; i &lt; n; ++i)<br>            for (int j = 0; j &lt; n; ++j)<br>                distance[i, j] = (i == j) ? 0 : Int64.MaxValue / 4;<br>        StringBuilder b = new StringBuilder();<br>        foreach (string s in roads)<br>            b.Append(s);<br>        int[] z = Array.ConvertAll&lt;string, int&gt;(b.ToString().Split(' ', ','), int.Parse);<br>        for (int i = 0; i &lt; z.Length; i += 3)<br>        {<br>            distance[z[i], z[i + 1]] = Math.Min(distance[z[i], z[i + 1]], z[i + 2]);<br>            distance[z[i + 1], z[i]] = Math.Min(distance[z[i + 1], z[i]], z[i + 2]);<br>        }<br>        for (int k = 0; k &lt; n; ++k)<br>            for (int i = 0; i &lt; n; ++i)<br>                for (int j = 0; j &lt; n; ++j)<br>                    distance[i, j] = Math.Min(distance[i, j], distance[i, k] + distance[k, j]);<br>        int m = cities.Length;<br>        for (int k = 0; k &lt; m; ++k)<br>            if (distance[0, cities[k]] &gt;= Int64.MaxValue / 4)<br>                return -1;<br>        long[,,] h = new long[m, m, n];<br>        for (int s = m - 1; s &gt;= 0; --s)<br>            for (int t = s; t &lt; m; ++t)<br>            {<br>                for (int i = 0; i &lt; n; ++i)<br>                    if (distance[0, i] &lt; Int64.MaxValue / 4)<br>                    {<br>                        h[s, t, i] = (s == t) ? distance[i, cities[s]] : distance[i, cities[s]] + h[s + 1, t, cities[s]];<br>                        for (int j = s + 1; j &lt;= t; ++j)<br>                            h[s, t, i] = Math.Min(h[s, t, i], h[s, j - 1, i] + h[j, t, i]);<br>                    }<br>                bool[] used = new bool[n];<br>                for (int i = 0; i &lt; n; ++i)<br>                    used[i] = (distance[0, i] &gt;= Int64.MaxValue / 4);<br>                for ( ; ; )<br>                {<br>                    int ph = -1;<br>                    for (int i = 0; i &lt; n; ++i)<br>                        if (!used[i] &amp;&amp; (ph &lt; 0 || h[s, t, i] &lt; h[s, t, ph]))<br>                            ph = i;<br>                    if (ph &lt; 0)<br>                        break;<br>                    used[ph] = true;<br>                    for (int i = 0; i &lt; n; ++i)<br>                        if (!used[i] &amp;&amp; distance[ph, i] &lt; Int64.MaxValue / 4)<br>                            h[s, t, i] = Math.Min(h[s, t, i], h[s, t, ph] + distance[ph, i]);<br>                }<br>            }<br>        return h[0, m - 1, 0];<br>    }<br>}<br></td>