<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;vector&gt;<br>#include &lt;list&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;deque&gt;<br>#include &lt;stack&gt;<br>#include &lt;bitset&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;functional&gt;<br>#include &lt;numeric&gt;<br>#include &lt;utility&gt;<br>#include &lt;sstream&gt;<br>#include &lt;iostream&gt;<br>#include &lt;iomanip&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;ctime&gt;<br>#include &lt;queue&gt;<br> <br>using namespace std;<br> <br>#define Rep(i,n) for(int i=0;i&lt;(n);++i)<br>#define For(i,a,b) for(int i=(a);i&lt;=(b);++i)<br>#define Ford(i,a,b) for(int i=(a);i&gt;=(b);--i)<br>#define fi first<br>#define se second<br>#define pb push_back<br>#define MP make_pair<br> <br>typedef pair&lt;int,int&gt; PII;<br>typedef vector&lt;int&gt; VI;<br> <br>class TimeTravellingTour {<br>public:<br>  long long determineCost(int, vector &lt;int&gt;, vector &lt;string&gt;);<br>};<br> <br>int ds[55];<br>int nd;<br>long long d[55][55];<br>long long inf;<br>int n;<br>long long F[55][55][55];<br> <br>long long solve(int i, int j, int k) {<br>  if(i == j) return d[ds[i]][k];<br>  long long &amp;ret = F[i][j][k];<br>  if(ret != -1) return ret;<br>  ret = inf;<br>  For(t,i,j-1) Rep(x,n) {<br>    // k -&gt; x -&gt; (i,t) (t+1,j)<br>    ret = min( ret, solve( i, t, x) + solve( t+1, j, x) + d[k][x]);<br>  }<br>  return ret;<br>}<br> <br>long long TimeTravellingTour::determineCost(int N, vector &lt;int&gt; cities, vector &lt;string&gt; roads) {<br>  memset(&amp;inf,0x1f,sizeof(inf));<br>  memset(d,0x1f,sizeof(d));<br>  {<br>    string s = "";<br>    Rep(i,roads.size()) s = s + roads[i];<br>    istringstream iss(s);<br>    while(iss &gt;&gt; s) {<br>      int u, v, c;<br>      sscanf(s.c_str(),"%d,%d,%d", &amp;u, &amp;v, &amp;c);<br>      d[u][v] = min(d[u][v], (long long)c);<br>      d[v][u] = min(d[v][u], (long long)c);<br>    }<br>  }<br>  n = N;<br>  Rep(i,n) d[i][i] = 0;<br>  Rep(k,n)Rep(i,n)Rep(j,n) d[i][j] = min( d[i][j], d[i][k] + d[k][j]);<br>  nd = cities.size();<br>  Rep(i,nd) ds[i] = cities[i];<br>  <br>  memset(F,-1,sizeof(F));<br>  long long res = solve( 0, nd-1, 0);<br>  if(res == inf) return -1;<br>  return res;<br>}<br> <br> <br>//Powered by [KawigiEdit] 2.0!<br></td>