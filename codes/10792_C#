<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections;<br>using System.Collections.Generic;<br>using System.Collections.Specialized;<br>using System.Text;<br>using System.Text.RegularExpressions;<br> <br>public class GreenWarfare<br>{<br>  public int minimumEnergyCost(int[] canonX, int[] canonY, int[] baseX, int[] baseY, int[] plantX, int[] plantY, int energySupplyRadius)<br>  {<br>        int oo = 1 &lt;&lt; 29;<br>        int nCanon = canonX.Length;<br>        int nBase = baseX.Length;<br>        int[] base_cost = new int[nBase];<br>        int nPlant = plantX.Length;<br>        int[] plant_cost = new int[nPlant];<br>        for (int i = 0; i &lt; nBase; ++i)<br>        {<br>            base_cost[i] = oo;<br>            for (int j = 0; j &lt; nCanon; ++j)<br>                base_cost[i] = Math.Min(base_cost[i], (baseX[i] - canonX[j]) * (baseX[i] - canonX[j]) + (baseY[i] - canonY[j]) * (baseY[i] - canonY[j]));<br>        }<br>        for (int i = 0; i &lt; nPlant; ++i)<br>        {<br>            plant_cost[i] = oo;<br>            for (int j = 0; j &lt; nCanon; ++j)<br>                plant_cost[i] = Math.Min(plant_cost[i], (plantX[i] - canonX[j]) * (plantX[i] - canonX[j]) + (plantY[i] - canonY[j]) * (plantY[i] - canonY[j]));<br>        }<br>        int nodes = nBase + nPlant + 2;<br>        int source = nBase + nPlant;<br>        int sink = nBase + nPlant + 1;<br>        int[,] capacity = new int[nodes, nodes];<br>        int[,] flow = new int[nodes, nodes];<br>        for (int i = 0; i &lt; nBase; ++i)<br>        {<br>            capacity[source, i] += base_cost[i];<br>        }<br>        for (int i = 0; i &lt; nPlant; ++i)<br>        {<br>            capacity[nBase + i, sink] += plant_cost[i];<br>        }<br>        for (int i = 0; i &lt; nBase; ++i)<br>            for (int j = 0; j &lt; nPlant; ++j)<br>                if (energySupplyRadius * energySupplyRadius &gt;= (baseX[i] - plantX[j]) * (baseX[i] - plantX[j]) + (baseY[i] - plantY[j]) * (baseY[i] - plantY[j]))<br>                {<br>                    capacity[i, j + nBase] += oo;<br>                }<br>        int results = 0;<br>        while (true)<br>        {<br>            bool[] visited = new bool[nodes];<br>            int e = DFS(nodes, source, sink, visited, capacity, flow, source, oo);<br>            if (e == 0)<br>                break;<br>            results += e;<br>        }<br>        return results;<br>  }<br> <br>    int DFS(int nodes, int source, int sink, bool[] visited, int[,] capacity, int[,] flow, int p, int exp)<br>    {<br>        if (p == sink)<br>            return exp;<br>        visited[p] = true;<br>        for (int i = 0; i &lt; nodes; ++i)<br>            if (flow[p, i] &lt; capacity[p, i] &amp;&amp; !visited[i])<br>            {<br>                int e = DFS(nodes, source, sink, visited, capacity, flow, i, Math.Min(exp, capacity[p, i] - flow[p, i]));<br>                if (e &gt; 0)<br>                {<br>                    flow[p, i] += e;<br>                    flow[i, p] -= e;<br>                    return e;<br>                }<br>            }<br>        return 0;<br>    }<br>}<br></td>