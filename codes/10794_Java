<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>import java.math.*;<br> <br>public class DistanceOnCube {<br>  public int calculate(int S, int x1, int y1, int z1, int x2, int y2, int z2) {<br>    int[][][] d = new int[S + 1][S + 1][S + 1];<br>    for (int[][] a : d) {<br>      for (int[] b : a) {<br>        Arrays.fill(b, Integer.MAX_VALUE);<br>      }<br>    }<br>    d[x1][y1][z1] = 0;<br>    LinkedList&lt;Integer&gt; q = new LinkedList&lt;Integer&gt;();<br>    q.add(x1);<br>    q.add(y1);<br>    q.add(z1);<br>    while (!q.isEmpty()) {<br>      int x = q.poll();<br>      int y = q.poll();<br>      int z = q.poll();<br>      for (int dx = -1; dx &lt;= 1; ++dx) {<br>        for (int dy = -1; dy &lt;= 1; ++dy) {<br>          for (int dz = -1; dz &lt;= 1; ++dz) {<br>            int c = 0;<br>            c += dx != 0 ? 1 : 0;<br>            c += dy != 0 ? 1 : 0;<br>            c += dz != 0 ? 1 : 0;<br>            if (c == 1) {<br>              int nx = x + dx;<br>              int ny = y + dy;<br>              int nz = z + dz;<br>              if (valid(nx, ny, nz, S)) {<br>                if (d[nx][ny][nz] &gt; d[x][y][z] + 1) {<br>                  d[nx][ny][nz] = d[x][y][z] + 1;<br>                  q.add(nx);<br>                  q.add(ny);<br>                  q.add(nz);<br>                }<br>              }<br>            }<br>          }<br>        }<br>      }<br>    }<br>    return d[x2][y2][z2];<br>  }<br> <br>  private boolean valid(int x, int y, int z, int S) {<br>    boolean ok = true;<br>    ok &amp;= x &gt;= 0 &amp;&amp; x &lt;= S;<br>    ok &amp;= y &gt;= 0 &amp;&amp; y &lt;= S;<br>    ok &amp;= z &gt;= 0 &amp;&amp; z &lt;= S;<br>    ok &amp;= x == 0 || x == S || y == 0 || y == S || z == 0 || z == S;<br>    return ok;<br>  }<br> <br> <br>}<br>// Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!<br></td>