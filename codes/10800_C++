<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;stdio.h&gt;<br>#include &lt;iostream&gt;<br>#include &lt;memory.h&gt;<br>#include &lt;assert.h&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;functional&gt;<br>#include &lt;vector&gt;<br>#include &lt;string&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;deque&gt;<br>#include &lt;math.h&gt;<br><br>#define fo(a,b,c) for( a = ( b ); a &lt; ( c ); ++ a )<br>#define fr(a,b) fo( a, 0, ( b ) )<br>#define fi(a) fr( i, ( a ) )<br>#define fj(a) fr( j, ( a ) )<br>#define fk(a) fr( k, ( a ) )<br>#define mp make_pair<br>#define pb push_back<br>#define all(v) (v).begin( ), (v).end( )<br>#define _(a,b) memset( a, b, sizeof( a ) )<br>using namespace std;<br><br>int n;<br>vector&lt; string &gt; f, t;<br>long long d[15][15][17000];<br>bool atLeastOne[20][20005];<br>const long long mod = 1000000007;<br><br>class GameWithGraphAndTree {<br>public:<br>  void dfs( int id, int fr )<br>  {<br>    _( d[id], 0 );<br>    <br>    int i, j; fi( n ) { atLeastOne[id][1 &lt;&lt; i] = true; d[id][i][1 &lt;&lt; i] = 1; }<br>    fi( n ) if( i != fr )<br>    {<br>      if( t[id][i] == 'Y' )<br>      {<br>        dfs( i, id );<br>        for( j = ( 1 &lt;&lt; n ) - 1; j &gt;= 0; -- j ) if( atLeastOne[id][j] )<br>        {<br>          int mask = ( (~j) &amp; ( ( 1 &lt;&lt; n ) - 1 ) );<br>          for( int k = mask; ; ( -- k ) &amp;= mask ) <br>          {<br>            if( atLeastOne[i][k] )<br>            {<br>              int v1, v2;<br>              fr( v1, n ) if( j &amp; ( 1 &lt;&lt; v1 ) )<br>              fr( v2, n ) if( k &amp; ( 1 &lt;&lt; v2 ) )<br>              if( f[v1][v2] == 'Y' )<br>              {<br>                atLeastOne[id][j | k] = true;<br>                ( d[id][v1][j | k] += d[id][v1][j] * d[i][v2][k] ) %= mod;<br>              }<br>            }<br>            if( !k ) break;<br>          }<br>          atLeastOne[id][j] = false;<br>        }<br>      }<br>    }<br>  }<br>  int calc(vector &lt;string&gt; graph, vector &lt;string&gt; tree) {<br>    f = graph; t = tree; n = f.size( );<br>    dfs( 0, -1 );<br>    long long ans = 0;<br>    int i;<br>    fi( n ) ( ans += d[0][i][( 1 &lt;&lt; n ) - 1] ) %= mod;<br>    return ans;<br>  }<br>  <br><br>};<br><br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003]<br>// Powered by CodeProcessor<br></td>