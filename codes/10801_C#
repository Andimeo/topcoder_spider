<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections;<br>using System.Collections.Generic;<br>using System.Collections.Specialized;<br>using System.Text;<br>using System.Text.RegularExpressions;<br> <br> <br>public class AmoebaCode<br>{<br>    private string G;<br>    private Dictionary&lt;string, bool&gt; visited;<br>    private int GK;<br>    bool go(string last,int h)<br>    {<br>        if (h==G.Length)<br>        {<br>            return true;<br>        }<br>        string hash = last + " " + h;<br>        if (visited.ContainsKey(hash))<br>        {<br>            return visited[hash];<br>        }<br>        string next = last.Substring(1);<br>        bool ret = false;<br>        if (G[h]=='0')<br>        {<br>            for (int i = 1; (i &lt; GK+1)&amp;&amp;!ret; i++)<br>            {<br>                char ch = (char) (i + '0');<br>                bool flag = true;<br>                foreach (char c in next)<br>                {<br>                    if (c==ch)<br>                    {<br>                        flag = false;<br>                        break;<br>                    }<br>                }<br>                if (flag)<br>                {<br>                    if(go(next + ch, h + 1))<br>                    {<br>                        ret = true;<br> <br>                    }<br>                }<br>            }<br>        }<br>        else<br>        {<br>            char ch = G[h];<br>            bool flag = true;<br>            foreach (char c in next)<br>            {<br>                if (c == ch)<br>                {<br>                    flag = false;<br>                    break;<br>                }<br>            }<br>            if (flag)<br>            {<br>                if (go(next + ch, h + 1))<br>                {<br>                    ret = true;<br> <br>                }<br>            }<br>            <br>        }<br>        visited[hash] = ret;<br>        return ret;<br> <br>    }<br>  public int find(string code, int K)<br>  {<br>      G = code;<br>      GK = K;<br>      int res = 1;<br>        visited = new Dictionary&lt;string, bool&gt;();<br>      for (int i = 2; i &lt; K+1; i++)<br>      {<br>          char ch = 'a';<br>            visited.Clear();<br>          string cur = "";<br>          for (int j = 0; j &lt; i; j++)<br>          {<br>              cur += ch;<br>          }<br>          if (go(cur,0))<br>          {<br>              res = i;<br>          }<br>          else<br>          {<br>              break;<br>          }<br>      }<br>      return res;<br>    <br>  }<br> <br> <br>}<br>//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!<br></td>