<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br><br>public class AmoebaCode {<br>    public int find(String code, int K) {<br>        int res;<br>        for (res = 1; res &lt;= K; ++res)<br>            if (!possible(code, K, res))<br>                break;<br>        return res - 1;<br>    }<br><br>    int k;<br>    int block;<br>    int[] pow;<br>    int[] blockCode;<br>    int[] blockByCode;<br>    boolean[] startByCode;<br><br>    private boolean possible(String code, int k, int block) {<br>        this.k = k;<br>        this.block = block;<br>        pow = new int[block + 1];<br>        pow[0] = 1;<br>        for (int i = 1; i &lt;= block; ++i) pow[i] = k * pow[i - 1];<br>        blockCode = new int[pow[block]];<br>        blockByCode = new int[pow[block] + 1];<br>        startByCode = new boolean[pow[block] + 1];<br>        boolean[] had = new boolean[k];<br>        int lastCode = 0;<br>        for (int set = 0; set &lt; pow[block]; ++set) {<br>            Arrays.fill(had, false);<br>            int tmp = set;<br>            boolean ok = true;<br>            boolean canStart = true;<br>            for (int i = 0; i &lt; block; ++i) {<br>                int cur = tmp % k;<br>                tmp /= k;<br>                if (had[cur]) {<br>                    ok = false;<br>                    break;<br>                }<br>                had[cur] = true;<br>                if (code.charAt(i) != '0' &amp;&amp; code.charAt(i) != ('1' + cur)) {<br>                    canStart = false;<br>                }<br>            }<br>            if (ok) {<br>                blockCode[set] = ++lastCode;<br>                blockByCode[lastCode] = set;<br>                startByCode[lastCode] = canStart;<br>            }<br>        }<br>        int numCodes = lastCode + 1;<br>        boolean[][] can = new boolean[code.length() + 1][numCodes];<br>        for (int i = 1; i &lt; numCodes; ++i)<br>            can[block][i] = startByCode[i];<br>        for (int pos = block; pos &lt; code.length(); ++pos) {<br>            char ch = code.charAt(pos);<br>            for (int old = 1; old &lt; numCodes; ++old)<br>                if (can[pos][old]) {<br>                    int set = blockByCode[old];<br>                    for (int dig = 0; dig &lt; k; ++dig) {<br>                        if (ch == '0' || ch == ('1' + dig)) {<br>                            int nxt = blockCode[set / k + dig * pow[block - 1]];<br>                            if (nxt &gt; 0) {<br>                                can[pos + 1][nxt] = true;<br>                            }<br>                        }<br>                    }<br>                }<br>        }<br>        for (boolean x : can[code.length()])<br>            if (x) return true;<br>        return false;<br>    }<br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by RETester [based on ExampleBuilder]<br>// Powered by CodeProcessor<br></td>