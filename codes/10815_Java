<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>public class SequencePermutation {<br><br>  int MOD = 1000000009;<br><br>  int N, M;<br>  long[][] dp;<br><br>  void add(int i, int j, long val) {<br>    dp[i][j] = (dp[i][j] + val + MOD)%MOD;<br>  }<br>  <br>  void add(int i, int j, int fi, int fj) {<br>    long val = dp[fi][fj];<br>    print("old", i, j, fi, fj, val);<br>//    add(i, j, val);<br>  }<br><br>  public int determineConfigurations(int N, int M) {<br>    this.N = N;<br>    this.M = M;<br>    dp = new long[N+1][M+1];<br>    <br>    for (int m=0; m&lt;=M; ++m) {<br>      dp[2][m] = 1;<br>    }<br>    for (int n=3; n&lt;=N; ++n) {<br>      dp[n][0] = 1;<br>      long[] part = new long[M+2];<br>      for (int i=1; i&lt;=M+1; ++i) {<br>        part[i] = (part[i-1]+dp[n-1][i-1])%MOD;<br>      }<br>      for (int m=1; m&lt;=M; ++m) {<br>        int to = m;<br>        int from = Math.max(0, m-n+1);<br>//        print("now: ", from, to);<br>        add(n, m, part[to+1] - part[from]);<br>/*        for (int p=0; p&lt;n; ++p) {<br>          int d = p;<br>          int rem = m - d;<br>          if (rem &lt; 0) break;<br>          add(n, m, n-1, m-d);<br>        } */<br>      }<br>    }<br>    <br>    return (int)dp[N][M];<br>  }<br><br>  void print(Object... o) {<br>    System.out.println(Arrays.deepToString(o));<br>  }<br>}<br><br><br>// Powered by FileEdit<br></td>