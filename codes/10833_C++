<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;algorithm&gt;<br>#include &lt;bitset&gt;<br>#include &lt;cassert&gt;<br>#include &lt;cctype&gt;<br>#include &lt;climits&gt;<br>#include &lt;cmath&gt;<br>#include &lt;complex&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cstring&gt;<br>#include &lt;ctime&gt;<br>#include &lt;deque&gt;<br>#include &lt;fstream&gt;<br>#include &lt;functional&gt;<br>#include &lt;iomanip&gt;<br>#include &lt;iostream&gt;<br>#include &lt;limits&gt;<br>#include &lt;list&gt;<br>#include &lt;map&gt;<br>#include &lt;numeric&gt;<br>#include &lt;queue&gt;<br>#include &lt;set&gt;<br>#include &lt;sstream&gt;<br>#include &lt;stack&gt;<br>#include &lt;string&gt;<br>#include &lt;utility&gt;<br>#include &lt;vector&gt;<br>using namespace std;<br> <br>const int MAXH = 132000;<br> <br>pair &lt;long long, vector &lt;int&gt; &gt; psum [MAXH], qsum [MAXH];<br> <br>struct TheLuckyNumbersLevelTwo<br>{<br>    vector &lt;int&gt; find (vector &lt;int&gt; numbers)<br>    {<br>        vector &lt;long long&gt; all;<br> <br>        for (int len = 1; len &lt;= 11; len++)<br>        {<br>            long long four = 0, seven = 0;<br> <br>            for (int i = 0; i &lt; len; i++)<br>            {<br>                four = four * 10 + 4;<br>                seven = seven * 10 + 7;<br>            }<br> <br>            all.push_back (four);<br>            all.push_back (seven);<br>        }<br> <br>        int n = numbers.size ();<br>        int p = n / 2, q = n - p;<br>        int pp = 1 &lt;&lt; p, qq = 1 &lt;&lt; q;<br> <br>        for (int m = 0; m &lt; pp; m++)<br>        {<br>            for (int i = 0; i &lt; p; i++)<br>                if (m &amp; 1 &lt;&lt; i)<br>                {<br>                    psum [m].first += numbers [i];<br>                    psum [m].second.push_back (numbers [i]);<br>                }<br> <br>            sort (psum [m].second.begin (), psum [m].second.end ());<br>        }<br> <br>        for (int m = 0; m &lt; qq; m++)<br>        {<br>            for (int i = 0; i &lt; q; i++)<br>                if (m &amp; 1 &lt;&lt; i)<br>                {<br>                    qsum [m].first += numbers [i + p];<br>                    qsum [m].second.push_back (numbers [i + p]);<br>                }<br> <br>            sort (qsum [m].second.begin (), qsum [m].second.end ());<br>        }<br> <br>        sort (psum, psum + pp);<br>        sort (qsum, qsum + qq);<br>        vector &lt;int&gt; best;<br> <br>        sort (all.rbegin (), all.rend ());<br> <br>        for (int j = 0; j &lt; (int) all.size (); j++)<br>        {<br>            for (int i = 0; i &lt; pp; i++)<br>            {<br>                int pos = lower_bound (qsum, qsum + qq, make_pair (all [j] - psum [i].first, vector &lt;int&gt; ())) - qsum;<br> <br>                if (pos &gt;= 0 &amp;&amp; pos &lt; qq &amp;&amp; psum [i].first + qsum [pos].first == all [j])<br>                {<br>                    vector &lt;int&gt; now = psum [i].second;<br> <br>                    for (int k = 0; k &lt; (int) qsum [pos].second.size (); k++)<br>                        now.push_back (qsum [pos].second [k]);<br> <br>                    sort (now.begin (), now.end ());<br> <br>                    if (best.empty () || now &lt; best)<br>                        best = now;<br>                }<br>            }<br> <br>            if (!best.empty ())<br>                break;<br>        }<br> <br>        return best;<br>    }<br>};<br> <br> <br> <br>// Powered by FileEdit<br>// Powered by moj 4.13 [modified TZTester]<br>// Powered by CodeProcessor<br></td>