<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>import java.math.*;<br> <br>public class TheLuckyNumbersLevelTwo {<br>  class State implements Comparable&lt;State&gt; {<br>    long val;<br>    long mask;<br> <br>    public State(long val, long mask) {<br>      this.val = val;<br>      this.mask = mask;<br>    }<br> <br>    public int compareTo(State other) {<br>      return Long.signum(val - other.val);<br>    }<br> <br>    public boolean equals(Object ob) {<br>      State other = (State) ob;<br>      return val == other.val;<br>    }<br>  }<br> <br>  public int[] find(int[] a) {<br>    Arrays.sort(a);<br>    long allSum = 0;<br>    for (int x : a) {<br>      allSum += x;<br>    }<br>    long[] lucky = getLucky(allSum);<br>    int n = a.length;<br>    int n1 = a.length / 2;<br>    int n2 = n - n1;<br>    State[] sum1 = new State[1 &lt;&lt; n1];<br>    for (int i = 0; i &lt; (1 &lt;&lt; n1); ++i) {<br>      long sum = 0;<br>      for (int j = 0; j &lt; n1; ++j) {<br>        if (((i &gt;&gt; j) &amp; 1) != 0) {<br>          sum += a[j];<br>        }<br>      }<br>      sum1[i] = new State(sum, i);<br>    }<br>    Arrays.sort(sum1);<br>    sum1 = removeBad(sum1, a, n1);<br>    State res = new State(-1, 0);<br>    for (int i = 0; i &lt; (1 &lt;&lt; n2); ++i) {<br>      long sum = 0;<br>      for (int j = 0; j &lt; n2; ++j) {<br>        if (((i &gt;&gt; j) &amp; 1) != 0) {<br>          sum += a[n1 + j];<br>        }<br>      }<br>      for (long curLucky : lucky) {<br>        if (curLucky &lt; res.val) {<br>          continue;<br>        }<br>        long rem = curLucky - sum;<br>        if (rem &gt;= 0) {<br>          int at = Arrays.binarySearch(sum1, new State(rem, 0));<br>          if (at &gt;= 0) {<br>            State unit = new State(curLucky, sum1[at].mask | (((long) i) &lt;&lt; n1));<br>            if (unit.val &gt; res.val) {<br>              res = unit;<br>            } else if (unit.val == res.val) {<br>              res = getMinimal(res, unit, a, n);<br>            }<br>          }<br>        }<br>      }<br>    }<br>    if (res.val == -1) {<br>      return new int[0];<br>    } else {<br>      List&lt;Integer&gt; tmp = new ArrayList&lt;Integer&gt;();<br>      for (int i = 0; i &lt; n; ++i) {<br>        if (((res.mask &gt;&gt; i) &amp; 1) != 0) {<br>          tmp.add(a[i]);<br>        }<br>      }<br>      int[] ret = new int[tmp.size()];<br>      for (int i = 0; i &lt; tmp.size(); ++i) {<br>        ret[i] = tmp.get(i);<br>      }<br>      return ret;<br>    }<br>  }<br> <br>  private State[] removeBad(State[] sum, int[] a, int n1) {<br>    List&lt;State&gt; good = new ArrayList&lt;State&gt;();<br>    for (int i = 0; i &lt; sum.length; ++i) {<br>      int j = i + 1;<br>      State best = sum[i];<br>      while (j &lt; sum.length &amp;&amp; sum[i].compareTo(sum[j]) == 0) {<br>        best = getMinimal(best, sum[j], a, n1);<br>        ++j;<br>      }<br>      good.add(best);<br>      i = j - 1;<br>    }<br>    return good.toArray(new State[good.size()]);<br>  }<br> <br>  private State getMinimal(State first, State second, int[] a, int n) {<br>    for (int i = 0; i &lt; n; ++i) {<br>      if (((first.mask &gt;&gt; i) &amp; 1) != ((second.mask &gt;&gt; i) &amp; 1)) {<br>        if (((first.mask &gt;&gt; i) &amp; 1) != 0) {<br>          return first;<br>        } else {<br>          return second;<br>        }<br>      }<br>    }<br>    return first;<br>  }<br> <br>  private long[] getLucky(long sum) {<br>    String s = "" + sum;<br>    List&lt;Long&gt; a = new ArrayList&lt;Long&gt;();<br>    long x = 0;<br>    for (int i = 1; i &lt;= s.length(); ++i) {<br>      x = x * 10 + 4;<br>      a.add(x);<br>    }<br>    x = 0;<br>    for (int i = 1; i &lt;= s.length(); ++i) {<br>      x = x * 10 + 7;<br>      a.add(x);<br>    }<br>    Collections.sort(a);<br>    long[] res = new long[a.size()];<br>    for (int i = 0; i &lt; a.size(); ++i) {<br>      res[i] = a.get(i);<br>    }<br>    return res;<br>  }<br> <br> <br>}<br>// Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!<br></td>