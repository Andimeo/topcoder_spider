<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections;<br>using System.Collections.Generic;<br>using System.Collections.Specialized;<br>using System.Text;<br>using System.Text.RegularExpressions;<br> <br>public class KingdomXCitiesandVillagesAnother<br>{<br>    struct coord { <br>        public int x, y;<br> <br>        public coord(int _x, int _y) { x = _x; y = _y; }<br>    };<br> <br>    public double determineLength(int[] cityX, int[] cityY, int[] villageX, int[] villageY)<br>    {<br>        List&lt;coord&gt; cities = new List&lt;coord&gt;();<br>        List&lt;coord&gt; villages = new List&lt;coord&gt;();<br> <br>        int i, j;<br>        for (i = 0; i &lt; cityX.Length; i++)<br>            cities.Add(new coord(cityX[i], cityY[i]));<br>        for (i = 0; i &lt; villageX.Length; i++)<br>            villages.Add(new coord(villageX[i], villageY[i]));<br> <br>        double distance = 0, min, coba;<br>        int index = 0;<br>        while (villages.Count &gt; 0)<br>        {<br>            min = double.MaxValue;<br>            for (i = 0; i &lt; villages.Count; i++)<br>            {<br>                for (j = 0; j &lt; cities.Count; j++)<br>                {<br>                    coba = Math.Sqrt(Math.Pow(cities[j].x - villages[i].x, 2) + Math.Pow(cities[j].y - villages[i].y, 2));<br>                    if (coba &lt; min)<br>                    {<br>                        min = coba;<br>                        index = i;<br>                    }<br>                }<br>            }<br> <br>            cities.Add(new coord(villages[index].x, villages[index].y));<br>            villages.RemoveAt(index);<br>            distance += min;<br>        }<br>        return distance;<br>    }<br> <br> <br>}<br>//Powered by [KawigiEdit] 2.0!<br></td>