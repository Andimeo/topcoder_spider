<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;iostream&gt;<br>#include &lt;sstream&gt;<br>#include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;deque&gt;<br>#include &lt;queue&gt;<br>#include &lt;set&gt;<br>#include &lt;map&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;functional&gt;<br>#include &lt;utility&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;ctime&gt;<br><br>using namespace std;<br><br>#define REP(i,n) for((i)=0;(i)&lt;(int)(n);(i)++)<br><br>int N,M;<br>int graph[50][50];<br>int deg[50],deg2[50][60];<br>bool used[50][50],used2[50];<br>int ans[1000];<br><br>class LexSmallestTour{<br>  public:<br>  <br>  void dfs(int x){<br>    int i;<br>    <br>    if(used2[x]) return;<br>    used2[x] = true;<br>    <br>    REP(i,N) if(graph[x][i] != -1){<br>      used[x][i] = true;<br>      dfs(i);<br>    }<br>  }<br>  <br>  bool check(int x, int e){<br>    int i,j;<br>    <br>    REP(i,N) deg[i] = 0;<br>    REP(i,N) REP(j,N) if(graph[i][j] != -1) deg[i]++;<br>    REP(i,N) REP(j,52) deg2[i][j] = 0;<br>    REP(i,N) REP(j,N) if(graph[i][j] != -1) deg2[i][graph[i][j]]++;<br>    <br>    if(e == -1) REP(i,N) if(deg[i] % 2 == 1) return false;<br>    <br>    deg[x]++;<br>    if(e != -1) deg2[x][e]++;<br>    REP(i,N) REP(j,52) if(deg2[i][j] * 2 &gt;= deg[i] + 2) return false;<br>    <br>    REP(i,N) REP(j,N) used[i][j] = false;<br>    REP(i,N) used2[i] = false;<br>    dfs(x);<br>    REP(i,N) REP(j,N) if(!used[i][j] &amp;&amp; graph[i][j] != -1) return false;<br>    <br>    return true;<br>  }<br>  <br>  void calc(void){<br>    int iter,y;<br>    <br>    int x = 0, e = -1;<br>    ans[0] = 0;<br>    <br>    REP(iter,M){<br>      REP(y,N) if(graph[x][y] != -1 &amp;&amp; graph[x][y] != e){<br>        int e2 = graph[x][y];<br>        graph[x][y] = graph[y][x] = -1;<br>        if(check(y,e2)){<br>          ans[iter+1] = y; x = y; e = e2;<br>          break;<br>        } else {<br>          graph[x][y] = graph[y][x] = e2;<br>        }<br>      }<br>    }<br>  }<br><br>  vector &lt;int&gt; determineTour(vector &lt;string&gt; roads, vector &lt;int&gt; queries){<br>    int i,j;<br>    <br>    N = roads.size();<br>    REP(i,N) REP(j,N){<br>      graph[i][j] = -1;<br>      char ch = roads[i][j];<br>      if(ch &gt;= 'A' &amp;&amp; ch &lt;= 'Z') graph[i][j] = ch - 'A';<br>      if(ch &gt;= 'a' &amp;&amp; ch &lt;= 'z') graph[i][j] = ch - 'a' + 26;<br>      if(i &lt; j &amp;&amp; graph[i][j] != -1) M++;<br>    }<br>    <br>    vector &lt;int&gt; empty;<br>    if(!check(0,-1)) return empty;<br>    <br>    calc();<br>    <br>    vector &lt;int&gt; v;<br>    REP(i,queries.size()) v.push_back(ans[queries[i]]);<br>    return v;<br>  }<br><br>};<br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003]<br>// Powered by CodeProcessor<br></td>