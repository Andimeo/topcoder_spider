<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>import static java.lang.Math.*;<br>import static java.util.Arrays.*;<br><br>public class LexSmallestTour {<br>  <br>  public int[] determineTour(String[] roads, int[] queries) {<br>    int n = roads.length;<br>    char[][] cs = new char[n][];<br>    for (int i = 0; i &lt; n; i++) cs[i] = roads[i].toCharArray();<br>    int m = 0;<br>    for (int i = 0; i &lt; n; i++) for (int j = 0; j &lt; i; j++) if (cs[i][j] != '.') m++;<br>    int[] res = new int[m + 1];<br>    int p = 0;<br>    char last = 0;<br>    for (int i = 1; i &lt;= m; i++) {<br>      boolean ok = false;<br>      for (int j = 0; j &lt; n; j++) if (cs[p][j] != '.' &amp;&amp; cs[p][j] != last) {<br>        char c = cs[p][j];<br>        cs[p][j] = '.';<br>        cs[j][p] = '.';<br>        if (can(cs, j, c)) {<br>          res[i] = j;<br>          p = j;<br>          last = c;<br>          ok = true;<br>          break;<br>        } else {<br>          cs[p][j] = c;<br>          cs[j][p] = c;<br>        }<br>      }<br>      if (!ok) return new int[0];<br>      debug(i);<br>    }<br>    debug(res);<br>    int[] r = new int[queries.length];<br>    for (int i = 0; i &lt; r.length; i++) r[i] = res[queries[i]];<br>    return r;<br>  }<br>  <br>  boolean can(char[][] cs, int p, char last) {<br>    int n = cs.length;<br>    boolean[][] g = new boolean[n][n];<br>    for (int i = 0; i &lt; n; i++) for (int j = 0; j &lt; n; j++) g[i][j] = cs[i][j] != '.';<br>    boolean[] used = new boolean[n];<br>    used[0] = true;<br>    int[] que = new int[n];<br>    int qs = 0, qt = 1;<br>    while (qt &gt; qs) {<br>      int v = que[qs++];<br>      for (int i = 0; i &lt; n; i++) if (g[v][i] &amp;&amp; !used[i]) {<br>        used[i] = true;<br>        que[qt++] = i;<br>      }<br>    }<br>    for (int i = 0; i &lt; n; i++) {<br>      int deg = 0;<br>      for (int j = 0; j &lt; n; j++) if (cs[i][j] != '.') deg++;<br>      if (i == 0) deg++;<br>      if (i == p) deg++;<br>      if (deg % 2 != 0) return false;<br>      int[] num = new int[128];<br>      for (int j = 0; j &lt; n; j++) if (cs[i][j] != '.') num[cs[i][j]]++;<br>      int max = 0;<br>      for (int j = 0; j &lt; 128; j++) if (max &lt; num[j]) max = num[j];<br>      if (max * 2 &gt; deg) return false;<br>      if (deg &gt; 0 &amp;&amp; !used[i]) return false;<br>    }<br>    return true;<br>  }<br>  <br>  void debug(Object...os) {<br>    System.err.println(deepToString(os));<br>  }<br>  <br>}<br></td>