<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;algorithm&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cstring&gt;<br>#include &lt;iostream&gt;<br>#include &lt;set&gt;<br>#include &lt;string&gt;<br>#include &lt;vector&gt;<br>using namespace std;<br> <br>#define ALL(CONT) (CONT).begin(), (CONT).end()<br>#define FORE(I, L, R) for (typeof((L)) I = (L), TMP_##I = (R); I != TMP_##I; ++I)<br>#define FOREACH(I, C) FORE(I, (C).begin(), (C).end())<br>#define FOR(I, L, R) for (typeof((L)) I = (L), TMP_##I = (R); I &lt; TMP_##I; ++I)<br>#define FORIND(I, C) FOR(I, 0, (C).size())<br> <br>class NetworkXOneTimePad {<br>public:<br>  int crack(vector &lt;string&gt; plaintexts, vector &lt;string&gt; ciphertexts);<br>};<br> <br>string xoruj(string const&amp;a, string const&amp; b)<br>{<br>  string res;<br>  FORIND(i, a) res += (a[i] == b[i] ? '0' : '1');<br>  return res;<br>}<br> <br>int NetworkXOneTimePad::crack(vector &lt;string&gt; plaintexts, vector &lt;string&gt; ciphertexts)<br>{<br>  int res = 0;<br>  set&lt;string&gt; K;<br>  set&lt;string&gt; pp(ALL(plaintexts));<br>  FOREACH (P, plaintexts) FOREACH (C, ciphertexts) {<br>    K.insert(xoruj(*P, *C));<br>  }<br>  FOREACH(it, K) {<br>    bool ok = true;<br>    FOREACH(C, ciphertexts) {<br>      string p = xoruj(*C, *it);<br>      if (pp.count(p) == 0) ok = false;<br>    }<br>    if (ok) res++;<br>  }<br>  return res;<br>}<br> <br>// Powered by MBMagic 0.12.2<br>// Powered by PopsEdit<br></td>