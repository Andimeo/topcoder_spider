<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;algorithm&gt; <br>#include &lt;string&gt; <br>#include &lt;set&gt; <br>#include &lt;map&gt; <br>#include &lt;vector&gt; <br>#include &lt;queue&gt;  <br>#include &lt;iostream&gt; <br>#include &lt;iterator&gt; <br>#include &lt;math.h&gt; <br>#include &lt;cstdio&gt; <br>#include &lt;cstdlib&gt; <br>#include &lt;sstream&gt; <br><br>#pragma comment(linker, "/STACK:60777216") <br><br>using namespace std; <br><br>typedef pair&lt;int,int&gt; pii; <br>typedef long long ll; <br>typedef vector&lt;int&gt; vi; <br><br>#define UN(v) SORT(v),v.erase(unique(v.begin(),v.end()),v.end()) <br>#define SORT(c) sort((c).begin(),(c).end()) <br>#define FOR(i,a,b) for (int  i=(a); i &lt; (b); i++)  <br>#define REP(i,n) FOR(i,0,n)  <br>#define CL(a,b) memset(a,b,sizeof(a)) <br>#define pb push_back <br><br>const ll inf = 1000000000000000013ll; <br><br>int n,d;<br>string s;<br><br>map&lt;ll,ll&gt; r[55][2];<br>int u[33];<br>int c[33];<br>int now;<br>void prep(vi &amp;v){<br>    now++;<br>    int cc=0;<br>    REP(i,v.size()){<br>        if(u[v[i]]!=now)<br>            u[v[i]]=now,c[v[i]]=cc,cc++;<br>        v[i] = c[v[i]];<br>    }<br>}<br><br>bool good(vi &amp;v){<br>    now++;<br>    int c=0;<br>    REP(i,v.size())<br>        if(u[v[i]]!=now)<br>            u[v[i]]=now,c++;<br>    return c&lt;=d;<br>}<br><br>ll hash(vi &amp;v){<br>    ll x=0;<br>    REP(i,v.size()) x=x*37+(v[i]+1);<br>    return x;<br>}<br><br>ll go(int len,bool coin,vi last){<br>    if(!good(last)) return 0;<br>    if(len==s.size()) return 1;<br>    ll h = hash(last);<br>    if(r[len][coin].count(h)) return r[len][coin][h];<br>    ll val = 0;<br>    vi tt = last;<br>    if(tt.size()==n) tt.erase(tt.begin());<br>    if(coin){<br>        REP(i,26){<br>            if(i&lt;s[len]-'a') continue;<br>            vi nlast = tt;<br>            nlast.pb(i);<br>            if((i!=s[len]-'a'))<br>                prep(nlast);<br>            val+=go(len+1,(i==s[len]-'a'),nlast);<br>            val=min(val,inf);<br>            if(val==inf) break;<br>        }<br>    }else{<br>        REP(i,12){<br>            vi nlast = tt;<br>            nlast.pb(i);        <br>            prep(nlast);<br>            val+=go(len+1,coin&amp;(i==s[len]-'a'),nlast)*(i==11?26-11:1);<br>            val=min(val,inf);<br>            if(val==inf) break;<br>        }<br>    }<br>    return r[len][coin][h]=val;<br>}<br><br>string rr;<br>void go2(int len,bool coin,vi last,ll k){<br>    if(len==s.size()) return;<br>    vi tt = last;<br>    if(tt.size()==n) tt.erase(tt.begin());<br>    if(coin){<br>        REP(i,26){<br>            if(i&lt;s[len]-'a') continue;<br>            vi nlast = tt;<br>            nlast.pb(i);<br>            vi qq= nlast;<br>            if((i!=s[len]-'a'))<br>                prep(nlast);<br>            ll val=go(len+1,(i==s[len]-'a'),nlast);<br>            if(val&gt;=k+1){<br>                rr.pb(char('a'+i));<br>                go2(len+1,(i==s[len]-'a'),qq,k);<br>                break;<br>            }<br>            else{<br>                k-=val;<br>            }<br>        }<br>    }else{<br>        REP(i,26){<br>            vi nlast = tt;<br>            nlast.pb(i);        <br>            vi qq = nlast;<br>            prep(nlast);<br>            ll val=go(len+1,false,nlast);<br>            if(val&gt;=k+1){<br>                rr.pb(char('a'+i));<br>                go2(len+1,false,qq,k);<br>                break;<br>            }else k-=val;<br>        }<br>    }<br>}<br><br>class NextHomogeneousStrings {<br>public:<br> string getNext(int _d, int _n, string seed, long long k) {<br>     d=_d;n=_n;<br>     REP(i,55)REP(j,2)r[i][j].clear();<br>     s=seed;<br>    if(go(0,true,vi(0))&lt;k+1) return "";<br>    rr="";<br>    go2(0,true,vi(0),k);<br>    return rr;<br> }<br> <br><br>};<br><br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003]<br>// Powered by CodeProcessor<br></td>