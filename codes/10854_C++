<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;algorithm&gt;<br>#include &lt;string&gt;<br>#include &lt;cstring&gt;<br>#include &lt;set&gt;<br>#include &lt;map&gt;<br>#include &lt;vector&gt;<br>#include &lt;queue&gt;<br>#include &lt;iostream&gt;<br>#include &lt;iterator&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;sstream&gt;<br><br>using namespace std;<br><br>#define REP(i,n) for (int i=0,_n=(n); i &lt; _n; i++)<br>#define CLEAR(x) memset(x,0,sizeof x);<br>#define CLEARA(x) memset(&amp;x,0,sizeof x);<br>#define FILL(x,v) memset(x,v,sizeof x);<br>#define ALL(c) (c).begin(), (c).end()<br>#define SORT(c) sort(ALL(c))<br>#define pb push_back<br>#define SZ(c) (int)(c).size()<br>typedef long long LL;<br><br>#define MOD 1000000007<br><br>int mem[64][256][256];<br><br>class DrawingBlackCrosses {<br>public:<br>  int n,m;<br>  int rows,cols;<br>  bool a[64][64];<br>  int rec(int step, int rmask, int cmask, int rfree, int cfree)<br>  {<br>    int &amp;res = mem[step][rmask][cmask];<br>    if (res!=-1)<br>      return res;<br>    res = 0;<br>    bool was = false;<br>    REP(i,rows+(rfree&gt;0)) if (!(rmask &amp; (1&lt;&lt;i)))<br>      REP(j,cols+(cfree&gt;0)) if (!(cmask &amp; (1&lt;&lt;j)))<br>      {<br>        if (a[i][j]) continue;<br>        was=true;<br>        LL t = rec(step+1, rows==i ? rmask : rmask | (1&lt;&lt;i), cols==j ? cmask : cmask | (1&lt;&lt;j), rfree - (rows==i), cfree - (cols==j));<br>        if (i==rows) t *= rfree;<br>        if (j==cols) t *= cfree;<br>        res = (res+t)%MOD;<br>      }<br>    if (!was) res=1;<br>    return res;<br>  }<br>  int count(vector &lt;string&gt; field) {<br>    int res;<br>    SORT(field);<br>    reverse(ALL(field));<br>    vector&lt;string&gt; aa;<br>    REP(j,SZ(field[0]))<br>    {<br>      string s = "";<br>      REP(i,SZ(field))<br>        s.push_back(field[i][j]);<br>      aa.push_back(s);<br>    }<br>    SORT(aa);<br>    reverse(ALL(aa));<br>    //REP(i,SZ(aa)) printf("%s\n",aa[i].data());<br>    <br>    n = SZ(aa);<br>    m = SZ(aa[0]);<br>    rows = 0, cols = 0;<br>    CLEAR(a);<br>    REP(i,n) REP(j,m)<br>    {<br>      a[i][j]=aa[i][j]=='B';<br>      if (a[i][j])<br>        rows = max(rows,i+1);<br>      if (a[i][j])<br>        cols = max(cols,j+1);<br>    }<br>    FILL(mem,-1);<br>    res = rec(0,0,0,n-rows,m-cols);<br>    return res;<br>  }<br>  <br><br>};<br><br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003]<br>// Powered by CodeProcessor<br></td>