<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br><br>public class DrawingBlackCrosses {<br>  final int modulo = 1000000007;<br>  <br>  public int count(String[] field) {<br>    int hei = field.length;<br>    int wid = field[0].length();<br>    int ans = 0;<br>    TreeSet&lt;Integer&gt; bis = new TreeSet&lt;Integer&gt;();<br>    TreeSet&lt;Integer&gt; bjs = new TreeSet&lt;Integer&gt;();<br>    for (int i = 0; i &lt; hei; i++) {<br>      for (int j = 0; j &lt; wid; j++) {<br>        if (field[i].charAt(j) == 'B') {<br>          bis.add(i);<br>          bjs.add(j);<br>        }<br>      }<br>    }<br>    ArrayList&lt;Integer&gt; ilist = new ArrayList&lt;Integer&gt;(bis);<br>    ArrayList&lt;Integer&gt; jlist = new ArrayList&lt;Integer&gt;(bjs);<br>    int bi = bis.size();<br>    int bj = bjs.size();<br>    boolean[][] fld = new boolean[bi][bj];<br>    for (int i = 0; i &lt; bi; i++) {<br>      for (int j = 0; j &lt; bj; j++) {<br>        fld[i][j] = field[ilist.get(i)].charAt(jlist.get(j)) == 'B';<br>      }<br>    }<br>    int ci = hei - bi;<br>    int cj = wid - bj;<br>    int MASK = 1 &lt;&lt; (bi + bj);<br>    int[][][] a = new int[MASK][ci + 1][cj + 1];<br>    a[0][0][0] = 1;<br>    for (int mask = 0; mask &lt; MASK; mask++) {<br>      for (int ii = 0; ii &lt;= ci; ii++) {<br>        for (int jj = 0; jj &lt;= cj; jj++) {<br>          if (a[mask][ii][jj] == 0) {<br>            continue;<br>          }<br>          int aa = a[mask][ii][jj];<br>          int aai = (int) (((long) aa) * (ci - ii) % modulo);<br>          int aaj = (int) (((long) aa) * (cj - jj) % modulo);<br>          int aaij = (int) (((long) aa) * (ci - ii) * (cj - jj) % modulo);<br>          boolean whites = false;<br>          for (int i = 0; i &lt;= bi; i++) {<br>            for (int j = 0; j &lt;= bj; j++) {<br>              int newmask = mask;<br>              int newii = ii;<br>              int newjj = jj;<br>              if (i &lt; bi) {<br>                if ((mask &amp; (1 &lt;&lt; (i))) != 0) {<br>                  continue;<br>                }<br>                newmask |= (1 &lt;&lt; (i));<br>              } else {<br>                if (ii == ci) {<br>                  continue;<br>                }<br>                newii++;<br>              }<br>              if (j &lt; bj) {<br>                if ((mask &amp; (1 &lt;&lt; (bi + j))) != 0) {<br>                  continue;<br>                }<br>                newmask |= (1 &lt;&lt; (bi + j));<br>              } else {<br>                if (jj == cj) {<br>                  continue;<br>                }<br>                newjj++;<br>              }<br>              if (i &lt; bi &amp;&amp; j &lt; bj &amp;&amp; fld[i][j]) {<br>                continue;<br>              }<br>              whites = true;<br>              int an = a[newmask][newii][newjj];<br>              if (i &lt; bi) {<br>                if (j &lt; bj) {<br>                  an += aa;<br>                } else {<br>                  an += aaj;<br>                }<br>              } else {<br>                if (j &lt; bj) {<br>                  an += aai;<br>                } else {<br>                  an += aaij;<br>                }<br>              }<br>              if (an &gt;= modulo) an -= modulo;<br>              a[newmask][newii][newjj] = an;<br>            }<br>          }<br>          if (!whites) {<br>            ans = (ans + a[mask][ii][jj]) % modulo;<br>          }<br>        }<br>      }<br>    }<br>    return ans;<br>  }<br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by RETester [based on ExampleBuilder]<br>// Powered by CodeProcessor<br></td>