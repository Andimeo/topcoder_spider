<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;vector&gt;<br>#include &lt;list&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;deque&gt;<br>#include &lt;queue&gt;<br>#include &lt;stack&gt;<br>#include &lt;bitset&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;functional&gt;<br>#include &lt;numeric&gt;<br>#include &lt;utility&gt;<br>#include &lt;sstream&gt;<br>#include &lt;iostream&gt;<br>#include &lt;iomanip&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cctype&gt;<br>#include &lt;string&gt;<br>#include &lt;cstring&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;ctime&gt;<br> <br>using namespace std;<br> <br>#define SIZE(X) ((int)(X.size()))<br>#define two(X) (1&lt;&lt;(X))<br>#define contain(S,X) (((S)&amp;two(X))!=0)<br>template&lt;class T&gt; inline void checkmin(T &amp;a,T b){if(b&lt;a) a=b;}<br>template&lt;class T&gt; inline void checkmax(T &amp;a,T b){if(b&gt;a) a=b;}<br> <br>class BalancingAct<br>{<br>public:<br>  int n1,n2;<br>  int a1[1000000],a2[1000000];<br>  int m,w[4],c[4];<br>  int h,F[1000][4],L[1000],R[1000];<br>  bool e[4];<br>  void add(int &amp;n,int a[],int s)<br>  {<br>    for (int i=0;i&lt;n;i++)<br>    {<br>      a[i+n]=a[i]+s;<br>      a[i+n+n]=a[i]-s;<br>    }<br>    int t=n+n+n;<br>    sort(a,a+t);<br>    n=0;<br>    for (int i=0;i&lt;t;i++)<br>      if (i==0 || a[i]!=a[i-1])<br>        a[n++]=a[i];<br>  }<br>  void bsearch(int w,int &amp;l,int &amp;r)<br>  {<br>    if (w==0)<br>    {<br>      l=r=0;<br>      return;<br>    }<br>    if (n1&lt;n2)<br>      bsearch(n1,a1,n2,a2,w,l,r);<br>    else<br>      bsearch(n2,a2,n1,a1,w,l,r);<br>  }<br>  void bsearch(int n1,int a1[],int n2,int a2[],int key,int &amp;l,int &amp;r)<br>  {<br>    for (int j=n2-1,i=0;i&lt;n1;i++)<br>    {<br>      for (;j&gt;=0 &amp;&amp; a1[i]+a2[j]&gt;key;j--);<br>      if (j&gt;=0 &amp;&amp; a1[i]+a2[j]==key)<br>      {<br>        l=r=key;<br>        return;<br>      }<br>      if (j&gt;=0) checkmax(l,a1[i]+a2[j]+1);<br>      if (j+1&lt;n2) checkmin(r,a1[i]+a2[j+1]-1);<br>    }<br>  }<br>  void initLR(int C[],int &amp;l,int &amp;r)<br>  {<br>    l=1;<br>    r=1000000000;<br>    bool g=true;<br>    for (int i=0;i&lt;m;i++)<br>      if (C[i]&lt;0)<br>        g=false;<br>    if (g)<br>    {<br>      l=r=0;<br>      for (int i=0;i&lt;m;i++)<br>      {<br>        l+=C[i]*(i+1);<br>        r+=C[i]*(100000000-(m-1-i));<br>      }<br>    }<br>  }<br>  void DFS(int d,int sw,int C[4])<br>  {<br>    if (d==m)<br>    {<br>      if (sw&lt;0) return;<br>      for (int i=0;i&lt;m;i++) F[h][i]=C[i];<br>      initLR(C,L[h],R[h]);<br>      bsearch(sw,L[h],R[h]);<br>      h++;<br>      return;<br>    }<br>    for (C[d]=-c[d];C[d]&lt;=c[d];C[d]++)<br>      DFS(d+1,sw+C[d]*w[d],C);<br>  }<br>  void DFS2(int d,int set)<br>  {<br>    if (d==m)<br>    {<br>      for (int i=0;i&lt;h;i++)<br>      {<br>        int value=0;<br>        for (int k=0;k&lt;m;k++)<br>          value+=F[i][k]*w[k];<br>        if (value&lt;L[i] || value&gt;R[i])<br>          return;<br>      }<br>      for (int i=0;i&lt;m;i++)<br>        if (contain(set,i))<br>          e[i]=false;<br>      return;<br>    }<br>    for (int delta=-10;delta&lt;=10;delta++)<br>      if (w[d]+delta&gt;=1 &amp;&amp; w[d]+delta&lt;=100000000)<br>      {<br>        w[d]+=delta;<br>        DFS2(d+1,(delta==0)?set:(set|two(d)));<br>        w[d]-=delta;<br>      }<br>  }<br>  vector &lt;string&gt; recover(vector &lt;int&gt; labeled, vector &lt;int&gt; key)<br>  {<br>    n1=n2=1;<br>    a1[0]=a2[0]=0;<br>    for (int i=0;i&lt;SIZE(labeled);i++)<br>      if (n1&lt;=n2)<br>        add(n1,a1,labeled[i]);<br>      else<br>        add(n2,a2,labeled[i]);<br>    map&lt;int,int&gt; M;<br>    for (int i=0;i&lt;SIZE(key);i++)<br>      M[key[i]]++;<br>    m=0;<br>    for (map&lt;int,int&gt;::iterator it=M.begin();it!=M.end();++it)<br>    {<br>      w[m]=it-&gt;first;<br>      c[m]=it-&gt;second;<br>      m++;<br>    }<br>    h=0;<br>    int C[4];<br>    DFS(0,0,C);<br>    memset(e,true,sizeof(e));<br>    printf("h = %d\n",h);<br>    DFS2(0,0);<br>    vector&lt;string&gt; result;<br>    for (int i=0;i&lt;SIZE(key);i++)<br>      for (int j=0;j&lt;m;j++)<br>        if (w[j]==key[i])<br>          result.push_back(e[j]?"yes":"no");<br>    return result;<br>  }<br>};<br></td>