<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections;<br>using System.Collections.Generic;<br>using System.Text;<br><br>public class HanoiGoodAndBad <br>{<br>  const int INF = 987654321;<br><br>    int mask = 0;<br>    int steps = 0;<br><br>    int moveDave(int source, int target, int spare, int N, int movesLeft)<br>    {<br>        if (N &gt;= 0 &amp;&amp; movesLeft &gt; 0)<br>        {<br>            movesLeft = moveDave(source, spare, target, N - 1, movesLeft);<br>            if (movesLeft == 0) return 0;<br>            <br>            movesLeft--;<br>            mask = set(mask, N, target);<br><br>            if (movesLeft == 0) return 0;<br>            movesLeft = moveDave(spare, target, source, N - 1, movesLeft);<br>        }<br><br>        return movesLeft;<br>    }<br><br>    void moveEarl(int source, int target, int spare, int N)<br>    {<br>        if (N &gt;= 0)<br>        {<br>            int val = get(mask, N);<br><br>            if (val == source)<br>            {<br>                moveEarl(source, target, spare, N - 1);<br>            }<br>            else if (val == spare)<br>            {<br>                steps += p3[N] - 1;<br>                steps++;<br>                moveEarl(target, source, spare, N - 1);<br>            }<br>            else<br>            {<br>                steps += p3[N] - 1;<br>                steps++;<br>                //moveEarl(target, source, spare, N - 1);<br>                steps += p3[N] - 1;<br>                steps++;<br>                moveEarl(source, target, spare, N - 1);<br>            }<br>        }<br>    }<br><br>  public int moves(int N, int Dave) <br>  {<br>        init(N);<br><br>        mask = 0;<br>        moveDave(0, 2, 1, N - 1, Dave);<br><br>        steps = 0;<br>        moveEarl(0, 2, 1, N - 1);<br><br>        return steps;<br>  }<br><br>    int[] p3;<br><br>    void init(int n)<br>    {<br>        p3 = new int[n + 3];<br>        p3[0] = 1;<br>        for (int i = 1; i &lt; n + 3; i++)<br>        {<br>            p3[i] = p3[i - 1] * 3;<br>        }<br>    }<br><br>    int get(int mask, int x)<br>    {<br>        return (int)((mask / p3[x]) % 3);<br>    }<br><br>    int set(int mask, int x, int val)<br>    {<br>        int rem = mask % p3[x];<br>        int b = mask / p3[x + 1];<br>        return (b * 3 + val) * p3[x] + rem;<br>    }<br><br><br><br><br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003] [modified for C# by Petr]<br>// Powered by CodeProcessor<br></td>