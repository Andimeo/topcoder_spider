<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br><br>public class HanoiGoodAndBad {<br>    public int moves(int N, int Dave) {<br>        int[] where = new int[N];<br>        applyDave(N, Dave, where, 0, 1, 2);<br>        return reconstructEarl(N, new int[N], where, 0, 1, 2);<br>    }<br><br>    private int reconstructEarl(int n, int[] from, int[] to, int source, int target, int spare) {<br>        boolean eq = true;<br>        for (int i = 0; i &lt; n; ++i)<br>            if (from[i] != to[i]) eq = false;<br>        if (eq) return 0;<br>        if (from[n - 1] != source)<br>            throw new RuntimeException();<br>        if (to[n - 1] == source) {<br>            return reconstructEarl(n - 1, from, to, source, target, spare);<br>        } else if (to[n - 1] == spare) {<br>            for (int i = 0; i &lt; n - 1; ++i) {<br>                if (from[i] != source)<br>                    throw new RuntimeException();<br>                from[i] = target;<br>            }<br>            from[n - 1] = spare;<br>            return (int) Math.pow(3.0, n - 1) + reconstructEarl(n - 1, from, to, target, source, spare);<br>        } else if (to[n - 1] == target) {<br>            from[n - 1] = target;<br>            return 2 * (int) Math.pow(3.0, n - 1) + reconstructEarl(n - 1, from, to, source, target, spare);<br>        } else throw new RuntimeException();<br>    }<br><br>    private void applyDave(int n, int steps, int[] where, int source, int target, int spare) {<br>        if (steps == 0)<br>            return;<br>        if (steps &gt;= (1 &lt;&lt; (n - 1)) - 1) {<br>            for (int i = 0; i &lt; n - 1; ++i) {<br>                if (where[i] != source)<br>                    throw new RuntimeException();<br>                where[i] = spare;<br>            }<br>            steps -= (1 &lt;&lt; (n - 1)) - 1;<br>            if (steps == 0)<br>                return;<br>            if (where[n - 1] != source) throw new RuntimeException();<br>            where[n - 1] = target;<br>            --steps;<br>            if (steps == 0)<br>                return;<br>            applyDave(n - 1, steps, where, spare, target, source);<br>        } else {<br>            applyDave(n - 1, steps, where, source, spare, target);<br>        }<br>    }<br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by RETester [based on ExampleBuilder]<br>// Powered by CodeProcessor<br></td>