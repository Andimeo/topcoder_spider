<td class="problemText" colspan="8" valign="middle" align="left">
            // Grzegorz Guspiel<br>#include &lt;iostream&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;vector&gt;<br>#include &lt;string&gt;<br>#include &lt;algorithm&gt;<br>using namespace std;<br> <br>#define REP(i,n) for(int (i)=0; (i)&lt;(n); (i)++)<br>#define REPD(i,n) for(int (i)=(n)-1; (i)&gt;=0; (i)--)<br>#define FOR(i,b,e) for(int (i)=(b); (i)&lt;=int(e); (i)++)<br>#define PB push_back<br> <br>typedef vector&lt;int&gt; vi;<br>typedef vector&lt;string&gt; vs;<br> <br>class MatrixGame {<br>public:<br>  vector &lt;string&gt; getMinimal(vector &lt;string&gt; t) {<br>    vi p;<br>    REP(i,t[0].size()) p.PB(i);<br>    vs best=t;<br>    do {<br>      vs r;<br>      REP(i,t.size()) r.PB(t[0]);<br>      REP(j,t.size()) REP(i,t[j].size()) r[j][p[i]]=t[j][i];<br>      sort(r.begin(), r.end());<br>      if(r&lt;best) best=r;<br>    } while(next_permutation(p.begin(), p.end()));<br>    return best;<br>  }<br>};<br> <br> <br> <br> <br>//Powered by [KawigiEdit] 2.0!<br></td>