<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections;<br>using System.Collections.Generic;<br>using System.Collections.Specialized;<br>using System.Text;<br>using System.Text.RegularExpressions;<br> <br>public class HandlesSpelling<br>{<br>  public int spellIt(string[] parts, string[] badges)<br>  {<br>        string s = "";<br>        for (int i = 0; i &lt; parts.Length; ++i)<br>            s += parts[i];<br>        int n = s.Length;<br>        bool[,] c = new bool[n, n];<br>        for (int i = n - 1; i &gt;= 0; --i)<br>            for (int j = 0; j &lt; badges.Length; ++j)<br>                if (s.Substring(i).StartsWith(badges[j]))<br>                {<br>                    int p = i + badges[j].Length;<br>                    c[i, p - 1] = true;<br>                    for (int k = p; k &lt; n; ++k)<br>                        if (c[p, k])<br>                            c[i, k] = true;<br>                }<br>        int[] f = new int[n + 1];<br>        int[] g = new int[n + 1];<br>        f[0] = g[0] = 0;<br>        for (int i = 1; i &lt;= n; ++i)<br>        {<br>            f[i] = f[i - 1] + 1;<br>            g[i] = g[i - 1] + 1;<br>            for (int j = 0; j &lt; i; ++j)<br>            {<br>                if (c[j, i - 1])<br>                    f[i] = Math.Min(f[i], f[j]);<br>                if (c[n - i, n - j - 1])<br>                    g[i] = Math.Min(g[i], g[j]);<br>            }<br>        }<br>        int results = -n;<br>        for (int i = 0; i &lt; n; ++i)<br>            for (int j = i; j &lt; n; ++j)<br>                if (c[i, j])<br>                    results = Math.Max(results, (j - i + 1) * (j - i + 1) - f[i] - g[n - 1 - j]);<br>        return results;<br>  }<br>}<br></td>