<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br><br>public class HandlesSpelling {<br>  public int spellIt(String[] parts, String[] badges) {<br>    StringBuilder sb = new StringBuilder();<br>    for (String s : parts) {<br>      sb.append(s);<br>    }<br>    <br>    char[] s = sb.toString().toCharArray();<br>    int len = s.length;<br>    int min = len + 1;<br>    int[][] forward = build(s, badges);<br><br>    s = reverse(sb.toString()).toCharArray();<br>    for (int i = 0; i &lt; badges.length; i++) {<br>      badges[i] = reverse(badges[i]);<br>    }<br>    int[][] backward = build(s, badges);<br>    <br>    int result = Integer.MIN_VALUE;<br>    for (int i = 1; i &lt;= len; i++) {<br>      for (int j = 0; j &lt;= len; j++) {<br>        if (forward[i][j] == -1) {<br>          continue;<br>        }<br>        <br>        int x = forward[i][j] + backward[len - i][min];<br>        result = Math.max(result, j * j - x);<br>      }<br>    }<br>    <br>    return result;<br>  }<br><br>  private String reverse(String s) {<br>    StringBuilder sb = new StringBuilder();<br>    for (int i = s.length() - 1; i &gt;= 0; i--) {<br>      sb.append(s.charAt(i));<br>    }<br>    return sb.toString();<br>  }<br><br>  private int[][] build(char[] s, String[] b) {<br>    int[][] r = new int[s.length + 1][s.length + 2];<br>    int min = s.length + 1;<br>    Arrays.fill(r[0], -1);<br>    r[0][0] = 0;<br>    r[0][min] = 0;<br>    <br>    for (int i = 1; i &lt;= s.length; i++) {<br>      int[] ri = r[i];<br>      Arrays.fill(ri, -1);<br>      ri[0] = r[i - 1][min] + 1;<br>      ri[min] = ri[0];<br><br>      for (String badge: b) {<br>        if (match(s, i, badge)) {<br>          int len = badge.length();<br>          int[] rl = r[i - len];<br>          for (int j = 0; j &lt;= s.length; j++) {<br>            if (rl[j] != -1 &amp;&amp; (ri[j + len] == -1 || rl[j] &lt; ri[j + len])) {<br>              ri[j + len] = rl[j];<br>            }<br>          }<br>        }<br>      }<br>      <br>      for (int j = 0; j &lt;= s.length; j++) {<br>        if (ri[j] != -1 &amp;&amp; ri[j] &lt; ri[min]) {<br>          ri[min] = ri[j];<br>        }<br>      }<br>    }<br>    <br>    return r;<br>  }<br><br>  private boolean match(char[] s, int last, String b) {<br>    int len = b.length();<br>    if (len &gt; last) {<br>      return false;<br>    }<br>    for (int i = 0; i &lt; len; i++) {<br>      if (b.charAt(i) != s[last - len + i]) {<br>        return false;<br>      }<br>    }<br>    return true;<br>  }<br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by RETester [based on ExampleBuilder]<br>// Powered by CodeProcessor<br></td>