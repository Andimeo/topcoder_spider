<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br> <br>public class RabbitStepping {<br>  public double getExpected(string field, int r) {<br>        int tot = 0;<br>        double cnt = 0;<br>        int n=field.Length;<br>        for (int set = 0; set &lt; (1 &lt;&lt; n); set++)<br>        {<br>            int num = 0;<br>            bool[] have = new bool[n];<br>            for (int i = 0; i &lt; n; i++)<br>                if ((set &gt;&gt; i &amp; 1) &gt; 0)<br>                {<br>                    num++;<br>                    have[i] = true;<br>                }<br>            if (num != r)<br>                continue;<br>            tot++;<br>            cnt += calc(have, field,true);<br>        }<br>        return cnt / tot;<br> <br>  }<br>    int calc(bool[] have, string s,bool flag)<br>    {<br>        if (s.Length == 2)<br>        {<br>            return count(have);<br>        }<br>        int[] cnt = new int[s.Length-1];<br>        if (have[0])<br>            cnt[1]++;<br>        if (have[s.Length - 1])<br>            cnt[s.Length - 2]++;<br>        if (have[s.Length - 2])<br>            cnt[s.Length -3]++;<br>        for(int i=1;i&lt;s.Length-2;i++)<br>            if (have[i])<br>            {<br>                switch (s[i])<br>                {<br>                    case 'W':<br>                        cnt[i - 1]++;<br>                        break;<br>                    case 'R':<br>                        if (flag)<br>                            cnt[i - 1]++;<br>                        else<br>                            cnt[i + 1]++;<br>                        break;<br>                    default:<br>                        cnt[i + 1]++;<br>                        break;<br>                }<br>            }<br>        bool[] next = new bool[cnt.Length];<br>        for (int i = 0; i &lt; next.Length; i++)<br>            if (cnt[i] == 1)<br>                next[i] = true;<br>        return calc(next, s.Substring(0, s.Length - 1), !flag);<br><br><br>    }<br><br>    private int count(bool[] have)<br>    {<br>        int ret = 0;<br>        for (int i = 0; i &lt; have.Length; i++)<br>            if (have[i])<br>                ret++;<br>        return ret;<br>    }<br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003] [modified for C# by Petr]<br>// Powered by CodeProcessor<br></td>