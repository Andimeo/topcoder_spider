<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;algorithm&gt; <br>#include &lt;iostream&gt; <br>#include &lt;sstream&gt; <br>#include &lt;string&gt; <br>#include &lt;vector&gt; <br>#include &lt;queue&gt; <br>#include &lt;set&gt; <br>#include &lt;map&gt; <br>#include &lt;cstdio&gt; <br>#include &lt;cstdlib&gt; <br>#include &lt;cctype&gt; <br>#include &lt;cmath&gt; <br>#include &lt;list&gt; <br>using namespace std; <br><br>#define PB push_back <br>#define MP make_pair <br>#define SZ(v) ((int)(v).size()) <br>#define FOR(i,a,b) for(int i=(a);i&lt;(b);++i) <br>#define REP(i,n) FOR(i,0,n) <br>#define FORE(i,a,b) for(int i=(a);i&lt;=(b);++i) <br>#define REPE(i,n) FORE(i,0,n) <br>#define FORSZ(i,a,v) FOR(i,a,SZ(v)) <br>#define REPSZ(i,v) REP(i,SZ(v)) <br>typedef long long ll; <br><br>int calc(int mask,int prevleft,const string &amp;s) {<br>  int n=SZ(s);<br>  while(n&gt;=2) {<br>    int nmask=0,nprevleft=0,nmult=0;<br>    REP(i,n) if(mask&amp;(1&lt;&lt;i)) {<br>      int to=-1;<br>      if(i==0) to=i+1;<br>      else if(i==n-1||i==n-2) to=i-1;<br>      else if(s[i]=='W') to=i-1;<br>      else if(s[i]=='B') to=i+1;<br>      else if((prevleft&amp;(1&lt;&lt;i))==0) to=i-1; else to=i+1;<br>      if(nmask&amp;(1&lt;&lt;to)) nmult|=1&lt;&lt;to;<br>      nmask|=1&lt;&lt;to;<br>      if(to==i-1) nprevleft|=1&lt;&lt;to;<br>    }<br>    nmask&amp;=~nmult; nprevleft&amp;=~nmult;<br>    mask=nmask; prevleft=nprevleft; --n;<br>  }<br>  return __builtin_popcount(mask);<br>}<br><br>class RabbitStepping { <br>public:   <br>  double getExpected(string s, int r) {<br>    int n=SZ(s);<br>    int num=0,den=0;<br>    REP(i,1&lt;&lt;n) if(__builtin_popcount(i)==r) {<br>      num+=calc(i,0,s);<br>      ++den;<br>    }<br>    return 1.0*num/den;<br>  }<br>};<br></td>