<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>import java.util.regex.*;<br>import java.text.*;<br>import java.math.*;<br> <br> <br>public class RabbitStepping<br>{<br>  double ans = 0., count = 0.;<br>  <br>  String field;<br>  <br>  void rec(int u, int c, int n, int mask) {<br>    if (u == n) {<br>      if (c == 0) {<br>        int m = Integer.bitCount(mask);<br>        int[] f0 = new int[m];<br>        for (int i = 0, j = 0; i &lt; n; ++i) {<br>          if ((mask &amp; (1 &lt;&lt; i)) != 0) {<br>            f0[j++] = i;<br>          }<br>        }<br>        ArrayList&lt;int[]&gt; moves = new ArrayList&lt;int[]&gt;();<br>        moves.add(f0);<br>        for (int it = n; it &gt; 2; --it) {<br>          int[] fOld = it == n ? null : moves.get(moves.size() - 2);<br>          int[] f = moves.get(moves.size() - 1).clone();<br>          for (int i = 0; i &lt; m; ++i) {<br>            if (f[i] != -1) {<br>              if (f[i] == 0) {<br>                f[i] = 1;<br>              } else if (f[i] == it - 1 || f[i] == it - 2) {<br>                f[i]--;<br>              } else if (field.charAt(f[i]) == 'W') {<br>                f[i]--;<br>              } else if (field.charAt(f[i]) == 'B') {<br>                f[i]++;<br>              } else {<br>                f[i] = fOld == null ? f[i] - 1 : fOld[i];<br>              }<br>            }<br>          }<br>          for (int i = 0; i &lt; m; ++i) {<br>            boolean remove = false;<br>            for (int j = i + 1; j &lt; m; ++j) {<br>              if (f[i] == f[j]) {<br>                f[j] = -1;<br>                remove = true;<br>              }<br>            }<br>            if (remove) {<br>              f[i] = -1;<br>            }<br>          }<br>          moves.add(f);<br>        }<br>        for (int i : moves.get(moves.size() - 1)) {<br>          if (i != -1) {<br>            ans++;<br>          }<br>        }<br>        count++;<br>      }<br>      return;<br>    }<br>    if (c &gt; 0) {<br>      rec(u + 1, c - 1, n, mask | 1 &lt;&lt; u);<br>    }<br>    rec(u + 1, c, n, mask);<br>  }<br>  <br>  public double getExpected(String field, int r)<br>  {<br>    this.field = field;<br>    rec(0, r, field.length(), 0);<br>    return ans / count;<br>  }<br>  <br> <br>}<br>//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!<br></td>