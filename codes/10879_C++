<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;vector&gt;<br>#include &lt;list&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;deque&gt;<br>#include &lt;queue&gt;<br>#include &lt;stack&gt;<br>#include &lt;bitset&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;functional&gt;<br>#include &lt;numeric&gt;<br>#include &lt;utility&gt;<br>#include &lt;sstream&gt;<br>#include &lt;iostream&gt;<br>#include &lt;iomanip&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cctype&gt;<br>#include &lt;string&gt;<br>#include &lt;cstring&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;ctime&gt;<br> <br>using namespace std;<br> <br>#define FOR(i,a,b) for(__typeof(b) i=(a);i!=(b);i++)<br>#define REP(i,n) FOR(i,0,n)<br>#define EACH(i,a) FOR(i,a.begin(),a.end())<br>#define SZ(a) (int)a.size()<br>#define PB push_back<br>#define iss istringstream<br>#define ALL(a) a.begin(),a.end()<br>#define CLEAR(a) memset(a,0,sizeof(a))<br>#define ll long long<br> <br>class RabbitIncreasing {<br>  public:<br>  int getNumber(vector &lt;int&gt; leaving, int k);<br>};<br> <br>const int MOD = 1000000009;<br>const long long MOD2 = (2LL) * MOD;<br> <br>struct bint {<br>  long long A, B;<br>  inline void init() {<br>    A = B = 0;<br>  }<br>  inline void add(bint o) {<br>    A += o.A;<br>    B += o.B;<br>    while (B &gt;= MOD) {<br>      B -= MOD;<br>      A++;<br>    }<br>    A %= (1LL &lt;&lt; 55);<br>  }<br>  inline void div() {<br>    if (A &amp; 1) {<br>      A--;<br>      B += MOD;<br>    }<br>    A /= 2;<br>    B /= 2;<br>  }<br>} mem[3];<br> <br>int RabbitIncreasing::getNumber(vector &lt;int&gt; leaving, int k) {<br>  int N = SZ(leaving);<br>  if (leaving[0] &lt;= 2) {<br>    return 0;<br>  }<br>  mem[0].init();<br>  mem[1].init();<br>  mem[1].B = 1;<br>  mem[2].init();<br>  int it = 0;<br>  for(int i = 3 ; i &lt;= k ; i++) {<br>    mem[0].add(mem[1]);<br>    mem[1].A = mem[2].A;<br>    mem[1].B = mem[2].B;<br>    mem[2].A = mem[0].A;<br>    mem[2].B = mem[0].B;<br>    if (it &lt; N &amp;&amp; leaving[it] == i) {<br>      it++;<br>      mem[0].init();<br>      mem[1].div();<br>    }<br>  }<br>  return ((mem[0].B + mem[1].B + mem[2].B) % MOD);<br>}<br> <br> <br> <br>//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!<br></td>