<td class="problemText" colspan="8" valign="middle" align="left">
            import static java.lang.Math.*;<br>import static java.math.BigInteger.*;<br>import static java.util.Arrays.*;<br>import static java.util.Collections.*;<br>import java.math.*;<br>import java.util.*;<br><br>public class RabbitIncreasing {<br>  <br>  BigInteger M = valueOf(1000000009).shiftLeft(100);<br>  <br>  public int getNumber(int[] leaving, int k) {<br>    if (leaving[0] == 1) return 0;<br>    BigInteger[][] A = {{ZERO, ONE}, {ONE, ONE}};<br>    BigInteger[] num = {ONE, ZERO};<br>    int last = 1;<br>    for (int crt : leaving) {<br>      int dif = crt - last;<br>      BigInteger[][] A2 = pow(A, dif);<br>      BigInteger[] num2 = {<br>          A2[0][0].multiply(num[0]).add(A2[0][1].multiply(num[1])).mod(M),<br>          A2[1][0].multiply(num[0]).add(A2[1][1].multiply(num[1])).mod(M)};<br>      BigInteger sum = num2[0].add(num2[1]).add(ONE).divide(valueOf(2));<br>      num2[1] = num2[1].subtract(sum).mod(M);<br>      num = num2;<br>      last = crt;<br>    }<br>    int dif = k - last;<br>    BigInteger[][] A2 = pow(A, dif);<br>    BigInteger[] num2 = {<br>        A2[0][0].multiply(num[0]).add(A2[0][1].multiply(num[1])).mod(M),<br>        A2[1][0].multiply(num[0]).add(A2[1][1].multiply(num[1])).mod(M)};<br>    return num2[0].add(num2[1]).mod(valueOf(1000000009)).intValue();<br>  }<br>  <br>  BigInteger[][] mul(BigInteger[][] a, BigInteger[][] b) {<br>    int n = a.length;<br>    BigInteger[][] c = new BigInteger[n][n];<br>    for (int i = 0; i &lt; n; i++) fill(c[i], ZERO);<br>    for (int i = 0; i &lt; n; i++) {<br>      for (int k = 0; k &lt; n; k++) {<br>        for (int j = 0; j &lt; n; j++) {<br>          c[i][j] = c[i][j].add(a[i][k].multiply(b[k][j])).mod(M);<br>        }<br>      }<br>    }<br>    return c;<br>  }<br>  BigInteger[][] pow(BigInteger[][] a, long b) {<br>    int n = a.length;<br>    BigInteger[][] c = new BigInteger[n][n];<br>    for (int i = 0; i &lt; n; i++) {<br>      fill(c[i], ZERO);<br>      c[i][i] = ONE;<br>    }<br>    while (b &gt; 0) {<br>      if ((b &amp; 1) != 0) c = mul(c, a);<br>      a = mul(a, a);<br>      b &gt;&gt;&gt;= 1;<br>    }<br>    return c;<br>  }<br>  <br>  void debug(Object...os) {<br>    System.err.println(deepToString(os));<br>  }<br>}<br></td>