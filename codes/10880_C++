<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;cstdlib&gt;<br>#include &lt;cctype&gt;<br>#include &lt;cstring&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cmath&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;vector&gt;<br>#include &lt;string&gt;<br>#include &lt;iostream&gt;<br>#include &lt;sstream&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;queue&gt;<br>#include &lt;stack&gt;<br>#include &lt;fstream&gt;<br>#include &lt;numeric&gt;<br>#include &lt;iomanip&gt;<br>#include &lt;bitset&gt;<br>#include &lt;list&gt;<br>#include &lt;stdexcept&gt;<br>#include &lt;functional&gt;<br>#include &lt;utility&gt;<br>#include &lt;ctime&gt;<br>using namespace std;<br>#define psb push_back<br>#define mpr make_pair<br>#define infinity 1000000010<br>#define mineps 1e-8<br>#define sqr(x) ((x)*(x))<br>#define MIN(x,y) ((x)&lt;(y)?(x):(y))<br>#define MAX(x,y) ((x)&gt;(y)?(x):(y))<br>#define LL long long<br>#define UC unsigned long<br>#define UI unsigned int<br>#define pi 3.1415926535898 <br>inline int cmp(double x) {<br>  if (fabs(x) &lt; mineps) return 0;<br>  else if (x &lt; 0) return -1;<br>  else return 1;       <br>}<br>//////////////////////////////////////////////<br>//Start here<br><br>#define maxn 55<br><br>class rabbit {<br>  public:<br>    LL s0, s1;<br>    int no;<br>    rabbit() {}<br>    rabbit(LL xs0, LL xs1, int xno) {s0=xs0, s1=xs1, no=xno; }<br>    friend bool operator&lt; (rabbit a, rabbit b) {return a.s1 &lt; b.s1 || a.s1 == b.s1 &amp;&amp; a.no &gt; b.no; }      <br>};<br><br>int ps, n, Q, S; <br>int a[maxn];<br>bool submit[maxn][maxn];<br>int success[maxn], fail[maxn];<br>LL ans;<br><br>LL f[maxn][maxn][maxn]; //p, num, qualified<br>vector&lt;rabbit&gt; rab;<br><br>LL doit(int stp) {<br>            <br>  LL lowscore = rab[stp].s1;<br>  int lowno = rab[stp].no;<br>  <br>  memset(f,0,sizeof(f));<br>  f[stp][1][1] = 1;<br>  for(int i = stp+1; i &lt; n; i++) {<br>    LL s0 = rab[i].s0, s1 = rab[i].s1, no = rab[i].no;<br>    for(int num = 0; num &lt;= S; num++)<br>      for(int qual = num; qual &lt;= Q; qual++)<br>        if (f[i-1][num][qual] &gt; 0) {<br>          LL orig = f[i-1][num][qual];<br>          //choose this one<br>          if (num &lt; S &amp;&amp; qual &lt; Q) f[i][num+1][qual+1] += orig;<br>          //do not choose this one<br>          int tqual = qual;<br>          if (s0 &gt; lowscore || s0 == lowscore &amp;&amp; no &lt; lowno) tqual ++;<br>          if (tqual &lt;= Q) f[i][num][tqual] += orig;<br>        }        <br>  }<br>  <br>  LL ans = 0;<br>  for(int qual = S; qual &lt;= Q; qual++)<br>    ans += f[n-1][S][qual];<br>  return ans;<br>            <br>}<br><br>class RabbitProgramming{<br>public:<br>  long long getTeams(vector &lt;int&gt; points, vector &lt;string&gt; standings, int qualified, int selected){<br>    <br>    ps = points.size(); Q = qualified; S = selected; n = standings.size();<br>    for(int i = 0; i &lt; ps; i++)  a[i] = points[i];<br>    for(int i = 0; i &lt; n; i++)<br>      for(int j = 0; j &lt; ps; j++)<br>        if (standings[i][j] == 'Y') submit[i][j] = true; else submit[i][j] = false;<br>        <br>      memset(success,0,sizeof(success));<br>      memset(fail,0,sizeof(fail));<br>      for(int i = 0; i &lt; n; i++) {<br>        int s0 = 0, s1 = 0;<br>        for(int j = 0; j &lt; ps; j++)<br>          if (submit[i][j]) {<br>            if (a[j] &gt; 0) s0 += a[j], s1 += a[j];<br>            else s1 += -a[j];                  <br>          }        <br>        success[i] = s1;<br>        fail[i] = s0;<br>      }<br>      <br>      ans = 0;<br>      rab.clear();<br>      for(int i = 0; i &lt; n; i++)<br>        rab.psb(rabbit(fail[i], success[i], i));<br>      sort(rab.begin(), rab.end());<br>      for(int i = 0; i &lt; n; i++) {<br>        LL tans = doit(i);<br>        ans += tans;        <br>      }<br>      return ans;<br>    <br>  }<br><br>};<br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003]<br>// Powered by CodeProcessor<br></td>