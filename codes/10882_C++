<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;map&gt;<br>#include &lt;cassert&gt;<br>#include &lt;set&gt;<br>#include &lt;sstream&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cmath&gt;<br>#include &lt;iostream&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;queue&gt;<br>#include &lt;iomanip&gt;<br>#include &lt;cctype&gt;<br>#include &lt;string&gt;<br>#include &lt;cstring&gt;<br>#include &lt;functional&gt;<br>#include &lt;vector&gt;<br><br>typedef long long ll;<br>#define sz(a) int((a).size())<br><br>using namespace std;<br><br>class RabbitJumping {<br>public:<br>  int getMinimum(vector &lt;int&gt; holes, int largeJump);<br>};<br><br>long long from[200], to[200];<br>int isodd[200];<br>int n;<br>int num;<br><br>bool xxx(ll f1, ll t1, ll f2, ll t2)<br>{<br>  ll ff = max(f1, f2);<br>  ll tt = min(t1, t2);<br>  return ff &lt;= tt;<br>}<br><br>bool cango(int i, int j, int dd)<br>{<br>  if (dd % 2 != abs(from[i] - from[j]) % 2) return false;<br>  long long f2 = from[i] + dd, t2 = to[i] + dd;<br>  if (xxx(f2, t2, from[j], to[j])) return true;<br>  f2 = from[i] - dd, t2 = to[i] - dd;<br>  if (xxx(f2, t2, from[j], to[j])) return true;<br>  return false;<br>}<br><br>int dis[200][200];<br><br>const int INF = 1000000000;<br><br>int RabbitJumping::getMinimum(vector &lt;int&gt; holes, int largeJump) {<br>  num = 0;<br>  n = sz(holes) / 2;<br>  from[0] = -1000000000, to[0] = holes[0] - 1, isodd[0] = 0;<br>  if (to[0] % 2 != 0) --to[0];<br>  from[1] = -1000000001, to[1] = holes[0] - 1, isodd[1] = 1;<br>  if (to[1] % 2 == 0) --to[1];<br>  from[2] = holes.back() + 1, to[2] = 2000000001, isodd[2] = 1;<br>  if (from[2] % 2 == 0) ++from[2];<br>  from[3] = holes.back() + 1, to[3] = 2000000002, isodd[3] = 0;<br>  if (from[3] % 2 != 0) ++from[3];<br>  num = 4;<br>  for (int i = 0; i &lt; n - 1; ++i) {<br>    long long f = holes[i + i + 1] + 1, t = holes[i + i + 2] - 1;<br>    if (f &gt; t) continue;<br>    if (f == t) {<br>      from[num] = f;<br>      to[num] = t;<br>      isodd[num++] = f % 2;<br>    }<br>    else {<br>      from[num] = f;<br>      to[num] = t;<br>      isodd[num] = 0;<br>      if (from[num] % 2 != 0) ++from[num];<br>      if (to[num] % 2 != 0) --to[num];<br>      ++num;<br><br>      from[num] = f;<br>      to[num] = t;<br>      isodd[num] = 1;<br>      if (from[num] % 2 != 1) ++from[num];<br>      if (to[num] % 2 != 1) --to[num];<br>      ++num;<br>    }<br>  }<br>  /*for (int i = 0; i &lt; num; ++i) {<br>    assert(abs(from[i]) % 2 == isodd[i]);<br>    assert(abs(to[i]) % 2 == isodd[i]);<br>  }*/<br>  for (int i = 0; i &lt; num; ++i) {<br>    for (int j = 0; j &lt; num; ++j) {<br>      if (i == j) {<br>        dis[i][j] = 0;<br>      }<br>      else if (cango(i, j, 2)) {<br>        dis[i][j] = 0;<br>      }<br>      else if (cango(i, j, largeJump)) {<br>        dis[i][j] = 1;<br>      }<br>      else {<br>        dis[i][j] = INF;<br>      }<br>    }<br>  }<br>  for (int k = 0; k &lt; num; ++k) {<br>    for (int i = 0; i &lt; num; ++i) {<br>      for (int j = 0; j &lt; num; ++j) {<br>        dis[i][j] = min(dis[i][j], dis[i][k] + dis[k][j]);<br>      }<br>    }<br>  }<br>  if (dis[0][2] == INF) return -1;<br>  else return dis[0][2];<br>}<br><br><br><br>// Powered by FileEdit<br>// Powered by CodeProcessor<br></td>