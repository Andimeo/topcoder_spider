<td class="problemText" colspan="8" valign="middle" align="left">
            //Authored by Irvan Jahja (dolphinigle)<br>//TopCoder<br> <br>#include &lt;vector&gt;<br>#include &lt;list&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;queue&gt;<br>#include &lt;deque&gt;<br>#include &lt;stack&gt;<br>#include &lt;bitset&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;functional&gt;<br>#include &lt;numeric&gt;<br>#include &lt;utility&gt;<br>#include &lt;sstream&gt;<br>#include &lt;iostream&gt;<br>#include &lt;iomanip&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;ctime&gt;<br> <br>#define FORN(X,Y) for (int (X) = 0;(X) &lt; (Y);++(X))<br>#define DEBUG(x) cout &lt;&lt; '&gt;' &lt;&lt; #x &lt;&lt; ':' &lt;&lt; x &lt;&lt; '\n';<br> <br>#define REP(X,Y,Z) for (int (X) = (Y);(X) &lt; (Z);++(X))<br>#define RESET(Z,Y) memset(Z,Y,sizeof(Z))<br> <br>#define SZ(Z) ((int)Z.size())<br>#define ALL(W) W.begin(), W.end()<br>#define PB push_back<br> <br>#define MP make_pair<br>#define A first<br>#define B second<br> <br>#define INF 1023123123<br>#define EPS 1e-11<br> <br>#define MX(Z,Y) Z = max((Z),(Y))<br>#define MN(X,Y) X = min((X),(Y))<br> <br>#define FORIT(X,Y) for(typeof((Y).begin()) X = (Y).begin();X!=(Y).end();X++)<br> <br>using namespace std;<br> <br>typedef long long ll;<br>typedef double db;<br>typedef vector&lt;int&gt; vint;<br>typedef vector&lt;ll&gt; vll;<br> <br>class BatmanAndRobin {<br>public:<br>  double minArea(vector &lt;int&gt;, vector &lt;int&gt;);<br>};<br> <br>int n;<br> <br>double PolygonArea(vector&lt; pair&lt;int,int&gt; &gt; points) {<br>  double ret = 0;<br>  FORN(i,SZ(points)) {<br>    ret += (db)(points[i].A * points[(i+1)%SZ(points)].B);<br>    ret -= (db)(points[i].B * points[(i+1)%SZ(points)].A);<br>  }<br>  return abs(ret) / 2.0;<br>}<br> <br>bool leftturnorcollinear(long long x1, long long y1, long long x2, long long y2, long long x3, long long y3 ) {<br>    return ( x2 - x1 ) * ( y3 - y1 ) - ( y2 - y1 ) * ( x3 - x1 ) &gt;= 0LL;<br>  }<br> <br>bool leftturn(long long x1, long long y1, long long x2, long long y2, long long x3, long long y3 ) {<br>    return ( x2 - x1 ) * ( y3 - y1 ) - ( y2 - y1 ) * ( x3 - x1 ) &gt; 0LL;<br>  }<br> <br>vector&lt; pair&lt;int,int&gt; &gt; convexhull (vector&lt; pair&lt;int,int&gt; &gt; abc) {<br> <br>  sort(ALL(abc));<br>  abc.erase(unique(ALL(abc)),abc.end());<br>  vector&lt; pair&lt;double, pair&lt;int,int&gt; &gt; &gt; p;<br>  vector&lt; pair&lt;int,int&gt; &gt; ans;<br>  int tn = SZ(abc);<br> <br>  double midx = 0.0,midy = 0.0;<br>  FORN(i,tn) midx += abc[i].first;<br>  FORN(i,tn) midy += abc[i].second;<br>  midx /= (double)tn;<br>  midy /= (double)tn;<br>  FORN(i,tn) p.PB(MP(atan2((double)abc[i].second - midy,(double)abc[i].first - midx),MP(abc[i].first,abc[i].second)));<br>  sort(ALL(p));<br>  reverse(ALL(p));<br>  <br>  FORN(i,tn) {<br>    ans.PB(MP(p[i].second.first,p[i].second.second));<br>    while (SZ(ans) &gt; 2) {<br>      int bz = SZ(ans);<br>      if (leftturn(ans[bz - 1].first,ans[bz - 1].second,ans[bz - 2].first,ans[bz - 2].second,ans[bz - 3].first,ans[bz - 3].second)) break;<br>      swap(ans[bz - 1],ans[bz - 2]);<br>      ans.pop_back();<br>      }<br>    }<br>  int pd = 0;<br>  while (SZ(ans) - pd &gt; 2) {<br>    if (!leftturn(ans[pd].first,ans[pd].second,ans[SZ(ans) - 1].first,ans[SZ(ans) - 1].second,ans[SZ(ans) - 2].first,ans[SZ(ans) - 2].second)) {<br>      ans.pop_back();<br>      continue;<br>      }<br>    if (!leftturn(ans[pd + 1].first,ans[pd + 1].second,ans[pd].first,ans[pd].second,ans[SZ(ans) - 1].first,ans[SZ(ans) - 1].second)) {<br>      pd++;<br>      continue;<br>      }<br>    break;<br>    }<br>  vector&lt; pair&lt;int,int&gt; &gt; trans;<br>  REP(i,pd,SZ(ans)) trans.PB(ans[i]);<br>  return trans;<br>  }<br> <br>double BatmanAndRobin::minArea(vector &lt;int&gt; x, vector &lt;int&gt; y) {<br>  <br>  n = SZ(x);<br>  <br>  if (n &lt;= 4) return 0.0;<br>  <br>  double ret = INF;<br>  <br>  FORN(i,n) FORN(j,n) if (i != j) {<br>    //dipisahin garis ini<br>    vector&lt; pair&lt;int,int&gt; &gt; batman;<br>    vector&lt; pair&lt;int,int&gt; &gt; robin;<br>    FORN(k,n) {<br>      if (leftturnorcollinear(x[i], y[i], x[j], y[j], x[k], y[k])) {<br>        batman.PB(MP(x[k],y[k]));<br>      } else {<br>        robin.PB(MP(x[k],y[k]));<br>      }<br>    }<br>    <br>    MN(ret, max(PolygonArea(convexhull(batman)), PolygonArea(convexhull(robin))));<br>  }<br>  return ret;<br>  <br>}<br> <br> <br>//Powered by [KawigiEdit] 2.0! - modified by dolphinigle<br></td>