<td class="problemText" colspan="8" valign="middle" align="left">
            import static java.lang.Math.*;<br>import static java.math.BigInteger.*;<br>import static java.util.Arrays.*;<br>import static java.util.Collections.*;<br>import java.math.*;<br>import java.util.*;<br><br>public class BatmanAndRobin {<br>  <br>  public double minArea(int[] x, int[] y) {<br>    int n = x.length;<br>    P[] ps = new P[n];<br>    for (int i = 0; i &lt; n; i++) ps[i] = new P(x[i], y[i]);<br>    sort(ps);<br>    long res = area(convexHull(ps));<br>    for (int i = 0; i &lt; n; i++) {<br>      loop : for (int j = 0; j &lt; n; j++) if (i != j) {<br>        ArrayList&lt;P&gt; left = new ArrayList&lt;P&gt;();<br>        ArrayList&lt;P&gt; right = new ArrayList&lt;P&gt;();<br>        for (int k = 0; k &lt; n; k++) {<br>          if (k == i) right.add(ps[k]);<br>          else if (k == j) left.add(ps[k]);<br>          else {<br>            long det = ps[j].sub(ps[i]).det(ps[k].sub(ps[i]));<br>            if (det &gt; 0) {<br>              left.add(ps[k]);<br>            } else if (det &lt; 0) {<br>              right.add(ps[k]);<br>            } else {<br>              long dot = ps[j].sub(ps[i]).dot(ps[k].sub(ps[i]));<br>              if (dot &lt; 0) {<br>                right.add(ps[k]);<br>              } else {<br>                dot = ps[i].sub(ps[j]).dot(ps[k].sub(ps[j]));<br>                if (dot &lt; 0) {<br>                  left.add(ps[k]);<br>                } else {<br>                  continue loop;<br>                }<br>              }<br>            }<br>          }<br>        }<br>        long area1 = area(convexHull(left.toArray(new P[0])));<br>        long area2 = area(convexHull(right.toArray(new P[0])));<br>        res = min(res, max(area1, area2));<br>      }<br>    }<br>    debug(0.5 * res);<br>    return 0.5 * res;<br>  }<br>  <br>  class P implements Comparable&lt;P&gt; {<br>    long x, y;<br>    P(long x, long y) {<br>      this.x = x;<br>      this.y = y;<br>    }<br>    P add(P p) {<br>      return new P(x + p.x, y + p.y);<br>    }<br>    P sub(P p) {<br>      return new P(x - p.x, y - p.y);<br>    }<br>    long dot(P p) {<br>      return x * p.x + y * p.y;<br>    }<br>    long det(P p) {<br>      return x * p.y - y * p.x;<br>    }<br>    public int compareTo(P o) {<br>      int comp = Long.signum(x - o.x);<br>      if (comp != 0) return comp;<br>      return Long.signum(y - o.y);<br>    }<br>    public String toString() {<br>      return String.format("(%d, %d)", x, y);<br>    }<br>  }<br>  <br>  P[] convexHull(P[] ps) {<br>    int n = ps.length, k = 0;<br>    if (n &lt;= 1) return ps;<br>    P[] qs = new P[n * 2];<br>    for (int i = 0; i &lt; n; qs[k++] = ps[i++]) {<br>      while (k &gt; 1 &amp;&amp; qs[k - 1].sub(qs[k - 2]).det(ps[i].sub(qs[k - 1])) &lt;= 0) k--;<br>    }<br>    for (int i = n - 2, t = k; i &gt;= 0; qs[k++] = ps[i--]) {<br>      while (k &gt; t &amp;&amp; qs[k - 1].sub(qs[k - 2]).det(ps[i].sub(qs[k - 1])) &lt;= 0) k--;<br>    }<br>    P[] res = new P[k - 1];<br>    System.arraycopy(qs, 0, res, 0, k - 1);<br>    return res;<br>  }<br>  <br>  long area(P[] ps) {<br>    int n = ps.length;<br>    long res = 0;<br>    for (int i = 0; i &lt; n; i++) {<br>      res += ps[i].det(ps[(i + 1) % n]);<br>    }<br>    return res;<br>  }<br>  <br>  void debug(Object...os) {<br>    System.err.println(deepToString(os));<br>  }<br>}<br></td>