<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;vector&gt;<br>#include &lt;list&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;deque&gt;<br>#include &lt;stack&gt;<br>#include &lt;bitset&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;functional&gt;<br>#include &lt;numeric&gt;<br>#include &lt;utility&gt;<br>#include &lt;sstream&gt;<br>#include &lt;iostream&gt;<br>#include &lt;iomanip&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;ctime&gt;<br> <br>using namespace std;<br> <br>class TheMoviesLevelOneDivOne {<br>public:<br>  long long find(int, int, vector &lt;int&gt;, vector &lt;int&gt;);<br>};<br> <br>long long TheMoviesLevelOneDivOne::find(int n, int m, vector &lt;int&gt; row, vector &lt;int&gt; seat) {<br>  long long ans = (long long)n * (m - 1);<br>  for (int i = 0; i &lt; seat.size (); i++) {<br>    ans -= int (seat[i] &gt; 1) + int (seat[i] &lt; m);<br>    for (int j = 0; j &lt; seat.size (); j++)<br>      if (row[i] == row[j] &amp;&amp; seat[i] + 1 == seat[j])<br>        ans++;  <br>  }<br>  return ans;<br>}<br> <br> <br>//Powered by [KawigiEdit] 2.0!<br></td>