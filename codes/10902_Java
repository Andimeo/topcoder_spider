<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br> <br>public class TheMoviesLevelThreeDivOne {<br>    public long find(int[] timeJ, int[] timeB) {<br>        int n = timeJ.length;<br>        return (((long) 1) &lt;&lt; n) - solve(n, timeJ, timeB) - solve(n, timeB, timeJ);<br>    }<br> <br>    private long solve(int n, int[] a, int[] b) {<br>        int max = 1;<br>        for (int x : a)<br>            max = Math.max(max, x);<br>        for (int x : b)<br>            max = Math.max(max, x);<br>        int ZZ = 2 * max * n + 1;<br>        long[] ways = new long[(max * n + 1) * (2 * max * n + 1)];<br>        long[] nways = new long[(max * n + 1) * (2 * max * n + 1)];<br>        int SHIFT = max * n;<br>        ways[SHIFT * ZZ + SHIFT] = 1;<br>        for (int step = 0; step &lt; n; ++step) {<br>            for (int prevMinDelta = -max * n; prevMinDelta &lt;= 0; ++prevMinDelta)<br>                for (int curDelta = -max * n; curDelta &lt;= max * n; ++curDelta) {<br>                    long tmp = ways[(prevMinDelta + SHIFT) * ZZ + (curDelta + SHIFT)];<br>                    if (ways[(prevMinDelta + SHIFT) * ZZ + (curDelta + SHIFT)] != 0) {<br>                        // What if we put into the first queue.<br>                        nways[(Math.min(0, prevMinDelta + a[step]) + SHIFT) * ZZ + (curDelta + a[step] + SHIFT)] += tmp;<br>                        // What if we put into the second queue.<br>                        int newDelta = curDelta - b[step];<br>                        nways[(Math.min(prevMinDelta, newDelta) + SHIFT) * ZZ + (newDelta + a[step] + SHIFT)] += tmp;<br>                    }<br>                }<br>            long[] tmp = ways;<br>            ways = nways;<br>            nways = tmp;<br>            Arrays.fill(nways, 0);<br>        }<br>        long res = 0;<br>        for (int prevMinDelta = -max * n; prevMinDelta &lt; 0; ++prevMinDelta)<br>            for (int curDelta = -max * n; curDelta &lt;= max * n; ++curDelta)<br>                res += ways[(prevMinDelta + SHIFT) * ZZ + (curDelta + SHIFT)];<br>        return res;<br>    }<br> <br>}<br> <br> <br>// Powered by FileEdit<br>// Powered by RETester [based on ExampleBuilder]<br>// Powered by CodeProcessor<br></td>