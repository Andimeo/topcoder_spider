<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections;<br>using System.Collections.Generic;<br>using System.Collections.Specialized;<br>using System.Text;<br>using System.Text.RegularExpressions;<br> <br> <br>public class FuzzyLife<br>{<br>    private bool live(string[] L, int x, int y)<br>    {<br>        int i = 0;<br>        i += L[x - 1][y] == '1' ? 1 : 0;<br>        i += L[x + 1][y] == '1' ? 1 : 0;<br>        i += L[x - 1][y - 1] == '1' ? 1 : 0;<br>        i += L[x + 1][y - 1] == '1' ? 1 : 0;<br>        i += L[x - 1][y + 1] == '1' ? 1 : 0;<br>        i += L[x + 1][y + 1] == '1' ? 1 : 0;<br>        i += L[x ][y - 1] == '1' ? 1 : 0;<br>        i += L[x][y + 1] == '1' ? 1 : 0;<br>        if (i &lt; 2 || i &gt; 3)<br>            return false;<br>        if (i == 3)<br>            return true;<br>        return L[x][y]=='1';<br>    }<br> <br>    private int G(string[] L, int x, int y)<br>    {<br>        int i = 0;<br> <br>        i += live(L, x , y) ? 1 : 0;<br>        i += live(L, x - 1, y) ? 1 : 0;<br>        i += live(L, x + 1, y) ? 1 : 0;<br>        i += live(L, x - 1, y - 1) ? 1 : 0;<br>        i += live(L, x + 1, y - 1) ? 1 : 0;<br>        i += live(L, x - 1, y + 1) ? 1 : 0;<br>        i += live(L, x + 1, y + 1) ? 1 : 0;<br>        i += live(L, x, y - 1) ? 1 : 0;<br>        i += live(L, x, y + 1) ? 1 : 0;<br>        return i;<br>    }<br> <br>    public int survivingCells(string[] grid)<br>    {<br>        string[] L = new string[grid.Length + 4];<br>        L[0] = L[L.Length - 1] = L[1] = L[L.Length - 2] = new string('0', grid[0].Length + 4);<br>        for (int i = 0; i &lt; grid.Length; i++)<br>        {<br>            L[i + 2] = "00" + grid[i] + "00";<br>        }<br>        for (int i = 2; i &lt; L.Length - 1; i++)<br>        {<br>            for (int j = 2; j &lt; L[0].Length - 1; j++)<br>            {<br>                if (L[i][j] == '?')<br>                {<br>                    L[i] = L[i].Substring(0, j) + "1" + L[i].Substring(j + 1);<br>                    int t = G(L, i, j);<br> <br>                    L[i] = L[i].Substring(0, j) + "0" + L[i].Substring(j + 1);<br>                    if (G(L, i, j) &lt; t)<br>                        L[i] = L[i].Substring(0, j) + "1" + L[i].Substring(j + 1);<br>                }<br>            }<br>        }<br>        int r = 0;<br>        for (int i = 1; i &lt; L.Length - 1; i++)<br>        {<br>            for (int j = 1; j &lt; L[0].Length - 1; j++)<br>            {<br>                r += live(L, i, j) ? 1 : 0;<br>            }<br>        }<br>        return r;<br>    }<br> <br> <br>}<br>//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!<br></td>