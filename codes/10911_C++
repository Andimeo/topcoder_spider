<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;vector&gt; <br>#include &lt;list&gt; <br>#include &lt;map&gt; <br>#include &lt;set&gt; <br>#include &lt;deque&gt; <br>#include &lt;stack&gt; <br>#include &lt;bitset&gt; <br>#include &lt;algorithm&gt; <br>#include &lt;functional&gt; <br>#include &lt;numeric&gt; <br>#include &lt;utility&gt; <br>#include &lt;sstream&gt; <br>#include &lt;iostream&gt; <br>#include &lt;iomanip&gt; <br>#include &lt;cstdio&gt; <br>#include &lt;cmath&gt; <br>#include &lt;cstdlib&gt; <br>#include &lt;ctime&gt; <br>#include &lt;queue&gt; <br>#include &lt;cstring&gt; <br>using namespace std; <br>class FuzzyLife {<br>  public:<br>  int survivingCells(vector &lt;string&gt; grid) {<br>    int N = grid.size();<br>    int M = grid[N-1].length();<br>    int cnt = 0, lst[2500][2];<br>    for (int i = 0 ; i &lt; N; ++i)<br>      for (int j = 0 ; j &lt; M; ++j)<br>        if (grid[i][j] == '?')<br>          lst[cnt][0] = i, lst[cnt++][1] = j;<br>    for (int i = 0 ; i &lt; cnt ; ++i){<br>      int x = lst[i][0], y = lst[i][1];<br>      grid[x][y] = '0';<br>      int aa = 0 , ab = 0;<br>      for (int j = -1; j &lt; 2; ++j)<br>        for (int k = -1; k &lt; 2; ++k){<br>          int xx = x+j, yy = y+k;<br>          int lv = 0;<br>          for (int p = -1 ; p &lt; 2; ++p)<br>            for (int q = -1; q &lt; 2; ++q){<br>              if (!p &amp;&amp; !q) continue;<br>              int xxx = xx+p, yyy = yy + q;<br>              if (xxx &lt; 0 || xxx &gt;= N || yyy &lt; 0 || yyy &gt;= M) continue;<br>              lv += grid[xxx][yyy] == '1';<br>            }<br>          int cs = 0;<br>          if (xx &gt;= 0 &amp;&amp; xx &lt; N &amp;&amp; yy &gt;= 0 &amp;&amp; yy &lt; M) cs = grid[xx][yy] == '1';<br>          if (cs &amp;&amp; (lv == 2 || lv == 3)) aa++;<br>          if (!cs &amp;&amp; lv == 3) aa++;<br>        }<br>      grid[x][y] = '1';<br>      for (int j = -1; j &lt; 2; ++j)<br>        for (int k = -1; k &lt; 2; ++k){<br>          int xx = x+j, yy = y+k;<br>          int lv = 0;<br>          for (int p = -1 ; p &lt; 2; ++p)<br>            for (int q = -1; q &lt; 2; ++q){<br>              if (!p &amp;&amp; !q) continue;<br>              int xxx = xx+p, yyy = yy + q;<br>              if (xxx &lt; 0 || xxx &gt;= N || yyy &lt; 0 || yyy &gt;= M) continue;<br>              lv += grid[xxx][yyy] == '1';<br>            }<br>          int cs = 0;<br>          if (xx &gt;= 0 &amp;&amp; xx &lt; N &amp;&amp; yy &gt;= 0 &amp;&amp; yy &lt; M) cs = grid[xx][yy] == '1';<br>          if (cs &amp;&amp; (lv == 2 || lv == 3)) ab++;<br>          if (!cs &amp;&amp; lv == 3) ab++;<br>        }<br>      if (aa &gt; ab) grid[x][y] = '0';<br>      else grid[x][y] = '1';<br>    }<br>    int res = 0;<br>    for (int i = -1 ; i &lt;= N; ++i)<br>      for (int j = -1 ; j &lt;= M; ++j){<br>        int lv = 0;<br>        for (int p = -1; p &lt; 2; ++p)<br>          for (int q = -1; q &lt; 2; ++q){<br>            if (!p &amp;&amp; !q) continue;<br>            int x= i+p, y = q+j;<br>            if (x &lt; 0 || x &gt;= N || y &lt; 0 || y &gt;= M) continue;<br>            lv += grid[x][y] == '1';<br>          }<br>        int cs = 0;<br>        if (i &gt;= 0 &amp;&amp; i &lt; N &amp;&amp; j &gt;= 0 &amp;&amp; j &lt; M) cs = grid[i][j] == '1';<br>        if (cs &amp;&amp; (lv == 2 || lv == 3)) res++;<br>        if (!cs &amp;&amp; lv == 3) res++;<br>      }<br>    return res;<br>  }<br>};<br> <br> <br> <br>// Powered by FileEdit<br>// Powered by moj 4.16 [modified TZTester]<br>// Powered by CodeProcessor<br></td>