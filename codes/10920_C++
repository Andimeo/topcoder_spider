<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;ctime&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cstring&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cassert&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cctype&gt;<br> <br>#include &lt;algorithm&gt;<br>#include &lt;vector&gt;<br>#include &lt;set&gt;<br>#include &lt;map&gt;<br>#include &lt;string&gt;<br>#include &lt;queue&gt;<br>#include &lt;iostream&gt;<br>#include &lt;sstream&gt;<br>#include &lt;functional&gt;<br> <br>using namespace std;<br> <br>#define forn(i, n) for (int i = 0; i &lt; (int)(n); i++)<br>#define forit(i, a) for (__typeof((a).begin()) i = (a).begin(); i != (a).end(); i++)<br>#define sz(a) (int)(a).size()<br>#define all(a) (a).begin(), (a).end()<br>#define pb push_back<br>#define mp make_pair<br>#define zero(a) memset(a, 0, sizeof(a))<br> <br>typedef long long ll;<br>typedef vector &lt;int&gt; vi;<br>typedef pair &lt;int, int&gt; pii;<br>typedef vector &lt;string&gt; vs;<br> <br>class Sheep {<br>public:<br>  int minCapacity(int, int, vector &lt;string&gt;, vector &lt;string&gt;, vector &lt;string&gt;, vector &lt;string&gt;);<br>};<br> <br>string Str( vs v )<br>{<br>  string res = "";<br>  forn(i, sz(v))<br>    res += v[i];<br>  return res;<br>}<br> <br>const int maxn = 2010;<br> <br>int n, K, a[maxn];<br> <br>int Solve( int W )<br>{<br>  if (a[n - 1] &gt; W)<br>    return 0;<br> <br>  multiset &lt;int&gt; s;<br>  forn(i, n)<br>    s.insert(a[i]);<br> <br>  int num = 0;<br>  while (s.size())<br>  {<br>    if (num + sz(s) &lt;= K)<br>      return 1;<br>    num++;<br>    if (num &gt; K)<br>      return 0;<br> <br>    int rest = W;<br>    while (s.size())<br>    {<br>      set&lt;int&gt;::iterator it = s.upper_bound(rest);<br>      if (it == s.begin())<br>        break;<br>      it--;<br>      int w = *it;<br>      s.erase(it);<br>      rest -= w;<br>    }<br>  }<br>  return num &lt;= K;<br>}<br> <br>int Sheep::minCapacity(int _n, int _K, vector &lt;string&gt; part1, vector &lt;string&gt; part2, vector &lt;string&gt; part3, vector &lt;string&gt; part4)<br>{<br>  int start = clock();<br> <br>  n = _n, K = _K;<br>  string s1 = Str(part1);<br>  string s2 = Str(part2);<br>  string s3 = Str(part3);<br>  string s4 = Str(part4);<br>  string s = s1 + s2 + s3 + s4;<br>  stringstream ss(s);<br>  forn(i, n)<br>    assert(ss &gt;&gt; a[i]);<br>  sort(a, a + n);<br> <br>  int mi = 1, ma = (int)4e6, ave;<br>  while (mi &lt; ma)<br>    if (Solve(ave = (mi + ma) / 2))<br>      ma = ave;<br>    else<br>      mi = ave + 1;<br> <br>  int res = mi;<br>  for (int i = mi - 1; i &gt;= 1; i--)<br>  {<br>    if (clock() - start &gt; 1.85 * CLOCKS_PER_SEC)<br>      break;<br>    if (Solve(i))<br>      res = i;<br>  }<br>  return res;<br>}<br></td>