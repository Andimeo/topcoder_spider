<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br><br>public class Sheep {<br>    public int minCapacity(int numSheep, int maxRuns, String[] part1, String[] part2, String[] part3, String[] part4){<br>        long startTime = System.currentTimeMillis();<br>        StringBuilder s = new StringBuilder();<br>        for (String q : part1) {<br>            s.append(q);<br>        }<br>        for (String q : part2) {<br>            s.append(q);<br>        }<br>        for (String q : part3) {<br>            s.append(q);<br>        }<br>        for (String q : part4) {<br>            s.append(q);<br>        }<br>        String[] nums = s.toString().split(" ");<br>        int n = nums.length;<br>        if (n != numSheep) {<br>            System.err.println("n != numSheep");<br>        }<br>        int[] sheep = new int[n];<br>        for (int i = 0; i &lt; n; i++) {<br>            sheep[i] = Integer.parseInt(nums[i]);<br>        }<br>        Arrays.sort(sheep);<br><br>        int totalWeight = 0;<br>        for (int x : sheep) {<br>            totalWeight += x;<br>        }<br>        int minC = sheep[n - 1];<br>        int maxC = totalWeight;<br>        boolean[] b = new boolean[n];<br>        while (maxC - minC &gt; 1) {<br>            int midC = (minC + maxC) &gt;&gt; 1;<br>            if (numRuns(sheep, b, maxRuns, midC) &gt; maxRuns) {<br>                minC = midC;<br>            } else {<br>                maxC = midC;<br>            }<br>        }<br>        int ans = maxC;<br>        minC = sheep[n - 1];<br>        while (maxC &gt;= minC &amp;&amp; System.currentTimeMillis() - startTime &lt; 1900) {<br>            if (numRuns(sheep, b, maxRuns, maxC) &lt;= maxRuns) {<br>                ans = maxC;<br>            }<br>            maxC--;<br>        }<br>        return ans;<br>    }<br><br>    private static int numRuns(int[] a, boolean[] b, int maxRuns, int capacity) {<br>        Arrays.fill(b, false);<br>        int cnt = a.length;<br>        for (int i = 0; i &lt;= maxRuns; i++) {<br>            int remain = capacity;<br>            for (int j = a.length - 1; j &gt;= 0 &amp;&amp; remain &gt;= a[0]; j--) {<br>                if (!b[j] &amp;&amp; remain &gt;= a[j]) {<br>                    remain -= a[j];<br>                    b[j] = true;<br>                    cnt--;<br>                }<br>            }<br>            if (cnt == 0) {<br>                return i + 1;<br>            }<br>        }<br>        return maxRuns + 2;<br>    }<br><br><br>}<br></td>