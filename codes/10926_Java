<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.Arrays;<br><br>class Node implements Comparable&lt; Node &gt;<br>{<br>  int i1;<br>  int i2;<br>  int diff;<br><br>  public Node( int i1 , int i2 , int diff )<br>  {<br>    this.i1 = i1;<br>    this.i2 = i2;<br>    this.diff = diff;<br>  }<br><br>  public int compareTo( Node o )<br>  {<br>    return o.diff - this.diff;<br>  }<br><br>}<br><br>public class CrazyLine<br>{<br>  public static void main( String[ ] args )<br>  {<br>    <br>  }<br><br>  public static int maxCrazyness( int[ ] heights )<br>  {<br>    int n = heights.length;<br>    Node[ ] array = new Node[ ( n * ( n - 1 ) ) / 2 ];<br>    int counter = 0;<br>    for ( int i = 0 ; i &lt; n ; i++ )<br>    {<br>      for ( int j = i + 1 ; j &lt; n ; j++, counter++ )<br>      {<br>        array[ counter ] = new Node( i , j , Math.abs( heights[ i ] - heights[ j ] ) );<br>      }<br>    }<br>    Arrays.sort( array );<br>    int[ ] parents = new int[ array.length ];<br>    int[ ] wasVited = new int[ array.length ];<br>    Arrays.fill( parents , -1 );<br>    int r = 0;<br>    for ( int i = 0 ; i &lt; array.length ; i++ )<br>    {<br>      if ( wasVited[ array[ i ].i1 ] &gt;= 2 || wasVited[ array[ i ].i2 ] &gt;= 2 || findParent( array[ i ].i1 , parents ) == findParent( array[ i ].i2 , parents ) )<br>        continue;<br>      wasVited[ array[ i ].i1 ]++;<br>      wasVited[ array[ i ].i2 ]++;<br>      union( array[ i ].i1 , array[ i ].i2 , parents );<br>      r += array[ i ].diff;<br>    }<br>    return r;<br>  }<br><br>  public static void union( int index1 , int index2 , int[ ] parents )<br>  {<br>    int parent1 = findParent( index1 , parents );<br>    int parent2 = findParent( index2 , parents );<br>    if ( index1 == index2 )<br>    {<br>      return;<br>    }<br>    if ( parents[ parent1 ] &lt; parents[ parent2 ] )<br>    {<br>      parents[ parent1 ] += parents[ parent2 ];<br>      parents[ parent2 ] = parent1;<br>      parents[ index2 ] = parent1;<br>    }<br>    else<br>    {<br>      parents[ parent2 ] += parents[ parent1 ];<br>      parents[ parent1 ] = parent2;<br>      parents[ index1 ] = parent2;<br>    }<br>  }<br><br>  public static int findParent( int index , int[ ] parents )<br>  {<br>    while ( parents[ index ] &gt;= 0 )<br>    {<br>      index = parents[ index ];<br>    }<br>    return index;<br>  }<br>}<br></td>