<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections.Generic;<br><br>public class CuttingGlass {<br>  public int pieces(int W, int H, int startx, int starty, string[] program) {<br>    int x = startx, y = starty;<br>        bool[,] cuth = new bool[W+1, H+1];<br>        bool[,] cutv = new bool[W+1, H+1];<br>        for (int i = 0; i &lt; program.Length; i++)<br>        {<br>            for (int j = 0; j &lt; program[i].Length; j++)<br>            {<br>                switch (program[i][j])<br>                {<br>                    case 'L':<br>                        cuth[--x,y] = true;<br>                        break;<br>                    case 'R':<br>                        cuth[x++, y] = true;<br>                        break;<br>                    case 'U':<br>                        cutv[x, --y] = true;<br>                        break;<br>                    case 'D':<br>                        cutv[x, y++] = true;<br>                        break;<br>                }<br>            }<br>        }<br>        bool[,] done = new bool[W, H];<br>        int[,] q = new int[W * H, 2];<br>        int res = 0;<br>        for (int i = 0; i &lt; W; i++)<br>        {<br>            for (int j = 0; j &lt; H; j++)<br>            {<br>                if (done[i, j]) continue;<br>                res++;<br>                int qk = 0, qn = 1;<br>                q[0, 0] = i;<br>                q[0, 1] = j;<br>                done[i, j] = true;<br>                while (qk &lt; qn)<br>                {<br>                    x = q[qk, 0];<br>                    y = q[qk, 1];<br>                    qk++;<br>                    if (x &gt; 0 &amp;&amp; !cutv[x, y] &amp;&amp; !done[x - 1, y])<br>                    {<br>                        done[x - 1, y] = true;<br>                        q[qn, 0] = x - 1;<br>                        q[qn, 1] = y;<br>                        qn++;<br>                    }<br>                    if (x &lt; W - 1 &amp;&amp; !cutv[x + 1, y] &amp;&amp; !done[x + 1, y])<br>                    {<br>                        done[x + 1, y] = true;<br>                        q[qn, 0] = x + 1;<br>                        q[qn, 1] = y;<br>                        qn++;<br>                    }<br>                    if (y &gt; 0 &amp;&amp; !cuth[x, y] &amp;&amp; !done[x, y-1])<br>                    {<br>                        done[x, y-1] = true;<br>                        q[qn, 0] = x;<br>                        q[qn, 1] = y-1;<br>                        qn++;<br>                    }<br>                    if (y &lt; H - 1 &amp;&amp; !cuth[x, y+1] &amp;&amp; !done[x, y+1])<br>                    {<br>                        done[x, y+1] = true;<br>                        q[qn, 0] = x;<br>                        q[qn, 1] = y+1;<br>                        qn++;<br>                    }<br>                }<br>            }<br>        }<br>        return res;<br>  }<br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by CodeProcessor<br></td>