<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>import java.util.regex.*;<br>import java.text.*;<br>import java.math.*;<br>import java.io.*;<br> <br>public class CuttingGlass {<br>    boolean graph[][] = new boolean[2004][2004];<br>    int W, H;<br>    int dx[] = new int[]{1, -1, 0, 0};<br>    int dy[] = new int[]{0, 0, -1, 1};<br>    public int pieces(int w, int h, int startx, int starty, String[] program) {<br>        int ret = 0;<br>        for(int i = 0; i &lt; 2004; i++) Arrays.fill(graph[i], false);<br>        W = w*2;<br>        H = h*2;<br>        int x = startx*2;<br>        int y = starty*2;<br>        if(y &gt;= 0 &amp;&amp; y &lt; H &amp;&amp; x &gt;= 0 &amp;&amp; x &lt; W)<br>            graph[x][y] = true;<br> <br>        for(int i = 0; i &lt; program.length; i++) {<br>            for(int j = 0; j &lt; program[i].length(); j++) {<br>                char mv = program[i].charAt(j);<br>                if(mv == 'U') {<br>                    y--;<br>                    if(y &gt;= 0 &amp;&amp; y &lt; H &amp;&amp; x &gt;= 0 &amp;&amp; x &lt; W)<br>                        graph[x][y] = true;<br>                    y--;<br>                    if(y &gt;= 0 &amp;&amp; y &lt; H &amp;&amp; x &gt;= 0 &amp;&amp; x &lt; W)<br>                        graph[x][y] = true;<br> <br>                } else if(mv == 'D') {<br>                    y++;<br>                    if(y &gt;= 0 &amp;&amp; y &lt; H &amp;&amp; x &gt;= 0 &amp;&amp; x &lt; W)<br>                        graph[x][y] = true;<br>                    y++;<br>                    if(y &gt;= 0 &amp;&amp; y &lt; H &amp;&amp; x &gt;= 0 &amp;&amp; x &lt; W)<br>                        graph[x][y] = true;<br>                } else if(mv == 'R') {<br>                    x++;<br>                    if(y &gt;= 0 &amp;&amp; y &lt; H &amp;&amp; x &gt;= 0 &amp;&amp; x &lt; W)<br>                        graph[x][y] = true;<br>                    x++;<br>                    if(y &gt;= 0 &amp;&amp; y &lt; H &amp;&amp; x &gt;= 0 &amp;&amp; x &lt; W)<br>                        graph[x][y] = true;<br>                } else if(mv == 'L') {<br>                    x--;<br>                    if(y &gt;= 0 &amp;&amp; y &lt; H &amp;&amp; x &gt;= 0 &amp;&amp; x &lt; W)<br>                        graph[x][y] = true;<br>                    x--;<br>                    if(y &gt;= 0 &amp;&amp; y &lt; H &amp;&amp; x &gt;= 0 &amp;&amp; x &lt; W)<br>                        graph[x][y] = true;<br>                }<br>            }<br>        }<br> <br>        for(int i = 0; i &lt; W; i++) {<br>            for(int j = 0; j &lt; H; j++) {<br>                if(!graph[i][j]) {<br>                    bfs(i, j);<br>                    ret++;<br>                }<br>            }<br>        }<br> <br>    <br>        return ret;<br>    }<br>    public boolean valid(int x, int y) {<br>        if(x &lt; W &amp;&amp; x &gt;= 0 &amp;&amp; y &lt; H &amp;&amp; y &gt;= 0 &amp;&amp; !graph[x][y]) return true;<br>        return false;<br>    }<br>    public void bfs(int sx, int sy) {<br>        LinkedList&lt;Integer&gt; q = new LinkedList&lt;Integer&gt;();<br>        q.add(sx);<br>        q.add(sy);<br>        int x, y;<br>        int nx, ny;<br>        while(!q.isEmpty()) {<br>             x = q.poll();<br>             y = q.poll();<br>             graph[x][y] = true;<br>             for(int i = 0; i &lt; 4; i++) {<br>                nx = x + dx[i];<br>                ny = y + dy[i];<br>                if(valid(nx, ny)) {<br>                    graph[nx][ny] = true;<br>                    q.add(nx);<br>                    q.add(ny);<br>                }<br>             }<br>        }<br>    }<br> <br>}<br> <br> <br>// Powered by FileEdit<br>// Powered by CodeProcessor<br></td>