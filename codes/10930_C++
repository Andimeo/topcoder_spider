<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;map&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cstring&gt;<br>#include &lt;cassert&gt;<br>#include &lt;set&gt;<br>#include &lt;iostream&gt;<br>#include &lt;sstream&gt;<br>#include &lt;cstddef&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;utility&gt;<br>#include &lt;iterator&gt;<br>#include &lt;numeric&gt;<br>#include &lt;list&gt;<br>#include &lt;complex&gt;<br>#include &lt;climits&gt;<br> <br>using namespace std;<br> <br>typedef vector&lt;int&gt; vi;<br>typedef vector&lt;string&gt; vs;<br>typedef long long ll;<br>typedef complex&lt;double&gt; pnt;<br>typedef pair&lt;int, int&gt; pii;<br> <br>#define RA(x) (x).begin(), (x).end()<br>#define FE(i, x) for (typeof((x).begin()) i = (x).begin(); i != (x).end(); i++)<br>#define SZ(x) ((int) (x).size())<br> <br> <br>class BreakingChocolate<br>{<br>public:<br>    int minSteps(int W, int H, vector &lt;int&gt; sx, vector &lt;int&gt; sy);<br>};<br> <br>static unsigned char dp[85][85][85][85];<br>static vi xcuts;<br>static vi ycuts;<br>static int cover[85][85];<br> <br>int BreakingChocolate::minSteps(int W, int H, vector &lt;int&gt; sx, vector &lt;int&gt; sy)<br>{<br>    memset(dp, 0, sizeof(dp));<br>    memset(cover, 0, sizeof(cover));<br>    xcuts.clear();<br>    ycuts.clear();<br>    int N = SZ(sx);<br> <br>    xcuts.push_back(0);<br>    xcuts.push_back(W);<br>    ycuts.push_back(0);<br>    ycuts.push_back(H);<br>    for (int i = 0; i &lt; N; i++)<br>    {<br>        xcuts.push_back(sx[i] - 1);<br>        xcuts.push_back(sx[i]);<br>        ycuts.push_back(sy[i] - 1);<br>        ycuts.push_back(sy[i]);<br>    }<br>    sort(RA(xcuts));<br>    sort(RA(ycuts));<br>    xcuts.resize(unique(RA(xcuts)) - xcuts.begin());<br>    ycuts.resize(unique(RA(ycuts)) - ycuts.begin());<br>    for (int i = 0; i &lt; N; i++)<br>    {<br>        sx[i] = lower_bound(RA(xcuts), sx[i] - 1) - xcuts.begin();<br>        sy[i] = lower_bound(RA(ycuts), sy[i] - 1) - ycuts.begin();<br>        cover[sx[i] + 1][sy[i] + 1]++;<br>    }<br>    W = xcuts.size() - 1;<br>    H = ycuts.size() - 1;<br> <br>    for (int i = 1; i &lt;= W; i++)<br>        for (int j = 1; j &lt;= H; j++)<br>        {<br>            cover[i][j] += cover[i - 1][j] + cover[i][j - 1] - cover[i - 1][j - 1];<br>        }<br> <br>    for (int r1 = W - 1; r1 &gt;= 0; r1--)<br>        for (int r2 = r1 + 1; r2 &lt;= W; r2++)<br>            for (int c1 = H - 1; c1 &gt;= 0; c1--)<br>                for (int c2 = c1 + 1; c2 &lt;= H; c2++)<br>                {<br>                    int spec = cover[r2][c2] - cover[r1][c2] - cover[r2][c1] + cover[r1][c1];<br>                    if (spec == 0 || spec == (c2 - c1) * (r2 - r1))<br>                    {<br>                        dp[r1][r2][c1][c2] = 0;<br>                        continue;<br>                    }<br> <br>                    int best = INT_MAX;<br>                    for (int p = r1 + 1; p &lt; r2; p++)<br>                    {<br>                        best = min(best, 1 + dp[r1][p][c1][c2] + dp[p][r2][c1][c2]);<br>                    }<br>                    for (int p = c1 + 1; p &lt; c2; p++)<br>                    {<br>                        best = min(best, 1 + dp[r1][r2][c1][p] + dp[r1][r2][p][c2]);<br>                    }<br>                    dp[r1][r2][c1][c2] = best;<br>                }<br>    return dp[0][W][0][H];<br>}<br> <br> <br>// Powered by FileEdit<br></td>