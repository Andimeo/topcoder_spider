<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;vector&gt;<br>#include &lt;list&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;queue&gt;<br>#include &lt;deque&gt;<br>#include &lt;stack&gt;<br>#include &lt;bitset&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;functional&gt;<br>#include &lt;numeric&gt;<br>#include &lt;utility&gt;<br>#include &lt;sstream&gt;<br>#include &lt;iostream&gt;<br>#include &lt;iomanip&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;ctime&gt;<br>#include &lt;cstring&gt;<br>#include &lt;cassert&gt;<br> <br>using namespace std;<br> <br>typedef long long LL;<br> <br>const int MD = 1000000009;<br> <br>const int N = 200005;<br> <br>LL factorial[N];<br>LL rFactorial[N];<br> <br>LL pot(LL a, LL b) {<br>  LL res = 1;<br>  for (; b &gt; 0; b &gt;&gt;= 1) {<br>    if (b &amp; 1) res = (res * a) % MD;<br>    a = (a * a) % MD;<br>  }<br>  return res;<br>}<br> <br>LL rev(LL x) {<br>  return pot(x, MD - 2);<br>}<br> <br>LL binomial(int n, int k) {<br>  if (k &lt; 0 || k &gt; n)<br>    return 0;<br>  return ( ((factorial[n] * rFactorial[k]) % MD) * rFactorial[n - k]) % MD;<br>}<br> <br>int n, l, u, d;<br> <br>class Passwords {<br>public:<br>   int countValid( int N, int L, int U, int D ) {<br>     n = N;<br>     l = L;<br>     u = U;<br>     d = D;<br>     if (l + u + d &gt; n)<br>       return 0;<br>     factorial[0] = rFactorial[0] = 1;<br>     for (int i = 1; i &lt;= n; ++i) {<br>       factorial[i] = (factorial[i - 1] * i) % MD;<br>       rFactorial[i] = rev(factorial[i]);<br>     }<br>     int mn = u, mx = u;<br>     LL ways = 0;<br>     LL res = 0;<br>     for (int i = u + l; i &lt;= n - d; ++i) {<br>       if (i == u + l) {<br>         for (int j = mn; j &lt;= mx; ++j)<br>           ways = (ways + binomial(i, j)) % MD;<br>       } else {<br>         ++mx;<br>         ways = (2 * ways + binomial(i - 1, mn - 1) + binomial(i - 1, mx)) % MD;<br>       }<br>       LL cur = (binomial(n, i) * ways) % MD;<br>       cur = (cur * pot(26, i)) % MD;<br>       cur = (cur * pot(10, n - i)) % MD;<br>       res = (res + cur) % MD;<br>     }<br>     return res;<br>   }<br>};<br> <br> <br> <br>// Powered by FileEdit<br>// Powered by moj 4.16 [modified TZTester]<br> <br>// Powered by CodeProcessor<br></td>