<td class="problemText" colspan="8" valign="middle" align="left">
            import java.math.BigInteger;<br><br>public class Passwords {<br>  private static final long MOD = 1000000009;<br>  private static final BigInteger BMOD = new BigInteger("" + MOD);<br><br>  public int countValid(int N, int L, int U, int D) {<br>    long[] f = new long[N + 1];<br>    long[] fr = new long[N + 1];<br>    long[] d = new long[N + 1];<br>    long[] a = new long[N + 1];<br>    d[0] = 1;<br>    a[0] = 1;<br>    f[0] = 1;<br>    fr[0] = 1;<br>    for (int i = 1; i &lt;= N; i++) {<br>      f[i] = (f[i - 1] * i) % MOD;<br>      fr[i] = (fr[i - 1] * new BigInteger(i + "").modInverse(BMOD).longValue()) % MOD;<br>      d[i] = (d[i - 1] * 10) % MOD;<br>      a[i] = (a[i - 1] * 26) % MOD;<br>    }<br>    long[] q1 = new long[N + 1];<br>    long[] q2 = new long[N + 1];<br>    long[] q3 = new long[N + 1];<br>    long[] q = new long[N + 1];<br>    if (L == 0 &amp;&amp; U == 0 &amp;&amp; D == 0)<br>      q[0] = 1;<br>    if (L == 0 &amp;&amp; U == 0)<br>      q1[0] = 1;<br>    if (L == 0 &amp;&amp; D == 0)<br>      q2[0] = 1;<br>    if (U == 0 &amp;&amp; D == 0)<br>      q3[0] = 1;<br>    for (int i = 1; i &lt;= N; i++) {<br>      q1[i] = (q1[i - 1] * 52) % MOD;<br>      if (i &gt;= L + U &amp;&amp; L &gt; 0) {<br>        long cur = (a[i - L] * a[L]) % MOD;<br>        cur = (cur * f[i - 1]) % MOD;<br>        cur = (cur * fr[L - 1]) % MOD;<br>        cur = (cur * fr[i - L]) % MOD;<br>        q1[i] = (q1[i] + cur) % MOD;<br>      }<br>      if (i &gt;= L + U &amp;&amp; U &gt; 0) {<br>        long cur = (a[i - U] * a[U]) % MOD;<br>        cur = (cur * f[i - 1]) % MOD;<br>        cur = (cur * fr[U - 1]) % MOD;<br>        cur = (cur * fr[i - U]) % MOD;<br>        q1[i] = (q1[i] + cur) % MOD;<br>      }<br>    }<br>    for (int i = 1; i &lt;= N; i++) {<br>      q2[i] = (q2[i - 1] * 36) % MOD;<br>      if (i &gt;= L + D &amp;&amp; L &gt; 0) {<br>        long cur = (d[i - L] * a[L]) % MOD;<br>        cur = (cur * f[i - 1]) % MOD;<br>        cur = (cur * fr[L - 1]) % MOD;<br>        cur = (cur * fr[i - L]) % MOD;<br>        q2[i] = (q2[i] + cur) % MOD;<br>      }<br>      if (i &gt;= L + D &amp;&amp; D &gt; 0) {<br>        long cur = (a[i - D] * d[D]) % MOD;<br>        cur = (cur * f[i - 1]) % MOD;<br>        cur = (cur * fr[D - 1]) % MOD;<br>        cur = (cur * fr[i - D]) % MOD;<br>        q2[i] = (q2[i] + cur) % MOD;<br>      }<br>    }<br>    for (int i = 1; i &lt;= N; i++) {<br>      q3[i] = (q3[i - 1] * 36) % MOD;<br>      if (i &gt;= U + D &amp;&amp; U &gt; 0) {<br>        long cur = (d[i - U] * a[U]) % MOD;<br>        cur = (cur * f[i - 1]) % MOD;<br>        cur = (cur * fr[U - 1]) % MOD;<br>        cur = (cur * fr[i - U]) % MOD;<br>        q3[i] = (q3[i] + cur) % MOD;<br>      }<br>      if (i &gt;= U + D &amp;&amp; D &gt; 0) {<br>        long cur = (a[i - D] * d[D]) % MOD;<br>        cur = (cur * f[i - 1]) % MOD;<br>        cur = (cur * fr[D - 1]) % MOD;<br>        cur = (cur * fr[i - D]) % MOD;<br>        q3[i] = (q3[i] + cur) % MOD;<br>      }<br>    }<br>    for (int i = 1; i &lt;= N; i++) {<br>      q[i] = (q[i - 1] * 62) % MOD;<br>      if (L &gt; 0 &amp;&amp; i &gt;= L) {<br>        long cur = q3[i - L];<br>        cur = (cur * a[L]) % MOD;<br>        cur = (cur * f[i - 1]) % MOD;<br>        cur = (cur * fr[L - 1]) % MOD;<br>        cur = (cur * fr[i - L]) % MOD;<br>        q[i] = (q[i] + cur) % MOD;<br>      }<br>      if (U &gt; 0 &amp;&amp; i &gt;= U) {<br>        long cur = q2[i - U];<br>        cur = (cur * a[U]) % MOD;<br>        cur = (cur * f[i - 1]) % MOD;<br>        cur = (cur * fr[U - 1]) % MOD;<br>        cur = (cur * fr[i - U]) % MOD;<br>        q[i] = (q[i] + cur) % MOD;<br>      }<br>      if (D &gt; 0 &amp;&amp; i &gt;= D) {<br>        long cur = q1[i - D];<br>        cur = (cur * d[D]) % MOD;<br>        cur = (cur * f[i - 1]) % MOD;<br>        cur = (cur * fr[D - 1]) % MOD;<br>        cur = (cur * fr[i - D]) % MOD;<br>        q[i] = (q[i] + cur) % MOD;<br>      }<br>    }<br>    return (int) q[N];<br>  }<br><br><br>}<br><br><br><br>// Powered by FileEdit<br>// Powered by moj 4.16 [modified TZTester]<br>// Powered by CodeProcessor<br></td>