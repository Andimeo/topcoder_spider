<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;vector&gt;<br>#include &lt;list&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;deque&gt;<br>#include &lt;stack&gt;<br>#include &lt;bitset&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;functional&gt;<br>#include &lt;numeric&gt;<br>#include &lt;utility&gt;<br>#include &lt;sstream&gt;<br>#include &lt;iostream&gt;<br>#include &lt;iomanip&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;ctime&gt;<br><br>#define rep(i, n) for (int i = 0; i &lt; (int)(n); ++i)<br>#define mp make_pair<br>#define pb push_back<br><br>#define X first<br>#define Y second<br><br>typedef long long ll;<br><br>const ll INF = 1LL &lt;&lt; 60;<br><br>using namespace std;<br><br>class DiscreteConvexHull {<br>public:<br>  long long minArea(vector &lt;string&gt;);<br>};<br><br><br>long long DiscreteConvexHull::minArea(vector &lt;string&gt; cells) {<br>  vector&lt;pair&lt;ll, ll&gt; &gt; ps;<br>  rep (i, cells.size()) {<br>    stringstream ss(cells[i]);<br>    for (string s; ss &gt;&gt; s; ) {<br>      int x, y;<br>      sscanf(s.c_str(), "%d,%d", &amp;x, &amp;y);<br>      ps.pb(mp(x, y));<br>    }<br>  }<br>  int N = ps.size();<br><br>  sort(ps.begin(), ps.end());<br>  ll ans = 0;<br>  <br>  ll prvx = -1;<br>  ll ylb, yub;  // [ylb, yub]<br>  ylb = INF;<br>  yub = -INF;<br><br>  int i = 0;<br>  while (i &lt; N) {<br>    ll x = ps[i].X;<br><br>    if (prvx != -1) {<br>      ans += (x - prvx - 1) * (yub - ylb + 1);<br>      // printf("%lld-%lld: %lld (%lld-%lld)\n", prvx + 1, x - 1, (yub - ylb + 1), ylb, yub);<br>    }<br>    <br>    for (; i &lt; N &amp;&amp; ps[i].X == x; ++i) {<br>      // printf(" processing: i=%d\n", i);<br>      ylb = min(ylb, ps[i].Y);<br>      yub = max(yub, ps[i].Y);<br>    }<br>    ans += yub - ylb + 1;<br>    // printf("%lld: %lld (%lld-%lld)\n", x, yub - ylb + 1, ylb, yub);<br><br>    ll tylb = INF, tyub = -INF;<br>    for (int j = i; j &lt; N; ++j) {<br>      tylb = min(tylb, ps[j].Y);<br>      tyub = max(tyub, ps[j].Y);<br>      // printf(" incoming: %d: %lld %lld\n", j, ps[j].X, ps[j].Y);<br>    }<br>    //printf(" still: %lld-%lld\n", tylb, tyub);<br>    ylb = min(yub, max(ylb, tylb));<br>    yub = max(ylb, min(yub, tyub));<br>    prvx = x;<br>  }<br><br>  return ans;<br>}<br><br>//Powered by [KawigiEditNonTest] modified by pivanof!<br><br><br>// Powered by FileEdit<br></td>