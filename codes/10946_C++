<td class="problemText" colspan="8" valign="middle" align="left">
            #include&lt;iostream&gt;<br>#include&lt;cstring&gt;<br>#include&lt;algorithm&gt;<br>#include&lt;sstream&gt;<br>#include&lt;string&gt;<br>#include&lt;vector&gt;<br>#include&lt;cmath&gt;<br>#include&lt;cstdio&gt;<br>#include&lt;cstdlib&gt;<br>#include&lt;fstream&gt;<br>#include&lt;cassert&gt;<br>#include&lt;numeric&gt;<br>#include&lt;set&gt;<br>#include&lt;map&gt;<br>#include&lt;queue&gt;<br>#include&lt;list&gt;<br>#include&lt;deque&gt;<br>using namespace std;<br> <br>#define FOR(i,a,b) for(int i = (a); i &lt; (b); ++i)<br>#define REP(i,n) FOR(i,0,n)<br>#define sz size()<br> <br>struct SnowPlow<br>{<br>  int solve(vector &lt;string&gt; roads)<br>  {<br>        int N;<br>        int reach[50][50];<br>        N = roads.sz;<br>        REP(i,N) REP(j,N) reach[i][j] = (i == j || roads[i][j] != '0');<br>        REP(k,N) REP(i,N) REP(j,N) reach[i][j] = reach[i][j] || (reach[i][k] &amp;&amp; reach[k][j]);<br>        REP(i,N) REP(j,N) if(roads[i][j] != '0' &amp;&amp; !reach[0][i]) return -1;<br>        int ret = 0;<br>        REP(i,N) REP(j,N) ret += roads[i][j] - '0';<br>        return ret;<br>  }<br>};<br> <br> <br> <br>// Powered by FileEdit<br>// Powered by moj 4.12 [modified TZTester]<br>// Powered by CodeProcessor<br></td>