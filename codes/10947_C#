<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections;<br>using System.Collections.Generic;<br>using System.Collections.Specialized;<br>using System.Text;<br>using System.Text.RegularExpressions;<br> <br>public class TwoSidedCards<br>{<br>    static long MOD = 1000000007;<br>    static long inverse_2 = 500000004;<br>    void doIt(int n, long[] f, int length)<br>    {<br>        if (length == 1)<br>            return;<br>        long[, ,] g = new long[length, n + 1, 2];<br>        for (int i = 0; i &lt;= n; ++i)<br>            g[0, i, 0] = (f[i] * 2) % MOD;<br>        for (int k = 1; k &lt; length; ++k)<br>            for (int i = 0; i &lt;= n; ++i)<br>            {<br>                g[k, i, 0] = (g[k - 1, i, 0] + g[k - 1, i, 1]) % MOD;<br>                g[k, i, 1] = g[k - 1, i, 1];<br>                if (i - 1 &gt;= 0)<br>                    g[k, i, 1] = (g[k, i, 1] + g[k - 1, i - 1, 0]) % MOD;<br>            }<br>        for (int i = 0; i &lt;= n; ++i)<br>            f[i] = (g[length - 1, i, 0] + g[length - 1, i, 1] - f[i] + MOD) % MOD;<br>    }<br>    public int theCount(int[] A, int[] B)<br>    {<br>        int n = A.Length;<br>        int[] permutation = new int[n];<br>        for (int i = 0; i &lt; n; ++i)<br>        {<br>            permutation[A[i] - 1] = B[i] - 1;<br>        }<br>        bool[] used = new bool[n];<br>        long[] f = new long[n + 1];<br>        f[0] = 1;<br>        for (int i = 0; i &lt; n; ++i)<br>            if (!used[i])<br>            {<br>                int length = 0;<br>                for (int j = i; !used[j]; j = permutation[j])<br>                {<br>                    used[j] = true;<br>                    ++length;<br>                }<br>                doIt(n, f, length);<br>            }<br>        long results = 0;<br>        long factorial = 1;<br>        for (int i = 1; i &lt;= n; ++i)<br>            factorial = (factorial * i) % MOD;<br>        for (int i = 0; i &lt;= n; ++i)<br>            if (f[i] &gt; 0)<br>            {<br>                long cnt = f[i] % MOD * factorial % MOD;<br>                for (int j = 0; j &lt; i; ++j)<br>                    cnt = (cnt * inverse_2) % MOD;<br>                results = (results + cnt) % MOD;<br>            }<br>        return (int)results;<br>    }<br>}<br></td>