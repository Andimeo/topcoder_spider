<td class="problemText" colspan="8" valign="middle" align="left">
            //  SRM 472 (B)<br><br>#include &lt;cstdio&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cstring&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cassert&gt;<br>#include &lt;iostream&gt;<br>#include &lt;sstream&gt;<br>#include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;queue&gt;<br>#include &lt;set&gt;<br>#include &lt;map&gt;<br>#include &lt;utility&gt;<br>#include &lt;numeric&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;bitset&gt;<br>#include &lt;complex&gt;<br><br>using namespace std;<br><br>typedef unsigned uint;<br>typedef long long Int;<br>typedef vector&lt;int&gt; vint;<br>typedef vector&lt;string&gt; vstr;<br>typedef pair&lt;int,int&gt; pint;<br>#define mp make_pair<br><br>template&lt;class T&gt; void pv(T a, T b) { for (T i = a; i != b; ++i) cout &lt;&lt; *i &lt;&lt; " "; cout &lt;&lt; endl; }<br><br>const Int MO = 1000000007;<br>const Int H = (MO + 1) / 2;<br>void pl(Int &amp;t, Int f) { (t += f) %= MO; }<br><br>int uf[60];<br>int root(int x) { return (uf[x] &lt; 0) ? x : (uf[x] = root(uf[x])); }<br>bool conn(int x, int y) {<br>  x = root(x); y = root(y);<br>  if (x == y) return 0;<br>  if (uf[x] &gt; uf[y]) swap(x, y);<br>  uf[x] += uf[y]; uf[y] = x;<br>  return 1;<br>}<br><br>Int dp[60][60][2][2][60];<br>Int CC[60][60];<br>Int C[60];<br><br>Int bn[60][60];<br><br>struct TwoSidedCards {<br>  <br>  int theCount(vector &lt;int&gt; A, vector &lt;int&gt; B) {<br>    int N = A.size();<br>    int i, j, k, kk;<br>    int a, b, bb;<br>    <br>    for (i = 0; i &lt;= N; ++i) {<br>      bn[i][0] = bn[i][i] = 1;<br>      for (j = 1; j &lt; i; ++j) {<br>        pl(bn[i][j], bn[i - 1][j - 1] + bn[i - 1][j]);<br>      }<br>    }<br>    <br>    for (i = 1; i &lt;= N; ++i) {<br>      dp[i][1][0][0][0] = 1;<br>      dp[i][1][1][1][0] = 1;<br>      for (j = 1; j &lt; i; ++j) for (a = 0; a &lt; 2; ++a) for (b = 0; b &lt; 2; ++b) {<br>        for (k = 0; k &lt;= i; ++k) {<br>          for (bb = 0; bb &lt; 2; ++bb) {<br>            kk = k + ((b == 1 &amp;&amp; bb == 0) ? 1 : 0);<br>            pl(dp[i][j + 1][a][bb][kk], dp[i][j][a][b][k]);<br>          }<br>        }<br>      }<br>      for (a = 0; a &lt; 2; ++a) for (b = 0; b &lt; 2; ++b) {<br>        for (k = 0; k &lt;= i; ++k) {<br>          kk = k + ((b == 1 &amp;&amp; a == 0) ? 1 : 0);<br>          pl(CC[i][kk], dp[i][i][a][b][k]);<br>        }<br>      }<br>      --CC[i][0];<br>//cout&lt;&lt;"i = "&lt;&lt;i&lt;&lt;endl;pv(CC[i],CC[i]+10);<br>      for (k = 0; k &lt;= i; ++k) {<br>        Int tmp = 1;<br>        for (j = 1; j &lt;= i; ++j) {<br>          tmp *= j;<br>          tmp %= MO;<br>        }<br>        for (j = 0; j &lt; k; ++j) {<br>          tmp *= H;<br>          tmp %= MO;<br>        }<br>        pl(C[i], CC[i][k] * tmp);<br>      }<br>    }<br>    <br>    memset(uf, ~0, sizeof(uf));<br>    for (i = 0; i &lt; N; ++i) {<br>      conn(A[i] - 1, B[i] - 1);<br>    }<br>    <br>    Int ans = 1;<br>    int lot = N;<br>    for (i = 0; i &lt; N; ++i) if (uf[i] &lt; 0) {<br>      ans *= C[-uf[i]];<br>      ans %= MO;<br>      ans *= bn[lot][-uf[i]];<br>      ans %= MO;<br>      lot -= -uf[i];<br>    }<br>    <br>    return ans;<br>    <br>  }<br>  <br>};<br></td>