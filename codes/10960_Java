<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>import java.util.regex.*;<br>import java.text.*;<br>import java.math.*;<br>import java.awt.geom.*;<br> <br>public class SquaresCovering<br>{<br>  final int oo=Integer.MAX_VALUE;<br>  <br>  int N;<br>  int[] X,Y;<br>  <br>  int CSn;<br>  pair[] CS;<br>  <br>  int[] memo;<br>  int[] memo2;<br>  <br>  <br>  public int minCost(int[] x, int[] y, int[] cost, int[] sides)<br>  {<br>    N=x.length;<br>    X=x; Y=y;<br>    <br>    CSn=cost.length;<br>    CS=new pair[CSn];<br>    for (int i=0; i&lt;CSn; ++i)<br>      CS[i]=new pair(cost[i],sides[i]);<br>    Arrays.sort(CS); // not needed...<br>    <br>    memo=new int[1&lt;&lt;N];<br>    memo2=new int[1&lt;&lt;N];<br>    Arrays.fill(memo, -1);<br>    Arrays.fill(memo2, -2);<br>    <br>    return go((1&lt;&lt;N)-1);<br>  }<br>  <br>  int go(int set)<br>  {<br>    if (set==0) return 0;<br>    if (memo[set]&gt;-1) return memo[set];<br>    <br>    int res=oo;<br>    for (int sub=set; sub&gt;0; sub=(sub-1)&amp;set)<br>    {<br>      int cost=getMin(sub);<br>      if (cost==-1) continue; // no square large enough to cover these points<br>      int tmp=go(set-sub);<br>      if (tmp&lt;oo)<br>      {<br>        res=Math.min(res, tmp+cost);<br>      }<br>    }<br>    <br>    return memo[set]=res;<br>    <br>  }<br>  <br>  int getMin(int set)<br>  {<br>    if (memo2[set]&gt;-2) return memo2[set];<br>    int x=oo,xx=-oo,y=oo,yy=-oo;<br>    for (int i=0; i&lt;N; ++i)<br>      if (on(set,i))<br>      {<br>        x=Math.min(x, X[i]);<br>        xx=Math.max(xx, X[i]);<br>        y=Math.min(y, Y[i]);<br>        yy=Math.max(yy, Y[i]);<br>      }<br>    <br>    int need=Math.max(xx-x, yy-y);<br>    int min=oo;<br>    for (int i=0; i&lt;CSn; ++i)<br>      if (CS[i].len&gt;=need)<br>        min=Math.min(min,CS[i].cost);<br>    if (min==oo) min=-1;<br>    return memo2[set]=min;<br>  }<br>  <br>  boolean on(int set, int loc)<br>  {<br>    return (set&amp;(1&lt;&lt;loc))&gt;0;<br>  }<br>  <br>  class pair implements Comparable&lt;pair&gt;<br>  {<br>    int cost,len;<br>    pair(int cost,int len)<br>    {<br>      this.cost=cost;<br>      this.len=len;<br>    }<br>    <br>    public int compareTo(pair o)<br>    {<br>      int z=len-o.len;<br>      if (z==0) z=cost-o.cost;<br>      return z;<br>    }<br>  }<br> <br>  <br>}<br> <br> <br>// Powered by FileEdit<br>// Powered by CodeProcessor<br></td>