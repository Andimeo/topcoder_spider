<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections;<br>using System.Collections.Generic;<br><br>/// &lt;summary&gt;<br>/// [0..maxValue]<br>/// &lt;/summary&gt;<br>public class Fenwick<br>{<br>    private int[] _h;<br>    private int _maxn;<br><br>    public Fenwick(int maxValue)<br>    {<br>        _maxn = maxValue;<br>        _h = new int[maxValue + 1];<br>    }<br><br>    private int prev(int x)<br>    {<br>        return x &amp; (x + 1);<br>    }<br><br>    private int next(int x)<br>    {<br>        return x | (x + 1);<br>    }<br><br>    public void Modify(int x, int valueToAdd)<br>    {<br>        while (x &lt;= _maxn)<br>        {<br>            _h[x] += valueToAdd;<br>            x = next(x);<br>        }<br>    }<br><br>    public int Sum(int l, int r)<br>    {<br>        int res = 0;<br>        while (r &gt;= 0)<br>        {<br>            res += _h[r];<br>            r = prev(r) - 1;<br>        }<br>        --l;<br>        while (l &gt;= 0)<br>        {<br>            res -= _h[l];<br>            l = prev(l) - 1;<br>        }<br>        return res;<br>    }<br><br>    /// &lt;summary&gt;<br>    /// Returns k-th element (1-based) or -1 if less than k elements<br>    /// &lt;/summary&gt;<br>    public int kthElement(int k)<br>    {<br>        if (_h[0] &gt;= k) return 0;<br>        if (Sum(0, _maxn) &lt; k) return -1;<br>        int ll = 0, hh = _maxn, mm;<br>        while (ll + 1 &lt; hh)<br>        {<br>            mm = (ll + hh) / 2;<br>            if (Sum(0, mm) &gt;= k) hh = mm; else ll = mm;<br>        }<br>        return hh;<br>    }<br>}<br><br>public class RightTriangle<br>{<br>    public long triangleCount(int places, int points, int a, int b, int c)<br>    {<br>        if (places % 2 == 1) return 0;<br><br>        Fenwick h = new Fenwick(places);<br>        for (int i = 0; i &lt; points; i++)<br>        {<br>            int p = ((int)(((long)(((long)a * (long)i) % places) * (long)i) % places + ((long)b * (long)i) % places + c)) % places;<br>            int next = -1;<br>            if (h.Sum(p, places - 1) == places - p)<br>            {<br>                p = 0;<br>                if (h.Sum(p, p) == 0)<br>                {<br>                    next = p;<br>                }<br>                else<br>                {<br>                    int l = p, r = places - 1;<br>                    while (l + 1 &lt; r)<br>                    {<br>                        int m = (l + r) / 2;<br>                        if (h.Sum(p, m) == m - p + 1) l = m; else r = m;<br>                    }<br>                    next = r;<br>                }<br>            }<br>            else<br>            {<br>                if (h.Sum(p, p) == 0)<br>                {<br>                    next = p;<br>                }<br>                else<br>                {<br>                    int l = p, r = places - 1;<br>                    while (l + 1 &lt; r)<br>                    {<br>                        int m = (l + r) / 2;<br>                        if (h.Sum(p, m) == m - p + 1) l = m; else r = m;<br>                    }<br>                    next = r;<br>                }<br>            }<br>            h.Modify(next, 1);<br>        }<br><br><br><br>        long res = 0;<br><br>        for (int i = 0; i &lt; places / 2; i++)<br>        {<br>            if (h.Sum(i, i) == 1 &amp;&amp; h.Sum(i + places / 2, i + places / 2) == 1) res += points - 2;<br>        }<br><br>        return res;<br>    }<br><br>}<br><br><br> <br>// Powered by moj 4.16 [modified TZTester]<br>// Powered by CleanSharp 1.0<br>// Powered by CodeProcessor<br></td>