<td class="problemText" colspan="8" valign="middle" align="left">
            #include&lt;iostream&gt;<br>#include&lt;set&gt;<br>#include&lt;map&gt;<br>#include&lt;string&gt;<br>#include&lt;stdio.h&gt;<br>#include&lt;sstream&gt;<br>#include&lt;algorithm&gt;<br>#include&lt;sstream&gt;<br>#include&lt;queue&gt;<br>#include&lt;cmath&gt;<br>using namespace std ;<br>#define INF (int)1e9<br>typedef pair&lt;int,int&gt; P ;<br>#define MOD 1000000009<br>int ncr[1002][1002] ;<br> <br>int memo[35][35][1002] ;<br>int solve(int n,int m,int r)<br>{<br> int i,j,ret = 0 ;<br> if(memo[n][m][r] != -1) return memo[n][m][r] ;<br> for(i=0;i&lt;=n;i++)<br>  for(j=0;j&lt;=m;j++)<br>  {<br>   int c = ncr[(n-i)*(m-j)][r] ;<br>   c = (1LL * c * ncr[n][i])%MOD ;<br>   c = (1LL * c * ncr[m][j])%MOD ;<br>   if((i+j)%2 == 0) ret += c ;<br>   else ret -= c ;<br>   if(ret &gt;= MOD) ret -= MOD ;<br>   else if(ret &lt; 0) ret += MOD ;<br>  }<br> return memo[n][m][r] = ret ;<br>}<br> <br>vector&lt;int&gt; c ;<br>int memo1[35][35][35] ;<br>int solve1(int n,int m,int k)<br>{<br> if(k == c.size()) return 1 ;<br> if(memo1[n][m][k] != -1) return memo1[n][m][k] ;<br> int i,j,ret = 0 ;<br> for(i=1;i&lt;=n;i++)<br>  for(j=1;j&lt;=m;j++)<br>  {<br>   int ways = (1LL * ncr[n][i] * ncr[m][j])%MOD ;<br>   ways = (1LL * ways * solve(i,j,c[k]))%MOD ;<br>   ways = (1LL * ways * solve1(n-i,m-j,k+1))%MOD ;<br>   ret += ways ;<br>   if(ret &gt;= MOD) ret -= MOD ;<br>  }<br> return memo1[n][m][k] = ret ;<br>}<br> <br>class RooksParty<br>{<br> public :<br> int countArrangements(int n,int m,vector&lt;int&gt; _c)<br> {<br>  int i,j,k ;<br>  <br>  ncr[0][0] = 1 ;<br>  for(i=1;i&lt;1002;i++)<br>  {<br>   ncr[i][0] = ncr[i][i] = 1 ;<br>   for(j=1;j&lt;i;j++)<br>   {<br>    ncr[i][j] = ncr[i-1][j] + ncr[i-1][j-1] ;<br>    ncr[i][j] %= MOD ;<br>   }<br>  }<br> <br>  memset(memo,255,sizeof memo) ;<br>  memset(memo1,255,sizeof memo1) ;<br>  <br>  c = _c ;<br>  int ret =  solve1(n,m,0) ;<br>  return ret ;<br> }<br>} ;<br></td>