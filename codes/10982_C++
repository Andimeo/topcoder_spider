<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;vector&gt;<br>#include &lt;list&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;deque&gt;<br>#include &lt;queue&gt;<br>#include &lt;stack&gt;<br>#include &lt;bitset&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;functional&gt;<br>#include &lt;numeric&gt;<br>#include &lt;utility&gt;<br>#include &lt;sstream&gt;<br>#include &lt;iostream&gt;<br>#include &lt;iomanip&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cctype&gt;<br>#include &lt;string&gt;<br>#include &lt;cstring&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;ctime&gt;<br><br>using namespace std;<br><br>#define SIZE(X) ((int)(X.size()))<br><br>class LinearKingdomParkingLot<br>{<br>public:<br>  int a[60];<br>  int n;<br>  int f[60][60][60];<br>  int solve(int d,int p1,int p2)<br>  {<br>    if (d==n)<br>      return 0;<br>    int &amp;ret=f[d][p1][p2];<br>    if (ret&gt;=0)<br>      return ret;<br>    int t1=solve(d+1,min(p1,a[d]),p2)+(int)(a[d]&gt;p1);<br>    int t2=solve(d+1,p1,min(p2,a[d]))+(int)(a[d]&gt;p2);<br>    return ret=min(t1,t2);<br>  }<br>  int borrowKeys(vector &lt;int&gt; vi)<br>  {<br>    n=SIZE(vi);<br>    for (int i=0;i&lt;n;i++)<br>      a[i]=vi[i];<br>    memset(f,255,sizeof(f));<br>    int ret=solve(0,n,n);<br>    return ret;<br>  }<br>};<br></td>