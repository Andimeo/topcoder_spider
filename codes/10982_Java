<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br> <br>public class LinearKingdomParkingLot {<br>    int INF = 1000000000;<br> <br>    public int borrowKeys(int[] exitOrder) {<br>        int[] next = new int[exitOrder.length + 1];<br>        next[0] = INF;<br>        System.arraycopy(exitOrder, 0, next, 1, exitOrder.length);<br>        int[][] best = new int[next.length][next.length];<br>        for (int i = 0; i &lt; next.length; ++i)<br>            Arrays.fill(best[i], INF);<br>        best[0][0] = 0;<br>        for (int i = 1; i &lt; next.length; ++i) {<br>            int[][] nbest = new int[next.length][next.length];<br>            for (int j = 0; j &lt; next.length; ++j)<br>                Arrays.fill(nbest[j], INF);<br>            for (int a = 0; a &lt; i; ++a)<br>                for (int b = 0; b &lt; i; ++b) {<br>                    if (next[a] &gt; next[i]) {<br>                        nbest[i][b] = Math.min(nbest[i][b], best[a][b]);<br>                    } else {<br>                        nbest[a][b] = Math.min(nbest[a][b], best[a][b] + 1);<br>                    }<br>                    if (next[b] &gt; next[i]) {<br>                        nbest[a][i] = Math.min(nbest[a][i], best[a][b]);<br>                    } else {<br>                        nbest[a][b] = Math.min(nbest[a][b], best[a][b] + 1);<br>                    }<br>                }<br>            best = nbest;<br>        }<br>        int res = INF;<br>        for (int a = 0; a &lt; next.length; ++a)<br>            for (int b = 0; b &lt; next.length; ++b)<br>                res = Math.min(res, best[a][b]);<br>        return res;<br>    }<br>}<br> <br> <br>// Powered by FileEdit<br>// Powered by RETester [based on ExampleBuilder]<br>// Powered by CodeProcessor<br></td>