<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections;<br>using System.Collections.Generic;<br>using System.Collections.Specialized;<br>using System.Text;<br>using System.Text.RegularExpressions;<br> <br>public class QuickSort<br>{<br>    public double getEval(int[] L)<br>    {<br>        bool[,] used = new bool[51, 51];<br>        double[,] eval = new double[51, 51];<br>        return doIt(L, used, eval);<br>    }<br> <br>    double doIt(int[] L, bool[,] used, double[,] eval)<br>    {<br>        if (L.Length &lt; 2)<br>            return 0;<br>        int n = L.Length;<br>        int min_val = L[0];<br>        int max_val = L[0];<br>        for (int i = 0; i &lt; n; ++i)<br>        {<br>            min_val = Math.Min(min_val, L[i]);<br>            max_val = Math.Max(max_val, L[i]);<br>        }<br>        if (used[min_val, max_val])<br>            return eval[min_val, max_val];<br>        used[min_val, max_val] = true;<br>        double results = 0;<br>        for (int i = 0; i &lt; n; ++i)<br>        {<br>            int c1 = 0, c2 = 0;<br>            int P = L[i];<br>            for (int j = 0; j &lt; n; ++j)<br>                if (L[j] &lt; P)<br>                {<br>                    ++c1;<br>                    if (j &gt; i)<br>                        results += 1.0;<br>                }<br>                else if (L[j] &gt; P)<br>                {<br>                    ++c2;<br>                    if (j &lt; i)<br>                        results += 1.0;<br>                }<br>            int[] L1 = new int[c1];<br>            int[] L2 = new int[c2];<br>            c1 = 0;<br>            c2 = 0;<br>            for (int j = 0; j &lt; n; ++j)<br>                if (L[j] &lt; P)<br>                    L1[c1++] = L[j];<br>                else if (L[j] &gt; P)<br>                    L2[c2++] = L[j];<br>            results += doIt(L1, used, eval);<br>            results += doIt(L2, used, eval);<br>        }<br>        eval[min_val, max_val] = (double)results / n;<br>        return eval[min_val, max_val];<br>    }<br>}<br></td>