<td class="problemText" colspan="8" valign="middle" align="left">
            import static java.lang.Math.*;<br>import static java.math.BigInteger.*;<br>import static java.util.Arrays.*;<br>import static java.util.Collections.*;<br>import java.math.*;<br>import java.util.*;<br><br>public class QuickSort {<br>  public double getEval(int[] L) {<br>    int n = L.length;<br>    int[] sorted = L.clone();<br>    sort(sorted);<br>    double[][] dp = new double[n + 1][n + 1];<br>    for (int len = 2; len &lt;= n; len++) {<br>      for (int s = 0; s + len &lt;= n; s++) {<br>        int t = s + len;<br>        int[] is = new int[len];<br>        for (int i = 0, k = 0; i &lt; n; i++) if (sorted[s] &lt;= L[i] &amp;&amp; L[i] &lt;= sorted[t - 1]) {<br>          is[k++] = L[i];<br>        }<br>        for (int p = 0; p &lt; len; p++) {<br>          int cost = 0;<br>          int small = 0;<br>          int large = 0;<br>          for (int i = 0; i &lt; len; i++) {<br>            if (is[i] &lt; is[p]) {<br>              small++;<br>              if (i &gt; p) cost++;<br>            } else if (is[i] &gt; is[p]) {<br>              large++;<br>              if (i &lt; p) cost++;<br>            }<br>          }<br>          dp[s][t] += cost + dp[s][s + small] + dp[s + small + 1][t];<br>        }<br>        dp[s][t] /= len;<br>      }<br>    }<br>    return dp[0][n];<br>  }<br>  void debug(Object...os) {<br>    System.err.println(deepToString(os));<br>  }<br>}<br></td>