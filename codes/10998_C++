<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;algorithm&gt;<br>#include &lt;iostream&gt;<br>#include &lt;sstream&gt;<br>#include &lt;numeric&gt;<br>#include &lt;string&gt;<br>#include &lt;utility&gt;<br>#include &lt;vector&gt;<br>#include &lt;queue&gt;<br>#include &lt;set&gt;<br>#include &lt;map&gt;<br>#include &lt;list&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cctype&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdarg&gt;<br>#include &lt;cstring&gt;<br>using namespace std;<br> <br>#define ALL(c) (c).begin(), (c).end()<br>#define FOR(i, n) for (int i = 0; i &lt; (int)(n); ++i)<br>#define FOREACH(i, n) for (typeof(n.begin()) i = n.begin(); i != n.end(); ++i)<br>#define MEMSET(p, c) memset(p, c, sizeof(p))<br>typedef long long llint;<br>typedef pair&lt;int, int&gt; PII;<br>#ifndef WATASHI_PC<br>#define errf(fmt, ...) do { } while (false)<br>#endif<br> <br>struct Reflections {<br>  long long minimumMoves(vector &lt;int&gt; mirrorX, vector &lt;int&gt; mirrorY, vector &lt;int&gt; mirrorZ, vector &lt;int&gt; finalPosition);<br>};<br> <br>const long long INF = 1000000000000LL;<br> <br>void gao(vector&lt;long long&gt; v, vector&lt;long long&gt; w[12][12]) {<br>  int n = v.size();<br>  for (int i = 0; i &lt; 12; ++i) {<br>    for (int j = 0; j &lt; 12; ++j) {<br>      w[i][j].clear();<br>    }<br>  }<br>  w[0][0].push_back(0);<br>  for (int k = 0; k &lt; n; ++k) {<br>    for (int i = 11; i &gt;= 0; --i) {<br>      for (int j = 11; j &gt;= 0; --j) {<br>        for (vector&lt;long long&gt;::const_iterator wi = w[i][j].begin(); wi != w[i][j].end(); ++wi) {<br>          w[i + 1][j].push_back(*wi + 2 * v[k]);<br>          w[i][j + 1].push_back(*wi - 2 * v[k]);<br>        }<br>      }<br>    }<br>  }<br>  for (int i = 0; i &lt; 12; ++i) {<br>    for (int j = 0; j &lt; 12; ++j) {<br>      sort(ALL(w[i][j]));<br>    }<br>  }<br>}<br> <br>long long gao(vector&lt;long long&gt; v, long long w) {<br>  int n = v.size();<br>  long long ret = INF;<br>  vector&lt;long long&gt; s1[12][12], s2[12][12];<br>  gao(vector&lt;long long&gt;(v.begin(), v.begin() + n / 2), s1);<br>  gao(vector&lt;long long&gt;(v.begin() + n / 2, v.end()), s2);<br>  FOR (i1, 12) FOR (j1, 12) FOR (i2, 12) FOR (j2, 12) {<br>    if (i1 + i2 &lt; j1 + j2 || i1 + i2 &gt; j1 + j2 + 1 || s1[i1][j1].empty() || s2[i2][j2].empty()) {<br>      continue;<br>    }<br>    int add = i1 + i2 + j1 + j2;<br>    for (vector&lt;long long&gt;::const_iterator k1 = s1[i1][j1].begin(); k1 != s1[i1][j1].end(); ++k1) {<br>      vector&lt;long long&gt;::const_iterator k2 = lower_bound(ALL(s2[i2][j2]), w - *k1);<br>      if (k2 != s2[i2][j2].end()) {<br>        ret = min(ret, *k1 + *k2 - w + add);<br>      }<br>      if (k2 != s2[i2][j2].begin()) {<br>        --k2;<br>        ret = min(ret, w - *k1 - *k2 + add);<br>      }<br>    }<br>  }<br>  return ret;<br>}<br> <br>long long Reflections::minimumMoves(vector &lt;int&gt; mirrorX, vector &lt;int&gt; mirrorY, vector &lt;int&gt; mirrorZ, vector &lt;int&gt; finalPosition) {<br>  long long ret = 0;<br>  ret += gao(vector&lt;long long&gt;(ALL(mirrorX)), finalPosition[0]);<br>  ret += gao(vector&lt;long long&gt;(ALL(mirrorY)), finalPosition[1]);<br>  ret += gao(vector&lt;long long&gt;(ALL(mirrorZ)), finalPosition[2]);<br>  return ret;<br>}<br> <br> <br> <br>// Powered by FileEdit<br>// Powered by CodeProcessor<br></td>