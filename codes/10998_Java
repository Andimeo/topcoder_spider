<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br> <br>public class Reflections {<br>  public long minimumMoves(int[] mirrorX, int[] mirrorY, int[] mirrorZ, int[] finalPosition) {<br>    return solve(toLongArr(mirrorX), finalPosition[0]) + solve(toLongArr(mirrorY), finalPosition[1]) + solve(toLongArr(mirrorZ), finalPosition[2]);<br>  }<br> <br>    private long[] toLongArr(int[] arr) {<br>        long[] res = new long[arr.length];<br>        for (int i = 0; i &lt; arr.length; ++i) res[i] = arr[i];<br>        return res;<br>    }<br> <br>    private long solve(long[] mirror, long need) {<br>        int n = mirror.length;<br>        int half = n / 2;<br>        long[][][] all = buildAll(mirror, 0, half);<br>        long[][][] all2 = buildAll(mirror, half, n - half);<br>        long res = Long.MAX_VALUE;<br>        for (int numPlus2 = 0; numPlus2 &lt; all2.length; ++numPlus2)<br>            for (int numMinus2 = 0; numMinus2 &lt; all2[numPlus2].length; ++numMinus2)<br>                for (int numPlus = 0; numPlus &lt; all.length; ++numPlus)<br>                    for (int numMinus = 0; numMinus &lt; all[numPlus].length; ++numMinus) {<br>                        int totalPlus = numPlus + numPlus2;<br>                        int totalMinus = numMinus + numMinus2;<br>                        if (totalPlus == totalMinus || totalPlus == totalMinus + 1) {<br>                            long[] first = all[numPlus][numMinus];<br>                            long[] second = all2[numPlus2][numMinus2];<br>                            for (long x : first) {<br>                                long target = need - x;<br>                                int left = -1;<br>                                int right = second.length;<br>                                while (right - left &gt; 1) {<br>                                    int middle = (left + right) / 2;<br>                                    if (second[middle] &gt;= target)<br>                                        right = middle;<br>                                    else<br>                                        left = middle;<br>                                }<br>                                if (left &gt;= 0)<br>                                    res = Math.min(res, totalPlus + totalMinus + (target - second[left]));<br>                                if (right &lt; second.length)<br>                                    res = Math.min(res, totalPlus + totalMinus + (second[right] - target));<br>                            }<br>                        }<br>                    }<br>        return res;<br>    }<br> <br>    private long[][][] buildAll(long[] mirror, int first, int len) {<br>        int[][] cnt = new int[len + 1][len + 1];<br>        long[][][] all = new long[len + 1][len + 1][];<br>        doit(mirror, first, first + len, 0, 0, 0, cnt, all, 1);<br>        for (int numPlus = 0; numPlus &lt;= len; ++numPlus)<br>            for (int numMinus = 0; numMinus &lt;= len; ++numMinus) {<br>                all[numPlus][numMinus] = new long[cnt[numPlus][numMinus]];<br>            }<br>        cnt = new int[len + 1][len + 1];<br>        doit(mirror, first, first + len, 0, 0, 0, cnt, all, 2);<br>        for (int numPlus = 0; numPlus &lt;= len; ++numPlus)<br>            for (int numMinus = 0; numMinus &lt;= len; ++numMinus) {<br>                Arrays.sort(all[numPlus][numMinus]);<br>            }<br>        return all;<br>    }<br> <br>    private void doit(long[] mirror, int cur, int last, int numPlus, int numMinus, long sum, int[][] cnt, long[][][] all, int stage) {<br>        if (cur == last) {<br>            if (stage == 2) {<br>                all[numPlus][numMinus][cnt[numPlus][numMinus]] = 2 * sum;<br>            }<br>            ++cnt[numPlus][numMinus];<br>            return;<br>        }<br>        doit(mirror, cur + 1, last, numPlus, numMinus, sum, cnt, all, stage);<br>        doit(mirror, cur + 1, last, numPlus + 1, numMinus, sum + mirror[cur], cnt, all, stage);<br>        doit(mirror, cur + 1, last, numPlus, numMinus + 1, sum - mirror[cur], cnt, all, stage);<br>    }<br> <br>}<br> <br> <br>// Powered by FileEdit<br>// Powered by RETester [based on ExampleBuilder]<br>// Powered by CodeProcessor<br></td>