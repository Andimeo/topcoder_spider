<td class="problemText" colspan="8" valign="middle" align="left">
            import static java.lang.Math.*;<br>import static java.math.BigInteger.*;<br>import static java.util.Arrays.*;<br>import static java.util.Collections.*;<br>import java.math.*;<br>import java.util.*;<br><br>public class KingdomTour {<br>  public int minTime(int N, String[] roads, int K, int L) {<br>    this.K = K;<br>    this.N = N;<br>    StringBuilder sb = new StringBuilder();<br>    for (String s : roads) sb.append(s);<br>    g = new int[N][N];<br>    for (String s : sb.toString().split(",")) if (s.length() &gt; 0) {<br>      Scanner sc = new Scanner(s);<br>      int A = sc.nextInt(), B = sc.nextInt(), C = sc.nextInt();<br>      g[A][B] = g[B][A] = C;<br>    }<br>    int[] res = dp(0, -1);<br>    int min = INF;<br>    for (int i = 0; i &lt;= K; i++) min = min(min, res[2 * i] + L * i);<br>    debug(min);<br>    return min;<br>  }<br>  int N;<br>  int K;<br>  int[][] g;<br>  int INF = 1 &lt;&lt; 29;<br>  int[] dp(int v, int prev) {<br>    int[] dp = new int[2 * K + 1];<br>    fill(dp, INF);<br>    dp[0] = 0;<br>    if (K &gt; 0) dp[1] = 0;<br>    for (int u = 0; u &lt; N; u++) if (u != prev &amp;&amp; g[v][u] &gt; 0) {<br>      int[] dp2 = dp(u, v);<br>      int[] next = new int[2 * K + 1];<br>      fill(next, INF);<br>      for (int i = 0; i &lt;= 2 * K; i++) {<br>        for (int j = 0; i + j &lt;= 2 * K; j++) {<br>          int d = dp[i] + dp2[j] + g[v][u];<br>          if (j % 2 == 0) d += g[v][u];<br>          if (next[i + j] &gt; d) {<br>            next[i + j] = d;<br>          }<br>        }<br>      }<br>      dp = next;<br>    }<br>    return dp;<br>  }<br>  <br>  void debug(Object...os) {<br>    System.err.println(deepToString(os));<br>  }<br>}<br></td>