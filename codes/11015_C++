<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;vector&gt;<br>#include &lt;list&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;deque&gt;<br>#include &lt;queue&gt;<br>#include &lt;stack&gt;<br>#include &lt;bitset&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;functional&gt;<br>#include &lt;numeric&gt;<br>#include &lt;utility&gt;<br>#include &lt;sstream&gt;<br>#include &lt;iostream&gt;<br>#include &lt;iomanip&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cctype&gt;<br>#include &lt;string&gt;<br>#include &lt;cstring&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;ctime&gt;<br><br>using namespace std;<br><br>#define SIZE(X) ((int)(X.size()))<br>typedef long long int64;<br><br>class ProductsOfDigits<br>{<br>public:<br>  int p[100];<br>  int64 solve(vector&lt;int&gt; a)<br>  {<br>    int n=SIZE(a);<br>    if (n==1)<br>    {<br>      int key=a[0];<br>      if (key==0)<br>        return 10;<br>      if (key==1)<br>        return 1;<br>      int64 result=0,p10=1;<br>      for (int i=9;i&gt;1;i--)<br>        for (;key%i==0;key/=i)<br>        {<br>          result+=p10*i;<br>          p10*=10;<br>        }<br>      if (key==1)<br>        return result;<br>      else<br>        return -1;<br>    }<br>    for (int X=1;X&lt;10;X++)<br>    {<br>      bool is_good=true;<br>      for (int i=0;i&lt;n;i++)<br>        if (a[i]!=p[X+i])<br>        {<br>          is_good=false;<br>          break;<br>        }<br>      if (is_good)<br>        return X;<br>    }<br>    int64 R=-1;<br>    for (int m=0;m&lt;10;m++)<br>    {<br>      bool is_good=true;<br>      int b[60];<br>      memset(b,255,sizeof(b));<br>      for (int i=0;i&lt;n;i++)<br>      {<br>        int d=(m+i)/10;<br>        int p=(m+i)%10;<br>        if (p==0)<br>        {<br>          if (a[i]!=0)<br>          {<br>            is_good=false;<br>            break;<br>          }<br>          continue;<br>        }<br>        if (p&gt;0 &amp;&amp; a[i]%p!=0)<br>        {<br>          is_good=false;<br>          break;<br>        }<br>        int val=a[i]/p;<br>        if (b[d]&lt;0)<br>          b[d]=val;<br>        else if (b[d]!=val)<br>        {<br>          is_good=false;<br>          break;<br>        }<br>      }<br>      if (!is_good)<br>        continue;<br>      vector&lt;int&gt; new_a;<br>      for (int i=0;i&lt;60 &amp;&amp; b[i]&gt;=0;i++)<br>        new_a.push_back(b[i]);<br>      int64 tmp=solve(new_a);<br>      if (tmp&lt;0)<br>        continue;<br>      tmp=tmp*10+m;<br>      if (R&lt;0 || tmp&lt;R)<br>        R=tmp;<br>    }<br>    return R;<br>  }<br>  int64 firstOccurrence(vector &lt;int&gt; a)<br>  {<br>    p[0]=1;<br>    for (int i=1;i&lt;100;i++)<br>      p[i]=p[i/10]*(i%10);<br>    return solve(a);<br>  }<br>};<br></td>