<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;algorithm&gt;<br>#include &lt;bitset&gt;<br>#include &lt;cassert&gt;<br>#include &lt;cmath&gt;<br>#include &lt;complex&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;ctime&gt;<br>#include &lt;deque&gt;<br>#include &lt;functional&gt;<br>#include &lt;iomanip&gt;<br>#include &lt;iostream&gt;<br>#include &lt;list&gt;<br>#include &lt;map&gt;<br>#include &lt;numeric&gt;<br>#include &lt;queue&gt;<br>#include &lt;set&gt;<br>#include &lt;sstream&gt;<br>#include &lt;stack&gt;<br>#include &lt;string&gt;<br>#include &lt;utility&gt;<br>#include &lt;vector&gt;<br>using namespace std;<br><br>#define pb push_back<br>#define mp make_pair<br>#define all(v) v.begin(),v.end()<br><br>class CarrotJumping {<br>public:<br>  int theJump(int init) {<br>    queue&lt;int&gt; q;<br>    map&lt;int, int&gt; dist;<br>    dist[init] = 0;<br>    q.push(init);<br>    while (!q.empty()) {<br>      long long x = q.front(); q.pop();<br>      int d = dist[x];<br>      if (x == 0) return d;<br>      if (d == 100000) continue;<br>      long long y = (4 * x + 3) % 1000000007;<br>      long long z = (8 * x + 7) % 1000000007;<br>      if (dist.find(y) == dist.end()) {<br>        dist[y] = d + 1;<br>        q.push(y);<br>      }<br>      if (dist.find(z) == dist.end()) {<br>        dist[z] = d + 1;<br>        q.push(z);<br>      }<br>    }<br>    return -1;<br>  }  <br>};<br><br><br><br><br>// Powered by FileEdit<br>// Powered by moj 4.12 [modified TZTester]<br>// Powered by CodeProcessor<br></td>