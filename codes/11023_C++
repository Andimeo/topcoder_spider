<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;vector&gt;<br>#include &lt;list&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;deque&gt;<br>#include &lt;stack&gt;<br>#include &lt;bitset&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;functional&gt;<br>#include &lt;numeric&gt;<br>#include &lt;utility&gt;<br>#include &lt;sstream&gt;<br>#include &lt;iostream&gt;<br>#include &lt;iomanip&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;ctime&gt;<br> <br>using namespace std;<br> <br>#define FOR(i,a,b) for(int i=(a);i&lt;(b);++i)<br>#define REP(i,n) FOR(i,0,n)<br>#define ALL(a) (a).begin(),a.end()<br>#define SORT(a) sort(ALL(a))<br>#define SZ(a) ((int) a.size())<br>#define pb push_back<br> <br>class BestApproximationDiv1 {<br>public:<br>  string findFraction(int, string);<br>};<br> <br>string BestApproximationDiv1::findFraction(int x, string number) {  <br>  int best = -1;<br>  int q, w;<br>  FOR (i, 1, x+1) {<br>    REP (j, i) {<br>      int t = j;<br>      int res = 1;<br>      REP (f, 6) {<br>        t *= 10;<br>        int d = t / i;<br>        t %= i;<br>        if (d != number[f+2]-'0')<br>          break;<br>        ++res;<br>      }<br>      if (res &gt; best) {<br>        best = res;<br>        q = j;<br>        w = i;<br>      }<br>    }<br>  }<br>  ostringstream str;<br>  str &lt;&lt; q &lt;&lt; '/' &lt;&lt; w &lt;&lt; " has " &lt;&lt; best &lt;&lt; " exact digits";<br>  return str.str();<br>}<br> <br> <br>//Powered by [KawigiEdit] 2.0!<br> <br> <br>//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!<br></td>