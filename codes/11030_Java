<td class="problemText" colspan="8" valign="middle" align="left">
            import static java.lang.Math.*;<br>import static java.math.BigInteger.*;<br>import static java.util.Arrays.*;<br>import static java.util.Collections.*;<br>import java.math.*;<br>import java.util.*;<br><br>public class TheAirTripDivOne {<br>  public int find(int n, String[] flights, int time) {<br>    this.n = n;<br>    this.time = time;<br>    StringBuilder sb = new StringBuilder();<br>    for (String s : flights) sb.append(s);<br>    String[] ss = sb.toString().split(" ");<br>    m = ss.length;<br>    A = new int[m];<br>    B = new int[m];<br>    F = new int[m];<br>    T = new int[m];<br>    P = new int[m];<br>    for (int i = 0; i &lt; m; i++) {<br>      String[] s = ss[i].split(",");<br>      A[i] = Integer.parseInt(s[0]) - 1;<br>      B[i] = Integer.parseInt(s[1]) - 1;<br>      F[i] = Integer.parseInt(s[2]);<br>      T[i] = Integer.parseInt(s[3]);<br>      P[i] = Integer.parseInt(s[4]);<br>    }<br>    if (!ok(1)) return -1;<br>    int left = 1, right = time + 1;<br>    while (right - left &gt; 1) {<br>      int mid = (left + right) / 2;<br>      if (ok(mid)) left = mid;<br>      else right = mid;<br>    }<br>    return left;<br>  }<br>  int n;<br>  int m;<br>  int time;<br>  int[] A, B, F, T, P;<br>  <br>  boolean ok(int t) {<br>    long[] ts = new long[n];<br>    fill(ts, time + 1);<br>    ts[0] = 0;<br>    for (int i = 0; i &lt; n; i++) {<br>      for (int j = 0; j &lt; m; j++) {<br>        long t1 = ts[A[j]] + (A[j] == 0 ? 0 : t);<br>        long k = max(0, (t1 - F[j]) / P[j]);<br>        if (F[j] + P[j] * k &lt; t1) k++;<br>        long t2 = F[j] + P[j] * k + T[j];<br>        if (ts[B[j]] &gt; t2) ts[B[j]] = t2;<br>      }<br>    }<br>    return ts[n - 1] &lt;= time;<br>  }<br>  <br>  void debug(Object...os) {<br>    System.err.println(deepToString(os));<br>  }<br>}<br></td>