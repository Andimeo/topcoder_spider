<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;vector&gt;<br>#include &lt;set&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;iostream&gt;<br> <br>using namespace std;<br> <br>class TheBoardingDivTwo<br>{<br>  public:<br>  int find(vector &lt;int&gt; p, int t)<br>  {<br>    int n = p.size();<br>    <br>    set&lt;int&gt; pass;<br>    for(int i = 1; i &lt;= (int)p.size(); i++)<br>      pass.insert(i);<br>    <br>    vector&lt;int&gt; ind;<br>    for(int i = 0; i &lt; (int)p.size(); i++)<br>      if(p[i] != -1)<br>        pass.erase(p[i]);<br>      else<br>        ind.push_back(i);<br>    vector&lt;int&gt; q(pass.begin(), pass.end());<br>    <br>    int lim = 1;<br>    for(int i = 1; i &lt;= (int)q.size(); i++)<br>      lim *= i;<br>    <br>    int res = 0;<br>    for(int i = 0; i &lt; lim; i++)<br>    {<br>      for(int j = 0; j &lt; (int)q.size(); j++)<br>        p[ind[j]] = q[j];<br>      <br>      int m = 0;<br>      vector&lt;int&gt; pc(p);<br>      pc.resize(pc.size() * 2, 0);<br>      vector&lt;int&gt; cnt(pc.size(), 74);<br>      bool notyet = true;<br>      while(notyet)<br>      {<br>        for(int i = (int)pc.size() - 1; i &gt;= 0; i--)<br>          if(i + 1 &lt; n + pc[i] &amp;&amp; pc[i + 1] == 0)<br>          {<br>            pc[i + 1] = pc[i];<br>            pc[i] = 0;<br>          }<br>          else if(i + 1 == n + pc[i])<br>          {<br>            if(cnt[i] &gt; 0) cnt[i]--;<br>            else pc[i] = 0;<br>          }<br>      <br>        m++;<br>        notyet = false;<br>        for(int i = 0; i &lt; (int)pc.size(); i++)<br>          if(pc[i]) notyet = true;<br>      }<br>      <br>      --m;<br>      cout &lt;&lt; m &lt;&lt; endl;<br>      if(m &lt;= t) res++;<br>      <br>      next_permutation(q.begin(), q.end());<br>    }<br>    <br>    return res;<br>  }<br>};<br></td>