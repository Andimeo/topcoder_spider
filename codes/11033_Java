<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.Arrays;<br><br>public class TheBoardingDivTwo {<br>  public static final double EPS = 1e-10;<br><br>  public static long INF = 1L &lt;&lt; 18;<br><br>  public static boolean next_permutation(int[] arr) {<br><br>    int N = arr.length;<br>    int i = N - 1;<br><br>    try {<br>      while (arr[i - 1] &gt;= arr[i]) {<br>        i = i - 1;<br>        if (i == 0)<br>          return false;<br>      }<br>    } catch (Exception e) {<br>      return false;<br>    }<br><br>    int j = N;<br>    while (arr[j - 1] &lt;= arr[i - 1])<br>      j = j - 1;<br><br>    // swap values at positions (i-1) and (j-1)<br>    int temp = arr[i - 1];<br>    arr[i - 1] = arr[j - 1];<br>    arr[j - 1] = temp;<br><br>    i++;<br>    j = N;<br>    while (i &lt; j) {<br>      temp = arr[i - 1];<br>      arr[i - 1] = arr[j - 1];<br>      arr[j - 1] = temp;<br><br>      i++;<br>      j--;<br>    }<br>    return true;<br>  }<br><br>  public int find(int[] pattern, int boardingTime) {<br>    int[] arr = new int[pattern.length];<br>    for (int i = 0; i &lt; arr.length; i++)<br>      arr[i] = i+1;<br>    int num = 0;<br>    do {<br>      if (matches(pattern, arr))<br>        num += check(arr, boardingTime)? 1 : 0;<br>    } while (next_permutation(arr));<br>    return num;<br>  }<br><br>  private boolean matches(int[] pattern, int[] arr) {<br>    for (int i = 0; i &lt; pattern.length; i++)<br>      if (pattern[i] != -1 &amp;&amp; pattern[i] != arr[i])<br>        return false;<br>    return true;<br>  }<br><br>  private boolean check(int[] arr, int boardingTime) {<br>    int n = arr.length;<br>    int[] who = new int[n*2];<br>    Arrays.fill(who, -1);<br>    <br>    boolean empty[] = new boolean[n*2];<br>    Arrays.fill(empty, true);<br>//    for(int i=0; i &lt; empty.length; i++)<br>//      empty[i] = true;<br>    int trans[] = new int[n*2];<br>    Arrays.fill(trans, 74);<br>    <br>//    for(int i=n; i &lt; trans.length; i++)<br>//      trans[i] = 74;<br>    for(int i=0; i &lt; n; i++) {<br>      who[i] = arr[i]-1;<br>      empty[i] = false;<br>    }<br>    int sec = 0;<br>    while(sec &lt;= boardingTime ) {<br>      boolean finished = true;<br>      for(int i=who.length-1; i&gt;=0; i--) {<br>        if (empty[i])<br>          continue;<br>        finished = false;<br>        //i = cur pos<br>        //who[i] = seek pos<br>        if (i &lt; n + who[i]) {<br>          if (empty[i+1]) {<br>            empty[i] = true;<br>            empty[i+1] = false;<br>            who[i+1] = who[i];<br>            who[i] = -1;<br>          }<br>        }<br>        if (i == who[i] + n) {<br>          if (trans[i] &gt; 0)<br>            trans[i]--;<br>          else {<br>            empty[i] = true;<br>            who[i] = -1;<br>          }<br>        }<br>      }<br>      finished = true;<br>      for(int i=0; i &lt;who.length; i++)<br>        if (who[i] != -1)<br>          finished = false;<br>//      System.out.println((sec+1) + " " + Arrays.toString(who));<br>      if (!finished)<br>        sec++;<br>      else<br>        break;<br>      <br>    }<br>    if (sec &gt; boardingTime)<br>      return false;<br>    return true;<br>  }<br><br>}<br>//Welly maloosh 5eer fe 7oka .. maloosh 5eer fe masr<br><br><br>// Powered by FileEdit<br>// Powered by CodeProcessor<br></td>