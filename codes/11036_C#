<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Text;<br>using System.Text.RegularExpressions;<br>using System.Collections;<br><br>public class EllysPairing {<br><br>    private const int COUNT_SIZE = 1&lt;&lt;15;<br>    public int getMax(int M, int[] count, int[] first, int[] mult, int[] add) {<br><br>        int[] counts = new int[COUNT_SIZE];<br>        int totalCount = 0;<br><br><br>        for (int univ = 0; univ &lt; count.Length; univ++)<br>        {<br>            totalCount += count[univ];<br><br>            int previous = first[univ];<br>            for (int i = 0; i &lt; count[univ]; i++)<br>            {<br>                counts[previous &amp; (COUNT_SIZE-1)]++;<br>                previous = (previous * mult[univ] + add[univ]) &amp; (M - 1);<br>            }<br>        }<br><br>        int pairCount = totalCount/2;<br>        for(int idx = 0;idx&lt;counts.Length;idx++)<br>            if (counts[idx] &gt; pairCount)<br>            {<br>                int[] counts2 = new int[COUNT_SIZE];<br>                for (int univ = 0; univ &lt; count.Length; univ++)<br>                {<br>                    int previous = first[univ];<br>                    for (int i = 0; i &lt; count[univ]; i++)<br>                    {<br>                        if ((previous &amp; (COUNT_SIZE - 1)) == idx)<br>                        {<br>                            counts2[previous &gt;&gt; 15]++;<br>                        }<br>                        previous = (previous * mult[univ] + add[univ]) &amp; (M - 1);<br>                    }<br>                }<br><br>                foreach (int c in counts2)<br>                    if (c &gt; pairCount)<br>                    {<br>                        return totalCount - c;<br>                    }<br>            }<br><br>        return pairCount;<br>    }<br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by CodeProcessor<br></td>