<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections.Generic;<br>using System.Text;<br><br>public class Bribes<br>{<br>    public int minBribes(int[] influence, int[] resistance)<br>    {<br>        int[,] curr = new int[256, 256];<br>        for (int mask = 0; mask &lt; 256; mask++)<br>        {<br>            curr[0, mask] = 1;<br>        }<br><br>        for (int i = 0; i &lt; influence.Length; i++)<br>        {<br>            int[,] next = new int[256, 256];<br>            for (int pmask = 0; pmask &lt; 256; pmask++)<br>            {<br>                for (int nmask = 0; nmask &lt; 256; nmask++)<br>                {<br>                    if (curr[pmask, nmask] &gt; 0)<br>                    {<br>                        int value = resistance[i];<br>                        for (int j = 1; j &lt;= 8; j++)<br>                        {<br>                            if (i - j &gt;= 0 &amp;&amp; ((pmask &gt;&gt; (j - 1)) &amp; 1) != 0)<br>                            {<br>                                value -= influence[i - j] &gt;&gt; j;<br>                            }<br>                        }<br>                        for (int j = 0; j &lt; 8; j++)<br>                        {<br>                            if (i + j &lt; resistance.Length &amp;&amp; ((nmask &gt;&gt; j) &amp; 1) != 0)<br>                            {<br>                                value -= influence[i + j] &gt;&gt; j;<br>                            }<br>                        }<br>                        if (i + 8 &lt; resistance.Length &amp;&amp; value - (influence[i + 8] &gt;&gt; 8) &lt;= 0)<br>                        {<br>                            int p = ((pmask &lt;&lt; 1) | (nmask &amp; 1)) &amp; 0xFF;<br>                            int n = (nmask &gt;&gt; 1) | (1 &lt;&lt; 7);<br>                            int v = curr[pmask, nmask] + nmask % 2;<br>                            if (next[p, n] == 0 || next[p, n] &gt; v)<br>                            {<br>                                next[p, n] = v;<br>                            }<br>                        }<br>                        if (value &lt;= 0)<br>                        {<br>                            int p = ((pmask &lt;&lt; 1) | (nmask &amp; 1)) &amp; 0xFF;<br>                            int n = (nmask &gt;&gt; 1);<br>                            int v = curr[pmask, nmask] + nmask % 2;<br>                            if (next[p, n] == 0 || next[p, n] &gt; v)<br>                            {<br>                                next[p, n] = v;<br>                            }<br>                        }<br>                    }<br>                }<br>            }<br>            curr = next;<br>        }<br><br>        int result = Int32.MaxValue;<br>        for (int pmask = 0; pmask &lt; 256; pmask++)<br>        {<br>            for (int nmask = 0; nmask &lt; 256; nmask++)<br>            {<br>                if (curr[pmask, nmask] != 0)<br>                {<br>                    result = Math.Min(result, curr[pmask, nmask]);<br>                }<br>            }<br>        }<br><br>        return (result == Int32.MaxValue ? 0 : result) - 1;<br>    }<br>}<br></td>