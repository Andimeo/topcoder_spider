<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;vector&gt;<br>#include &lt;list&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;deque&gt;<br>#include &lt;stack&gt;<br>#include &lt;bitset&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;functional&gt;<br>#include &lt;numeric&gt;<br>#include &lt;utility&gt;<br>#include &lt;sstream&gt;<br>#include &lt;iostream&gt;<br>#include &lt;iomanip&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;ctime&gt;<br>#include &lt;queue&gt;<br> <br>using namespace std;<br> <br>#define Rep(i,n) for(int i=0;i&lt;(n);++i)<br>#define For(i,a,b) for(int i=(a);i&lt;=(b);++i)<br>#define Ford(i,a,b) for(int i=(a);i&gt;=(b);--i)<br>#define fi first<br>#define se second<br>#define pb push_back<br>#define MP make_pair<br> <br>typedef pair&lt;int,int&gt; PII;<br>typedef vector&lt;int&gt; VI;<br> <br>class Bribes {<br>public:<br>  int minBribes(vector &lt;int&gt;, vector &lt;int&gt;);<br>};<br> <br>int F[55][1&lt;&lt;16];<br>bool b[55];<br>int in[55], resi[55];<br>int n;<br> <br>bool check(int id){<br>  if(id&lt;0) return true;<br>  int total=0;<br>  For(i,-8,8) if(0&lt;=id+i &amp;&amp; id+i&lt;n) {<br>    if(b[id+i]) total += in[id+i] / (1 &lt;&lt; abs(i));<br>  }<br>  return (total &gt;= resi[id]);<br>}<br> <br>int calc(int i){<br>  if(i==n){<br>    bool ok=true;<br>    Ford(j,8,1) if(!check(i-j)) { ok=false; break; }<br>    //int tt=0;<br>    //Rep(j,n) tt+=b[j];<br>    //cout&lt;&lt;tt&lt;&lt;endl;<br>    if(ok) return 0;<br>    else return 1000000000;<br>  }<br>  int s=0;<br>  For(j,max(i-16,0),i-1) s=s*2+b[j];<br>  int &amp;ret=F[i][s];<br>  if(ret!=-1)return ret;<br>  ret=1000000000;<br>  b[i]=1;<br>  if(check(i-8)) ret=min(ret,1+calc(i+1));<br>  b[i]=0;<br>  if(check(i-8)) ret=min(ret,0+calc(i+1));<br>  return ret;<br>}<br> <br>int Bribes::minBribes(vector &lt;int&gt; influence, vector &lt;int&gt; resistance) {<br>  memset(F,-1,sizeof(F));<br>  memset(b,0,sizeof(b));<br>  n=influence.size();<br>  Rep(i,n)in[i]=influence[i];<br>  Rep(i,n)resi[i]=resistance[i];<br>  int res = calc(0);<br>  if(res &gt; 1000) return -1;<br>  return res;<br>}<br> <br> <br>//Powered by [KawigiEdit] 2.0!<br></td>