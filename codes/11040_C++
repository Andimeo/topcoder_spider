<td class="problemText" colspan="8" valign="middle" align="left">
            #line 5 "CalculationCards.cpp"<br>#include &lt;vector&gt;<br>#include &lt;list&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;deque&gt;<br>#include &lt;stack&gt;<br>#include &lt;bitset&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;functional&gt;<br>#include &lt;numeric&gt;<br>#include &lt;utility&gt;<br>#include &lt;sstream&gt;<br>#include &lt;iostream&gt;<br>#include &lt;iomanip&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;ctime&gt;<br>using namespace std;<br><br><br>double f[51][51];<br><br><br><br>vector&lt;int&gt; dolis;<br><br>class CalculationCards {<br>  public:<br>  double getExpected(vector &lt;string&gt; cards) {<br>    <br>    <br>    <br>    double n = 1.0;<br>    int m =0;<br>    double sum = 0.0;<br>    <br>    double productsum = 1.0;<br>    <br>    int i,j,k;<br>    <br>    for(i=0; i&lt;cards.size(); i++)<br>    {<br>      if(cards[i][0]=='+')<br>      {<br>        n++;<br>        sum+=(cards[i][1]-'0');<br>      }<br>      else if(cards[i][0]=='-')<br>      {<br>        n++;<br>        sum-=(cards[i][1]-'0');<br>      }<br>      else<br>      {<br>        m++;<br>        dolis.push_back(cards[i][1]-'0');<br>      }<br>    }<br>    for(i=0; i&lt;=m; i++)<br>      f[0][i] = n;<br>    <br>    for(int t=0; t&lt;m; t++)<br>    {<br>      for(k=0; k+t+1&lt;=m; k++)<br>      {<br>        f[t+1][k] = f[t][k];<br>        f[t+1][k]+= ((double)(dolis[t]-1))*f[t][k+1]/((double)t+n);<br>        <br>        long long choose = 1;<br>        long long denom = 0;<br>        <br>        double d = 0.0;<br>        for(i=1; i&lt;=k; i++)<br>        {<br>          choose*=((long long)k-denom);<br>          denom++;<br>          choose/=denom;<br>          <br>          d+= choose*f[t][k-i+1];<br>        }<br>        d*=(double)dolis[t];<br>        d/=(double)(t+n);<br>        f[t+1][k]+=d;<br>      }<br>    }<br>    return (f[m][0] / ((double)n))*sum;<br>    <br>  }<br>};<br><br><br>// Powered by FileEdit<br></td>