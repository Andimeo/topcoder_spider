<td class="problemText" colspan="8" valign="middle" align="left">
            #line 5 "EnclosingSquare.cpp"<br><br>#include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;string&gt;<br>#include &lt;cmath&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;vector&gt;<br>#include &lt;list&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;queue&gt;<br>#include &lt;stack&gt;<br>#include &lt;utility&gt;<br>#include &lt;functional&gt;<br>#include &lt;complex&gt;<br>#include &lt;iostream&gt;<br>#include &lt;fstream&gt;<br>#include &lt;sstream&gt;<br><br>using namespace std;<br><br>#define SIZE(A) ((int)A.size())<br>#define LENGTH(A) ((int)A.length())<br>#define MP(A,B) make_pair(A,B)<br>typedef long long int64;<br>typedef unsigned long long uint64;<br>typedef unsigned int uint;<br>typedef unsigned short ushort;<br>typedef unsigned char uchar;<br>typedef vector&lt;int&gt; VI;<br>typedef vector&lt;string&gt; VS;<br>const double pi=acos(-1.0);<br>const double eps=1e-11;<br><br>template&lt;class T&gt; inline T sqr(const T&amp; x) { return x*x; }<br>template&lt;class T&gt; inline void checkmin(T &amp;a,const T&amp; b) { if (b&lt;a) a=b; }<br>template&lt;class T&gt; inline void checkmax(T &amp;a,const T&amp; b) { if (b&gt;a) a=b; }<br>#define two(X) (1&lt;&lt;(X))<br>#define contain(S,X) ((S&amp;two(X))&gt;0)<br>#define twoL(X) (((int64)1)&lt;&lt;X)<br>#define containL(S,X) ((S&amp;twoL(X))&gt;0)<br>template&lt;class T&gt; int countbit(T n) { int R=0; for (;n&gt;0;n&amp;=(n-1)) R++; return R; }<br>template&lt;class T&gt; T lowbit(T n) { return (n^(n-1))&amp;n; }<br>template&lt;class T&gt; T gcd(T a,T b) { return (b==0)?a:gcd(b,a%b); }<br>template&lt;class T&gt; T lcm(T a,T b) { return a*(b/gcd(a,b)); }<br>template&lt;class T&gt; void out(const vector&lt;T&gt; &amp;a) { cout&lt;&lt;"array: "; for (int i=0;i&lt;SIZE(a);i++) cout&lt;&lt;a[i]&lt;&lt;" "; cout&lt;&lt;endl; cout.flush(); }<br>#define MARK(n) printf("MARK %d  LINE: %d\n",n,__LINE__);<br><br>class EnclosingSquare<br>{<br>public:<br>  int64 gcd(int64 a,int64 b)<br>  {<br>    return (b==0)?a:gcd(b,a%b);<br>  }<br>  long long getMinimum(long long n)<br>  {<br>    if (n==0) return 1;<br>    n--;<br>    int64 R=-1;<br>    for (int64 a=1;a*a-2*a&lt;=n;a++) if (2*a*a&gt;=n)<br>    {<br>      int64 min_b=n-a*a;<br>      int64 max_b=n-a*a+2*a;<br>      if (min_b&lt;0) min_b=0;<br>      int64 min_b2=(int)sqrt((long double)(min_b))-1;<br>      int64 max_b2=(int)sqrt((long double)(max_b))+1;<br>      if (min_b2&lt;0) min_b2=0;<br>      if (max_b2&gt;a) max_b2=a;<br>      for (int64 b=min_b2;b&lt;=max_b2;b++)<br>      {<br>        int64 s=a*a+b*b;<br>        int64 t=s-gcd(a,b)*2;<br>        if (t==n &amp;&amp; (R&lt;0 || s&lt;R)) R=s;<br>      }<br>    }<br>    if (R&lt;0) R=0;<br>    return R;<br>  }<br>};<br><br><br>// Powered by FileEdit<br></td>