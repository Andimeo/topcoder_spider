<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;iostream&gt;<br>#include &lt;sstream&gt;<br>#include &lt;vector&gt;<br>#include &lt;string&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;set&gt;<br>#include &lt;map&gt;<br>#include &lt;queue&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cstring&gt;<br>#include &lt;cctype&gt;<br>#include &lt;cmath&gt;<br><br>using namespace std;<br><br>long long re[1001][1001];<br>int n;<br>long long dis[1001];<br>bool visit[1001];<br>long long getit()<br>{<br>    for (int i = 0; i &lt; n; ++i)<br>        dis[i] = 10000000000000LL;<br>    memset(visit, false, sizeof(visit));<br>    dis[0] = 0;<br>    long long res = 0;<br>    for (int i = 0; i &lt; n; ++i) {<br>        int p = -1;<br>        long long mmin = 10000000000000LL;<br>        for (int j = 0; j &lt; n; ++j) {<br>            if (!visit[j] &amp;&amp; dis[j] &lt; mmin) {<br>                mmin = dis[j];<br>                p = j;<br>            }<br>        }<br>        if (p &lt; 0) return -1;<br>        res += mmin;<br>        visit[p] = true;<br>        for (int j = 0; j &lt; n; ++j)<br>            if (!visit[j] &amp;&amp; re[p][j] &amp;&amp; re[p][j] &lt; dis[j]) {<br>                dis[j] = re[p][j];<br>            }<br>    }<br>    return res;<br>}<br>struct TimeTravellingSalesman {<br>long long determineCost(int N, vector &lt;string&gt; rr)<br>{<br>    n = N;<br>    string s;<br>    for (int i = 0; i &lt; rr.size(); ++i)<br>        s += rr[i];<br>    stringstream in(s);<br>    int a, b, c;<br>    char c1,c2;<br>    while (in &gt;&gt; a &gt;&gt; c1 &gt;&gt; b &gt;&gt; c2 &gt;&gt; c) {<br>        re[a][b] = re[b][a] = c;<br>    }<br>    return getit();<br>}<br>};<br></td>