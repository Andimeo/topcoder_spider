<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>import static java.lang.Integer.parseInt;<br><br>public class TimeTravellingSalesman {<br><br>  private static int [] eadj, elast, eprev, edata;<br>    private static int eidx, N;<br>    <br>  public long determineCost (int N, String [] roads) {<br>    this.N = N;<br>    elast = new int [N];<br>    Arrays.fill (elast, -1);<br>    eadj = new int [N * N];<br>    eprev = new int [N * N];<br>    edata = new int [N * N];<br>    eidx = 0;<br>    <br>    String b = "";;<br>    for (String s: roads)<br>      b += s;<br>    <br>    StringTokenizer st = new StringTokenizer (b);<br>    while (st.hasMoreTokens ()) {<br>      String [] input = st.nextToken ().split (",");<br>      addEdge (parseInt (input [0]), parseInt (input [1]), parseInt (input [2]));<br>    }<br>  <br>    return minSpanningTree ();<br>  }<br>  <br>    private void addEdge (int a, int b, int c) {<br>        eadj [eidx] = b; eprev [eidx] = elast [a]; edata [eidx] = c; elast [a] = eidx++;<br>        eadj [eidx] = a; eprev [eidx] = elast [b]; edata [eidx] = c; elast [b] = eidx++;<br>    }<br>  <br>  private long minSpanningTree () {<br>        boolean [] visited = new boolean [N];<br>        PriorityQueue &lt;Pair&gt; pq = new PriorityQueue &lt;Pair&gt; ();<br>        long treeCost = 0;<br>        int treeSize = 0;<br>        pq.add (new Pair (0, 0));<br>        while (pq.size () &gt; 0 &amp;&amp; treeSize &lt; N) {<br>            int node = pq.peek ().a, weight = pq.peek ().b; pq.poll ();<br>            if (visited [node]) continue;<br>            treeSize++; treeCost += weight;<br>            visited [node] = true;<br>            for (int e = elast [node]; e != -1; e = eprev [e])<br>                if (!visited [eadj [e]])<br>                    pq.add (new Pair (eadj [e], edata [e]));<br>        }<br>        return treeSize == N ? treeCost : -1;<br>    }<br>    <br>    class Pair implements Comparable &lt;Pair&gt; {<br>        public int a, b;<br>        <br>        public Pair (int _a, int _b) {<br>            a = _a; b = _b;<br>        }<br>        <br>        public int compareTo (Pair other) {<br>            if (b == other.b) return a - other.a;<br>            return b - other.b;<br>        }<br>    }<br>}<br></td>