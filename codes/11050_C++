<td class="problemText" colspan="8" valign="middle" align="left">
            //  SRM 579 (B)<br><br>#include &lt;cstdio&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cstring&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cassert&gt;<br>#include &lt;iostream&gt;<br>#include &lt;sstream&gt;<br>#include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;queue&gt;<br>#include &lt;set&gt;<br>#include &lt;map&gt;<br>#include &lt;utility&gt;<br>#include &lt;numeric&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;bitset&gt;<br>#include &lt;complex&gt;<br><br>using namespace std;<br><br>typedef unsigned uint;<br>typedef long long Int;<br>typedef vector&lt;int&gt; vint;<br>typedef pair&lt;int,int&gt; pint;<br>#define mp make_pair<br><br>template&lt;class T&gt; void pv(T a, T b) { for (T i = a; i != b; ++i) cout &lt;&lt; *i &lt;&lt; " "; cout &lt;&lt; endl; }<br>template&lt;class T&gt; void chmin(T &amp;t, T f) { if (t &gt; f) t = f; }<br>template&lt;class T&gt; void chmax(T &amp;t, T f) { if (t &lt; f) t = f; }<br><br>const int INF = 1001001001;<br><br>int dist[110][110];<br><br>int M;<br>int A[110], B[110], C[110];<br>int dp[100010][30];<br><br>struct TravellingPurchasingMan {<br>  <br>  int maxStores(int N, vector &lt;string&gt; interestingStores, vector &lt;string&gt; roads) {<br>    int u, v, w;<br>    int c;<br>    int p;<br>    <br>    for (u = 0; u &lt; N; ++u) for (v = 0; v &lt; N; ++v) {<br>      dist[u][v] = (u != v) ? INF : 0;<br>    }<br>    for (uint i = 0; i &lt; roads.size(); ++i) {<br>      sscanf(roads[i].c_str(), "%d%d%d", &amp;u, &amp;v, &amp;c);<br>      chmin(dist[u][v], c);<br>      chmin(dist[v][u], c);<br>    }<br>    for (w = 0; w &lt; N; ++w) for (u = 0; u &lt; N; ++u) for (v = 0; v &lt; N; ++v) {<br>      chmin(dist[u][v], dist[u][w] + dist[w][v]);<br>    }<br>    <br>    M = interestingStores.size();<br>    for (u = 0; u &lt; M; ++u) {<br>      sscanf(interestingStores[u].c_str(), "%d%d%d", &amp;A[u], &amp;B[u], &amp;C[u]);<br>    }<br>    <br>    memset(dp, 0x3f, sizeof(dp));<br>    for (u = 0; u &lt; M; ++u) {<br>      if (dist[N - 1][u] &lt;= B[u]) {<br>        chmin(dp[1 &lt;&lt; u][u], max(dist[N - 1][u], A[u]) + C[u]);<br>      }<br>    }<br>    for (p = 1; p &lt; 1 &lt;&lt; M; ++p) for (u = 0; u &lt; M; ++u) if (dp[p][u] &lt; INF) {<br>      for (v = 0; v &lt; M; ++v) if (!(p &amp; 1 &lt;&lt; v)) {<br>        if (dp[p][u] + dist[u][v] &lt;= B[v]) {<br>          chmin(dp[p | 1 &lt;&lt; v][v], max(dp[p][u] + dist[u][v], A[v]) + C[v]);<br>        }<br>      }<br>    }<br>    <br>    int ans = 0;<br>    for (p = 1; p &lt; 1 &lt;&lt; M; ++p) for (u = 0; u &lt; M; ++u) if (dp[p][u] &lt; INF) {<br>      chmax(ans, __builtin_popcount(p));<br>    }<br>    return ans;<br>    <br>  }<br>  <br>};<br></td>