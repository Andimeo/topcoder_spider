<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.Arrays;<br>import java.util.StringTokenizer;<br> <br>/**<br> * Built using CHelper plug-in<br> * Actual solution is at the top<br> * @author Niyaz Nigmatullin<br> */<br>public class TravellingPurchasingMan {<br>    public int maxStores(int n, String[] interestingStores, String[] roads) {<br>        int m = interestingStores.length;<br>        int[] start = new int[m];<br>        int[] end = new int[m];<br>        int[] dur = new int[m];<br>        for (int i = 0; i &lt; interestingStores.length; i++) {<br>            String e = interestingStores[i];<br>            StringTokenizer st = new StringTokenizer(e);<br>            start[i] = Integer.parseInt(st.nextToken());<br>            end[i] = Integer.parseInt(st.nextToken());<br>            dur[i] = Integer.parseInt(st.nextToken());<br>        }<br>        int[][] a = new int[n][n];<br>        for (int[] d : a) {<br>            Arrays.fill(d, Integer.MAX_VALUE);<br>        }<br>        for (int i = 0; i &lt; n; i++) a[i][i] = 0;<br>        for (String e : roads) {<br>            StringTokenizer st = new StringTokenizer(e);<br>            int v = Integer.parseInt(st.nextToken());<br>            int u = Integer.parseInt(st.nextToken());<br>            int len = Integer.parseInt(st.nextToken());<br>            a[v][u] = Math.min(a[v][u], len);<br>            a[u][v] = Math.min(a[u][v], len);<br>        }<br>        for (int k = 0; k &lt; n; k++) {<br>            for (int i = 0; i &lt; n; i++) {<br>                for (int j = 0; j &lt; n; j++) {<br>                    if (a[i][k] != Integer.MAX_VALUE &amp;&amp; a[k][j] != Integer.MAX_VALUE) {<br>                        a[i][j] = Math.min(a[i][j], a[i][k] + a[k][j]);<br>                    }<br>                }<br>            }<br>        }<br>        int[][] dp = new int[m][1 &lt;&lt; m];<br>        for (int[] e : dp) {<br>            Arrays.fill(e, Integer.MAX_VALUE);<br>        }<br>        for (int mask = 1; mask &lt; 1 &lt;&lt; m; mask++) {<br>            if ((mask &amp; (mask - 1)) == 0) {<br>                int i = Integer.numberOfTrailingZeros(mask);<br>                int time = a[n - 1][i];<br>                if (time &gt; end[i]) {<br>                    continue;<br>                }<br>                dp[i][mask] = Math.max(time, start[i]) + dur[i];<br>                continue;<br>            }<br>            for (int last = 0; last &lt; m; last++) {<br>                if (((mask &gt;&gt; last) &amp; 1) == 0) {<br>                    continue;<br>                }<br>                int nMask = mask ^ (1 &lt;&lt; last);<br>                int ret = Integer.MAX_VALUE;<br>                for (int prev = 0; prev &lt; m; prev++) {<br>                    if (((mask &gt;&gt; last) &amp; 1) == 0 || last == prev) {<br>                        continue;<br>                    }<br>                    int val = dp[prev][nMask];<br>                    if (val == Integer.MAX_VALUE || a[prev][last] == Integer.MAX_VALUE) {<br>                        continue;<br>                    }<br>                    int nTime = val + a[prev][last];<br>                    if (nTime &gt; end[last]) continue;<br>                    nTime = Math.max(nTime, start[last]) + dur[last];<br>                    if (ret &gt; nTime) {<br>                        ret = nTime;<br>                    }<br>                }<br>                dp[last][mask] = ret;<br>            }<br>        }<br>        int ans = 0;<br>        for (int i = 0; i &lt; m; i++) {<br>            for (int j = 0; j &lt; 1 &lt;&lt; m; j++) {<br>                if (dp[i][j] != Integer.MAX_VALUE) {<br>                    ans = Math.max(ans, Integer.bitCount(j));<br>                }<br>            }<br>        }<br>        return ans;<br>    }<br>}<br></td>