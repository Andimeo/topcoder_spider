<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;vector&gt;<br>#include &lt;list&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;queue&gt;<br>#include &lt;deque&gt;<br>#include &lt;stack&gt;<br>#include &lt;bitset&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;functional&gt;<br>#include &lt;numeric&gt;<br>#include &lt;utility&gt;<br>#include &lt;sstream&gt;<br>#include &lt;iostream&gt;<br>#include &lt;iomanip&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;ctime&gt;<br> <br>using namespace std;<br> <br> <br>class SignalIntelligence {<br>public:<br>  long long encrypt(vector &lt;int&gt; numbers) {<br>    int n = numbers.size();<br>    long long best = -1;<br>    for (int i=0;i&lt;n;i++) { // every possible last number<br>      //printf("try %d as last one\n", numbers[i]);<br>      vector&lt;int&gt; numbers2;<br>      for (int j=0;j&lt;n-1;j++) numbers2.push_back(numbers[j+((j&gt;=i)?1:0)]);<br>      sort(numbers2.begin(),numbers2.end());<br>      //printf("numbers left:");<br>      //for (int j=0;j&lt;n-1;j++) printf(" %d", numbers2[j]);<br>      //printf("\n");<br>      long long pos = 1, npos = pos;<br>      for (int j=0;j&lt;n-1;j++) {<br>        //printf("set %d at pos %d\n", numbers2[j], pos);<br>        npos = pos;<br>        while (pos + numbers2[j] &gt;= npos) npos *= 2;<br>        pos = npos;<br>      }<br>      //printf("would be %d long\n\n",pos + numbers[i]-1);<br>      if (best == -1 || npos + numbers[i]-1 &lt; best) best = npos + numbers[i]-1;<br>    }<br>    return best;<br>  }<br>};<br> <br> <br> <br>//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!<br></td>