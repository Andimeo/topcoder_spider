<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;iostream&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cstring&gt;<br>#include &lt;cmath&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;vector&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;queue&gt;<br>#include &lt;fstream&gt;<br>#include &lt;iterator&gt;<br>#include &lt;sstream&gt;<br>#include &lt;complex&gt;<br>using namespace std;<br> <br>typedef complex&lt;double&gt; CPX;<br> <br>class TimeTravellingGardener {<br>  public:<br>  <br>  inline int sgn(double x){<br>    return fabs(x)&lt;1e-8?0:(x&lt;0?-1:1);<br>  }<br>  <br>  int check(CPX base, CPX dir, vector&lt;CPX&gt; p){<br>    int ret=0;<br>    dir/=dir.real();<br>    for(int i=0;i&lt;p.size();i++){<br>      CPX new_tree = base + (p[i].real()-base.real())*dir;<br>      if (sgn(new_tree.imag())&lt;0) {<br>        return 1000000000;<br>      }<br>      if (sgn(new_tree.imag()-p[i].imag())&gt;0) {<br>        return 1000000000;<br>      }<br>      else if(sgn(new_tree.imag()-p[i].imag())==0);<br>      else {<br>        ret++;<br>      }<br>    }<br>    return ret;<br>  }<br>  <br>    int determineUsage(vector &lt;int&gt; dist, vector &lt;int&gt; height) {<br>    vector&lt;CPX&gt; p;<br>    <br>    double cur=0;<br>    p.push_back(CPX(0,height[0]));<br>    for(int i=0;i&lt;dist.size();i++){<br>      cur+=dist[i];<br>      p.push_back(CPX(cur,height[i+1]));<br>    }<br>    <br>    int ret=1000000000;<br>    for(int i=0;i&lt;p.size();i++)<br>      for(int j=i+1;j&lt;p.size();j++){<br>        CPX dir = (p[j] - p[i]);<br>        CPX base = p[i];<br>        ret = min(ret , check(base,dir,p));<br>      }<br>    <br>    for(int i=1;i&lt;p.size();i++){<br>      CPX base = CPX(0,0);<br>      CPX dir = p[i]-base;<br>      ret = min(ret , check(base,dir,p));<br>    }<br>    <br>    for(int i=0;i+1&lt;p.size();i++){<br>      CPX base = p[i];<br>      CPX dir = CPX(p[p.size()-1].real(),0) - base;<br>      ret = min(ret, check(base,dir,p));<br>    }<br>    <br>    return ret;<br>  }<br>};<br></td>