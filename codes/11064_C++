<td class="problemText" colspan="8" valign="middle" align="left">
            #include&lt;vector&gt;<br>#include&lt;list&gt;<br>#include&lt;map&gt;<br>#include&lt;set&gt;<br>#include&lt;deque&gt;<br>#include&lt;queue&gt;<br>#include&lt;stack&gt;<br>#include&lt;bitset&gt;<br>#include&lt;algorithm&gt;<br>#include&lt;functional&gt;<br>#include&lt;numeric&gt;<br>#include&lt;utility&gt;<br>#include&lt;iostream&gt;<br>#include&lt;sstream&gt;<br>#include&lt;iomanip&gt;<br>#include&lt;cstdio&gt;<br>#include&lt;cmath&gt;<br>#include&lt;cstdlib&gt;<br>#include&lt;cctype&gt;<br>#include&lt;string&gt;<br>#include&lt;cstring&gt;<br>#include&lt;cstdio&gt;<br>#include&lt;cmath&gt;<br>#include&lt;cstdlib&gt;<br>#include&lt;ctime&gt;<br>using namespace std;<br>vector&lt;string&gt;s[60];<br>class InternetSecurity <br>{<br>  public:<br>  vector &lt;string&gt; determineWebsite(vector &lt;string&gt; address, vector &lt;string&gt; keyword, vector &lt;string&gt; dangerous, int threshold)<br>  {<br>    set&lt;string&gt;st;<br>    int i,j,k;<br>    vector&lt;string&gt;ans;<br>    for (i=0;i&lt;dangerous.size();i++)<br>    {<br>      st.insert(dangerous[i]);<br>    }<br>    for (i=0;i&lt;keyword.size();i++)<br>    {<br>      istringstream os(keyword[i]);<br>      string sr;<br>      while (os&gt;&gt;sr)<br>      {<br>        s[i].push_back(sr);<br>      }<br>    }<br>    int fd=0,n=address.size();<br>    int vis[120]={0};<br>    while (1)<br>    {<br>      fd=1;<br>      for (i=0;i&lt;n;i++)<br>      {<br>        if (vis[i])continue;<br>        int ty=0;<br>        for (j=0;j&lt;s[i].size();j++)<br>        {<br>          if (st.find(s[i][j])!=st.end())<br>          {<br>            ty++;<br>          }<br>        }<br>        if (ty&gt;=threshold)<br>        {<br>          fd=0;<br>          vis[i]=1;<br>          for (j=0;j&lt;s[i].size();j++)<br>          {<br>            st.insert(s[i][j]);<br>          }<br>        }<br>      }<br>      if (fd)break;<br>    }<br>    for (i=0;i&lt;n;i++)<br>    {<br>      if (vis[i])ans.push_back(address[i]);<br>    }<br>    return ans;<br>  }<br>};<br></td>