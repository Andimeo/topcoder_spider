<td class="problemText" colspan="8" valign="middle" align="left">
            import java.math.*;<br><br>public class BestApproximationDiv2{<br>  public String findFraction(int a,String b){<br>    BigDecimal bd=new BigDecimal(b);<br>    int max=0;<br>    int maxBUNPO=0;<br>    int maxBUNSHI=0;<br>    for(int i=1;i&lt;=a;i++){<br>      int ok=0;<br>      BigDecimal bunshiDAI=new BigDecimal(ok=bd.multiply(new BigDecimal(i)).intValue()).setScale(50).divide(new BigDecimal(i),BigDecimal.ROUND_DOWN);<br>      if(i%2==0&amp;&amp;ok%2==1){<br>          String takeshi=bunshiDAI.toPlainString();<br>                int sames=1;<br>      for(int j=2;j&lt;Math.min(takeshi.length(),b.length());j++){<br>        if(takeshi.charAt(j)==b.charAt(j))sames++;<br>        else break;<br>      }<br>      if(sames&gt;max){<br>        max=sames;<br>        maxBUNPO=i;<br>        maxBUNSHI=bd.multiply(new BigDecimal(i)).intValue();<br>      }<br>      }else {<br>      <br>      <br>      BigDecimal bunshiSHOU=new BigDecimal(ok+1).setScale(50).divide(new BigDecimal(i),BigDecimal.ROUND_DOWN);<br>    <br>      /*BigDecimal nextDAI=new BigDecimal(1.0);<br>      nextDAI=nextDAI.setScale(50);<br>      nextDAI=bunshiDAI.divide(new BigDecimal(i),BigDecimal.ROUND_DOWN);<br>      BigDecimal nextSHOU=new BigDecimal(1.0);<br>      nextSHOU=nextSHOU.setScale(50);<br>      nextSHOU=bunshiSHOU.divide(new BigDecimal(i),BigDecimal.ROUND_DOWN);<br>      */<br>      String takeshi=bunshiDAI.toPlainString();<br>      String kiyoto=bunshiSHOU.toPlainString();<br><br>      //if(i%2==0&amp;&amp;ok%2==1)System.out.println(takeshi+" "+kiyoto);<br>      int sames=1;<br>      for(int j=2;j&lt;Math.min(takeshi.length(),b.length());j++){<br>        if(takeshi.charAt(j)==b.charAt(j))sames++;<br>        else break;<br>      }<br>      if(sames&gt;max){<br>        max=sames;<br>        maxBUNPO=i;<br>        maxBUNSHI=bd.multiply(new BigDecimal(i)).intValue();<br>      }<br>  sames=1;<br>      for(int j=2;j&lt;Math.min(kiyoto.length(),b.length());j++){<br>        if(kiyoto.charAt(j)==b.charAt(j))sames++;<br>        else break;<br>      }<br>      if(sames&gt;max){<br>        max=sames;<br>        maxBUNPO=i;<br>        maxBUNSHI=bd.multiply(new BigDecimal(i)).intValue()+1;<br>      }<br>      }<br>    }<br>    return maxBUNSHI+"/"+maxBUNPO+" has "+max+" exact digits";<br>  }<br>}<br></td>