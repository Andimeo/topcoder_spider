<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections;<br>using System.Collections.Generic;<br>using System.Collections.Specialized;<br>using System.Text;<br>using System.Text.RegularExpressions;<br> <br>public class TicketPrinters<br>{<br>    public int[,] mem;<br>    public bool[,] done;<br>    public int[] printerDistance, startingValues, wantedValues;<br>    public int currentPrinter, n;<br> <br>    public int minTime(int currentPrinter, int[] printerDistance, int[] startingValues, int[] wantedValues)<br>    {<br>        this.n = wantedValues.Length;<br>        mem = new int[1 &lt;&lt; n, n];<br>        done = new bool[1 &lt;&lt; n, n];<br>        this.currentPrinter = currentPrinter;<br>        this.printerDistance = printerDistance;<br>        this.startingValues = startingValues;<br>        this.wantedValues = wantedValues;<br>        return rec(0, currentPrinter);<br>    }<br> <br>    public int rec(int mask, int act)<br>    {<br>        if (done[mask, act])<br>            return mem[mask, act];<br>        done[mask, act] = true;<br>        mem[mask, act] = int.MaxValue;<br>        int bits = 1;<br>        for (int i = 0; i &lt; n; i++)<br>            if ((mask &amp; (1 &lt;&lt; i)) &gt; 0)<br>                bits++;<br>        for (int i = 0; i &lt; n; i++)<br>        {<br>            if ((mask &amp; (1 &lt;&lt; i)) &gt; 0) continue;<br>            int curTime = Math.Abs(startingValues[act] - wantedValues[i]) + 1;<br>            if (bits == n) // last one<br>            {<br>                mem[mask, act] = Math.Min(mem[mask, act], curTime);<br>            }<br>            else<br>            {<br>                for (int times = 0; times &lt; 2; times++)<br>                {<br>                    int next = -1;<br>                    // directly left<br>                    if (times == 0 &amp;&amp; act &lt;= currentPrinter &amp;&amp; act &gt; 0)<br>                        next = act - 1;<br>                    else if (times == 0 &amp;&amp; act &gt; currentPrinter &amp;&amp; act - bits &gt;= 0)<br>                        next = act - bits;<br>                    else if (times == 1 &amp;&amp; act &gt;= currentPrinter &amp;&amp; act &lt; n - 1)<br>                        next = act + 1;<br>                    else if (times == 1 &amp;&amp; act &lt; currentPrinter &amp;&amp; act + bits &lt; n)<br>                        next = act + bits;<br>                    else<br>                        continue;<br>                    int time = 0;<br>                    for (int j = Math.Min(act, next); j &lt; Math.Max(act, next); j++)<br>                        time += printerDistance[j];<br>                    mem[mask, act] = Math.Min(mem[mask, act], Math.Max(curTime, time + rec(mask | (1 &lt;&lt; i), next)));<br>                }<br>            }<br>        }<br>        return mem[mask, act];<br>    }<br> <br> <br>}<br>//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!<br></td>