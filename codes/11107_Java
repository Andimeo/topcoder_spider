<td class="problemText" colspan="8" valign="middle" align="left">
            import static java.lang.Math.*;<br>import static java.math.BigInteger.*;<br>import static java.util.Arrays.*;<br>import static java.util.Collections.*;<br>import java.math.*;<br>import java.util.*;<br><br>public class TicketPrinters {<br>  <br>  int INF = 1 &lt;&lt; 29;<br>  <br>  public int minTime(int currentPrinter, int[] printerDistance, int[] startingValues, int[] wantedValues) {<br>    n = startingValues.length;<br>    pos = new int[n];<br>    pos[0] = 0;<br>    for (int i = 0; i &lt; n - 1; i++) pos[i + 1] = pos[i] + printerDistance[i];<br>    cost = new int[n][n];<br>    for (int i = 0; i &lt; n; i++) {<br>      for (int j = 0; j &lt; n; j++) {<br>        cost[i][j] = abs(startingValues[i] - wantedValues[j]) + 1;<br>      }<br>    }<br>    dp = new int[2][n][1 &lt;&lt; n];<br>    int res = dp(0, currentPrinter, currentPrinter, 0);<br>    return res;<br>  }<br>  <br>  int n;<br>  int[] pos;<br>  int[][] cost;<br>  int[][][] dp;<br>  <br>  int dp(int dir, int left, int right, int used) {<br>    if (dp[dir][left][used] != 0) return dp[dir][left][used];<br>    int res = INF;<br>    int p = dir == 0 ? left : right;<br>    for (int i = 0; i &lt; n; i++) if ((used &gt;&gt; i &amp; 1) == 0) {<br>      int tmp = INF;<br>      if (left &gt; 0) {<br>        tmp = min(tmp, pos[p] - pos[left - 1] + dp(0, left - 1, right, used | 1 &lt;&lt; i));<br>      }<br>      if (right + 1 &lt; n) {<br>        tmp = min(tmp, pos[right + 1] - pos[p] + dp(1, left, right + 1, used | 1 &lt;&lt; i));<br>      }<br>      if (tmp == INF || tmp &lt; cost[p][i]) tmp = cost[p][i];<br>      res = min(res, tmp);<br>    }<br>    return dp[dir][left][used] = res;<br>  }<br>  <br>  void debug(Object...os) {<br>    System.err.println(deepToString(os));<br>  }<br>}<br></td>