<td class="problemText" colspan="8" valign="middle" align="left">
            //  SRM 492 (C)<br><br>#include &lt;cstdio&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cstring&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cassert&gt;<br>#include &lt;iostream&gt;<br>#include &lt;sstream&gt;<br>#include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;queue&gt;<br>#include &lt;set&gt;<br>#include &lt;map&gt;<br>#include &lt;utility&gt;<br>#include &lt;numeric&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;bitset&gt;<br>#include &lt;complex&gt;<br><br>using namespace std;<br><br>typedef unsigned uint;<br>typedef long long Int;<br>typedef vector&lt;int&gt; vint;<br>typedef vector&lt;string&gt; vstr;<br>typedef pair&lt;int,int&gt; pint;<br>#define mp make_pair<br><br>template&lt;class T&gt; void pv(T a, T b) { for (T i = a; i != b; ++i) cout &lt;&lt; *i &lt;&lt; " "; cout &lt;&lt; endl; }<br>template&lt;class T&gt; void pvp(T a, T b) { for (T i = a; i != b; ++i) cout &lt;&lt; "(" &lt;&lt; i-&gt;first &lt;&lt; ", " &lt;&lt; i-&gt;second &lt;&lt; ") "; cout &lt;&lt; endl; }<br><br>const Int INF = 3001001001001001001LL;<br><br>int N;<br>vint A, B;<br>Int MST;<br><br>Int D[110][110];<br>int L;<br>bool is[30][30][30];<br>Int dist[30][30][30][2];<br><br>struct TimeTravellingGogo {<br>  <br>  Int calc(int l, Int dl, int s, int m, Int dm, int t) {<br>    Int pass = (t ? (B[m] - dm) : A[m]) - (s ? B[l] : (A[l] + dl));<br>    return (pass &lt; 0) ? (MST - pass) : pass;<br>  }<br>  <br>  long long determineTime(int N_, vector &lt;int&gt; sunnyStart, vector &lt;int&gt; sunnyEnd, <br>  vector &lt;string&gt; roads, int machineStartTime) {<br>    int l, m;<br>    int u, v, w;<br>    int s, t;<br>    Int c, cc;<br>    <br>    N = N_;<br>    A = sunnyStart;<br>    B = sunnyEnd;<br>    MST = machineStartTime;<br>    <br>    for (u = 0; u &lt; N; ++u) for (v = 0; v &lt; N; ++v) {<br>      D[u][v] = (u != v) ? INF : 0;<br>    }<br>    string road = accumulate(roads.begin(), roads.end(), string());<br>    for (uint rr = 0; rr &lt; road.size(); ++rr) if (road[rr] == ',') road[rr] = ' ';<br>    for (istringstream iss(road); iss &gt;&gt; u &gt;&gt; v &gt;&gt; c; ) {<br>      if (D[u][v] &gt; c) D[u][v] = c;<br>      if (D[v][u] &gt; c) D[v][u] = c;<br>    }<br>    for (w = 0; w &lt; N; ++w) for (u = 0; u &lt; N; ++u) for (v = 0; v &lt; N; ++v) {<br>      if (D[u][v] &gt; D[u][w] + D[w][v]) {<br>        D[u][v] = D[u][w] + D[w][v];<br>      }<br>    }<br>    <br>    L = A.size();<br>    for (l = 0; l &lt; L; ++l) for (u = 0; u &lt; N; ++u) for (v = 0; v &lt; N; ++v) {<br>      if (D[u][v] &lt;= B[l] - A[l]) {<br>        is[l][u][v] = 1;<br>      }<br>    }<br>    typedef pair&lt; Int,pair&lt;pint,pint&gt; &gt; node;<br>    #define mp5(c,l,u,v,s) mp(c,mp(mp(l,u),mp(v,s)))<br>    priority_queue&lt; node,vector&lt;node&gt;,greater&lt;node&gt; &gt; q;<br>    for (l = 0; l &lt; L; ++l) for (u = 0; u &lt; N; ++u) for (v = 0; v &lt; N; ++v) {<br>      for (s = 0; s &lt; 2; ++s) {<br>        dist[l][u][v][s] = INF;<br>      }<br>    }<br>    for (v = 0; v &lt; N; ++v) if (is[0][0][v]) {<br>      c = A[0] + D[0][v];<br>      dist[0][0][v][0] = c;<br>      q.push(mp5(c, 0, 0, v, 0));<br>    }<br>    for (; !q.empty(); ) {<br>      c = q.top().first;<br>      l = q.top().second.first.first;<br>      u = q.top().second.first.second;<br>      v = q.top().second.second.first;<br>      s = q.top().second.second.second;<br>//cout&lt;&lt;c&lt;&lt;": "&lt;&lt;l&lt;&lt;" ("&lt;&lt;u&lt;&lt;", "&lt;&lt;v&lt;&lt;") "&lt;&lt;s&lt;&lt;endl;<br>      q.pop();<br>      if (v == N - 1) return c;<br>      if (dist[l][u][v][s] &gt; c) continue;<br>      for (m = 0; m &lt; L; ++m) for (w = 0; w &lt; N; ++w) if (is[m][v][w]) {<br>        for (t = 0; t &lt; 2; ++t) {<br>          cc = c + D[v][w] + calc(l, D[u][v], s, m, D[v][w], t);<br>//cout&lt;&lt;" (to) "&lt;&lt;cc&lt;&lt;": "&lt;&lt;m&lt;&lt;" ("&lt;&lt;v&lt;&lt;", "&lt;&lt;w&lt;&lt;") "&lt;&lt;t&lt;&lt;endl;<br>          if (dist[m][v][w][t] &gt; cc) {<br>            dist[m][v][w][t] = cc;<br>            q.push(mp5(cc, m, v, w, t));<br>          }<br>        }<br>      }<br>    }<br>    return -1;<br>    <br>  }<br>  <br>};<br></td>