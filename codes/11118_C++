<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;algorithm&gt;<br>#include &lt;numeric&gt;<br>#include &lt;iostream&gt;<br>#include &lt;sstream&gt;<br>#include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;queue&gt;<br>#include &lt;deque&gt;<br>#include &lt;set&gt;<br>#include &lt;map&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cctype&gt;<br>#include &lt;cassert&gt;<br>#include &lt;cmath&gt;<br>#include &lt;complex&gt;<br>#include &lt;stack&gt;<br>#include &lt;limits&gt;<br>#include "time.h"<br>using namespace std;<br>#define SZ(x) (int)x.size()<br>#define FOR(i,x,y) for(int i=(int)(x);i&lt;=(int)(y);++i)<br>#define REP(i,n) FOR(i,0,n-1)<br>#define FORD(i,x,y) for(int i=(int)(x);i&gt;=(int)(y);--i)<br>#define ALL(a) (a).begin(),(a).end()<br>#define FORE(i,t) for(i=t.begin();i!=t.end();++i)<br>typedef vector&lt;int&gt; VI;<br>typedef vector&lt;string&gt; VS;<br>#define prt if(1)printf<br> <br>struct TimeTravellingCellar {<br>  int determineProfit(vector &lt;int&gt; profit, vector &lt;int&gt; decay) { REP(i,1)prt("%s","");<br>    int n = SZ(profit);<br>    int best = 0;<br>    REP(i,n) {<br>      REP(j,n) {<br>        if (i==j)<br>          continue;<br>        int x = profit[i] - decay[j];<br>        best = max(best,x);<br>      }<br>    }    <br>    return best;<br>  }<br>};<br> <br>//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!<br></td>