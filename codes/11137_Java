<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.Comparator;<br>import java.util.PriorityQueue;<br><br>public class NumberLabyrinthDiv2 {<br><br>  public static int[][][] dist;<br>  public static int[][] move = {{1,0},{0,1},{-1,0},{0,-1}};<br>  <br>  public int getMinimumNumberOfMoves(String[] board, int r1, int c1, int r2, int c2, int K) {<br>    char[][] map = new char[board.length][];<br>    for(int i=0;i&lt;board.length;i++)map[i]=board[i].toCharArray();<br>    int r = board.length;<br>    int c = board[0].length();<br>    dist = new int[r][c][K+1];<br>    for(int i=0;i&lt;r;i++)for(int j=0;j&lt;c;j++)for(int k=0;k&lt;=K;k++)dist[i][j][k]=Integer.MAX_VALUE;<br>    for(int i=0;i&lt;=K;i++)dist[r1][c1][i] = 0;<br>    PriorityQueue&lt;int[]&gt; q = new PriorityQueue&lt;int[]&gt;(100, new Comparator&lt;int[]&gt;() {<br>      public int compare(int[] o1, int[] o2) {<br>        return dist[o1[0]][o1[1]][o1[2]]-dist[o2[0]][o2[1]][o2[2]];<br>      }<br>    });<br>    q.add(new int[]{r1, c1, K});<br>    while(!q.isEmpty()){<br>      int[] a = q.poll();<br>      if(a[0]==r2&amp;&amp;a[1]==c2)return dist[r2][c2][a[2]];<br>      for(int k=0;k&lt;4;k++){<br>        if(map[a[0]][a[1]]!='.'){<br>          int nr = a[0] + (int)(map[a[0]][a[1]]-'0')*move[k][0];<br>          int nc = a[1] + (int)(map[a[0]][a[1]]-'0')*move[k][1];<br>          if(0&lt;=nr&amp;&amp;nr&lt;r&amp;&amp;0&lt;=nc&amp;&amp;nc&lt;c){<br>            int val = dist[a[0]][a[1]][a[2]] + 1;<br>            if(val &lt; dist[nr][nc][a[2]]){<br>              dist[nr][nc][a[2]] = val;<br>              q.add(new int[]{nr,nc,a[2]});<br>            }<br>          }<br>        }<br>        else{<br>          if(a[2]==0)continue;<br>          for(int i=1;i&lt;=9;i++){<br>            int nr = a[0] + i*move[k][0];<br>            int nc = a[1] + i*move[k][1];<br>            if(0&lt;=nr&amp;&amp;nr&lt;r&amp;&amp;0&lt;=nc&amp;&amp;nc&lt;c){<br>              int val = dist[a[0]][a[1]][a[2]] + 1;<br>              if(val &lt; dist[nr][nc][a[2]-1]){<br>                dist[nr][nc][a[2]-1] = val;<br>                q.add(new int[]{nr,nc,a[2]-1});<br>              }<br>            }<br>          }<br>        }<br>      }<br>    }<br>    return -1;<br>  }<br><br>}<br></td>