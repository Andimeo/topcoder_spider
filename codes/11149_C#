<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections;<br>using System.Collections.Generic;<br>using System.Text;<br><br>public class RectangleAvoidingColoring {<br><br>    int lena, lenb;<br><br>    public long count(string[] board)<br>    {<br>        if (board.Length &gt;= 5 &amp;&amp; board[0].Length &gt;= 5) return 0;<br>        if (board.Length &gt; board[0].Length)<br>        {<br>            lena = board.Length;<br>            lenb = board[0].Length;<br>        }<br>        else<br>        {<br>            lenb = board.Length;<br>            lena = board[0].Length;<br>        }<br>        int[,] b = new int[lena, lenb];<br>        int i, j;<br>        for (i = 0; i &lt; lena; i++)<br>        {<br>            for (j = 0; j &lt; lenb; j++)<br>            {<br>                char c;<br>                if (board.Length &gt; board[0].Length) c = board[i][j];<br>                else c = board[j][i];<br>                if (c == 'W') b[i, j] = 0;<br>                else if (c == 'B') b[i, j] = 1;<br>                else b[i, j] = 2;<br>            }<br>        }<br>        return count(b);<br>    }<br><br>    long count(int[,] board)<br>    {<br>        int i, j, k, l, m;<br><br>        int count = lenb * (lenb - 1) / 2;<br>        int[] numa = new int[count];<br>        int[] numb = new int[count];<br>        int temp = 0;<br>        for (i = 0; i &lt; lenb; i++)<br>        {<br>            for (j = i + 1; j &lt; lenb; j++)<br>            {<br>                numa[temp] = i;<br>                numb[temp] = j;<br>                temp++;<br>            }<br>        }<br>        long MAX = 1 &lt;&lt; count;<br>        long[,] dp = new long[MAX, MAX];<br>        dp[0, 0] = 1;<br>        for (i = 0; i &lt; lena; i++)<br>        {<br>            int black = 0;<br>            int white = 0;<br>            for (j = 0; j &lt; lenb; j++)<br>            {<br>                if (board[i, j] == 0) white += (1 &lt;&lt; j);<br>                if (board[i, j] == 1) black += (1 &lt;&lt; j);<br>            }<br><br>            long[,] ndp = new long[MAX, MAX];<br>            for (j = 0; j &lt; MAX; j++)<br>            {<br>                for (k = 0; k &lt; MAX; k++)<br>                {<br>                    if (dp[j, k] == 0) continue;<br>                    for (l = 0; l &lt; (1 &lt;&lt; lenb); l++)<br>                    {<br>                        if ((white &amp; l) != 0) continue;<br>                        if ((black &amp; l) != black) continue;<br>                        long nexta = j;<br>                        long nextb = k;<br>                        for (m = 0; m &lt; count; m++)<br>                        {<br>                            if (bit(l, numa[m]) == 0 &amp;&amp; bit(l, numb[m]) == 0)<br>                            {<br>                                if (((nexta &gt;&gt; m) &amp; 1) == 1) break;<br>                                else nexta += (1 &lt;&lt; m);<br>                            }<br>                            if (bit(l, numa[m]) == 1 &amp;&amp; bit(l, numb[m]) == 1)<br>                            {<br>                                if (((nextb &gt;&gt; m) &amp; 1) == 1) break;<br>                                else nextb += (1 &lt;&lt; m);<br>                            }<br>                        }<br>                        if (m != count) continue;<br>                        ndp[nexta, nextb] += dp[j, k];<br>                    }<br>                }<br>            }<br>            dp = ndp;<br>        }<br>        long res = 0;<br>        for (j = 0; j &lt; MAX; j++)<br>        {<br>            for (k = 0; k &lt; MAX; k++)<br>            {<br>                res += dp[j, k];<br>            }<br>        }<br>        return res;<br>    }<br><br>    int bit(int num, int a)<br>    {<br>        return ((num &gt;&gt; a) &amp; 1);<br>    }<br><br><br><br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003] [modified for C# by Petr]<br>// Powered by CodeProcessor<br></td>