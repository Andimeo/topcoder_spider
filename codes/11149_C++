<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;cmath&gt;<br>#include &lt;cctype&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cstring&gt;<br>#include &lt;cassert&gt;<br>#include &lt;ctime&gt;<br> <br>#include &lt;algorithm&gt;<br>#include &lt;vector&gt;<br>#include &lt;string&gt;<br>#include &lt;sstream&gt;<br>#include &lt;iostream&gt;<br>#include &lt;functional&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br> <br>using namespace std;<br> <br>#define forn(i, n) for (int i = 0; i &lt; (int)(n); i++)<br>#define forab(i, a, b) for (int i = (a); i &lt;= (b); i++)<br>#define forit(i, a) for (__typeof((a).begin()) i = (a).begin(); i != (a).end(); i++)<br>#define sz(a) (int)(a).size()<br>#define all(a) (a).begin(), (a).end()<br>#define zero(a) memset(a, 0, sizeof(a))<br>#define pb push_back<br>#define mp make_pair<br> <br>typedef long long ll;<br>typedef vector &lt;int&gt; vi;<br>typedef pair &lt;int, int&gt; pii;<br> <br>class RectangleAvoidingColoring {<br>public:<br>  long long count(vector &lt;string&gt;);<br>};<br> <br>const int maxn = 53;<br> <br>int h, w, c[maxn][maxn], b[maxn][maxn];<br> <br>map &lt;ll, ll&gt; m;<br> <br>ll dfs2( int x, int y )<br>{<br>  if (y &gt;= h)<br>    x++, y = 0;<br>  if (x &gt;= w)<br>    return 1;<br> <br>  ll state = 13, type[4], P = (ll)1e9 + 7;<br>  memset(type, 0, sizeof(type));<br>  forn(i, x)<br>    type[c[0][i] * 2 + c[1][i]] = 1;<br>  #define ADD(a) state = state * P + (a)<br>  ADD(x);<br>  ADD(y);<br>  forn(i, y)<br>    ADD(c[i][x]);<br>  forn(i, 4)<br>    ADD(type[i]);<br> <br>  if (m.count(state))<br>    return m[state];<br>  ll &amp;res = m[state];<br>  res = 0;<br> <br>  forn(t, 2)<br>  {<br>    c[y][x] = t;<br>    if (b[y][x] != '?' &amp;&amp; (b[y][x] == 'W') != t)<br>      continue;<br> <br>    int bad = 0;<br>    forn(x1, x)<br>      forn(y1, y)<br>        if (c[y1][x1] == t &amp;&amp; c[y][x1] == t &amp;&amp; c[y1][x] == t)<br>          bad = 1, x1 = y1 = maxn;<br>    if (!bad)<br>      res += dfs2(x, y + 1);<br>  }<br>  return res;<br>}<br> <br>ll dfs( int x, int y )<br>{<br>  if (y &gt;= h)<br>    x++, y = 0;<br>  if (x &gt;= w)<br>    return 1;<br> <br>  ll res = 0;<br> <br>  forn(t, 2)<br>  {<br>    c[y][x] = t;<br>    if (b[y][x] != '?' &amp;&amp; (b[y][x] == 'W') != t)<br>      continue;<br> <br>    int bad = 0;<br>    forn(x1, x)<br>      forn(y1, y)<br>        if (c[y1][x1] == t &amp;&amp; c[y][x1] == t &amp;&amp; c[y1][x] == t)<br>          bad = 1, x1 = y1 = maxn;<br>    if (!bad)<br>      res += dfs(x, y + 1);<br>  }<br>  return res;<br>}<br> <br>long long RectangleAvoidingColoring::count(vector &lt;string&gt; board) {<br>  h = sz(board), w = sz(board[0]);<br>  forn(i, h)<br>    forn(j, w)<br>      b[i][j] = board[i][j];<br>  if (h &gt; w)<br>  {<br>    forn(i, maxn)<br>      forn(j, i)<br>        swap(b[i][j], b[j][i]);<br>    swap(h, w);<br>  }<br> <br>  if (h == 1)<br>  {<br>    int cnt = 0;<br>    forn(j, w)<br>      cnt += (b[0][j] == '?');<br>    return 1LL &lt;&lt; cnt;<br>  }<br> <br>  m.clear();<br>  if (h == 2)<br>    return dfs2(0, 0);<br>  if (w &gt; 8)<br>    return 0;<br>  return dfs(0, 0);<br>}<br></td>