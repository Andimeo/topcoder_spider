<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br><br>public class RectangleAvoidingColoring {<br>    int[][] board;<br>    int height;<br>    int width;<br>    int[] seqR;<br>    int[] seqC;<br><br>    public long count(String[] board) {<br>        height = board.length;<br>        width = board[0].length();<br>        this.board = new int[height][width];<br>        for (int r = 0; r &lt; height; ++r)<br>            for (int c = 0; c &lt; width; ++c) {<br>                char ch = board[r].charAt(c);<br>                if (ch == 'W')<br>                    this.board[r][c] = 1;<br>                else if (ch == 'B')<br>                    this.board[r][c] = 2;<br>            }<br>        int minSize = Math.min(height, width);<br>        if (minSize == 1) {<br>            int questions = 0;<br>            for (int r = 0; r &lt; height; ++r)<br>                for (int c = 0; c &lt; width; ++c) {<br>                    if (this.board[r][c] == 0)<br>                        ++questions;<br>                }<br>            return (1L &lt;&lt; questions);<br>        } else if (minSize == 2) {<br>            return solve2();<br>        }<br>        seqR = new int[height * width];<br>        seqC = new int[height * width];<br>        int got = 0;<br>        for (int size = 0; got &lt; height * width; ++size) {<br>            for (int r = 0; r &lt; size; ++r) {<br>                if (r &lt; height &amp;&amp; size &lt; width) {<br>                    seqR[got] = r;<br>                    seqC[got] = size;<br>                    ++got;<br>                }<br>            }<br>            for (int c = 0; c &lt; size; ++c) {<br>                if (size &lt; height &amp;&amp; c &lt; width) {<br>                    seqR[got] = size;<br>                    seqC[got] = c;<br>                    ++got;<br>                }<br>            }<br>            if (size &lt; height &amp;&amp; size &lt; width) {<br>                seqR[got] = size;<br>                seqC[got] = size;<br>                ++got;<br>            }<br>        }<br>        return rec(0);<br>    }<br><br>    private long solve2() {<br>        if (height == 2) {<br>            int[][] nboard = new int[width][height];<br>            for (int r = 0; r &lt; height; ++r)<br>                for (int c = 0; c &lt; width; ++c)<br>                    nboard[c][r] = board[r][c];<br>            int tmp = height;<br>            height = width;<br>            width = tmp;<br>            board = nboard;<br>        }<br>        long res = 0;<br>        for (int ww = 0; ww &lt;= height; ++ww) {<br>            for (int bb = 0; bb &lt;= height; ++bb) {<br>                long cur = 1;<br>                if (ww &lt; height)<br>                    cur *= numMatches(new int[]{1, 1}, board[ww]);<br>                if (bb &lt; height) {<br>                    if (bb == ww) continue;<br>                    cur *= numMatches(new int[]{2, 2}, board[bb]);<br>                }<br>                for (int i = 0; i &lt; height; ++i) {<br>                    if (i == bb || i == ww) continue;<br>                    cur *= numMatches(new int[]{1, 2}, board[i]) + numMatches(new int[]{2, 1}, board[i]);<br>                }<br>                res += cur;<br>            }<br>        }<br>        return res;<br>    }<br><br>    private long numMatches(int[] a, int[] b) {<br>        for (int i = 0; i &lt; 2; ++i) {<br>            if (b[i] != 0 &amp;&amp; b[i] != a[i]) return 0;<br>        }<br>        return 1;<br>    }<br><br>    private long rec(int at) {<br>        if (at &gt;= height * width) {<br>            return 1;<br>        }<br>        int r = seqR[at];<br>        int c = seqC[at];<br>        int min = 1;<br>        int max = 2;<br>        int saved = board[r][c];<br>        if (saved &gt; 0) {<br>            min = saved;<br>            max = saved;<br>        }<br>        long res = 0;<br>        for (int what = min; what &lt;= max; ++what) {<br>            board[r][c] = what;<br>            boolean ok = true;<br>            for (int rr = 0; rr &lt; r &amp;&amp; ok; ++rr)<br>                for (int cc = 0; cc &lt; c &amp;&amp; ok; ++cc)<br>                    if (board[rr][cc] == what &amp;&amp; board[rr][c] == what &amp;&amp; board[r][cc] == what) {<br>                        ok = false;<br>                    }<br>            if (ok) {<br>                res += rec(at + 1);<br>            }<br>        }<br>        board[r][c] = saved;<br>        return res;<br>    }<br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by RETester [based on ExampleBuilder]<br>// Powered by CodeProcessor<br></td>