<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections;<br>using System.Collections.Generic;<br><br>public class P8XMatrixRecovery<br>{<br>  public string[] solve( string[] rows, string[] columns )<br>  {<br>    R = rows.Length;<br>    C = rows[0].Length;<br>    string[] res = new string[R];<br>    for ( int i = 0; i &lt; R; ++i )<br>    {<br>      res[i] = "";<br>      for ( int j = 0; j &lt; C; ++j )<br>      {<br>        char nextC;<br>        if ( rows[i][j] != '?' ) nextC = rows[i][j];<br>        else<br>        {<br>          rows[i] = rows[i].Substring( 0, j ) + '0' + rows[i].Substring( j + 1 );<br>          if ( canBe( rows, columns ) )<br>          {<br>            nextC = '0';<br>          }<br>          else<br>          {<br>            nextC = '1';<br>            rows[i] = rows[i].Substring( 0, j ) + '1' + rows[i].Substring( j + 1 );<br>          }<br>        }<br>        res[i] += nextC;<br>      }<br>    }<br>    return res;<br>  }<br><br>  private bool[,] a;<br>  private int[] xy, yx;<br>  private int R, C;<br><br>  private bool canBe( string[] rows, string[] columns )<br>  {<br>    a = new bool[C, C];<br>    xy = new int[C];<br>    yx = new int[C];<br>    for ( int i = 0; i &lt; C; ++i )<br>    {<br>      xy[i] = -1;<br>      yx[i] = -1;<br>    }<br>    for ( int i = 0; i &lt; C; ++i )<br>      for ( int j = 0; j &lt; C; ++j )<br>      {<br>        bool ok = true;<br>        for ( int k = 0; k &lt; R; ++k ) if ( columns[i][k] != rows[k][j] &amp;&amp; columns[i][k] != '?' &amp;&amp; rows[k][j] != '?' )<br>          {<br>            ok = false;<br>            break;<br>          }<br>        a[i, j] = ok;<br>      }<br>    for ( int i = 0; i &lt; C; ++i ) if ( xy[i] == -1 )<br>      {<br>        if ( !go( i, new bool[C] ) ) return<br>            false;<br>      }<br>    return true;<br>  }<br><br>  private bool go( int u, bool[] was )<br>  {<br>    if ( was[u] ) return false;<br>    was[u] = true;<br>    for ( int i = 0; i &lt; C; ++i ) if ( a[u, i] &amp;&amp; ( yx[i] == -1 || go( yx[i], was ) ) )<br>      {<br>        xy[u] = i;<br>        yx[i] = u;<br>        return true;<br>      }<br>    return false;<br>  }<br><br>}<br><br><br> <br>// Powered by moj 4.16 [modified TZTester]<br>// Powered by CleanSharp 1.0<br>// Powered by CodeProcessor<br></td>