<td class="problemText" colspan="8" valign="middle" align="left">
            //  SRM 527 (B)<br><br>#include &lt;cstdio&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cstring&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cassert&gt;<br>#include &lt;iostream&gt;<br>#include &lt;sstream&gt;<br>#include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;queue&gt;<br>#include &lt;set&gt;<br>#include &lt;map&gt;<br>#include &lt;utility&gt;<br>#include &lt;numeric&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;bitset&gt;<br>#include &lt;complex&gt;<br><br>using namespace std;<br><br>typedef unsigned uint;<br>typedef long long Int;<br>typedef vector&lt;int&gt; vint;<br>typedef pair&lt;int,int&gt; pint;<br>#define mp make_pair<br><br>template&lt;class T&gt; void pv(T a, T b) { for (T i = a; i != b; ++i) cout &lt;&lt; *i &lt;&lt; " "; cout &lt;&lt; endl; }<br>template&lt;class T&gt; void chmin(T &amp;t, T f) { if (t &gt; f) t = f; }<br>template&lt;class T&gt; void chmax(T &amp;t, T f) { if (t &lt; f) t = f; }<br><br>namespace BM {<br>  #define MAXN0 110<br>  #define MAXN1 110<br>  #define MAXM  10010<br>  int n0, n1, m, ptr[MAXN0], next[MAXM], zu[MAXM];<br>  int to[MAXN0], fr[MAXN1], us[MAXN1], ze;<br>  void init(int _n0, int _n1) {<br>    n0 = _n0; n1 = _n1; m = 0; memset(ptr, ~0, n0 &lt;&lt; 2);<br>  }<br>  void ae(int u, int v) {<br>    next[m] = ptr[u]; ptr[u] = m; zu[m] = v; ++m;<br>  }<br>  int augment(int u) {<br>    int i, v;<br>    for (i = ptr[u]; ~i; i = next[i]) if (us[v = zu[i]] != ze) {<br>      us[v] = ze;<br>      if (!~fr[v] || augment(fr[v])) {<br>        to[u] = v; fr[v] = u; return 1;<br>      }<br>    }<br>    return 0;<br>  }<br>  int fof() {<br>    memset(to, ~0, n0 &lt;&lt; 2); memset(fr, ~0, n1 &lt;&lt; 2); memset(us, ~0, n1 &lt;&lt; 2);<br>    int ret = 0;<br>    for (ze = 0; ze &lt; n0; ++ze) ret += augment(ze);<br>    return ret;<br>  }<br>}<br><br>int M, N;<br>vector&lt;string&gt; S, T;<br><br>struct P8XMatrixRecovery {<br>  <br>  bool check() {<br>    int x, y, z;<br>    BM::init(N, N);<br>    for (y = 0; y &lt; N; ++y) for (z = 0; z &lt; N; ++z) {<br>      for (x = 0; x &lt; M; ++x) {<br>        if (S[x][y] == '?') continue;<br>        if (T[x][z] == '?') continue;<br>        if (S[x][y] != T[x][z]) break;<br>      }<br>      if (x == M) {<br>        BM::ae(y, z);<br>      }<br>    }<br>    int res = BM::fof();<br>    return (res == N);<br>  }<br>  <br>  vector &lt;string&gt; solve(vector &lt;string&gt; rows, vector &lt;string&gt; columns) {<br>    int x, y;<br>    <br>    M = rows.size();<br>    N = columns.size();<br>    S = T = rows;<br>    for (x = 0; x &lt; M; ++x) for (y = 0; y &lt; N; ++y) {<br>      S[x][y] = rows[x][y];<br>      T[x][y] = columns[y][x];<br>    }<br>    <br>    for (x = 0; x &lt; M; ++x) for (y = 0; y &lt; N; ++y) {<br>      if (S[x][y] == '?') {<br>        S[x][y] = '0';<br>        if (check()) {<br>          continue;<br>        }<br>        S[x][y] = '1';<br>      }<br>    }<br>    <br>    return S;<br>    <br>  }<br>  <br>};<br></td>