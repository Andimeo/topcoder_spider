<td class="problemText" colspan="8" valign="middle" align="left">
            import java.math.BigInteger;<br>import java.util.*;<br><br>public class AmoebaDivOne {<br>    static final int MOD = 1000000007;<br><br>    public int count(String[] table) {<br>        int height = table.length * 2;<br>        int width = table[0].length() * 2;<br>        boolean[][] field = new boolean[height][width];<br>        for (int i = 0; i &lt; height / 2; ++i) {<br>            for (int j = 0; j &lt; width / 2; ++j) {<br>                BigInteger x = new BigInteger("" + table[i].charAt(j), 16);<br>                field[i * 2][j * 2] = x.testBit(0);<br>                field[i * 2][j * 2 + 1] = x.testBit(1);<br>                field[i * 2 + 1][j * 2] = x.testBit(2);<br>                field[i * 2 + 1][j * 2 + 1] = x.testBit(3);<br>            }<br>        }<br>        int[][][][] res = new int[2][2][width][width];<br>        int totalRes = 0;<br>        for (int row = 0; row &lt; height; ++row) {<br>            int[][][][] newRes = new int[2][2][width][width];<br>            for (int firstDecreased = 0; firstDecreased &lt; 2; ++firstDecreased)<br>                for (int lastDecreased = 0; lastDecreased &lt; 2; ++lastDecreased)<br>                    for (int firstCol = 0; firstCol &lt; width; ++firstCol)<br>                        for (int lastCol = firstCol; lastCol &lt; width; ++lastCol) {<br>                            int cur = res[firstDecreased][lastDecreased][firstCol][lastCol];<br>                            if (cur == 0) continue;<br>                            for (int newFirstDecreased = firstDecreased; newFirstDecreased &lt; 2; ++newFirstDecreased)<br>                                for (int newLastDecreased = lastDecreased; newLastDecreased &lt; 2; ++newLastDecreased) {<br>                                    int newFirstCol;<br>                                    if (newFirstDecreased == 0)<br>                                        newFirstCol = firstCol;<br>                                    else if (firstDecreased == 0)<br>                                        newFirstCol = firstCol + 1;<br>                                    else<br>                                        newFirstCol = firstCol;<br>                                    int newLastCol;<br>                                    if (newLastDecreased == 0)<br>                                        newLastCol = lastCol;<br>                                    else if (lastDecreased == 0)<br>                                        newLastCol = lastCol - 1;<br>                                    else<br>                                        newLastCol = lastCol;<br>                                    if (newFirstCol &gt; newLastCol)<br>                                        continue;<br>                                    int[] arr = newRes[newFirstDecreased][newLastDecreased][newFirstCol];<br>                                    arr[newLastCol] += cur;<br>                                    if (arr[newLastCol] &gt;= MOD) arr[newLastCol] -= MOD;<br>                                }<br>                        }<br><br>            for (int firstDecreased = 0; firstDecreased &lt; 2; ++firstDecreased)<br>                for (int lastDecreased = 0; lastDecreased &lt; 2; ++lastDecreased) {<br>                    int[][] arr = newRes[firstDecreased][lastDecreased];<br>                    if (firstDecreased == 0 &amp;&amp; lastDecreased == 1) {<br>                        {<br>                            int lastDelta = lastDecreased == 0 ? 1 : -1;<br>                            int lastMin = lastDelta == 1 ? 0 : width - 1;<br>                            int lastMax = lastDelta == 1 ? width : -1;<br>                            for (int lastCol = lastMin; lastCol != lastMax; lastCol += lastDelta) {<br>                                for (int firstCol = 0; firstCol &lt;= lastCol; ++firstCol) {<br>                                    int cur = arr[firstCol][lastCol];<br>                                    if (cur == 0) continue;<br>                                    int newLastCol = lastCol + lastDelta;<br>                                    if (newLastCol &gt;= firstCol &amp;&amp; newLastCol &lt; width) {<br>                                        arr[firstCol][newLastCol] += cur;<br>                                        if (arr[firstCol][newLastCol] &gt;= MOD) arr[firstCol][newLastCol] -= MOD;<br>                                    }<br>                                }<br>                            }<br>                        }<br>                        {<br>                            int firstDelta = firstDecreased == 0 ? -1 : 1;<br>                            int firstMin = firstDelta == 1 ? 0 : width - 1;<br>                            int firstMax = firstDelta == 1 ? width : -1;<br>                            for (int firstCol = firstMin; firstCol != firstMax; firstCol += firstDelta) {<br>                                for (int lastCol = firstCol; lastCol &lt; width; ++lastCol) {<br>                                    int cur = arr[firstCol][lastCol];<br>                                    if (cur == 0) continue;<br>                                    int newFirstCol = firstCol + firstDelta;<br>                                    if (newFirstCol &gt;= 0 &amp;&amp; newFirstCol &lt;= lastCol) {<br>                                        arr[newFirstCol][lastCol] += cur;<br>                                        if (arr[newFirstCol][lastCol] &gt;= MOD) arr[newFirstCol][lastCol] -= MOD;<br>                                    }<br>                                }<br>                            }<br>                        }<br>                    } else {<br>                        {<br>                            int firstDelta = firstDecreased == 0 ? -1 : 1;<br>                            int firstMin = firstDelta == 1 ? 0 : width - 1;<br>                            int firstMax = firstDelta == 1 ? width : -1;<br>                            for (int firstCol = firstMin; firstCol != firstMax; firstCol += firstDelta) {<br>                                for (int lastCol = firstCol; lastCol &lt; width; ++lastCol) {<br>                                    int cur = arr[firstCol][lastCol];<br>                                    if (cur == 0) continue;<br>                                    int newFirstCol = firstCol + firstDelta;<br>                                    if (newFirstCol &gt;= 0 &amp;&amp; newFirstCol &lt;= lastCol) {<br>                                        arr[newFirstCol][lastCol] += cur;<br>                                        if (arr[newFirstCol][lastCol] &gt;= MOD) arr[newFirstCol][lastCol] -= MOD;<br>                                    }<br>                                }<br>                            }<br>                        }<br>                        {<br>                            int lastDelta = lastDecreased == 0 ? 1 : -1;<br>                            int lastMin = lastDelta == 1 ? 0 : width - 1;<br>                            int lastMax = lastDelta == 1 ? width : -1;<br>                            for (int lastCol = lastMin; lastCol != lastMax; lastCol += lastDelta) {<br>                                for (int firstCol = 0; firstCol &lt;= lastCol; ++firstCol) {<br>                                    int cur = arr[firstCol][lastCol];<br>                                    if (cur == 0) continue;<br>                                    int newLastCol = lastCol + lastDelta;<br>                                    if (newLastCol &gt;= firstCol &amp;&amp; newLastCol &lt; width) {<br>                                        arr[firstCol][newLastCol] += cur;<br>                                        if (arr[firstCol][newLastCol] &gt;= MOD) arr[firstCol][newLastCol] -= MOD;<br>                                    }<br>                                }<br>                            }<br>                        }<br>                    }<br>                }<br><br>            for (int firstCol = 0; firstCol &lt; width; ++firstCol) {<br>                boolean ok = true;<br>                for (int lastCol = firstCol; lastCol &lt; width; ++lastCol) {<br>                    if (field[row][lastCol])<br>                        ok = false;<br>                    if (!ok) {<br>                        for (int firstDecreased = 0; firstDecreased &lt; 2; ++firstDecreased)<br>                            for (int lastDecreased = 0; lastDecreased &lt; 2; ++lastDecreased)<br>                                newRes[firstDecreased][lastDecreased][firstCol][lastCol] = 0;<br>                   } else {<br>                        newRes[0][0][firstCol][lastCol] += 1;<br>                        if (newRes[0][0][firstCol][lastCol] &gt;= MOD) newRes[0][0][firstCol][lastCol] -= MOD;<br>                    }<br>                }<br>            }<br><br>            res = newRes;<br>            for (int firstDecreased = 0; firstDecreased &lt; 2; ++firstDecreased)<br>                for (int lastDecreased = 0; lastDecreased &lt; 2; ++lastDecreased)<br>                    for (int firstCol = 0; firstCol &lt; width; ++firstCol)<br>                        for (int lastCol = firstCol; lastCol &lt; width; ++lastCol) {<br>                            totalRes += res[firstDecreased][lastDecreased][firstCol][lastCol];<br>                            if (totalRes &gt;= MOD) totalRes -= MOD;<br>                        }<br>        }<br>        return totalRes;<br>    }<br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by RETester [based on ExampleBuilder]<br>// Powered by CodeProcessor<br></td>