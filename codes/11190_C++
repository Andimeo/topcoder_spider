<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;cmath&gt;<br>#include &lt;iostream&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;ctime&gt;<br>#include &lt;sstream&gt;<br>#include &lt;iomanip&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br><br>using namespace std;<br><br><br>#define REP(i,n) for(int i=0;i&lt;(n);++i)<br>#define PB push_back<br><br>class BadVocabulary<br>{<br>public:<br>  int count(string badPrefix, string badSuffix, string badSubstring, vector &lt;string&gt; vocabulary);<br><br>};<br><br>int BadVocabulary::count(string badPrefix, string badSuffix, string badSubstring, vector &lt;string&gt; vocabulary)<br>{<br>  int ans = 0;<br><br>  REP(i,vocabulary.size()){<br>    if ( vocabulary[i].length() &gt;= badPrefix.length() &amp;&amp;  vocabulary[i].substr(0,badPrefix.length()) == badPrefix ) {<br>      ans++;<br>    } else if ( vocabulary[i].length() &gt;= badSuffix.length() &amp;&amp; vocabulary[i].substr(vocabulary[i].length()-badSuffix.length()) == badSuffix ) {<br>      ans++;<br>    } else {<br>      vocabulary[i] = vocabulary[i].substr( 1, vocabulary[i].length() - 2 );<br>      if ( vocabulary[i].find( badSubstring ) != vocabulary[i].npos ) {<br>        ans++;<br>      }<br>    }<br>  }<br><br>  return ans;<br><br>}<br></td>