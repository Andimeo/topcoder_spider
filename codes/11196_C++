<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;algorithm&gt;<br>#include &lt;bitset&gt;<br>#include &lt;cassert&gt;<br>#include &lt;cctype&gt;<br>#include &lt;climits&gt;<br>#include &lt;cmath&gt;<br>#include &lt;complex&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cstring&gt;<br>#include &lt;ctime&gt;<br>#include &lt;deque&gt;<br>#include &lt;fstream&gt;<br>#include &lt;functional&gt;<br>#include &lt;iomanip&gt;<br>#include &lt;iostream&gt;<br>#include &lt;limits&gt;<br>#include &lt;list&gt;<br>#include &lt;map&gt;<br>#include &lt;numeric&gt;<br>#include &lt;queue&gt;<br>#include &lt;set&gt;<br>#include &lt;sstream&gt;<br>#include &lt;stack&gt;<br>#include &lt;string&gt;<br>#include &lt;utility&gt;<br>#include &lt;vector&gt;<br>using namespace std;<br> <br>const int MAX = 50;<br> <br>int N, M;<br>int backward [MAX][MAX], forward [MAX][MAX];<br> <br>inline bool better (string now, string best)<br>{<br>    if (now.length () &gt; best.length ())<br>        return true;<br>    else if (now.length () == best.length ())<br>        return now &lt; best;<br>    else<br>        return false;<br>}<br> <br>struct TheBoringStoreDivOne<br>{<br>    string find (string A, string B)<br>    {<br>        N = A.length ();<br>        M = B.length ();<br>        string best = "";<br> <br>        memset (backward, 0, sizeof (backward));<br>        memset (forward, 0, sizeof (forward));<br> <br>        for (int i = 0; i &lt; N; i++)<br>            for (int j = i; j &lt;= N; j++)<br>                for (int k = 0; k &lt;= i; k++)<br>                {<br>                    string sub = A.substr (i - k, k);<br>                    bool match = false;<br> <br>                    for (int s = 0; s + k &lt;= N; s++)<br>                        if (s &lt;= i - 2 * k || s &gt;= j)<br>                            if (sub == A.substr (s, k))<br>                                match = true;<br> <br>                    if (match)<br>                        backward [i][j] = k;<br>                }<br> <br>        for (int i = 0; i &lt; M; i++)<br>            for (int j = i; j &lt;= M; j++)<br>                for (int k = 0; k &lt;= M - j; k++)<br>                {<br>                    string sub = B.substr (j, k);<br>                    bool match = false;<br> <br>                    for (int s = 0; s + k &lt;= M; s++)<br>                        if (s &lt;= i - k || s &gt;= j + k)<br>                            if (sub == B.substr (s, k))<br>                                match = true;<br> <br>                    if (match)<br>                        forward [i][j] = k;<br>                }<br> <br>        for (int len = 0; len &lt;= min (N, M); len++)<br>            for (int i = 0; i + len &lt;= N; i++)<br>                for (int j = 0; j + len &lt;= M; j++)<br>                    if (A.substr (i, len) == B.substr (j, len))<br>                    {<br>                        if (backward [i][i + len] == 0 || forward [j][j + len] == 0)<br>                            continue;<br> <br>                        int a = i - backward [i][i + len];<br>                        int b = j + len + forward [j][j + len];<br>                        string now = A.substr (a, i - a) + B.substr (j, b - j);<br> <br>                        if (better (now, best))<br>                            best = now;<br>                    }<br> <br>        return best;<br>    }<br>};<br> <br> <br> <br>// Powered by FileEdit<br>// Powered by moj 4.16 [modified TZTester]<br>// Powered by CodeProcessor<br></td>