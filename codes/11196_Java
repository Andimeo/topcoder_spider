<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br> <br>public class TheBoringStoreDivOne {<br>  public String find(String J, String B) {<br>    Map&lt;String, String&gt; firstJ = new HashMap&lt;String, String&gt;();<br>    Map&lt;String, String&gt; secondJ = new HashMap&lt;String, String&gt;();<br>    Map&lt;String, String&gt; firstB = new HashMap&lt;String, String&gt;();<br>    Map&lt;String, String&gt; secondB = new HashMap&lt;String, String&gt;();<br>    fill(J, firstJ, secondJ, false);<br>    B = reverse(B);<br>    fill(B, firstB, secondB, true);<br>    String res = "";<br>    for (Map.Entry&lt;String, String&gt; me : firstJ.entrySet()) {<br>      String tail = me.getKey();<br>      String common = me.getValue();<br>      if (tail.length() == 0) {<br>        res = updateResult(res, tail, common, firstB);<br>      } else {<br>        res = updateResult(res, tail, common, secondB);<br>      }<br>    }<br>    for (Map.Entry&lt;String, String&gt; me : secondJ.entrySet()) {<br>      String tail = me.getKey();<br>      String common = me.getValue();<br>      if (tail.length() == 0) {<br>        throw null;<br>      } else {<br>        res = updateResult(res, tail, common, firstB);<br>      }<br>    }<br>    return res;<br>  }<br> <br>  private String updateResult(String res, String tail, String common, Map&lt;String, String&gt; firstB) {<br>    String other = "";<br>    if (firstB.containsKey(tail)) {<br>      other = common + tail + firstB.get(tail);<br>    }<br>    res = max(res, other);<br>    return res;<br>  }<br> <br>  private String max(String a, String b) {<br>    if (a.length() &gt; b.length()) {<br>      return a;<br>    } else if (a.length() == b.length()) {<br>      if (a.compareTo(b) &lt; 0) {<br>        return a;<br>      } else {<br>        return b;<br>      }<br>    } else {<br>      return b;<br>    }<br>  }<br> <br>  private String reverse(String s) {<br>    return new StringBuilder(s).reverse().toString();<br>  }<br> <br>  private void fill(String s, Map&lt;String, String&gt; first, Map&lt;String, String&gt; second, boolean reverse) {<br>    for (int x1 = 0; x1 &lt; s.length(); ++x1) {<br>      for (int y1 = x1 + 1; y1 &lt;= s.length(); ++y1) {<br>        for (int x2 = y1; x2 &lt; s.length(); ++x2) {<br>          for (int y2 = x2 + 1; y2 &lt;= s.length(); ++y2) {<br>            String A = s.substring(x1, y1);<br>            String B = s.substring(x2, y2);<br>            process(A, B, first, second, reverse);<br>            process(B, A, first, second, reverse);<br>          }<br>        }<br>      }<br>    }<br>  }<br> <br>  private void process(String A, String B, Map&lt;String, String&gt; first, Map&lt;String, String&gt; second, boolean reverse) {<br>    int min = Math.min(A.length(), B.length());<br>    boolean ok = true;<br>    for (int k = 0; k &lt; min; ++k) {<br>      if (A.charAt(k) != B.charAt(k)) {<br>        ok = false;<br>        break;<br>      }<br>    }<br>    if (ok) {<br>      if (A.length() &gt;= B.length()) {<br>        String common = B;<br>        String tail = A.substring(B.length());<br>        if (reverse) {<br>          tail = reverse(tail);<br>          common = reverse(common);<br>        }<br>        update(first, common, tail);<br>      } else {<br>        String common = A;<br>        String tail = B.substring(A.length());<br>        if (reverse) {<br>          tail = reverse(tail);<br>          common = reverse(common);<br>        }<br>        update(second, common, tail);<br>      }<br>    }<br>  }<br> <br>  private void update(Map&lt;String, String&gt; first, String common, String tail) {<br>    if (!first.containsKey(tail)) {<br>      first.put(tail, common);<br>    } else {<br>      String other = first.get(tail);<br>      if (common.length() &gt; other.length() || (common.length() == other.length() &amp;&amp; other.compareTo(common) &gt; 0)) {<br>        first.put(tail, common);<br>      }<br>    }<br>  }<br> <br> <br>}<br>// Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!<br></td>