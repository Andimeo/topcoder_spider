<td class="problemText" colspan="8" valign="middle" align="left">
            import static java.lang.Math.*;<br>import static java.util.Arrays.*;<br>import static java.util.Collections.reverse;<br>import static java.lang.Integer.*;<br>import static java.lang.Long.parseLong;<br>import java.util.*;<br>import java.awt.geom.*;<br><br><br>public class TheBoringStoreDivTwo {<br>    <br>    final int INF = 1000000000;    <br>    <br>    public String find(String J, String B) {<br>        <br>        String ret="";<br>        char[] j = J.toCharArray();<br>        char[] b = B.toCharArray();<br>        int n1 = J.length();<br>        int n2 = B.length();<br>        Set&lt;XY&gt; set1 = new TreeSet&lt;XY&gt;();<br>        Set&lt;XY&gt; set2 = new TreeSet&lt;XY&gt;();<br><br>        for (int a1 = 0; a1 &lt; n1; ++a1) {<br>            for (int a2 = a1+1; a2 &lt;= n1; ++a2) {<br>                String s1=J.substring(a1,a2);<br>                for (int b1 = a2; b1 &lt; n1; ++b1) {<br>                    if (j[a1]!=j[b1]) continue;<br>                    <br>                    for (int b2 = b1+1; b2 &lt;= n1; ++b2) {<br>                        String s2=J.substring(b1,b2);<br>                        set1.add(new XY(s1,s2));<br>                    }<br>                }<br>            }<br>        }<br>        <br>        for (int c1 = 0; c1 &lt; n2; ++c1) {<br>            for (int c2 = c1+1; c2 &lt;= n2; ++c2) {<br>                String s1=B.substring(c1,c2);<br>                for (int d1 = c2; d1 &lt; n2; ++d1) {<br>                    for (int d2 = d1+1; d2 &lt;= n2; ++d2) {<br>                        if (b[c2-1]!=b[d2-1]) continue;<br>                        <br>                        String s2=B.substring(d1,d2);<br>                        set2.add(new XY(s1,s2));<br>                    }<br>                }<br>            }<br>        }<br>        <br>        for (XY xy1 : set1) {<br>            for (XY xy2 : set2) {<br>                String s1=xy1.x+xy2.x;<br>                String s2=xy1.y+xy2.y;<br>                if (s1.equals(s2)) {<br>                    if (s1.length()&gt;ret.length() || (s1.length()==ret.length() &amp;&amp; s1.compareTo(ret)&lt;0)) {<br>                        ret=s1;<br>                    }<br>                }<br>                <br>                s1=xy1.x+xy2.y;<br>                s2=xy1.y+xy2.x;<br>                if (s1.equals(s2)) {<br>                    if (s1.length()&gt;ret.length() || (s1.length()==ret.length() &amp;&amp; s1.compareTo(ret)&lt;0)) {<br>                        ret=s1;<br>                    }<br>                }<br>            }<br>        }<br>        <br>        return ret;<br>    }<br><br>    class XY implements Comparable&lt;XY&gt; {<br>        String x;<br>        String y;<br><br>        public XY(String x, String y) {<br>            this.x = x;<br>            this.y = y;<br>        }<br><br>        public String toString() {<br>            return "(" + x + ", " + y + ")";<br>        }<br><br>        public int compareTo(XY o) {<br>            if (x != o.x)<br>                return x.compareTo(o.x);<br>            return y.compareTo(o.y);<br>        }<br>    }<br><br><br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by CodeProcessor<br></td>