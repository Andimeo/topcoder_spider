<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;string&gt;<br>#include &lt;vector&gt;<br>//#include &lt;list&gt;<br>//#include &lt;algorithm&gt;<br>//#include &lt;map&gt;<br>//#include &lt;set&gt;<br>//#include &lt;hash_map&gt;<br>//#include &lt;hash_set&gt;<br>#include &lt;iterator&gt;<br>#include &lt;iostream&gt;<br>#include &lt;sstream&gt;<br>//#include &lt;ctype.h&gt;<br>//#include &lt;cstdlib&gt;<br>using namespace std;<br> <br>///////////////////////////////////////////////////////////////////////////////<br>typedef vector&lt;int&gt;  VI;<br>typedef vector&lt;VI&gt;  VVI;<br>typedef vector&lt;signed char&gt;  VC;<br>typedef vector&lt;VC&gt;  VVC;<br>typedef vector&lt;double&gt;  VD;<br>typedef vector&lt;VD&gt;  VVD;<br>typedef vector&lt;string&gt;  VS;<br>typedef pair&lt;int,int&gt;  pi;<br>typedef long long  int64;<br>#define forEach(x, xx)  if ((x).begin() != (x).end()) for (typeof((x).begin()) xx = (x).begin(); xx != (x).end(); xx++)<br>#define fori(b)    for(int i = 0; i &lt; b; i++)<br>#define forj(b)    for(int j = 0; j &lt; b; j++)<br>#define fork(b)    for(int k = 0; j &lt; b; j++)<br>#define forx(b)    for(int x = 0; x &lt; b; x++)<br>#define fory(b)    for(int y = 0; y &lt; b; y++)<br>#define forz(b)    for(int z = 0; z &lt; b; z++)<br>#define fr(i,a,b)    for(int i = a; i &lt; b; i++)<br>//#define px  first<br>//#define py  second<br>//int dx[] = { -1, 0, 0, +1};<br>//int dy[] = { 0, -1, +1, 0 };<br>//int dx[] = { -1, 0, 1, -1, 1, -1, 0, 1 };<br>//int dy[] = { -1, -1, -1, 0, 0, 1, 1, 1 };<br> <br>///////////////////////////////////////////////////////////////////////////////<br>// More convenient heap functions<br>/*<br>template&lt;class T&gt; inline void heap_push(vector&lt;T&gt;&amp; q, const T&amp; x) {<br>  q.push_back(x);<br>  push_heap(q.begin(), q.end());<br>}<br>template&lt;class T&gt; inline T heap_pop(vector&lt;T&gt;&amp; q) {<br>  pop_heap(q.begin(), q.end());<br>  T t = q.back();<br>  q.pop_back();<br>  return t;<br>}<br>*/<br> <br>///////////////////////////////////////////////////////////////////////////////<br>/*<br>bool Prefix(const string&amp; s, const string&amp; sub) {<br>  return<br>    s.length() &gt;= sub.length() &amp;&amp;<br>    equal(sub.begin(), sub.end(), s.begin());<br>}<br>*/<br> <br>///////////////////////////////////////////////////////////////////////////////<br>// indigo9's topcoder lib: String -&gt; Vector&lt;string&gt; tokeniser<br>/*<br>VS StrTok(const string&amp; s, char delim = ' ') {<br>  VS v;<br>  string t;<br>  istringstream iss(s);<br>  getline(iss, t, delim);<br>  while (!iss.fail(  )) {<br>    v.push_back(t);<br>    getline(iss, t, delim);<br>  }<br>  return v;<br>}<br>*/<br> <br>///////////////////////////////////////////////////////////////////////////////<br>// indigo9's topcoder lib: string -&gt; vector&lt;int&gt; reader<br>/*<br>VI IntTok(string&amp; s) {<br>  for (int i = 0; i &lt; s.size(); i++) {<br>    if (!isdigit(s[i]) &amp;&amp; s[i] != '.' &amp;&amp; s[i] != '-') s[i] = ' ';<br>  }<br>  VI v;<br>  istringstream iss(s); int x;<br> <br>  iss &gt;&gt; x;<br>  while (!iss.fail()) {<br>    v.push_back(x);<br>    iss &gt;&gt; x;<br>  }<br>  return v;<br>}<br>*/<br> <br>///////////////////////////////////////////////////////////////////////////////<br>// indigo9's topcoder lib: (class) -&gt; integer<br>// convert T to string<br>/*<br>template&lt;class T&gt;<br>string Str(const T&amp; x) {<br>  ostringstream oss;<br>  oss &lt;&lt; x;<br>  return oss.str();<br>}<br>*/<br> <br>///////////////////////////////////////////////////////////////////////////////<br>// indigo9's topcoder lib: string -&gt; integer<br>/*<br>int Int(const string&amp; s) {<br>  istringstream iss(s); int x;<br>  iss &gt;&gt; x;<br>  return x;<br>}<br>*/<br>///////////////////////////////////////////////////////////////////////////////<br> <br> <br>class SchoolAssembly {<br>  public:<br>  int getBeans(int kids, int quantity) {<br>    int nB = kids*quantity + 4*(quantity-1);<br>    return (nB+19)/20;<br>    <br>  }<br>};<br> <br> <br>// Powered by PopsEdit<br></td>