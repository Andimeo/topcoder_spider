<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;algorithm&gt;<br>#include &lt;bitset&gt;<br>#include &lt;cassert&gt;<br>#include &lt;cctype&gt;<br>#include &lt;climits&gt;<br>#include &lt;cmath&gt;<br>#include &lt;complex&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cstring&gt;<br>#include &lt;ctime&gt;<br>#include &lt;deque&gt;<br>#include &lt;fstream&gt;<br>#include &lt;functional&gt;<br>#include &lt;iomanip&gt;<br>#include &lt;iostream&gt;<br>#include &lt;limits&gt;<br>#include &lt;list&gt;<br>#include &lt;map&gt;<br>#include &lt;numeric&gt;<br>#include &lt;queue&gt;<br>#include &lt;set&gt;<br>#include &lt;sstream&gt;<br>#include &lt;stack&gt;<br>#include &lt;string&gt;<br>#include &lt;utility&gt;<br>#include &lt;vector&gt;<br>using namespace std;<br> <br>const int INF = 1000000000;<br> <br>inline int max (int a, int b, int c)<br>{<br>    return max (max (a, b), c);<br>}<br> <br>inline int min (int a, int b, int c)<br>{<br>    return min (min (a, b), c);<br>}<br> <br>inline bool check (int a, int b, int c, int d, int e, int scoreJ, int killedJ, int scoreB, int killedB)<br>{<br>    if (a &lt; 0 || b &lt; 0 || c &lt; 0 || d &lt; 0 || e &lt; 0)<br>        return false;<br> <br>    if (a - d + e != scoreJ + scoreB)<br>        return false;<br> <br>    if (2 * b + c + 2 * d + e != killedB + killedJ)<br>        return false;<br> <br>    int goal1 = scoreJ - scoreB;<br>    int goal2 = killedJ - killedB;<br> <br>    if ((a + d + e + goal1) % 2 != 0)<br>        return false;<br> <br>    if ((c + e + goal2) % 2 != 0)<br>        return false;<br> <br>    return max (-e, goal2 - c, -a - d - goal1) &lt;= min (e, goal2 + c, a + d - goal1);<br>}<br> <br>struct TheBoringGameDivOne<br>{<br>    vector &lt;int&gt; find (int scoreJ, int killedJ, int scoreB, int killedB, int scoreF, int killedF)<br>    {<br>        if (scoreF &lt; 0)<br>            return vector &lt;int&gt; ();<br> <br>        int self_killed = killedJ + killedB - scoreF;<br>        int least = INF, most = -INF;<br> <br>        for (int b = 0; 2 * b &lt;= scoreF; b++)<br>            for (int d = 0; 2 * b + d &lt;= scoreF; d++)<br>            {<br>                int e = scoreF - 2 * b - d;<br>                int c = self_killed - d;<br>                int a = killedF - c - e;<br> <br>                if (check (a, b, c, d, e, scoreJ, killedJ, scoreB, killedB))<br>                {<br>                    least = min (least, a + b + c + d + e);<br>                    most = max (most, a + b + c + d + e);<br>                }<br>            }<br> <br>        if (least &gt; most)<br>            return vector &lt;int&gt; ();<br> <br>        vector &lt;int&gt; v;<br>        v.push_back (least);<br>        v.push_back (most);<br>        return v;<br>    }<br>};<br> <br> <br> <br>// Powered by FileEdit<br>// Powered by moj 4.16 [modified TZTester]<br>// Powered by CodeProcessor<br></td>