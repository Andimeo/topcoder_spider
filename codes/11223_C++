<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;iostream&gt;<br>#include &lt;sstream&gt;<br>#include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;deque&gt;<br>#include &lt;queue&gt;<br>#include &lt;set&gt;<br>#include &lt;map&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;functional&gt;<br>#include &lt;utility&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;ctime&gt;<br><br>using namespace std;<br><br>#define REP(i,n) for((i)=0;(i)&lt;(int)(n);(i)++)<br><br>#define MOD 10007<br><br>int C[1610][1610];<br>int dpx[1610][810]; // step, x<br>int dpy[1610][810]; // step, y<br>int dpz[1610][90];<br><br>class FoxJumping{<br>  public:<br><br>  int getCount(int Tx, int Ty, int Mx, int My, int R, vector &lt;int&gt; bad){<br>    int i,j,k;<br>    <br>    REP(i,1610) REP(j,i+1){<br>      if(j == 0 || j == i) C[i][j] = 1;<br>      else C[i][j] = (C[i-1][j-1] + C[i-1][j]) % MOD;<br>    }<br>    <br>    dpx[0][0] = 1;<br>    REP(i,R) REP(j,Tx+1){<br>      dpx[i+1][j] = ((j == 0) ? 0 : dpx[i+1][j-1]);<br>      dpx[i+1][j] = (dpx[i+1][j] + dpx[i][j]) % MOD;<br>      if(j &gt;= Mx+1) dpx[i+1][j] = (dpx[i+1][j] - dpx[i][j-Mx-1] + MOD) % MOD;<br>    }<br>    <br>    dpy[0][0] = 1;<br>    REP(i,R) REP(j,Ty+1){<br>      dpy[i+1][j] = ((j == 0) ? 0 : dpy[i+1][j-1]);<br>      dpy[i+1][j] = (dpy[i+1][j] + dpy[i][j]) % MOD;<br>      if(j &gt;= My+1) dpy[i+1][j] = (dpy[i+1][j] - dpy[i][j-My-1] + MOD) % MOD;<br>    }<br>    <br>    bad.push_back(0);<br>    dpz[0][0] = 1;<br>    REP(i,R) REP(j,81) REP(k,bad.size()){<br>      int j2 = j + bad[k] / 10;<br>      if(j2 &lt;= 80) dpz[i+1][j2] = (dpz[i+1][j2] + dpz[i][j]) % MOD;<br>    }<br>    <br>    int small = min(Tx,Ty);<br>    int ans = 0;<br>    REP(i,R+1) for(j=0;j&lt;=small;j+=10){<br>      int tmp = dpz[i][j/10] * dpx[R-i][Tx-j] % MOD * dpy[R-i][Ty-j] % MOD * C[R][i] % MOD;<br>      if(i%2 == 1) tmp = (MOD - tmp) % MOD;<br>      ans = (ans + tmp) % MOD;<br>    }<br>    <br>    return ans;<br>  }<br><br>};<br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003]<br>// Powered by CodeProcessor<br></td>