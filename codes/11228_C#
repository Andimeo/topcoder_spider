<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections;<br>using System.Collections.Generic;<br>using System.Text;<br><br>public class QuickT9 {<br><br>    Dictionary&lt;char, char&gt; cdic;<br>    Dictionary&lt;string, string&gt; resdic;<br>    Dictionary&lt;string, int&gt; numdic;<br>    Dictionary&lt;string, int&gt; exnumdic;<br><br>    string getnum(string s)<br>    {<br>        string res = "";<br>        foreach (char c in s) res += cdic[c];<br>        return res;<br>    }<br><br>    public int minimumPressings(string[] t9, string word)<br>    {<br><br>        cdic = new Dictionary&lt;char, char&gt;();<br>        resdic = new Dictionary&lt;string, string&gt;();<br>        numdic = new Dictionary&lt;string, int&gt;();<br>        exnumdic = new Dictionary&lt;string, int&gt;();<br><br>        string sss = "abcdefghijklmnopqrstuvwxyz";<br>        string ttt = "22233344455566677778889999";<br>        int i, j, k;<br>        for (i = 0; i &lt; 26; i++) cdic[sss[i]] = ttt[i];<br>        for (i = 0; i &lt; t9.Length; i++)<br>        {<br>            string[] ss = t9[i].Split(' ');<br>            for (k = 0; k &lt; ss.Length; k++)<br>            {<br>                for (j = 1; j &lt;= ss[k].Length; j++)<br>                {<br>                    string s = ss[k].Substring(0, j);<br>                    string nums = getnum(s);<br>                    if (!resdic.ContainsKey(nums)) resdic[nums] = s;<br>                    else resdic[nums] = resdic[nums] + " " + s;<br>                }<br>            }<br>        }<br>        foreach (KeyValuePair&lt;string, string&gt; p in resdic)<br>        {<br>            string s = p.Value;<br>            string nums = p.Key;<br>            string[] ss = s.Split(' ');<br>            Array.Sort(ss);<br>            int count = 0;<br>            for (i = 0; i &lt; ss.Length; i++)<br>            {<br>                if (i != 0 &amp;&amp; ss[i] == ss[i - 1]) continue;<br>                int temp = ss[i].Length + count;<br>                if (numdic.ContainsKey(ss[i]))<br>                {<br>                    numdic[ss[i]] = Math.Min(numdic[ss[i]], temp);<br>                }<br>                else<br>                {<br>                    numdic[ss[i]] = temp;<br>                }<br>                count++;<br>            }<br>        }<br>        foreach (KeyValuePair&lt;string, int&gt; p in numdic)<br>        {<br>            string s = p.Key;<br>            int a = p.Value;<br>            for (i = 0; i &lt; s.Length; i++)<br>            {<br>                string ss = s.Substring(0, s.Length - i);<br>                if (!exnumdic.ContainsKey(ss) || exnumdic[ss] &gt; a + Math.Max(0, i - 1))<br>                {<br>                    exnumdic[ss] = a + Math.Max(0, i - 1);<br>                }<br>            }<br>        }<br>        int[] dp = new int[word.Length + 1];<br>        int MAX = 9999999;<br>        for (i = 0; i &lt;= word.Length; i++) dp[i] = MAX;<br>        dp[0] = 0;<br>        for (i = 1; i &lt;= word.Length; i++)<br>        {<br>            for (j = 0; j &lt; i; j++)<br>            {<br>                string s = word.Substring(j, i - j);<br>                if (!exnumdic.ContainsKey(s)) continue;<br>                dp[i] = Math.Min(dp[i], dp[j] + exnumdic[s] + 1);<br><br>            }<br>        }<br>        if (dp[word.Length] &gt;= MAX) return -1;<br>        return dp[word.Length];<br>        <br><br>    }<br><br><br><br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003] [modified for C# by Petr]<br>// Powered by CodeProcessor<br></td>