<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;cstdio&gt;<br>#include &lt;iostream&gt;<br>#include &lt;vector&gt;<br>#include &lt;cmath&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;string&gt;<br>#include &lt;set&gt;<br>#include &lt;map&gt;<br>#include &lt;cstring&gt;<br>#include &lt;cassert&gt;<br>#include &lt;queue&gt;<br> <br>using namespace std;<br> <br>#define forn(i, n) for(int i = 0; i &lt; (int)(n); i++)<br>#define ford(i, n) for(int i = (int)(n) - 1; i &gt;= 0; i--)<br>#define pb push_back<br>#define mp make_pair<br>#define fs first<br>#define sc second<br>#define all(a) a.begin(), a.end()<br>#define sqr(a) (a) * (a)<br>typedef long long int64;<br>typedef pair &lt;int, int&gt; pii;<br> <br>class QuickT9 {<br>public:<br>  int minimumPressings(vector &lt;string&gt;, string);<br>};<br> <br>const int nmax = 100000;<br> <br>int t[nmax];<br>int tm[nmax];<br>vector&lt;int&gt; d[nmax];<br>int res[nmax];<br>vector&lt;string&gt; t9;<br> <br>int num(char a){<br>  if (a &lt;= 'c') return 2;<br>  if (a &lt;= 'f') return 3;<br>  if (a &lt;= 'i') return 4;<br>  if (a &lt;= 'l') return 5;<br>  if (a &lt;= 'o') return 6;<br>  if (a &lt;= 's') return 7;<br>  if (a &lt;= 'v') return 8;<br>  if (a &lt;= 'z') return 9;<br>  return 1;<br>  }<br> <br>int QuickT9::minimumPressings(vector &lt;string&gt; tw, string w) {<br>  t9.clear();<br>  forn(i, nmax)<br>    d[i].clear();<br>  string now, e;<br>  e = "";<br>  forn(i, tw.size())<br>    e += tw[i] + " ";<br>  forn(i, e.size()){<br>    if (e[i] == ' '){<br>      if (now != "")<br>        t9.pb(now);<br>      now = "";<br>      continue;<br>    }<br>    now += e[i];<br>  }<br> <br>  int q = t9.size();<br>  forn(i, q)<br>    forn(j, t9[i].size())<br>      t9.pb(t9[i].substr(0, j + 1));<br>  sort(all(t9));<br>  t9.erase(unique(all(t9)), t9.end());<br>  forn(i, t9.size()){<br>    forn(j, t9[i].size())<br>      d[i].pb(num(t9[i][j]));<br>  }<br>  forn(i, t9.size()){<br>    vector&lt;string&gt; now;<br>    forn(j, t9.size())<br>      if (d[i] == d[j])<br>        now.pb(t9[j]);<br>    sort(all(now));<br>    forn(j, now.size())<br>      if (now[j] == t9[i]){<br>        res[i] = (int)t9[i].size() + j;<br>        break;<br>      }<br>  }<br>  forn(i, nmax)<br>    t[i] = 1e9;<br>  t[0] = 0;<br>  forn(i, w.size())<br>    forn(j, t9.size())<br>      forn (k, t9[j].size())<br>        if (t9[j].substr(0, k + 1) == w.substr(i, k + 1)){<br>          int add = max(1, (int)t9[j].size() - k - 1);<br>          t[i + k + 1] = min(t[i + k + 1], t[i] + res[j] + add);<br>        }<br>  if (t[w.size()] &gt; 1e8) return -1;<br>  return t[w.size()];      <br>    <br>}<br></td>