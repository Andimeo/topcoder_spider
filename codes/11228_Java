<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br><br>public class QuickT9 {<br>    String[] buttons = new String[]{<br>          "",<br>          "",<br>         "abc",<br>         "def",<br>         "ghi",<br>         "jkl",<br>         "mno",<br>        "pqrs",<br>         "tuv",<br>        "wxyz"};<br><br>    static final int INF = Integer.MAX_VALUE / 2;<br><br>    public int minimumPressings(String[] t9, String word) {<br>        Set&lt;String&gt; dictionary = new HashSet&lt;String&gt;();<br>        for (String x : t9) {<br>            for (String y : x.split(" +")) {<br>                dictionary.add(y);<br>            }<br>        }<br>        int[] what = new int[256];<br>        for (int digit = 0; digit &lt; 10; ++digit) {<br>            String cur = buttons[digit];<br>            for (int i = 0; i &lt; cur.length(); ++i)<br>                what[cur.charAt(i)] = digit;<br>        }<br>        Map&lt;String, Set&lt;String&gt;&gt; digitsToWord = new HashMap&lt;String, Set&lt;String&gt;&gt;();<br>        for (String dict : dictionary) {<br>            for (int len = 1; len &lt;= dict.length(); ++len) {<br>                StringBuilder digits = new StringBuilder();<br>                for (int i = 0; i &lt; len; ++i) {<br>                    digits.append((char) ('0' + what[dict.charAt(i)]));<br>                }<br>                String digitsStr = digits.toString();<br>                Set&lt;String&gt; words = digitsToWord.get(digitsStr);<br>                if (words == null) {<br>                    words = new HashSet&lt;String&gt;();<br>                    digitsToWord.put(digitsStr, words);<br>                }<br>                words.add(dict.substring(0, len));<br>            }<br>        }<br>        Map&lt;String, Integer&gt; costToType = new HashMap&lt;String, Integer&gt;();<br>        for (Map.Entry&lt;String, Set&lt;String&gt;&gt; entry : digitsToWord.entrySet()) {<br>            List&lt;String&gt; words = new ArrayList&lt;String&gt;(entry.getValue());<br>            Collections.sort(words);<br>            for (int wordId = 0; wordId &lt; words.size(); ++wordId) {<br>                String cur = words.get(wordId);<br>                int curCost = cur.length() + wordId;<br>                for (int numDeletes = 0; numDeletes &lt; cur.length(); ++numDeletes) {<br>                    String prefix = cur.substring(0, cur.length() - numDeletes);<br>                    Integer old = costToType.get(prefix);<br>                    int prefixCost = curCost + Math.max(1, numDeletes);<br>                    if (old == null || (int) old &gt; prefixCost) {<br>                        costToType.put(prefix, prefixCost);<br>                    }<br>                }<br>            }<br>        }<br><br>        int[] best = new int[word.length() + 1];<br>        Arrays.fill(best, INF);<br>        best[0] = 0;<br>        for (int old = 0; old &lt; word.length(); ++old) {<br>            if (best[old] &gt;= INF)<br>                continue;<br>            for (int size = 1; old + size &lt;= word.length(); ++size) {<br>                String need = word.substring(old, old + size);<br>                Integer cost = costToType.get(need);<br>                if (cost != null) {<br>                    best[old + size] = Math.min(best[old + size], best[old] + cost);<br>                }<br>            }<br>        }<br>        int res = best[word.length()];<br>        if (res &gt;= INF)<br>            return -1;<br>        else<br>            return res;<br>    }<br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by RETester [based on ExampleBuilder]<br>// Powered by CodeProcessor<br></td>