<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br><br>public class InfiniteLab {<br>    static final int INF = Integer.MAX_VALUE / 2;<br>    static final int MANY = 20000;<br>    static final int PERIOD_REPS = 21;<br><br>    public long getDistance(String[] _map, long r1, int c1, long r2, int c2) {<br>        if (r1 &gt; r2) {<br>            long tmp = r1;<br>            r1 = r2;<br>            r2 = tmp;<br>            int t = c1;<br>            c1 = c2;<br>            c2 = t;<br>        }<br>        int height = _map.length;<br>        int width = _map[0].length();<br>        int[][][] moveDr = new int[height][width][];<br>        int[][][] moveDc = new int[height][width][];<br>        int[] mdr = new int[100];<br>        int[] mdc = new int[100];<br>        for (int r = 0; r &lt; height; ++r)<br>            for (int c = 0; c &lt; width; ++c) {<br>                if (_map[r].charAt(c) == '#') {<br>                    moveDr[r][c] = new int[0];<br>                    moveDc[r][c] = new int[0];<br>                    continue;<br>                }<br>                int nm = 0;<br>                for (int dr = -1; dr &lt;= 1; ++dr)<br>                    for (int dc = -1; dc &lt;= 1; ++dc)<br>                        if (dr == 0 ^ dc == 0) {<br>                            int nr = r + dr;<br>                            int nc = c + dc;<br>                            if (nc &lt; 0 || nc &gt;= width)<br>                                continue;<br>                            while (nr &lt; 0) nr += height;<br>                            while (nr &gt;= height) nr -= height;<br>                            if (_map[nr].charAt(nc) == '#')<br>                                continue;<br>                            mdr[nm] = dr;<br>                            mdc[nm] = dc;<br>                            ++nm;<br>                        }<br>                if (_map[r].charAt(c) == 'T') {<br>                    for (int cc = 0; cc &lt; width; ++cc)<br>                        if (_map[r].charAt(cc) == 'T' &amp;&amp; cc != c) {<br>                            mdr[nm] = 0;<br>                            mdc[nm] = cc - c;<br>                            ++nm;<br>                        }<br>                }<br>                moveDr[r][c] = new int[nm];<br>                moveDc[r][c] = new int[nm];<br>                System.arraycopy(mdr, 0, moveDr[r][c], 0, nm);<br>                System.arraycopy(mdc, 0, moveDc[r][c], 0, nm);<br>            }<br>        int sr = (int) (((r1 % height) + height) % height + 2 * MANY / height * height);<br>        int sc = c1;<br>        int[][] dist = new int[4 * MANY][width];<br>        for (int i = 0; i &lt; dist.length; ++i) Arrays.fill(dist[i], INF);<br>        dist[sr][sc] = 0;<br>        int[] qr = new int[dist.length * dist[0].length];<br>        int[] qc = new int[qr.length];<br>        int qt = 0;<br>        int qh = 1;<br>        qr[0] = sr;<br>        qc[0] = sc;<br>        while (qt &lt; qh) {<br>            int cr = qr[qt];<br>            int cc = qc[qt];<br>            ++qt;<br>            int crNorm = cr % height;<br>            int[] drs = moveDr[crNorm][cc];<br>            int[] dcs = moveDc[crNorm][cc];<br>            for (int i = 0; i &lt; drs.length; ++i) {<br>                int nr = cr + drs[i];<br>                int nc = cc + dcs[i];<br>                if (nr &lt; 0 || nr &gt;= dist.length)<br>                    continue;<br>                if (dist[nr][nc] == INF) {<br>                    dist[nr][nc] = dist[cr][cc] + 1;<br>                    qr[qh] = nr;<br>                    qc[qh] = nc;<br>                    ++qh;<br>                }<br>            }<br>        }<br><br>        long res;<br>        if (Math.abs(r2 - r1) &lt;= MANY) {<br>            res = dist[(int) (r2 - r1 + sr)][c2];<br>            if (res == INF)<br>                res = -1;<br>        } else {<br>            long need = r2 - r1 + sr;<br>            int needRem = (int) ((need % height + height) % height);<br>            int last = sr + MANY;<br>            while (last % height != needRem)<br>                --last;<br>            for (int period = 1;; ++period) {<br>                int allDelta = 0;<br>                boolean ok = true;<br>                for (int rep = 0; rep &lt; PERIOD_REPS; ++rep) {<br>                    int clast = last - rep * period * height;<br>                    for (int inside = 0; inside &lt; period; ++inside) {<br>                        int delta = dist[clast - inside * height][c2] - dist[clast - inside * height - period * height][c2];<br>                        if ((rep == 0 &amp;&amp; inside == 0) || delta == allDelta) {<br>                            allDelta = delta;<br>                        } else {<br>                            ok = false;<br>                            break;<br>                        }<br>                    }<br>                    if (!ok)<br>                        break;<br>                }<br>                if (ok) {<br>                    System.err.println("Period: " + period);<br>                    int bigPeriod = period * height;<br>                    needRem = (int) ((need % bigPeriod + bigPeriod) % bigPeriod);<br>                    while (last % bigPeriod != needRem)<br>                        --last;<br>                    res = dist[last][c2];<br>                    if (res == INF)<br>                        res = -1;<br>                    else<br>                        res += allDelta * ((need - last) / bigPeriod);<br>                    break;<br>                }<br>            }<br>        }<br>        return res;<br>    }<br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by RETester [based on ExampleBuilder]<br>// Powered by CodeProcessor<br></td>