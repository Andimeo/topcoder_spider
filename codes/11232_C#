<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections;<br>using System.Collections.Generic;<br>using System.Text;<br><br>public class MonsterFarm {<br>    int N;<br>    List&lt;int&gt;[] trans;<br>    bool[] single;<br>    long[] dp;<br>    long mod =  1000000007;<br><br>    bool[] check;<br>    public int numMonsters(string[] transforms)<br>    {<br>        N = transforms.Length;<br>        trans = new List&lt;int&gt;[N];<br>        int i;<br>        for (i = 0; i &lt; N; i++)<br>        {<br>            trans[i] = new List&lt;int&gt;();<br>            foreach (string s in transforms[i].Split(' '))<br>            {<br>                trans[i].Add(int.Parse(s) - 1);<br>            }<br>        }<br>        single = new bool[N];<br>        for (i = 0; i &lt; N; i++)<br>        {<br>            check = new bool[N];<br>            single[i] = isSingle(i);<br>        }<br>        dp = new long[N];<br>        check = new bool[N];<br>        return (int)count(0);<br>    }<br><br>    long count(int a)<br>    {<br>        if (single[a]) return 1;<br>        if (dp[a] != 0) return dp[a];<br>        if (check[a]) return -1;<br>        check[a] = true;<br>        long ret = 0;<br>        foreach (int b in trans[a])<br>        {<br>            long num = count(b);<br>            if (num &lt; 0) return dp[a] = num;<br>            ret = (ret + num) % mod;<br>        }<br>        return dp[a] = ret;<br>    }<br><br>    bool isSingle(int a)<br>    {<br>        if (trans[a].Count &gt; 1) return false;<br>        if (check[a]) return true;<br>        check[a] = true;<br>        foreach (int b in trans[a])<br>        {<br>            return isSingle(b);<br>        }<br>        return true;<br>    }<br><br><br><br><br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003] [modified for C# by Petr]<br>// Powered by CodeProcessor<br></td>