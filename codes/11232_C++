<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;vector&gt; <br>#include &lt;list&gt; <br>#include &lt;map&gt; <br>#include &lt;set&gt; <br>#include &lt;deque&gt; <br>#include &lt;vector&gt; <br>#include &lt;list&gt; <br>#include &lt;map&gt; <br>#include &lt;set&gt; <br>#include &lt;deque&gt; <br>#include &lt;queue&gt; <br>#include &lt;stack&gt; <br>#include &lt;bitset&gt; <br>#include &lt;algorithm&gt; <br>#include &lt;functional&gt; <br>#include &lt;numeric&gt; <br>#include &lt;utility&gt; <br>#include &lt;sstream&gt; <br>#include &lt;iostream&gt; <br>#include &lt;iomanip&gt; <br>#include &lt;cstdio&gt; <br>#include &lt;cmath&gt; <br>#include &lt;cstdlib&gt; <br>#include &lt;cctype&gt; <br>#include &lt;string&gt; <br>#include &lt;cstring&gt; <br>#include &lt;ctime&gt; <br> <br>using namespace std;<br> <br>#define mo 1000000007<br> <br>vector&lt;int&gt; aa[100];<br>int good[100];<br>int used[100];<br> <br>class MonsterFarm<br>{<br>public:<br>int numMonsters(vector &lt;string&gt; a)<br>{<br>  int i,j,k,n,b1,b2,p,x,tmp;<br>  string s;<br>  n=a.size();<br>  for (i=0;i&lt;n;i++)<br>  {<br>    aa[i].clear();<br>    s=a[i]+" ";<br>    while (s!="")<br>    {<br>      p=s.find_first_of(' ');<br>      aa[i].push_back(atoi(s.substr(0,p).c_str())-1);<br>      s=s.substr(p+1);<br>    }<br>  }<br>  memset(good,-1,sizeof(good));<br>  for (i=0;i&lt;n;i++)<br>  {<br>    memset(used,0,sizeof(used));<br>    x=i;<br>    while (used[x]==0)<br>    {<br>      if (aa[x].size()&gt;1) break;<br>      used[x]=1;<br>      x=aa[x][0];<br>    }<br>    if (used[x]==1) good[x]=1;<br>  }<br>  b1=1;<br>  while (b1==1)<br>  {<br>    b1=0;<br>    for (i=0;i&lt;n;i++)<br>      if (good[i]==-1)<br>      {<br>        tmp=0;b2=1;<br>        for (j=0;j&lt;aa[i].size();j++)<br>        {<br>          if (good[aa[i][j]]==-1)<br>          {<br>            b2=0;<br>            break;<br>          }<br>          tmp+=good[aa[i][j]];<br>          tmp%=mo;<br>        }<br>        if (b2==1)<br>        {<br>          good[i]=tmp;<br>          b1=1;<br>        }<br>      }<br>  }<br>  return good[0];<br>}<br>};<br></td>