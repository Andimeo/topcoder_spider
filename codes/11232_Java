<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>import static java.lang.Math.*;<br>import static java.util.Arrays.*;<br><br>public class MonsterFarm {<br>  <br>  long M = 1000000007;<br>  <br>  long[][] mul(long[][] a, long[][] b) {<br>    int n = a.length;<br>    long[][] c = new long[n][n];<br>    for (int i = 0; i &lt; n; i++) {<br>      for (int k = 0; k &lt; n; k++) {<br>        for (int j = 0; j &lt; n; j++) {<br>          c[i][j] = (c[i][j] + a[i][k] * b[k][j]) % M;<br>        }<br>      }<br>    }<br>    return c;<br>  }<br>  long[][] pow(long[][] a, long b) {<br>    int n = a.length;<br>    long[][] c = new long[n][n];<br>    for (int i = 0; i &lt; n; i++) c[i][i] = 1;<br>    while (b &gt; 0) {<br>      if ((b &amp; 1) != 0) c = mul(c, a);<br>      a = mul(a, a);<br>      b &gt;&gt;&gt;= 1;<br>    }<br>    return c;<br>  }<br>  boolean[] mul(boolean[][] A, boolean[] b) {<br>    int n = A.length;<br>    boolean[] c = new boolean[n];<br>    for (int i = 0; i &lt; n; i++) {<br>      for (int j = 0; j &lt; n; j++) {<br>        c[i] |= A[i][j] &amp;&amp; b[j];<br>      }<br>    }<br>    return c;<br>  }<br>  <br>  public int numMonsters(String[] transforms) {<br>    int n = transforms.length;<br>    long[][] A = new long[n][n];<br>    int[] deg = new int[n];<br>    for (int i = 0; i &lt; n; i++) {<br>      String[] ss = transforms[i].split(" ");<br>      deg[i] = ss.length;<br>      for (String s : ss) A[Integer.parseInt(s) - 1][i]++;<br>    }<br>    boolean[][] g = new boolean[n][n];<br>    for (int i = 0; i &lt; n; i++) for (int j = 0; j &lt; n; j++) g[i][j] = A[i][j] &gt; 0;<br>    boolean[] b = new boolean[n];<br>    b[0] = true;<br>    for (int i = 0; i &lt; n * 10; i++) {<br>      b = mul(g, b);<br>    }<br>    for (int i = 0; i &lt; n * 10; i++) {<br>      for (int j = 0; j &lt; n; j++) if (b[j] &amp;&amp; deg[j] &gt; 1) return -1;<br>      b = mul(g, b);<br>    }<br>    A = pow(A, Long.MAX_VALUE);<br>    long res = 0;<br>    for (int i = 0; i &lt; n; i++) res = (res + A[i][0]) % M;<br>    return (int)res;<br>  }<br>  <br>  void debug(Object...os) {<br>    System.err.println(deepToString(os));<br>  }<br>  <br>}<br></td>