<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;vector&gt;<br>#include &lt;list&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;queue&gt;<br>#include &lt;deque&gt;<br>#include &lt;stack&gt;<br>#include &lt;bitset&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;functional&gt;<br>#include &lt;numeric&gt;<br>#include &lt;utility&gt;<br>#include &lt;sstream&gt;<br>#include &lt;iostream&gt;<br>#include &lt;iomanip&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;ctime&gt;<br>#include &lt;cstring&gt;<br><br>using namespace std;<br><br><br>class NetworkXMessageRecovery {<br>public:<br>    bool a[256][256];<br>    bool dd[256];<br>    bool us[256];<br>    int b[256];<br>    int sl;<br><br>    void init(string s) {<br>        for (int i = 0; i &lt; s.length(); i++) {<br>            if (!dd[s[i]]) {<br>                dd[s[i]] = true;<br>                sl++;<br>            }<br>            if (i &lt; s.length() - 1) {<br>                if (a[s[i]][s[i + 1]] == false) b[s[i + 1]] ++;<br>                a[s[i]][s[i + 1]] = true;<br>            }<br>        }<br>    }<br><br>  string recover(vector &lt;string&gt; st) {<br>        int n = st.size();<br>        memset(a, 0, sizeof(a));<br>        memset(dd, 0, sizeof(dd));<br>        memset(b, 0, sizeof(b));<br>        memset(us, 0, sizeof(us));<br>        sl = 0;<br>        for (int i = 0; i &lt; n; i++) init(st[i]);<br>        string res = "";<br>        for (int i = 0; i &lt; sl; i++) {<br>            for (int j = 'A'; j &lt;= 'z'; j++)<br>                if ((j &lt;= 'Z' || j &gt;= 'a') &amp;&amp; dd[j] &amp;&amp; us[j] == false &amp;&amp; b[j] == 0) {<br>                    res = res + (char) j;<br>                    for (int k = 'A'; k &lt;= 'z'; k++)<br>                        if (a[j][k]) b[k] --;<br>                    us[j] = true;<br>                    break;<br>                }<br>        }<br>        return res;<br>  }<br>};<br></td>