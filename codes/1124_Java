<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>public class Wireless {<br>  <br>  static final double calcdist(double x1, double y1, double x2, double y2) {<br>    return Math.sqrt( (x1-x2)*(x1-x2) + (y1-y2)*(y1-y2) );  <br>  }<br>  <br>  public int bestRoute(int range, String[] roamNodes, String[] statNodes) {<br>    double inf = 10000000;<br>    int nstat = statNodes.length;<br>    int[] statx = new int[nstat];<br>    int[] staty = new int[nstat];<br>    for (int i=0; i&lt;nstat; i++) {<br>      StringTokenizer st = new StringTokenizer(statNodes[i]);<br>      statx[i] = Integer.parseInt(st.nextToken());<br>      staty[i] = Integer.parseInt(st.nextToken());<br>    }<br>    double[][] dist = new double[nstat][nstat];<br>    for (int i=0; i&lt;nstat; i++) for (int j=0; j&lt;nstat; j++) {<br>      dist[i][j]=inf;<br>    }<br>    for (int i=0; i&lt;nstat; i++) for (int j=0; j&lt;nstat; j++) {<br>      if (i==j) dist[i][i]=0;<br>      else {<br>        double cdist = calcdist(statx[i], staty[i], statx[j], staty[j]);<br>        if (cdist &lt;= range) {<br>          dist[i][j] = cdist;<br>          dist[j][i] = cdist;<br>        }<br>      }<br>    }<br>    for (int k=0; k&lt;nstat; k++)<br>    for (int i=0; i&lt;nstat; i++)<br>    for (int j=0; j&lt;nstat; j++) {<br>      if (dist[i][k] + dist[k][j] &lt; dist[i][j]) {<br>        dist[i][j] = dist[i][k] + dist[k][j];<br>      }<br>    }<br>    <br>    for (int i=0; i&lt;nstat; i++)<br>    for (int j=0; j&lt;nstat; j++) {<br>      System.out.println(""+i+" "+j+" "+dist[i][j]);<br>    }<br>    <br>    int[] dx = new int[2];<br>    int[] dy = new int[2];<br>    int[] x = new int[2];<br>    int[] y = new int[2];<br>    <br>    for (int c=0; c&lt;2; c++) {<br>      StringTokenizer st = new StringTokenizer(roamNodes[c]);<br>      String dir = st.nextToken();<br>      if (dir.equals("DOWN")) dy[c]=-1;<br>      if (dir.equals("UP")) dy[c]=1;<br>      if (dir.equals("LEFT")) dx[c]=-1;<br>      if (dir.equals("RIGHT")) dx[c]=1;<br>      <br>      x[c] = Integer.parseInt(st.nextToken());<br>      y[c] = Integer.parseInt(st.nextToken());<br>    }<br>    <br>    double best = inf+1000;<br>    <br>    double[] d0 = new double[nstat];<br>    double[] d1 = new double[nstat];<br>    <br>    while (true) {<br>      for (int st=0; st&lt;nstat; st++) {<br>        d0[st] = calcdist(x[0],y[0],statx[st], staty[st]);<br>        if (d0[st]&gt;range) d0[st]=inf;<br>        d1[st] = calcdist(x[1],y[1],statx[st], staty[st]);<br>        if (d1[st]&gt;range) d1[st]=inf;<br>      }<br>      <br>      for (int s0=0; s0&lt;nstat; s0++) for (int s1=0; s1&lt;nstat; s1++) {<br>        double td = d0[s0] + dist[s0][s1] + d1[s1];<br>        if (td&lt;inf &amp;&amp; td&lt;best) best = td;<br>      }<br>      <br>      boolean done = false;<br>      for (int c=0; c&lt;2; c++) {<br>        x[c]+=dx[c];<br>        y[c]+=dy[c];<br>        <br>        if (x[c]&lt;-11000-range || x[c]&gt;11000+range || y[c]&lt;-11000-range || y[c]&gt;11000+range) {<br>          done = true;<br>        }<br>      }<br>      if (done) break;<br>    }<br>    <br>    if (best&gt;=inf) return -1;<br>    <br>    return (int) (best+0.5);<br>  }<br>}<br></td>