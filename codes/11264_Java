<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>import java.util.regex.*;<br>import java.text.*;<br>import java.math.*;<br> <br> <br>public class CubeBuilding<br>{<br>  final int mod = 1000000007;<br>  <br>  long[][] d;<br>  long[][] c;<br>  <br>  void init(int n) {<br>    int r = 25, g = 25, b = 25;<br>    int m = r + g + b;<br>    <br>    long[][] d1 = new long[m + 1][r + 1];<br>    long[][] t1 = new long[m + 1][r + 1];<br>    d1[0][0] = 1;<br>    for (int it = 0; it &lt; n; ++it) {<br>      for (long[] ar : t1) {<br>        Arrays.fill(ar, 0);<br>      }<br>      for (int i = 0; i &lt;= m; ++i) {<br>        for (int h = 0; h &lt;= r; ++h) {<br>          if (d1[i][h] == 0) {<br>            continue;<br>          }<br>          for (int h1 = 0; h1 &lt;= r; ++h1) {<br>            int hmin = h &lt; h1 ? h : h1;<br>            int hmax = h &lt; h1 ? h1 : h;<br>            if (i + hmin &gt; m) {<br>              break;<br>            }<br>            t1[i + hmin][hmax] = (t1[i + hmin][hmax] + d1[i][h]) % mod;<br>          } <br>        }<br>      }<br>      long[][] tmp = d1;<br>      d1 = t1;<br>      t1 = tmp;<br>    }<br>    d = new long[m + 1][r + 1];<br>    long[][] t = new long[m + 1][r + 1];<br>    d[0][0] = 1;<br>    for (int it = 0; it &lt; n; ++it) {<br>      for (long[] ar : t) {<br>        Arrays.fill(ar, 0);<br>      }<br>      for (int i = 0; i &lt;= m; ++i) {<br>        for (int j = 0; j &lt;= r; ++j) {<br>          if (d1[i][j] == 0) {<br>            continue;<br>          }<br>          for (int i1 = 0; i + i1 &lt;= m; ++i1) {<br>            for (int j1 = 0; j + j1 &lt;= r; ++j1) {<br>              t[i + i1][j + j1] = ((t[i + i1][j + j1] + d1[i][j] * d[i1][j1]) % mod);<br>            }<br>          }<br>        }<br>      }<br>      long[][] tmp = d;<br>      d = t;<br>      t = tmp;<br>    }<br>    c = new long[m + 1][m + 1];<br>    for (int i = 0; i &lt;= m; ++i) {<br>      for (int j = 1; j &lt; i; ++j) {<br>        c[i][j] = (c[i - 1][j - 1] + c[i - 1][j]) % mod;<br>      }<br>      c[i][0] = c[i][i] = 1;<br>    }<br>  }<br>  <br>  long solve(int r, int g, int b, int n) {<br>    int m = r + g + b;<br>    long ans = 0;<br>    for (int i = 0; i &lt;= r; ++i) {<br>      ans = (ans + (((d[m - i][i] * c[m - i][g]) % mod) * c[m - i - g][b]) % mod) % mod;<br>    }<br>    return ans;<br>  }<br> <br>  public int getCount(int R, int G, int B, int N)<br>  {<br>    init(N);<br>    long ans = 0;<br>    ans = (ans + solve(R, G, B, N)) % mod;<br>    ans = (ans + solve(G, B, R, N)) % mod;<br>    ans = (ans + solve(B, R, G, N)) % mod;<br>    return (int)ans;<br>  }<br>  <br> <br>}<br>//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!<br></td>