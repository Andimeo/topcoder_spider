<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;iostream&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cstring&gt;<br>#include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;algorithm&gt;<br>using namespace std;<br><br>class GogoXCake{<br>public:<br>    int r1, c1, r2, c2;<br>    bool visit[55][55];<br>    bool check(const vector &lt;string&gt; &amp;cake, const vector &lt;string&gt; &amp;cutter, int x, int y){<br>        for(int i = 0; i &lt; r2; i++)<br>            for(int j = 0; j &lt; c2; j++){<br>                if(cutter[i][j] == '.'){<br>                    if(!visit[x+i][y+j] &amp;&amp; cake[x+i][y+j]=='.')  continue;<br>                    else  return  false;<br>                }<br>            }<br>        return  true;<br>    }<br>    void cover(const vector &lt;string&gt; &amp;cutter, int x, int y){<br>        for(int i = 0; i &lt; r2; i++)<br>            for(int j = 0; j &lt; c2; j++){<br>                if(cutter[i][j] == '.')<br>                    visit[x+i][y+j] = true;<br>            }<br>    }<br>    string solve(vector &lt;string&gt; cake, vector &lt;string&gt; cutter){<br>        r1 = cake.size();<br>        c1 = cake[0].length();<br>        r2 = cutter.size();<br>        c2 = cutter[0].length();<br>        bool flag = true;<br>        memset(visit, false, sizeof(visit));<br>        while(flag){<br>            flag = false;<br>            for(int i = 0; i+r2 &lt;= r1; i++){<br>                if(flag)  break;<br>                for(int j = 0; j+c2 &lt;= c1; j++){<br>                    if(check(cake, cutter, i, j)){<br>                        flag = true;<br>                        cover(cutter, i, j);<br>                        break;<br>                    }<br>                }<br>            }<br>        }<br>        for(int i = 0; i &lt; r1; i++)<br>            for(int j = 0; j &lt; c1; j++){<br>                if(cake[i][j]=='X' &amp;&amp; visit[i][j]==true)<br>                    return  "NO";<br>                if(cake[i][j]=='.' &amp;&amp; visit[i][j]==false)<br>                    return  "NO";<br>            }<br>        return  "YES";<br>    }<br>};<br></td>