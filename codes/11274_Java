<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>import java.util.regex.*;<br>import java.text.*;<br>import java.math.*;<br> <br> <br>public class GogoXCake<br>{<br>  boolean[][] eaten;<br>  public String solve(String[] cake, String[] cutter)<br>  {<br>    eaten = new boolean[cake.length][cake[0].length()];<br>    for(int i = 0; i &lt; eaten.length; i++)  {<br>      for(int j = 0; j &lt; eaten[i].length; j++)  {<br>        eaten[i][j] = cake[i].charAt(j) == '.';<br>      }<br>    }<br>    int offset = 0;<br>    while(cutter[0].charAt(offset) == 'X')<br>      offset++;<br>    for(int i = 0; i &lt; eaten.length; i++)  {<br>      for(int j = 0; j &lt; eaten[i].length; j++)  {<br>        if(eaten[i][j])  {<br>          for(int a = 0; a &lt; cutter.length; a++)  {<br>            for(int b = 0; b &lt; cutter[a].length(); b++)  {<br>              if(cutter[a].charAt(b) == 'X')<br>                continue;<br>              int rowCheck = i + a;<br>              int colCheck = j - offset + b;<br>              if(!valid(rowCheck, colCheck))<br>                return "NO";<br>              eaten[rowCheck][colCheck] = false;<br>            }<br>          }<br>        }<br>      }<br>    }<br>    return "YES";<br>  }<br>  public boolean valid(int x, int y)  {<br>    return x &gt;= 0 &amp;&amp; x &lt; eaten.length &amp;&amp; y &gt;= 0 &amp;&amp; y &lt; eaten[x].length &amp;&amp; eaten[x][y];<br>  }<br> <br>}<br>//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!<br></td>