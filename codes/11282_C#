<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections.Generic;<br><br>    public class KingdomReorganization<br>    {<br>        private int calcCost(char c)<br>        {<br>            if ('A' &lt;= c &amp;&amp; c &lt;= 'Z')<br>                return c - 'A';<br>            return c - 'a' + 26;<br>        }<br><br>        private void codeEdge(int i, int j, out int code )<br>        {<br>            code = i*1000 + j;<br>        }<br><br>        private void decodeEdge(out int i, out int j, int code)<br>        {<br>            i = code / 1000;<br>            j = code % 1000;<br>        }<br><br>        public int getCost(String[] kingdom, String[] build, String[] destroy)<br>        {<br>            int n = kingdom.Length;<br>            if (n == 1)<br>                return 0;<br>            int result = 0;<br>            List&lt;KeyValuePair&lt;int, int&gt;&gt; tab = new List&lt;KeyValuePair&lt;int, int&gt;&gt;();<br>            for (int i = 0; i &lt; n; i++)<br>            {<br>                for (int j = 0; j &lt; i; j++)<br>                {<br>                    int code;<br>                    codeEdge(i, j, out code);<br>                    if (kingdom[i][j] == '1')<br>                    {<br>                        result += calcCost(destroy[i][j]);<br>                        tab.Add(new KeyValuePair&lt;int, int&gt;(-calcCost(destroy[i][j]), code));<br>                    }<br>                    else<br>                        tab.Add(new KeyValuePair&lt;int, int&gt;(calcCost(build[i][j]), code));<br>                }<br>            }<br>            int[] v = new int[n];<br>            for (int i = 0; i &lt; v.Length; i++)<br>            {<br>                v[i] = i;<br>            }<br><br>            for (int i = 0; i &lt; tab.Count; i++)<br>                for (int j = i+1; j &lt; tab.Count; j++)<br>                    if (tab[i].Key &gt; tab[j].Key)<br>                    {<br>                        KeyValuePair&lt;int, int&gt; p = tab[i];<br>                        tab[i] = tab[j];<br>                        tab[j] = p;<br>                    }<br><br>            foreach (KeyValuePair&lt;int, int&gt; kV in tab)<br>            {<br>                int i, j;<br><br>                decodeEdge(out i, out j, kV.Value);<br><br>                if(v[i]!=v[j])<br>                {<br>                    result += kV.Key;<br>                    int temp = v[j];<br>                    for (int k = 0; k &lt; n; k++)<br>                    {<br>                        if (v[k] == temp)<br>                            v[k] = v[i];<br>                    }<br>                }<br>            }<br><br>            return result;<br>        }<br>    }<br></td>