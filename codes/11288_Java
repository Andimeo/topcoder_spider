<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>import java.util.regex.*;<br>import java.text.*;<br>import java.math.*;<br> <br> <br>public class SubFibonacci<br>{<br>  public int maxElements(int[] a)<br>  {<br>    int n = a.length;<br>    HashMap&lt;Integer, Integer&gt; map = new HashMap&lt;Integer, Integer&gt;();<br>    for (int i = 0; i &lt; n; ++i) {<br>      map.put(a[i], i);<br>    }<br>    ArrayList&lt;Long&gt; f = new ArrayList&lt;Long&gt;();<br>    {<br>      long u = 1, v = 0;<br>      for (int i = 0; u &lt; 100000000; ++i) {<br>        f.add(u);<br>        long t = u + v;<br>        u = v;<br>        v = t;<br>      }<br>      //System.out.println(f.size());<br>    }<br>    int[] maxEnds = new int[n];<br>    int[] maxStarts = new int[n];<br>    Arrays.fill(maxEnds, 1);<br>    Arrays.fill(maxStarts, 1);<br>    for (int i = 0; i &lt; n; ++i) {<br>      for (int j = 0; j &lt; n; ++j) {<br>        if (a[i] &gt;= a[j]) {<br>          continue;<br>        }<br>        for (int pos = 1; pos &lt; f.size() - 1; ++pos) {<br>          long u = a[i], v = a[j] - a[i] * f.get(pos);<br>          if (v &lt;= 0 || v % f.get(pos + 1) != 0) {<br>            continue;<br>          }<br>          v /= f.get(pos + 1);<br>          int len = 1;<br>          long last = a[i];<br>          while (u &lt;= 100000000) {<br>            if (u &gt; last &amp;&amp; map.containsKey((int)u)) {<br>              len++;<br>              last = u;<br>              maxStarts[i] = Math.max(maxStarts[i], len);<br>              maxEnds[map.get((int)u)] = Math.max(maxEnds[map.get((int)u)], len);<br>            }<br>            long t = u + v;<br>            u = v;<br>            v = t;<br>          }<br>        }<br>      }<br>    }<br>    //System.out.println(Arrays.toString(maxStarts));<br>    //System.out.println(Arrays.toString(maxEnds));<br>    int ans = 1;<br>    for (int i = 0; i &lt; n; ++i) {<br>      for (int j = 0; j &lt; n; ++j) {<br>        if (a[i] &gt;= a[j]) {<br>          continue;<br>        }<br>        ans = Math.max(ans, maxEnds[i] + maxStarts[j]);<br>      }<br>    }<br>    return ans;<br>  }<br>  <br> <br>}<br>//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!<br></td>