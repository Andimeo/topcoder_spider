<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cctype&gt;<br>#include &lt;queue&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;iostream&gt;<br>#include &lt;sstream&gt;<br>#include &lt;utility&gt;<br>#include &lt;numeric&gt;<br>#include &lt;complex&gt;<br><br>using namespace std;<br><br>const int mod = 1000000007;<br><br>map &lt; pair &lt;int, int&gt;, int &gt; store;<br>vector &lt;int&gt; factors;<br><br>int memo(int h, int n) {<br>  int &amp;ans = store[make_pair(h, n)];<br>  if (ans) return ans;<br>  for (int i = 1; i &lt; factors.size(); i++) {<br>    int k = factors[i];<br>    if (k &gt; h) break;<br>    if (h % k == 0) {<br>      if (n &gt; 0) {<br>  if (h/k % n == 0) {<br>    ans += memo(h/k, -n);<br>    if (ans &gt; mod) ans -= mod;<br>  }<br>      }<br>      else {<br>  if (n % k == 0) {<br>    ans += memo(h/k, -n/k);<br>    if (ans &gt; mod) ans -= mod;<br>  }<br>      }<br>    }<br>  }<br>  return ans;<br>}<br><br>class StrangeElevator {<br>  public:<br>  int theCount(int H, int N) {<br>    <br>    if (H % N != 0) return 0;<br>    if (H == 1 &amp;&amp; N == 1) return 1;<br>    for (int i = 1; i*i &lt;= H; i++)<br>      if (H % i == 0) {<br>        factors.push_back(i);<br>        if (i*i != H) factors.push_back(H/i);<br>      }<br>    sort(factors.begin(), factors.end());<br>    store[make_pair(1, 1)] = 1;<br>    store[make_pair(1, -1)] = 1;<br>    return (memo(H, N) + memo(H, -N)) % mod;<br>    <br>  }<br>};<br><br><br>// Powered by FileEdit<br></td>