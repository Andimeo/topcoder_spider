<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;cstdio&gt;<br>#include &lt;cctype&gt;<br>#include &lt;vector&gt;<br>#include &lt;string&gt;<br>#include &lt;cassert&gt;<br>#include &lt;climits&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cstring&gt;<br>#include &lt;utility&gt;<br>#include &lt;cmath&gt;<br>#include &lt;queue&gt;<br>#include &lt;stack&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;algorithm&gt;<br>using namespace std;<br><br>#ifdef __MINGW32__<br>    #define LLF "%I64d"<br>#else<br>    #define LLF "%lld"<br>#endif<br><br>typedef long long LL;<br>typedef pair&lt;int,int&gt; PII;<br><br>class P8XGraphBuilder{<br>public:<br>    int dp[52][52];<br>    int solve(vector&lt;int&gt; u){<br>        u.insert(u.begin(),0);<br>        int n=u.size();<br>        memset(dp,192,sizeof(dp));<br>        dp[1][0]=0;<br>        for(int i=1;i&lt;=n;i++) for(int j=1;j&lt;i;j++)<br>        for(int p=1;p&lt;n;p++) for(int q=0;q+1&lt;n;q++){<br>            dp[i][p]=max(dp[i][p],dp[j][p-1]+dp[i-j][q]-u[p-1]-u[q]+u[p]+u[q+1]);<br>        }<br>        return *max_element(dp[n],dp[n]+52);<br>    }<br>};<br></td>