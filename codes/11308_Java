<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.Arrays;<br> <br>/**<br> * Built using CHelper plug-in<br> * Actual solution is at the top<br> */<br>public class P8XGraphBuilder {<br>    static final int INF = (int) 1e9;<br> <br>   public int solve(int[] scores) {<br>       int n = 1 + scores.length;<br>       int[] best = new int[2 * n - 1];<br>       Arrays.fill(best, -INF);<br>       best[0] = 0;<br>       for (int v = 0; v &lt; n; ++v) {<br>           int[] nbest = new int[2 * n - 1];<br>           Arrays.fill(nbest, -INF);<br>           for (int cur = 1; cur &lt; n; ++cur)<br>               for (int prev = 0; prev + cur &lt; nbest.length; ++prev)<br>                   if (best[prev] &gt;= 0)<br>                       nbest[prev + cur] = Math.max(nbest[prev + cur], best[prev] + scores[cur - 1]);<br>           best = nbest;<br>       }<br>       return best[2 * n - 2];<br>   }<br> <br> <br>}<br> <br> <br> <br>// Powered by FileEdit<br>// Powered by moj 4.16 [modified TZTester]<br>// Powered by CodeProcessor<br></td>