<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections;<br>using System.Collections.Generic;<br><br>public class AlternatingLane<br>{<br>  private int n;<br>  private int[] l, r;<br><br>  double go( int p, int last )<br>  {<br>    double res = 0;<br><br>    if ( last &gt;= r[p] )<br>    {<br>      double cnt = r[p] - l[p] + 1;<br>      res = ( cnt * ( cnt - 1 ) / 2 + cnt * ( (double)last - r[p] ) ) / ( cnt );<br>    }<br>    else if ( last &lt;= l[p] )<br>    {<br>      double cnt = r[p] - l[p] + 1;<br>      res = ( cnt * ( cnt - 1 ) / 2 + cnt * ( (double)l[p] - last ) ) / ( cnt );<br>    }<br>    else<br>    {<br>      double cnt1 = r[p] - last, cnt2 = last - l[p];<br>      res = ( cnt1 * ( cnt1 + 1 ) / 2 + cnt2 * ( cnt2 + 1 ) / 2 ) / ( r[p] - l[p] + 1 );<br>    }<br><br>    return res;<br>  }<br><br>  public double expectedBeauty( int[] low, int[] high )<br>  {<br>    n = low.Length;<br>    if ( n == 1 ) return 0;<br>    double res = 0;<br>    l = low;<br>    r = high;<br>    for ( int j = 0; j &lt; n - 1; ++j )<br>      for ( int i = low[j]; i &lt;= high[j]; ++i )<br>      {<br>        res += go( j + 1, i ) / ( high[j] - low[j] + 1 );<br>      }<br>    return res;<br>  }<br><br>}<br><br><br> <br>// Powered by moj 4.16 [modified TZTester]<br>// Powered by CleanSharp 1.0<br>// Powered by CodeProcessor<br></td>