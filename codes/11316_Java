<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.Arrays;<br>import java.util.HashMap;<br>import java.util.Map;<br><br>public class FoxStones {<br>    static class State {<br>        int[] dist;<br><br>        @Override<br>        public boolean equals(Object o) {<br>            State state = (State) o;<br><br>            if (!Arrays.equals(dist, state.dist)) return false;<br><br>            return true;<br>        }<br><br>        @Override<br>        public int hashCode() {<br>            return dist != null ? Arrays.hashCode(dist) : 0;<br>        }<br>    }<br><br>    static class Counter {<br>        int value = 0;<br>    }<br><br>    static final long MODULO = 1000000009;<br><br>    public int getCount(int N, int M, int[] sx, int[] sy) {<br>        Map&lt;State, Counter&gt; seen = new HashMap&lt;State, Counter&gt;();<br>        for (int x = 1; x &lt;= N; ++x)<br>            for (int y = 1; y &lt;= M; ++y) {<br>                int[] d = new int[sx.length];<br>                for (int i = 0; i &lt; sx.length; ++i)<br>                    d[i] = Math.max(Math.abs(x - sx[i]), Math.abs(y - sy[i]));<br>                State s = new State();<br>                s.dist = d;<br>                Counter c = seen.get(s);<br>                if (c == null) {<br>                    c = new Counter();<br>                    seen.put(s, c);<br>                }<br>                c.value++;<br>            }<br>        long res = 1;<br>        for (Counter c : seen.values()) {<br>            for (int i = 1; i &lt;= c.value; ++i) {<br>                res *= i;<br>                res %= MODULO;<br>            }<br>        }<br>        return (int) res;<br>    }<br>}<br></td>