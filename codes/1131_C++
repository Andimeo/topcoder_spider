<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;iostream&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cmath&gt;<br>#include &lt;queue&gt;<br>#include &lt;map&gt;<br>using namespace std;<br>typedef vector&lt;int&gt; VI; typedef vector&lt;VI&gt; VVI;<br>typedef vector&lt;string&gt; VS; typedef vector&lt;VS&gt; VVS;<br>typedef signed long long i64; typedef unsigned long long u64;<br>typedef pair&lt;int, int&gt; PII;<br><br>VS tokenize(string s, string ch) {<br>  VS ret;<br>  for( int p = 0, p2; p &lt; s.size(); p = p2+1 ) {<br>    p2 = s.find_first_of(ch, p);<br>    if( p2 == -1 ) p2 = s.size();<br>    if( p2-p &gt; 0 ) ret.push_back(s.substr(p, p2-p));<br>  }<br>  return ret;<br>}<br><br>VI tokint(string s, string ch) {<br>  VI ret;<br>  VS t = tokenize(s, ch);<br>  for( int i = 0; i &lt; t.size(); i++ )<br>    ret.push_back(atoi(t[i].c_str()));<br>  return ret;<br>}<br><br>class HigherMaze {<br>public:<br>int navigate(int a, int b, vector &lt;int&gt; c, vector &lt;int&gt; start, vector &lt;int&gt; finish, vector &lt;string&gt; f) {<br>  int i, j, k, x, y, z, n;<br>  int ns=1;<br>  int ret;<br>  map&lt;VI, int&gt; cton;<br><br>  for( i = 0; i &lt; c.size(); i++ ) ns *= c[i];<br>  VI ast(ns);<br>  VI cur(c.size(), 0);<br>  int cp=1;<br>  x = 0;<br>  for(;;) {<br>    cp = (cp*a)%b;<br>    ast[x] = (cp&amp;1);<br>    cton[cur] = x++;<br>    y = c.size()-1;<br>    while( y &gt;= 0 &amp;&amp; cur[y] == c[y]-1 ) {cur[y--] = 0;}<br>    if( y &lt; 0 ) break;<br>    cur[y]++;<br>  }<br>  VVI con(ns);<br>  VVI cond(ns);<br>  x = 0;<br>  for(;;) {<br>    for( int dx1 = -1; dx1 &lt;= 1; dx1++ )<br>    for( int dx2 = -1; dx2 &lt;= 1; dx2++ )<br>    for( int dx3 = -1; dx3 &lt;= 1; dx3++ )<br>    for( int dx4 = -1; dx4 &lt;= 1; dx4++ )<br>    for( int dx5 = -1; dx5 &lt;= 1; dx5++ ) {<br>      VI cur2 = cur;<br>      if( c.size() &gt;= 1 ) cur2[0] += dx1;<br>      if( c.size() &gt;= 2 ) cur2[1] += dx2;<br>      if( c.size() &gt;= 3 ) cur2[2] += dx3;<br>      if( c.size() &gt;= 4 ) cur2[3] += dx4;<br>      if( c.size() &gt;= 5 ) cur2[4] += dx5;<br>      for( i = 0; i &lt; c.size(); i++ )<br>        if( cur2[i] &lt; 0 || cur2[i] &gt;= c[i] ) break;<br>      if( i == c.size() ) {<br>        z = cton[cur2];<br>        if( !ast[z] ) {<br>          con[x].push_back(z);<br>          cond[x].push_back(1);<br>        }<br>      }<br>    }<br>    y = c.size()-1;<br>    while( y &gt;= 0 &amp;&amp; cur[y] == c[y]-1 ) {cur[y--] = 0;}<br>    if( y &lt; 0 ) break;<br>    cur[y]++;<br>    x++;<br>  }<br>  for( i = 0; i &lt; f.size(); i++ ) {<br>    VI t = tokint(f[i], " ");<br>    for( j = 0; j &lt; c.size(); j++ ) cur[j] = t[j];<br>    x = cton[cur];<br>    for( j = 0; j &lt; c.size(); j++ ) cur[j] = t[j+c.size()+1];<br>    y = cton[cur];<br>    z = t[c.size()];<br>    con[x].push_back(y);<br>    cond[x].push_back(z);<br>  }<br>  VI d(ns, (1&lt;&lt;31)-1);<br>  priority_queue&lt;PII&gt; q;<br>  q.push(PII(0, cton[start]));<br>  while( !q.empty() ) {<br>    PII p = q.top(); q.pop();<br>    x = p.second;<br>    z = -p.first;<br>    if( z &lt; d[x] ) d[x] = z; else continue;<br>    for( i = 0; i &lt; con[x].size(); i++ ) {<br>      if( ast[con[x][i]] ) continue;<br>      if( z+cond[x][i] &gt;= d[con[x][i]] ) continue;<br>      q.push(PII(-(z+cond[x][i]), con[x][i]));<br>    }<br>  }<br>  return d[cton[finish]];<br>}<br>};<br></td>