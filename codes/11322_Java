<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>public class CubeRoll {<br>  int[] sq = new int[1000];<br>  int count = 0;<br>  void calSq() {<br>    for (int i = 1; i &lt; sq.length &amp;&amp; i*i &lt;= 100000; i++) {<br>      sq[count++] = i*i;<br>    }<br>  }<br>  public int getMinimumSteps(int init, int goal, int[] holePos) {<br>    calSq();<br>    int nh = holePos.length;<br>    for (int i = 0; i &lt; nh; i++) {<br>      if (holePos[i] &gt; init &amp;&amp; holePos[i] &lt; goal || holePos[i] &lt; init &amp;&amp; holePos[i] &gt; goal)<br>        return -1;<br>    }<br>    int min = Integer.MIN_VALUE;<br>    int max = Integer.MAX_VALUE;<br>    for (int i = 0; i &lt; nh; i++) {<br>      if (holePos[i] &lt; init &amp;&amp; holePos[i] &lt; goal &amp;&amp; holePos[i] &gt; min)<br>        min = holePos[i];<br>      if (holePos[i] &gt; init &amp;&amp; holePos[i] &gt; goal &amp;&amp; holePos[i] &lt; max)<br>        max = holePos[i];<br>    }<br>    int dist = Math.abs(init-goal);<br>    for (int i = 0; i &lt; count; i++) {<br>      if (dist == sq[i])<br>        return 1;<br>    }<br>    if (min == Integer.MIN_VALUE || max == Integer.MAX_VALUE) {<br>      if (dist % 2 == 1 || dist % 4 == 0)<br>        return 2;<br>      for (int i = 0; i &lt; count; i++) {<br>        if (inSq(dist-sq[i]))<br>          return 2;<br>      }<br>      return 3;<br>    }<br>    int[] step = new int[100001];<br>    Arrays.fill(step, -1);<br>    step[init] = 0;<br>    Queue&lt;Integer&gt; q = new LinkedList&lt;Integer&gt;();<br>    q.add(init);<br>    while (!q.isEmpty()) {<br>      int cur = q.remove();<br>      if (cur == goal) return step[cur];<br>      for (int i = 0; i &lt; count; i++) {<br>        int loc = cur+sq[i];<br>        if (loc &gt; min &amp;&amp; loc &lt; max &amp;&amp; step[loc] == -1) {<br>          step[loc] = step[cur]+1;<br>          q.add(loc);<br>        }<br>        loc = cur-sq[i];<br>        if (loc &gt; min &amp;&amp; loc &lt; max &amp;&amp; step[loc] == -1) {<br>          step[loc] = step[cur]+1;<br>          q.add(loc);<br>        }<br>      }<br>    }<br>    return -1;<br>    <br>  }<br>  boolean inSq(int t) {<br>    for (int i = 0; i &lt; count; i++) {<br>      if (sq[i] == t) return true;<br>    }<br>    return false;<br>  }<br>}<br></td>