<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;algorithm&gt;<br>#include &lt;vector&gt;<br>#include &lt;string&gt;<br>#include &lt;map&gt;<br>using namespace std;<br>class Node{<br>public:<br>  int a, b, c, d;<br>  Node(){<br>  }<br>  Node(int _a,int _b,int _c,int _d){<br>    a=_a;b=_b;c=_c;d=_d;<br>  }<br>  const bool operator &lt; (const Node &amp;t) const{<br>    if(a != t.a) return a&lt; t.a;<br>    if(b != t.b) return b&lt; t.b;<br>    if(c != t.c) return c&lt; t.c;<br>    return d&lt; t.d;<br>  }<br>};<br><br>class ImpossibleGame{<br>public:<br>  long long num[31][31][31][31];<br>  bool Check[10000];<br>  int Res[10000], Cc[10000], head;<br>  long long cnum[10000], cmax[10000];<br>  int cdeg[10000], cQ[10000], chead;<br>  vector&lt; vector&lt;int&gt; &gt; List1, List2;<br>  vector&lt; vector&lt;int&gt; &gt; cList;<br>  void dfs(int x){<br>    Check[x] = true;<br>    int i;<br>    for(i=0;i&lt;List1[x].size();i++){<br>      if(!Check[ List1[x][i] ])  dfs(List1[x][i]);<br>    }<br>    Res[head++] = x;<br>  }<br>  void dfs2(int x, int c){<br>    Check[x] = true;<br>    Cc[x] = c;<br>    int i;<br>    for(i=0;i&lt;List2[x].size();i++){<br>      if(!Check[ List2[x][i] ])  dfs2(List2[x][i], c);<br>    }<br>  }<br>  long long getMinimum(int K, vector &lt;string&gt; Bef, vector &lt;string&gt; Aft){<br>    int i, j, k, l, N;<br>    int a, b, c, d;<br>    N = Bef.size();<br>    vector&lt;Node&gt; node;<br>    vector&lt;Node&gt; Es, Ee;<br>    map&lt;Node, int&gt; ping;<br>    for(i=0;i&lt;=K;i++) for(j=0;j&lt;=K;j++) for(k=0;k&lt;=K;k++) for(l=0;l&lt;=K;l++){<br>      if(i==0 &amp;&amp; j==0 &amp;&amp; k==0 &amp;&amp; l==0) num[i][j][k][l] = 1;<br>      else{<br>        if(i &gt; 0) num[i][j][k][l] = num[i-1][j][k][l] * (i+j+k+l) / i;<br>        else if(j &gt; 0) num[i][j][k][l] = num[i][j-1][k][l] * (i+j+k+l) / j;<br>        else if(k &gt; 0) num[i][j][k][l] = num[i][j][k-1][l] * (i+j+k+l) / k;<br>        else if(l &gt; 0) num[i][j][k][l] = num[i][j][k][l-1] * (i+j+k+l) / l;<br>      }<br>      if(i+j+k+l == K){<br>        node.push_back( Node(i,j,k,l) );<br>      }<br>    }<br>    for(i=0;i&lt;node.size();i++){<br>      ping[ node[i] ] = i;<br>    }<br>    for(i=0;i&lt;N;i++){<br>      a= b=c=d=0;<br>      for(j=0;j&lt;Bef[i].length();j++){<br>        if(Bef[i][j] == 'A') a++;<br>        if(Bef[i][j] == 'B') b++;<br>        if(Bef[i][j] == 'C') c++;<br>        if(Bef[i][j] == 'D') d++;<br>      }<br>      Es.push_back( Node(a,b,c,d) );<br>      a= b=c=d=0;<br>      for(j=0;j&lt;Aft[i].length();j++){<br>        if(Aft[i][j] == 'A') a++;<br>        if(Aft[i][j] == 'B') b++;<br>        if(Aft[i][j] == 'C') c++;<br>        if(Aft[i][j] == 'D') d++;<br>      }<br>      Ee.push_back( Node(a,b,c,d) );<br>    }<br>    List1 = vector&lt; vector&lt;int&gt; &gt;(node.size(), vector&lt;int&gt;());<br>    List2 = vector&lt; vector&lt;int&gt; &gt;(node.size(), vector&lt;int&gt;());<br>    <br>    for(i=0;i&lt;node.size();i++){<br>      for(j=0;j&lt;N;j++){<br>        if(node[i].a &gt;= Es[j].a &amp;&amp; node[i].b &gt;= Es[j].b &amp;&amp; node[i].c &gt;= Es[j].c &amp;&amp; node[i].d &gt;= Es[j].d){<br>          a = node[i].a - Es[j].a + Ee[j].a;<br>          b = node[i].b - Es[j].b + Ee[j].b;<br>          c = node[i].c - Es[j].c + Ee[j].c;<br>          d = node[i].d - Es[j].d + Ee[j].d;<br>          List1[i].push_back( ping[ Node(a,b,c,d) ] );<br>          List2[ ping[ Node(a,b,c,d) ] ].push_back( i );<br>//          printf("%d %d %d %d =&gt; %d %d %d %d\n",node[i].a,node[i].b,node[i].c,node[i].d, a,b,c,d);<br>        }<br>      }<br>    }<br>    for(i=0;i&lt;node.size();i++) Check[i] = false;<br>    head = 0;<br>    for(i=0;i&lt;node.size();i++){<br>      if(!Check[i]) dfs(i);<br>    }<br>    for(i=0;i&lt;node.size();i++) Check[i] = false;<br>    int color = 0;<br>    for(i=head-1;i&gt;=0;i--){<br>      if(!Check[ Res[i] ]){<br>        dfs2( Res[i], color );<br>        color ++;<br>      }<br>    }<br>    cList = vector&lt; vector&lt;int&gt; &gt;(color, vector&lt;int&gt;());<br>    for(i=0;i&lt;color;i++){<br>      cdeg[i] = cnum[i] = cmax[i] = 0;<br>    }<br>    for(i=0;i&lt;node.size();i++){<br>      cnum[ Cc[i] ] += num[node[i].a][node[i].b][node[i].c][node[i].d];<br>      for(j=0;j&lt;List1[i].size();j++){<br>        int x = Cc[i], y = Cc[List1[i][j]];<br>        if(x == y) continue;<br>        cList[x].push_back(y); cdeg[y] ++;<br>      }<br>    }<br>    chead = 0;<br>    for(i=0;i&lt;color;i++){<br>      if(cdeg[i] == 0)    cQ[chead ++] = i;<br>    }<br>    long long sol = 0;<br>    for(i=0;i&lt;chead;i++){<br>      int x = cQ[i], y;<br>      long long tr;<br>      tr = cmax[x] + cnum[x];<br>      sol = max(sol, tr);<br>      for(j=0;j&lt;cList[x].size();j++){<br>        y = cList[x][j];<br>        cmax[y] = max(cmax[y], tr);<br>        cdeg[y] --;<br>        if(cdeg[y] == 0)  cQ[chead ++] = y;<br>      }<br>    }<br>    return sol;<br>  }<br>};<br></td>