<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br> <br>public class ImpossibleGame {<br>    int[] seq;<br>    boolean[] mark;<br>    int seqPointer;<br>    int[][] adj;<br>    int[][] radj;<br>    int[] component;<br>    int numComponent;<br> <br>    public long getMinimum(int k, String[] before, String[] after) {<br>        int[][][] id = new int[k + 1][k + 1][k + 1];<br>        int numIds = 0;<br>        for (int a = 0; a &lt;= k; ++a)<br>            for (int b = 0; a + b &lt;= k; ++b)<br>                for (int c = 0; a + b + c &lt;= k; ++c) {<br>                    ++numIds;<br>                }<br>        int[][] what = new int[numIds][4];<br>        numIds = 0;<br>        for (int a = 0; a &lt;= k; ++a)<br>            for (int b = 0; a + b &lt;= k; ++b)<br>                for (int c = 0; a + b + c &lt;= k; ++c) {<br>                    id[a][b][c] = numIds;<br>                    what[numIds][0] = a;<br>                    what[numIds][1] = b;<br>                    what[numIds][2] = c;<br>                    what[numIds][3] = k - a - b - c;<br>                    ++numIds;<br>                }<br>        adj = new int[numIds][before.length];<br>        int[] cur = new int[4];<br>        for (int i = 0; i &lt; numIds; ++i) {<br>            for (int j = 0; j &lt; before.length; ++j) {<br>                adj[i][j] = -1;<br>                System.arraycopy(what[i], 0, cur, 0, 4);<br>                for (int u = 0; u &lt; before[j].length(); ++u) {<br>                    --cur[before[j].charAt(u) - 'A'];<br>                }<br>                boolean ok = true;<br>                for (int x : cur) if (x &lt; 0) ok = false;<br>                if (ok) {<br>                    for (int u = 0; u &lt; after[j].length(); ++u) {<br>                        ++cur[after[j].charAt(u) - 'A'];<br>                    }<br>                    adj[i][j] = id[cur[0]][cur[1]][cur[2]];<br>                }<br>            }<br>        }<br>        radj = new int[numIds][before.length];<br>        for (int i = 0; i &lt; numIds; ++i) {<br>            for (int j = 0; j &lt; before.length; ++j) {<br>                radj[i][j] = -1;<br>                System.arraycopy(what[i], 0, cur, 0, 4);<br>                for (int u = 0; u &lt; after[j].length(); ++u) {<br>                    --cur[after[j].charAt(u) - 'A'];<br>                }<br>                boolean ok = true;<br>                for (int x : cur) if (x &lt; 0) ok = false;<br>                if (ok) {<br>                    for (int u = 0; u &lt; before[j].length(); ++u) {<br>                        ++cur[before[j].charAt(u) - 'A'];<br>                    }<br>                    radj[i][j] = id[cur[0]][cur[1]][cur[2]];<br>                }<br>            }<br>        }<br>        long[][] comb = new long[k + 1][k + 1];<br>        comb[0][0] = 1;<br>        for (int i = 1; i &lt;= k; ++i) {<br>            comb[i][0] = 1;<br>            for (int j = 1; j &lt;= k; ++j)<br>                comb[i][j] = comb[i - 1][j - 1] + comb[i - 1][j];<br>        }<br>        long[] am = new long[numIds];<br>        for (int i = 0; i &lt; numIds; ++i) {<br>            am[i] = 1;<br>            int rem = k;<br>            for (int x : what[i]) {<br>                am[i] *= comb[rem][x];<br>                rem -= x;<br>            }<br>            if (rem != 0) throw new RuntimeException();<br>        }<br>        seq = new int[numIds];<br>        seqPointer = 0;<br>        mark = new boolean[numIds];<br>        for (int i = 0; i &lt; numIds; ++i)<br>            if (!mark[i]) dfs1(i);<br>        if (seqPointer != numIds) throw new RuntimeException();<br>        component = new int[numIds];<br>        Arrays.fill(component, -1);<br>        int[] first = new int[numIds + 1];<br>        numComponent = 0;<br>        seqPointer = 0;<br>        int[] seq2 = seq.clone();<br>        for (int i = 0; i &lt; numIds; ++i) {<br>            int at = seq2[numIds - 1 - i];<br>            if (component[at] &lt; 0) {<br>                first[numComponent] = seqPointer;<br>                dfs2(at);<br>                ++numComponent;<br>            }<br>        }<br>        first[numComponent] = seqPointer;<br>        if (seqPointer != numIds) throw new RuntimeException();<br>        long[] need = new long[numComponent];<br>        long res = 0;<br>        for (int componentId = numComponent - 1; componentId &gt;= 0; --componentId) {<br>            long max = 0;<br>            long add = 0;<br>            for (int i = first[componentId]; i &lt; first[componentId + 1]; ++i) {<br>                int at = seq[i];<br>                for (int u : adj[at])<br>                    if (u &gt;= 0)<br>                        max = Math.max(max, need[component[u]]);<br>                add += am[at];<br>            }<br>            need[componentId] = max + add;<br>            res = Math.max(res, need[componentId]);<br>        }<br>        return res;<br>    }<br> <br>    private void dfs2(int at) {<br>        if (component[at] &gt;= 0) return;<br>        component[at] = numComponent;<br>        seq[seqPointer++] = at;<br>        for (int x : radj[at])<br>            if (x &gt;= 0)<br>                dfs2(x);<br>    }<br> <br>    private void dfs1(int what) {<br>        if (mark[what]) return;<br>        mark[what] = true;<br>        for (int x : adj[what])<br>            if (x &gt;= 0)<br>                dfs1(x);<br>        seq[seqPointer++] = what;<br>    }<br> <br>}<br> <br> <br>// Powered by FileEdit<br>// Powered by RETester [based on ExampleBuilder]<br>// Powered by CodeProcessor<br></td>