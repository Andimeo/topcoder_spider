<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br> <br>public class WhiteSpaceEditing {<br>    int[] lines;<br>    int[] interesting;<br>    int[][][] cache;<br> <br>    public int getMinimum(int[] lines) {<br>        Set&lt;Integer&gt; all = new TreeSet&lt;Integer&gt;();<br>        for (int x : lines)<br>            all.add(x);<br>        all.add(0);<br>        interesting = new int[all.size()];<br>        int interestingPointer = 0;<br>        for (int x : all)<br>            interesting[interestingPointer++] = x;<br>        this.lines = lines;<br>        cache = new int[interesting.length][lines.length][lines.length];<br>        for (int i = 0; i &lt; interesting.length; ++i)<br>            for (int j = 0; j &lt; lines.length; ++j)<br>                Arrays.fill(cache[i][j], -1);<br>        return get(0, 0, lines.length - 1);<br>    }<br> <br>    private int get(int interestingAmountId, int left, int right) {<br>        if (left == right) {<br>            return Math.abs(lines[left] - interesting[interestingAmountId]);<br>        }<br>        int res = cache[interestingAmountId][left][right];<br>        if (res &gt;= 0) return res;<br>        res = Integer.MAX_VALUE / 2;<br>        for (int changeTo = 0; changeTo &lt; interesting.length; ++changeTo) {<br>            int delta = Math.abs(interesting[interestingAmountId] - interesting[changeTo]);<br>            for (int middle = left; middle &lt; right; ++middle) {<br>                res = Math.min(res, delta + 1 + get(changeTo, left, middle) + get(changeTo, middle + 1, right));<br>            }<br>        }<br>        cache[interestingAmountId][left][right] = res;<br>        return res;<br>    }<br> <br>}<br> <br> <br>// Powered by FileEdit<br>// Powered by RETester [based on ExampleBuilder]<br>// Powered by CodeProcessor<br></td>