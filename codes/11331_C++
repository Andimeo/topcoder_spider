<td class="problemText" colspan="8" valign="middle" align="left">
            // g/x/x/l/o/v/e/g/x/x //<br><br>#include &lt;sstream&gt;<br>#include &lt;functional&gt;<br>#include &lt;iostream&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;cstring&gt;<br>#include &lt;cctype&gt;<br>#include &lt;queue&gt;<br>#include &lt;cmath&gt;<br>#include &lt;set&gt;<br>#include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;map&gt;<br>using namespace std;<br>#define sz(a) int((a).size())<br>#define all(a) (a).begin(), (a).end() <br>typedef long long ll;<br><br>class PalindromeGame<br>{<br>public:<br>  int getMaximum(vector &lt;string&gt; front, vector &lt;int&gt; back);<br>};<br><br>const int MAXN = 50;<br><br>bool isok[MAXN][MAXN];<br><br>bool checkit(string a, string b)<br>{<br>  reverse(all(a));<br>  return a == b;<br>}<br><br>bool done[MAXN];<br><br>int PalindromeGame::getMaximum(vector &lt;string&gt; front, vector &lt;int&gt; back)<br>{<br>  int n = sz(front);<br>  for (int i = 0; i &lt; n; ++i) {<br>    for (int j = 0; j &lt; n; ++j) {<br>      isok[i][j] = checkit(front[i], front[j]);<br>    }<br>  }<br>  int res = 0;<br>  for (int notuse = -1; notuse &lt; n; ++notuse) {<br>    memset(done, false, sizeof(done));<br>    int sum = 0;<br>    if (notuse &gt;= 0) {<br>      done[notuse] = true;<br>      if (isok[notuse][notuse]) sum += back[notuse];<br>    }<br>    <br>    bool found = true;<br>    while (found) {<br>      found = false;<br>      int best = -1;<br>      int a, b;<br>      for (int i = 0; i &lt; n; ++i) {<br>        if (!done[i]) {<br>          for (int j = 0; j &lt; n; ++j) {<br>            if (j != i &amp;&amp; !done[j]) {<br>              if (isok[i][j]) {<br>                found = true;<br>                if (back[i] + back[j] &gt; best) {<br>                  best = back[i] + back[j];<br>                  a = i;<br>                  b = j;<br>                }<br>              }<br>            }<br>          }<br>        }<br>      }<br>      if (best != -1) {<br>        sum += best;<br>        done[a] = done[b] = true;<br>      }<br>    }<br>    res = max(res, sum);<br>  }<br>  return res;<br>}<br><br><br><br>// Powered by FileEdit<br>// Powered by CodeProcessor<br></td>