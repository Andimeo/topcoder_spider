<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections;<br>using System.Collections.Generic;<br>using System.Text;<br><br>public class SlimeXGrandSlimeAuto {<br>    public int travel(int[] cars, int[] districts, string[] roads, int inverseWalkSpeed, int inverseDriveSpeed)<br>    {<br>        int len = roads.Length;<br>        int[,] dist = new int[len, len];<br>        int i, j, k;<br>        for (i = 0; i &lt; len; i++)<br>        {<br>            for (j = 0; j &lt; len; j++)<br>            {<br>                dist[i, j] = getdist(roads[i][j]);<br>            }<br>            dist[i, i] = 0;<br>        }<br>        for (k = 0; k &lt; len; k++)<br>        {<br>            for (i = 0; i &lt; len; i++)<br>            {<br>                for (j = 0; j &lt; len; j++)<br>                {<br>                    dist[i, j] = Math.Min(dist[i, j], dist[i, k] + dist[k, j]);<br>                }<br>            }<br>        }<br>        int blen = districts.Length + cars.Length;<br>        int[,] matrix = new int[blen, blen];<br>        int pre = 0;<br>        int kake = 100000;<br>        for (i = 0; i &lt; districts.Length; i++)<br>        {<br>            for (j = 0; j &lt; cars.Length; j++)<br>            {<br>                matrix[i, j] = kake - dist[pre, cars[j]] * inverseWalkSpeed - dist[cars[j], districts[i]] * inverseDriveSpeed;<br>            }<br>            for (; j &lt; blen; j++)<br>            {<br>                matrix[i, j] = kake - dist[pre, districts[i]] * inverseWalkSpeed;<br>            }<br>            pre = districts[i];<br>        }<br>        for (; i &lt; blen; i++) for (j = 0; j &lt; blen; j++) matrix[i, j] = kake;<br>        return -(hungarian(matrix) - blen * kake);<br>    }<br><br>    int hungarian(int[,] a)<br>    {<br>        int n = a.GetLength(0), p, q;<br>        int[] fx = new int[n];<br>        int[] fy = new int[n];<br>        int inf = 9999999;<br>        int i, j, k;<br>        for (i = 0; i &lt; n; i++) fx[i] = inf;<br>        for (i = 0; i &lt; n; i++) fy[i] = inf;<br>        int[] x = new int[n];<br>        int[] y = new int[n];<br>        for (i = 0; i &lt; n; i++) x[i] = y[i] = -1;<br><br>        for (i = 0; i &lt; n; ++i)<br>            for (j = 0; j &lt; n; ++j)<br>                fx[i] = Math.Max(fx[i], a[i, j]);<br>        for (i = 0; i &lt; n; )<br>        {<br>            int[] t = new int[n];<br>            int[] s = new int[n + 1];<br>            for (j = 0; j &lt; n; j++) t[j] = -1;<br>            for (j = 0; j &lt;= n; j++) s[j] = i;<br>            for (p = q = 0; p &lt;= q &amp;&amp; x[i] &lt; 0; ++p)<br>                for (k = s[p], j = 0; j &lt; n &amp;&amp; x[i] &lt; 0; ++j)<br>                    if (fx[k] + fy[j] == a[k, j] &amp;&amp; t[j] &lt; 0)<br>                    {<br>                        s[++q] = y[j];<br>                        t[j] = k;<br>                        if (s[q] &lt; 0)<br>                            for (p = j; p &gt;= 0; j = p)<br>                            {<br>                                y[j] = k = t[j];<br>                                p = x[k];<br>                                x[k] = j;<br>                            }<br>                    }<br>            if (x[i] &lt; 0)<br>            {<br>                int d = inf;<br>                for (k = 0; k &lt;= q; ++k)<br>                    for (j = 0; j &lt; n; ++j)<br>                        if (t[j] &lt; 0) d = Math.Min(d, fx[s[k]] + fy[j] - a[s[k], j]);<br>                for (j = 0; j &lt; n; ++j)<br>                {<br>                    if (t[j] &gt;= 0) fy[j] += d;<br>                }<br>                for (k = 0; k &lt;= q; ++k) fx[s[k]] -= d;<br>            }<br>            else ++i;<br>        }<br>        long ret = 0;<br>        <br>        for (i = 0; i &lt; n; ++i) ret += a[i, x[i]];<br>        return (int)ret;<br>    }<br><br>    int getdist(char c)<br>    {<br>        if (c &gt;= '0' &amp;&amp; c &lt;= '9') return c - '0' + 1;<br>        if (c &gt;= 'a' &amp;&amp; c &lt;= 'z') return c - 'a' + 11;<br>        if (c &gt;= 'A' &amp;&amp; c &lt;= 'Z') return c - 'A' + 37;<br>        else return 99999;<br>    }<br><br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003] [modified for C# by Petr]<br>// Powered by CodeProcessor<br></td>