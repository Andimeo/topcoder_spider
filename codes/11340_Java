<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br> <br>public class FoxAverageSequence {<br>    static final int MODULO = 1000000007;<br> <br>  public int theCount(int[] seq) {<br>        int maxNumber = 40;<br>        int maxSum = maxNumber * seq.length;<br>        int[][][] am = new int[maxSum + 1][2][maxNumber + 1];<br>        am[0][0][0] = 1;<br>        int pos = 0;<br>        for (int x : seq) {<br>            int[][][] nam = new int[maxSum + 1][2][maxNumber + 1];<br>            for (int oldSum = 0; oldSum &lt;= maxSum; ++oldSum)<br>                for (int oldNumDecreasing = 0; oldNumDecreasing &lt; 2; ++oldNumDecreasing) {<br>                    int[] quick = am[oldSum][oldNumDecreasing];<br>                    for (int oldLast = 0; oldLast &lt;= maxNumber; ++oldLast) {<br>                        int cnt = quick[oldLast];<br>                        if (cnt == 0)<br>                            continue;<br>                        int max = maxNumber;<br>                        if (pos &gt; 0)<br>                            max = Math.min(max, oldSum / pos);<br>                        int min = 0;<br>                        if (oldNumDecreasing &gt; 0)<br>                            min = oldLast;<br>                        for (int last = min; last &lt;= max; ++last) {<br>                            if (x &gt;= 0 &amp;&amp; x != last) continue;<br>                            int[] nquick = nam[oldSum + last][last &lt; oldLast ? 1 : 0];<br>                            nquick[last] += cnt;<br>                            if (nquick[last] &gt;= MODULO) nquick[last] -= MODULO;<br>                        }<br>                    }<br>                }<br>            ++pos;<br>            am = nam;<br>        }<br>    int res = 0;<br>        for (int sum = 0; sum &lt;= maxSum; ++sum)<br>            for (int numDecreasing = 0; numDecreasing &lt; 2; ++numDecreasing)<br>                for (int x : am[sum][numDecreasing]) {<br>                    res += x;<br>                    if (res &gt;= MODULO) res -= MODULO;<br>                }<br>    return res;<br>  }<br> <br>}<br> <br> <br>// Powered by FileEdit<br>// Powered by RETester [based on ExampleBuilder]<br>// Powered by CodeProcessor<br></td>