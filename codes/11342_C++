<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;algorithm&gt;<br>#include &lt;iostream&gt;<br>#include &lt;sstream&gt;<br>#include &lt;numeric&gt;<br>#include &lt;string&gt;<br>#include &lt;utility&gt;<br>#include &lt;vector&gt;<br>#include &lt;queue&gt;<br>#include &lt;set&gt;<br>#include &lt;map&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cctype&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdarg&gt;<br>#include &lt;cstring&gt;<br>using namespace std;<br> <br>#define FOR(i, n) for (int i = 0; i &lt; (int)(n); ++i)<br>#define FOREACH(i, n) for (typeof(n.begin()) i = n.begin(); i != n.end(); ++i)<br>#define MEMSET(p, c) memset(p, c, sizeof(p))<br>typedef pair&lt;int, int&gt; PII;<br>#ifndef WATASHI_PC<br>#define errf(fmt, ...) do { } while (false)<br>#endif<br> <br>struct MafiaGame {<br>  double probabilityToLose(int N, vector &lt;int&gt; decisions);<br>};<br> <br>bool gao(int n, int m) {<br>  if (m == 1) {<br>    return true;<br>  } else {<br>    return n % m != 0 &amp;&amp; gao(n, n % m);<br>  }<br>}<br> <br>double MafiaGame::probabilityToLose(int n, vector &lt;int&gt; d) {<br>  vector&lt;int&gt; c(n, 0);<br>  FOREACH (i, d) {<br>    ++c[*i];<br>  }<br>  map&lt;int, int&gt; m;<br>  for (int i = 0; i &lt; n; ++i) {<br>    ++m[c[i]];<br>  }<br>  int t = m.rbegin()-&gt;first;<br>  printf("%d %d\n", m.rbegin()-&gt;first, m.rbegin()-&gt;second);<br>  if (t &lt;= 1) {<br>    return 0.0;<br>  } else if (!gao(n, m.rbegin()-&gt;second)) {<br>    return 0.0;<br>  } else {<br>    return 1.0 / m.rbegin()-&gt;second;<br>  }<br>}<br> <br> <br> <br>// Powered by FileEdit<br>// Powered by CodeProcessor<br></td>