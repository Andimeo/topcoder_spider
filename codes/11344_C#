<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Text;<br>using System.Text.RegularExpressions;<br>using System.Collections;<br>using System.Collections.Generic;<br><br>public class FractalPicture {<br><br>    struct State<br>    {<br>        public int X1, Y1, X2, Y2, N;<br><br>        public State(int x1, int y1, int x2, int y2, int n)<br>        {<br>            X1 = x1;<br>            Y1 = y1;<br>            X2 = x2;<br>            Y2 = y2;<br>            N = n;<br>        }<br><br>        public bool Equals(State other)<br>        {<br>            return other.X1 == X1 &amp;&amp; other.Y1 == Y1 &amp;&amp; other.X2 == X2 &amp;&amp; other.Y2 == Y2 &amp;&amp; other.N == N;<br>        }<br><br>        public override bool Equals(object obj)<br>        {<br>            if (ReferenceEquals(null, obj))<br>                return false;<br>            if (obj.GetType() != typeof (State))<br>                return false;<br>            return Equals((State) obj);<br>        }<br><br>        public override int GetHashCode()<br>        {<br>            unchecked<br>            {<br>                int result = X1;<br>                result = (result * 397) ^ Y1;<br>                result = (result * 397) ^ X2;<br>                result = (result * 397) ^ Y2;<br>                result = (result * 397) ^ N;<br>                return result;<br>            }<br>        }<br>    }<br><br>    Dictionary&lt;State, double&gt; dict = new Dictionary&lt;State, double&gt;();<br><br>    double get(int x1, int y1, int x2, int y2, int n)<br>    {<br>        x1 = Math.Max(x1, -27);<br>        x2 = Math.Min(x2, 27);<br>        y1 = Math.Max(y1, 0);<br>        y2 = Math.Min(y2, 81);<br>        if (x1 &gt; x2 || y1 &gt; y2)<br>            return 0;<br>        if (x1 &gt; 27 || x2 &lt; -27 || y1 &gt; 81 || y2 &lt; 0)<br>            return 0;<br>        if (x1 == -27 &amp;&amp; x2 == 27 &amp;&amp; y1 == 0 &amp;&amp; y2 == 81)<br>        {<br>            return 81 * 2 / 3 * (n - 1) + 81;<br>        }<br>        State state = new State(x1, y1, x2, y2, n);<br>        double res;<br>        if (!dict.TryGetValue(state, out res))<br>        {<br>            res = 0;<br>            if (x1 &lt;= 0 &amp;&amp; x2 &gt;= 0 &amp;&amp; y1 &lt; 2 * 81 / 3)<br>                res += Math.Min(y2, 2 * 81 / 3) - y1;<br>            if (n &gt; 1)<br>            {<br>                res += get(x1 * 3, (y1 - 54) * 3, x2 * 3, (y2 - 54) * 3, n - 1) / 3;<br>                res += get((y1 - 54) * 3, -x2 * 3, (y2 - 54) * 3, -x1 * 3, n - 1) / 3;<br>                res += get(-(y2 - 54) * 3, x1 * 3, -(y1 - 54) * 3, x2 * 3, n - 1) / 3;<br>            }<br>            dict[state] = res;<br>        }<br>        return res;<br>    }<br><br>  public double getLength(int x1, int y1, int x2, int y2) {<br>    return get(x1, y1, x2, y2, 500);<br>  }<br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by CodeProcessor<br></td>