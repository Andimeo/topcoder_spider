<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;vector&gt;<br>#include &lt;list&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;deque&gt;<br>#include &lt;stack&gt;<br>#include &lt;bitset&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;functional&gt;<br>#include &lt;numeric&gt;<br>#include &lt;utility&gt;<br>#include &lt;sstream&gt;<br>#include &lt;iostream&gt;<br>#include &lt;iomanip&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;ctime&gt;<br> <br>using namespace std;<br> <br>class ProductAndSum {<br>public:<br>  int getSum(int, int, int, int, int);<br>};<br> <br>const int md = 500500573;<br>int c[2510][2510], p[2510], inv[2510];<br> <br>int ProductAndSum::getSum(int p2, int p3, int p5, int p7, int S) {<br>  int k2,k3,k4,k6,k8,k9,k1,k5 = p5,k7 = p7,i,j,sum,tot;<br>  memset(c,0,sizeof(c));<br>  for (i=0;i&lt;=2500;i++) c[i][0] = 1;<br>  for (i=1;i&lt;=2500;i++)<br>    for (j=1;j&lt;=i;j++) {<br>      c[i][j] = c[i-1][j]+c[i-1][j-1];<br>      if (c[i][j] &gt;= md) c[i][j] -= md;<br>    }<br>  for (i=1;i&lt;=2500;i++) {<br>    int x, step;<br>    x = 1; step = 1 &lt;&lt; 30;<br>    while (step &gt; 0) {<br>      x = (long long)x*x % md;<br>      if (step &amp; (md-2)) x = (long long)x*i % md;<br>      step &gt;&gt;= 1;<br>    } <br>    inv[i] = x;<br>  }<br>  p[0] = 0;<br>  for (i=1;i&lt;=2500;i++) p[i] = ((long long)p[i-1]*10+1) % md;<br>  long long ans = 0;<br>  for (k2=0;k2&lt;=p2;k2++)<br>    for (k4=0;k2+2*k4&lt;=p2;k4++)<br>      for (k8=0;k2+2*k4+3*k8&lt;=p2;k8++) {<br>        k6 = p2 - k2 - 2*k4 - 3*k8;<br>        for (k9=0;2*k9+k6&lt;=p3;k9++) {<br>          k3 = p3 - 2*k9 - k6;<br>          sum = 2*k2+4*k4+8*k8+6*k6+9*k9+3*k3+5*k5+7*k7;<br>          if (sum &gt; S) continue;<br>          k1 = S-sum;<br>          tot = k1+k2+k3+k4+k5+k6+k7+k8+k9;<br>          long long nv = (long long)c[tot][k1]*c[tot-k1][k2] % md;<br>          nv = nv*c[tot-k1-k2][k3] % md;<br>          nv = nv*c[tot-k1-k2-k3][k4] % md;<br>          nv = nv*c[tot-k1-k2-k3-k4][k5] % md;<br>          nv = nv*c[tot-k1-k2-k3-k4-k5][k6] % md;<br>          nv = nv*c[tot-k1-k2-k3-k4-k5-k6][k7] % md;<br>          nv = nv*c[tot-k1-k2-k3-k4-k5-k6-k7][k8] % md;<br>          nv = nv*c[tot-k1-k2-k3-k4-k5-k6-k7-k8][k9] % md;<br>          long long res = nv*S % md;<br>          res = res*inv[tot] % md;<br>          res = res*p[tot] % md;<br>          ans = (ans+res) % md;<br>        }<br>      }<br>  return ans;<br>}<br> <br> <br>//Powered by [KawigiEdit] 2.0!<br></td>