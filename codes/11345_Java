<td class="problemText" colspan="8" valign="middle" align="left">
            import java.math.BigInteger;<br>import java.util.*;<br> <br>public class ProductAndSum {<br>    static final int MODULO = 500500573;<br> <br>  public int getSum(int p2, int p3, int p5, int p7, int S) {<br>        int[] ones = new int[S + 1];<br>        ones[1] = 1;<br>        for (int i = 2; i &lt; ones.length; ++i) {<br>            ones[i] = (int) ((((long) ones[i - 1]) * 10 + 1) % MODULO);<br>        }<br>        int[] inv = new int[S + 1];<br>        for (int i = 1; i &lt; inv.length; ++i)<br>            inv[i] = BigInteger.valueOf(i).modInverse(BigInteger.valueOf(MODULO)).intValue();<br>        int[] fact = new int[S + 1];<br>        fact[0] = 1;<br>        for (int i = 1; i &lt; fact.length; ++i) {<br>            fact[i] = (int) ((((long) fact[i - 1]) * i) % MODULO);<br>        }<br>        int[] invfact = new int[S + 1];<br>        invfact[0] = 1;<br>        for (int i = 1; i &lt; invfact.length; ++i)<br>            invfact[i] = (int) ((((long) invfact[i - 1]) * inv[i]) % MODULO);<br>        long res = 0;<br>        for (int n9 = 0; n9 * 2 &lt;= p3; ++n9)<br>            for (int n8 = 0; n8 * 3 &lt;= p2; ++n8)<br>                for (int n6 = 0; n6 + 2 * n9 &lt;= p3 &amp;&amp; n6 + 3 * n8 &lt;= p2; ++n6)<br>                    for (int n4 = 0; n4 * 2 + n6 + 3 * n8 &lt;= p2; ++n4) {<br>                        int[] am = new int[10];<br>                        am[9] = n9;<br>                        am[8] = n8;<br>                        am[7] = p7;<br>                        am[6] = n6;<br>                        am[5] = p5;<br>                        am[4] = n4;<br>                        am[3] = p3 - 2 * n9 - n6;<br>                        am[2] = p2 - 3 * n8 - n6 - 2 * n4;<br>                        am[1] = S;<br>                        for (int i = 2; i &lt;= 9; ++i)<br>                            am[1] -= am[i] * i;<br>                        if (am[1] &lt; 0) continue;<br>                        int total = 0;<br>                        for (int x : am) total += x;<br>                        long cur = fact[total - 1];<br>                        for (int x : am) cur = (cur * invfact[x]) % MODULO;<br>                        long sum = 0;<br>                        for (int i = 1; i &lt;= 9; ++i) {<br>                            int x = am[i];<br>                            sum += i * x;<br>                        }<br>                        sum = (sum * cur) % MODULO;<br>                        res = (res + sum * ones[total]) % MODULO;<br>                    }<br>    return (int) res;<br>  }<br> <br>}<br> <br> <br>// Powered by FileEdit<br>// Powered by RETester [based on ExampleBuilder]<br>// Powered by CodeProcessor<br></td>