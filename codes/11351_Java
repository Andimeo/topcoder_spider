<td class="problemText" colspan="8" valign="middle" align="left">
            import java.math.BigInteger;<br>import java.util.*;<br> <br>public class TheCowDivOne {<br>    int[][] cache;<br>    int[][] comb;<br>    static final int MODULO = 1000000007;<br> <br>  public int find(int N, int K) {<br>        cache = new int[K + 1][K + 1];<br>        comb = new int[K + 1][K + 1];<br>        comb[0][0] = 1;<br>        for (int i = 1; i &lt;= K; ++i) {<br>            comb[i][0] = 1;<br>            for (int j = 1; j &lt;= K; ++j) {<br>                comb[i][j] = (comb[i - 1][j - 1] + comb[i - 1][j]) % MODULO;<br>            }<br>        }<br>        for (int i = 0; i &lt;= K; ++i) Arrays.fill(cache[i], -1);<br>        long ret = get(N, K, N);<br>        long fact = 1;<br>        for (int i = 1; i &lt;= K; ++i) {<br>            fact = (fact * i) % MODULO;<br>        }<br>        fact = BigInteger.valueOf(fact).modInverse(BigInteger.valueOf(MODULO)).longValue();<br>        return (int) ((ret * fact) % MODULO);<br>  }<br> <br>    private int get(int max, int count, int modulo) {<br>        if (count == 0)<br>            return 1;<br>        if (modulo &lt; cache.length) {<br>            int cached = cache[modulo][count];<br>            if (cached &gt;= 0) return cached;<br>        }<br>        int res = 0;<br>        long fact = 1;<br>        for (int numEqual = 0; numEqual &lt;= count - 1; ++numEqual) {<br>            int gg = gcd(numEqual + 1, max);<br>            int g = gcd(modulo, gg);<br>            long prev = get(max, count - 1 - numEqual, g);<br>            prev *= max / (modulo / g);<br>            prev %= MODULO;<br>            prev *= comb[count - 1][numEqual];<br>            prev %= MODULO;<br>            if (numEqual &gt; 0) {<br>                fact *= numEqual;<br>                fact %= MODULO;<br>            }<br>            prev *= fact;<br>            prev %= MODULO;<br>            if (numEqual % 2 == 0)<br>                res = (int) ((res + prev) % MODULO);<br>            else<br>                res = (int) ((res + MODULO - prev) % MODULO);<br>        }<br>        if (modulo &lt; cache.length) {<br>            cache[modulo][count] = res;<br>        }<br>        return res;<br>    }<br> <br>    private int gcd(int a, int b) {<br>        while (b &gt; 0) {<br>            int t = a % b;<br>            a = b;<br>            b = t;<br>        }<br>        return a;<br>    }<br> <br>}<br> <br> <br>// Powered by FileEdit<br>// Powered by RETester [based on ExampleBuilder]<br>// Powered by CodeProcessor<br></td>