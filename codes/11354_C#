<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections.Generic;<br>using System.Text;<br>using System.Text.RegularExpressions;<br>using System.Collections;<br><br>public class Suminator {<br>    public int findMissing(int[] program, int wantedResult) {<br>        if (getSum(program) == wantedResult) return 0;<br><br>        Stack&lt;KeyValuePair&lt;long, bool&gt;&gt; stack = new Stack&lt;KeyValuePair&lt;long, bool&gt;&gt;();<br>        for (int i = 0; i &lt; program.Length; i++)<br>        {<br>            int d = program[i];<br>            if (d == -1)<br>            {<br>                stack.Push(new KeyValuePair&lt;long, bool&gt;(0, true));<br>            } else if (d == 0)<br>            {<br>                KeyValuePair&lt;long, bool&gt; a = stack.Count &gt; 0 ? stack.Pop() : new KeyValuePair&lt;long, bool&gt;(0, false);<br>                KeyValuePair&lt;long, bool&gt; b = stack.Count &gt; 0 ? stack.Pop() : new KeyValuePair&lt;long, bool&gt;(0, false);<br>                KeyValuePair&lt;long, bool&gt; c = new KeyValuePair&lt;long, bool&gt;(a.Key + b.Key, a.Value || b.Value);<br>                stack.Push(c);<br>            }else<br>            {<br>                stack.Push(new KeyValuePair&lt;long, bool&gt;(d, false));<br>            }<br>        }<br>        if (stack.Count == 0)<br>            return -1;<br>        KeyValuePair&lt;long, bool&gt; top = stack.Peek();<br>        if (!top.Value)<br>            return -1;<br>        long res = wantedResult - top.Key;<br>        if (res &lt;= 0)<br>            return -1;<br>        return (int) res;<br><br>    }<br><br>    long getSum(int[] program)<br>    {<br>        Stack&lt;long&gt; stack = new Stack&lt;long&gt;();<br>        foreach (int i in program)<br>        {<br>            if (i == 0 || i == -1)<br>            {<br>                long a = stack.Count &gt; 0 ? stack.Pop() : 0;<br>                long b = stack.Count &gt; 0 ? stack.Pop() : 0;<br>                stack.Push(a + b);<br>            } else<br>            {<br>                stack.Push(i);<br>            }<br>        }<br>        return stack.Count &gt; 0 ? stack.Peek() : 0;<br>    }<br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by CodeProcessor<br></td>