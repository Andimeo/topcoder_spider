<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br> <br>public class TheProgrammingContestDivOne {<br>    static class Problem implements Comparable&lt;Problem&gt; {<br>        int maxPoints;<br>        int pointsPerMinute;<br>        int requiredTime;<br> <br>        Problem(int maxPoints, int pointsPerMinute, int requiredTime) {<br>            this.maxPoints = maxPoints;<br>            this.pointsPerMinute = pointsPerMinute;<br>            this.requiredTime = requiredTime;<br>        }<br> <br>        public int compareTo(Problem problem) {<br>            long z = requiredTime * (long) problem.pointsPerMinute - pointsPerMinute * (long) problem.requiredTime;<br>            if (z &lt; 0)<br>                return -1;<br>            else if (z &gt; 0)<br>                return 1;<br>            else<br>                return 0;<br>        }<br>    }<br> <br>  public int find(int T, int[] maxPoints, int[] pointsPerMinute, int[] requiredTime) {<br>        Problem[] p = new Problem[maxPoints.length];<br>        for (int i = 0; i &lt; p.length; ++i)<br>            p[i] = new Problem(maxPoints[i], pointsPerMinute[i], requiredTime[i]);<br>        Arrays.sort(p);<br>        int[] best = new int[T + 1];<br>        for (Problem prob : p) {<br>            for (int oldT = T - prob.requiredTime; oldT &gt;= 0; --oldT) {<br>                long thisScore = prob.maxPoints - (oldT + prob.requiredTime) * (long) prob.pointsPerMinute;<br>                if (thisScore &gt; 0) {<br>                    best[oldT + prob.requiredTime] = Math.max(best[oldT + prob.requiredTime], best[oldT] + (int) thisScore);<br>                }<br>            }<br>        }<br>    int res = 0;<br>        for (int x : best) res = Math.max(res, x);<br>    return res;<br>  }<br> <br>}<br> <br> <br>// Powered by FileEdit<br>// Powered by RETester [based on ExampleBuilder]<br>// Powered by CodeProcessor<br></td>