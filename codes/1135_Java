<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>import java.math.*;<br>import java.text.*;<br>public class Permutation {<br>    boolean debug = false;<br>    <br>    Set set = new HashSet(), seta = new HashSet(), setb = new HashSet();<br>    ArrayList al = new ArrayList(), ala = new ArrayList(), alb = new ArrayList();<br>    Hashtable ht = new Hashtable(), hta = new Hashtable(), htb = new Hashtable();<br>    StringTokenizer tok, toka, tokb;<br>    StringBuffer buf = new StringBuffer();<br>    <br>    final double PI = Math.PI, E = Math.E;<br>    int MAX = 1000 * 1000 * 1000, nil = -1;<br>    <br>    int [] pp;<br>    long best;<br>    <br>    public String best(int n) {<br>        <br>        best = 0;<br>        pp = new int [0];<br>        calc(0, n, 1, new int [100], 1);<br>        <br>        sout(pp);<br>        <br>        char c[] = new char [100];<br>        for (int i = 0; i &lt; 26; i ++) {<br>            c[i] = (char) (i + 'A');<br>            c[i + 26] = (char) (i + 'a');<br>        }<br>        <br>        int idx = 0;<br>        String res = "";<br>        for (int i = 0; i &lt; pp.length; i ++) {<br>            for (int j = 0; j &lt; pp[i] - 1; j ++) {<br>                res += c[idx + j + 1];<br>            }<br>            res += c[idx];<br>            idx += pp[i];<br>        }<br>        <br>        return res;<br>    } // end of method best<br>    <br>    void calc(int dep, int n, int from, int [] d, long mm) {<br>        if (n == 0) {<br>            if (mm &gt; best) {<br>                best = mm;<br>                pp = crop(d, dep);<br>            }<br>            return ;<br>        }<br>        <br>        for (int i = from; i &lt;= n; i ++) {<br>            d[dep] = i;<br>            calc(dep + 1, n - i, i, d, lcm(i, mm));<br>        }<br>    }<br>    <br>    long gcd(long a, long b) {<br>        a = Math.abs(a);<br>        b = Math.abs(b);<br>        if (a &lt; b) return gcd(b, a);<br>        if (b == 0) return a;<br>        return gcd(b, a%b);<br>    }<br>    long lcm(long a, long b) {<br>        return a/gcd(a,b)*b;<br>    }<br>    <br>    <br>    <br>    ////////////////////////////////////////////////////////<br>    /////////  Note: helper functions start here  //////////<br>    ////////////////////////////////////////////////////////<br>    <br>    void sout(int a) {<br>        if (!debug) return; System.out.println(a);<br>    }<br>    void sout(long a) {<br>        if (!debug) return; System.out.println(a);<br>    }<br>    void sout(char a) {<br>        if (!debug) return; System.out.println(a);<br>    }<br>    void sout(boolean a) {<br>        if (!debug) return; System.out.println(a);<br>    }<br>    void sout(double a) {<br>        if (!debug) return; System.out.println(a);<br>    }<br>    void sout(Object a) {<br>        if (!debug) return; System.out.println(a);<br>    }<br>    void sout(String [] a) {<br>        if (!debug) return;<br>        System.out.println("Array size = " + a.length);<br>        System.out.print("[");<br>        for (int i = 0; i &lt; a.length; i ++) System.out.println(a[i] + ",");<br>        System.out.println("]");<br>    }<br>    void sout(int [] a) {<br>        if (!debug) return;<br>        System.out.println("Array size = " + a.length);<br>        System.out.print("[");<br>        for (int i = 0; i &lt; a.length; i ++) System.out.print(a[i] + ",");<br>        System.out.println("]");<br>    }<br>    void sout(long [] a) {<br>        if (!debug) return;<br>        System.out.println("Array size = " + a.length);<br>        System.out.print("[");<br>        for (int i = 0; i &lt; a.length; i ++) System.out.print(a[i] + ",");<br>        System.out.println("]");<br>    }<br>    void sout(char [] a) {<br>        if (!debug) return;<br>        System.out.println("Array size = " + a.length);<br>        System.out.print("[");<br>        for (int i = 0; i &lt; a.length; i ++) System.out.print(a[i] + ",");<br>        System.out.println("]");<br>    }<br>    void sout(boolean [] a) {<br>        if (!debug) return;<br>        System.out.println("Array size = " + a.length);<br>        System.out.print("[");<br>        for (int i = 0; i &lt; a.length; i ++) System.out.print(a[i] + ",");<br>        System.out.println("]");<br>    }<br>    void sout(double [] a) {<br>        if (!debug) return;<br>        System.out.println("Array size = " + a.length);<br>        System.out.print("[");<br>        for (int i = 0; i &lt; a.length; i ++) System.out.print(a[i] + ",");<br>        System.out.println("]");<br>    }<br>    void sout(int [][] a) {<br>        if (!debug) return;<br>        System.out.println("Array size = " + a.length);<br>        System.out.print("[");<br>        for (int i = 0; i &lt; a.length; i ++) sout(a[i]);<br>        System.out.println("]");<br>    }<br>    // crop to size<br>    int [] crop(int [] in, int toSize) {<br>        int [] a = new int[toSize]; System.arraycopy(in, 0, a, 0, toSize); return a;<br>    }<br>    long [] crop(long [] in, int toSize) {<br>        long [] a = new long[toSize]; System.arraycopy(in, 0, a, 0, toSize); return a;<br>    }<br>    String [] crop(String [] in, int toSize) {<br>        String [] a = new String [toSize]; System.arraycopy(in, 0, a, 0, toSize); return a;<br>    }<br>    // copy array<br>    int [] copy(int [] in) { return crop(in, in.length); }<br>    long [] copy(long [] in) { return crop(in, in.length); }<br>    String [] copy(String [] in) { return crop(in, in.length); }<br>    // reverse array<br>    int [] reverse(int [] in) {<br>        int [] res = new int [in.length];<br>        for (int i = 0; i &lt; in.length; i ++ ) res[i] = in[in.length - 1 - i];<br>        return res;<br>    }<br>    long [] reverse(long [] in) {<br>        long [] res = new long [in.length];<br>        for (int i = 0; i &lt; in.length; i ++ ) res[i] = in[in.length - 1 - i];<br>        return res;<br>    }<br>    String [] reverse(String [] in) {<br>        String [] res = new String [in.length];<br>        for (int i = 0; i &lt; in.length; i ++ ) res[i] = in[in.length - 1 - i];<br>        return res;<br>    }<br>    <br>    Hashtable lookup = new Hashtable();<br>    int lookupIdx = 0;<br>    int indexOf(String in) {<br>        if (!lookup.containsKey(in)) {<br>            lookup.put(in, new Integer(lookupIdx));<br>            lookupIdx ++;<br>        }<br>        return ((Integer) lookup.get(in)).intValue();<br>    }<br>    <br>    ////////////////////////////////////////////////////////<br>    ///////////  Note: helper functions end here  //////////<br>    ////////////////////////////////////////////////////////<br>}<br> <br>// Powered by CodeProcessor<br></td>