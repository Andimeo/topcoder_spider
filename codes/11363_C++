<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cmath&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;queue&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;iostream&gt;<br>#include &lt;sstream&gt;<br>#include &lt;numeric&gt;<br>using namespace std;<br>typedef long long ll;<br>typedef pair&lt;int,int&gt; pii;<br>#define F0(i,n) for (i = 0; i &lt; n; i++)<br>#define F1(i,n) for (i = 1; i &lt;= n; i++)<br>#define SZ(x) ((int)x.size())<br>const double eps = 1e-8;<br>const double pi = acos(-1.0);<br>const int inf = 1000000009;<br>int i, j, k, m, n, l;<br>long long ans, cnt, r[10000];<br>vector&lt;string&gt; v;<br>vector&lt;int&gt; h;<br><br>void go(string s) {<br>  int i, j;<br>  F0(i,n) if (SZ(v[i]) &gt;= SZ(s)) {<br>    if (v[i] == s) return;<br>    for (j = 0; j &lt; SZ(s); j++)<br>      if (v[i][j] != s[j]) break;<br>    if (j == SZ(s)) break;<br>  }<br>  if (i == n)<br>    h.push_back( SZ(s) );<br>  else {<br>    go(s + "0");<br>    go(s + "1");<br>  }<br>}<br><br>struct PrefixFreeSuperset { <br>long long minSumLength(vector &lt;string&gt; cur, long long _k) {<br>  v = cur;<br>  n = SZ(v);<br>  cnt = _k;<br>  ans = 0;<br>  F0(i,n) ans += SZ(v[i]);<br><br>  if (cnt &lt;= n) return ans;<br>  h.clear();<br>  go("");<br>  <br>  if (h.empty()) return -1;<br>  memset(r, 0, sizeof(r));<br>  F0(i,SZ(h)) r[h[i]]++;<br><br>  cnt -= n;<br><br>  for (i = 0; 1; i++) {<br>    if (2*r[i] + r[i+1] &lt;= cnt) {<br>      r[i+1] += 2*r[i];<br>      r[i] = 0;<br>    } else {<br>      ll x = cnt - r[i] - r[i+1];<br>      if (x &lt; 0) x = 0;<br>      r[i] -= x;<br>      r[i+1] += x;<br>      ans += r[i] * i;<br>      cnt -= r[i];<br>      ans += cnt * (i+1);<br>      break;<br>    }<br>  }<br><br>  return ans;<br>}  <br> <br>}; <br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003]<br>// Powered by CodeProcessor<br></td>