<td class="problemText" colspan="8" valign="middle" align="left">
            import java.math.BigInteger;<br><br>/**<br> * Generated by Contest helper plug-in<br> * Actual solution is at the bottom<br> */<br>public class PrefixFreeSuperset {<br>  public long minSumLength(String[] cur, long k) {<br>    k -= cur.length;<br>    if (k == 0) {<br>      long base = 0;<br>      for (String s : cur)<br>        base += s.length();<br>      return base;<br>    }<br>    int[] lengths = new int[52];<br>    go(cur, lengths, "");<br>    boolean good = false;<br>    for (int length : lengths) {<br>      if (length != 0) {<br>        good = true;<br>      }<br>    }<br>    if (!good)<br>      return -1;<br>    long last = 0;<br>    for (int i = 0; ; i++) {<br>      long current = (last &lt;&lt; 1) + (i &lt; lengths.length ? lengths[i] : 0);<br>      if (current &gt;= k) {<br>        long excess = current - k;<br>        long lower = Math.min(last, excess);<br>        long base = 0;<br>        for (String s : cur)<br>          base += s.length();<br>        BigInteger result = BigInteger.valueOf(base);<br>        result = result.add(BigInteger.valueOf(k).multiply(BigInteger.valueOf(i)));<br>        result = result.subtract(BigInteger.valueOf(lower));<br>        if (result.compareTo(BigInteger.valueOf(1000000000000000000L)) &gt; 0)<br>          return -2;<br>        return result.longValue();<br>      }<br>      last = current;<br>    }<br>  }<br><br>  private void go(String[] cur, int[] lengths, String prefix) {<br>    for (String s : cur) {<br>      if (s.equals(prefix))<br>        return;<br>    }<br>    for (String s : cur) {<br>      if (s.startsWith(prefix)) {<br>        go(cur, lengths, prefix + "0");<br>        go(cur, lengths, prefix + "1");<br>        return;<br>      }<br>    }<br>    lengths[prefix.length()]++;<br>  }<br><br><br>}<br><br><br><br><br>// Powered by FileEdit<br>// Powered by moj 4.15 [modified TZTester]<br>// Powered by CodeProcessor<br></td>