<td class="problemText" colspan="8" valign="middle" align="left">
            #include "cfloat"<br>#include "cmath"<br>#include "cstdio"<br>#include "ctime"<br>#include "algorithm"<br>#include "map"<br>#include "numeric"<br>#include "queue"<br>#include "set"<br>#include "string"<br>#include "utility"<br>#include "vector"<br>#include "iostream"<br>using namespace std;<br>typedef long long i64;<br>const i64 MOD = 1000000009LL;<br><br>i64 memo[63][1 &lt;&lt; 10];<br>bool mark[63][1 &lt;&lt; 10];<br><br>struct YetAnotherORProblem {<br>  bool TestBit(i64 x, int bit) {<br>    return (x &amp; (1LL &lt;&lt; bit)) != 0;<br>  }<br>  int GetNewMask(const vector&lt;i64&gt;&amp; v, int bit, int mask, int one) {<br>    for (int i = 0; i &lt; (int)v.size(); ++i) {<br>      if (i == one) {<br>        const bool hasBit = TestBit(v[i], bit);<br>        if (!hasBit &amp;&amp; !(mask &amp; (1 &lt;&lt; i)))<br>          return -1;<br>      } else if (TestBit(v[i], bit)) {<br>        mask |= 1 &lt;&lt; i;<br>      }<br>    }<br>    return mask;<br>  }<br>  i64 f(const vector&lt;i64&gt;&amp; v, int bit, int mask) {<br>    if (bit &lt; 0) return 1;<br>    i64&amp; count = memo[bit][mask];<br>    if (mark[bit][mask]) return count;<br>    count = 0, mark[bit][mask] = true;<br>    for (int i = -1; i &lt; (int)v.size(); ++i) {<br>      const int nmask = GetNewMask(v, bit, mask, i);<br>      if (nmask != -1)<br>        (count += f(v, bit - 1, nmask)) %= MOD;<br>    }<br>    return count;<br>  }<br>  int countSequences(vector&lt;i64&gt; v) {<br>    memset(mark, false, sizeof(mark));<br>    return (int)f(v, 62, 0);<br>  }<br>};<br><br><br><br>// Powered by FileEdit<br>// Powered by moj 4.16 [modified TZTester]<br>// Powered by CodeProcessor<br></td>