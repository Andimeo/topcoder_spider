<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.Arrays;<br> <br>public class FoxAndFlowerShopDivOne {<br>  int maxDiff;<br> <br>  int solve(int[][][] num) {<br>    int n = num[0].length, m = num[0][0].length - 1;<br>    int BASE = n * m;<br>    int[][] maxBefore = new int[m + 1][2 * BASE + 1]; // diff -&gt; flowers<br>    int[][] maxAfter = new int[m + 1][2 * BASE + 1]; // diff -&gt; flowers<br>    for (int i = 0; i &lt;= m; ++i) {<br>      Arrays.fill(maxBefore[i], -1);<br>      Arrays.fill(maxAfter[i], -1);<br>    }<br>    int[] sum = new int[2];<br>    for (int i = 0; i &lt; n; ++i) {<br>      for (int j = 0; j &lt; m; ++j) {<br>        for (int w = 1; j + w - 1 &lt; m; ++w) {<br>          Arrays.fill(sum, 0);<br>          for (int h = 1; i + h - 1 &lt; n; ++h) {<br>            for (int k = 0; k &lt; 2; ++k) {<br>              sum[k] += num[k][i + h - 1][j + w]<br>                  - num[k][i + h - 1][j];<br>            }<br>            int diff = BASE + sum[0] - sum[1];<br>            for (int t = j + w; t &lt;= m; ++t) {<br>              maxBefore[t][diff] = Math.max(maxBefore[t][diff],<br>                  sum[0] + sum[1]);<br>            }<br>            for (int t = 0; t &lt;= j; ++t) {<br>              maxAfter[t][diff] = Math.max(maxAfter[t][diff],<br>                  sum[0] + sum[1]);<br>            }<br>          }<br>        }<br>      }<br>    }<br>    int ans = -1;<br>    for (int t = 0; t &lt;= m; ++t) {<br>      for (int d1 = 0; d1 &lt; 2 * BASE + 1; ++d1) {<br>        int a = maxBefore[t][d1];<br>        if (a == -1) {<br>          continue;<br>        }<br>        for (int d2 = 0; d2 &lt; 2 * BASE + 1; ++d2) {<br>          int d = (d1 - BASE) + (d2 - BASE);<br>          if (Math.abs(d) &gt; maxDiff) {<br>            continue;<br>          }<br>          int b = maxAfter[t][d2];<br>          if (b == -1) {<br>            continue;<br>          }<br>          ans = Math.max(ans, a + b);<br>        }<br>      }<br>    }<br>    return ans;<br>  }<br> <br>  public int theMaxFlowers(String[] flowers, int maxDiff) {<br>    int n = flowers.length;<br>    int m = flowers[0].length();<br>    this.maxDiff = maxDiff;<br>    int[][] map = new int[n][m];<br>    for (int i = 0; i &lt; n; ++i) {<br>      char[] s = flowers[i].toCharArray();<br>      for (int j = 0; j &lt; m; ++j) {<br>        if (s[j] == '.') {<br>          map[i][j] = -1;<br>        } else if (s[j] == 'L') {<br>          map[i][j] = 0;<br>        } else {<br>          map[i][j] = 1;<br>        }<br>      }<br>    }<br> <br>    int[][][] numRow = new int[2][n][m + 1];<br>    for (int i = 0; i &lt; n; ++i) {<br>      for (int j = 0; j &lt; m; ++j) {<br>        for (int k = 0; k &lt; 2; ++k) {<br>          numRow[k][i][j + 1] = numRow[k][i][j];<br>          if (map[i][j] == k) {<br>            numRow[k][i][j + 1]++;<br>          }<br>        }<br>      }<br>    }<br> <br>    int[][][] numCol = new int[2][m][n + 1];<br>    for (int i = 0; i &lt; m; ++i) {<br>      for (int j = 0; j &lt; n; ++j) {<br>        for (int k = 0; k &lt; 2; ++k) {<br>          numCol[k][i][j + 1] = numCol[k][i][j];<br>          if (map[j][i] == k) {<br>            numCol[k][i][j + 1]++;<br>          }<br>        }<br>      }<br>    }<br> <br>    return Math.max(solve(numRow), solve(numCol));<br>  }<br> <br>}<br> <br> <br> <br>// Powered by FileEdit<br>// Powered by moj 4.16 [modified TZTester]<br>// Powered by CodeProcessor<br></td>