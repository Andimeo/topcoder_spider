<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br><br>public class NENE<br>{<br>   int pi=512;<br>   String d[]=new String[2048];<br>   int c=4;<br>   <br>   void add(String s,int u)<br>   {<br>      if (d[u]!=null)<br>      {<br>         d[u]=d[u];<br>      }<br>      d[u]=s;<br>      c++;<br>   }<br>   <br>   int get(String s)<br>   {<br>      for (int i=0;i&lt;2048;i++)<br>      {<br>         if (d[i]==null)<br>            d[i]=null;<br>         if (d[i].equals(s)) return i;<br>      }<br>      return -1;<br>   }<br>   <br>   void doit(String d1,String d2,String s,int u1,int u2)<br>   {<br>      add(s,(u1+u2)/2);<br>      if (s.length()&lt;10)<br>      {<br>         doit(d1,d2,d1+s,u1,(u1+u2)/2);<br>         doit(d1,d2,d2+s,(u1+u2)/2,u2);<br>      }<br>   }<br>   <br>   public String vulnerable(String[] cw, String[] ccw)<br>   {<br>      d[0]="E"; d[512]="N"; d[1024]="W"; d[1024+512]="S";<br>      doit("E","N","NE",0,512);<br>      doit("W","N","NW",1024,512);<br>      doit("W","S","SW",1024,1024+512);<br>      doit("E","S","SE",2048,1024+512);<br>      <br>      int mark[]=new int[2048];<br>      <br>      for (int k=0;k&lt;cw.length;k++)<br>      {<br>         int i=get(cw[k]),j=get(ccw[k]);<br>         for (int l=i;l!=j;l=(l+1)%2048)<br>         {<br>            mark[l]=1;<br>         }<br>         mark[j]=1;<br>      }<br>      <br>      for (int i=1;i&lt;2049;i++)<br>         if (mark[i%2048]==0) return d[i%2048];<br>      <br>      return "SAFE";<br>   }<br><br>   //public static void main(String[] args)<br>   //{<br>   // NENE temp = new NENE();<br>   // System.out.println(temp.vulnerable(String[] cw, String[] ccw));<br>   //}<br><br>   public final static void main(String[] args)<br>   {<br>      try {<br>         validateExample("1", new NENE().vulnerable(new String[] {"E"},new String[] {"W"}), "WWWWWWWWSW", "vulnerable(new String[] {\"E\"},new String[] {\"W\"})");<br>         validateExample("2", new NENE().vulnerable(new String[] {"E","E","SE"},new String[] {"W","N","S"}), "SSSSSSSSSE", "vulnerable(new String[] {\"E\",\"E\",\"SE\"},new String[] {\"W\",\"N\",\"S\"})");<br>         validateExample("3", new NENE().vulnerable(new String[] {"E","WWWWWWWWSW"},new String[] {"W","NE"}), "SAFE", "vulnerable(new String[] {\"E\",\"WWWWWWWWSW\"},new String[] {\"W\",\"NE\"})");<br>         validateExample("4", new NENE().vulnerable(new String[] {"EEEENE","WNW","SSWWSW"},new String[] {"NNNNENEENE","WWNW","EEENE"}), "NEENE", "vulnerable(new String[] {\"EEEENE\",\"WNW\",\"SSWWSW\"},new String[] {\"NNNNENEENE\",\"WWNW\",\"EEENE\"})");<br>         validateExample("5", new NENE().vulnerable(new String[] {"EEEEEEEENE","W"},new String[] {"WWWWWWWWNW","EEEEEEEESE"}), "E", "vulnerable(new String[] {\"EEEEEEEENE\",\"W\"},new String[] {\"WWWWWWWWNW\",\"EEEEEEEESE\"})");<br>         validateExample("6", new NENE().vulnerable(new String[] {"W"},new String[] {"S"}), "EEEEEEEENE", "vulnerable(new String[] {\"W\"},new String[] {\"S\"})");<br>      } catch (Exception e) {<br>         System.out.println(e);<br>         e.printStackTrace(System.out);<br>      }<br>   }<br><br>   private static void validateExample(String exampleNum, String returned, String expected, String methodInvocation) {<br>      print(exampleNum);<br>      print("  ");<br>      if (!eq(returned,expected)) {<br>         print("FAIL");<br>      } else {<br>         print("SUCCESS");<br>      }<br>      print(" ");<br>      print(methodInvocation);<br>      print("\tGot:[");<br>      print(returned);<br>      print("]\t");<br>      print("Expected:[");<br>      print(expected);<br>      print("]");<br>      print("\n");<br>   }<br><br>   public static void print(boolean a) {<br>      System.out.print(a);<br>   }<br><br>   public static void print(long a) {<br>      System.out.print(a);<br>   }<br><br>   public static void print(int a) {<br>      System.out.print(a);<br>   }<br><br>   public static void print(char a) {<br>      System.out.print(a);<br>   }<br><br>   public static void print(String a) {<br>      System.out.print(a);<br>   }<br><br>   public static void print(int[] a) {<br>      if (a==null) {System.out.print("null"); return;}<br>      for (int i=0; i&lt;a.length; i++) System.out.print(a[i]+(i&lt;a.length-1?",":""));<br>   }<br><br>   public static void print(int[][] a) {<br>      if (a==null) {System.out.print("null"); return;}<br>      for (int i=0; i&lt;a.length; i++) { print(a[i]); print("\n"); }<br>   }<br><br>   public static void print(String[] a) {<br>      if (a==null) {System.out.print("null"); return;}<br>      for (int i=0; i&lt;a.length; i++) System.out.print(a[i]+(i&lt;a.length-1?",":""));<br>   }<br><br>   public static boolean eq(boolean a, boolean b) {<br>      return a==b;<br>   }<br><br>   public static boolean eq(long a, long b) {<br>      return a==b;<br>   }<br><br>   public static boolean eq(int a, int b) {<br>      return a==b;<br>   }<br><br>   public static boolean eq(char a, char b) {<br>      return a==b;<br>   }<br><br>   public static boolean eq(String a, String b) {<br>      return a.equals(b);<br>   }<br><br>   public static boolean eq(int[] a, int[] b) { return Arrays.equals(a,b); }<br>   public static boolean eq(String[] a, String[] b) { return Arrays.equals(a,b); }<br><br>}<br> <br>// Powered by CodeProcessor<br></td>