<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections;<br>using System.Collections.Generic;<br>using System.Text;<br><br>public class SetMultiples {<br><br>    class P<br>    {<br>        public long a, b;<br><br>        public P(long _a, long _b)<br>        {<br>            a = _a;<br>            b = _b;<br>        }<br><br>        public List&lt;P&gt; sub(long suba, long subb)<br>        {<br>            List&lt;P&gt; res = new List&lt;P&gt;();<br>            if (suba &lt;= a &amp;&amp; subb &gt;= b) return res;<br>            if (suba &gt;= a)<br>            {<br>                if (suba &gt; b)<br>                {<br>                    res.Add(new P(a, b));<br>                    return res;<br>                }<br>                else<br>                {<br>                    P temp1 = new P(a, suba - 1);<br>                    if (temp1.ok()) res.Add(temp1);<br>                    P temp2 = new P(subb + 1, b);<br>                    if (temp2.ok()) res.Add(temp2);<br>                    //Console.WriteLine("a");<br>                    //foreach (P p in res) Console.WriteLine(p.a + " " + p.b);<br>                    //Console.WriteLine("b");<br>                    return res;<br>                }<br>            }<br>            else<br>            {<br>                if (a &gt; subb)<br>                {<br>                    res.Add(new P(a, b));<br>                    return res;<br>                }<br>                else<br>                {<br>                    P temp1 = new P(subb + 1, b);<br>                    if (temp1.ok()) res.Add(temp1);<br>                    return res;<br>                }<br>            }<br>        }<br><br>        public bool ok()<br>        {<br>            return b &gt;= a;<br>        }<br>    }<br>    <br>    public long smallestSubset(long A, long B, long C, long D)<br>    {<br>        int i;<br>        long count = 0;<br>        for (i = 2; i &lt;= 10000000; i++)<br>        {<br>            if ((A &lt;= i &amp;&amp; i &lt;= B) || (C &lt;= i &amp;&amp; i &lt;= D))<br>            {<br>                if (A &lt;= i) A = i + 1;<br>                if (C &lt;= i) C = i + 1;<br>                if ((A / i &gt;= B / i) &amp;&amp; (A % i != 0) &amp;&amp; (C / i &gt;= D / i) &amp;&amp; (C % i != 0)) count++;<br>            }<br>            if (A &lt;= i) A = i + 1;<br>            if (C &lt;= i) C = i + 1;<br>        }<br>        List&lt;P&gt; l = new List&lt;P&gt;();<br>        if (A &lt;= B) l.Add(new P(A, B));<br>        if (C &lt;= D) l.Add(new P(C, D));<br><br>        for (i = 2; i &lt;= 1002; i++)<br>        {<br>            long minA = (A + i - 1) / i;<br>            long minB = B / i;<br>            long minC = (C + i - 1) / i;<br>            long minD = D / i;<br>            List&lt;P&gt; nl = new List&lt;P&gt;();<br>            foreach (P p in l)<br>            {<br>                List&lt;P&gt; nnl = p.sub(minA, minB);<br>                foreach (P pp in nnl) nl.Add(pp);<br>            }<br>            l.Clear();<br>            foreach (P p in nl) l.Add(p);<br>            nl.Clear();<br><br>            nl = new List&lt;P&gt;();<br><br>            foreach (P p in l)<br>            {<br>                List&lt;P&gt; nnl = p.sub(minC, minD);<br>                foreach (P pp in nnl) nl.Add(pp);<br>            }<br>            l.Clear();<br>            foreach (P p in nl) l.Add(p);<br>            nl.Clear();<br>        }<br><br>        foreach (P p in l)<br>        {<br>            //Console.WriteLine(p.a + " " + p.b);<br>            count += Math.Max(0, p.b - p.a + 1);<br>        }<br><br><br>        return count;<br>    }<br><br><br><br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003] [modified for C# by Petr]<br>// Powered by CodeProcessor<br></td>