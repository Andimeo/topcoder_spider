<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections;<br>using System.Collections.Generic;<br>using System.Text;<br><br>public class RectangleArea {<br>    int m, n;<br>    public int minimumQueries(string[] known)<br>    {<br>        m = known.Length;<br>        n = known[0].Length;<br>        Queue&lt;int&gt; q = new Queue&lt;int&gt;();<br>        bool[,] board = new bool[m, n];<br>        int i, j = 0;<br>        for (i = 0; i &lt; m; i++)<br>        {<br>            for (j = 0; j &lt; n; j++)<br>            {<br>                if (known[i][j] == 'Y')<br>                {<br>                    q.Enqueue(i * 50 + j);<br>                    board[i, j] = true;<br>                }<br>                else board[i, j] = false;<br>            }<br>        }<br>        int count = 0;<br>        while (true)<br>        {<br>            while (q.Count != 0)<br>            {<br>                int next = q.Dequeue();<br>                int nexti = next / 50;<br>                int nextj = next % 50;<br>                for (i = 0; i &lt; m; i++)<br>                {<br>                    for (j = 0; j &lt; n; j++)<br>                    {<br>                        int now = 1;<br>                        if (board[i, nextj]) now++;<br>                        if (board[nexti, j]) now++;<br>                        if (board[i, j]) now++;<br>                        if (now == 3)<br>                        {<br>                            int ni = i, nj = j;<br>                            if (!board[i, nextj]) { ni = i; nj = nextj; }<br>                            else if (!board[nexti, j]) { ni = nexti; nj = j; }<br>                            board[ni, nj] = true;<br>                            q.Enqueue(ni * 50 + nj);<br>                        }<br>                    }<br>                }<br>            }<br>            for (i = 0; i &lt; m; i++)<br>            {<br>                for (j = 0; j &lt; n; j++)<br>                {<br>                    if (!board[i, j])<br>                    {<br>                        break;<br>                    }<br>                }<br>                if (j != n) break;<br>            }<br>            if (i == m) break;<br>            count++;<br>            q.Enqueue(i * 50 + j);<br>            board[i, j] = true;<br>        }<br>        return count;<br>    }<br><br><br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003] [modified for C# by Petr]<br>// Powered by CodeProcessor<br></td>