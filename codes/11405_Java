<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>import java.util.regex.*;<br>import java.text.*;<br>import java.math.*;<br>import java.awt.geom.*;<br> <br>public class PerfectSequences2<br>{<br>final int MAXSUM = 100;<br>    final long INF = 1000000000000L;<br>public long minimumMoves(int[] seq) {<br>        int n = seq.length;<br>        long sum = 0;<br>        long ans = INF;<br>        for (int i = 0; i &lt; n; i++)<br>            sum += seq[i];<br>        for (int i = 0; i &lt; n; i++)<br>            ans = Math.min(ans, Math.abs(seq[i]) + Math.abs(sum - seq[i]));<br> <br>        if (n%4==1)<br>        for (int i = 0; i &lt; n; i++) {<br>            long[][] d = new long[2][n * 2 + 1];<br>            Arrays.fill(d[0], INF);<br>            int step = 0;<br>            d[0][n] = 0;<br>            for (int j = 0; j &lt; n; j++) {<br>                if (j == i)<br>                    continue;<br>                Arrays.fill(d[step ^ 1], INF);<br>                for (int k = -n; k &lt;= n; k++) {<br>                    d[step ^ 1][k + n] = INF;<br>                    if (k != -n)<br>                        d[step ^ 1][k + n] = Math.min(d[step ^ 1][k + n],<br>                                d[step][k + n - 1] + Math.abs(1 - seq[j]));<br>                    if (k != n)<br>                        d[step ^ 1][k + n] = Math.min(d[step ^ 1][k + n],<br>                                d[step][k + n + 1] + Math.abs(-1 - seq[j]));<br>                }<br>                step ^= 1;<br>            }<br>            ans = Math.min(ans, d[step][n]);<br>        }<br> <br>        int MAX2 = 2 * MAXSUM + 2;<br>        long[][][] d = new long[2][MAX2][MAX2];<br>        for (int i = 0; i &lt; d[0].length; i++)<br>            Arrays.fill(d[0][i], INF);<br>        d[0][MAXSUM][MAXSUM+1] = 0;<br>        int step = 0;<br>        for (int i = 0; i &lt; n; i++) {<br>            for (int j = 0; j &lt; MAX2; j++)<br>                Arrays.fill(d[step ^ 1][j], INF);<br>            for (int c1 = 0; c1 &lt; MAX2; c1++)<br>                for (int c2 = 0; c2 &lt; MAX2; c2++) {<br>                    if (d[step][c1][c2] == INF)<br>                        continue;<br>                    int s1 = c1 - MAXSUM, s2 = c2 - MAXSUM;<br>                    for (int j = -MAXSUM; j &lt;= MAXSUM; j++) {<br>                        int m1 = s1 + j, m2 = s2 * j;<br>                        if (m1 &gt;= -MAXSUM &amp;&amp; m1 &lt;= MAXSUM &amp;&amp; m2 &gt;= -MAXSUM<br>                                &amp;&amp; m2 &lt;= MAXSUM) {<br>                            m1 += MAXSUM;<br>                            m2 += MAXSUM;<br>                            d[step ^ 1][m1][m2] = Math.min(d[step ^ 1][m1][m2],<br>                                    d[step][c1][c2] + Math.abs(j - seq[i]));<br>                        }<br>                    }<br>                }<br>            step ^= 1;<br>        }<br>        for (int c1 = 0; c1 &lt; MAX2; c1++)<br>            ans = Math.min(ans, d[step][c1][c1]);<br>        return ans;<br>    }<br>  <br>  <br>}<br>//Powered by [KawigiEdit] 2.0!<br></td>