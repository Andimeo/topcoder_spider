<td class="problemText" colspan="8" valign="middle" align="left">
            import java.math.BigInteger;<br>import java.util.*;<br>import java.util.logging.Filter;<br> <br>public class STable {<br>    long hashBase;<br> <br>    static interface SuperString {<br>        long length();<br>        char charAt(long index);<br>        long prefixHash(long len);<br>    }<br> <br>    class FixedString implements SuperString {<br>        String s;<br> <br>        FixedString(String s) {<br>            this.s = s;<br>        }<br> <br>        public long length() {<br>            return s.length();<br>        }<br> <br>        public char charAt(long index) {<br>            return s.charAt((int) index);<br>        }<br> <br>        public long prefixHash(long len) {<br>            long res = 0;<br>            long pw = 1;<br>            for (int i = 0; i &lt; len; ++i) {<br>                res += s.charAt(i) * pw;<br>                pw *= hashBase;<br>            }<br>            return res;<br>        }<br>    }<br> <br>    long hashPow(long k) {<br>        if (k == 0) return 1;<br>        if (k % 2 == 0) {<br>            long p = hashPow(k / 2);<br>            return p * p;<br>        } else {<br>            return hashBase * hashPow(k - 1);<br>        }<br>    }<br> <br>    class Concatenation implements SuperString {<br>        SuperString first;<br>        SuperString second;<br>        long firstLength;<br>        long secondLength;<br>        long firstHashPow;<br>        long firstFullHash;<br> <br>        Concatenation(SuperString first, SuperString second) {<br>            this.first = first;<br>            this.second = second;<br>            firstLength = first.length();<br>            secondLength = second.length();<br>            firstFullHash = first.prefixHash(firstLength);<br>            firstHashPow = hashPow(firstLength);<br>        }<br> <br>        public long length() {<br>            return firstLength + secondLength;<br>        }<br> <br>        public char charAt(long index) {<br>            if (index &lt; firstLength)<br>                return first.charAt(index);<br>            else<br>                return second.charAt(index - firstLength);<br>        }<br> <br>        public long prefixHash(long len) {<br>            if (len &lt;= firstLength) {<br>                return first.prefixHash(len);<br>            } else {<br>                return firstFullHash + firstHashPow * second.prefixHash(len - firstLength);<br>            }<br>        }<br>    }<br> <br>    int compare(SuperString a, SuperString b) {<br>        long left = 0;<br>        long right = Math.min(a.length(), b.length()) + 1;<br>        while (right - left &gt; 1) {<br>            long middle = (left + right) / 2;<br>            if (a.prefixHash(middle) == b.prefixHash(middle)) {<br>                left = middle;<br>            } else {<br>                right = middle;<br>            }<br>        }<br>        if (left == a.length() &amp;&amp; left == b.length())<br>            return 0;<br>        if (left == a.length())<br>            return -1;<br>        if (left == b.length())<br>            return 1;<br>        char ch1 = a.charAt(left);<br>        char ch2 = b.charAt(left);<br>        if (ch1 &lt; ch2)<br>            return -1;<br>        else if (ch1 &gt; ch2)<br>            return 1;<br>        else<br>            throw new RuntimeException();<br>    }<br> <br>  public String getString(String s, String t, long pos) {<br>        hashBase = (System.currentTimeMillis() + 313717) % 1000000 + 200000;<br>        while (!BigInteger.valueOf(hashBase).isProbablePrime(100)) ++hashBase;<br>        SuperString[][] table = new SuperString[s.length() + 1][t.length() + 1];<br>        for (int i = 0; i &lt; s.length(); ++i) {<br>            table[i + 1][0] = new FixedString("" + s.charAt(i));<br>        }<br>        for (int i = 0; i &lt; t.length(); ++i) {<br>            table[0][i + 1] = new FixedString("" + t.charAt(i));<br>        }<br>        for (int i = 1; i &lt;= s.length(); ++i)<br>            for (int j = 1; j &lt;= t.length(); ++j) {<br>                SuperString a = table[i - 1][j];<br>                SuperString b = table[i][j - 1];<br>                if (compare(a, b) &lt; 0) {<br>                    table[i][j] = new Concatenation(a, b);<br>                } else {<br>                    table[i][j] = new Concatenation(b, a);<br>                }<br>            }<br>        SuperString fin = table[s.length()][t.length()];<br>    String res = "";<br>        for (long at = pos; at &lt; pos + 50 &amp;&amp; at &lt; fin.length(); ++at) {<br>            res += fin.charAt(at);<br>        }<br>    return res;<br>  }<br> <br>}<br> <br> <br>// Powered by FileEdit<br>// Powered by RETester [based on ExampleBuilder]<br>// Powered by CodeProcessor<br></td>