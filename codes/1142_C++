<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;algorithm&gt;<br>#include &lt;math.h&gt;<br>#include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;iostream&gt;<br>using namespace std;<br> <br>class Tether {<br>public:<br>  double dist(double arg1, double arg2) {<br>    double diff = arg1-arg2;<br>    while (diff &lt; 0)<br>      diff += 2*M_PI;<br>    while (diff &gt;= 2*M_PI)<br>      diff -= 2*M_PI;<br>    return min(diff, 2*M_PI-diff);<br>  }<br> <br>  double equal(double x, double y) {<br>    return fabs(x-y) &lt; 1e-4;<br>  }<br>  <br>  int deadTrees(int rop, int radius, vector &lt;int&gt; x, vector &lt;int&gt; y) {<br>    int ret = 0;<br>    double R = radius;<br>    double MAX = rop;<br>    double pole = -M_PI/2;<br> <br>    for (int k = 0; k &lt; x.size(); k++) {<br>      double X = x[k];<br>      double Y = y[k];<br>      double D = sqrt(X*X + Y*Y);<br>      double t = sqrt(X*X + Y*Y - R*R);<br>      double dir = atan2(-Y, -X);<br>      double theta = asin(R/D);<br>      double x1 = X + t*cos(dir + theta);<br>      double y1 = Y + t*sin(dir + theta);<br>      double x2 = X + t*cos(dir - theta);<br>      double y2 = Y + t*sin(dir - theta);<br>      double x3 = X * R/D;<br>      double y3 = Y * R/D;<br>      // verify:<br>      if (fabs(x1*x1 + y1*y1 - R*R) &gt; 1e-5)<br>  cout &lt;&lt; "error1: " &lt;&lt; x1 &lt;&lt; ":" &lt;&lt;y1 &lt;&lt; endl;<br>      if (fabs(x2*x2 + y2*y2 - R*R) &gt; 1e-5)<br>  cout &lt;&lt; "error2" &lt;&lt; endl;<br>      if (fabs(x3*x3 + y3*y3 - R*R) &gt; 1e-5)<br>  cout &lt;&lt; "error3: " &lt;&lt; x3 &lt;&lt; ":" &lt;&lt; y3 &lt;&lt; endl;<br> <br>      double d1 = atan2(y1, x1);<br>      double d2 = atan2(y2, x2);<br>      if (equal(dist(d1, pole) + dist(pole, d2), dist(d1, d2))) {<br>  int xx = x[k];<br>  int yy = y[k];<br>  if (xx*xx + (yy+radius)*(yy+radius) &lt;= rop*rop)<br>    ret++;<br>      }<br>      else {<br>  double mydist = t + R*min(dist(d1, pole), dist(d2, pole));<br>  if (mydist+1e-10 &lt;= MAX)<br>    ret++;<br>      }<br>    }<br>    return ret;<br>  }<br>};<br> <br> <br> <br>// #include "cppio.h"<br> <br>// int main(void) {<br>//   CppInput i("Tether.in", "iiII");<br>//   Tether x;<br> <br>//   int ret = x.deadTrees(i.ints[0], i.ints[1], i.intArrays[0], i.intArrays[1]);<br> <br>//   cout &lt;&lt; "ret: " &lt;&lt; ret &lt;&lt; endl;<br>//   return 0;<br>// }<br> <br> <br>// Powered by FileEdit<br></td>