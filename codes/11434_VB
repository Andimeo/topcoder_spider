<td class="problemText" colspan="8" valign="middle" align="left">
            Imports Microsoft.VisualBasic<br>Imports System<br>Imports System.Collections<br>Imports System.Collections.Generic<br>Imports System.Text<br>Imports System.Math<br>Imports Weight = System.Int32<br>Public Class DivideAndShift<br>    Public Shared Function Eratosthenes_Sieve(ByVal N As Integer) As Boolean()<br>        Eratosthenes_Sieve = New Boolean(N) {}<br>        Dim Res As Boolean() = Eratosthenes_Sieve, i As Integer, j As Integer, m As Integer = CInt(Math.Floor(Math.Sqrt(N) + 0.000000001))<br>        Res(0) = False : Res(1) = False : Res(2) = True<br>        For i = 3 To N Step 2<br>            If i &lt;= m And Res(i) = False Then<br>                For j = i * 3 To N Step i * 2<br>                    Res(j) = True<br>                Next j<br>            End If<br>            Res(i) = Not Res(i)<br>        Next i<br>    End Function<br>    Public Shared Function Prime_List(ByVal N As Integer) As Generic.List(Of Integer)<br>        Prime_List = Prime_List(Eratosthenes_Sieve(N))<br>    End Function<br>    Public Shared Function Prime_List(ByRef Is_Prime As Boolean()) As Generic.List(Of Integer)<br>        Prime_List = New Generic.List(Of Integer)<br>        For i As Integer = 2 To Ubound(Is_Prime)<br>            If Is_Prime(i) Then Prime_List.Add(i)<br>        Next<br>    End Function<br>    'N[\u23064] M[\u30058][\u30446]<br>    '<br>    Public Const INF As Integer = 999999999<br>    Public PrimeList As List(Of Integer)<br>    Public Accessed(1000000) As Boolean<br>    Public Function Dfs(ByVal N As Integer, ByVal M As Integer) As Integer<br>        Dfs = INF<br>        If Accessed(N) = 0 Then<br>            Accessed(N) = True<br>            Dfs = Min(Dfs, PreSolve(N, M))<br>            For i As Integer= 0 To PrimeList.Count - 1<br>                If (N Mod PrimeList(i)) Then Continue For<br>                Dfs = Min(Dfs, 1 + Dfs(N / PrimeList(i), M Mod N / PrimeList(i)))<br>            Next<br>        End If<br>    End Function<br>    Public Shared Function PreSolve(ByVal N As Integer, ByVal M As Integer) As Integer<br>        M = (M + N - 1) Mod N<br> <br>        PreSolve = Min(M, N - M)<br>    End Function<br>    Public Function getLeast(ByVal N As Integer, ByVal M As Integer) As Integer<br>        Dim i As Integer, j As Integer<br>        PrimeList = Prime_List(N+1000)<br> <br>        For i = 0 To 1000000<br>            Accessed(i) = False<br>        Next<br>        Return Dfs(N, M)<br>    End Function<br> <br>End Class<br></td>