<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections;<br>using System.Collections.Generic;<br>using System.Collections.Specialized;<br>using System.Text;<br>using System.Text.RegularExpressions;<br> <br> <br>public class ArtShift<br>{<br>  public int maxShifts(string sequence)<br>  {<br>        int N = sequence.Length;<br>        int M = 0;<br>        for (int i = 0; i &lt; N; i++)<br>        {<br>            if (sequence[i] == 'B') M++;<br>        }<br>        if (M + M &gt; N) M = N - M;<br>        if (M == 0) return 1;<br>        if (M == 1) return N;<br>        mem = new Dictionary&lt;long, long&gt;();<br>        long ret = longestCycle(1, M, N);<br>        return (int)ret;<br>  }<br> <br>    Dictionary&lt;long, long&gt; mem;<br>    private long longestCycle(long length, int remainingM, int remainAll)<br>    {<br>        if (remainAll &lt;= 1) return length;<br>        if (remainingM == 0) return length;<br>        long hash = (length &lt;&lt; 32) + (remainingM&lt;&lt;8)+remainAll;<br>        if (mem.ContainsKey(hash))<br>        {<br>            return mem[hash];<br>        }<br> <br>        long max = 0;<br>        for (int i = 1; i &lt;= remainAll; i++)<br>        {<br>            long cyc = (long)length * i;<br>            cyc /= gcd(length, i);<br>            long ret = longestCycle(cyc, remainingM - 1, remainAll - i);<br>            if (ret &gt; max) max = ret;<br>        }<br>        mem[hash] = max;<br>        return max;<br> <br>    }<br> <br>    private long gcd(long a, long b)<br>    {<br>        if (a &lt; 0) return gcd(-a, b);<br>        if (b &lt; 0) return gcd(a, -b);<br>        if (b &lt; a) return gcd(b, a);<br>        if (a == 0) return b;<br>        return gcd(b % a, a);<br>    }<br> <br> <br>}<br>//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!<br></td>