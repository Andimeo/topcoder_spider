<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections;<br>using System.Collections.Generic;<br>using System.Collections.Specialized;<br>using System.Text;<br>using System.Text.RegularExpressions;<br> <br> <br>public class PalindromizationDiv1<br>{<br>    int[,] a;<br>    int[,] change;<br>    int alp = 26;<br>    int[] del;<br>    int[] add;<br>    int inf = 300000000;<br>    string w;<br>    public int getMinimumCost(string _w, string[] p)<br>    {<br>        w = _w;<br>        int n = w.Length;<br>        a = new int[n + 1, n + 1];<br>        add = new int[alp];<br>        del = new int[alp];<br>        change = new int[alp, alp];<br>        for (int i = 0; i &lt; alp; i++)<br>        {<br>            add[i] = inf;<br>            del[i] = inf;<br>            for (int j = 0; j &lt; alp; j++)<br>            {<br>                change[i, j] = inf;<br>            }<br>            change[i, i] = 0;<br>        }<br>        for (int i = 0; i &lt; p.Length; i++)<br>        {<br>            string[] ss = p[i].Split(' ');<br>            if (ss[0] == "erase")<br>            {<br>                del[ss[1][0] - 'a'] = int.Parse(ss[2]);<br>            }<br>            else if (ss[0] == "add")<br>            {<br>                add[ss[1][0] - 'a'] = int.Parse(ss[2]);<br>            }<br>            else<br>            {<br>                change[ss[1][0] - 'a', ss[2][0] - 'a'] = int.Parse(ss[3]);<br>            }<br>        }<br>        for (int k = 0; k &lt; alp; k++)<br>        {<br>            for (int i = 0; i &lt; alp; i++)<br>            {<br>                for (int j = 0; j &lt; alp; j++)<br>                {<br>                    if (change[i, k] + change[k, j] &lt; change[i, j])<br>                    {<br>                        change[i, j] = change[i, k] + change[k, j];<br>                    }<br>                }<br>            }<br>        }<br>        for (int i = 0; i &lt; alp; i++)<br>        {<br>            for (int j = 0; j &lt; alp; j++)<br>            {<br>                if (add[j] + change[j, i] &lt; add[i])<br>                    add[i] = add[j] + change[j, i];<br>                if (change[i, j] + del[j] &lt; del[i])<br>                    del[i] = change[i, j] + del[j];<br>            }<br>        }<br>        for (int i = 0; i &lt;= n; i++)<br>        {<br>            for (int j = 0; j &lt;= n; j++)<br>            {<br>                a[i, j] = inf + 1;<br>            }<br>        }<br>        int v = calc(0, n);<br>        if (v &gt;= inf)<br>            return -1;<br>        return v;<br>    }<br> <br>    int calc(int st, int ed)<br>    {<br>        if (a[st, ed] &lt; inf + 1)<br>            return a[st, ed];<br>        if (st == ed || st == ed - 1)<br>            return a[st, ed] = 0;<br>        int ret = inf;<br>        for (int c = 0; c &lt; alp; c++)<br>        {<br>            int cst = w[st] - 'a';<br>            int ced = w[ed - 1] - 'a';<br>            int c1 = change[cst, c] + change[ced, c] + calc(st + 1, ed - 1);<br>            int c2 = Math.Min(change[cst, c] + add[c], del[cst]) + calc(st + 1, ed);<br>            int c3 = Math.Min(change[ced, c] + add[c], del[ced]) + calc(st, ed - 1);<br>            ret = Math.Min(Math.Min(c3, ret), Math.Min(c1, c2));<br>        }<br>        return a[st, ed] = ret;<br>    }<br> <br>}<br>//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!<br></td>