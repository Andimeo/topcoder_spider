<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;cstdio&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;ctime&gt;<br>#include &lt;cctype&gt;<br>#include &lt;cmath&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;utility&gt;<br> <br>#include &lt;set&gt;<br>#include &lt;map&gt;<br>#include &lt;vector&gt;<br>#include &lt;string&gt;<br>#include &lt;queue&gt;<br>#include &lt;memory.h&gt;<br> <br>#include &lt;iostream&gt;<br>#include &lt;sstream&gt;<br> <br>using namespace std;<br> <br>typedef long long int64;<br> <br>#define forn(i, n) for(int i = 0; i &lt; (int)(n); i++)<br>#define ford(i, n) for(int i = (int)(n) - 1; i &gt;= 0; i--)<br>#define pb push_back<br>#define mp make_pair<br>#define X first<br>#define Y second<br>#define y1 YYYYYYYYYYYY1<br>#define all(a) a.begin(), a.end()<br>#define abs(x) (((x) &gt;= 0) ? (x) : (-(x)))<br> <br>const int INF = (int)1E9;<br>const int64 INF64 = (int64)1E18;<br>const long double EPS = 1E-9;<br>const long double PI = 3.1415926535897932384626433832795;<br> <br>class PalindromizationDiv1 {<br>public:<br>  int getMinimumCost(string, vector &lt;string&gt;);<br>};<br> <br>string s;<br>int64 del[40], add[40], g[40][40], d[100][100];<br> <br>int64 solve(int l, int r) {<br>  if (l &gt;= r) return 0;<br> <br>  int64 &amp;ans = d[l][r];<br>  if (ans != -1) return ans;<br> <br>  int cl = s[l] - 'a', cr = s[r] - 'a';<br> <br>  ans = INF;<br>  ans = min(ans, del[cl] + solve(l + 1, r));<br>  ans = min(ans, del[cr] + solve(l, r - 1));<br>  forn(c, 26) {<br>    ans = min(ans, g[cl][c] + solve(l + 1, r - 1) + g[cr][c]);<br>    ans = min(ans, add[c] + solve(l, r - 1) + g[cr][c]);<br>    ans = min(ans, g[cl][c] + solve(l + 1, r) + add[c]);<br>  }<br> <br>  return ans;<br>}<br> <br>int PalindromizationDiv1::getMinimumCost(string word, vector &lt;string&gt; a) {<br>  s = word;<br>  memset(del, 60, sizeof del);<br>  memset(add, 60, sizeof add);<br>  memset(g, 60, sizeof g);<br> <br>  forn(i, a.size()) {<br>    stringstream st;<br>    st &lt;&lt; a[i];<br> <br>    string op;<br>    st &gt;&gt; op;<br>    if (op == "add") {<br>      int x;<br>      char c;<br>      st &gt;&gt; c &gt;&gt; x;<br>      add[c - 'a'] = x;<br>    }<br> <br>    if (op == "erase") {<br>      int x;<br>      char c;<br>      st &gt;&gt; c &gt;&gt; x;<br>      del[c - 'a'] = x;<br>    }<br> <br>    if (op == "change") {<br>      int x;<br>      char c1, c2;<br>      st &gt;&gt; c1 &gt;&gt; c2 &gt;&gt; x;<br>      g[c1 - 'a'][c2 - 'a'] = x;<br>    }<br>  }<br>  forn(i, 26) g[i][i] = 0;<br>  forn(k, 26)<br>    forn(i, 26)<br>      forn(j, 26)<br>        g[i][j] = min(g[i][j], g[i][k] + g[k][j]);<br> <br>  forn(i, 26)<br>    forn(j, 26) {<br>      del[i] = min(del[i], g[i][j] + del[j]);<br>      add[i] = min(add[i], add[j] + g[j][i]);<br>    }<br> <br>  memset(d, 255, sizeof d);<br>  int64 ans = solve(0, (int)s.size() - 1);<br>  if (ans &gt; INF/2) ans = -1;<br>  return ans;<br>}<br></td>