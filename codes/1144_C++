<td class="problemText" colspan="8" valign="middle" align="left">
            /****************************  http://www.thisisjeff.com/  ****************************/<br> <br>#include &lt;algorithm&gt;<br>#include &lt;bitset&gt;<br>#include &lt;cmath&gt;<br>#include &lt;deque&gt;<br>#include &lt;iostream&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;sstream&gt;<br>#include &lt;stdarg.h&gt;<br>#include &lt;string&gt;<br>#include &lt;vector&gt;<br>using namespace std;<br> <br>int strToInt(string); string intToStr(int);<br>vector&lt;string&gt; tokenize(string str, string = " ", bool = false);<br>template &lt;class T&gt; ostream &amp;operator &lt;&lt; (ostream &amp;out, const vector&lt;T&gt; &amp;a);<br>vector&lt;int&gt; mkvecint(int n, ...); vector&lt;string&gt; mkvecstring(int n, ...);<br>void validateExample(string, int, int, string);<br> <br>/**************************************************************************************/<br>/**************************** Here is where my code begins. ***************************/<br>/**************************************************************************************/<br> <br>long long MyCode(int n, int k) {<br>  if (k &lt; 1) return n;<br>  long long answer(n);<br>  long long recurse(MyCode(n, k - 5));<br>  if (recurse == -1) return -1;<br>  answer += k * recurse;<br>  return answer &gt; 10000000 ? -1 : answer;<br>}<br> <br>/**************************************************************************************/<br>/**************** And here is where my code ends.  Thanks for looking! ****************/<br>/**************************************************************************************/<br> <br>struct FleasFleas {<br>  int population(int n, int k) {<br>    validateExample("1", MyCode(30,7), 660, "population(30,7)");<br>    validateExample("2", MyCode(100,3), 400, "population(100,3)");<br>    validateExample("3", MyCode(100,100), -1, "population(100,100)");<br>    validateExample("4", MyCode(50,15), 45800, "population(50,15)");<br>    validateExample("5", MyCode(100,0), 100, "population(100,0)");<br>    validateExample("6", MyCode(56,23), 9970464, "population(56,23)");<br>    validateExample("7", MyCode(2,2), 6, "population(2,2)");<br>    validateExample("8", MyCode(5,5), 30, "population(5,5)");<br>    return MyCode(n, k);<br>  }<br>};<br> <br>int strToInt(string str) {<br>  stringstream ss(str);<br>  int answer;<br>  ss &gt;&gt; answer;<br>  return answer;<br>}<br> <br>string intToStr(int x) {<br>  stringstream s;<br>  s &lt;&lt; x;<br>  return s.str();<br>}<br> <br>vector&lt;string&gt; tokenize(string str, string delim, bool returnDelims) {<br>  vector&lt;string&gt; answer;<br>  string temp;<br>  for (int i(0); i &lt; str.length(); ++i) {<br>    bool isDelim(false);<br>    for (int j(0); j &lt; delim.length(); ++j)<br>      if (str[i] == delim[j])<br>        isDelim = true;<br>    if (isDelim) {<br>      if (temp != "")<br>        answer.push_back(temp);<br>      temp = "";<br>      if (returnDelims)<br>        answer.push_back(string(1, str[i]));<br>    } else<br>      temp += str[i];<br>  }<br>  if (temp != "")<br>    answer.push_back(temp);<br>  return answer;<br>}<br> <br>template &lt;class T&gt; ostream &amp;operator &lt;&lt; (ostream &amp;out, const vector&lt;T&gt; &amp;a) {<br>  int s = a.size();<br>  for(int i=0; i&lt;s-1; i++)<br>    out &lt;&lt; a[i] &lt;&lt; ",";<br>  if(s&gt;0)<br>    out &lt;&lt; a[s-1];<br>  return out;<br>}<br> <br>vector&lt;int&gt; mkvecint(int n, ...){<br>  vector&lt;int&gt; v(0);<br>  va_list vl;<br>  va_start(vl, n);<br>  for(int i=0; i&lt;n; i++){<br>    int t = va_arg(vl, int);<br>    v.push_back(t);<br>  }<br>  va_end(vl);<br>  return v;<br>}<br> <br>vector&lt;string&gt; mkvecstring(int n, ...){<br>  vector&lt;string&gt; v(0);<br>  va_list vl;<br>  va_start(vl, n);<br>  for(int i=0; i&lt;n; i++){<br>    char *t = va_arg(vl, char *);<br>    v.push_back(t);<br>  }<br>  va_end(vl);<br>  return v;<br>}<br> <br>void validateExample(string exampleNo, int returned, int expected, string args) {<br>  cout &lt;&lt; "Example " &lt;&lt; exampleNo &lt;&lt; ": ";<br>  if (returned == expected)<br>    cout &lt;&lt; "Success!" &lt;&lt; endl;<br>  else {<br>    cout &lt;&lt; "FAILURE..." &lt;&lt; endl;<br>    cout &lt;&lt; "   Expected: " &lt;&lt; expected &lt;&lt; endl;<br>    cout &lt;&lt; "   Returned: " &lt;&lt; returned &lt;&lt; endl;<br>    cout &lt;&lt; "   " &lt;&lt; args &lt;&lt; endl;<br>  }<br>}<br> <br>// Powered by CodeProcessor<br></td>