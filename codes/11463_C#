<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections;<br>using System.Collections.Generic;<br>using System.Text;<br><br>public class TheLuckyGameDivOne {<br><br><br>    long[] ar;<br>    List&lt;long&gt; arl;<br>    public int find(long a, long b, long jLen, long bLen)<br>    {<br>        List&lt;long&gt; l = new List&lt;long&gt;();<br>        arl = new List&lt;long&gt;();<br>        l.Add(0);<br>        arl.Add(0);<br>        int i;<br>        for (i = 0; i &lt; 11; i++)<br>        {<br>            List&lt;long&gt; nl = new List&lt;long&gt;();<br>            foreach (long aa in l)<br>            {<br>                long nexta = aa * 10 + 4;<br>                nl.Add(nexta);<br>                if (nexta &lt;= b &amp;&amp; nexta &gt;= a)<br>                {<br>                    arl.Add(nexta);<br>                }<br>                long nextb = aa * 10 + 7;<br>                nl.Add(nextb);<br>                if (nextb &lt;= b &amp;&amp; nextb &gt;= a)<br>                {<br>                    arl.Add(nextb);<br>                }<br><br>            }<br>            l.Clear();<br>            foreach (long aa in nl) l.Add(aa);<br>        }<br>        ar = arl.ToArray();<br>        Array.Sort(ar);<br>        int res = 0;<br>        res = Math.Max(res, check(a, jLen, bLen));<br>        res = Math.Max(res, check(b - jLen + 1, jLen, bLen));<br>        //foreach (long aa in ar)<br>        //{<br>        //    Console.WriteLine(aa);<br>        //}<br>        //Console.Error.WriteLine("myon");<br>        foreach (long aa in ar)<br>        {<br>            long now = aa;<br>            if (aa &lt; a || aa &gt; b) continue;<br>            long tempmin, tempmax;<br>            tempmin = now - jLen + 1;<br>            tempmax = now;<br>            if (tempmin &gt;= a &amp;&amp; tempmax &lt;= b) res = Math.Max(res, check(tempmin, jLen, bLen));<br>            tempmin = now;<br>            tempmax = now + jLen - 1;<br>            if (tempmin &gt;= a &amp;&amp; tempmax &lt;= b) res = Math.Max(res, check(tempmin, jLen, bLen));<br><br>            tempmin = now - bLen + 1;<br>            tempmax = tempmin + jLen - 1;<br>            if (tempmin &gt;= a &amp;&amp; tempmax &lt;= b) res = Math.Max(res, check(tempmin, jLen, bLen));<br><br>            tempmax = now + bLen - 1;<br>            tempmin = tempmin - jLen + 1;<br>            if (tempmin &gt;= a &amp;&amp; tempmax &lt;= b) res = Math.Max(res, check(tempmin, jLen, bLen));<br>        }<br>        return res;<br>    }<br><br>    int check(long num, long jlen, long blen)<br>    {<br>        long min = num;<br>        long max = num + jlen - 1;<br>        int res = 99999999;<br>        int i;<br>        res = Math.Min(res, containnum(min, min + blen - 1));<br>        res = Math.Min(res, containnum(max - blen + 1, max));<br>        for (i = getover(min); i &lt; ar.Length &amp;&amp; ar[i] &lt;= max; i++)<br>        {<br>            long now = ar[i];<br>            if (ar[i] &lt; min) continue;<br>            long tempmin, tempmax;<br>            tempmin = now - blen;<br>            tempmax = now - 1;<br>            if (tempmin &gt;= min &amp;&amp; tempmax &lt;= max) res = Math.Min(res, containnum(tempmin, tempmax));<br>            tempmin = now + 1;<br>            tempmax = now + blen;<br>            if (tempmin &gt;= min &amp;&amp; tempmax &lt;= max) res = Math.Min(res, containnum(tempmin, tempmax));<br>        }<br>        //Console.WriteLine(num + " " + res);<br>        return res;<br>    }<br><br>    int containnum(long min, long max)<br>    {<br>        //Console.WriteLine("contain{0} - {1}: {2}", min, max, getover(max) - getover(min - 1));<br>        //Console.WriteLine(getover(max) - getover(min - 1));<br>        return getover(max) - getover(min - 1);<br>    }<br><br>    int getover(long num)<br>    {<br>        int u = ar.Length;<br>        int l = 0;<br>        while (l + 1 &lt; u)<br>        {<br>            int mid = (u + l) / 2;<br>            if (ar[mid] &gt; num)<br>            {<br>                u = mid;<br>            }<br>            else<br>            {<br>                l = mid;<br>            }<br>        }<br>        //Console.WriteLine(l);<br>        return l;<br>    }<br><br><br><br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003] [modified for C# by Petr]<br>// Powered by CodeProcessor<br></td>