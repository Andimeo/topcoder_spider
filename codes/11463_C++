<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;vector&gt;<br>#include &lt;list&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;deque&gt;<br>#include &lt;stack&gt;<br>#include &lt;bitset&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;functional&gt;<br>#include &lt;numeric&gt;<br>#include &lt;utility&gt;<br>#include &lt;sstream&gt;<br>#include &lt;iostream&gt;<br>#include &lt;iomanip&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;ctime&gt;<br>#include &lt;queue&gt;<br>#include &lt;cassert&gt;<br> <br>using namespace std;<br> <br>typedef long long int64;<br> <br>#define forn(i, n) for(int i = 0; i &lt; (int)(n); i++)<br>#define fore(i, a, n) for(int i = (int)(a); i &lt; (int)(n); i++)<br>#define ford(i, n) for(int i = (int)(n) - 1; i &gt;= 0; i--)<br>#define pb push_back<br>#define mp make_pair<br>#define fs first<br>#define sc second<br>#define last(a) int(a.size() - 1)<br>#define all(a) a.begin(), a.end()<br>#define _CRT_SECURE_NO_DEPRECATE<br> <br>const long double EPS = 1E-9;<br>const int INF = (int) 1E9;<br>const int64 INF64 = (int64) 1E18;<br> <br>class TheLuckyGameDivOne {<br>public:<br>  int find(long long, long long, long long, long long);<br>};<br> <br>vector&lt;int64&gt; a;<br>int64 l, r, len2;<br>int ans;<br> <br>void dfs(int64 cur) {<br>  if (l &lt;= cur &amp;&amp; cur &lt;= r)<br>    a.pb(cur);<br>  if (cur &gt; r)<br>    return;<br> <br>  dfs(cur * 10 + 4);<br>  dfs(cur * 10 + 7);<br>}<br> <br>void check(int64 x, int64 y) {<br>  if (x &lt; l || r &lt; y)<br>    return;<br> <br>  vector&lt;int64&gt; b;<br>  b.pb(x - 1);<br>  forn(i, a.size())<br>    if (x &lt;= a[i] &amp;&amp; a[i] &lt;= y)<br>      b.pb(a[i]);<br>  b.pb(y + 1);<br> <br>  for (int i = ans + 1; i &lt; (int)b.size(); i++) {<br>    for (int j = 0; j + i &lt; (int)b.size(); j++)<br>      if (b[j + i] - b[j] - 1 &gt;= len2)<br>        goto bad;<br>    ans++;<br>bad:;<br>  }<br>}<br> <br>int TheLuckyGameDivOne::find(long long A, long long B, long long len1, long long len2) {<br>  a.clear();<br>  l = A;<br>  r = B;<br> <br>//  l = 1;<br>//  r = INF * 10LL;<br>  dfs(0);<br> <br>  ::len2 = len2;<br> <br>  sort(all(a));<br> <br>  ans = 0;<br>  check(l, l + len1 - 1);<br>  check(r - len1 + 1, r);<br> <br>  forn(i, a.size())<br>    check(a[i] - len2 + 1, a[i] - len2 + 1 + len1 - 1);<br> <br>  return ans;<br>}<br> <br>//Powered by [KawigiEdit] 2.0!<br></td>