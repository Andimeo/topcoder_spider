<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br> <br>import static java.lang.Math.*;<br>import java.io.*;<br> <br>public class TheLuckyGameDivOne {<br>  public static void p(Object... o){System.out.println(Arrays.deepToString(o));}<br>  public int find(long A, long B, long jlen, long blen) {<br>    ArrayList&lt;Long&gt; L = new ArrayList&lt;Long&gt;();<br>    for(int len = 1; len &lt;= 10; len++){<br>      for(int j = 0; j &lt; (1&lt;&lt;len); j++){<br>        long v = 0;<br>        for(int k = 0; k &lt; len;k++){<br>          v *= 10;<br>          if((j &amp; (1&lt;&lt;k)) == 0)<br>            v += 4;<br>          else<br>            v += 7;<br>        }<br>        if(A &lt;= v &amp;&amp; v &lt;= B)<br>          L.add(v);<br>      }<br>    }<br>    Collections.sort(L);<br>    int low = 0;<br>    int high = L.size();<br>    while(low &lt; high){<br>      int mid = (low+high+1)/2;<br>      if(possible(A, B, jlen, blen, L, mid)){<br>        low = mid;<br>      }else{<br>        high = mid-1;<br>      }<br>    }<br>    return low;<br>  }<br>  private boolean possible(long A, long B, long jlen, long blen, ArrayList&lt;Long&gt; L, int N) {<br>    ArrayList&lt;Interval&gt; I = new ArrayList&lt;Interval&gt;();<br>    for(int i = N-1; i &lt; L.size(); i++){<br>      long first = L.get(i)-(blen-1);<br>      long last = L.get(i-(N-1));<br>      <br>      first = max(first, A);<br>      last = min(last, B-(blen-1));<br>      <br>      if(first &lt;= last){<br>        I.add(new Interval(first, last));<br>      }<br>    }<br>    Collections.sort(I);<br>    long prevst=-1;<br>    long preven=-1;<br>    for(Interval i:I){<br>      if(i.st &lt;= preven+1){<br>        preven = max(preven, i.en);<br>      }else{<br>        prevst = i.st;<br>        preven = i.en;<br>      }<br>      if(preven-prevst &gt;= jlen-blen)<br>        return true;<br>    }<br>    return false;<br>  }<br>  static class Interval implements Comparable&lt;Interval&gt;{<br>    long st, en;<br>    public Interval(long st, long en){<br>      this.st = st;<br>      this.en = en;<br>    }<br>    public int compareTo(Interval in) {<br>      if(st &lt; in.st)<br>        return -1;<br>      if(st &gt; in.st)<br>        return 1;<br>      return 0;<br>    }<br>  }<br>}<br></td>