<td class="problemText" colspan="8" valign="middle" align="left">
            #define KASE 0<br><br>#include &lt;cstdio&gt;<br>#include &lt;cstring&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cmath&gt;<br>#include &lt;ctime&gt;<br>#include &lt;cassert&gt;<br>#include &lt;utility&gt;<br>#include &lt;iomanip&gt;<br>#include &lt;iterator&gt;<br>#include &lt;sstream&gt;<br>#include &lt;iostream&gt;<br>#include &lt;fstream&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;numeric&gt;<br>#include &lt;functional&gt;<br>#include &lt;memory&gt;<br>#include &lt;complex&gt;<br>#include &lt;limits&gt;<br>#include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;queue&gt;<br>#include &lt;bitset&gt;<br>#include &lt;stack&gt;<br>#include &lt;list&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br><br>using namespace std;<br><br>#define REP(t, n) for(int t=0; t&lt;(int)(n); ++t)<br>#define FOR(t, x, y) for(int t=x; t&lt;(int)(y); ++t)<br>#define FOREACH(it, x) for(__typeof((x).begin()) it = (x).begin(); it != (x).end(); ++ it)<br>#define MSET(x, with) memset(x, with, sizeof(x))<br><br>#define all(v) (v).begin(), (v).end()<br>#define uniquify(v) {sort(all(v));(v).erase(unique(all(v)), (v).end());}<br> <br>class LargestSubsequence<br>{<br>public:<br>  string getLargest(string s)<br>  {<br>    ostringstream ss;<br><br>    while(!s.empty())<br>    {<br>      string::iterator it = max_element(s.begin(), s.end());<br>      ss &lt;&lt; *it;<br>      s.erase(s.begin(), it+1);<br>    }<br>    return ss.str();<br><br>  }<br>};<br><br><br><br><br><br>// Powered by FileEdit<br>// Powered by TZTester (Modified 2009)<br>// Powered by CodeProcessor<br></td>