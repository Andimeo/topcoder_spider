<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections.Generic;<br>using System.Text;<br><br>public class MagicalGirlLevelTwoDivTwo<br>{<br>    public struct Node<br>    {<br>        public int X;<br>        public int Y;<br>    }<br>    private int[] dx = new int[] { 1, 1, -1, -1, 1, 1, -1, -1 };<br>    private int[] dy = new int[] { 1, -1, 1, -1, 1, -1, 1, -1 };<br>    public string isReachable(int[] jumpTypes, int x, int y)<br>    {<br>        bool[][] map = initMap();<br>        Queue&lt;Node&gt; queue = new Queue&lt;Node&gt;();<br>        Node k1 = new Node(), k2 = new Node();<br>        k1.X = 0;<br>        k1.Y = 0;<br>        int i = 0;<br>        int nowX = 0;<br>        int nowY = 0;<br>        int tmp = 0;<br>        int j = 0;<br>        int len = jumpTypes.Length;<br>        map[100][100] = true;<br>        queue.Enqueue(k1);<br>        while (queue.Count &gt; 0)<br>        {<br>            k2 = queue.Dequeue();<br>            if (k2.X == x &amp;&amp; k2.Y == y)<br>                return "YES";<br>            for (i = 0; i &lt; len; i++)<br>            {<br>                tmp = jumpTypes[i];<br>                for (j = 0; j &lt; 4; j++)<br>                {<br>                    nowX = k2.X + tmp * dx[j];<br>                    nowY = k2.Y + dy[j];<br>                    if (nowX &gt;= -100 &amp;&amp; nowX &lt;= 100 &amp;&amp; nowY &gt;= -100 &amp;&amp; nowY &lt;= 100&amp;&amp;!map[nowX + 100][nowY + 100])<br>                    {<br>                        map[nowX + 100][nowY + 100] = true;<br>                        k1.X = nowX;<br>                        k1.Y = nowY;<br>                        queue.Enqueue(k1);<br>                    }<br>                }<br>                for (j = 4; j &lt; 8; j++)<br>                {<br>                    nowX = k2.X + dx[j];<br>                    nowY = k2.Y + tmp * dy[j];<br>                    if (nowX &gt;= -100 &amp;&amp; nowX &lt;= 100 &amp;&amp; nowY &gt;= -100 &amp;&amp; nowY &lt;= 100 &amp;&amp; !map[nowX + 100][nowY + 100])<br>                    {<br>                        map[nowX + 100][nowY + 100] = true;<br>                        k1.X = nowX;<br>                        k1.Y = nowY;<br>                        queue.Enqueue(k1);<br>                    }<br>                }<br>            }<br>        }<br>        return "NO";<br>    }<br><br>    private bool[][] initMap()<br>    {<br>        bool[][] map = new bool[205][];<br>        for (int nn = 0; nn &lt; 205; nn++)<br>        {<br>            map[nn] = new bool[205];<br>        }<br>        return map;<br>    }<br>}<br></td>