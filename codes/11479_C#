<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Text;<br>using System.Text.RegularExpressions;<br>using System.Collections;<br><br>public class MagicalGirlLevelThreeDivTwo {<br>    long[] l;<br>    int K;<br>    long[] digs;<br><br>    string[] first;<br>    int[] cache;<br><br>    public int theCount(string[] first, int n, long lo, long hi) {<br>        this.first = first;<br>        cache = new int[101];<br>        for (int i = 0; i &lt; 101; i++)<br>            cache[i] = -1;<br>        int res;<br>        K = first.Length;<br><br>        l = new long[101];<br>        digs = new long[101];<br>        for (int i = 0; i &lt; first.Length; i++)<br>            l[i] = first[i].Length;<br><br>        for (int i = first.Length; i &lt;= n; i++)<br>        {<br>            long ll = 0;<br>            for (int m = 0; m &lt; 100; m++)<br>            {<br>                if (i - K * m - 1 &lt; 0) break;<br>                ll += l[i - K * m - 1];<br>                if (ll &gt; 1000000000000000L) { ll = 1000000000000000L; break; } <br>            }<br>            l[i] = ll;<br>            <br>        }<br><br>        res = countDigs(n, lo, hi+1);<br>        <br>        return res;<br>    }<br><br>    private int countDigs(int n, long lo, long hi)<br>    {<br>        int res = 0;<br>        if (lo == 0 &amp;&amp; hi == l[n] &amp;&amp; cache[n]!=-1)<br>        {<br>            return cache[n];<br>        }<br><br>        if (n &lt; K)<br>        {<br>            for (int pos = (int)lo; pos &lt; hi; pos++)<br>            {<br>                if (first[n][pos] == '1') res++;<br>            }<br>        }<br>        else<br>        {<br>            long curleft=0;<br>            for (int m = 0; m &lt; 100; m++)<br>            {<br>                int prev = n - K * m - 1;<br>                if (prev &lt; 0) break;<br><br>                long leftinter = Math.Max(lo, curleft);<br>                long rightinter = Math.Min(hi, curleft + l[prev]);<br>                if (leftinter &lt;= rightinter )<br>                {<br>                    res += countDigs(prev, Math.Max(leftinter - curleft, 0), Math.Min(rightinter - curleft, l[prev]));<br>                }<br>                curleft += l[prev];<br><br>            }<br>        }<br>        if (lo == 0 &amp;&amp; hi == l[n])<br>        {<br>            cache[n] = res;<br>        }<br>        return res;<br>    }<br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by CodeProcessor<br></td>