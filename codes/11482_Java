<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br> <br>public class MagicalGirlLevelTwoDivOne {<br>    static final long MODULO = 1000000007;<br> <br>  public int theCount(String[] palette, int n, int m) {<br>        if ((n + m) % 2 != 0) return 0;<br>        int[][] numOdd = new int[n][m];<br>        int[][] numEven = new int[n][m];<br>        int[][] numUnknown = new int[n][m];<br>        for (int r = 0; r &lt; palette.length; ++r)<br>            for (int c = 0; c &lt; palette[r].length(); ++c) {<br>                char ch = palette[r].charAt(c);<br>                if (ch == '.')<br>                    ++numUnknown[r % n][c % m];<br>                else if ((ch - '0') % 2 == 0)<br>                    ++numEven[r % n][c % m];<br>                else<br>                    ++numOdd[r % n][c % m];<br>            }<br>        long[][][] ways = new long[n][m][2];<br>        for (int r = 0; r &lt; n; ++r)<br>            for (int c = 0; c &lt; m; ++c) {<br>                if (numOdd[r][c] &gt; 0 &amp;&amp; numEven[r][c] &gt; 0)<br>                    return 0;<br>                if (numEven[r][c] == 0) {<br>                    ways[r][c][1] = 1;<br>                    for (int i = 0; i &lt; numUnknown[r][c]; ++i) {<br>                        ways[r][c][1] *= 5;<br>                        ways[r][c][1] %= MODULO;<br>                    }<br>                }<br>                if (numOdd[r][c] == 0) {<br>                    ways[r][c][0] = 1;<br>                    for (int i = 0; i &lt; numUnknown[r][c]; ++i) {<br>                        ways[r][c][0] *= 4;<br>                        ways[r][c][0] %= MODULO;<br>                    }<br>                }<br>            }<br>        int maxState = 1 &lt;&lt; (n + m - 2);<br>        int[] w = new int[maxState];<br>        int[] nw = new int[maxState];<br>        w[0] = 1;<br>        for (int r = 0; r &lt; n - 1; ++r)<br>            for (int c = 0; c &lt; m - 1; ++c) {<br>                Arrays.fill(nw, 0);<br>                long w0 = ways[r][c][0];<br>                long w1 = ways[r][c][1];<br>                for (int prevState = 0; prevState &lt; maxState; ++prevState) {<br>                    long cnt = w[prevState];<br>                    if (cnt == 0) continue;<br>                    nw[prevState] = (int) ((nw[prevState] + w0 * cnt) % MODULO);<br>                    int nextState = (prevState ^ (1 &lt;&lt; r) ^ (1 &lt;&lt; (c + n - 1)));<br>                    nw[nextState] = (int) ((nw[nextState] + w1 * cnt) % MODULO);<br>                }<br>                int[] tmp = w;<br>                w = nw;<br>                nw = tmp;<br>            }<br>        long res = 0;<br>        for (int state = 0; state &lt; maxState; ++state) {<br>            long cnt = w[state];<br>            int fin = 1;<br>            for (int r = 0; r &lt; n - 1; ++r) {<br>                int what = ((state &gt;&gt; r) &amp; 1) ^ 1;<br>                fin ^= what;<br>                cnt *= ways[r][m - 1][what];<br>                cnt %= MODULO;<br>            }<br>            for (int c = 0; c &lt; m - 1; ++c) {<br>                int what = ((state &gt;&gt; (c + n - 1)) &amp; 1) ^ 1;<br>                cnt *= ways[n - 1][c][what];<br>                cnt %= MODULO;<br>            }<br>            cnt *= ways[n - 1][m - 1][fin];<br>            cnt %= MODULO;<br>            res = (res + cnt) % MODULO;<br>        }<br>    return (int) res;<br>  }<br> <br>}<br> <br> <br>// Powered by FileEdit<br>// Powered by RETester [based on ExampleBuilder]<br>// Powered by CodeProcessor<br></td>