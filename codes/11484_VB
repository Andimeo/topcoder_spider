<td class="problemText" colspan="8" valign="middle" align="left">
            Imports Microsoft.VisualBasic<br>Imports System<br>Imports System.Collections<br>Imports System.Collections.Generic<br>Imports System.Text<br>Imports System.Math<br>Imports Weight = System.Int32<br>Public Class FiveHundredEleven<br>    Public Shared N As Integer<br>    Public Shared Card As Integer()<br>    Public Shared Memo(512, 100, 2) As Integer<br>    Public Shared Function Is_nomeaning(ByVal Y As Integer, ByVal X As Integer) As Boolean<br>        If (Y Or X) = Y Then Return True<br>        Return False<br>    End Function<br>    Public Shared Function Max_Min(ByVal A As Integer, ByVal B As Integer, ByVal t As Integer) As Integer<br>        If t = 0 Then<br>            Return Max(A, B)<br>        Else<br>            Return Min(A, B)<br>        End If<br>    End Function<br>    '[\u28961][\u24847][\u21619][\u12394][\u12459][\u12540][\u12489][\u12398][\u26522][\u25968]<br>    Public Function Solve(Optional ByVal Y As Integer = 0, Optional ByVal nomeaning As Integer = 0, Optional ByVal Turn As Integer = 0) As Integer<br>        '[\u12393][\u12428][\u12363][\u19968][\u26522][\u12398][\u12459][\u12540][\u12489][\u12434][\u21462][\u12387][\u12390][\u28193][\u12377]<br>        ' Console.WriteLine("{0},{1}", Y, nomeaning)<br>        'Console.WriteLine("{0},{1},{2}", Y, nomeaning, Turn)<br>        If Y = 511 And Turn = 0 Then Return 1<br>        If Y = 511 And Turn = 1 Then Return -1<br>        Dim i As Integer, j As Integer<br>        If Memo(Y, nomeaning, Turn) &lt;&gt; 0 Then Return Memo(Y, nomeaning, Turn)<br> <br>        Dim Res As Integer = Max_Min(1, -1, 1 - Turn)<br>        For i = 0 To N - 1<br>            If Is_nomeaning(Y, Card(i)) = False Then<br>                '[\u28961][\u24847][\u21619][\u12394][\u12459][\u12540][\u12489][\u12398][\u36861][\u21152][\u12434][\u25506][\u12377]<br>                Dim addnmcnt As Integer = 0<br>                For j = 0 To N - 1<br>                    If i &lt;&gt; j And Is_nomeaning(Y, Card(j)) = False And Is_nomeaning(Y Or Card(i), Card(j)) = True Then<br>                        addnmcnt += 1<br>                    End If<br>                Next<br>                Res = Max_Min(Res, Solve(Y Or Card(i), nomeaning + addnmcnt, 1 - Turn), Turn)<br>            End If<br>        Next<br>        '[\u28961][\u24847][\u21619][\u12394][\u12459][\u12540][\u12489][\u12434][\u28528][\u12377]<br>        If nomeaning Then Res = Max_Min(Res, Solve(Y, nomeaning - 1, 1 - Turn), Turn)<br>        Memo(Y, nomeaning, Turn) = Res<br>        Console.WriteLine("{0},{1},{2}:{3}", Y, nomeaning, Turn, Res)<br> <br>        Return Res<br>    End Function<br>    Public Function theWinner(ByVal cards As Integer()) As String<br>        Dim i As Integer, j As Integer<br>        For i = 0 To 512<br>            For j = 0 To 100<br>                Memo(i, j, 0) = 0<br>                Memo(i, j, 1) = 0<br>            Next<br>        Next<br>        Dim AllOR As Integer<br>        For Each t As Integer In cards<br>            AllOR = AllOR Or t<br>        Next<br>        If AllOR &lt;&gt; 511 Then<br>            If (cards.Length() Mod 2 = 1) Then<br>                Return "Fox Ciel"<br>            Else<br>                Return "Toastman"<br>            End If<br>        End If<br>        Card = cards<br>        N = cards.Length<br>        Dim nc As Integer = 0<br>        For i = 0 To N - 1<br>            If Is_nomeaning(0, Card(i)) Then nc += 1<br>        Next<br>        If (Solve(, nc) = -1) Then<br>            Return "Toastman"<br>        Else<br>            Return "Fox Ciel"<br>        End If<br>    End Function<br>End Class<br></td>