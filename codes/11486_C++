<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;algorithm&gt;<br>#include &lt;string&gt;<br>#include &lt;memory.h&gt;<br>using namespace std;<br><br>class <br>GameOfLifeDivOne{<br>public:<br>  int uK, uT;<br>  bool possi(string&amp; inp, int x, int y){<br>    return inp[x] == '?' || inp[x] == (char)(y + '0');<br>  }<br>  long long dynamic(int x, string &amp;dat){<br>    int i, j, k, o,  n;<br>    n = dat.size();<br>    string inp = "";<br>    for(i=0;i&lt;n;i++)inp += dat[(x + i)%n];<br>    char s = inp[0];<br>    inp += s; inp += s;<br>    <br>    long long dy[55][55][2];<br>    memset(dy, 0, sizeof(dy));<br>    dy[1][(s-'0') * 2][s-'0'] = 1;<br>    <br>    <br>    for(i=0;i&lt;inp.size();i++){<br>      for(o=0;o&lt;=inp.size();o++){<br>        for(j=0;j&lt;2;j++){<br>          if(dy[i][o][j] != 0){<br>//            printf("%d %d %d %lld\n",i,o,j,dy[i][o][j]);<br>            if(i+1 &lt; inp.size()){<br>              if(possi(inp, i+1, j)){<br>//                printf("&gt; %d %d %d\n",i+1,o+j,j);<br>                dy[i+1][o+j][j] += dy[i][o][j];<br>              }<br>            }<br>            int p;<br>            p = (1-j)*2;<br>            for(k=i+1;k+1&lt;inp.size();k+=2){<br>              if(!possi(inp, k-1, j)) break;<br>              if(!possi(inp, k, 1-j)) break; <br>              <br>              if(possi(inp, k+1, 1-j)){<br>                dy[k+1][o+p][1-j] += dy[i][o][j];<br>//                printf("&gt; %d %d %d\n",k+1,o+p,1-j);<br>              }<br>              p ++;<br>            }<br>            <br>            p = 1;<br>            int pl;<br>            for(k=i+1;k+2&lt;inp.size();k+=2){<br>              if(!possi(inp, k, 1-j)) break;<br>              if(!possi(inp, k+1, j)) break;<br>              pl = max(p - uT, 0);<br>              if(j == 1) pl = (p * 2 + 1) - pl;<br>              if(possi(inp, k+2, j)){<br>                dy[k+2][o + pl][j] += dy[i][o][j];<br>//                printf("&gt; %d %d %d\n",k+2,o+pl,j);<br>              }<br>              p ++;<br>            }<br>          }<br>        }<br>      }<br>    }<br>    long long res = 0;    <br>    for(o=uK + (s-'0') * 2;o &lt;= inp.size();o++){<br>      res += dy[inp.size()-1][o][s-'0'];<br>    }<br>//    printf("dy %s %lld\n", inp.c_str(), res);<br>    return res;<br>  }<br>  long long determine(int x, string &amp;dat){<br>    if(x == dat.size()){<br>      if(dat[0] == dat[dat.size()-1]) return dynamic(dat.size()-1, dat);<br>      if(dat.size()/2 &gt;= uK) return 1;<br>      return 0;<br>    }<br>    char now = dat[x];<br>    long long sol = 0;<br>    int p;<br>    if(x == 0) p = dat.size()-1;<br>    else p = x-1;<br>    if(now == '1' || now == '?'){<br>      dat[x] = '1';<br>      if(x &gt; 0 &amp;&amp; dat[x] == dat[p])  sol += dynamic(p, dat);<br>      else sol += determine(x+1, dat);<br>    }<br>    if(now == '0' || now == '?'){<br>      dat[x] = '0';<br>      if(x &gt; 0 &amp;&amp; dat[x] == dat[p])  sol += dynamic(p, dat);<br>      else sol += determine(x+1, dat);<br>    }<br>    dat[x] = now;<br>    <br>//    printf("%s %lld\n", dat.c_str(), sol);<br>    return sol;<br>  }<br>  long long theCount(string init, int T, int K){<br>    uK = K; uT = T;<br>    return determine(0, init);<br>  }<br>};<br></td>