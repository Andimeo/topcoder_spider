<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Text;<br>using System.Text.RegularExpressions;<br>using System.Collections;<br><br>public class TwoConvexShapes<br>{<br><br>    const int MOD = 1000000007;<br><br>    public int countWays(string[] grid)<br>    {<br>        int h = grid.Length;<br>        int w = grid[0].Length;<br>        long[,] res_wb = new long[w, h + 1];<br>        long[,] res_bw = new long[w, h + 1];<br>        long[,] res_wu = new long[w, h + 1];<br>        long[,] res_wd = new long[w, h + 1];<br>        long[,] res_bu = new long[w, h + 1];<br>        long[,] res_bd = new long[w, h + 1];<br>        for (int i = 0; i &lt; h + 1; i++)<br>        {<br>            res_wb[0, i] = res_bw[0, i] = res_wu[0, i] = res_wd[0, i] = res_bu[0, i] = res_bd[0, i] = 1;<br>        }<br>        for (int j = 1; j &lt; w; j++)<br>        {<br>            for (int i = 0; i &lt; h + 1; i++)<br>            {<br>                for (int k = 0; k &lt; h + 1; k++)<br>                {<br>                    if (good(grid, j - 1, k, false))<br>                    {<br>                        if (k == i)<br>                            res_wb[j, i] += res_wb[j - 1, i];<br>                        if (k &gt; i)<br>                        {<br>                            res_wb[j, i] += res_wu[j - 1, k];<br>                            if ((i == 0 || i == h) &amp;&amp; k != 0 &amp;&amp; k != h)<br>                                res_bw[j, h - i] += res_wu[j - 1, k];<br>                        }<br>                        if (k &lt; i)<br>                        {<br>                            res_wb[j, i] += res_bd[j - 1, k];<br>                            if ((i == 0 || i == h) &amp;&amp; k != 0 &amp;&amp; k != h)<br>                                res_bw[j, h - i] += res_bd[j - 1, k];<br>                        }<br>                        res_wb[j, i] %= MOD;<br><br>                        if (k &gt;= i)<br>                            res_wu[j, i] += res_wu[j - 1, k];<br>                        res_wu[j, i] %= MOD;<br><br>                        if (k &lt;= i)<br>                            res_bd[j, i] += res_bd[j - 1, k];<br>                        res_bd[j, i] %= MOD;<br>                    }<br>                    if (good(grid, j - 1, k, true))<br>                    {<br>                        if (k == i)<br>                            res_bw[j, i] += res_bw[j - 1, i];<br>                        if (k &gt; i)<br>                        {<br>                            res_bw[j, i] += res_bu[j - 1, k];<br>                            if ((i == 0 || i == h) &amp;&amp; k != 0 &amp;&amp; k != h)<br>                                res_wb[j, h - i] += res_bu[j - 1, k];<br>                        }<br>                        if (k &lt; i)<br>                        {<br>                            res_bw[j, i] += res_wd[j - 1, k];<br>                            if ((i == 0 || i == h) &amp;&amp; k != 0 &amp;&amp; k != h)<br>                                res_wb[j, h - i] += res_wd[j - 1, k];<br>                        }<br>                        res_wb[j, i] %= MOD;<br><br>                        if (k &gt;= i)<br>                            res_bu[j, i] += res_bu[j - 1, k];<br>                        res_bu[j, i] %= MOD;<br><br>                        if (k &lt;= i)<br>                            res_wd[j, i] += res_wd[j - 1, k];<br>                        res_wd[j, i] %= MOD;<br>                    }<br>                }<br>            }<br>        }<br>        long res = 0;<br>        for (int k = 0; k &lt; h; k++)<br>        {<br>            if (good(grid, w - 1, k, true))<br>                res += res_bw[w - 1, k];<br>            if (good(grid, w - 1, k, false))<br>                res += res_wb[w - 1, k];<br>            res %= MOD;<br>        }<br>        return (int) res;<br>    }<br><br>    bool good(string[] grid, int j, int k, bool bw)<br>    {<br>        for (int i = 0; i &lt; grid.Length; i++)<br>        {<br>            if (bw &amp;&amp; grid[i][j] == 'B' &amp;&amp; i &gt;= k)<br>                return false;<br>            if (bw &amp;&amp; grid[i][j] == 'W' &amp;&amp; i &lt; k)<br>                return false;<br>            if (!bw &amp;&amp; grid[i][j] == 'B' &amp;&amp; i &lt; k)<br>                return false;<br>            if (!bw &amp;&amp; grid[i][j] == 'W' &amp;&amp; i &gt;= k)<br>                return false;<br>        }<br>        return true;<br>    }<br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by CodeProcessor<br></td>