<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.Comparator;<br>import java.util.Arrays;<br><br>/**<br> * Built using CHelper plug-in<br> * Actual solution is at the top<br> * @author Egor Kulikov (egor@egork.net)<br> */<br>public class TwoConvexShapes {<br>  long[][] result;<br>  char[][] map;<br>  private static final long MOD = (long) (1e9 + 7);<br><br>  public int countWays(String[] grid) {<br>    int rowCount = grid.length;<br>    int columnCount = grid[0].length();<br>    map = new char[rowCount][];<br>    for (int i = 0; i &lt; rowCount; i++)<br>      map[i] = grid[i].toCharArray();<br>    result = new long[rowCount + 1][columnCount + 1];<br>    long answer = 0;<br>    ArrayUtils.fill(result, -1);<br>    answer += go(0, columnCount);<br>    for (int i = 0; i &lt; rowCount; i++) {<br>      for (int j = 0; j &lt; columnCount; j++) {<br>        if (map[i][j] != '?')<br>          map[i][j] = (char) ('W' + 'B' - map[i][j]);<br>      }<br>    }<br>    ArrayUtils.fill(result, -1);<br>    answer += go(0, columnCount);<br>    for (int i = 0; i &lt; rowCount; i++) {<br>      for (int j = 0; j &lt; columnCount / 2; j++) {<br>        char temp = map[i][j];<br>        map[i][j] = map[i][columnCount - j - 1];<br>        map[i][columnCount - j - 1] = temp;<br>      }<br>    }<br>    ArrayUtils.fill(result, -1);<br>    answer += go(0, columnCount);<br>    for (int i = 0; i &lt; rowCount; i++) {<br>      for (int j = 0; j &lt; columnCount; j++) {<br>        if (map[i][j] != '?')<br>          map[i][j] = (char) ('W' + 'B' - map[i][j]);<br>      }<br>    }<br>    ArrayUtils.fill(result, -1);<br>    answer += go(0, columnCount);<br>    boolean allWhite = true;<br>    boolean allBlack = true;<br>    for (int i = 0; i &lt; rowCount; i++) {<br>      for (int j = 0; j &lt; columnCount; j++) {<br>        if (map[i][j] == 'W')<br>          allBlack = false;<br>        else if (map[i][j] == 'B')<br>          allWhite = false;<br>      }<br>    }<br>    if (allWhite)<br>      answer -= 3;<br>    if (allBlack)<br>      answer -= 3;<br>    for (int i = 1; i &lt; rowCount; i++) {<br>      boolean topAllWhite = true;<br>      boolean topAllBlack = true;<br>      boolean bottomAllWhite = true;<br>      boolean bottomAllBlack = true;<br>      for (int j = 0; j &lt; i; j++) {<br>        for (int k = 0; k &lt; columnCount; k++) {<br>          if (map[j][k] == 'W')<br>            topAllBlack = false;<br>          else if (map[j][k] == 'B')<br>            topAllWhite = false;<br>        }<br>      }<br>      for (int j = i; j &lt; rowCount; j++) {<br>        for (int k = 0; k &lt; columnCount; k++) {<br>          if (map[j][k] == 'W')<br>            bottomAllBlack = false;<br>          else if (map[j][k] == 'B')<br>            bottomAllWhite = false;<br>        }<br>      }<br>      if (topAllWhite &amp;&amp; bottomAllBlack)<br>        answer--;<br>      if (topAllBlack &amp;&amp; bottomAllWhite)<br>        answer--;<br>    }<br>    for (int i = 1; i &lt; columnCount; i++) {<br>      boolean topAllWhite = true;<br>      boolean topAllBlack = true;<br>      boolean bottomAllWhite = true;<br>      boolean bottomAllBlack = true;<br>      for (int j = 0; j &lt; i; j++) {<br>        for (int k = 0; k &lt; rowCount; k++) {<br>          if (map[k][j] == 'W')<br>            topAllBlack = false;<br>          else if (map[k][j] == 'B')<br>            topAllWhite = false;<br>        }<br>      }<br>      for (int j = i; j &lt; columnCount; j++) {<br>        for (int k = 0; k &lt; rowCount; k++) {<br>          if (map[k][j] == 'W')<br>            bottomAllBlack = false;<br>          else if (map[k][j] == 'B')<br>            bottomAllWhite = false;<br>        }<br>      }<br>      if (topAllWhite &amp;&amp; bottomAllBlack)<br>        answer--;<br>      if (topAllBlack &amp;&amp; bottomAllWhite)<br>        answer--;<br>    }<br>    return (int) ((answer + MOD) % MOD);<br>  }<br><br>  private long go(int row, int to) {<br>    if (result[row][to] != -1)<br>      return result[row][to];<br>    if (row == map.length)<br>      return result[row][to] = 1;<br>    int originalTo = to;<br>    for (int i = 0; i &lt; to; i++) {<br>      if (map[row][i] == 'B')<br>        to = i;<br>    }<br>    for (int i = to; i &lt; map[row].length; i++) {<br>      if (map[row][i] == 'W')<br>        return result[row][originalTo] = 0;<br>    }<br>    int from = -1;<br>    for (int i = to - 1; i &gt; from; i--) {<br>      if (map[row][i] == 'W')<br>        from = i;<br>    }<br>    result[row][originalTo] = 0;<br>    for (int i = from + 1; i &lt;= to; i++)<br>      result[row][originalTo] += go(row + 1, i);<br>    return result[row][originalTo] %= MOD;<br>  }<br><br><br>}<br><br>class ArrayUtils {<br><br>  public static void fill(long[][] array, long value) {<br>    for (long[] row : array)<br>      Arrays.fill(row, value);<br>  }<br><br>  }<br><br><br><br>// Powered by FileEdit<br>// Powered by moj 4.15 [modified TZTester]<br>// Powered by CodeProcessor<br></td>