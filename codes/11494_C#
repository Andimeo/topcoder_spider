<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br><br>public class TopView<br>{<br>    private static char[] Used;<br>    private static int[] MinX;<br>    private static int[] MinY;<br>    private static int[] MaxX;<br>    private static int[] MaxY;<br>    private static int[] Counts;<br>    private static bool[,] Tree;<br>    private static bool[] OUT;<br>    private static int UsedLength;<br><br>    static TopView()<br>    {<br>        Used = new char[64];<br>        MinX = new int[64];<br>        MinY = new int[64];<br>        MaxX = new int[64];<br>        MaxY = new int[64];<br>        Counts = new int[64];<br>        Tree = new bool[64, 64];<br>        OUT = new bool[64];<br>        UsedLength = 0;<br>    }<br><br>    static int Search(char Value)<br>    {<br>        for (int i = 0; i &lt; UsedLength; i++)<br>        {<br>            if (Used[i] == Value)<br>            {<br>                return i;<br>            }<br>        }<br>        return -1;<br>    }<br>    static void Search1(char Value, int x, int y)<br>    {<br>        int ID = Search(Value);<br>        if (ID == -1)<br>        {<br>            Used[UsedLength] = Value;<br>            MinX[UsedLength] = x;<br>            MaxX[UsedLength] = x;<br>            MinY[UsedLength] = y;<br>            MaxY[UsedLength] = y;<br>            UsedLength++;<br>        }<br>        else<br>        {<br>            if (x &gt; MaxX[ID]) MaxX[ID] = x;<br>            if (x &lt; MinX[ID]) MinX[ID] = x;<br>            if (y &gt; MaxY[ID]) MaxY[ID] = y;<br>            if (y &lt; MinY[ID]) MinY[ID] = y;<br>        }<br>    }<br><br>    public static string findOrder(string[] grid)<br>    {<br>        for (int i = 0; i &lt; grid.Length; i++)<br>        {<br>            for (int j = 0; j &lt; grid[i].Length; j++)<br>            {<br>                if (grid[i][j] != '.')<br>                {<br>                    Search1(grid[i][j], j, i);<br>                }<br>            }<br>        }<br><br>        for (int i = 0; i &lt; UsedLength; i++)<br>        {<br>            for (int j = MinX[i]; j &lt;= MaxX[i]; j++)<br>            {<br>                for (int k = MinY[i]; k &lt;= MaxY[i]; k++)<br>                {<br>                    if (grid[k][j] == '.') return "ERROR!";<br>                    if (grid[k][j] == Used[i]) continue;<br>                    int ID = Search(grid[k][j]);<br>                    if (!Tree[i, ID]) Counts[ID]++;<br>                    Tree[i, ID] = true;<br>                    if (Tree[ID, i]) return "ERROR!";<br>                }<br>            }<br>        }<br><br>        int CURR = -1;<br>        string Answer = "";<br><br>        for (int i = 0; i &lt; UsedLength; i++)<br>        {<br>            CURR = -1;<br>            for (int j = 0; j &lt; UsedLength; j++)<br>            {<br>                if (!OUT[j] &amp;&amp; Counts[j] == 0 &amp;&amp; (CURR == -1 || Used[j] &lt; Used[CURR]))<br>                {<br>                    CURR = j;<br>                }<br>            }<br>            if (CURR == -1) return "ERROR!";<br>            Answer += Used[CURR];<br>            OUT[CURR] = true;<br>            for (int j = 0; j &lt; UsedLength; j++)<br>            {<br>                if (Tree[CURR, j]) Counts[j]--;<br>            }<br>        }<br><br>        return Answer;<br>    }<br>}<br></td>