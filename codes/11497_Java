<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br><br>import static java.lang.Math.*;<br>import static java.util.Arrays.*;<br><br>public class YetAnotherBingoProblem {<br>  <br>  public int longestWinningSequence(String[] cards1, String[] cards2) {<br>    int[][] cs1 = f(cards1);<br>    int[][] cs2 = f(cards2);<br>    int n1 = cs1.length, n2 = cs2.length;<br>    int res = -1;<br>    for (int last = 1; last &lt;= 75; last++) {<br>      for (int c = 0; c &lt; n1; c++) if (binarySearch(cs1[c], last) &gt;= 0) {<br>        ArrayList&lt;int[]&gt; list = new ArrayList&lt;int[]&gt;();<br>        for (int i = 0; i &lt; n1; i++) if (i != c &amp;&amp; binarySearch(cs1[i], last) &lt; 0) list.add(cs1[i]);<br>        for (int i = 0; i &lt; n2; i++) list.add(cs2[i]);<br>        boolean[] can = new boolean[76];<br>        fill(can, true);<br>        for (int i = 0; i &lt; 25; i++) can[cs1[c][i]] = false;<br>        res = max(res, f(list.toArray(new int[0][]), can));<br>      }<br>    }<br>    return res;<br>  }<br>  <br>  int INF = 1 &lt;&lt; 29;<br>  <br>  int f(int[][] cs, boolean[] can) {<br>    int n = cs.length;<br>    int[] f = new int[76];<br>    for (int i = 0; i &lt; n; i++) {<br>      for (int j = 0; j &lt; 25; j++) {<br>        f[cs[i][j]] |= 1 &lt;&lt; i;<br>      }<br>    }<br>    int[] dp = new int[1 &lt;&lt; n];<br>    fill(dp, INF);<br>    dp[0] = 0;<br>    for (int i = 0; i &lt; 1 &lt;&lt; n; i++) if (dp[i] &lt; INF) {<br>      for (int j = 1; j &lt;= 75; j++) if (can[j]) {<br>        if (dp[i | f[j]] &gt; dp[i] + 1) {<br>          dp[i | f[j]] = dp[i] + 1;<br>        }<br>      }<br>    }<br>    if (dp[(1 &lt;&lt; n) - 1] == INF) return -1;<br>    return 75 - dp[(1 &lt;&lt; n) - 1];<br>  }<br>  <br>  int[][] f(String[] ss) {<br>    StringBuilder sb = new StringBuilder();<br>    for (String s : ss) sb.append(s);<br>    ss = sb.toString().split(",");<br>    int[][] is = new int[ss.length][25];<br>    for (int i = 0; i &lt; is.length; i++) {<br>      String[] ss2 = ss[i].split(" ");<br>      for (int j = 0; j &lt; 25; j++) is[i][j] = Integer.parseInt(ss2[j]);<br>      sort(is[i]);<br>    }<br>    return is;<br>  }<br>  <br>  void debug(Object...os) {<br>    System.err.println(deepToString(os));<br>  }<br>  <br>}<br></td>