<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;cstdio&gt; <br>#include &lt;cmath&gt; <br>#include &lt;iostream&gt; <br>#include &lt;algorithm&gt; <br>#include &lt;sstream&gt; <br>#include &lt;cstring&gt; <br>#include &lt;functional&gt; <br>#include &lt;cstdlib&gt; <br>#include &lt;queue&gt; <br>#include &lt;map&gt; <br>#include &lt;set&gt; <br>#include &lt;cctype&gt; <br>#include &lt;string&gt; <br>#include &lt;vector&gt; <br><br>#define sz(a) int((a).size()) <br>#define all(X) (X).begin(), (X).end() <br><br>using namespace std;<br><br>class PerfectMemory<br>{<br>public:<br>  double getExpectation(int N, int M);<br>};<br><br>double dp[1300][1300];<br><br>double getdp(int pair, int single)<br>{<br>  double &amp;ret = dp[pair][single];<br>  if (ret &gt; 0.5) {<br>    return ret;<br>  }<br>  ret = 0;<br>  if (pair == 0 &amp;&amp; single == 0) {<br>    return ret;<br>  }<br>  double all = pair * 2 + single;<br>  if (single != 0) {<br>    double psingle = single / all;<br>    ret += psingle * (1 + getdp(pair, single - 1));<br>  }<br>  if (pair != 0) {<br>    double ppair = pair * 2 / all;<br>    double done = 1.0 / (all - 1);<br>    ret += ppair * done * (1 + getdp(pair - 1, single));<br>    if (single != 0) {<br>      double ps = single / (all - 1);<br>      ret += ppair * ps * (2 + getdp(pair - 1, single));<br>    }<br>    if (pair &gt; 1) {<br>      double pp = (pair - 1) * 2 / (all - 1);<br>      ret += ppair * pp * (1 + getdp(pair - 2, single + 2));<br>    }<br>  }<br>  return ret;<br>}<br><br>double PerfectMemory::getExpectation(int N, int M)<br>{<br>  int n = N * M / 2;<br>  fill(&amp;dp[0][0], &amp;dp[1300][0], -1);<br>  return getdp(n, 0);<br>}<br><br><br><br>// Powered by FileEdit<br>// Powered by CodeProcessor<br></td>