<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections;<br>using System.Collections.Generic;<br><br>public class CutTheNumbers {<br><br>  public static int recurse(string[] board, bool dorotate)<br>  {<br><br>    int maxval = 0;<br>    // try horiz;<br>    for (int i = 0; i &lt; board.Length; i++)<br>    {<br>      int val = int.Parse(board[i]);<br><br>      if (i &gt; 0)<br>      {<br>        string[] sub = new string[i];<br>        for (int s = 0; s &lt; i; s++)<br>          sub[s] = board[s];<br>        val += recurse(sub, true);<br>      }<br><br>      if (i &lt; board.Length-1)<br>      {<br>        string[] sub = new string[board.Length-i-1];<br>        for (int s = i+1; s &lt; board.Length; s++)<br>          sub[s-i-1] = board[s];<br>        val += recurse(sub, true);<br>      }<br><br>      if (val &gt; maxval) maxval = val;<br>    }<br><br>    // try vert;<br><br>    if (dorotate)<br>    {<br>      string[] sub = new string[board[0].Length];<br>      for (int i = 0; i &lt; sub.Length; i++)<br>      {<br>        string ones = "";<br>        for (int j = 0; j &lt; board.Length; j++)<br>          ones += board[j][i];<br>        sub[i] = ones;<br>      }<br>      int val = recurse(sub, false);<br>      if (val &gt; maxval) maxval = val;<br><br>    }<br><br><br>    return maxval;<br>  }<br><br><br>  public static int maximumSum(string[] board) {<br>    return recurse(board, true);<br>  }<br><br>  /*<br>  public static void Main()<br>  {<br>    string[] board;<br>    Console.WriteLine(maximumSum(new string[] {<br> "001",<br> "010",<br> "111",<br> "100"}));<br>    Console.ReadLine();<br>  }<br>   /**/<br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003]<br>// Powered by CodeProcessor<br></td>