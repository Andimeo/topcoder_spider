<td class="problemText" colspan="8" valign="middle" align="left">
            public class CutTheNumbers {<br><br>  String[] my;<br>  int[][][][] best = new int[4][4][4][4];<br><br>  private int dp(int a, int b, int c, int d) {<br>    if (best[a][b][c][d] != -1) {<br>      return best[a][b][c][d];<br>    }<br><br>    if (a == c) {// same row<br>      int tmp = 0;<br><br>      for (int i = b; i &lt;= d; i++) {<br>        tmp *= 10;<br>        tmp += my[a].charAt(i) - '0';<br>      }<br><br>      return best[a][b][c][d] = tmp;<br>    }<br><br>    if (b == d) {<br>      int tmp = 0;<br><br>      for (int i = a; i &lt;= c; i++) {<br>        tmp *= 10;<br>        tmp += my[i].charAt(d) - '0';<br>      }<br><br>      return best[a][b][c][d] = tmp;<br>    }<br><br>    // cur |<br>    int tmp = 0;<br>    for (int i = b; i &lt; d; i++) {<br>      int v1 = dp(a, b, c, i);<br>      int v2 = dp(a, i + 1, c, d);<br><br>      if (v1 + v2 &gt; tmp) {<br>        tmp = v1 + v2;<br>      }<br>    }<br><br>    // cut -<br>    for (int i = a; i &lt; c; i++) {<br>      int v1 = dp(a, b, i, d);<br>      int v2 = dp(i + 1, b, c, d);<br><br>      if (v1 + v2 &gt; tmp) {<br>        tmp = v1 + v2;<br>      }<br>    }<br><br>    return best[a][b][c][d] = tmp;<br>  }<br><br>  public int maximumSum(String[] board) {<br>    my = board;<br><br>    for (int i = 0; i &lt; 4; i++) {<br>      for (int j = 0; j &lt; 4; j++) {<br>        for (int k = 0; k &lt; 4; k++) {<br>          for (int m = 0; m &lt; 4; m++) {<br>            best[i][j][k][m] = -1;<br>          }<br>        }<br>      }<br>    }<br><br>    return dp(0, 0, board.length - 1, board[0].length() - 1);<br>  }<br>}<br></td>