<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections;<br>using System.Collections.Generic;<br>using System.Collections.Specialized;<br>using System.Text;<br>using System.Text.RegularExpressions;<br> <br> <br>public class PrimeCompositeGame<br>{<br>  bool[] c;<br>  int[,] ca;<br>  int f(int n, int k, bool me)<br>  {<br>    int ret = 0;<br>    if(ca[n, me ? 0 : 1] != 0)<br>      return ca[n, me ? 0 : 1];<br>    if(me)<br>    {<br>      ret = mef(n, k);<br>    }<br>    else<br>    {<br>      ret = hef(n, k);<br>    }    <br>    ca[n, me ? 0 : 1] = ret;<br>    return ret;<br>  }<br>  int mef(int n, int k)<br>  {<br>    int lower = Math.Max(2, n - k);<br>    bool canwin = false;<br>    int max = 1;<br>    int min = int.MaxValue;<br>    int cnt = 0;<br>    for(int p=lower; p&lt;n; p++)<br>    {<br>      if(!c[p])<br>      {<br>        int v = f(p, k, false);<br>        if(v &lt; 0)<br>        {<br>          canwin = true;<br>          min = Math.Min(-v + 1, min);<br>          cnt ++;<br>          if(cnt &gt;= 3 &amp;&amp; k &gt; 115)<br>            return min;<br>        }<br>        else<br>        {<br>          max = Math.Max(v + 1, max);<br>        }<br>      }<br>    }<br>    return canwin ? min : -max;<br>  }<br>  int hef(int n, int k)<br>  {<br>    int lower = Math.Max(4, n - k);<br>    bool canwin = false;<br>    int max = 1;<br>    int min = int.MaxValue;<br>    int cnt = 0;<br>    for(int p=n-1; p&gt;=lower; p--)<br>    {<br>      if(c[p])<br>      {<br>        int v = f(p, k, true);<br>        if(v &lt; 0)<br>        {<br>          canwin = true;<br>          min = Math.Min(-v + 1, min);<br>        }<br>        else<br>        {<br>          max = Math.Max(v + 1, max);<br>          cnt ++;<br>          if(cnt &gt;= 3 &amp;&amp; k &gt; 115 &amp;&amp; !canwin)<br>            return -max;<br>        }<br>      }<br>    }<br>    return canwin ? min : -max;<br>  }<br>  public int theOutcome(int n, int k)<br>  {    <br>    c = new bool[n+1];<br>    ca = new int[n + 1,2];<br>    for(int i=2; i&lt;=n; i++)<br>    {<br>      if(!c[i])<br>      {<br>        for(int j = i+i; j&lt;=n; j+=i)<br>          c[j] = true;<br>      }<br>    }<br>    int v = f(n, k, true);<br>    if(v &gt; 0)<br>      v --;<br>    else<br>      v++;<br> <br>    /*<br>    int l = 0;<br>    int v = 0;<br>    for(int i=2; i&lt;=n; i++)<br>    {<br>      if(c[i])<br>        v ++;<br>      else<br>      {<br>        if(v &gt; l)<br>        {<br>          l = v;<br>          Console.WriteLine(i - v + " " + l);<br>        }<br>        v = 0;<br>      }<br>    }*/    <br>    return v;<br>  }<br> <br> <br>}<br>//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!<br></td>