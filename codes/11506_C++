<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;sstream&gt; <br>#include &lt;iostream&gt;<br>#include &lt;string.h&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;stdlib.h&gt; <br>#include &lt;stdio.h&gt; <br>#include &lt;numeric&gt;<br>#include &lt;math.h&gt;<br>#include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;stack&gt;<br>#include &lt;queue&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>using namespace std;<br> <br>const int MAX = 1 &lt;&lt; 19;<br> <br>int pr[MAX];<br>int dp[MAX][2];<br>priority_queue &lt; pair &lt; int , int &gt; &gt; q[2] , w[2];<br> <br>int solve ( int n , int k ) {<br>  int i , j;<br>  int t;<br>  <br>  for (i = 2; i * i &lt;= n; i++) {<br>    if ( !pr[i] ) {<br>      for (j = i * i; j &lt;= n; j += i) {<br>        pr[j] = 1;<br>      }<br>    }<br>  }<br>  <br>  for (i = 2; i &lt;= n; i++) {<br>    for (j = 0; j &lt; 2; j++) {<br>      t = j;<br>      <br>      while ( !q[t].empty() ) {<br>        if ( q[t].top().second &lt; i - k ) {<br>          q[t].pop();<br>        } else {<br>          break;<br>        }<br>      }<br>      <br>      if ( q[t].empty() ) {<br>        while ( !w[t].empty() ) {<br>          if ( w[t].top().second &lt; i - k ) {<br>            w[t].pop();<br>          } else {<br>            break;<br>          }<br>        }<br>        <br>        if ( w[t].empty() ) {<br>          dp[i][j] = 0;<br>        } else {<br>          dp[i][j] = -(w[t].top().first + 1);<br>        }<br>      } else {<br>        dp[i][j] = -q[t].top().first + 1;<br>      }<br>    }<br>    <br>    if ( pr[i] ) {<br>      //not prime<br>      if ( dp[i][0] &lt;= 0 ) {<br>        q[1].push ( make_pair ( dp[i][0] , i ) );<br>      } else {<br>        w[1].push ( make_pair ( dp[i][0] , i ) );<br>      }<br>    } else {<br>      if ( dp[i][1] &lt;= 0 ) {<br>        q[0].push ( make_pair ( dp[i][1] , i ) );<br>      } else {<br>        w[0].push ( make_pair ( dp[i][1] , i ) );<br>      }<br>    }<br>  }<br>  <br>  return dp[n][0];<br>}<br> <br>class PrimeCompositeGame {<br>  public:<br>  int theOutcome(int N, int K) {<br>    return solve ( N, K );<br>  }<br>};<br> <br> <br> <br>// Powered by FileEdit<br>// Powered by moj 4.16 [modified TZTester]<br>// Powered by CodeProcessor<br></td>