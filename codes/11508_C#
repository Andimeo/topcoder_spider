<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections;<br>using System.Collections.Generic;<br>using System.Collections.Specialized;<br>using System.Text;<br>using System.Text.RegularExpressions;<br> <br> <br>public class NewItemShop<br>{<br>    int n, m;<br>    int[] otn, nto, tc, ti;<br>    bool[] tu;<br>    double[] tp;<br>    public double getMaximum(int s, string[] cs)<br>    {<br>        n = cs.Length;<br>        m = 0;<br>        otn = new int[n];<br>        nto = new int[n];<br> <br>        tc = new int[24];<br>        tp = new double[24];<br>        ti = new int[24];<br>        tu = new bool[24];<br>        for (int i = 0; i &lt; n; i++)<br>        {<br>            otn[i] = -1;<br>            nto[i] = -1;<br>        }<br>        for (int i = 0; i &lt; n; i++)<br>        {<br>            string[] strs = cs[i].Split(' ');<br>            if (strs.Length &gt; 1)<br>            {<br>                otn[i] = m;<br>                nto[m] = i;<br>                m++;<br>            }<br>            double left = 100;<br>            for (int j = 0; j &lt; strs.Length; j++)<br>            {<br>                string[] ss = strs[j].Split(',');<br>                int t = int.Parse(ss[0]);<br>                int c = int.Parse(ss[1]);<br>                int p = int.Parse(ss[2]);<br>                tu[t] = true;<br>                tc[t] = c;<br>                tp[t] = p / left;<br>                left -= p;<br>                ti[t] = i;<br>            }<br>        }<br>        r = new double[25, 1 &lt;&lt; m, 25];<br>        return calc(0, 0, s);<br>    }<br>    double[, ,] r;<br> <br>    double calc(int t, int mask, int s)<br>    {<br>        if (t &gt;= 24)<br>            return 0;<br>        if (s &lt;= 0)<br>            return 0;<br>        double tmp = r[t, mask, s];<br>        if (tmp &gt; 0)<br>            return tmp - 1;<br>        double ret = 0;<br>        if (tu[t])<br>        {<br>            int c = tc[t];<br>            double p = tp[t];<br>            int o = ti[t];<br>            int idx = otn[o];<br>            int nm = mask;<br>            double r1 = 0;<br>            double r22 = calc(t + 1, mask, s);<br>            if (idx &gt;= 0)<br>            {<br>                if ((mask &amp; (1 &lt;&lt; idx)) == 0)<br>                {<br>                    nm = mask | (1 &lt;&lt; idx);<br>                    if (s &gt; 0)<br>                    {<br>                        r1 = calc(t + 1, nm, s - 1) + c;<br>                    }<br>                    double r2 = calc(t + 1, nm, s);<br>                    ret = p * Math.Max(r1, r2) + (1 - p) * r22;<br>                }<br>                else<br>                {<br>                    ret = r22;<br>                }<br>            }<br>            else<br>            {<br>                if (s &gt; 0)<br>                {<br>                    r1 = calc(t + 1, mask, s - 1) + c;<br>                }<br>                ret = p * Math.Max(r1, r22) + (1 - p) * r22;<br>            }            <br>            //Console.WriteLine("{0} {1} {2} {3}", t, mask, s, ret);<br>        }<br>        else<br>        {<br>            ret = calc(t + 1, mask, s);<br>        }<br>        r[t, mask, s] = ret + 1;<br>        return ret;<br>    }<br> <br> <br>}<br>//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!<br></td>