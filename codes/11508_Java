<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br> <br>public class NewItemShop {<br>    static final int MAX_TIME = 24;<br>    int[] id;<br>    int[] price;<br>    double[] prob;<br>    int lastId;<br>    double[][][] cache;<br> <br>  public double getMaximum(int swords, String[] customers) {<br>        id = new int[MAX_TIME];<br>        price = new int[MAX_TIME];<br>        prob = new double[MAX_TIME];<br>        Arrays.fill(id, -1);<br>        lastId = 0;<br>        for (String x : customers) {<br>            String[] part = x.split(" ", -1);<br>            int curId = -2;<br>            if (part.length &gt;= 2)<br>                curId = lastId++;<br>            int rem = 100;<br>            for (String ppp : part) {<br>                String[] pp = ppp.split(",", -1);<br>                int t = Integer.parseInt(pp[0]);<br>                int c = Integer.parseInt(pp[1]);<br>                int p = Integer.parseInt(pp[2]);<br>                id[t] = curId;<br>                price[t] = c;<br>                prob[t] = p / (double) rem;<br>                rem -= p;<br>            }<br>        }<br>        cache = new double[MAX_TIME][swords + 1][1 &lt;&lt; lastId];<br>        for (int i = 0; i &lt; cache.length; ++i)<br>            for (int j = 0; j &lt; cache[i].length; ++j)<br>                Arrays.fill(cache[i][j], -1.0);<br>    double res = doit(0, swords, 0);<br>    return res;<br>  }<br> <br>    private double doit(int time, int left, int seen) {<br>        if (time &gt;= MAX_TIME || left == 0) {<br>            return 0.0;<br>        }<br>        double[] ccache = cache[time][left];<br>        double cachedRes = ccache[seen];<br>        if (cachedRes &gt; -0.5)<br>            return cachedRes;<br>        double res;<br>        if (id[time] == -1) {<br>            res = doit(time + 1, left, seen);<br>        } else if (id[time] == -2) {<br>            res = (1 - prob[time]) * doit(time + 1, left, seen) +<br>                    prob[time] * Math.max(doit(time + 1, left, seen), price[time] + doit(time + 1, left - 1, seen));<br>        } else {<br>            if ((seen &amp; (1 &lt;&lt; id[time])) != 0) {<br>                res = doit(time + 1, left, seen);<br>            } else {<br>                res = (1 - prob[time]) * doit(time + 1, left, seen) +<br>                        prob[time] * Math.max(doit(time + 1, left, seen | (1 &lt;&lt; id[time])), price[time] + doit(time + 1, left - 1, seen | (1 &lt;&lt; id[time])));<br>            }<br>        }<br>        ccache[seen] = res;<br>        return res;<br>    }<br> <br>}<br> <br> <br>// Powered by FileEdit<br>// Powered by RETester [based on ExampleBuilder]<br>// Powered by CodeProcessor<br></td>