<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;cassert&gt;<br>#include &lt;cctype&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cstring&gt;<br>#include &lt;ctime&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;bitset&gt;<br>#include &lt;deque&gt;<br>#include &lt;iostream&gt;<br>#include &lt;iomanip&gt;<br>#include &lt;list&gt;<br>#include &lt;map&gt;<br>#include &lt;queue&gt;<br>#include &lt;set&gt;<br>#include &lt;sstream&gt;<br>#include &lt;stack&gt;<br>#include &lt;utility&gt;<br>#include &lt;vector&gt;<br><br>using namespace std;<br><br>typedef long long ll;<br>typedef long double ld;<br>typedef pair &lt;int, int&gt; pii;<br>typedef vector &lt;int&gt; vi;<br>typedef vector &lt;string&gt; vs;<br><br>const int INF = (int) 1E9;<br>const ll LINF = (ll) 4E18;<br><br>const ld PI = acos(-1.0);<br>const ld EPS = 1E-11;<br><br>#define FOR(i, a, b) for (int i = (a); i &lt;= (b); i++)<br>#define FORD(i, a, b) for (int i = (a); i &gt;= (b); i--)<br>#define REP(i, a) for (int i = 0; i &lt; (a); i++)<br>#define REPD(i, a) for (int i = (a) - 1; i &gt;= 0; i--)<br>#define FIT(it, v) for (typeof((v).begin())it = (v).begin(); it != (v).end(); ++it)<br>#define FITD(it, v) for (typeof((v).rbegin())it = (v).rbegin(); it != (v).rend(); ++it)<br><br>#define VAR(a, b) typeof(b) a(b)<br>#define ALL(v) (v).begin(), (v).end()<br>#define SET(a, x) memset((a), (x), sizeof(a))<br>#define SIZE(a) ((int)(a).size())<br><br>#define EXIST(a, b) (find(ALL(a), (b)) != (a).end())<br>#define SORT(x) sort(ALL(x))<br>#define GSORT(x) sort(ALL(x), greater&lt;typeof(*((x).begin()))&gt;())<br>#define UNIQUE(v) SORT(v); (v).resize(unique(ALL(v)) - (v).begin())<br>#define ENUM(v) FIT(it, (v)) cout &lt;&lt; *it &lt;&lt; " "; cout &lt;&lt; endl<br><br>#define PF push_front<br>#define PB push_back<br>#define MP make_pair<br>#define F first<br>#define S second<br><br>template&lt;typename T&gt; T gcd(T a, T b) { return (b == 0) ? abs(a) : gcd(b, a % b); }<br>template&lt;typename T&gt; inline T lcm(T a, T b) { return a / gcd(a, b) * b; }<br>template&lt;typename T&gt; inline T mod(T a, T b) { a %= b; if (a &lt; 0) a += b; return a; }<br>template&lt;typename T&gt; inline T sqr(T x) { return x * x; }<br>template&lt;typename T&gt; inline T gmax(T a, T b) { return (a &gt; b ? a : b); }<br>template&lt;typename T&gt; inline T gmin(T a, T b) { return (a &lt; b ? a : b); }<br><br>template&lt;typename T&gt; inline string toString(T x) { ostringstream oss; oss &lt;&lt; x; return oss.str(); }<br>inline ll toInt(const string&amp; st) { istringstream iss(st); ll x; iss &gt;&gt; x; return x; }<br>inline ld toDouble(const string&amp; st) { istringstream iss(st); ld x; iss &gt;&gt; x; return x; }<br>inline string toLower(string st) { REP(i, SIZE(st)) st[i] = tolower(st[i]); return st; }<br>inline string toUpper(string st) { REP(i, SIZE(st)) st[i] = toupper(st[i]); return st; }<br><br>/* IMPLEMENTATION */<br><br>typedef pair &lt;int, pair &lt;int, pair &lt;int, double&gt; &gt; &gt; f4;<br><br>f4 make4(int a, int b, int c, double d) {<br>  return MP(a, MP(b, MP(c, d)));<br>}<br><br>class NewItemShopTwo {<br>  public:<br>  vector &lt;f4&gt; v;<br>  double dfs(int level, bool f1, bool f2) {<br>    if (level &gt;= SIZE(v)) {<br>      return 0;<br>    }<br>    int person = v[level].S.F;<br>    int cost = v[level].S.S.F;<br>    double p = v[level].S.S.S;<br>    double k;<br>    if (person == 0) {<br>      if (f1) {<br>        k = dfs(level + 1, true, f2);<br>      } else {<br>        k = p * gmax((double)cost, dfs(level + 1, true, f2))<br>          + (1 - p) * dfs(level + 1, false, f2);<br>      }<br>    } else {<br>      if (f2) {<br>        k = dfs(level + 1, f1, true);<br>      } else {<br>        k = p * gmax((double)cost, dfs(level + 1, f1, true))<br>          + (1 - p) * dfs(level + 1, f1, false);<br>      }<br>    }<br>    //cerr &lt;&lt; v[level].F &lt;&lt; " " &lt;&lt; f1 &lt;&lt; " " &lt;&lt; f2 &lt;&lt; " " &lt;&lt; p &lt;&lt; " " &lt;&lt; k &lt;&lt; endl;<br>    return k;<br>  }<br>  double getMaximum(vector &lt;string&gt; customers) {<br>    v.clear();<br>    double total[5];<br>    total[0] = total[1] = 100;<br>    REP(i, 2) {<br>      string s = customers[i];<br>      REP(j, SIZE(s)) {<br>        if (s[j] == ',') {<br>          s[j] = ' ';<br>        }<br>      }<br>      istringstream iss(s);<br>      int t, c;<br>      double p;<br>      while (iss &gt;&gt; t &gt;&gt; c &gt;&gt; p) {<br>        v.PB(make4(t, i, c, p / total[i]));<br>        total[i] -= p;<br>      }<br>    }<br>    SORT(v);<br>    return dfs(0, false, false);<br>  }<br>  <br><br>};<br><br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003]<br>// Powered by CodeProcessor<br></td>