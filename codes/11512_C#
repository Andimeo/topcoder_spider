<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections;<br>using System.Collections.Generic;<br>using System.Collections.Specialized;<br>using System.Text;<br>using System.Text.RegularExpressions;<br> <br> <br>public class Chimney<br>{<br>  public static long MOD = 1000000007;<br>  public static int fourbits = 15;<br> <br>  public int countWays(long n)<br>  {<br>    List&lt;int&gt; valid = new List&lt;int&gt;();<br>    for(int i = 0; i &lt; (1&lt;&lt;12); i++)<br>      if(isValid(i))<br>  valid.Add(i);<br>    long[,] mat = new long[valid.Count, valid.Count];<br>    foreach(int i in valid)<br>      {<br>  for(int j = 0; j &lt; 12; j++)<br>    {<br>      if((i &amp; (1&lt;&lt;j)) &gt; 0) continue;<br>      int newmask = i | (1&lt;&lt;j);<br>      if((newmask &amp; fourbits) == fourbits)<br>        newmask /= 16;<br>      if(valid.Contains(newmask))<br>        {<br>    mat[valid.IndexOf(i), valid.IndexOf(newmask)] += 1;<br>        }<br>    }<br>      }<br>    long[,] ret = MatrixPower(mat, 4L * n);<br>    return (int)ret[0,0];<br>  }<br> <br>  public bool isValid(int mask)<br>  {<br>    int[][] depend = new int[][] { new int[] {}, new int[] {}, new int[] {}, new int[] {},<br>           new int[] { 3, 0 }, new int[] { 0, 1 }, new int[] { 1, 2 }, new int[] { 2, 3 },<br>           new int[] { 7, 4 }, new int[] { 4, 5 }, new int[] { 5, 6 }, new int[] { 6, 7 }};<br>    if((mask &amp; fourbits) == fourbits) return false;<br>    for(int i = 0; i &lt; 12; i++)<br>      if((mask &amp; (1 &lt;&lt; i)) &gt; 0)<br>  for(int j = 0; j &lt; depend[i].Length; j++)<br>    if((mask &amp; (1 &lt;&lt; depend[i][j])) == 0)<br>      return false;<br>    return true;<br>  }<br> <br>    #region "Matrix"<br>    public static long[,] MatrixMultiply(long[,] mat1, long[,] mat2)<br>    {<br>        if (mat1.GetLength(1) != mat2.GetLength(0)) return null;<br>        long[,] ret = new long[mat1.GetLength(0), mat2.GetLength(1)];<br>        for (int i = 0; i &lt; ret.GetLength(0); i++)<br>            for (int j = 0; j &lt; ret.GetLength(1); j++)<br>                for (int k = 0; k &lt; mat1.GetLength(1); k++)<br>      ret[i, j] = (ret[i, j] + mat1[i, k] * mat2[k, j]) % MOD;<br>        return ret;<br>    }<br> <br>    public static long[,] MatrixPower(long[,] matrix, long p)<br>    {<br>        if (p == 0)<br>        {<br>            long[,] ret = new long[matrix.GetLength(0), matrix.GetLength(0)];<br>            for (int i = 0; i &lt; matrix.GetLength(0); i++)<br>                ret[i, i] = 1;<br>            return ret;<br>        }<br>        else if (p == 1)<br>        {<br>            return matrix;<br>        }<br>        else<br>        {<br>            long[,] rec = MatrixPower(matrix, p / 2);<br>            long[,] ret = MatrixMultiply(rec, rec);<br>            if (p % 2 != 0)<br>                ret = MatrixMultiply(ret, matrix);<br>            return ret;<br>        }<br>    }<br>    #endregion<br> <br> <br>}<br>//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!<br></td>