<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;iostream&gt;<br>#include &lt;sstream&gt;<br>#include &lt;vector&gt;<br>#include &lt;string&gt;<br>#include &lt;stack&gt;<br>#include &lt;queue&gt;<br>#include &lt;set&gt;<br>#include &lt;map&gt;<br>#include &lt;utility&gt;<br>#include &lt;complex&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;iterator&gt;<br>#include &lt;numeric&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cstddef&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstring&gt;<br>#include &lt;climits&gt;<br>#include &lt;cassert&gt;<br><br>using namespace std;<br><br>#define RA(x) (x).begin(), (x).end()<br>#define SZ(x) (int((x).size()))<br>#define FE(i, x) for (__typeof((x).begin()) i = (x).begin(); i != (x).end(); ++i)<br><br>typedef long long ll;<br>typedef pair&lt;int, int&gt; pii;<br>typedef complex&lt;double&gt; pnt;<br>typedef vector&lt;int&gt; vi;<br>typedef vector&lt;ll&gt; vll;<br>typedef vector&lt;string&gt; vs;<br><br>template&lt;typename T&gt;<br>static T gcd(T a, T b) { return b ? gcd(b, a % b) : a; }<br><br>template&lt;typename T, typename M&gt;<br>static T mod(T a, M m)<br>{<br>    a %= m;<br>    if (a &lt; 0) a += m;<br>    return a;<br>}<br><br>template&lt;typename T&gt;<br>static T inverse(T a, T m)<br>{<br>    a = mod(a, m);<br>    if (a == 1) return 1;<br>    else return mod((1 - inverse(m, a) * m) / a, m);<br>}<br><br>static inline double dot(const pnt &amp;a, const pnt &amp;b) { return real(conj(a) * b); }<br>static inline double cross(const pnt &amp;a, const pnt &amp;b) { return imag(conj(a) * b); }<br>static inline double cross(const pnt &amp;a, const pnt &amp;b, const pnt &amp;c)<br>{<br>    return cross(b - a, c - a);<br>}<br><br>template&lt;typename T&gt;<br>static void splitstr(const string &amp;s, vector&lt;T&gt; &amp;out)<br>{<br>    out.clear();<br>    istringstream in(s);<br>    copy(istream_iterator&lt;T&gt;(in), istream_iterator&lt;T&gt;(), back_inserter(out));<br>}<br><br>class OrthogonalAnagram<br>{<br>public:<br>    bool has_sol(const string &amp;s, const string &amp;letters)<br>    {<br>        int freq[26] = {};<br>        int L = SZ(s);<br>        assert(SZ(letters) == L);<br>        for (int i = 0; i &lt; SZ(s); i++)<br>        {<br>            int x = s[i] - 'a';<br>            freq[x]++;<br>        }<br>        for (int i = 0; i &lt; SZ(letters); i++)<br>        {<br>            int x = letters[i] - 'a';<br>            freq[x]++;<br>            if (freq[x] &gt; L)<br>                return false;<br>        }<br>        return true;<br>    }<br><br>    string recurse(string s, string letters)<br>    {<br>        cout &lt;&lt; s &lt;&lt; ' ' &lt;&lt; letters &lt;&lt; '\n';<br>        int L = SZ(letters);<br>        sort(RA(letters));<br>        if (!L) return "";<br>        for (int i = 0; i &lt; L; i++)<br>        {<br>            if (letters[i] == s[0])<br>                continue;<br>            string s2 = s.substr(1, L - 1);<br>            string letters2 = letters.substr(0, i) + letters.substr(i + 1);<br>            if (has_sol(s2, letters2))<br>            {<br>                string ans = recurse(s2, letters2);<br>                ans = letters[i] + ans;<br>                return ans;<br>            }<br>        }<br>        assert(0);<br>        return "";<br>    }<br><br>    string solve(string S)<br>    {<br>        if (S.empty()) return "";<br>        if (!has_sol(S, S))<br>            return "";<br>        return recurse(S, S);<br>    }<br>};<br><br><br><br>// Powered by FileEdit<br></td>