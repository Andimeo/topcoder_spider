<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Text;<br>using System.Text.RegularExpressions;<br>using System.Collections;<br>using System.Collections.Generic;<br><br>public class RequiredSubstrings<br>{<br>    int[,] next;<br>    int[] sub;<br>    long[, ,] dp;<br>    int[] bits;<br>    long mod = 1000000009;<br>    int C;<br>    public int solve(string[] words, int C, int L)<br>    {<br>        this.C = C;<br>        Dictionary&lt;string, int&gt; all = new Dictionary&lt;string, int&gt;();<br>        foreach (string x in words)<br>            for (int len = 0; len &lt;= x.Length; len++)<br>            {<br>                string cur = x.Substring(0, len);<br>                if (!all.ContainsKey(cur))<br>                    all[cur] = all.Count;<br>            }<br>        next = new int[all.Count, 26];<br>        dp = new long[all.Count, L + 1, 1 &lt;&lt; words.Length];<br>        for (int i = 0; i &lt; all.Count; i++)<br>            for (int len = 0; len &lt;= L; len++)<br>                for (int set = 0; set &lt; 1 &lt;&lt; words.Length; set++)<br>                    dp[i, len, set] = -1;<br>        sub = new int[all.Count];<br>        bits = new int[1 &lt;&lt; words.Length];<br>        for (int i = 1; i &lt; bits.Length; i++)<br>            bits[i] = 1 + bits[i &amp; (i - 1)];<br><br>        foreach (KeyValuePair&lt;string, int&gt; p in all)<br>        {<br>            string cur = p.Key;<br>            int ind = 0;<br>            foreach (string x in words)<br>            {<br>                if (cur.IndexOf(x) &gt;= 0)<br>                    sub[p.Value] |= 1 &lt;&lt; ind;<br>                ind++;<br>            }<br>            for (char c = 'a'; c &lt;= 'z'; c++)<br>            {<br>                string s = cur + c;<br>                while (true)<br>                {<br>                    if (all.ContainsKey(s))<br>                    {<br>                        next[p.Value, c - 'a'] = all[s];<br>                        break;<br>                    }<br>                    s = s.Substring(1);<br>                }<br>            }<br>        }<br>        long res = go(0, L, 0);<br>        return (int)res;<br><br>    }<br><br>    private long go(int x, int rem, int set)<br>    {<br>        if (dp[x, rem, set] != -1)<br>            return dp[x, rem, set];<br>        long res = 0;<br>        if (rem == 0)<br>        {<br>            if (bits[set] == C)<br>                res = 1;<br>            return dp[x, rem, set] = res;<br>        }<br>        for (int c = 0; c &lt; 26; c++)<br>        {<br>            int nx = next[x, c];<br>            res += go(nx, rem - 1, set | sub[nx]);<br>            if (res &gt;= mod)<br>                res -= mod;<br>        }<br>        return dp[x, rem, set] = res;<br>    }<br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by CodeProcessor<br></td>