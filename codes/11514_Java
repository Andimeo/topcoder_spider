<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>import java.util.regex.*;<br>import java.text.*;<br>import java.math.*;<br>import java.awt.geom.*;<br> <br>public class RequiredSubstrings<br>{<br>  final int mod = 1000000009;<br> <br>  public int solve(String[] s, int C, int L) {<br>    int m = s.length;<br>    HashSet&lt;String&gt; words = new HashSet&lt;String&gt;();<br>    for (int i = 0; i &lt; m; i++)<br>      words.add(s[i]);<br>    TreeSet&lt;String&gt; ss = new TreeSet&lt;String&gt;();<br>    for (int i = 0; i &lt; m; i++)<br>      for (int j = 0; j &lt;= s[i].length(); j++)<br>        ss.add(s[i].substring(0, j));<br>    String[] sss = ss.toArray(new String[] {});<br> <br>    int t = sss.length;<br> <br>    int[][] next = new int[t][26];<br>    int[] newWords = new int[t];<br>    for (int i = 0; i &lt; t; i++) {<br>      for (int j = 0; j &lt; 26; j++) {<br>        String s1 = sss[i] + (char) ('a' + j);<br>        int ind = 0, len = 0;<br>        for (int k = 1; k &lt; t; k++)<br>          if (s1.endsWith(sss[k])) {<br>            if (sss[k].length() &gt; len) {<br>              ind = k;<br>              len = sss[k].length();<br>            }<br>          }<br>        next[i][j] = ind;<br>      }<br>      for (int j = 0; j &lt; s.length; j++)<br>        if (sss[i].endsWith(s[j]))<br>          newWords[i] |= 1 &lt;&lt; j;<br>    }<br> <br>    long[][][] d = new long[2][t][1 &lt;&lt; m];<br>    int step = 0;<br>    d[0][0][0] = 1;<br>    for (int num = 0; num &lt; L; num++) {<br>      for (int j = 0; j &lt; t; j++)<br>        Arrays.fill(d[step ^ 1][j], 0);<br>      for (int last = 0; last &lt; t; last++) {<br>        for (int mask = 0; mask &lt; 1 &lt;&lt; m; mask++) {<br>          long res = d[step][last][mask];<br>          if (res == 0)<br>            continue;<br>          for (int i = 0; i &lt; 26; i++) {<br>            int nxt = next[last][i];<br>            int mask2 = mask | newWords[nxt];<br>            d[step ^ 1][nxt][mask2] = (d[step ^ 1][nxt][mask2] + res)<br>                % mod;<br>          }<br>        }<br>      }<br>      step ^= 1;<br>    }<br>    long ans = 0;<br>    for (int i = 0; i &lt; 1 &lt;&lt; m; i++) {<br>      int j = 0;<br>      int ii = i;<br>      while (ii &gt; 0) {<br>        j += ii % 2;<br>        ii /= 2;<br>      }<br>      if (j == C)<br>        for (int tt = 0; tt &lt; t; tt++)<br>          ans = (ans + d[step][tt][i]) % mod;<br>    }<br>    return (int)ans;<br>  }<br>  <br>  <br>}<br>//Powered by [KawigiEdit] 2.0!<br></td>