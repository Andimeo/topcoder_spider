<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>import java.math.BigInteger;<br><br>public class EventOrder {<br>  static final long MODULO = 1000000009;<br><br>  public int getCount(int longEvents, int instantEvents) {<br>    int maxDifferentTimes = longEvents * 2 + instantEvents;<br>    long[] longWays = new long[maxDifferentTimes + 1];<br>    long[] inv = new long[maxDifferentTimes + 1];<br>    for (int i = 1; i &lt; inv.length; ++i) {<br>      inv[i] = BigInteger.valueOf(i).modInverse(BigInteger.valueOf(MODULO)).longValue();<br>    }<br>    for (int i = 0; i &lt;= maxDifferentTimes; ++i) {<br>      int numPairs = i * (i - 1) / 2;<br>      longWays[i] = pow(numPairs, longEvents) * pow(i, instantEvents) % MODULO;<br>      long comb = 1;<br>      for (int j = 0; j &lt; i; ++j) {<br>        longWays[i] = (longWays[i] - longWays[j] * comb % MODULO + MODULO) % MODULO;<br>        if (j + 1 &lt; i) {<br>          comb = comb * (i - j) % MODULO * inv[j + 1] % MODULO;<br>        }<br>      }<br>    }<br>    long res = 0;<br>    for (long x : longWays) res = (res + x) % MODULO;<br>    return (int) res;<br>  }<br><br>  long pow(long a, int k) {<br>    if (k == 0) return 1;<br>    if (k % 2 == 0) {<br>      return pow(a * a % MODULO, k / 2);<br>    } else {<br>      return a * pow(a, k - 1) % MODULO;<br>    }<br>  }<br>}<br><br><br>// Powered by FileEdit<br></td>