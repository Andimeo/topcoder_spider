<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;cstring&gt;<br>#include &lt;iostream&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cctype&gt;<br>#include &lt;numeric&gt;<br>#include &lt;iterator&gt;<br>#include &lt;utility&gt;<br>#include &lt;sstream&gt;<br>#include &lt;map&gt;<br>#include &lt;list&gt;<br>#include &lt;queue&gt;<br><br>using namespace std;<br><br>typedef long long LL;<br>typedef vector&lt;int&gt; VI;<br>typedef vector&lt;VI&gt; VVI;<br>typedef pair&lt;LL,LL&gt; PII;<br>typedef vector&lt;PII&gt; VPII;<br>typedef vector&lt;string&gt; VS;<br>typedef vector&lt;double&gt; VD;<br><br>#define REP(i,n) for (int i = 0; i &lt; (n); ++i)<br>#define FOR(i,a,b) for (int i = (a); i &lt;= (b); ++i)<br>#define FORD(i,a,b) for (int i = (a); i &gt;= (b); --i)<br>#define FOREACH(it,X) for (__typeof((X).begin()) it = (X).begin(); it != (X).end(); ++it)<br>#define PB push_back<br>#define MP make_pair<br>#define ST first<br>#define ND second<br>#define ALL(X) (X).begin(), (X).end()<br>#define SIZE(X) ((int)(X).size())<br><br>void wypiszVI(const VI &amp;v){<br>  printf("{");<br>  REP(i,SIZE(v)) {<br>    if (i) printf(",");<br>    printf("%d",v[i]);<br>  }<br>  puts("}");<br>}<br><br>void wypiszVS(const VS &amp;v){<br>  printf("{\n");<br>  REP(i,SIZE(v))  printf("\"%s\",\n",v[i].c_str());<br>  printf("}\n");<br>}<br><br>const int N = 2600;<br>const int K = 2;<br>LL hasz[N][K];<br>LL potega[N][K];<br><br>const int P1 = 1000000007;<br>const int P2 = 123123127;<br><br>void init_hasze(int n, string s){<br>  int P[] = {P1,P2};<br>  REP(j,2){<br>    FORD(i,n-1,0) hasz[i][j] = hasz[i+1][j] * P[j] + s[i];<br>  }<br><br>  REP(j,2){<br>    potega[0][j] = 1;<br>    FOR(i,1,N-1) potega[i][j] = potega[i-1][j] * P[j];<br>  }<br>}<br><br>int krotnosc[N];<br><br>LL daj_hasz(int i,int d,int j){<br>  return hasz[i][j] - hasz[i+d][j] * potega[d][j];<br>}<br><br>void init_krotnosci(int n){<br>  FOR(d,1,n){<br>    VPII v;<br>    REP(i,n-(d-1)) v.PB(MP(daj_hasz(i,d,0),daj_hasz(i,d,1)));<br>    sort(ALL(v));<br><br>    int grupa = 1;<br>    PII last = v[0];<br>    int i = 1;<br>    while (i &lt; SIZE(v)){<br>      if (last == v[i]) grupa++;<br>      else {<br>        krotnosc[grupa]++;<br>        grupa = 1;<br>        last = v[i];<br>      }<br>      i++;<br>    }<br>    krotnosc[grupa]++;<br>  }<br>  REP(i,n+2) printf("krotnosc[%d]=%d\n",i,krotnosc[i]);<br>}<br><br>priority_queue&lt;int&gt; q;<br><br>LL huffman(int n){<br>  FOR(i,1,n) FOR(j,1,krotnosc[i]) q.push(-i);<br><br>  LL res = 0;<br>  while (SIZE(q) &gt; 1){<br>    int a = -q.top();<br>    q.pop();<br>    int b = -q.top();<br>    q.pop();<br>    res += a+b;<br>    q.push(-(a+b));<br>  }<br>  return res;<br>}<br><br>LL licz(string s){<br>  int n = SIZE(s);<br>  init_hasze(n,s);<br>  init_krotnosci(n);<br>  return huffman(n);<br>}<br><br>class GuessTheSubstring {<br>  public:<br>  double solve(vector &lt;string&gt; pieces) {<br>    VS pom;<br>    REP(i,50){<br>      string x;<br>      REP(j,50) x += string(1,'a'+rand()%1);<br>      pom.PB(x);<br>    }<br>    wypiszVS(pom);<br>    string s;<br>    FOREACH(it, pieces) s += *it;<br>    int n = SIZE(s);<br>    if (n == 1) return 0.0;<br>    return (double)licz(s) / (n * (n+1) / 2);<br>  }<br>};<br><br><br>// Powered by FileEdit<br></td>