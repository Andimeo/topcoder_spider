<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br><br>public class GuessTheSubstring {<br>  int[] allPr;<br>  int allPrCnt;<br>  double prOne;<br><br>  public double solve(String[] pieces) {<br>    StringBuilder b = new StringBuilder();<br>    for (String x : pieces) b.append(x);<br>    String input = b.toString();<br>   /*input = "";<br>    Random random = new Random(437154315413L);<br>    for (int i = 0; i &lt; 2500; ++i) {<br>      input += (char) ('a' + random.nextInt(26));<br>    }*/<br>    String[] suffixes = new String[input.length()];<br>    for (int i = 0; i &lt; input.length(); ++i) suffixes[i] = input.substring(i);<br>    Arrays.sort(suffixes);<br>    String prev = "";<br>    allPr = new int[input.length() * (input.length() + 1) / 2];<br>    prOne = 1.0 / allPr.length;<br>    allPrCnt = 0;<br>    int[] pos = new int[0];<br>    for (String suf : suffixes) {<br>      int common = 0;<br>      while (common &lt; prev.length() &amp;&amp; common &lt; suf.length() &amp;&amp; prev.charAt(common) == suf.charAt(common)) ++common;<br>      int[] npos = new int[suf.length()];<br>      for (int i = 0; i &lt; common; ++i) {<br>        npos[i] = pos[i];<br>      }<br>      for (int i = common; i &lt; suf.length(); ++i) {<br>        npos[i] = allPrCnt++;<br>      }<br>      for (int x : npos) allPr[x] += 1;<br>      pos = npos;<br>      prev = suf;<br>    }<br>    {<br>      int[] tmp = new int[allPrCnt];<br>      System.arraycopy(allPr, 0, tmp, 0, allPrCnt);<br>      allPr = tmp;<br>    }<br>    Arrays.sort(allPr);<br>    int allPrPos = 0;<br>    int[] created = new int[2 * allPrCnt + 100];<br>    int createdPos = 0;<br>    int createdCnt = 0;<br>    double res = 0;<br>    while (allPrCnt - allPrPos + createdCnt - createdPos &gt; 1) {<br>      int newPr = 0;<br>      if (allPrCnt == allPrPos) {<br>        newPr += created[createdPos++];<br>      } else if (createdCnt == createdPos) {<br>        newPr += allPr[allPrPos++];<br>      } else if (created[createdPos] &lt; allPr[allPrPos]) {<br>        newPr += created[createdPos++];<br>      } else {<br>        newPr += allPr[allPrPos++];<br>      }<br>      if (allPrCnt == allPrPos) {<br>        newPr += created[createdPos++];<br>      } else if (createdCnt == createdPos) {<br>        newPr += allPr[allPrPos++];<br>      } else if (created[createdPos] &lt; allPr[allPrPos]) {<br>        newPr += created[createdPos++];<br>      } else {<br>        newPr += allPr[allPrPos++];<br>      }<br>      created[createdCnt++] = newPr;<br>      res += newPr;<br>    }<br>    return res * prOne;<br>  }<br>}<br><br><br>// Powered by FileEdit<br></td>