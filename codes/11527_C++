<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;sstream&gt;<br>#include &lt;iostream&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;set&gt;<br>#include &lt;map&gt;<br>#include &lt;queue&gt;<br>using namespace std;<br>typedef pair&lt;int,int&gt; pii;<br>typedef long long ll;<br>ll gcd(ll x, ll y) { return y ? gcd(y, x%y): x; }<br>const int inf = 1000000009;<br>const int MOD = 1000000007;<br>#define SZ(s) ((int)s.size())<br>#define F0(i,n) for (i=0;i&lt;n;i++)<br>#define F1(i,n) for (i=1;i&lt;=n;i++)<br><br>ll modpow(ll x, ll n) {<br>  if (n == 0) return 1;<br>  if (n % 2 == 1) return modpow(x, n-1) * x % MOD;<br>  ll y = modpow(x, n/2);<br>  return (y * y) % MOD;<br>}<br><br>int i, j, k, m, n, l;<br>string ans, s, p;<br>int can[55];<br><br>/*<br>Sorry, I used this after submitting<br><br>string my_solve() {<br>  return ans;<br>}<br><br>string stupid() {<br>  string ans;<br>  return ans;<br>}<br><br>void stress() {<br>while (1) {<br>  // generate something<br>  string ans1 = my_solve();<br>  string ans2 = stupid();<br>  if (ans1 == ans2) {<br>    cout &lt;&lt; ".";<br>  } else {<br>    cout &lt;&lt; ans1 &lt;&lt; " " &lt;&lt; ans2 &lt;&lt; endl;<br>    return;<br>  }  <br>}<br>}<br>*/<br><br>int r[55][55];<br>int can_skip() {<br>  int i, j;<br>  m = SZ(p);<br>  memset(r,0,sizeof(r));<br>  r[0][0] = 1;<br>  F0(i,n) F0(j,m+1) if (r[i][j]) {<br>    int z = s[i] - '0';<br>    if (z != 0) {<br>      if (z - 1 + 'a' == p[j]) r[i+1][j+1] = 1;<br>      else r[i+1][j] = 1;<br>    }<br>    if (i+1 &lt; n) {<br>      z = 10*(s[i] - '0') + (s[i+1]-'0');<br>      if (z &gt;= 10 &amp;&amp; z &lt;= 26) {<br>        if (z - 1 + 'a' == p[j]) r[i+2][j+1] = 1;<br>        else r[i+2][j] = 1;<br>      }<br>    }<br>  }<br>  for (j = 0; j &lt; m; j++)<br>    if (r[n][j]) return 1;<br>  return 0;<br>}<br><br>struct DecodeDigits {<br>string solve(string D) {<br>  s = D;<br>  n = SZ(s);<br><br>  can[0] = 1;<br>  for (i = 0; i &lt; n; i++) if (can[i]) {<br>    int z = s[i] - '0';<br>    if (z != 0) {<br>      can[i+1] = 1;<br>    }<br>    if (i+1 &lt; n &amp;&amp; s[i] != '0') {<br>      z = 10*(s[i] - '0') + (s[i+1]-'0');<br>      if (z &gt;= 10 &amp;&amp; z &lt;= 26)<br>        can[i+2] = 1;<br>    }<br>  }<br>  if (!can[n]) return "NONE";<br>  ans = "";<br><br>  for (char c = 'a'; c &lt;= 'z'; c++) {<br>    int sg = 1;<br>    while (sg) {<br>      sg = 0;<br>      for (i = SZ(ans); i &gt;= 0; i--) {<br>        p = ans.substr(0, i) + string(1, c) + ans.substr(i);<br>        if (!can_skip()) {<br>          ans = p;<br>          sg = 1;<br>          break;<br>        }<br>      }<br>    }<br>  }<br><br>  return ans;  <br>}<br>};<br><br><br>// Powered by FileEdit<br></td>