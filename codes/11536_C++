<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;cstdio&gt;<br>#include &lt;cstring&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cmath&gt;<br><br>#include &lt;iostream&gt;<br>#include &lt;sstream&gt;<br>#include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;queue&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;functional&gt;<br>using namespace std;<br><br>#define all(x) (x).begin(),(x).end()<br>#define pb push_back<br>#define mp make_pair<br>#define sz size()<br>#define xx first<br>#define yy second<br><br>#define repeach(i,x) for(typeof(x.begin()) i=x.begin(); i!=x.end(); ++i)<br>#define repreach(i,x) for(typeof(x.rbegin()) i=x.rbegin(); i!=x.rend(); ++i)<br>#define rep(i,n) for(int i=0;i&lt;(n);++i)<br>#define repx(i,s,t) for(int i=(s);i&lt;(t);++i)<br>#define repr(i,n) for(int i=(n)-1;i&gt;=0;--i)<br>#define reprx(i,s,t) for(int i=(s)-1;i&gt;=(t);--i)<br><br>#define mset memset<br>#define mcpy memcpy<br>#define mclr(x,sz) mset(x,0,sz)<br><br>#define debug(x) cout&lt;#x&lt;&lt;": "&lt;&lt;x&lt;&lt;endl;<br><br>/*TEMPLATE-KM*/<br>#define MAXN 55<br>#define inf 1000000000<br>#define _clr(x) memset(x,0xff,sizeof(int)*n)<br><br>int kuhn_munkras(int m,int n,int mat[][MAXN],int* match1,int* match2){<br>  int s[MAXN],t[MAXN],l1[MAXN],l2[MAXN],p,q,ret=0,i,j,k;<br>  for (i=0;i&lt;m;i++)<br>    for (l1[i]=-inf,j=0;j&lt;n;j++)<br>      l1[i]=mat[i][j]&gt;l1[i]?mat[i][j]:l1[i];<br>  for (i=0;i&lt;n;l2[i++]=0);<br>  for (_clr(match1),_clr(match2),i=0;i&lt;m;i++){<br>    for (_clr(t),s[p=q=0]=i;p&lt;=q&amp;&amp;match1[i]&lt;0;p++)<br>      for (k=s[p],j=0;j&lt;n&amp;&amp;match1[i]&lt;0;j++)<br>        if (l1[k]+l2[j]==mat[k][j]&amp;&amp;t[j]&lt;0){<br>          s[++q]=match2[j],t[j]=k;<br>          if (s[q]&lt;0)<br>            for (p=j;p&gt;=0;j=p)<br>              match2[j]=k=t[j],p=match1[k],match1[k]=j;<br>        }<br>    if (match1[i]&lt;0){<br>      for (i--,p=inf,k=0;k&lt;=q;k++)<br>        for (j=0;j&lt;n;j++)<br>          if (t[j]&lt;0&amp;&amp;l1[s[k]]+l2[j]-mat[s[k]][j]&lt;p)<br>            p=l1[s[k]]+l2[j]-mat[s[k]][j];<br>      for (j=0;j&lt;n;l2[j]+=t[j]&lt;0?0:p,j++);<br>      for (k=0;k&lt;=q;l1[s[k++]]-=p);<br>    }<br>  }<br>  for (i=0;i&lt;m;i++)<br>    ret+=mat[i][match1[i]];<br>  return ret;<br>}<br>/*************/<br>int mat[MAXN][MAXN];<br>int mx[MAXN], my[MAXN];<br>class CuttingGrass {<br>public:<br>  int theMin(vector &lt;int&gt; init, vector &lt;int&gt; grow, int H) {<br>    int sum_i=0, sum_d=0;<br>    rep(i,init.sz) sum_i+=init[i];<br>    <br>    if(sum_i &lt;= H) return 0;<br>    rep(i,grow.sz) sum_d+=grow[i];<br>    rep(k,init.sz) {<br>      int d=k+1;<br>      mclr(mat, sizeof mat);<br>      rep(i, d) rep(j, init.sz)<br>        mat[i][j] = init[j]+(i+1)*grow[j];<br>      // rep(i, d)  { rep(j, init.sz) cout &lt;&lt; mat[i][j] &lt;&lt; " "; cout &lt;&lt; endl; }<br>      int kmv=kuhn_munkras(d, init.sz, mat, mx, my);<br>      <br>      // cout &lt;&lt; kmv &lt;&lt; " " &lt;&lt; sum_i+d*sum_d-kmv &lt;&lt; endl;<br>      if(sum_i+d*sum_d-kmv &lt;= H) return d;<br>    }<br>    return -1;<br>  }<br><br>};<br><br><br>// Powered by FileEdit<br>// Powered by CodeProcessor<br></td>