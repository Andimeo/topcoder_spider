<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br> <br>public class AdjacentSwaps {<br>    static final long MODULO = 1000000007;<br> <br>    long[][] cache;<br>    long[][] comb;<br> <br>  public int theCount(int[] p) {<br>        cache = new long[p.length + 1][p.length + 1];<br>        for (int i = 0; i &lt;= p.length; ++i) Arrays.fill(cache[i], -1);<br>        comb = new long[p.length + 1][p.length + 1];<br>        comb[0][0] = 1;<br>        for (int i = 1; i &lt;= p.length; ++i) {<br>            comb[i][0] = 1;<br>            for (int j = 1; j &lt;= p.length; ++j) {<br>                comb[i][j] = (comb[i - 1][j] + comb[i - 1][j - 1]) % MODULO;<br>            }<br>        }<br>    return (int) doit(p, 0, p.length);<br>  }<br> <br>    private long doit(int[] p, int start, int length) {<br>        if (length == 1) return 1;<br>        long stored = cache[start][length];<br>        if (stored &gt;= 0) return stored;<br>        long res = 0;<br>        for (int first = 0; first + 1 &lt; length; ++first) {<br>            int tmp = p[first];<br>            p[first] = p[first + 1];<br>            p[first + 1] = tmp;<br>            boolean ok = true;<br>            for (int i = 0; i &lt;= first; ++i)<br>                if (p[i] &gt; first) ok = false;<br>            for (int i = first + 1; i &lt; length; ++i)<br>                if (p[i] &lt;= first) ok = false;<br>            if (ok) {<br>                int[] a = new int[first + 1];<br>                for (int i = 0; i &lt;= first; ++i)<br>                    a[i] = p[i];<br>                int[] b = new int[length - first - 1];<br>                for (int i = first + 1; i &lt; length; ++i)<br>                    b[i - first - 1] = p[i] - first - 1;<br>                res = (res + doit(a, start, first + 1) * doit(b, start + first + 1, length - first - 1) % MODULO * comb[length - 2][first]) % MODULO;<br>            }<br>            tmp = p[first];<br>            p[first] = p[first + 1];<br>            p[first + 1] = tmp;<br>        }<br>        cache[start][length] = res;<br>        return res;<br>    }<br> <br>}<br> <br> <br>// Powered by FileEdit<br>// Powered by RETester [based on ExampleBuilder]<br>// Powered by CodeProcessor<br></td>