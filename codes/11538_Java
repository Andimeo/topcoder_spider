<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>import java.util.regex.*;<br>import java.text.*;<br>import java.math.*;<br>import java.awt.geom.*;<br> <br>public class ColorfulBoard<br>{<br>  public int theMin(String[] board) {<br>    int n = board.length, m = board[0].length();<br>    char[][] field = new char[n][m];<br>    for (int i = 0; i &lt; n; i++)<br>      for (int j = 0; j &lt; m; j++)<br>        field[i][j] = board[i].charAt(j);<br>    int x = doIt(field);<br>    field = new char[m][n];<br>    for (int i = 0; i &lt; n; i++)<br>      for (int j = 0; j &lt; m; j++)<br>        field[j][i] = board[i].charAt(j);<br>    int y = doIt(field);<br>    if (x == -1 &amp;&amp; y == -1)<br>      return -1;<br>    if (x == -1)<br>      return y;<br>    if (y == -1)<br>      return x;<br>    return Math.min(x, y);<br>  }<br> <br>  int doIt(char[][] brd) {<br>    int n = brd.length;<br>    int m = brd[0].length;<br>    boolean[][] matrix = new boolean[n + m][n + m];<br>    int ans = Integer.MAX_VALUE;<br>    int nn = n + m;<br>    cycle: for (int num = 0; num &lt; n; num++) {<br>      for (int i = 0; i &lt; nn; i++)<br>        Arrays.fill(matrix[i], false);<br>      int res = m;<br>      for (int i = 0; i &lt; n; i++) {<br>        int me = -1;<br>        for (int j = 0; j &lt; m; j++) {<br>          if (brd[i][j] != brd[num][j]) {<br>            matrix[i][j + n] = true;<br>            if (me == -1) {<br>              me = brd[i][j];<br>            } else if (me != brd[i][j])<br>              continue cycle;<br>          }<br>        }<br>        if (me != -1) {<br>          for (int j = 0; j &lt; m; j++)<br>            if (brd[i][j] != me) {<br>              matrix[j + n][i] = true;<br>            }<br>          res++;<br>        }<br>      }<br>      for (int k = 0; k &lt; nn; k++)<br>        for (int i = 0; i &lt; nn; i++)<br>          for (int j = 0; j &lt; nn; j++)<br>            matrix[i][j] |= matrix[i][k] &amp;&amp; matrix[k][j];<br>      for (int k = 0; k &lt; nn; k++)<br>        if (matrix[k][k])<br>          continue cycle;<br>      ans = Math.min(ans, res);<br>    }<br>    if (ans == Integer.MAX_VALUE)<br>      ans = -1;<br>    return ans;<br>  }<br>  <br>  <br>}<br>//Powered by [KawigiEdit] 2.0!<br></td>