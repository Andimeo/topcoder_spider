<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.Arrays;<br> <br>/**<br> * Built using CHelper plug-in<br> * Actual solution is at the top<br> * @author Johan Sannemo<br> */<br>public class SmallBricks31 {<br> <br> <br>  long[][] numWays = new long[1 &lt;&lt; 10][1 &lt;&lt; 10];<br>  long[][] current = new long[2][1 &lt;&lt; 10];<br> <br>  static int MOD = 1000000007;<br> <br>  public void recurse(int from, int idx, int pos, int left) {<br>    if (left != 0) recurse(from, idx + 1, pos, left - 1);<br>    else {<br>      numWays[from][pos] = (numWays[from][pos]+1)%MOD;<br>      return;<br>    }<br>    if (left &gt; 0 &amp;&amp; (from &amp; (1 &lt;&lt; idx)) != 0) {<br>      recurse(from, idx + 1, pos | (1 &lt;&lt; idx), left - 1);<br>      if (left &gt; 1 &amp;&amp; (from &amp; (1 &lt;&lt; (idx + 1))) != 0) {<br>        recurse(from, idx + 2, pos | (1 &lt;&lt; idx) | (1 &lt;&lt; (idx + 1)), left - 2);<br>      }<br>      if (left &gt; 2 &amp;&amp; (from &amp; (1 &lt;&lt; (idx + 2))) != 0){<br>        recurse(from, idx + 3, pos | (1 &lt;&lt; idx) | (1 &lt;&lt; (idx + 1)<br>            | (1 &lt;&lt; idx<br>            + 2)), left - 3);<br>      }<br>    }<br>  }<br> <br>  public int countWays(int w, int h) {<br>    for (int i = 0; i &lt; (1 &lt;&lt; w); i++) recurse(i, 0, 0, w);<br>    current[0][(1 &lt;&lt; w) - 1] = 1L;<br>    long ans = 0;<br>    for (int i = 0; i &lt;= h; i++) {<br>      int next = (i + 1) % 2;<br>      Arrays.fill(current[next], 0);<br>      int now = i % 2;<br>      for (int j = 1; j &lt; (1 &lt;&lt; w); j++) {<br>        ans += current[now][j];<br>        ans %= MOD;<br>        for (int k = 0; k &lt; (1 &lt;&lt; w); k++) {<br>          current[next][k] += (current[now][j]*numWays[j][k])%MOD;<br>          current[next][k] %= MOD;<br>        }<br>      }<br>    }<br>    ans %= MOD;<br>    return (int)ans;<br>  }<br> <br> <br>}<br> <br> <br> <br>// Powered by FileEdit<br>// Powered by moj 4.16 [modified TZTester]<br>// Powered by CodeProcessor<br></td>