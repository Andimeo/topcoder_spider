<td class="problemText" colspan="8" valign="middle" align="left">
            Public Class ThreeTeleports<br>  Public Function shortestDistance(xMe As Integer, yMe As Integer, xHome As Integer, yHome As Integer, teleports As String()) As Integer<br>    Dim tx1 As Integer, ty1 As Integer, tx2 As Integer, ty2 As Integer<br>    Dim MinDist As Long = D(xMe, yMe, xHome, yHome)<br>    For a As Integer = -3 To 3<br>      For b As Integer =-3 To 3<br>        For c As Integer =-3 To 3<br>          Dim CurDist As Long<br>            CurDist = 0<br>          Dim cx As Integer<br>            cx = xMe<br>          Dim cy As Integer<br>            cy = yMe<br>          If a &lt;&gt; 0 Then<br>            P(teleports(Math.Abs(a)-1), tx1, ty1, tx2, ty2)<br>            if a &lt; 0 Then<br>              CurDist = CurDist + D(cx, cy, tx2, ty2) + 10<br>              cx = tx1<br>              cy = ty1<br>            Else<br>              CurDist = CurDist + D(cx, cy, tx1, ty1) + 10<br>              cx = tx2<br>              cy = ty2<br>            End If<br>          End If<br>          If b &lt;&gt; 0 Then<br>            P(teleports(Math.Abs(b)-1), tx1, ty1, tx2, ty2)<br>            if b &lt; 0 Then<br>              CurDist = CurDist + D(cx, cy, tx2, ty2) + 10<br>              cx = tx1<br>              cy = ty1<br>            Else<br>              CurDist = CurDist + D(cx, cy, tx1, ty1) + 10<br>              cx = tx2<br>              cy = ty2<br>            End If<br>          End If<br>          If c &lt;&gt; 0 Then<br>            P(teleports(Math.Abs(c)-1), tx1, ty1, tx2, ty2)<br>            if c &lt; 0 Then<br>              CurDist = CurDist + D(cx, cy, tx2, ty2) + 10<br>              cx = tx1<br>              cy = ty1<br>            Else<br>              CurDist = CurDist + D(cx, cy, tx1, ty1) + 10<br>              cx = tx2<br>              cy = ty2<br>            End If<br>          End If<br>          CurDist = CurDist + D(cx, cy, xHome, yHome)<br>          MinDist = M(MinDist, CurDist)<br>        Next c<br>      Next b<br>    Next a<br>    Return MinDist<br>  End Function<br>  Public Sub P(teleport As String, ByRef x1 As Integer, ByRef y1 As Integer, ByRef x2 As Integer, ByRef y2 As Integer)<br>    Dim t As Object = Split(teleport, " ")<br>    x1 = CInt(t(0))<br>    y1 = CInt(t(1))<br>    x2 = CInt(t(2))<br>    y2 = CInt(t(3))<br>  End Sub<br>  Public Function D(x1 As Integer, y1 As Integer, x2 As Integer, y2 As Integer) As Long<br>    Return Math.Abs(x2-x1) + Math.Abs(y2-y1)<br>  End Function<br>  Public Function M(x As Long, y As Long) As Long<br>    Return IIf(x&lt;y, x, y)<br>  End Function<br>End Class<br></td>