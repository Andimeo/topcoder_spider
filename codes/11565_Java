<td class="problemText" colspan="8" valign="middle" align="left">
            /**<br> * Built using CHelper plug-in<br> * Actual solution is at the top<br> */<br>public class CheckerFreeness {<br>    static class Point {<br>        int x;<br>        int y;<br> <br>        Point(int x, int y) {<br>            this.x = x;<br>            this.y = y;<br>        }<br>    }<br> <br>  public String isFree(String[] whiteX, String[] whiteY, String[] blackX, String[] blackY) {<br>        int[] wx = buildList(whiteX);<br>        int[] wy = buildList(whiteY);<br>        int[] bx = buildList(blackX);<br>        int[] by = buildList(blackY);<br>        Point[] white = new Point[wx.length];<br>        for (int i = 0; i &lt; white.length; ++i) white[i] = new Point(wx[i], wy[i]);<br>        Point[] black = new Point[bx.length];<br>        for (int i = 0; i &lt; black.length; ++i) black[i] = new Point(bx[i], by[i]);<br>        boolean full = true;<br>        for (int i = 0; i &lt; white.length; ++i)<br>            for (int j = i + 1; j &lt; white.length; ++j)<br>                if (allSameSide(white[i], white[j], black) == -2)<br>                    full = false;<br>        if (full) return "YES";<br>        full = true;<br>        for (int i = 0; i &lt; black.length; ++i)<br>            for (int j = i + 1; j &lt; black.length; ++j)<br>                if (allSameSide(black[i], black[j], white) == -2)<br>                    full = false;<br>        if (full) return "YES";<br>        for (int i = 0; i &lt; white.length; ++i)<br>            for (int j = 0; j &lt; black.length; ++j) {<br>                int ws = allSameSide(white[i], black[j], white);<br>                int bs = allSameSide(white[i], black[j], black);<br>                if (ws == -2 || bs == -2) continue;<br>                if (ws == 0 || bs == 0)<br>                    return "YES";<br>                if (ws != bs)<br>                    return "YES";<br>            }<br>        return "NO";<br>  }<br> <br>    private int allSameSide(Point a, Point b, Point[] cs) {<br>        int res = 0;<br>        for (Point c : cs) {<br>            long z = (c.x - a.x) * (long) (b.y - a.y) - (c.y - a.y) * (long) (b.x - a.x);<br>            if (z == 0) continue;<br>            if (z &gt; 0) {<br>                if (res == -1) return -2;<br>                res = 1;<br>            } else if (z &lt; 0) {<br>                if (res == 1) return -2;<br>                res = -1;<br>            }<br>        }<br>        return res;<br>    }<br> <br>    private int[] buildList(String[] strings) {<br>        StringBuilder b = new StringBuilder();<br>        for (String x : strings) b.append(x);<br>        String[] parts = b.toString().split(" ", -1);<br>        int[] res = new int[parts.length];<br>        for (int i = 0; i &lt; parts.length; ++i) res[i] = Integer.parseInt(parts[i]);<br>        return res;<br>    }<br>}<br></td>