<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections;<br>using System.Collections.Generic;<br>using System.Text;<br><br>public class RangeSquaredSubsets {<br><br>    Dictionary&lt;long, bool&gt; dic;<br><br>    public long countSubsets(int nlow, int nhigh, int[] x, int[] y)<br>    {<br>        dic = new Dictionary&lt;long, bool&gt;();<br>        int i, j, k, l, m;<br>        int len = x.Length;<br>        int[] sx = (int[])x.Clone();<br>        int[] sy = (int[])y.Clone();<br>        Array.Sort(sx);<br>        Array.Sort(sy);<br>        for (i = 0; i &lt; len; i++)<br>        {<br>            for (j = i; j &lt; len; j++)<br>            {<br>                int xmin = Math.Max(nlow, sx[j] - sx[i]);<br>                int xmax = nhigh;<br>                if (i != 0 &amp;&amp; j != len - 1)<br>                {<br>                    xmax = Math.Min(sx[j + 1] - sx[i - 1] - 1, xmax);<br>                }<br>                if (xmin &gt; xmax) continue;<br>                for (k = 0; k &lt; len; k++)<br>                {<br>                    for (l = k; l &lt; len; l++)<br>                    {<br>                        int ymin = Math.Max(nlow, sy[l] - sy[k]);<br>                        int ymax = nhigh;<br>                        if (k != 0 &amp;&amp; l != len - 1)<br>                        {<br>                            ymax = Math.Min(sy[l + 1] - sy[k - 1] - 1, ymax);<br>                        }<br>                        if (ymin &gt; ymax) continue;<br>                        if (xmax &lt; ymin) continue;<br>                        if (ymax &lt; xmin) continue;<br>                        long bit = 0;<br>                        for (m = 0; m &lt; len; m++)<br>                        {<br>                            if (x[m] &gt;= sx[i] &amp;&amp; x[m] &lt;= sx[j] &amp;&amp; y[m] &gt;= sy[k] &amp;&amp; y[m] &lt;= sy[l]) bit |= ((long)1 &lt;&lt; m);<br>                        }<br>                        if (bit == 0) continue;<br>                        //if (!dic.ContainsKey(bit)) Console.WriteLine(bit + " " + i + " " + j + " " + k + " " + l + " " + xmin + " " + xmax + " " + ymin + " " + ymax);<br>                        dic[bit] = true;<br>                    }<br>                }<br>            }<br>        }<br>        return dic.Count;<br>    }<br><br><br><br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003] [modified for C# by Petr]<br>// Powered by CodeProcessor<br></td>