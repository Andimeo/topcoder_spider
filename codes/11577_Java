<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>public class RangeSquaredSubsets {<br> <br>    public long countSubsets(int nlow, int nhigh, int[] x, int[] y) {    <br>        int n = x.length;<br>        nlow *= 2;<br>        nhigh *= 2;<br>        for (int i = 0; i &lt; n; i++) {<br>            x[i] *= 2;<br>            y[i] *= 2;<br>        }<br>        Set&lt;Long&gt; set = new HashSet&lt;Long&gt;();<br>        for (int xv : x)<br>            for (int yv : y) {<br>                Set&lt;Integer&gt; lens = new HashSet&lt;Integer&gt;();<br>                lens.add(nlow);<br>                lens.add(nhigh);<br>                for (int x2 : x) {<br>                    int dx = Math.abs(xv - x2);<br>                    if (dx &gt;= nlow &amp;&amp; dx &lt;= nhigh)<br>                        lens.add(dx);<br>                }<br>                for (int y2 : y) {<br>                    int dy = Math.abs(yv - y2);<br>                    if (dy &gt;= nlow &amp;&amp; dy &lt;= nhigh)<br>                        lens.add(dy);<br>                }<br>                for (int l : lens) {<br>                    for (int shiftx = -1; shiftx &lt;= 1; shiftx ++) <br>                        for (int shifty = -1; shifty &lt;= 1; shifty++) {<br>                            for (int dx = -1; dx &lt;= 1; dx += 2)<br>                                for (int dy = -1; dy &lt;= 1; dy += 2) {<br>                                    int lx = Math.min(xv, xv + dx * l) + shiftx;<br>                                    int rx = Math.max(xv, xv + dx * l) + shiftx;<br>                                    int ly = Math.min(yv, yv + dy * l) + shifty;<br>                                    int ry = Math.max(yv, yv + dy * l) + shifty;<br>                                    long mask = 0;<br>                                    for (int k = 0; k &lt; n; k++) {<br>                                        if (x[k] &gt;= lx &amp;&amp; x[k] &lt;= rx &amp;&amp; y[k] &gt;= ly &amp;&amp; y[k] &lt;= ry) {<br>                                            mask |= 1L &lt;&lt; k;<br>                                        }<br>                                    }<br>                                    if (mask &gt; 0)<br>                                        set.add(mask);<br>                                }<br>                        }<br>                }<br>            }<br>        return set.size();<br>    }<br> <br>    void debug(Object...os) {<br>        System.err.println(Arrays.deepToString(os));<br>    }<br>}<br> <br> <br> <br>// Powered by FileEdit<br>// Powered by moj 4.16 [modified TZTester]<br>// Powered by CodeProcessor<br></td>