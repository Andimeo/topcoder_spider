<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;iostream&gt;<br>#include &lt;sstream&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;numeric&gt;<br>#include &lt;set&gt;<br>#include &lt;map&gt;<br>#include &lt;queue&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cstring&gt;<br>using namespace std;<br><br>#define FORE(it, c) for(typeof(c.begin()) it=c.begin(); it!=c.end(); it++)<br><br>int inside[50][50][50];<br><br>class PointErasing {<br>  public:<br>  int between(int a, int b, int c){<br>    return a&lt;b &amp;&amp; b&lt;c || a&gt;b &amp;&amp; b&gt;c;<br>  }<br>  int insidef(int ax, int ay, int bx, int by, int cx, int cy){<br>    return between(ax, bx, cx) &amp;&amp; between(ay, by, cy);<br>  }<br>  vector &lt;int&gt; getOutcomes(vector &lt;int&gt; y) {<br>    memset(inside, 0, sizeof(inside));<br>    int candie[50]={0}, mustdie[50]={0};<br>    int n=y.size();<br>    if(n&lt;3)<br>      return vector&lt;int&gt;(1, n);<br>    for(int i=0; i&lt;n; i++){<br>      for(int j=0; j&lt;n; j++)<br>      for(int k=0; k&lt;n; k++){<br>        inside[i][j][k]=insidef(j, y[j], i, y[i], k, y[k]);<br>        if(inside[i][j][k])<br>          candie[i]=1;<br>      }<br>    }<br>    for(int i=0; i&lt;n; i++)<br>    for(int j=0; j&lt;n; j++)<br>    for(int k=0; k&lt;n; k++)<br>      if(!candie[j] &amp;&amp; !candie[k] &amp;&amp; inside[i][j][k])<br>        mustdie[i]=1;<br>    set&lt;long long&gt; masks;<br>    for(int j=0; j&lt;n; j++)<br>    for(int k=0; k&lt;n; k++){<br>      long long mask=0;<br>      for(int i=0; i&lt;n; i++)<br>        if(!mustdie[i] &amp;&amp; inside[i][j][k])<br>          mask|=1ll&lt;&lt;i;<br>      masks.insert(mask);<br>    }<br>    set&lt;pair&lt;long long, int&gt; &gt; poss;<br>    poss.insert(make_pair(0ll, 0));<br>    FORE(it, masks){<br>      FORE(p, poss){<br>        long long mask=*it;<br>        if(p-&gt;first==0 || (mask&amp;p-&gt;first)!=p-&gt;first){<br>          poss.insert(make_pair(mask, p-&gt;second+__builtin_popcountll(mask&amp;~p-&gt;first)));<br>        }<br>      }<br>    }<br>    int found[51]={0};<br>    FORE(p, poss)<br>      found[p-&gt;second]=1;<br>    vector&lt;int&gt; res;<br>    int must=0;<br>    for(int i=0; i&lt;n; i++)<br>      if(mustdie[i])<br>        must++;<br>    for(int i=50; i&gt;=0; i--)<br>      if(found[i])<br>        res.push_back(n-(must+i));<br>    return res;<br>  }<br>  <br><br>};<br><br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003]<br>// Powered by CodeProcessor<br></td>