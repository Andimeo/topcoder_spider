<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;iostream&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;queue&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;complex&gt;<br>#include &lt;cassert&gt;<br>#include &lt;sstream&gt;<br><br>using namespace std;<br><br>typedef pair&lt;int, int&gt; PII;<br>typedef long long LL;<br>typedef long double LD;<br><br>#define MP make_pair<br>#define ST first<br>#define ND second<br><br>#define VAR(i,x) __typeof(x) i = (x)<br>#define FORE(i,x) for(VAR(i,(x).begin());i != (x).end(); ++i)<br>#define ZERO(x) memset(x, 0, sizeof(x))<br><br>int p[26];<br><br>int gp(int x) {<br>    if (p[x] != x) {<br>        p[x] = gp(p[x]);<br>    }<br>    return p[x];<br>}<br><br>string e[26][26]; // add this to go -&gt;<br><br>int n = 26;<br><br>void add_constraint(int u, int v, string s) {<br>    if (!e[u][v].empty() &amp;&amp; e[u][v] != s) {<br>        throw 0;<br>    }<br>    if (u == v &amp;&amp; !s.empty()) {<br>        throw 0;<br>    }<br>    e[u][v] = s;<br>}<br><br>void merge(int u, int v) {<br>    for (int i = 0; i &lt; n; ++i) {<br>        if (p[i] == i) {<br>            if (!e[i][v].empty()) {<br>                add_constraint(i, u, e[i][v]);<br>            }<br>            if (!e[v][i].empty()) {<br>                add_constraint(u, i, e[v][i]);<br>            }<br>        }<br>    }<br>    p[v] = u;<br>}<br><br>class StringEquations {<br>  public:<br>  int getMinimum(vector &lt;string&gt; equations) {<br>        try {<br>        for (int i = 0; i &lt; n; ++i) {<br>            p[i] = i;<br>            for (int j = 0; j &lt; n; ++j) {<br>                e[i][j] = "";<br>            }<br>        }<br>        FORE (it, equations) {<br>            stringstream ss(*it);<br>            string a, eq, b, pl;<br>            string s;<br>            ss &gt;&gt; a &gt;&gt; eq &gt;&gt; b &gt;&gt; pl &gt;&gt; s;<br>            int u = (int) (b[0] - 'A');<br>            int v = (int) (a[0] - 'A');<br>            add_constraint(u, v, s);<br>        }<br>    while (true) {<br>            bool change = false;<br>            for (int i = 0; i &lt; n; ++i) {<br>                if (p[i] == i) {<br>                    vector&lt;int&gt; ingoing;<br>                    for (int j = 0; j &lt; n; ++j) {<br>                        if (p[j] == j &amp;&amp; e[j][i] != "") {<br>                            ingoing.push_back(j);<br>                        }<br>                    }<br>                    if (ingoing.size() &gt; 1) {<br>                        change = true;<br>                        if (e[ingoing[0]][i].size() &gt; e[ingoing[1]][i].size()) {<br>                            swap(ingoing[0], ingoing[1]);<br>                        }<br>                        if (e[ingoing[1]][i].substr((int) e[ingoing[1]][i].size() - (int) e[ingoing[0]][i].size(), e[ingoing[0]][i].size()) != e[ingoing[0]][i]) {<br>                            throw 0;<br>                        }<br>                        if (e[ingoing[0]][i] == e[ingoing[1]][i]) {<br>                            merge(ingoing[0], ingoing[1]);<br>                            break;<br>                        } else {<br>                            add_constraint(ingoing[1], ingoing[0], e[ingoing[1]][i].substr(0, (int) e[ingoing[1]][i].size() - (int) e[ingoing[0]][i].size()));<br>                            e[ingoing[1]][i] = "";<br>                            break;<br>                        }<br>                    }<br>                }<br>            }<br>            if (!change) {<br>                break;<br>            }<br>        }<br>        int result = 0;<br>        for (int i = 0; i &lt; n; ++i) {<br>            if (p[i] == i) {<br>                vector&lt;bool&gt; visited(n, false);<br>                int c = i;<br>                int len = 0;<br>                while (true) {<br>                    if (visited[c]) {<br>                        throw 0;<br>                    }<br>                    visited[c] = true;<br>                    int pr = -1;<br>                    for (int j = 0; j &lt; n; ++j) {<br>                        if (p[j] == j &amp;&amp; e[j][c] != "") {<br>                            pr = j;<br>                            break;<br>                        }<br>                    }<br>                    if (pr == -1) {<br>                        break;<br>                    }<br>                    len += e[pr][c].size();<br>                    c = pr;<br>                }<br>                for (int j = 0; j &lt; n; ++j) {<br>                    if (gp(j) == i) {<br>                        result += len;<br>                    }<br>                }<br>            }<br>        }<br>        return result;<br>        } catch(...) {<br>            return -1;<br>        }<br>  }<br>};<br><br><br>// Powered by FileEdit<br></td>