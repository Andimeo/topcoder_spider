<td class="problemText" colspan="8" valign="middle" align="left">
            #include&lt;iostream&gt;<br>#include&lt;cstring&gt;<br>#include&lt;string&gt;<br>#include&lt;vector&gt;<br><br>using namespace std;<br><br>const int MAXN = 60;<br><br>string s[4];<br>string a;<br>long long f[MAXN][MAXN][MAXN][4];<br>int no = 0;<br><br>void dfs(int i1, int i2, int i3, int cur, int len, long long cnt, int c)<br>{<br>   ++no;<br>   //cout &lt;&lt; no &lt;&lt; ": " &lt;&lt; i1 &lt;&lt;' '&lt;&lt;i2&lt;&lt;' '&lt;&lt;i3&lt;&lt;' '&lt;&lt;cur&lt;&lt;' '&lt;&lt;len&lt;&lt;' '&lt;&lt;cnt&lt;&lt;' '&lt;&lt;c&lt;&lt;endl;<br>   int i;<br>   if (cur == 4)<br>   {<br>      f[i1][i2][i3][c] += cnt;<br>      return;<br>   }<br>   else if (cur == 3)<br>   {<br>      for (i=len; i&lt;a.size(); ++i)<br>      if ((i3 &gt;= s[3].size()) || (s[3][i3] != a[i]))<br>         return;<br>      else ++i3;<br>      dfs(i1, i2, i3, cur+1, a.size(), cnt, c);<br>   }<br>   else if (cur == 2)<br>   {<br>      dfs(i1, i2, i3, cur+1, len, cnt, c);<br>      for (i=len; i&lt;a.size(); ++i)<br>      if ((i2 &gt;= s[2].size()) || (s[2][i2] != a[i]))<br>         return;<br>      else<br>      {<br>         ++i2;<br>         dfs(i1, i2, i3, cur+1, i+1, cnt, c);<br>      }<br>   }<br>   else if (cur == 1)<br>   {<br>      dfs(i1, i2, i3, cur+1, len, cnt, c);<br>      for (i=len; i&lt;a.size(); ++i)<br>      if ((i1 &gt;= s[1].size()) || (s[1][i1] != a[i]))<br>      {<br>         //cout &lt;&lt; no &lt;&lt;": " &lt;&lt; i1 &lt;&lt; ' '&lt;&lt; s[1][i1] &lt;&lt; ' '&lt;&lt;a[i]&lt;&lt; endl;<br>         return;<br>      }<br>      else<br>      {<br>         ++i1;<br>         dfs(i1, i2, i3, cur+1, i+1, cnt, c);<br>      }<br>   }<br>}<br><br>class MagicalSquare<br>{<br>  public:<br>     long long getCount(vector &lt;string&gt; rowStrings, vector &lt;string&gt; columnStrings)<br>     {<br>        int n = rowStrings[0].size();<br>        int m = rowStrings[1].size();<br>        int k = rowStrings[2].size();<br>        s[1] = rowStrings[0];<br>        s[2] = rowStrings[1];<br>        s[3] = rowStrings[2];<br>        //cout &lt;&lt; n &lt;&lt; ' '&lt;&lt; m &lt;&lt;' '&lt;&lt; k&lt;&lt;endl;<br>        //cout &lt;&lt; columnStrings[0].size() &lt;&lt;' '&lt;&lt; columnStrings[1].size() &lt;&lt;' '&lt;&lt;<br>        //    columnStrings[2].size();<br>        if (n + m + k != columnStrings[0].size() + columnStrings[1].size() +<br>            columnStrings[2].size()) return 0;<br>        memset(f, 0, sizeof(f));<br>        f[0][0][0][0] = 1;<br>        int i1, i2, i3, i;<br>        for (i=0; i&lt;3; ++i)<br>        {<br>           a = columnStrings[i];<br>           for (i1=0; i1&lt;=n; ++i1)<br>           for (i2=0; i2&lt;=m; ++i2)<br>           for (i3=0; i3&lt;=k; ++i3)<br>           if (f[i1][i2][i3][i] &gt; 0)<br>              dfs(i1, i2, i3, 1, 0, f[i1][i2][i3][i], i+1);<br>        }<br>        return f[n][m][k][3];<br>     }<br>};<br></td>