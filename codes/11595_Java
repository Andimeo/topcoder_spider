<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.Arrays;<br> <br>/**<br> * Built using CHelper plug-in<br> * Actual solution is at the top<br> */<br>public class ColorfulCookie {<br>   static final int INF = (int) 1e9;<br>    <br>   public int getMaximum(int[] cookies, int P1, int P2) {<br>       int totalCookies = 0;<br>       for (int x : cookies)<br>            totalCookies += x;<br>       int left = 0;<br>       int right = totalCookies / (P1 + P2) + 1;<br>       while (right - left &gt; 1) {<br>           int middle = (left + right) / 2;<br>           if (enough(cookies, P1, P2, middle))<br>               left = middle;<br>           else<br>               right = middle;<br>       }<br>       return left * (P1 + P2);<br>   }<br> <br>    private boolean enough(int[] cookies, int p1, int p2, int need) {<br>        int[] max = new int[need + 1];<br>        Arrays.fill(max, -INF);<br>        max[0] = 0;<br>        for (int x : cookies) {<br>            for (int have = need; have &gt;= 0; --have) {<br>                int cur = max[have];<br>                if (cur &lt; 0) continue;<br>                for (int first = Math.min(x / p1, need - have); first &gt;= 0; --first) {<br>                    int second = (x - first * p1) / p2;<br>                    second = Math.min(second, need - first);<br>                    if (second &lt; 0) continue;<br>                    max[have + first] = Math.max(max[have + first], cur + second);<br>                }<br>            }<br>        }<br>        return max[need] &gt;= need;<br>    }<br>}<br> <br> <br> <br>// Powered by FileEdit<br>// Powered by moj 4.16 [modified TZTester]<br>// Powered by CodeProcessor<br></td>