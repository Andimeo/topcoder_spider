<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.List;<br>import java.util.Arrays;<br>import java.util.ArrayList;<br>import java.util.Comparator;<br>import java.util.Collection;<br><br>/**<br> * Built using CHelper plug-in<br> * Actual solution is at the top<br> * @author Egor Kulikov (egor@egork.net)<br> */<br>public class AxonometricProjection {<br>  private static final long MOD = 1000000009;<br>  private static final long[][] c = IntegerUtils.generateBinomialCoefficients(51, MOD);<br><br>  public int howManyWays(int[] heightsOfLeftView, int[] heightsOfFrontView) {<br>    int rowProcessed = 0;<br>    int columnProcessed = 0;<br>    long answer = 1;<br>    for (int i = 10000; i &gt;= 0; i--) {<br>      int currentColumns = 0;<br>      int currentRows = 0;<br>      for (int j : heightsOfFrontView) {<br>        if (j == i)<br>          currentRows++;<br>      }<br>      for (int j : heightsOfLeftView) {<br>        if (j == i)<br>          currentColumns++;<br>      }<br>      if (currentColumns != 0 || currentRows != 0) {<br>        answer = answer * go(rowProcessed, columnProcessed, currentRows, currentColumns, i) % MOD;<br>        rowProcessed += currentRows;<br>        columnProcessed += currentColumns;<br>      }<br>    }<br>    return (int) answer;<br>  }<br><br>  private long go(int rowProcessed, int columnProcessed, int currentRows, int currentColumns, int height) {<br>    long[] powerButOne = new long[currentColumns + columnProcessed + 1];<br>    powerButOne[0] = 1;<br>    for (int i = 1; i &lt;= currentColumns + columnProcessed; i++)<br>      powerButOne[i] = powerButOne[i - 1] * height % MOD;<br>    long[] power = new long[currentColumns + 1 + columnProcessed];<br>    power[0] = 1;<br>    for (int i = 1; i &lt;= currentColumns + columnProcessed; i++)<br>      power[i] = power[i - 1] * (height + 1) % MOD;<br>    long[] count = new long[currentColumns + 1];<br>    count[currentColumns] = 1;<br>    long[] nextCount = new long[currentColumns + 1];<br>    for (int i = 0; i &lt; rowProcessed; i++) {<br>      Arrays.fill(nextCount, 0);<br>      for (int j = 0; j &lt;= currentColumns; j++) {<br>        for (int k = j; k &lt;= currentColumns; k++)<br>          nextCount[j] += count[k] * c[k][j] % MOD * powerButOne[j] % MOD * power[currentColumns - k] % MOD;<br>        nextCount[j] %= MOD;<br>      }<br>      long[] temp = count;<br>      count = nextCount;<br>      nextCount = temp;<br>    }<br>    for (int i = 0; i &lt; currentRows; i++) {<br>      Arrays.fill(nextCount, 0);<br>      for (int j = 0; j &lt;= currentColumns; j++) {<br>        for (int k = j + 1; k &lt;= currentColumns; k++)<br>          nextCount[j] += count[k] * c[k][j] % MOD * powerButOne[j] % MOD * power[currentColumns + columnProcessed - k] % MOD;<br>        for (int k = 1; k &lt;= currentColumns - j + columnProcessed; k++)<br>          nextCount[j] += count[j] * c[currentColumns + columnProcessed - j][k] % MOD * powerButOne[currentColumns + columnProcessed - k] % MOD;<br>        nextCount[j] %= MOD;<br>      }<br>      long[] temp = count;<br>      count = nextCount;<br>      nextCount = temp;<br>    }<br>    return count[0];<br>  }<br>}<br><br>class IntegerUtils {<br><br>  public static long[][] generateBinomialCoefficients(int n, long module) {<br>    long[][] result = new long[n + 1][n + 1];<br>    if (module == 1)<br>      return result;<br>    for (int i = 0; i &lt;= n; i++) {<br>      result[i][0] = 1;<br>      for (int j = 1; j &lt;= i; j++) {<br>        result[i][j] = result[i - 1][j - 1] + result[i - 1][j];<br>        if (result[i][j] &gt;= module)<br>          result[i][j] -= module;<br>      }<br>    }<br>    return result;<br>  }<br><br>  public static boolean isPrime(long number) {<br>    if (number &lt; 2)<br>      return false;<br>    for (long i = 2; i * i &lt;= number; i++) {<br>      if (number % i == 0)<br>        return false;<br>    }<br>    return true;<br>  }<br>}<br><br><br><br>// Powered by FileEdit<br>// Powered by moj 4.12 [modified TZTester]<br>// Powered by CodeProcessor<br></td>