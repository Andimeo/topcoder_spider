<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Text;<br>using System.Text.RegularExpressions;<br>using System.Collections;<br>using System.Collections.Generic;<br><br>public class BricksN {<br>    const int MOD = 1000000007;<br>  public int countStructures(int w, int h, int k) {<br>    long[] count = new long[w + 1];<br>        count[0] = 1;<br>        for (int ww = 1; ww &lt;= w; ++ww) {<br>            for (int kk = 1; kk &lt;= k; ++kk) {<br>                if (ww - kk &lt; 0) continue;<br>                count[ww] = (count[ww] + count[ww - kk]) % MOD;<br>            }<br>        }<br><br>    <br>        long [,] res= new long[w + 1, h + 1];<br>        for (int hh = 0; hh &lt;= h; ++hh) {<br>            res[0, hh] = 1;<br>        }<br><br>        for (int ww = 1; ww &lt;= w; ++ww) {<br>            res[ww, 0] = 1;<br>            for (int hh = 1; hh &lt;= h; ++hh) {<br>                long r = 0;<br>                for (int f = 0; f &lt;= ww; ++f) {<br>                    r += (((count[f] * res[f, hh - 1]) % MOD) * res[Math.Max(ww - f - 1, 0), hh]) % MOD;<br>                }<br>                res[ww, hh] = r % MOD;<br>            }<br>        }<br>        return (int) res[w, h] % MOD;<br>  }<br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by CodeProcessor<br></td>