<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;vector&gt;<br>#include &lt;list&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;deque&gt;<br>#include &lt;stack&gt;<br>#include &lt;bitset&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;functional&gt;<br>#include &lt;numeric&gt;<br>#include &lt;utility&gt;<br>#include &lt;sstream&gt;<br>#include &lt;iostream&gt;<br>#include &lt;iomanip&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;ctime&gt;<br> <br>using namespace std;<br> <br>#define re return<br>#define mp make_pair<br>#define pb push_back<br>#define rep(i,n) for(int i = 0; i &lt; n; i++)<br>#define re return<br>#define fi first<br>#define se second<br>#define sz(x) ((int) (x).size())<br>#define all(x) (x).begin(), (x).end()<br>#define sqr(x) ((x) * (x))<br>#define y0 y3487465<br>#define y1 y8687969<br> <br>typedef vector&lt;int&gt; vi;<br>typedef long long ll;<br>typedef long double ld;<br>typedef pair&lt;int, int&gt; ii;<br>typedef vector&lt;ii&gt; vii;<br>typedef vector&lt;string&gt; vs;<br>typedef vector&lt;vi&gt; vvi;<br> <br>template&lt;class T&gt; T abs(T x) {<br>  re x &gt; 0 ? x : -x;<br>}<br> <br>class BricksN {<br>public:<br>  int countStructures(int, int, int);<br>};<br> <br>const int mod = 1000000007;<br> <br>int cnt[51];<br>int was[51][51];<br>int res[51][51];<br> <br>int go (int w, int h) {<br>  if (w &lt;= 0 || h == 0) re 1;<br>  if (was[w][h]) re res[w][h];<br>  was[w][h] = 1;<br>  int cur = 1;<br>  for (int t = 0; t &lt; w; t++)<br>    for (int i = 1; i + t &lt;= w; i++) {<br>      int tmp = cnt[i];<br>      tmp = ((ll)tmp * go (i, h - 1)) % mod;<br>      tmp = ((ll)tmp * go (w - i - t - 1, h)) % mod;<br>      cur = (cur + tmp) % mod;<br>    }<br>  re res[w][h] = cur;<br>}<br> <br>int BricksN::countStructures(int w, int h, int k) {<br>  memset (cnt, 0, sizeof (cnt));<br>  cnt[0] = 1;<br>  for (int i = 1; i &lt;= w; i++)<br>    for (int j = 1; j &lt;= k; j++)<br>      cnt[i] = (cnt[i] + cnt[i - j]) % mod;<br>  memset (was, 0, sizeof (was));<br>  re go (w, h);<br>}<br> <br> <br>//Powered by [KawigiEdit] 2.0!<br></td>