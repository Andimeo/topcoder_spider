<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections.Generic;<br>using System.Text;<br>using System.Diagnostics;<br>using System.IO;<br><br>class MultiplesWithLimit<br>{<br>    static int n;<br>    public static String minMultiples(int N, int[] forbiddenDigits)<br>    {<br>        n = N;<br>        List&lt;int&gt; allowed = new List&lt;int&gt;();<br>        for (int i = 0; i &lt; 10;i++)<br>        {<br>            bool found = false;<br>            for (int j = 0; j &lt; forbiddenDigits.Length; j++)<br>            {<br>                if (forbiddenDigits[j] == i)<br>                {<br>                    found = true;<br>                    break;<br>                }<br>            }<br>            if (!found) allowed.Add(i);<br>        }<br>        if (allowed.Count == 0) return "IMPOSSIBLE";<br><br>        bool[] visited = new bool[N];<br>        Queue&lt;string&gt; queue = new Queue&lt;string&gt;();<br>        allowed.Sort();<br>        foreach (int num in allowed)<br>        {<br>            if (num == 0) continue;<br>            queue.Enqueue(num.ToString());<br>            visited[rem(num.ToString())] = true;<br>            if (visited[0])<br>                return num.ToString();<br>        }<br>        string ans = string.Empty;<br>        bool f = false;<br>        while (queue.Count != 0)<br>        {<br>            string str = queue.Dequeue();<br>            foreach (int num in allowed)<br>            {<br>                if (visited[rem(str + num.ToString())] == false)<br>                {<br>                    queue.Enqueue(str + num.ToString());<br>                    visited[rem(str + num.ToString())] = true;<br>                    if (visited[0])<br>                    {<br>                        ans = str + num.ToString();<br>                        f = true;<br>                        break;<br>                    }<br>                }   <br>            }<br>            if (f) break;<br>        }<br>        if (ans == string.Empty)<br>            return "IMPOSSIBLE";<br>        else<br>        {<br>            if (ans.Length &lt; 9) return ans;<br>            return ans.Substring(0, 3) + "..." + ans.Substring(ans.Length - 3) + "(" + ans.Length + " digits)";<br>        }<br>    }<br><br>    private static int rem(string str)<br>    {<br>        int num = 0;<br>        for (int i = 0; i &lt; str.Length; i++)<br>            num = ((num * 10) + (str[i] - '0')) % n;<br>        return num;<br>    }<br>}<br></td>