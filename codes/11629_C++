<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;cstdio&gt;<br>#include &lt;cstring&gt;<br>#include &lt;iostream&gt;<br>#include &lt;queue&gt;<br>#include &lt;utility&gt;<br>#include &lt;sstream&gt;<br>#define MAX 10010<br>using namespace std;<br>bool V[MAX];<br>bool D[10];<br>string tostring(int n){<br>  stringstream ss;<br>  ss &lt;&lt; n;<br>  return ss.str();<br>}<br>class MultiplesWithLimit{<br>public:<br>string minMultiples(int n,vector &lt; int &gt; fd){<br>  memset(V,false,sizeof V);<br>  memset(D,true,sizeof D);<br>  queue &lt; pair &lt; int ,string &gt; &gt; Q;<br>  for(int i=0;i &lt; fd.size();i++) D[fd[i]] = false;<br>  for(int i = 1;i &lt; 10;i++){<br>    if(D[i] ){<br>      V[i%n] = true;<br>      string a = "";<br>      a += char(i+48);<br>      Q.push(make_pair(i%n,a));<br>    }<br>  }<br>  while(!Q.empty()){<br>    int m = Q.front().first;<br>    string cad = Q.front().second;<br>    if(m == 0){<br>      if(cad.size() &gt;= 9) return cad.substr(0,3) + "..." + cad.substr(cad.size()-3, 3) + "(" + tostring(cad.size()) + " digits)" ;<br>      else return cad;<br>    }<br>    Q.pop();<br>    for(int i = 0;i &lt; 10;i++){<br>      if(!D[i]) continue;<br>      int t = ((m*10) % n + (i % n)) % n;<br>      if(!V[t]){<br>        string aux = cad;<br>        aux += char(48+i);<br>        V[t] = true;<br>        Q.push(make_pair(t,aux));<br>      }<br>    }<br>  }<br>  return "IMPOSSIBLE";<br>}<br>};<br></td>