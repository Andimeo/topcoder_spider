<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>import java.io.*;<br> <br>public class AlphabetPaths {<br> <br>    int n;<br>    int m;<br>    int[][] grid;<br> <br>    long[] wys = new long[1 &lt;&lt; 21];<br>    int[] flag = new int[1 &lt;&lt; 21];<br>    int flags = 1;<br>    <br>    int[] lst = new int[1 &lt;&lt; 21];<br>    int sz;<br> <br>    final static String magic = "ABCDEFZHIKLMNOPQRSTVX";<br> <br>    final static int[] dx = new int[]{1, -1, 0, 0};<br>    final static int[] dy = new int[]{0, 0, 1, -1};<br> <br>    void dfs(int x, int y, int dep, int msk) {<br>        if (dep == 11) {<br>            if (flag[msk] != flags) {<br>                flag[msk] = flags;<br>                wys[msk] = 0;<br>                lst[sz++] = msk;<br>            }<br>            wys[msk] ++;<br>            return;<br>        }<br>        for (int k = 0; k &lt; 4; k++) {<br>            int nx = x + dx[k];<br>            int ny = y + dy[k];<br>            if (0 &lt;= nx &amp;&amp; nx &lt; n &amp;&amp; 0 &lt;= ny &amp;&amp; ny &lt; m &amp;&amp; grid[nx][ny] &gt;= 0) {<br>                if ((msk &gt;&gt; grid[nx][ny] &amp; 1) == 0) {<br>                    dfs(nx, ny, dep + 1, msk | 1 &lt;&lt; grid[nx][ny]);<br>                }<br>            }<br>        }<br>    }<br> <br>    public long count(String[] letterMaze) {<br>        n = letterMaze.length;<br>        m = letterMaze[0].length();<br>        grid = new int[n][m];<br>        for (int i = 0; i &lt; n; i++)<br>            for (int j = 0; j &lt; m; j++) {<br>                grid[i][j] = -1;<br>                for (int k = 0; k &lt; magic.length(); k++)<br>                    if (letterMaze[i].charAt(j) == magic.charAt(k))<br>                        grid[i][j] = k;<br>            }<br>        /*int[] c10 = new int[1 &lt;&lt; 21];<br>        int sz = 0;<br>        for (int msk = 0; msk &lt; (1 &lt;&lt; 21); msk++) {<br>            int cntbit = 0;<br>            for (int j = 0; j &lt; 21; j++)<br>                if ((msk &gt;&gt; j &amp; 1) &gt; 0)<br>                    cntbit ++;<br>            if (cntbit == 11)<br>                c10[sz ++] = msk;<br>        }*/<br>        long ret = 0;<br>        for (int i = 0; i &lt; n; i++)<br>            for (int j = 0; j &lt; m; j++) {<br>                if (grid[i][j] &lt; 0) {<br>                    continue;<br>                }<br>                sz = 0;<br>                flags ++;<br>                dfs(i, j, 1, 1 &lt;&lt; grid[i][j]);<br>                for (int ptr = 0; ptr &lt; sz; ptr++) {<br>                    int msk1 = lst[ptr];<br>                    int msk2 = (1 &lt;&lt; 21) - 1 - msk1 | 1 &lt;&lt; grid[i][j];<br>                    if (flag[msk1] == flags &amp;&amp; flag[msk2] == flags)<br>                        ret += wys[msk1] * wys[msk2];<br>                }<br>            }<br>        return ret;<br>    }<br> <br>}<br> <br> <br> <br>// Powered by FileEdit<br>// Powered by moj 4.16 [modified TZTester]<br>// Powered by CodeProcessor<br></td>