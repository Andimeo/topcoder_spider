<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Text;<br>using System.Collections;<br>using System.Diagnostics;<br>using System.Collections.Generic;<br>public class Mosquitoes<br>{<br>    /////////////////////////////////////////TEMPLATE HERE/////////////////////////////////////////////<br>    const int INF = (int)(1e9 + 1e-9);<br>    const double exp = 1e-12;<br>    const int dir = 4;<br>    int[] dx = new int[dir] { 1, 0, -1, 0 };<br>    int[] dy = new int[dir] { 0, 1, 0, -1 };<br>    ////////////////////////////////////////TEMPLATE END/////////////////////////////////////////////////<br><br>    public int getMaximum(int[] x, int[] v, int R)<br>    {<br>        int len = x.Length;<br>        R &lt;&lt;= 1;<br>        Dictionary&lt;double, bool&gt; time = new Dictionary&lt;double, bool&gt;();<br>        time[0] = true;<br>        for (int i = 0; i &lt; len; i++)<br>        {<br>            for (int j = 0; j &lt; len; j++)<br>            {<br>                if (v[i] != v[j])<br>                {<br>                    double t0 = (double)(x[j] - x[i] + R) / (v[i] - v[j]);<br>                    double t1 = (double)(x[j] - x[i] - R) / (v[i] - v[j]);<br>                    if (t0 &gt;= 0)<br>                        time[t0] = true;<br>                    if (t1 &gt;= 0)<br>                        time[t1] = true;<br>                }<br>            }//for j<br>        }//for i<br>        int res = 0;<br>        foreach (double t in time.Keys)<br>        {<br>            List&lt;double&gt; now = new List&lt;double&gt;();<br>            for (int i = 0; i &lt; len; i++)<br>            {<br>                now.Add(x[i] + v[i] * t);<br>            }//for i<br>            now.Sort();<br>            res = Math.Max(res, Check(now, R));<br>        }//foreach t<br>        return res;<br>    }//getMaximum<br><br>    int Check(List&lt;double&gt; now, int R)<br>    {<br>        int res = 0;<br>        int len = now.Count;<br><br>        for (int i = 0; i &lt; len; i++)<br>        {<br>            for (int j = i; j &lt; len; j++)<br>            {<br>                if (now[j] - now[i] &lt; R + exp)<br>                    res = Math.Max(res, j - i + 1);<br>            }//for j<br>        }//for i<br>        return res;<br>    }<br><br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003] Modified for C# by ysn<br>// Powered by CodeProcessor<br></td>