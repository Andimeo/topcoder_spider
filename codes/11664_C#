<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections;<br>using System.Collections.Generic;<br>using System.Text;<br><br>public class Rumor {<br>    public int getMinimum(string knowledge, string[] graph)<br>    {<br>        int i, j, k;<br>        int len = knowledge.Length;<br>        int MAX = 99999;<br>        int ret = MAX;<br>        for (i = 0; i &lt; (1 &lt;&lt; len); i++)<br>        {<br>            int[,] dist = new int[len, 2];<br>            bool[,] memo = new bool[len, 2];<br>            Queue&lt;int&gt; q = new Queue&lt;int&gt;();<br>            for (j = 0; j &lt; len; j++)<br>            {<br>                if (knowledge[j] == 'Y')<br>                {<br>                    dist[j, 0] = dist[j, 1] = 0;<br>                }<br>                else dist[j, 0] = dist[j, 1] = MAX;<br>            }<br>            <br>            int turn = 0;<br>            bool ok = false;<br>            for (turn = 0; turn &lt; ret; turn++)<br>            {<br>                ok = true;<br>                for (j = 0; j &lt; len; j++)<br>                {<br>                    if (memo[j, 0] &amp;&amp; memo[j, 1]) continue;<br>                    if (dist[j, 0] &lt;= turn &amp;&amp; !memo[j, 0] &amp;&amp; (i &gt;&gt; j) % 2 == 0)<br>                    {<br>                        memo[j, 0] = true;<br>                        for (k = 0; k &lt; len; k++)<br>                        {<br>                            if (graph[j][k] == 'Y' &amp;&amp; dist[k, 0] == MAX)<br>                            {<br>                                dist[k, 0] = turn + 1;<br>                                ok = false;<br>                            }<br>                        }<br><br>                    }<br>                    else if (dist[j, 1] &lt;= turn &amp;&amp; !memo[j, 1] &amp;&amp; (i &gt;&gt; j) % 2 == 1)<br>                    {<br>                        memo[j, 1] = true;<br>                        for (k = 0; k &lt; len; k++)<br>                        {<br>                            if (graph[j][k] == 'Y' &amp;&amp; dist[k, 1] == MAX)<br>                            {<br>                                dist[k, 1] = turn + 1;<br>                                ok = false;<br>                            }<br>                        }<br>                    }<br>                    else if (dist[j, 0] &lt;= turn &amp;&amp; !memo[j, 0])<br>                    {<br>                        memo[j, 0] = true;<br>                        for (k = 0; k &lt; len; k++)<br>                        {<br>                            if (graph[j][k] == 'Y' &amp;&amp; dist[k, 0] == MAX)<br>                            {<br>                                dist[k, 0] = turn + 1;<br>                                ok = false;<br>                            }<br>                        }<br>                    }<br>                    else if (dist[j, 1] &lt;= turn &amp;&amp; !memo[j, 1])<br>                    {<br>                        memo[j, 1] = true;<br>                        for (k = 0; k &lt; len; k++)<br>                        {<br>                            if (graph[j][k] == 'Y' &amp;&amp; dist[k, 1] == MAX)<br>                            {<br>                                dist[k, 1] = turn + 1;<br>                                ok = false;<br>                            }<br>                        }<br>                    }<br>                }<br>                if (ok) break;<br>            }<br>            for (j = 0; j &lt; len; j++) if (dist[j, 0] == MAX || dist[j, 1] == MAX) break;<br>            if (ok &amp;&amp; j == len) ret = Math.Min(ret, turn);<br>        }<br>        if (ret == MAX) return -1;<br>        return ret;<br>    }<br><br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003] [modified for C# by Petr]<br>// Powered by CodeProcessor<br></td>