<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;sstream&gt; <br>#include &lt;iostream&gt;<br>#include &lt;string.h&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;stdlib.h&gt; <br>#include &lt;stdio.h&gt; <br>#include &lt;numeric&gt;<br>#include &lt;math.h&gt;<br>#include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;stack&gt;<br>#include &lt;queue&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>using namespace std;<br> <br>vector &lt; pair &lt; int , int &gt; &gt; a;<br> <br>int solve ( vector &lt;string&gt; grid ) {<br>  int i , j , k;<br>  int cnt = 0;<br>  int cur , ans = 1 &lt;&lt; 30;<br>  <br>  for (i = 0; i &lt; (int)grid.size(); i++) {<br>    for (j = 0; j &lt; (int)grid[i].size(); j++) {<br>      if ( grid[i][j] == 'o' ) {<br>        ++ cnt;<br>        a.push_back ( make_pair ( i , j ) );<br>      }<br>    }<br>  }<br>  <br>  for (i = 0; i + cnt &lt;= (int)grid.size(); i++) {<br>    for (j = 0; j &lt; (int)grid[i].size(); j++) {<br>      cur = 0;<br>      <br>      for (k = 0; k &lt; cnt; k++) {<br>        cur += abs ( a[k].first - (i + k) ) + abs ( a[k].second - j );<br>      }<br>      <br>      ans = min ( ans , cur );<br>    }<br>  }<br>  <br>  for (i = 0; i &lt; (int)grid.size(); i++) {<br>    for (j = 0; j + cnt &lt;= (int)grid[i].size(); j++) {<br>      cur = 0;<br>      <br>      for (k = 0; k &lt; cnt; k++) {<br>        cur += abs ( a[k].first - i ) + abs ( a[k].second - (j + k) );<br>      }<br>      <br>      ans = min ( ans , cur );<br>    }<br>  }<br>  <br>  return ans;<br>}<br> <br>class DucksAlignment {<br>  public:<br>  int minimumTime(vector &lt;string&gt; grid) {<br>    return solve ( grid );<br>  }<br>};<br> <br> <br> <br>// Powered by FileEdit<br>// Powered by moj 4.16 [modified TZTester]<br>// Powered by CodeProcessor<br></td>