<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.Arrays;<br> <br>/**<br> * Built using CHelper plug-in<br> * Actual solution is at the top<br> */<br>public class DucksAlignment {<br>   public int minimumTime(String[] grid) {<br>       int height = grid.length;<br>       int width = grid[0].length();<br>       boolean[][] duck = new boolean[height][width];<br>       boolean[][] duckTrans = new boolean[width][height];<br>       for (int r = 0; r &lt; height; ++r)<br>           for (int c = 0; c &lt; width; ++c) {<br>               duck[r][c] = grid[r].charAt(c) == 'o';<br>               duckTrans[c][r] = duck[r][c];<br>           }<br>       return Math.min(costAlign(duck) + costPack(duck), costAlign(duckTrans) + costPack(duckTrans));<br>   }<br> <br>    private int costPack(boolean[][] duck) {<br>        int height = duck.length;<br>        int width = duck[0].length;<br>        int num = 0;<br>        for (int r = 0; r &lt; height; ++r)<br>            for (int c = 0; c &lt; width; ++c)<br>                if (duck[r][c])<br>                    ++num;<br>        int[] cols = new int[num];<br>        num = 0;<br>        for (int r = 0; r &lt; height; ++r)<br>            for (int c = 0; c &lt; width; ++c)<br>                if (duck[r][c])<br>                    cols[num++] = c;<br>        Arrays.sort(cols);<br>        int res = Integer.MAX_VALUE;<br>        for (int dest = 0; dest + num &lt;= height; ++dest) {<br>            int cur = 0;<br>            for (int i = 0; i &lt; num; ++i) {<br>                cur += Math.abs(cols[i] - (dest + i));<br>            }<br>            res = Math.min(res, cur);<br>        }<br>        return res;<br>    }<br> <br>    private int costAlign(boolean[][] duck) {<br>        int height = duck.length;<br>        int width = duck[0].length;<br>        int num = 0;<br>        for (int r = 0; r &lt; height; ++r)<br>            for (int c = 0; c &lt; width; ++c)<br>                if (duck[r][c])<br>                    ++num;<br>        int[] rows = new int[num];<br>        num = 0;<br>        for (int r = 0; r &lt; height; ++r)<br>            for (int c = 0; c &lt; width; ++c)<br>                if (duck[r][c])<br>                    rows[num++] = r;<br>        int res = Integer.MAX_VALUE;<br>        for (int dest = 0; dest &lt; height; ++dest) {<br>            int cur = 0;<br>            for (int r : rows)<br>                cur += Math.abs(dest - r);<br>            res = Math.min(res, cur);<br>        }<br>        return res;<br>    }<br> <br> <br>}<br> <br> <br> <br>// Powered by FileEdit<br>// Powered by moj 4.16 [modified TZTester]<br>// Powered by CodeProcessor<br></td>