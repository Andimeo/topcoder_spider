<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;iostream&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cmath&gt;<br>using namespace std;<br>typedef vector&lt;string&gt; VS; typedef vector&lt;VS&gt; VVS;<br>typedef signed long long i64; typedef unsigned long long u64;<br>typedef vector&lt;i64&gt; VI; typedef vector&lt;VI&gt; VVI;<br><br>VS tokenize(string s, string ch) {<br>  VS ret;<br>  for( int p = 0, p2; p &lt; s.size(); p = p2+1 ) {<br>    p2 = s.find_first_of(ch, p);<br>    if( p2 == -1 ) p2 = s.size();<br>    if( p2-p &gt; 0 ) ret.push_back(s.substr(p, p2-p));<br>  }<br>  return ret;<br>}<br><br>VI tokint(string s, string ch) {<br>  VI ret;<br>  VS t = tokenize(s, ch);<br>  for( int i = 0; i &lt; t.size(); i++ )<br>    ret.push_back(atoi(t[i].c_str()));<br>  return ret;<br>}<br><br>VVI mult(const VVI &amp;m1, const VVI &amp;m2) {<br>  int i, j, k;<br><br>  VVI ret(m1.size(), VI(m1.size()));<br>  for( i = 0; i &lt; m1.size(); i++ )<br>  for( j = 0; j &lt; m1.size(); j++ )<br>  for( k = 0; k &lt; m1.size(); k++ ) {<br>    if( ret[i][j] &lt; 0 ) continue;<br>    if( m1[i][k] == 0 || m2[k][j] == 0 ) continue;<br>    if( m1[i][k] &lt; 0 || m2[k][j] &lt; 0 ) ret[i][j] = -1;<br>    else if( (double)m1[i][k]*(double)m2[k][j] &gt; (1ll&lt;&lt;62)*2.0+1000 ) ret[i][j] = -1;<br>    else ret[i][j] += m1[i][k]*m2[k][j];<br>  }<br>  return ret;<br>}<br><br>class GraphPaths {<br>public:<br>long long howMany(vector &lt;string&gt; a, int b, int c, int length) {<br>  int i, j, k, x, y, z, n;<br>  VVI g;<br><br>  for( i = 0; i &lt; a.size(); i++ )<br>    g.push_back(tokint(a[i], " "));<br>  vector&lt;VVI&gt; np(32, VVI(g.size(), VI(g.size())));<br>  for( i = 0; i &lt; g.size(); i++ )<br>  for( j = 0; j &lt; g[i].size(); j++ )<br>    np[0][i][g[i][j]] = 1;<br>  for( x = 1; (1&lt;&lt;x) &lt;= length; x++ ) {<br>    np[x] = mult(np[x-1], np[x-1]);<br>  }<br>  VVI cur(g.size(), VI(g.size()));<br>  for( i = 0; i &lt; g.size(); i++ ) cur[i][i] = 1;<br>  for( x = 0; (1&lt;&lt;x) &lt;= length; x++ )<br>    if( length&amp;(1&lt;&lt;x) ) cur = mult(cur, np[x]);<br>  return (cur[b][c] &lt; 0) ? -1 : cur[b][c];<br>}<br>};<br><br><br>// Powered by FileEdit<br></td>