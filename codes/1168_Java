<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>import java.math.*;<br>import java.awt.geom.*;<br> <br>public class GraphPaths<br>{<br> <br>long adj[][] = new long[64][64];<br>BigInteger a[][] = new BigInteger[64][64];<br>BigInteger b[][] = new BigInteger[64][64];<br>boolean bad[][] = new boolean[64][64];<br>int n;<br>BigInteger MAX = BigInteger.valueOf(Long.MAX_VALUE);<br>BigInteger INF = MAX.add(BigInteger.ONE);<br> <br>public long howMany( String[] graph, int start, int destination, int length)<br>{<br>   n = graph.length;<br>   for (int i = 0; i &lt; n; i++) {<br>      StringTokenizer st = new StringTokenizer(graph[i]);<br>      while (st.hasMoreTokens())<br>         adj[i][Integer.parseInt(st.nextToken())] = 1;<br>   }<br> <br>   fast_expt(length);<br>   if (a[start][destination].compareTo(MAX) &gt; 0) return -1;<br>   return a[start][destination].longValue();<br>}<br> <br>void fast_expt(int len) throws IndexOutOfBoundsException<br>{<br>   int i, j, k;<br> <br>   if (len == 0) {<br>      for (i = 0; i &lt; n; i++) for (j = 0; j &lt; n; j++) a[i][j] = BigInteger.ZERO;<br>      for (i = 0; i &lt; n; i++) a[i][i] = BigInteger.ONE;<br>//      System.out.println("**" + a[0][0]);<br>   } else if (len % 2 == 1) {<br>      fast_expt(len - 1);<br>//      System.out.println("*" + a[0][0]);<br>      for (i = 0; i &lt; n; i++)<br>         for (j = 0; j &lt; n; j++) {<br>            b[i][j] = BigInteger.ZERO;<br>            for (k = 0; k &lt; n; k++) {<br>               if (adj[k][j] == 0) continue;<br>               if (a[i][k].compareTo(MAX) &gt; 0) {b[i][j] = INF; break;}<br>               b[i][j] = b[i][j].add(a[i][k].multiply(BigInteger.valueOf(adj[k][j])));<br>               if (b[i][j].compareTo(MAX) &gt; 0) break;<br>            }<br>//            if (k &lt; n) b[i][j] = INF;<br>         }<br>      for (i = 0; i &lt; n; i++)<br>         for (j = 0; j &lt; n; j++) {<br>            a[i][j] = b[i][j];<br>//            System.out.println(a[i][j]);<br>         }<br>   } else {<br>      fast_expt(len / 2);<br>//      System.out.print("***" + a[0][0]);<br>      for (i = 0; i &lt; n; i++)<br>         for (j = 0; j &lt; n; j++) {<br>            b[i][j] = BigInteger.ZERO;<br>            for (k = 0; k &lt; n; k++) {<br>               if (a[i][k].equals(BigInteger.ZERO)) continue;<br>               if (a[k][j].equals(BigInteger.ZERO)) continue;<br>               if (a[i][k].compareTo(MAX) &gt; 0) {b[i][j] = INF; break;}<br>               if (a[k][j].compareTo(MAX) &gt; 0) {b[i][j] = INF; break;}<br>               b[i][j] = b[i][j].add(a[i][k].multiply(a[k][j]));<br>               if (b[i][j].compareTo(MAX) &gt; 0) break;<br>            }<br>//            if (k &lt; n) b[i][j] = INF;<br>         }<br>      for (i = 0; i &lt; n; i++)<br>         for (j = 0; j &lt; n; j++) {<br>            a[i][j] = b[i][j];<br>//            System.out.println(" " + a[i][j]);<br>        }<br>   }<br>}<br>}<br>// Powered by PopsEdit<br></td>