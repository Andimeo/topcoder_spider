<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;vector&gt;<br>#include &lt;list&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;queue&gt;<br>#include &lt;deque&gt;<br>#include &lt;stack&gt;<br>#include &lt;bitset&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;functional&gt;<br>#include &lt;numeric&gt;<br>#include &lt;utility&gt;<br>#include &lt;sstream&gt;<br>#include &lt;iostream&gt;<br>#include &lt;iomanip&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;ctime&gt;<br>#include &lt;cstring&gt;<br>#include &lt;cassert&gt;<br> <br>using namespace std;<br> <br>#define FORE(i,c) for(__typeof(c.begin()) i=(c.begin());i!=(c).end();++i)<br>#define ZERO(x) memset(x,0,sizeof(x))<br> <br>class TurtleSpy {<br>public:<br>   double maxDistance( vector &lt;string&gt; commands ) {<br>       int sumForward = 0;<br>       int sumBackward = 0;<br>       static bool dp[360];<br>       ZERO(dp);<br>       dp[0] = true;<br>       FORE (it, commands) {<br>           stringstream ss(*it);<br>           string com;<br>           int val;<br>           ss &gt;&gt; com &gt;&gt; val;<br>           if (com == "forward") {<br>               sumForward += val;<br>           } else if (com == "backward") {<br>               sumBackward += val;<br>           } else {<br>               if (com == "left") {<br>                   val = 360 - val;<br>               }<br>               static bool nx[360];<br>               ZERO(nx);<br>               for (int i = 0; i &lt; 360; ++i) {<br>                   nx[i] = dp[i] | dp[(i + val) % 360];<br>               }<br>               for (int i = 0; i &lt; 360; ++i) {<br>                   dp[i] = nx[i];<br>               }<br>           }<br>       }<br>       double pi = 2 * acos(0);<br>       double res = abs(sumForward - sumBackward);<br>       for (int i = 0; i &lt; 360; ++i) {<br>           if (dp[i]) {<br>               double a = sumForward;<br>               double b = sumBackward;<br>               double c = a * a + b * b - 2 * a * b * cos(i / 180.0 * pi);<br>               res = max(res, sqrt(c));<br>           }<br>       }<br>       return res;<br>   }<br>};<br> <br> <br> <br>// Powered by FileEdit<br>// Powered by moj 4.16 [modified TZTester]<br> <br>// Powered by CodeProcessor<br></td>