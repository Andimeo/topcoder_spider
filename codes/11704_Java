<td class="problemText" colspan="8" valign="middle" align="left">
            //  SRM 538 (B)<br><br>import static java.lang.Math.*;<br>import static java.math.BigInteger.*;<br>import static java.util.Arrays.*;<br>import static java.util.Collections.*;<br>import java.math.*;<br>import java.util.*;<br><br>public class TurtleSpy {<br>  <br>  public double maxDistance(String[] commands) {<br>    final double PI = acos(-1.0);<br>    final int M = 360;<br>    double D0 = 0, D1 = 0;<br>    List&lt;Integer&gt; angles = new ArrayList&lt;Integer&gt;();<br>    for (String command: commands) {<br>      String[] ss = command.split(" ");<br>      int x = Integer.parseInt(ss[1]);<br>             if (ss[0].equals("forward")) {<br>        D0 += x;<br>      } else if (ss[0].equals("backward")) {<br>        D1 += x;<br>      } else if (ss[0].equals("left")) {<br>        angles.add(+x);<br>      } else if (ss[0].equals("right")) {<br>        angles.add(-x);<br>      } else {<br>        _out("ERROR");<br>      }<br>    }<br>    boolean[] dp = new boolean[M];<br>    dp[0] = true;<br>    for (int a: angles) {<br>      boolean[] DP = new boolean[M];<br>      for (int t = 0; t &lt; M; ++t) if (dp[t]) {<br>        DP[t] = true;<br>      }<br>      for (int t = 0; t &lt; M; ++t) if (dp[t]) {<br>        int tt = ((t + a) % M + M) % M;<br>        DP[tt] = true;<br>      }<br>      dp = DP;<br>    }<br>    double ans = 0.0;<br>    for (int t = 0; t &lt; M; ++t) if (dp[t]) {<br>      double th = t / 180.0 * PI;<br>      double tmp = D0 * D0 + D1 * D1 - 2 * D0 * D1 * cos(th);<br>      if (ans &lt; tmp) {<br>        ans = tmp;<br>      }<br>    }<br>    ans = sqrt(ans);<br>    return ans;<br>  }<br>  <br>  void _out(Object...os) {<br>    System.out.println(deepToString(os));<br>  }<br>}<br></td>