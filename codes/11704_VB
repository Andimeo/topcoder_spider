<td class="problemText" colspan="8" valign="middle" align="left">
            Imports System.Collections.Generic<br> <br>Public Class TurtleSpy<br>    Dim forward ,backward As Integer<br>    Dim turn As List(Of Integer)<br>    Public Function maxDistance(ByVal commands As String()) As Double<br>        parse(commands)<br>        Dim turn As Integer = best_turn()<br>        Dim t As New turtle<br>        t.forward(forward)<br>        t.turn(turn)<br>        t.backward(backward)<br>        Return t.distance<br>    End Function<br> <br>    Private Function best_turn() As Integer<br>        Dim n As Integer = turn.Count<br>        Dim dp(n, 359) As Boolean<br>        dp(0, 0) = True<br>        For i As Integer = 0 To n - 1<br>            For j As Integer = 0 To 359<br>                If Not dp(i, j) Then Continue For<br>                dp(i + 1, j) = True<br>                dp(i + 1, (turn(i) + j) Mod 360) = True<br>            Next<br>        Next<br>        For i As Integer = 0 To 179<br>            If dp(n, 180 + i) Then Return 180 + i<br>            If dp(n, 180 - i) Then Return 180 - i<br>        Next<br>    End Function<br> <br>    Private Sub parse(ByVal commands As String())<br>        forward = 0<br>        backward = 0<br>        Dim dat As String()<br>        turn = New List(Of Integer)<br>        Dim param As Integer<br>        For Each c As String In commands<br>            dat = c.Split()<br>            param = Integer.Parse(dat(1))<br>            Select Case dat(0)<br>                Case "left"<br>                    turn.Add(param)<br>                Case "right"<br>                    turn.Add(360 - param)<br>                Case "backward"<br>                    backward += param<br>                Case "forward"<br>                    forward += param<br>            End Select<br>        Next<br>    End Sub<br> <br>    Private Class turtle<br>        Private x As Double, y As Double<br>        Private direction As Integer<br>        Public Sub New()<br>            x = 0 : y = 0 : direction = 0<br>        End Sub<br>        Public Sub turn(ByVal d As Integer)<br>            direction += d<br>            If direction &gt;= 360 Then direction -= 360<br>        End Sub<br>        Public Sub forward(ByVal l As Integer)<br>            Dim dir As Double = Math.PI * direction / 180<br>            x += Math.Cos(dir) * l<br>            y += Math.Sin(dir) * l<br>        End Sub<br>        Public Sub backward(ByVal l As Integer)<br>            forward(-l)<br>        End Sub<br>        Public Function distance() As Double<br>            Return Math.Sqrt(x * x + y * y)<br>        End Function<br>    End Class<br> <br>End Class<br></td>