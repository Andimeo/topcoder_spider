<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;map&gt;<br>#include &lt;queue&gt;<br>#include &lt;bitset&gt;<br>#include &lt;string&gt;<br>#include &lt;cstring&gt;<br>#include &lt;numeric&gt;<br>#include &lt;sstream&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;assert.h&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;functional&gt;<br>#include &lt;iostream&gt;<br>#include &lt;iomanip&gt;<br>#include &lt;complex&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;vector&gt;<br>#include &lt;cmath&gt;<br>#include &lt;deque&gt;<br>#include &lt;ctime&gt;<br>#include &lt;set&gt;<br> <br>using namespace std;<br> <br>typedef long long ll;<br>#define FOREACH(i, c) for(__typeof((c).begin()) i = (c).begin(); i != (c).end(); ++i)<br>#define FOR(i, a, n) for (int i = (a); i &lt; int(n); ++i)<br>#define error(n) cout &lt;&lt; #n &lt;&lt; " = " &lt;&lt; n &lt;&lt; endl<br>#define all(c) c.begin(), c.end()<br>#define pb push_back<br>#define Size(n) ((int)(n).size())<br> <br>const int MAXN = 100;<br>int n, best;<br>vector&lt;string&gt; g;<br>vector&lt;int&gt; p;<br>bool na[MAXN];<br> <br>void bt(int rem) {<br>  if (rem*3 &lt; n*2) return;<br>  FOR(i, 0, n) FOR(j, i+1, n) if (na[i] == false &amp;&amp; na[j] == false &amp;&amp; g[i][j] == 'N') {<br>    na[i] = true;<br>    bt(rem-1);<br>    na[i] = false;<br>    na[j] = true;<br>    bt(rem-1);<br>    na[j] = false;<br>    return;<br>  }<br>  int tmp = 0;<br>  FOR(i, 0, n) if (na[i] == false) tmp += p[i];<br>  best = max(best, tmp);<br>}<br> <br>class MagicMolecule {<br>public:<br>  int maxMagicPower(vector &lt;int&gt; magicPower, vector &lt;string&gt; magicBond) {<br>    g = magicBond;<br>    p = magicPower;<br>    n = Size(p);<br>    memset(na, 0, sizeof na);<br>    best = -1;<br>    bt(n);<br>    return best;<br>  }<br>};<br> <br> <br>//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!<br></td>