<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>import java.util.regex.*;<br>import java.text.*;<br>import java.math.*;<br>import java.awt.geom.*;<br> <br>public class MagicMolecule<br>{<br>  int n;<br>  long[] mask;<br>  boolean[][] bond;<br>  int[] power;<br>  int ans = -1;<br> <br>  public void doIt(int num, int cnt, long mask) {<br>    if (3 * (n - cnt) &lt; 2 * n)<br>      return;<br>    if (num == n * n) {<br>      int res = 0;<br>      for (int i = 0; i &lt; n; i++) {<br>        if ((mask &amp; (1L &lt;&lt; i)) != 0)<br>          if ((this.mask[i] &amp; mask) != mask)<br>            return;<br>          else<br>            res += power[i];<br>      }<br>      ans = Math.max(ans, res);<br>      return;<br>    }<br>    int x = num % n, y = num / n;<br>    if (bond[x][y] || (mask &amp; (1L &lt;&lt; x)) == 0 || (mask &amp; (1L &lt;&lt; y)) == 0) {<br>      doIt(num + 1, cnt, mask);<br>      return;<br>    }<br>    doIt(num + 1, cnt + 1, mask &amp; ~(1L &lt;&lt; x));<br>    doIt(num + 1, cnt + 1, mask &amp; ~(1L &lt;&lt; y));<br>  }<br> <br>  public int maxMagicPower(int[] magicPower, String[] magicBond) {<br>    n = magicPower.length;<br>    power = magicPower;<br>    bond = new boolean[n][n];<br>    mask = new long[n];<br>    for (int i = 0; i &lt; n; i++) {<br>      for (int j = 0; j &lt; n; j++) {<br>        bond[i][j] = magicBond[i].charAt(j) == 'Y' || i == j;<br>        if (bond[i][j])<br>          mask[i] |= 1L &lt;&lt; j;<br>      }<br>    }<br>    for (int i = 0; i &lt; n; i++)<br>      ans = -1;<br>    doIt(0, 0, (1L &lt;&lt; n) - 1);<br>    return ans;<br>  }<br>  <br>  <br>}<br>//Powered by [KawigiEdit] 2.0!<br></td>