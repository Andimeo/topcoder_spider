<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;iostream&gt;<br>#include &lt;limits&gt;<br>#include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;strstream&gt;<br>using namespace std;<br> <br>struct node<br>{<br>  node(int _x, int _y) {x = _x; y = _y;}<br> <br>  int id() const<br>  {<br>    return y*501+x;<br>  }<br>  <br>  int x, y;<br>};<br> <br>map &lt;int, int&gt; dist;<br> <br>bool operator&lt;(const node &amp;n1, const node &amp;n2)<br>{<br>  if (dist[n1.id()] != dist[n2.id()])<br>    return dist[n1.id()] &lt; dist[n2.id()];<br>  return n1.id() &lt; n2.id();<br>}<br> <br> <br>class Escape<br>{<br>public:<br> <br>int grid[501][501];<br> <br>void clear(int x1, int y1, int x2, int y2, int val)<br>{<br>  int tx;<br>  if (x2 &lt; x1)<br>  {<br>    tx = x1;<br>    x1 = x2;<br>    x2 = tx;<br>  }<br>  if (y2 &lt; y1)<br>  {<br>    tx = y1;<br>    y1 = y2;<br>    y2 = tx;<br>  }<br>  for (int y = y1; y &lt;= y2; y++)<br>  for (int x = x1; x &lt;= x2; x++)<br>  {<br>    grid[y][x] = val;<br>  }<br>}<br> <br>void bfs(int srcx, int srcy)<br>{<br>  node src(srcx, srcy);<br>  set &lt;node&gt; totry;<br>  dist.clear();<br>  dist[src.id()] = 0;<br>  totry.insert(src);<br> <br>  int x = 0;<br>  while (totry.size())<br>  {<br>    srcx = totry.begin()-&gt;x;<br>    srcy = totry.begin()-&gt;y;<br>    src = node(srcx, srcy);<br>/*    cout <br>    x++;*/<br> <br>    for (int dstx = srcx-1; dstx &lt;= srcx+1; dstx++)<br>    for (int dsty = srcy-1; dsty &lt;= srcy+1; dsty++)<br>    if (dstx &gt;= 0 &amp;&amp; dsty &gt;= 0 &amp;&amp; dstx &lt;= 500 &amp;&amp; dsty &lt;= 500)<br>    if ( (dstx-srcx)*(dstx-srcx) + (dsty-srcy)*(dsty-srcy) == 1)<br>    {<br>      node dest(dstx, dsty);<br>      int length = grid[dsty][dstx];<br>      if (length &lt; 2)<br>      if (!dist.count(dest.id()) || dist[dest.id()] &gt; dist[src.id()] + length)<br>      {<br>        dist[dest.id()] = dist[src.id()] + length;<br>        totry.insert(dest);<br>      }<br>    }<br>    totry.erase(src);<br>  }<br>}<br> <br>int lowest(vector&lt;string&gt; harmful, vector&lt;string&gt; deadly)<br>{<br>  int i;<br> <br>  clear(0,0,500,500, 0);<br>  for (i = 0; i &lt; harmful.size(); i++)<br>  {<br>    istrstream in(harmful[i].c_str());<br>    int x1, y1, x2, y2;<br>    in &gt;&gt; x1 &gt;&gt; y1 &gt;&gt; x2 &gt;&gt; y2;<br>    clear(x1, y1, x2, y2, 1);<br>  }<br>  for (i = 0; i &lt; deadly.size(); i++)<br>  {<br>    istrstream in(deadly[i].c_str());<br>    int x1, y1, x2, y2;<br>    in &gt;&gt; x1 &gt;&gt; y1 &gt;&gt; x2 &gt;&gt; y2;<br>    clear(x1, y1, x2, y2, 2);<br>  }<br> <br>  bfs(0, 0);<br> <br>  <br>  node end = node(500,500);<br>  if (!dist.count(end.id()))<br>    return -1;<br>  else<br>    return dist[end.id()];<br>}<br> <br>};<br></td>