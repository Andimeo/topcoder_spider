<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;vector&gt;<br>#include &lt;list&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;queue&gt;<br>#include &lt;deque&gt;<br>#include &lt;stack&gt;<br>#include &lt;bitset&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;functional&gt;<br>#include &lt;numeric&gt;<br>#include &lt;utility&gt;<br>#include &lt;sstream&gt;<br>#include &lt;iostream&gt;<br>#include &lt;iomanip&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;ctime&gt;<br> <br>using namespace std;<br>typedef long long ll;<br>typedef long double ld;<br> <br>class DengklekMessage {<br>public:<br>  int G, P, Plen[50];<br>  int matchLen[50][50][500];<br>  ld p[501][501];<br>  ld prob(int i, int k)<br>  {<br>    if (i &gt;= G)<br>      return 1;<br>    else if (k &lt;= 0)<br>      return 0;<br>    if (k &gt; 500)<br>      k = 500;<br>    ld&amp; res = p[i][k];<br>    if (res != -1) return res;<br>    res = 0;<br>    for (int p = 0; p &lt; P; ++p)<br>    {<br>      int m = matchLen[p][0][i];<br>      if (m &gt;= min(G-i, Plen[p]))<br>        res += prob(i+m, k-1);<br>    }<br>    res /= P;<br>    return res;<br>  }<br>  double theExpected(vector &lt;string&gt; pieces, vector &lt;string&gt; goodSubstring, ll K) {<br>    for (int i = 0; i &lt;= 500; ++i)<br>    for (int j = 0; j &lt;= 500; ++j)<br>      p[i][j] = -1;<br>    string good = "";<br>    for (int i = 0; i &lt; goodSubstring.size(); ++i)<br>      good += goodSubstring[i];<br>    G = good.length();<br>    P = pieces.size();<br>    for (int p = 0; p &lt; P; ++p)<br>      Plen[p] = pieces[p].length();<br>    <br>    for (int p = 0; p &lt; P; ++p)<br>    for (int i = 0; i &lt; Plen[p]; ++i)<br>    for (int j = 0; j &lt; G; ++j)<br>    {<br>      matchLen[p][i][j] = 0;<br>      int k = 0;<br>      while (i+k &lt; Plen[p] &amp;&amp; j+k &lt; G &amp;&amp; pieces[p][i+k] == good[j+k])<br>      {<br>        k++;<br>        matchLen[p][i][j]++;<br>      }<br>    }<br>    <br>    ld res = 0;<br>    int smallK = 500;<br>    if (K &lt; smallK) smallK = K;<br>    <br>    for (int p = 0; p &lt; P; ++p)<br>    for (int i = 0; i &lt; Plen[p]; ++i)<br>    {<br>      int m = matchLen[p][i][0];<br>      if (m &gt;= min(G, Plen[p] - i))<br>      {<br>        res += prob(m, 500);<br>      }<br>    }<br>    res *= K - smallK;<br>    for (int k = 0; k &lt; smallK; ++k)<br>    {<br>      for (int p = 0; p &lt; P; ++p)<br>      for (int i = 0; i &lt; Plen[p]; ++i)<br>      {<br>        int m = matchLen[p][i][0];<br>        if (m &gt;= min(G, Plen[p] - i))<br>        {<br>          res += prob(m, k);<br>        }<br>      }<br>    }<br>    res /= P;<br>    return res;<br>  }<br>};<br> <br> <br> <br>//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!<br></td>