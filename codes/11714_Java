<td class="problemText" colspan="8" valign="middle" align="left">
            /**<br> * Built using CHelper plug-in<br> * Actual solution is at the top<br> */<br>public class DengklekMessage {<br>   public double theExpected(String[] pieces, String[] goodSubstring, long K) {<br>       StringBuilder goodBuilder = new StringBuilder();<br>       for (String x : goodSubstring) goodBuilder.append(x);<br>       String good = goodBuilder.toString();<br>       double oneStep = 1.0 / pieces.length;<br>       double[] ways = new double[good.length() + 1];<br>       for (String firstPiece : pieces) {<br>           for (int offset = 0; offset &lt; firstPiece.length(); ++offset) {<br>               String cur = firstPiece.substring(offset);<br>               if (cur.length() &lt;= good.length()) {<br>                   if (good.startsWith(cur)) {<br>                       ways[cur.length()] += oneStep;<br>                   }<br>               } else if (cur.startsWith(good)) {<br>                   ways[good.length()] += oneStep;<br>               }<br>           }<br>       }<br>       boolean[][] fits = new boolean[good.length()][pieces.length];<br>       for (int oldPos = 0; oldPos &lt; good.length(); ++oldPos) {<br>           String suffix = good.substring(oldPos);<br>           for (int pieceId = 0; pieceId &lt; pieces.length; ++pieceId) {<br>               String piece = pieces[pieceId];<br>               if (piece.length() &lt;= suffix.length()) {<br>                   if (suffix.startsWith(piece))<br>                       fits[oldPos][pieceId] = true;<br>               } else {<br>                   if (piece.startsWith(suffix))<br>                       fits[oldPos][pieceId] = true;<br>               }<br>           }<br>       }<br>       double res = 0.0;<br>       for (int cnt = 1; cnt &lt;= K &amp;&amp; cnt &lt;= good.length(); ++cnt) {<br>           res += (K - cnt + 1) * ways[good.length()];<br>           double[] nways = new double[good.length() + 1];<br>           for (int oldPos = 0; oldPos &lt; good.length(); ++oldPos) {<br>               for (int pieceId = 0; pieceId &lt; pieces.length; ++pieceId)<br>                   if (fits[oldPos][pieceId])<br>                       nways[Math.min(good.length(), oldPos + pieces[pieceId].length())] += oneStep * ways[oldPos];<br>           }<br>           ways = nways;<br>       }<br>       return res;<br>   }<br> <br> <br>}<br> <br> <br> <br>// Powered by FileEdit<br>// Powered by moj 4.16 [modified TZTester]<br>// Powered by CodeProcessor<br></td>