<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Text;<br>using System.Text.RegularExpressions;<br>using System.Collections;<br>using System.Collections.Generic;<br><br>public class MinskyMystery {<br>  public int computeAnswer(long N) {<br>        if (N &lt; 2)<br>            return -1;<br>        if (N == 2)<br>            return 9;<br>        const int MOD =  1000000009;<br>        long res = 1;<br>        for (long i = 2; i * i &lt;= N; ++i)<br>        {<br>            if (N % i != 0)<br>            {<br>                res += (1 + 4 * N + N / i + 1) % MOD;<br>                res %= MOD;<br>            }<br>            else<br>            {<br>                res += (1 + 3 * N + N / i) % MOD;<br>                res %= MOD;<br>                return (int) res;<br>            }<br>        }<br><br><br>      res = 0;<br>      res += ((N - 2) % MOD) * ((2 + 4 * N) % MOD) % MOD;<br>      res += 2 + 3 * N % MOD;<br>        res %= MOD;<br>      long sqrt = 1;<br>        for (long i = 2; i * i &lt;= N; ++i)<br>        {<br>            res += N / i;<br>            sqrt = i;<br>        }<br>      res += N - sqrt;<br>        res %= MOD;<br>        for (long i = 2; i * i &lt;= N; ++i)<br>        {<br>            res += (N / i) - sqrt;<br>        }<br>        res %= MOD;<br>        return (int)res;<br>  }<br><br>    int actual(int N)<br>    {<br>        int[] counts = new int[5];<br>        counts[0] = N;<br>        int res = 0;<br>        ++counts[1];<br>        ++res;<br>        for (int i = 0; i &lt; 10000; ++i)<br>        {<br>            ++counts[1];<br>            ++res;<br>            counts[4] = 0;<br>            while (counts[0] != 0)<br>            {<br>                while (counts[0] != 0 &amp;&amp; counts[1] != 0)<br>                {<br>                    --counts[0];<br>                    --counts[1];<br>                    ++counts[2];<br>                    ++counts[3];<br>                    res += 2;<br>                }<br>                ++counts[4];<br>                ++res;<br>                if (counts[0] == 0 &amp;&amp; counts[1] == 0)<br>                {<br>                    res += counts[3];<br>                    counts[4] += counts[3];<br>                    counts[3] = 0;<br>                    return res;<br>                }<br>                res += counts[3];<br>                counts[1] += counts[3];<br>                counts[3] = 0;<br>            }<br>            res += counts[2];<br>            counts[0] += counts[2];<br>            counts[2] = 0;<br>        }<br>        return -1;<br>    }<br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by CodeProcessor<br></td>