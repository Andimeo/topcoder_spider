<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;algorithm&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;ctime&gt;<br>#include &lt;iostream&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;string&gt;<br>#include &lt;utility&gt;<br>#include &lt;vector&gt;<br> <br>using namespace std;<br> <br>vector&lt;string&gt; split( const string &amp;str, const string &amp;delimeters = " " ) { vector&lt;string&gt; ret; string::size_type pos, end; pos = str.find_first_not_of( delimeters ); while ( pos != string::npos ) { end = str.find_first_of( delimeters, pos+1 ); if ( end == string::npos ) end = str.length(); ret.push_back( str.substr( pos, end-pos ) ); pos = str.find_first_not_of( delimeters, end ); } return ret; }<br>#define foreach(i,c) for ( typeof((c).begin()) i = (c).begin(); i != (c).end(); ++i )<br> <br>int parse_roman_digit(const char c) {<br>  if (c == 'I') return 1;<br>  if (c == 'V') return 5;<br>  if (c == 'X') return 10;<br>  if (c == 'L') return 50;<br>  abort();<br>}<br> <br>int parse_roman(const string &amp;s) {<br>  int ret = 0;<br>  for (int i=0; i&lt;(int)s.size(); ++i) {<br>    int v = parse_roman_digit(s[i]);<br>    if (i+1 &lt; (int)s.size() &amp;&amp; v &lt; parse_roman_digit(s[i+1])) {<br>      v = -v;<br>    }<br>    ret += v;<br>  }<br>  return ret;<br>}<br> <br>struct KingSort {<br>  vector &lt;string&gt; getSortedList(vector &lt;string&gt; kings) { // caret here<br>    vector&lt;pair&lt;string, pair&lt;int, string&gt; &gt; &gt; tosort;<br>    foreach (it, kings) {<br>      vector&lt;string&gt; tokens = split(*it);<br>      tosort.push_back(make_pair(tokens[0], make_pair(parse_roman(tokens[1]), tokens[1])));<br>    }<br>    sort(tosort.begin(), tosort.end());<br> <br>    vector&lt;string&gt; result;<br>    foreach (it, tosort) {<br>      result.push_back(it-&gt;first + ' ' + it-&gt;second.second);<br>    }<br>    return result;<br>  }<br>};<br> <br> <br> <br>// Powered by FileEdit<br>// Powered by moj 4.17 [modified TZTester]<br>// Powered by CodeProcessor<br></td>