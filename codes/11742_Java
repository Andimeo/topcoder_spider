<td class="problemText" colspan="8" valign="middle" align="left">
            /**<br> * Built using CHelper plug-in<br> * Actual solution is at the top<br> */<br>public class BigAndSmallAirports {<br>    static final int INF = 1000000000;<br>    <br>   public long solve(int Nlo, int Nhi, int Blo, int Bhi, int Slo, int Shi) {<br>       long res = 0;<br>       for (int B = Blo; B &lt;= Bhi; ++B)<br>           for (int S = Slo; S &lt;= Shi; ++S) {<br>               if (S &gt;= B) continue;<br>               if (S &gt;= 2) {<br>                   res += intersect(Nlo, Nhi, 1, INF);<br>               } else {<br>                   res += intersect(Nlo, Nhi, 1, 2);<br>               }<br>               for (int K = 1; K &lt;= B; ++K) {<br>                   int left = (B - (K - 1)) * K + S * K;<br>                   int min = (left + S - 1) / S;<br>                   min = Math.max(min, B + 1);<br>                   res += intersect(Nlo, Nhi, min, INF);<br>               }<br>               res += sumChain(B + 1, Nlo, Nhi);<br>           }<br>       return res;<br>   }<br> <br>    private long sumChain(int klo, int nlo, int nhi) {<br>        nlo = Math.max(nlo, klo);<br>        if (nlo &gt; nhi)<br>            return 0;<br>        return (nlo - klo + nhi - klo + 2) * (long) (nhi - nlo + 1) / 2;<br>    }<br> <br>    private long intersect(int l1, int r1, int l2, int r2) {<br>        int l = Math.max(l1, l2);<br>        int r = Math.min(r1, r2);<br>        if (l &gt; r)<br>            return 0;<br>        else<br>            return r - l + 1;<br>    }<br>}<br> <br> <br> <br>// Powered by FileEdit<br>// Powered by moj 4.16 [modified TZTester]<br>// Powered by CodeProcessor<br></td>