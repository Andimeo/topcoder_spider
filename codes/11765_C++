<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;cstdio&gt;<br>#include &lt;cmath&gt;<br>#include &lt;vector&gt;<br>#include &lt;queue&gt;<br>#include &lt;set&gt;<br>#include &lt;map&gt;<br>#include &lt;algorithm&gt;<br>using namespace std;<br>typedef long long ll;<br>typedef pair&lt;int, int&gt; pii;<br>const int INF = 1e9;<br>const double EPS = 1e-9;<br>int dp[101][1&lt;&lt;16];<br>const int MOD = 1e9 + 7;<br>class DengklekPaintingSquares<br>{<br>public:<br>  int numSolutions(int N, int M)<br>  {<br>    memset(dp, 0, sizeof(dp));<br>    dp[0][0] = 1;<br>    int x[8];<br>    int y[8];<br>    for (int i = 0; i &lt; N; ++i)<br>    {<br>      for (int j = 0; j &lt; (1&lt;&lt;(2*M)); ++j)<br>      {<br>        if (dp[i][j] == 0) continue;<br>        int tmp = j;<br>        int num = M;<br>        for (int k = 0; k &lt; M; ++k)<br>        {<br>          x[k] = tmp &amp; 3;<br>          tmp /= 4;<br>          if (x[k] != 0)<br>            --num;<br>        }<br>        for (int mask = 0; mask &lt; (1 &lt;&lt; num); ++mask)<br>        {<br>          int cur = 0;<br>          for (int k = 0; k &lt; M; ++k)<br>          {<br>            if (x[k] != 0)<br>            {<br>              if (x[k] == 2)<br>                y[k] = 1;<br>              else<br>                y[k] = 0;<br>            }<br>            else<br>            {<br>              if (mask &amp; (1&lt;&lt;cur))<br>                y[k] = 1;<br>              else<br>                y[k] = 0;<br>              ++cur;<br>            }<br>          }<br>          for (int k = 0; k &lt; M; ++k)<br>          {<br>            if (y[k] == 1)<br>            {<br>              int cnt = 0;<br>              if (k &gt; 0 &amp;&amp; y[k-1] != 0) ++cnt;<br>              if (k &lt; M-1 &amp;&amp; y[k+1] != 0) ++cnt;<br>              if (x[k] != 0) ++cnt;<br>              if (cnt &amp; 1) ++y[k];<br>            }<br>          }<br>          int nxtMask = 0;<br>          for (int k = M - 1; k &gt;= 0; --k)<br>          {<br>            nxtMask &lt;&lt;= 2;<br>            nxtMask += y[k];<br>          }<br>          dp[i+1][nxtMask] = (dp[i][j] + dp[i+1][nxtMask]) % MOD;<br>        }<br>      }<br>    }<br>    int ans = 0;<br>    for (int j = 0; j &lt; (1&lt;&lt;(2*M)); ++j)<br>    {<br>      if (dp[N][j] == 0) continue;<br>      int tmp = j;<br>      bool f = true;<br>      for (int k = 0; k &lt; M; ++k)<br>      {<br>        x[k] = tmp &amp; 3;<br>        tmp /= 4;<br>        if (x[k] == 2)<br>          f = false;<br>      }<br>      if (f)<br>      {<br>        ans = (ans + dp[N][j]) % MOD;<br>      }<br>    }<br>    return ans;<br>  }<br>};<br><br>#ifdef _DEBUG<br>int main()<br>{<br>  freopen("test.txt", "r", stdin);<br>  DengklekPaintingSquares X;<br>  int n, m;<br>  scanf("%d%d", &amp;n, &amp;m);<br>  printf("%d", X.numSolutions(n, m));<br>  return 0;<br>}<br>#endif<br></td>