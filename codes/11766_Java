<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>import java.util.regex.*;<br>import java.text.*;<br>import java.math.*;<br>import java.awt.geom.*;<br> <br>public class DengklekCountingFormations {<br>  final int mod = 1000000007;<br>  long[][] C;<br> <br>  void precalc() {<br>    int max = 101;<br>    C = new long[max][max];<br>    for (int i = 0; i &lt; max; i++) {<br>      C[i][0] = 1;<br>      C[i][i] = 1;<br>      for (int j = 1; j &lt; i; j++)<br>        C[i][j] = (C[i - 1][j - 1] + C[i - 1][j]) % mod;<br>    }<br>  }<br> <br>  public int numFormations(int N, int M, int K) {<br>    precalc();<br> <br>    int[][][][] d = new int[2][N + 1][M + 1][M + 1];<br>    d[0][0][0][0] = 1;<br>    for (int i = 0; i &lt;= M; i++)<br>        d[0][0][i][0] = 1;<br>    int step = 0;<br>    for (int k = 1; k &lt;= K; k++) {<br>      for (int i = 0; i &lt; 2; i++)<br>        for (int j = 0; j &lt;= M; j++)<br>          Arrays.fill(d[step ^ 1][i][j], 0);<br>      for (int i=0; i&lt;=M; i++)<br>        d[step^1][0][i][0] = 1;<br>      for (int rows = 1; rows &lt;= N; rows++) {<br>        d[step ^ 1][rows][0][0] = 1;<br>        for (int cols = 1; cols &lt;= M; cols++) {<br>          for (int cols2 = 0; cols2 &lt;= cols; cols2++) {<br>            long t = 0;<br>            long t2 = 1;<br>            for (int rows2 = 1; rows2 &lt;= rows; rows2++) {<br>              t2 = (t2 * C[cols][cols2]) % mod;<br>              if (rows2 &lt; rows &amp;&amp; cols2 &lt; cols) {<br>                long r = (d[step][rows2][cols - cols2][0] * (long) d[step ^ 1][rows<br>                    - rows2][cols][cols2 + 1])<br>                    % mod;<br>                r = (r * t2) % mod;<br>                r = (r * C[rows][rows2]) % mod;<br>                t = (t + r) % mod;<br>              }<br>              if (rows == rows2) {<br>                if (rows == 1 &amp;&amp; cols == cols2) {<br>                  t++;<br>                }<br>                if (cols2 &lt; cols) {<br>                  long r = d[step][rows][cols - cols2][0];<br>                  r = (r * t2) % mod;<br>                  t = (t + r) % mod;<br>                }<br>              }<br>            }<br>            d[step ^ 1][rows][cols][cols2] = (int) t;<br>          }<br>          for (int cols2 = cols - 1; cols2 &gt;= 0; cols2--) {<br>            d[step ^ 1][rows][cols][cols2] += d[step ^ 1][rows][cols][cols2 + 1];<br>            d[step ^ 1][rows][cols][cols2] %= mod;<br>          }<br>        }<br>      }<br>      step^=1;<br>    }<br>    long ans = d[step][N][M][0];<br>    return (int) ans;<br>  }<br>  <br>  <br>}<br>//Powered by [KawigiEdit] 2.0!<br></td>