<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;cstring&gt;<br>#include &lt;vector&gt;<br>#include &lt;list&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;deque&gt;<br>#include &lt;stack&gt;<br>#include &lt;bitset&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;functional&gt;<br>#include &lt;numeric&gt;<br>#include &lt;utility&gt;<br>#include &lt;sstream&gt;<br>#include &lt;iostream&gt;<br>#include &lt;iomanip&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;ctime&gt;<br> <br>using namespace std;<br> <br>#define forn(i, n) for (int i = 0; i &lt; (int)(n); i++)<br> <br>class NoRepeatPlaylist {<br>public:<br>  int numPlaylists(int, int, int);<br>};<br> <br>const int MOD = (int)1e9 + 7;<br> <br>const int maxN = 103;<br> <br>typedef long long ll;<br> <br>int f[maxN][maxN];<br> <br>void add( int &amp;a, int b, int k )<br>{<br>  a = (a + (ll)b * k) % MOD;<br>}<br> <br>int NoRepeatPlaylist::numPlaylists(int N, int M, int P)<br>{<br>  memset(f, 0, sizeof(f));<br>  f[0][0] = 1;<br>  forn(i, P)<br>    forn(j, N + 1)<br>      if (f[i][j])<br>      {<br>        add(f[i + 1][j], f[i][j], j - min(M, i));<br>        add(f[i + 1][j + 1], f[i][j], N - j);<br>      }<br>  return f[P][N];<br>}<br></td>