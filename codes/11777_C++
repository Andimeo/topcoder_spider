<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;stdio.h&gt;<br>#include &lt;math.h&gt;<br>#include &lt;vector&gt;<br>#include &lt;string&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;queue&gt;<br>#include &lt;iostream&gt;<br>#include &lt;sstream&gt;<br>using namespace std;<br> <br>class BuildingReorganization<br>{<br>  public:<br>  long long real_calc(vector&lt;long long&gt; G, int remain) {<br>    G.push_back(99999999999LL);<br>    long long res = 0;<br>    int n = G.size();<br>    sort(G.begin(), G.end());<br>    for (int i=0; i&lt;n; i++) {<br>      if (!remain) break;<br>      int now_cover = min((long long)remain, (i+1)*(long long)(G[i+1]-G[i]));<br>      remain -= now_cover;<br>      int same_cover = now_cover / (i+1);<br>      int partial_cover = now_cover % (i+1);<br>      res += (G[i]*(long long)same_cover+same_cover*(long long)(same_cover-1)/2)*(i+1);<br>      res += (G[i]+same_cover) * (long long)partial_cover;<br>    }<br>    return res;<br>  }<br>  <br>  long long calc(vector&lt;int&gt; H, int target, int ll, int rr, int A, int B, int cost) {<br>    vector&lt;long long&gt; G;<br>    for (int i=ll; i&lt;=rr; i++)<br>      if (i != A &amp;&amp; i != B) G.push_back(abs(target-i)*cost + H[i]);<br>    return real_calc(G, H[target]);<br>  }<br>  <br>  long long theMin(vector &lt;int&gt; H, int A, int B, int cost)<br>  {<br>    int n = H.size();<br>    long long def = H[A]*(long long)(H[A]-1)/2 + H[B]*(long long)(H[B]-1)/2;<br>    long long res = -1;<br>    for (int i=0; i&lt;n; i++) {<br>      if ((i==A) || (i==B)) continue;<br>      int p1_idx = 0;<br>      int p4_idx = H[A];<br>      if (i==0 || (A==0 &amp;&amp; i==1) || (A==0 &amp;&amp; B==1 &amp;&amp; i==2)) p1_idx = H[A];<br>      while (p1_idx+100 &lt; p4_idx) {<br>        int p2_idx = (p1_idx * 29LL + p4_idx) / 30;<br>        int p3_idx = (p1_idx + p4_idx * 29LL) / 30;<br>        H[A] -= p2_idx; long long s2 = calc(H, A, 0, i-1, A, B, cost); s2 += p2_idx*(long long)abs(i-A)*cost + H[i]*(long long)p2_idx + p2_idx*(long long)(p2_idx-1)/2; H[i] += p2_idx;<br>        s2 += calc(H, B, i, n-1, A, B, cost); H[i] -= p2_idx; H[A] += p2_idx;<br>        H[A] -= p3_idx; long long s3 = calc(H, A, 0, i-1, A, B, cost); s3 += p3_idx*(long long)abs(i-A)*cost + H[i]*(long long)p3_idx + p3_idx*(long long)(p3_idx-1)/2; H[i] += p3_idx;<br>        s3 += calc(H, B, i, n-1, A, B, cost); H[i] -= p3_idx; H[A] += p3_idx;<br>//        printf("%d [%d] [%d] %d : %lld %lld\n", p1_idx, p2_idx, p3_idx, p4_idx, s2, s3);<br>        if (s2 &gt; s3) p1_idx = p2_idx; else p4_idx = p3_idx;<br>      }<br>      for (int j=p1_idx; j&lt;=p4_idx; j++) {<br>        H[A] -= j; long long s2 = calc(H, A, 0, i-1, A, B, cost);<br>//        printf("i = %d j = %d s2 = %lld\n", i, j, s2);<br>        s2 += j*(long long)abs(i-A)*cost + H[i]*(long long)j + j*(long long)(j-1)/2; H[i] += j;<br>//        printf("i = %d j = %d s2 = %lld\n", i, j, s2);<br>        s2 += calc(H, B, i, n-1, A, B, cost); H[i] -= j; H[A] += j;<br>//        printf("i = %d j = %d s2 = %lld\n", i, j, s2);<br>        if (res == -1 || res &gt; s2) res = s2;<br>      }<br>    }<br>    return def + res;<br>  };<br>};<br></td>