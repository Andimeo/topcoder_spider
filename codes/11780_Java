<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>import java.util.regex.*;<br>import java.text.*;<br>import java.math.*;<br> <br> <br>public class MagicBoard<br>{<br>  void dfs(int i, int j, String[] f, boolean[][] col) {<br>    if (col[i][j]) {<br>      return;<br>    }<br>    col[i][j] = true;<br>    for (int i1 = 0; i1 &lt; f.length; ++i1) {<br>      if (f[i1].charAt(j) == '#') {<br>        dfs(i1, j, f, col);<br>      }<br>    }<br>    for (int j1 = 0; j1 &lt; f[0].length(); ++j1) {<br>      if (f[i].charAt(j1) == '#') {<br>        dfs(i, j1, f, col);<br>      }<br>    }<br>  }<br> <br>  public String ableToUnlock(String[] board)<br>  {<br>    int n = board.length;<br>    int m = board[0].length();<br>    boolean[][] col = new boolean[n][m];<br>    int count = 0, comps = 0;<br>    int[] rs = new int[n];<br>    int[] cs = new int[m];<br>    for (int i = 0; i &lt; n; ++i) {<br>      for (int j = 0; j &lt; m; ++j) {<br>        if (board[i].charAt(j) == '#') {<br>          count++;<br>          rs[i]++;<br>          cs[j]++;<br>          if (!col[i][j]) {<br>            comps++;<br>            dfs(i, j, board, col);<br>          }<br>        }<br>      }<br>    }<br>    if (comps &gt; 1) {<br>      return "NO";<br>    }<br>    int oddRows = 0, oddCols = 0;<br>    for (int c : rs) {<br>      if (c % 2 == 1) {<br>        oddRows++;<br>      }<br>    }<br>    for (int c : cs) {<br>      if (c % 2 == 1) {<br>        oddCols++;<br>      }<br>    }<br>    if (count % 2 == 0) {<br>      return oddRows == 0 &amp;&amp; (oddCols == 0 || oddCols == 2) ? "YES" : "NO";<br>    } else {<br>      return oddRows == 1 &amp;&amp; oddCols == 1 ? "YES" : "NO";<br>    }<br>  }<br>  <br> <br>}<br>//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!<br></td>