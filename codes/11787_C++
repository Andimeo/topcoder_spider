<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;vector&gt;<br>#include &lt;list&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;deque&gt;<br>#include &lt;queue&gt;<br>#include &lt;stack&gt;<br>#include &lt;bitset&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;functional&gt;<br>#include &lt;numeric&gt;<br>#include &lt;utility&gt;<br>#include &lt;sstream&gt;<br>#include &lt;iostream&gt;<br>#include &lt;iomanip&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cctype&gt;<br>#include &lt;string&gt;<br>#include &lt;cstring&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;ctime&gt;<br><br>using namespace std;<br><br>#define SIZE(X) ((int)(X.size()))<br>#define MP(X,Y) make_pair(X,Y)<br>typedef long long int64;<br>#define two(X) (1&lt;&lt;(X))<br>typedef pair&lt;int,int&gt; ipair;<br><br>class EllysNumbers<br>{<br>public:<br>  int length;<br>  int key[60000];<br>  int64 f[two(20)];<br>  int64 getSubsets(int64 n, vector &lt;string&gt; vs)<br>  {<br>    string str="";<br>    for (int i=0;i&lt;SIZE(vs);i++) str+=vs[i];<br>    vector&lt;int&gt; a;<br>    istringstream sin(str);<br>    for (int p;sin&gt;&gt;p;a.push_back(p));<br>    set&lt;int&gt; S;<br>    for (int i=0;i&lt;SIZE(a);i++)<br>      for (int m=a[i],p=2;m&gt;1;)<br>      {<br>        if (m%p==0) <br>        {<br>          S.insert(p);<br>          for (;m%p==0;m/=p);<br>        }<br>        if (p&amp;1) p+=2;<br>        else p++;<br>        if (p*p&gt;m) p=m;<br>      }<br>    vector&lt;int&gt; GS(S.begin(),S.end());<br>    vector&lt;ipair&gt; D;<br>    for (int i=0;i&lt;SIZE(GS);i++)<br>      if (n%GS[i]==0)<br>      {<br>        int e=0;<br>        for (;n%GS[i]==0;n/=GS[i]) e++;<br>        D.push_back(MP(GS[i],e));<br>      }<br>    if (n&gt;1) return 0;<br>    int size=SIZE(D);<br>    length=0;<br>    for (int i=0;i&lt;SIZE(a);i++)<br>    {<br>      int set=0;<br>      int m=a[i];<br>      for (int k=0;k&lt;size;k++)<br>      {<br>        int p=D[k].first;<br>        int e=0;<br>        for (;m%p==0;m/=p) e++;<br>        if (e&gt;0 &amp;&amp; e!=D[k].second)<br>        {<br>          set=-1;<br>          break;<br>        }<br>        if (e==D[k].second) set|=two(k);<br>      }<br>      if (m==1 &amp;&amp; set&gt;=0) key[length++]=set;<br>    }<br>    memset(f,0,sizeof(f));<br>    f[0]=1;<br>    for (int i=0;i&lt;length;i++)<br>    {<br>      int mask=key[i];<br>      for (int set=0;set&lt;two(size);set++) <br>        if (f[set] &amp;&amp; (set&amp;mask)==0)<br>          f[set|key[i]]+=f[set];<br>    }<br>    return f[two(size)-1];<br>  }<br>};<br></td>