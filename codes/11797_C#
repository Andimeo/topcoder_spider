<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Text;<br>using System.Collections;<br>using System.Diagnostics;<br>using System.Collections.Generic;<br>public class RollingDiceDivOne<br>{<br>    /////////////////////////////////////////TEMPLATE HERE/////////////////////////////////////////////<br>    const int INF = (int)(1e9 + exp);<br>    const int mod = (int)(1e9 + exp);<br>    const double exp = 1e-9;<br>    const int dir = 4;<br>    int[] dx = new int[dir] { 1, 0, -1, 0 };<br>    int[] dy = new int[dir] { 0, 1, 0, -1 };<br>    ////////////////////////////////////////TEMPLATE END/////////////////////////////////////////////////<br><br>    public long mostLikely(int[] dice)<br>    {<br>        Array.Sort(dice);<br>        int one = 0;<br>        long min = 0;<br>        long max = 0;<br>        for (int i = 0; i &lt; dice.Length - 1; i++)<br>        {<br>            if (dice[i] == 1)<br>                one++;<br>            else<br>            {<br>                min++;<br>                max += dice[i];<br>            }<br>        }//for i<br><br>        if (dice[dice.Length - 1] == 1)<br>            return dice.Length;<br>        if (max - min &gt; dice[dice.Length - 1] - 1)<br>        {<br>            long a0 = (min + max) &gt;&gt; 1;<br>            long b0 = (min + max + 1) &gt;&gt; 1;<br>            long a1 = (dice[dice.Length - 1] + 1L) &gt;&gt; 1;<br>            long b1 = (dice[dice.Length - 1] + 1L + 1) &gt;&gt; 1;<br><br>            if (a0 == b0)<br>                return a0 + a1 + one;<br>            if (a1 == b1)<br>                return a0 + a1 + one;<br>            return a0 + b1 + one;<br>        }<br>        return max + 1 + one;<br><br><br><br>    }//mostLikely<br><br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003] Modified for C# by ysn<br>// Powered by CodeProcessor<br></td>