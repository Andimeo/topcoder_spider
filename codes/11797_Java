<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.List;<br>import java.util.Comparator;<br>import java.util.AbstractList;<br>import java.util.Collections;<br><br>/**<br> * Built using CHelper plug-in<br> * Actual solution is at the top<br> * @author Egor Kulikov (egor@egork.net)<br> */<br>public class RollingDiceDivOne {<br>  public long mostLikely(int[] dice) {<br>    Collections.sort(Array.wrap(dice), new ReverseComparator&lt;Integer&gt;());<br>    long from = 1;<br>    long to = dice[0];<br>    for (int i = 1; i &lt; dice.length; i++) {<br>      from += dice[i];<br>      to++;<br>      if (from &gt; to) {<br>        long nextFrom = (from + to) / 2;<br>        long nextTo = (from + to + 1) / 2;<br>        from = nextFrom;<br>        to = nextTo;<br>      }<br>    }<br>    return from;<br>  }<br><br><br>}<br><br>abstract class Array&lt;T&gt; extends AbstractList&lt;T&gt; {<br><br>  public static List&lt;Integer&gt; wrap(int...array) {<br>    return new IntArray(array);<br>  }<br><br>  protected static class IntArray extends Array&lt;Integer&gt; {<br>    protected final int[] array;<br><br>    protected IntArray(int[] array) {<br>      this.array = array;<br>    }<br><br>    public int size() {<br>      return array.length;<br>    }<br><br>    public Integer get(int index) {<br>      return array[index];<br>    }<br><br>    public Integer set(int index, Integer value) {<br>      int result = array[index];<br>      array[index] = value;<br>      return result;<br>    }<br>  }<br><br>  }<br><br>class ReverseComparator&lt;T extends Comparable&lt;T&gt;&gt; implements Comparator&lt;T&gt; {<br>  public int compare(T o1, T o2) {<br>    return o2.compareTo(o1);<br>  }<br>}<br><br><br><br>// Powered by FileEdit<br>// Powered by moj 4.17 [modified TZTester]<br>// Powered by CodeProcessor<br></td>