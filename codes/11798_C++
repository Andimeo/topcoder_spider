<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;vector&gt;<br>#include &lt;list&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;queue&gt;<br>#include &lt;deque&gt;<br>#include &lt;stack&gt;<br>#include &lt;bitset&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;functional&gt;<br>#include &lt;numeric&gt;<br>#include &lt;utility&gt;<br>#include &lt;sstream&gt;<br>#include &lt;iostream&gt;<br>#include &lt;iomanip&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;ctime&gt;<br> <br>using namespace std;<br> <br>typedef long long ll;<br> <br>class BinaryPolynomialDivOne {<br>public:<br>  int findCoefficient(vector&lt;int&gt; a, long long m, long long k) {<br>    int n = a.size();<br>    map&lt;ll, int&gt; am;<br>    am[k] = 1;<br>    for (int pw = 60; pw &gt;= 0; --pw) {<br>      if (m &gt;&gt; pw &amp; 1) {<br>        ll mx = 0;<br>        for (int j = 0; j &lt; pw; ++j) {<br>          mx += (n - 1) * (1LL &lt;&lt; j);<br>        }<br>        map&lt;ll, int&gt; nam;<br>        for (map&lt;ll, int&gt;::iterator it = am.begin(); it != am.end(); ++it) {<br>          ll rem = it-&gt;first;<br>          int w = it-&gt;second;<br>          if (!w)<br>            continue;<br>          for (int i = 0; i &lt; n; ++i) {<br>            if (a[i]) {<br>              ll cur = (1LL * i) &lt;&lt; pw;<br>              if (rem &gt;= cur) {<br>                ll nrem = rem - cur;<br>                if (nrem &lt;= mx) {<br>                  nam[nrem] ^= w;<br>                }<br>              }<br>            }<br>          }<br>        }<br>        am = nam;<br>      }<br>    }<br>    return am[0];<br>  }<br>};<br> <br> <br>//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!<br></td>