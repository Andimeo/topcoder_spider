<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.Map;<br>import java.util.HashMap;<br><br>/**<br> * Built using CHelper plug-in<br> * Actual solution is at the top<br> * @author Egor Kulikov (egor@egork.net)<br> */<br>public class BinaryPolynomialDivOne {<br>  Map&lt;Pair&lt;Long, Integer&gt;, Integer&gt; answer = new HashMap&lt;Pair&lt;Long, Integer&gt;, Integer&gt;();<br><br>  public int findCoefficient(int[] a, long m, long k) {<br>    return go(a, m, k, 0);<br>  }<br><br>  private int go(int[] a, long m, long k, int step) {<br>    if (m == 0)<br>      return k == 0 ? 1 : 0;<br>    long ratio = Long.lowestOneBit(m);<br>    if (((ratio - 1) &amp; k) != 0)<br>      return 0;<br>    int addSteps = Long.bitCount(ratio - 1);<br>    m &gt;&gt;= addSteps;<br>    k &gt;&gt;= addSteps;<br>    step += addSteps;<br>    Pair&lt;Long, Integer&gt; key = Pair.makePair(k, step);<br>    if (answer.containsKey(key))<br>      return answer.get(key);<br>    int result = 0;<br>    for (int i = (int) (k &amp; 1); i &lt;= k &amp;&amp; i &lt; a.length; i += 2) {<br>      if (a[i] == 1)<br>        result += go(a, m - 1, k - i, step);<br>    }<br>    result &amp;= 1;<br>    answer.put(key, result);<br>    return result;<br>  }<br><br><br>}<br><br>class Pair&lt;U, V&gt; implements Comparable&lt;Pair&lt;U, V&gt;&gt; {<br>  public final U first;<br>  public final V second;<br><br>  public static&lt;U, V&gt; Pair&lt;U, V&gt; makePair(U first, V second) {<br>    return new Pair&lt;U, V&gt;(first, second);<br>  }<br><br>  private Pair(U first, V second) {<br>    this.first = first;<br>    this.second = second;<br>  }<br><br>  public boolean equals(Object o) {<br>    if (this == o) return true;<br>    if (o == null || getClass() != o.getClass()) return false;<br><br>    Pair pair = (Pair) o;<br><br>    return !(first != null ? !first.equals(pair.first) : pair.first != null) &amp;&amp; !(second != null ? !second.equals(pair.second) : pair.second != null);<br><br>  }<br><br>  public int hashCode() {<br>    int result = first != null ? first.hashCode() : 0;<br>    result = 31 * result + (second != null ? second.hashCode() : 0);<br>    return result;<br>  }<br><br>  public String toString() {<br>    return "(" + first + "," + second + ")";<br>  }<br><br>  public int compareTo(Pair&lt;U, V&gt; o) {<br>    int value = ((Comparable&lt;U&gt;)first).compareTo(o.first);<br>    if (value != 0)<br>      return value;<br>    return ((Comparable&lt;V&gt;)second).compareTo(o.second);<br>  }<br>}<br><br><br><br>// Powered by FileEdit<br>// Powered by moj 4.17 [modified TZTester]<br>// Powered by CodeProcessor<br></td>