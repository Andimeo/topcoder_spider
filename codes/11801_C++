<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;vector&gt;<br>#include &lt;list&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;deque&gt;<br>#include &lt;stack&gt;<br>#include &lt;bitset&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;functional&gt;<br>#include &lt;numeric&gt;<br>#include &lt;utility&gt;<br>#include &lt;sstream&gt;<br>#include &lt;iostream&gt;<br>#include &lt;iomanip&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;ctime&gt;<br>#include &lt;fstream&gt;<br>#include &lt;queue&gt;<br> <br>using namespace std;<br> <br> <br>class RollingDiceDivTwo {<br>public:<br>  int minimumFaces(vector &lt;string&gt;);<br>};<br> <br>int RollingDiceDivTwo::minimumFaces(vector &lt;string&gt; rolls) {<br>  vector&lt;int&gt; ans;<br>  int n = rolls[0].length();<br>  for(int i = 0; i&lt; n; ++i) ans.push_back(0);<br>  for(int i = 0; i&lt; rolls.size(); ++i)<br>  {<br>    vector&lt;int&gt; v;<br>    for(int j = 0; j&lt; n; ++j) <br>    {<br>      v.push_back(rolls[i][j]-'0');<br>    }<br>    sort(v.begin(),v.end());<br>    for(int j = 0; j&lt; n; ++j)<br>    {<br>      if(v[j] &gt;ans[j]) ans[j] = v[j];<br>    }<br>  }<br>  int ret = 0;<br>  for(int i = 0; i&lt; n; ++i) ret += ans[i];<br>  return ret;<br>}<br> <br> <br>//Powered by [BrainDeveloper] 1.0!<br> <br> <br> <br> <br> <br> <br> <br> <br> <br>//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!<br></td>