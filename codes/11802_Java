<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.Arrays;<br> <br>public class MergersDivTwo {<br> <br>  public double findMaximum(int[] r, int k) {<br>    int l = r.length;<br>    Arrays.sort(r);<br>    <br>//    double[][] dp = new double[l][l];<br>    double[] dp = new double[l];<br>    <br>    int[][] sum = new int[l][l];<br>    sum[0][0] = r[0];<br>    for (int i = 1; i &lt; l; i++) {<br>      sum[0][i]=sum[0][i-1]+r[i];<br>    }<br>    for (int i = 1; i &lt; l; i++) {<br>      for (int j = 0; j&lt;l; j++) {<br>        if(i&gt;j)continue;<br>        sum[i][j]=sum[0][j]-sum[0][i-1];<br> <br>      }<br>    }  <br>    <br>//    for (int i = 0; i &lt; l; i++) {<br>//      for (int j = 0; j&lt;l; j++) {<br>//        if(i&gt;j)continue;<br>//        System.out.println(i+" "+j+" "+sum[i][j]);<br>//      }<br>//    }  <br>    <br>    for (int i = k-1; i &lt; l; i++) {<br>      dp[i]=sum[0][i];<br>      dp[i]/=(i+1);<br>    }<br>    for (int i = k-1; i &lt; l; i++) {<br>      for (int j = k-1; i+j&lt;l; j++) {<br>        dp[i+j]=Math.max(dp[i+j], (dp[i]+sum[i+1][i+j])/(j+1));<br>      }<br>    }<br>    <br>    <br>    <br>    <br>    <br>    <br>    return dp[l-1];<br>  }<br>  <br>  <br>  <br>  <br> <br>}<br></td>