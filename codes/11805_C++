<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;vector&gt;<br>#include &lt;list&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;queue&gt;<br>#include &lt;deque&gt;<br>#include &lt;stack&gt;<br>#include &lt;bitset&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;functional&gt;<br>#include &lt;numeric&gt;<br>#include &lt;utility&gt;<br>#include &lt;sstream&gt;<br>#include &lt;iostream&gt;<br>#include &lt;iomanip&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;ctime&gt;<br>#include &lt;cstring&gt;<br> <br> <br>#define ALL(x) x.begin(), x.end()<br>#define fr(x, E) for (__typeof(E.begin()) x = E.begin(); x != E.end(); x++)<br>#define MP make_pair<br>#define PB push_back<br>#define FR first<br>#define SC second<br>#define ERR cerr &lt;&lt; "ERROR" &lt;&lt; endl<br>#define LL long long<br>#define LD long double<br>#define PII pair&lt;int, int&gt;<br>#define PIII pair&lt;PII, int&gt;<br>#define PDI pair&lt;double, int&gt;<br>#define PID pair&lt;int, double&gt;<br>#define SZ(a) (int)((a).size())<br>#define VEC vector<br>#define STR string<br>#define ISS istringstream<br>#define OSS ostringstream<br>#define CLR(a, b) memset(a, b, sizeof(a))<br>#define gmin(a, b) { if (b &lt; a) a = b; }<br>#define gmax(a, b) { if (b &gt; a) a = b; }<br> <br>using namespace std;<br> <br>int toint(STR S) { ISS iss(S); int temp; iss &gt;&gt; temp; return temp; }<br>int toLL(STR S) { ISS iss(S); LL temp; iss &gt;&gt; temp; return temp; }<br>template &lt;class T&gt; STR toSTR(T A) { OSS oss; oss &lt;&lt; A; return oss.str(); }<br>int N;<br>struct Tbio{<br>  VEC&lt;int&gt; adj[1001];<br>  int ans[1001];<br>  int link[1001];<br>  bool vis[1001];<br>  void add(int a, int b)<br>  {<br>    adj[a].PB(b); <br>  }<br>  void clear()<br>  {<br>    for (int i = 1; i &lt;= N; i++) adj[i].clear();<br>  }<br>  bool find(int now)<br>  {<br>    fr(x, adj[now]) if (!vis[*x]){<br>      vis[*x] = true;<br>      if (link[*x] == -1 || find(link[*x])) { link[*x] = now; return true; }<br>    }<br>    return false;<br>  }<br>  int solve()<br>  {<br>    CLR(ans, -1); CLR(link, -1);<br>    int ma = 0;<br>    for (int i = N; i &gt;= 1; i--){<br>      CLR(vis ,0); ma += find(i);<br>    }<br>    return ma;<br>  }<br>} bio;<br>int dis[1001][1001];<br>class SafeReturn {<br>public:<br>  int minRisk(int N, vector &lt;string&gt; a) {<br>    ::N = N; int n = SZ(a);<br>    for (int i = 0; i &lt; n; i++) dis[i][i] = 0;<br>    for (int i = 0; i &lt; n; i++)<br>      for (int j = 0; j &lt; n; j++){<br>        if (a[i][j] == '-') dis[i][j] = 10000; else dis[i][j] = a[i][j] - '0';<br>      }<br>    for (int k = 0; k &lt; n; k++)<br>      for (int i = 0; i &lt; n; i++)<br>        for (int j = 0; j &lt; n; j++) if (dis[i][k] != 10000 &amp;&amp; dis[k][j] != 10000)<br>          gmin(dis[i][j], dis[i][k] + dis[k][j]);<br>    for (int i = 1; i &lt;= N; i++)<br>      for (int j = 1; j &lt;= N; j++)<br>        if (dis[0][i] + dis[i][j] == dis[0][j])<br>          bio.add(i, j);<br>    return N - bio.solve();<br>  }<br>};<br></td>