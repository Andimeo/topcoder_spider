<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.Arrays;<br> <br>/**<br> * Built using CHelper plug-in<br> * Actual solution is at the top<br> */<br>public class SafeReturn {<br>    static final int INF = (int) 1e9;<br>    <br>    public int minRisk(int numSoldiers, String[] streets) {<br>        int n = streets.length;<br>        int[][] dist = new int[n][n];<br>        for (int i = 0; i &lt; n; ++i)<br>            for (int j = 0; j &lt; n; ++j)<br>                if (i == j)<br>                    dist[i][j] = 0;<br>                else if (streets[i].charAt(j) == '-')<br>                    dist[i][j] = INF;<br>                else<br>                    dist[i][j] = streets[i].charAt(j) - '0';<br>        for (int k = 0; k &lt; n; ++k)<br>            for (int i = 0; i &lt; n; ++i)<br>                for (int j = 0; j &lt; n; ++j)<br>                    dist[i][j] = Math.min(dist[i][j], dist[i][k] + dist[k][j]);<br>        boolean[][] graph = new boolean[numSoldiers][numSoldiers];<br>        for (int i = 0; i &lt; numSoldiers; ++i)<br>            for (int j = 0; j &lt; numSoldiers; ++j)<br>                if (i != j &amp;&amp; dist[0][i + 1] + dist[i + 1][j + 1] == dist[0][j + 1])<br>                    graph[i][j] = true;<br>        return numSoldiers - maxMatching(numSoldiers, graph);<br>    }<br> <br>    private int maxMatching(int n, boolean[][] graph) {<br>        int[] match = new int[n];<br>        Arrays.fill(match, -1);<br>        int res = 0;<br>        for (int i = 0; i &lt; n; ++i) {<br>            boolean[] mark = new boolean[n];<br>            if (dfs(i, mark, match, graph, n))<br>                ++res;<br>        }<br>        return res;<br>    }<br> <br>    private boolean dfs(int at, boolean[] mark, int[] match, boolean[][] graph, int n) {<br>        if (mark[at]) return false;<br>        mark[at] = true;<br>        for (int i = 0; i &lt; n; ++i) {<br>            if (!graph[at][i]) continue;<br>            if (match[i] &lt; 0 || dfs(match[i], mark, match, graph, n)) {<br>                match[i] = at;<br>                return true;<br>            }<br>        }<br>        return false;<br>    }<br> <br> <br>}<br> <br> <br> <br>// Powered by FileEdit<br>// Powered by moj 4.16 [modified TZTester]<br>// Powered by CodeProcessor<br></td>