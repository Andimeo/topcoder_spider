<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections;<br>using System.Collections.Generic;<br>using System.Text;<br><br>using System.Text.RegularExpressions;<br><br>public class FoxAndMountain<br>{<br>    private int Get(string his, int k, char c)<br>    {<br>        if (his[k] == c)<br>        {<br>            return k + 1;<br>        }<br><br>        for (int i = 1; i &lt; k; i++)<br>        {<br>            bool ok = true;<br>            int n = k - i;<br>            for (int j = 0; j &lt; n; j++)<br>            {<br>                if (his[j] != his[i + j])<br>                {<br>                    ok = false;<br>                    break;<br>                }<br>            }<br>            if (ok)<br>            {<br>                if (his[n] == c)<br>                {<br>                    return n + 1;<br>                }<br>            }<br>        }<br>        if (his[0] == c)<br>        {<br>            return 1;<br>        }<br>        return 0;<br>    }<br><br>    public int count(int n, string history)<br>    {<br>        if ((n &amp; 1) != 0)<br>        {<br>            return 0;<br>        }<br><br>        int l = history.Length;<br>        long MM = 1000000009;<br>        long[, ,] dp = new long[n + 1, n + 1, l + 1];<br><br>        dp[0, 0, 0] = 1;<br><br>        for (int i = 0; i &lt; n; i++)<br>        {<br>            for (int j = 0; j &lt;= n; j++)<br>            {<br>                for (int k = 0; k &lt;= l; k++)<br>                {<br>                    if (dp[i, j, k] &gt; 0)<br>                    {<br>                        if (k == l)<br>                        {<br>                            dp[i + 1, j + 1, k] = (dp[i + 1, j + 1, k] + dp[i, j, k]) % MM;<br>                            if (j &gt; 0)<br>                            {<br>                                dp[i + 1, j - 1, k] = (dp[i + 1, j - 1, k] + dp[i, j, k]) % MM;<br>                            }<br>                        }<br>                        else<br>                        {<br>                            int nk = Get(history, k, 'U');<br>                            dp[i + 1, j + 1, nk] = (dp[i + 1, j + 1, nk] + dp[i, j, k]) % MM;<br><br>                            if (j &gt; 0)<br>                            {<br>                                int nk2 = Get(history, k, 'D');<br>                                dp[i + 1, j - 1, nk2] = (dp[i + 1, j - 1, nk2] + dp[i, j, k]) % MM;<br>                            }<br>                        }<br>                    }<br><br>                }<br>            }<br>        }<br><br>        return (int)dp[n, 0, l];<br>    }<br>}<br></td>