<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections;<br>using System.Collections.Generic;<br><br>public class Stamp<br>{<br>  private string s;<br>  private int n, l, cost;<br><br>  bool can( int p, int color )<br>  {<br>    if ( p + l &gt; n ) return false;<br>    for ( int i = 0; i &lt; l; ++i )<br>      if ( s[p + i] == '*' || s[p + i] == "RGB"[color] )<br>      {<br><br>      }<br>      else return false;<br>    return true;<br>  }<br><br>  private const int INF = int.MaxValue / 2;<br><br>  private int[, ,] dp;<br>  private bool[, ,] was;<br><br>  int go( int p, int taken, int color )<br>  {<br>    if ( p == n ) return 0;<br>    if ( was[p, taken, color] ) return dp[p, taken, color];<br>    int res = INF;<br><br>    if ( taken &gt; 0 )<br>    {<br>      res = go( p + 1, taken - 1, color );<br>      if ( can( p, color ) )<br>      {<br>        res = Math.Min( res, cost + go( p + 1, l - 1, color ) );<br>      }<br>    }<br>    else<br>    {<br>      for ( int i = 0; i &lt; 3; ++i )<br>        if ( can( p, i ) )<br>        {<br>          res = Math.Min( res, cost + go( p + 1, l - 1, i ) );<br>        }<br>    }<br><br>    was[p, taken, color] = true;<br>    return dp[p, taken, color] = res;<br>  }<br><br>  public int getMinimumCost( string desiredColor, int stampCost, int pushCost )<br>  {<br>    s = desiredColor;<br>    n = s.Length;<br>    cost = pushCost;<br><br>    int best = INF;<br><br>    for ( l = 1; l &lt;= n; ++l )<br>    {<br>      was = new bool[n, l, 3];<br>      dp = new int[n, l, 3];<br>      int cur = l * stampCost;<br><br>      cur += go( 0, 0, 0 );<br><br>      best = Math.Min( best, cur );<br>    }<br><br>    return best;<br>  }<br><br>}<br><br><br> <br>// Powered by moj 4.16 [modified TZTester]<br>// Powered by CleanSharp 1.0<br>// Powered by CodeProcessor<br></td>