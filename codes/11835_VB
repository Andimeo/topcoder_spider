<td class="problemText" colspan="8" valign="middle" align="left">
            Imports Microsoft.VisualBasic<br>Imports System<br>Imports System.Collections<br>Imports System.Text<br>Imports System.Collections.Generic<br>Imports System.Math<br> <br>Public Class Stamp<br>    Public colors As String<br>    Public N As Integer<br> <br>    Private Function NotEq(ByVal c As Char, ByVal d As Char) As Boolean<br>        If c = "*"c OrElse d = "*"c Then<br>            Return False<br>        Else<br>            Return c &lt;&gt; d<br>        End If<br>    End Function<br>    Dim stamps() As Char = New Char() {"R"c, "G"c, "B"c}<br>    Dim Dp(555) As Integer<br> <br>    ''' &lt;summary&gt;<br>    ''' [\u26368][\u23567][\u12398][\u12473][\u12479][\u12531][\u12503][\u22238][\u25968]<br>    ''' &lt;/summary&gt;<br>    ''' &lt;returns&gt;&lt;/returns&gt;<br>    ''' &lt;remarks&gt;&lt;/remarks&gt;<br>    Public Function Solve(ByVal s As Integer, ByVal L As Integer) As Integer<br>      Dim i as integer,j as integer,k as integer<br>        Dim Remain As String = colors.Substring(s)<br>        If Remain.Length = 0 Then<br>            Return 0<br>        End If<br>        If Remain.Length &lt; L Then<br>            Return -1<br>        End If<br>        If Dp(s) &lt;&gt; -2 Then<br>            Return Dp(s)<br>        End If<br>        Dim res As Integer = -1<br>        For k = 0 To stamps.Length - 1<br>            If stamps(k) = Remain(0) OrElse Remain(0) = "*"c Then<br>                Dim Ok As Boolean = True<br>                For i = 0 To L - 1<br>                    If Remain(i) &lt;&gt; "*"c AndAlso Remain(i) &lt;&gt; stamps(k) Then<br>                        Ok = False<br>                    End If<br>                Next<br>                If Ok Then<br>                    For add As Integer = 0 To 50000<br>                        Dim ret As Integer = Solve(s + L + add, L)<br>                        If ret &gt;= 0 Then<br>                            If res = -1 OrElse res &gt; ret + ((L + add + L - 1) \ L) Then<br>                                res = ret + ((L + add + L - 1) \ L)<br>                            End If<br>                        End If<br>                        If L + add &gt;= Remain.Length Then<br>                            Exit For<br>                        End If<br>                        If Remain(L + add) &lt;&gt; "*"c AndAlso Remain(L + add) &lt;&gt; stamps(k) Then<br>                            Exit For<br>                        End If<br>                    Next<br>                End If<br>            End If<br>        Next<br>        Dp(s) = res<br>        Return res<br>    End Function<br>    Public Function getMinimumCost(ByVal desiredColor As String, ByVal stampCost As Integer, ByVal pushCost As Integer) As Integer<br>        Dim i As Integer, j As Integer<br>        Dim L As Integer<br>        colors = desiredColor<br> <br>        N = desiredColor.Length<br>        getMinimumCost = Integer.MaxValue<br>        For L = 1 To N<br>            For i = 0 To 555<br>                Dp(i) = -2<br>            Next<br>            Dim ret As Integer = Solve(0, L)<br>            If ret &gt;= 0 Then<br>                getMinimumCost = Min(getMinimumCost, _<br>                                   stampCost * L + pushCost * ret)<br>            End If<br> <br>        Next<br> <br>    End Function<br>End Class<br></td>