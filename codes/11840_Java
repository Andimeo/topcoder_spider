<td class="problemText" colspan="8" valign="middle" align="left">
            import java.math.*;<br>import java.util.*;<br> <br>public class RandomColoring {<br>    int countLength(int maxR, int r, int d) {<br>        return Math.min(r + d, maxR - 1) - Math.max(r - d, 0) + 1;<br>    }<br> <br>    int countVolume(int maxR, int maxG, int maxB, int r, int g, int b, int d) {<br>        if (d &lt; 0) {<br>            return 0;<br>        }<br>        return countLength(maxR, r, d) * countLength(maxG, g, d) * countLength(maxB, b, d);<br>    }<br> <br>    void coverVolume(int maxR, int maxG, int maxB, int r, int g, int b, int d, double sum[][][], double weight) {<br>        if (d &gt;= 0) {<br>            int r1 = Math.max(r - d, 0);<br>            int r2 = Math.min(r + d, maxR - 1);<br>            int g1 = Math.max(g - d, 0);<br>            int g2 = Math.min(g + d, maxG - 1);<br>            int b1 = Math.max(b - d, 0);<br>            int b2 = Math.min(b + d, maxB - 1);<br>            sum[r1][g1][b1] += weight;<br>            sum[r2 + 1][g1][b1] -= weight;<br>            sum[r1][g2 + 1][b1] -= weight;<br>            sum[r1][g1][b2 + 1] -= weight;<br>            sum[r2 + 1][g2 + 1][b1] += weight;<br>            sum[r2 + 1][g1][b2 + 1] += weight;<br>            sum[r1][g2 + 1][b2 + 1] += weight;<br>            sum[r2 + 1][g2 + 1][b2 + 1] -= weight;<br>        }<br>    }<br> <br>    double access(double probability[][][], int r, int g, int b) {<br>        if (r &gt;= 0 &amp;&amp; g &gt;= 0 &amp;&amp; b &gt;= 0) {<br>            return probability[r][g][b];<br>        }<br>        return 0;<br>    }<br> <br>    public double getProbability(int N, int maxR, int maxG, int maxB, int startR, int startG, int startB, int d1, int d2) {<br>        double probability[][][] = new double[maxR][maxG][maxB];<br>        probability[startR][startG][startB] = 1.0;<br>        for (int round = 1; round &lt; N; ++ round) {<br>            double sum[][][] = new double[maxR + 1][maxG + 1][maxB + 1];<br>            for (int r = 0; r &lt; maxR; ++ r) {<br>                for (int g = 0; g &lt; maxG; ++ g) {<br>                    for (int b = 0; b &lt; maxB; ++ b) {<br>                        int ways = countVolume(maxR, maxG, maxB, r, g, b, d2) - countVolume(maxR, maxG, maxB, r, g, b, d1 - 1);<br>                        if (ways &gt; 0) {<br>                            double weight = probability[r][g][b] / ways;<br>                            coverVolume(maxR, maxG, maxB, r, g, b, d2, sum, weight);<br>                            coverVolume(maxR, maxG, maxB, r, g, b, d1 - 1, sum, -weight);<br>                        }<br>                    }<br>                }<br>            }<br>            for (int r = 0; r &lt; maxR; ++ r) {<br>                for (int g = 0; g &lt; maxG; ++ g) {<br>                    for (int b = 0; b &lt; maxB; ++ b) {<br>                        probability[r][g][b] = 0;<br>                    }<br>                }<br>            }<br>            for (int r = 0; r &lt; maxR; ++ r) {<br>                for (int g = 0; g &lt; maxG; ++ g) {<br>                    for (int b = 0; b &lt; maxB; ++ b) {<br>                        probability[r][g][b] = access(probability, r - 1, g, b)<br>                            + access(probability, r, g - 1, b)<br>                            + access(probability, r, g, b - 1)<br>                            - access(probability, r - 1, g - 1, b)<br>                            - access(probability, r - 1, g, b - 1)<br>                            - access(probability, r, g - 1, b - 1)<br>                            + access(probability, r - 1, g - 1, b - 1)<br>                            + sum[r][g][b];<br>                    }<br>                }<br>            }<br>        }<br>        double result = 0;<br>        for (int r = 0; r &lt; maxR; ++ r) {<br>            for (int g = 0; g &lt; maxG; ++ g) {<br>                for (int b = 0; b &lt; maxB; ++ b) {<br>                    if (Math.abs(r - startR) &lt;= d2 &amp;&amp; Math.abs(g - startG) &lt;= d2 &amp;&amp; Math.abs(b - startB) &lt;= d2 &amp;&amp; (Math.abs(r - startR) &gt;= d1 || Math.abs(g - startG) &gt;= d1 || Math.abs(b - startB) &gt;= d1)) {<br>                        result += probability[r][g][b];<br>                    }<br>                }<br>            }<br>        }<br>        return 1 - result;<br>    }<br> <br>}<br> <br> <br> <br>// Powered by FileEdit<br>// Powered by moj 4.17 [modified TZTester]<br>// Powered by CodeProcessor<br></td>