<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections;<br>using System.Collections.Generic;<br><br>public class EllysJuice<br>{<br>  public string[] getWinners( string[] players )<br>  {<br>    int n = players.Length;<br>    int[] p = Misc.FirstPermutation( n );<br>    List&lt;string&gt; res = new List&lt;string&gt;();<br>    do<br>    {<br>      string winner = getWinners( players, p );<br>      if ( winner != null &amp;&amp; !res.Contains( winner ) ) res.Add( winner );<br>    } while ( Misc.NextPermutation( p ) );<br>    res.Sort();<br>    return res.ToArray();<br>  }<br><br>  private string getWinners( string[] players, int[] p )<br>  {<br>    int n = players.Length;<br>    int[] dr = new int[] { 1 &lt;&lt; n, 1 &lt;&lt; n };<br>    Dictionary&lt;string, int&gt; d = new Dictionary&lt;string, int&gt;();<br>    foreach ( string player in players )<br>    {<br>      if ( !d.ContainsKey( player ) ) d.Add( player, 0 );<br>    }<br>    for ( int i = 0; i &lt; n; ++i )<br>    {<br>      d[players[p[i]]] += dr[i % 2] / 2;<br>      dr[i % 2] /= 2;<br>    }<br>    int mx = -1;<br>    foreach ( string player in d.Keys )<br>    {<br>      if ( d[player] &gt; mx ) mx = d[player];<br>    }<br>    List&lt;string&gt; res = new List&lt;string&gt;();<br>    foreach ( string player in d.Keys )<br>      if ( d[player] == mx ) res.Add( player );<br>    if ( res.Count != 1 ) return null;<br>    return res[0];<br>  }<br><br>}<br><br><br>static class Misc<br>{<br>  public static int[] FirstPermutation( int n )<br>  {<br>    int[] res = new int[n];<br>    for ( int i = 0; i &lt; n; ++i ) res[i] = i;<br>    return res;<br>  }<br>  public static bool NextPermutation( int[] p )<br>  {<br>    if ( p.Length == 1 ) return false;<br>    int i = 0;<br>    ++i;<br>    if ( i == p.Length ) return false;<br>    i = p.Length;<br>    --i;<br><br>    for ( ; ; )<br>    {<br>      int ii = i;<br>      --i;<br>      if ( p[i].CompareTo( p[ii] ) &lt; 0 )<br>      {<br>        int j = p.Length;<br>        do<br>        {<br>          --j;<br>        } while ( p[i].CompareTo( p[j] ) &gt;= 0 );<br>        int tmp = p[i]; p[i] = p[j]; p[j] = tmp;<br>        int l = ii, r = p.Length - 1;<br>        while ( l &lt; r )<br>        {<br>          tmp = p[l]; p[l] = p[r]; p[r] = tmp;<br>          ++l; --r;<br>        }<br>        return true;<br>      }<br>      if ( i == 0 )<br>      {<br>        int l = 0, r = p.Length - 1;<br>        while ( l &lt; r )<br>        {<br>          int tmp = p[l]; p[l] = p[r]; p[r] = tmp;<br>          ++l; --r;<br>        }<br>        return false;<br>      }<br>    }<br>  }<br>  }<br><br><br>// Powered by FileEdit<br>// Powered by moj 4.16 [modified TZTester]<br>// Powered by CleanSharp 1.0<br>// Powered by CodeProcessor<br></td>