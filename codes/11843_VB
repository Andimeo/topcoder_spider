<td class="problemText" colspan="8" valign="middle" align="left">
            Imports Microsoft.VisualBasic<br>Imports System<br>Imports System.Collections<br>Imports System.Collections.Generic<br>Imports System.Text<br> <br>Public Class EllysJuice<br> <br>    Class CPerm<br>        Private totcomb As Integer<br>        Public comb() As Integer<br>        Public n As Integer<br> <br>        Public Sub Swap(Of T As Structure)(ByRef a As T, ByRef b As T)<br>            Dim temp As T = a<br>            a = b<br>            b = temp<br>        End Sub<br> <br>        Sub New(ByVal elementsCount As Integer)<br>            n = elementsCount - 1<br>            ReDim comb(n)<br>            For i As Integer = 0 To n<br>                comb(i) = i + 1<br>            Next<br>        End Sub<br> <br>        Sub New(ByVal elementsCount As Integer, ByVal p() As Integer)<br>            n = elementsCount - 1<br>            comb = p<br>        End Sub<br> <br>        Function next_permutation() As Boolean<br>            Dim i, j As Integer<br>            Dim k As Integer = n - 1<br> <br>            Do While k &gt;= 0<br>                If comb(k) &lt;= comb(k + 1) Then Exit Do<br>                k -= 1<br>            Loop<br> <br>            If k &lt;&gt; -1 Then<br>                Dim t As Integer = k + 1<br>                Do While t &lt; n<br>                    If comb(t + 1) &lt;= comb(k) Then Exit Do<br>                    t += 1<br>                Loop<br> <br>                Swap(Of Integer)(comb(t), comb(k))<br> <br>                i = k + 1<br>                j = n<br>                Do While i &lt; j<br>                    Swap(Of Integer)(comb(i), comb(j))<br>                    i += 1<br>                    j -= 1<br>                Loop<br> <br>                Return True<br> <br>            End If<br> <br>            Return False<br>        End Function<br>    End Class<br> <br>    Public Function getWinners(ByVal players As String()) As String()<br>        Dim winners As New List(Of String)()<br>        Dim n As Integer = players.Length<br>        Dim perm As New CPerm(n)<br>        Dim luge As New List(Of String)<br>        For Each name As String In players<br>            If Not luge.Contains(name) Then luge.Add(name)<br>        Next<br>        Dim m As Integer = luge.Count<br> <br>        Do<br>            Dim sok(1) As Double<br>            sok(0) = 1<br>            sok(1) = 1<br>            Dim pie(m - 1) As Double<br> <br>            For i As Integer = 0 To n - 1<br>                Dim k As Integer = perm.comb(i) - 1<br>                Dim drink As Double<br>                drink = sok(i Mod 2) / 2<br>                sok(i Mod 2) -= drink<br> <br>                For j As Integer = 0 To m - 1<br>                    If luge(j) = players(k) Then<br>                        pie(j) += drink<br>                        Exit For<br>                    End If<br>                Next<br>            Next<br> <br>            'get winner<br>            Dim winner As String = ""<br>            Dim val As Double = 0<br>            For i As Integer = 0 To m - 1<br>                If pie(i) &gt; val Then<br>                    winner = luge(i)<br>                    val = pie(i)<br>                ElseIf pie(i) = val Then<br>                    winner = ""<br>                    val += 0.000000001<br>                End If<br>            Next<br>            If winner.Length &gt; 0 Then<br>                If Not winners.Contains(winner) Then winners.Add(winner)<br>            End If<br> <br>        Loop While perm.next_permutation()<br>        winners.Sort()<br> <br>        Return winners.ToArray()<br>    End Function<br>End Class<br></td>