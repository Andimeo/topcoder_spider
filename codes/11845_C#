<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections;<br>using System.Collections.Generic;<br>using System.Collections.Specialized;<br>using System.Text;<br>using System.Text.RegularExpressions;<br> <br>public class EllysLights<br>{<br>  long init;<br>  long[] sw;<br>  int[,] ls;<br>  Dictionary&lt;long, int&gt; cache = new Dictionary&lt;long, int&gt;();<br>  public int getMinimum(string initial, string[] switches)<br>  {<br>    init = c(initial);<br>    sw = Array.ConvertAll&lt;string,long&gt;(switches, c);<br>    ls = new int[initial.Length, 2];<br>    for (int i = 0; i &lt; initial.Length; i++)<br>      ls[i,0] = ls[i,1] = -1;<br>    for (int i = 0; i &lt; switches.Length; i++)<br>    {<br>      for (int j = 0; j &lt; switches[i].Length; j++)<br>      {<br>        if (switches[i][j] == 'Y')<br>        {<br>          if (ls[j,0] == -1) ls[j,0] = i;<br>          else ls[j,1] = i;<br>        }<br>      }<br>    }<br>    return doit(init);<br>  }<br>  <br>  int doit(long l)<br>  {<br>    if (l == 0) return 0;<br>    if (cache.ContainsKey(l)) return cache[l];<br>    cache[l] = 100000;<br>    int idx = 0;<br>    while ((l &gt;&gt; idx) % 2 == 0) idx++;<br>    int a = tryLight(l, idx, 0);<br>    int b = tryLight(l, idx, 1);<br>    int r = -1;<br>    if (a == -1) r = b;<br>    else if (b == -1) r = a;<br>    else r = Math.Min(a, b);<br>    cache[l] = r;<br>    return r;<br>  }<br>  <br>  int tryLight(long l, int tl, int s)<br>  {<br>    if (ls[tl,s] == -1) return -1;<br>    long z = 0;<br>    int c = 1;<br>    z |= 1L &lt;&lt; ls[tl,s];<br>    l ^= sw[ls[tl,s]];<br>    while ((l &amp; ~init) != 0)<br>    {<br>      int idx = 0;<br>      while (((l &amp; ~init) &gt;&gt; idx) % 2 == 0) idx++;<br>      int l1 = ls[idx,0], l2 = ls[idx,1];<br>      if (l1 != -1 &amp;&amp; (z &gt;&gt; l1) % 2 == 1) l1 = -1;<br>      if (l2 != -1 &amp;&amp; (z &gt;&gt; l2) % 2 == 1) l2 = -1;<br>      if (l1 == -1 &amp;&amp; l2 == -1) return -1;<br>      if (l1 != -1)<br>      {<br>        c++;<br>        z |= 1L &lt;&lt; l1;<br>        l ^= sw[l1];<br>      }<br>      else if (l2 != -1)<br>      {<br>        c++;<br>        z |= 1L &lt;&lt; l2;<br>        l ^= sw[l2];<br>      }<br>    }<br>    if (l != 0)<br>    {<br>      int cr = doit(l);<br>      if (cr &gt;= 100000 || cr == -1) return -1;<br>      c += cr;<br>    }<br>    return c;<br>  }<br>  <br>  long c(string s)<br>  {<br>    long r = 0;<br>    for (int i = 0; i &lt; s.Length; i++)<br>    {<br>      if (s[i] == 'Y')<br>      {<br>        r |= 1L &lt;&lt; i;<br>      }<br>    }<br>    return r;<br>  }<br> <br> <br>}<br>//Powered by [KawigiEdit] 2.0!<br></td>