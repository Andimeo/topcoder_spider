<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;string&gt;<br>#include &lt;vector&gt;<br> <br>using namespace std;<br> <br>class EllysLights<br>{<br>  int n, m;<br>  int cnt[50];<br>  int consider[50];<br>  <br>  int stat[50];<br>  int connect[50][50];<br>  int color[50];<br>  <br>  int a, b;<br>public:<br>  bool dfs (int cur, int dir)<br>  {<br>    if (dir)<br>      a ++;<br>    else<br>      b ++;<br>    consider[cur] = 0;<br>    color[cur] = dir;<br>    <br>    for (int i = 0; i &lt; m; i ++)<br>      if (connect[cur][i] &amp;&amp; cnt[i] == 2)<br>      {<br>        int j = 0;<br>        while (!connect[j][i] || j == cur) j ++;<br>        <br>        if (consider[j])<br>        {<br>          if (!dfs (j, dir ^ stat[i]))<br>            return false;<br>        }<br>        else<br>          if ((dir ^ stat[i]) != color[j])<br>            return false;<br>      }<br>    return true;<br>  }<br> <br>  int getMinimum(string init, vector &lt;string&gt; swi)<br>  {<br>    int ans = 0;<br>  <br>    n = swi.size();<br>    m = init.size();<br>    <br>    for (int i = 0; i &lt; n; i ++)<br>      consider[i] = 1;<br>    for (int i = 0; i &lt; m; i ++)<br>      stat[i] = (init[i] == 'Y');<br>    for (int i = 0; i &lt; n; i ++)<br>      for (int j = 0; j &lt; m; j ++)<br>        connect[i][j] = (swi[i][j] == 'Y');<br>    <br>    while (1)<br>    {<br>      bool flag = true;<br>    <br>      for (int i = 0; i &lt; m; i ++)<br>        cnt[i] = 0;<br>      for (int i = 0; i &lt; n; i ++)<br>        if (consider[i])<br>        {<br>          for (int j = 0; j &lt; m; j ++)<br>            if (connect[i][j])<br>              cnt[j] ++;<br>        }<br>      for (int i = 0; i &lt; m; i ++)<br>        if (cnt[i] == 0 &amp;&amp; stat[i])<br>          return -1;<br>        else if (cnt[i] == 1)<br>        {<br>          int j = 0;<br> <br>          while (!consider[j] || !connect[j][i])<br>            j ++;<br> <br>          if (stat[i])<br>          {<br>            for (int k = 0; k &lt; m; k ++)<br>              stat[k] ^= connect[j][k];<br>            ans ++;<br>          }<br>          <br>          consider[j] = 0;<br>          <br>          flag = false;<br>          <br>          break;<br>        }<br>      if (!flag) continue;<br>  <br>      for (int i = 0; i &lt; m; i ++)<br>        color[i] = -1;<br>      <br>      for (int i = 0; i &lt; n; i ++)<br>        if (consider[i])<br>        {<br>          a = b = 0;<br>          if (!dfs (i, 0))<br>            return -1;<br>          if (a &lt; b)<br>            ans += a;<br>          else<br>            ans += b;<br>        }<br>      <br>      break;<br>    }<br>    <br>    return ans;<br>  }<br>};<br></td>