<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;vector&gt;<br>#include &lt;list&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;queue&gt;<br>#include &lt;deque&gt;<br>#include &lt;stack&gt;<br>#include &lt;bitset&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;functional&gt;<br>#include &lt;numeric&gt;<br>#include &lt;utility&gt;<br>#include &lt;sstream&gt;<br>#include &lt;iostream&gt;<br>#include &lt;iomanip&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;ctime&gt;<br> <br>using namespace std;<br> <br>typedef long long ll;<br>typedef pair &lt;int, int&gt; pii;<br> <br>#define mp make_pair<br>#define pb push_back<br>#define all(a) (a).begin(), (a).end()<br>#define sz(a) (int)((a).size())<br>#define x first<br>#define y second<br> <br> <br>class FlattenOut {<br>public:<br>  vector&lt;long long&gt; simulateIt(vector&lt;long long&gt; h, long long T) {<br>    int n = sz(h);<br>    <br>    map &lt;vector &lt;ll&gt;, ll&gt; turns;<br>    <br>    for (;;) {<br>      if (turns.count(h)) {<br>        ll dt = turns[h] - T;<br>        T %= dt;<br>      }<br>      turns[h] = T;<br>      <br>      if (T == 0) break;<br>    <br>      vector &lt;int&gt; dh(n);<br>      <br>      for (int i = 0; i &lt; n; i++) {<br>        if (h[i] &gt; 0) {<br>          dh[i]--;<br>          dh[(i + 1) % n]++;<br>        }<br>      }<br>      <br>      ll togo = T;<br>      for (int i = 0; i &lt; n; i++) {<br>        if (dh[i] &lt; 0 &amp;&amp; h[i] &gt; 0) {<br>          togo = min(togo, h[i]);<br>        } else if (dh[i] &gt; 0 &amp;&amp; h[i] &lt;= 0) {<br>          togo = min(togo, -h[i] + 1);<br>        }<br>      }<br>      <br>      for (int i = 0; i &lt; n; i++) {<br>        h[i] += dh[i] * togo;<br>      }<br>      T -= togo;<br>    }<br>    <br>    return h;<br>  }<br>};<br> <br> <br> <br> <br> <br>//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!<br></td>