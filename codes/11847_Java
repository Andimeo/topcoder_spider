<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>import java.util.regex.*;<br>import java.text.*;<br>import java.math.*;<br> <br> <br>public class FlattenOut<br>{<br>  static class Pos {<br>    long[] ar;<br>    <br>    Pos(long[] ar) {<br>      this.ar = ar;<br>    }<br>    <br>    public int hashCode() {<br>      return Arrays.hashCode(ar);<br>    }<br>    <br>    public boolean equals(Object o) {<br>      return Arrays.equals(ar, ((Pos)o).ar);<br>    }<br>  }<br> <br>  public long[] simulateIt(long[] h, long T)<br>  {<br>    int n = h.length;<br>    HashMap&lt;Pos, Long&gt; map = new HashMap&lt;Pos, Long&gt;();<br>    while (T &gt; 0) {<br>      Pos p = new Pos(h);<br>      if (map.containsKey(p)) {<br>        long period = map.get(p) - T;<br>        T %= period;<br>      } else {<br>        map.put(p, T);<br>      }<br>      boolean pos = false;<br>      for (int i = 0; i &lt; n; ++i) {<br>        if (h[i] &gt; 0) {<br>          pos = true;<br>        }<br>      }<br>      if (!pos) {<br>        break;<br>      }<br>      long step = T;<br>      for (int i = 0; i &lt; n; ++i) {<br>        if (h[i] &gt; 0 &amp;&amp; h[(i - 1 + n) % n] &lt;= 0) {<br>          int j = i;<br>          while (h[j] &gt; 0) {<br>            j = (j + 1) % n;<br>          }<br>          step = Math.min(step, h[i]);<br>          step = Math.min(step, -h[j] + 1);<br>        }<br>      }<br>      T -= step;<br>      long[] hh = h.clone();<br>      for (int i = 0; i &lt; n; ++i) {<br>        if (h[i] &gt; 0 &amp;&amp; h[(i - 1 + n) % n] &lt;= 0) {<br>          int j = i;<br>          while (h[j] &gt; 0) {<br>            j = (j + 1) % n;<br>          }<br>          hh[i] -= step;<br>          hh[j] += step;<br>        }<br>      }<br>      h = hh;<br>    }<br>    <br>    return h;<br>  }<br>  <br> <br>}<br>//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!<br></td>