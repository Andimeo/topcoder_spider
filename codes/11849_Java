<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>public class FoxAndPhotography {<br>  public int getMinimumSwaps(int[] heightsFront, int[] heightsBack) {<br>    int n = heightsFront.length;<br>    int[][] F = new int[n][1&lt;&lt;n];<br>    int inf = 1000000000;<br>    for (int[] a1 : F) Arrays.fill(a1, inf);<br>    for (int i = 0; i &lt; n; ++i) {<br>      if (heightsFront[i] &lt; heightsBack[0]) F[0][1&lt;&lt;i] = i;<br>    }<br>    int[] pos = new int[n];<br>    for (int i = 0; i + 1 &lt; n; ++i)<br>      for (int b = 0; b &lt; (1 &lt;&lt; n); ++b) if (F[i][b] != inf) {<br>        int c = 0;<br>        for (int j = 0; j &lt; n; ++j) if ((b &amp; (1 &lt;&lt; j)) != 0) ++c;<br>        for (int j = 0; j &lt; n; ++j) if ((b &amp; (1 &lt;&lt; j)) == 0) {<br>          pos[j] = c;<br>          ++c;<br>        }<br>        for (int j = 0; j &lt; n; ++j) if ((b &amp; (1 &lt;&lt; j)) == 0 &amp;&amp; heightsFront[j] &lt; heightsBack[i + 1]) {<br>          int cost = pos[j] - (i + 1);<br>          if (cost &lt; 0) return -111;<br>          F[i + 1][b | (1 &lt;&lt; j)] = Math.min(F[i + 1][b | (1 &lt;&lt; j)], F[i][b] + cost);<br>        }<br>      }<br>    int res = F[n - 1][(1 &lt;&lt; n) - 1];<br>    return res == inf ? -1 : res;<br>  }<br> <br>  int[] ar(int st, int en) { int[] res = new int[Math.max(en - st, 0)]; for (int i = st; i &lt; en; ++i) res[i - st] = i; return res; }<br>  int[] ar(int n) { return ar(0, n); }<br>  void viet(Object...os) { System.err.println(Arrays.deepToString(os)); }<br> <br> <br>}<br> <br> <br>// Powered by FileEdit<br>// Powered by CodeProcessor<br></td>