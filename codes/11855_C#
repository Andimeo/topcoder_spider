<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Text;<br>using System.Text.RegularExpressions;<br>using System.Collections;<br><br>public class Over9000Rocks {<br>    public int countPossibilities(int[] lowerBound, int[] upperBound) {<br>        int n=lowerBound.Length;<br>        int[] a = new int[1 &lt;&lt; n];<br>        int[] b = new int[1 &lt;&lt; n];<br>        for (int set = 0; set &lt; 1 &lt;&lt; n; set++)<br>        {<br>            int min = 0;<br>            int max = 0;<br>            for(int i=0;i&lt;n;i++)<br>                if ((set &amp; (1 &lt;&lt; i)) &gt; 0)<br>                {<br>                    min += lowerBound[i];<br>                    max += upperBound[i];<br>                }<br>            min = Math.Max(min, 9001);<br>            if (max &gt;= min)<br>            {<br>                a[set] = min;<br>                b[set] = max;<br>            }<br>            else<br>            {<br>                a[set] = int.MaxValue;<br>                b[set] = int.MaxValue;<br>            }<br>        }<br>        Array.Sort(a, b);<br>        int res = 0;<br>        int l = 0;<br>        int r = -1;<br>        for (int i = 0; i &lt; a.Length; i++)<br>        {<br>            if (a[i] == int.MaxValue)<br>                continue;<br>            if (a[i] &gt; r)<br>            {<br>                res += r - l + 1;<br>                l = a[i];<br>                r = b[i];<br>            }<br>            else<br>            {<br>                r = Math.Max(r, b[i]);<br>            }<br>        }<br>        res += r - l + 1;<br>        return res;<br>    }<br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by CodeProcessor<br></td>