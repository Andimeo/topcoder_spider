<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;vector&gt;<br>#include &lt;list&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;queue&gt;<br>#include &lt;deque&gt;<br>#include &lt;stack&gt;<br>#include &lt;bitset&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;functional&gt;<br>#include &lt;numeric&gt;<br>#include &lt;utility&gt;<br>#include &lt;sstream&gt;<br>#include &lt;iostream&gt;<br>#include &lt;iomanip&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;ctime&gt;<br> <br>using namespace std;<br> <br>vector&lt;int&gt; low, high;<br>int n;<br> <br>vector&lt;pair&lt;int, int&gt; &gt; events;<br> <br>void dfs(int at, int l, int r) {<br>  if (at == n) {<br>    l = max(l, 9001);<br>    if (l &lt;= r) {<br>      events.push_back(make_pair(l, 1));<br>      events.push_back(make_pair(r + 1, -1));<br>    }<br>    return;<br>  }<br>  dfs(at + 1, l, r);<br>  dfs(at + 1, l + low[at], r + high[at]);<br>}<br> <br>class Over9000Rocks {<br>public:<br>  int countPossibilities(vector&lt;int&gt; lowerBound, vector&lt;int&gt; upperBound) {<br>    low = lowerBound;<br>    high = upperBound;<br>    n = low.size();<br>    events.clear();<br> <br>    dfs(0, 0, 0);<br> <br>    int ans = 0;<br>    sort(events.begin(), events.end());<br> <br>    int cnt = 0;<br>    for (int i = 0; i &lt; events.size(); ++i) {<br>      if (i &gt; 0 &amp;&amp; cnt &gt; 0) {<br>        ans += events[i].first - events[i - 1].first;<br>      }<br>      cnt += events[i].second;<br>    }<br> <br>    return ans;<br>  }<br>};<br> <br> <br>//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!<br></td>