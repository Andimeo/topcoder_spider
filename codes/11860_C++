<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;algorithm&gt;<br>#include &lt;bitset&gt;<br>#include &lt;cctype&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cstring&gt;<br>#include &lt;functional&gt;<br>#include &lt;iomanip&gt;<br>#include &lt;iostream&gt;<br>#include &lt;list&gt;<br>#include &lt;map&gt;<br>#include &lt;numeric&gt;<br>#include &lt;queue&gt;<br>#include &lt;set&gt;<br>#include &lt;sstream&gt;<br>#include &lt;stack&gt;<br>#include &lt;string&gt;<br>#include &lt;utility&gt;<br>#include &lt;vector&gt;<br><br>using namespace std;<br><br>class FoxAndDoraemon {<br>public:<br>  int minTime(vector &lt;int&gt; workCost, int splitCost);<br>};<br><br>int FoxAndDoraemon::minTime(vector &lt;int&gt; workCost, int splitCost) {<br>  priority_queue&lt;int, vector&lt;int&gt;, greater&lt;int&gt; &gt; heap;<br>  for (int i = 0; i &lt; workCost.size(); i++) {<br>    heap.push(workCost[i]);<br>  }<br>  while (heap.size() &gt;= 2) {<br>    int a = heap.top();<br>    heap.pop();<br>    int b = heap.top();<br>    heap.pop();<br>    heap.push(max(a, b) + splitCost);<br>  }<br>  return heap.top();<br>}<br><br><br><br>// Powered by FileEdit<br>// Powered by CodeProcessor<br></td>