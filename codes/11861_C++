<td class="problemText" colspan="8" valign="middle" align="left">
            //  SRM 544 (C)<br><br>#include &lt;cstdio&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cstring&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cassert&gt;<br>#include &lt;iostream&gt;<br>#include &lt;sstream&gt;<br>#include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;queue&gt;<br>#include &lt;set&gt;<br>#include &lt;map&gt;<br>#include &lt;utility&gt;<br>#include &lt;numeric&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;bitset&gt;<br>#include &lt;complex&gt;<br><br>using namespace std;<br><br>typedef unsigned uint;<br>typedef long long Int;<br>typedef vector&lt;int&gt; vint;<br>typedef pair&lt;int,int&gt; pint;<br>#define mp make_pair<br><br>template&lt;class T&gt; void pv(T a, T b) { for (T i = a; i != b; ++i) cout &lt;&lt; *i &lt;&lt; " "; cout &lt;&lt; endl; }<br>template&lt;class T&gt; void chmin(T &amp;t, T f) { if (t &gt; f) t = f; }<br>template&lt;class T&gt; void chmax(T &amp;t, T f) { if (t &lt; f) t = f; }<br><br>const Int MO = 1000000007;<br>const int SZ = 4;<br><br>struct Matrix {<br>  Int v[10][10];<br>  Matrix() {<br>    memset(v, 0, sizeof(v));<br>  }<br>};<br>Matrix operator*(const Matrix &amp;a, const Matrix &amp;b) {<br>  Matrix ret;<br>  for (int i = 0; i &lt; SZ; ++i) for (int k = 0; k &lt; SZ; ++k) for (int j = 0; j &lt; SZ; ++j) {<br>    (ret.v[i][j] += a.v[i][k] * b.v[k][j]) %= MO;<br>  }<br>  return ret;<br>}<br>Matrix power(const Matrix &amp;a, Int e) {<br>  Matrix x = a, y;<br>  for (int i = 0; i &lt; SZ; ++i) y.v[i][i] = 1;<br>  for (; e; e &gt;&gt;= 1, x = x * x) if (e &amp; 1) y = y * x;<br>  return y;<br>}<br><br>struct SplittingFoxes {<br>  <br>  int sum(long long inpN, int inpS, int inpL, int inpR) {<br>    <br>    <br>    Int N = inpN;<br>    Int S = inpS;<br>    Int L = inpL;<br>    Int R = inpR;<br>    <br>    Matrix A;<br>    A.v[0][0] = S + L + R;<br>    A.v[1][0] = S;<br>    A.v[1][1] = S;<br>    A.v[1][2] = R - L;<br>    A.v[2][1] = L - R;<br>    A.v[2][2] = S;<br>    A.v[3][2] = S;<br>    A.v[3][3] = S - L - R;<br>    <br>    Matrix B = power(A, N);<br>for(int i=0;i&lt;SZ;++i)cout&lt;&lt;B.v[i][0]&lt;&lt;" ";cout&lt;&lt;endl;<br>    Int ans = B.v[3][0];<br>    ans = (ans % MO + MO) % MO;<br>    return ans;<br>    <br>  }<br>  <br>};<br></td>