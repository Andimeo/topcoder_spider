<td class="problemText" colspan="8" valign="middle" align="left">
            /**<br> * Built using CHelper plug-in<br> * Actual solution is at the top<br> */<br>public class SplittingFoxes {<br>    static final long MODULO = (long) (1e9 + 7);<br>    static final long[] dx = new long[]{1, 0, MODULO - 1, 0};<br>    static final long[] dy = new long[]{0, MODULO - 1, 0, 1};<br> <br>    <br>    public int sum(long n, int S, int L, int R) {<br>        S %= MODULO;<br>        L %= MODULO;<br>        R %= MODULO;<br>        int m = 16;<br>        long[][] jump = new long[m][m];<br>        for (int dir = 0; dir &lt; 4; ++dir) {<br>            jump[4 * dir + 0][4 * dir + 0] = (jump[4 * dir + 0][4 * dir + 0] + S) % MODULO;<br>            jump[4 * dir + 1][4 * dir + 1] = (jump[4 * dir + 1][4 * dir + 1] + S) % MODULO;<br>            jump[4 * dir + 1][4 * dir + 0] = (jump[4 * dir + 1][4 * dir + 0] + S * dx[dir]) % MODULO;<br>            jump[4 * dir + 2][4 * dir + 2] = (jump[4 * dir + 2][4 * dir + 2] + S) % MODULO;<br>            jump[4 * dir + 2][4 * dir + 0] = (jump[4 * dir + 2][4 * dir + 0] + S * dy[dir]) % MODULO;<br>            jump[4 * dir + 3][4 * dir + 3] = (jump[4 * dir + 3][4 * dir + 3] + S) % MODULO;<br>            jump[4 * dir + 3][4 * dir + 1] = (jump[4 * dir + 3][4 * dir + 1] + S * dy[dir]) % MODULO;<br>            jump[4 * dir + 3][4 * dir + 2] = (jump[4 * dir + 3][4 * dir + 2] + S * dx[dir]) % MODULO;<br>            int rdir = (dir + 1) % 4;<br>            jump[4 * rdir + 0][4 * dir + 0] = (jump[4 * rdir + 0][4 * dir + 0] + R) % MODULO;<br>            jump[4 * rdir + 1][4 * dir + 1] = (jump[4 * rdir + 1][4 * dir + 1] + R) % MODULO;<br>            jump[4 * rdir + 2][4 * dir + 2] = (jump[4 * rdir + 2][4 * dir + 2] + R) % MODULO;<br>            jump[4 * rdir + 3][4 * dir + 3] = (jump[4 * rdir + 3][4 * dir + 3] + R) % MODULO;<br>            int ldir = (dir + 3) % 4;<br>            jump[4 * ldir + 0][4 * dir + 0] = (jump[4 * ldir + 0][4 * dir + 0] + L) % MODULO;<br>            jump[4 * ldir + 1][4 * dir + 1] = (jump[4 * ldir + 1][4 * dir + 1] + L) % MODULO;<br>            jump[4 * ldir + 2][4 * dir + 2] = (jump[4 * ldir + 2][4 * dir + 2] + L) % MODULO;<br>            jump[4 * ldir + 3][4 * dir + 3] = (jump[4 * ldir + 3][4 * dir + 3] + L) % MODULO;<br>        }<br>        jump = pow(jump, n);<br>        long[] states = new long[m];<br>        states[0] = 1;<br>        states = mul(jump, states);<br>        long res = 0;<br>        for (int dir = 0; dir &lt; 4; ++dir) res = (res + states[dir * 4 + 3]) % MODULO;<br>        return (int) res;<br>    }<br> <br>    private long[][] pow(long[][] jump, long n) {<br>        int m = jump.length;<br>        if (n == 0) {<br>            long[][] res = new long[m][m];<br>            for (int i = 0; i &lt; m; ++i) res[i][i] = 1;<br>            return res;<br>        } else if (n % 2 == 0) {<br>            return pow(mul(jump, jump), n / 2);<br>        } else {<br>            return mul(jump, pow(jump, n - 1));<br>        }<br>    }<br> <br>    private long[][] mul(long[][] a, long[][] b) {<br>        int m = a.length;<br>        long[][] c = new long[m][m];<br>        for (int i = 0; i &lt; m; ++i)<br>            for (int j = 0; j &lt; m; ++j)<br>                for (int k = 0; k &lt; m; ++k)<br>                    c[i][j] = (c[i][j] + a[i][k] * b[k][j]) % MODULO;<br>        return c;<br>    }<br> <br>    private long[] mul(long[][] a, long[] b) {<br>        int m = b.length;<br>        long[] res = new long[m];<br>        for (int i = 0; i &lt; m; ++i)<br>            for (int j = 0; j &lt; m; ++j) {<br>                res[i] = (res[i] + a[i][j] * b[j]) % MODULO;<br>            }<br>        return res;<br>    }<br>}<br> <br> <br> <br>// Powered by FileEdit<br>// Powered by moj 4.16 [modified TZTester]<br>// Powered by CodeProcessor<br></td>