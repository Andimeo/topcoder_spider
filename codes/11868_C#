<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections;<br>using System.Collections.Generic;<br>using System.Collections.Specialized;<br>using System.Text;<br>using System.Text.RegularExpressions;<br> <br> <br>public class PasswordXPalindrome<br>{<br>  public int minSwaps(string password)<br>  {<br>    int[] count = new int[30];<br>        foreach (char c in password)<br>            count[c - 'a']++;<br>      int cnt1 = 0;<br>        foreach (int c in count)<br>            if (c == 1)<br>                ++cnt1;<br>        if (cnt1 &gt; 1)<br>            return -1;<br> <br>      char[] s = password.ToCharArray();<br>        if (cnt1 == 1)<br>        {<br>            char mid = 'a';<br>            int pos = 0;<br>            for (int i = 0; i &lt; s.Length; ++i)<br>                if (count[s[i] - 'a'] == 1)<br>                {<br>                    mid = s[i];<br>                    pos = i;<br>                }<br>            Swap(ref s[pos], ref s[s.Length / 2]);<br>            int move = pos == s.Length / 2 ? 0 : 1;<br>            return move + f(s, 0);<br>        }<br>      return f(s, 0);<br>  }<br> <br>    private int f(char[] s, int level)<br>    {<br>        if (level == s.Length / 2)<br>            return 0;<br> <br>        if (s[level] == s[s.Length - level - 1])<br>            return f(s, level + 1);<br> <br>        int ans = int.MaxValue;<br>        for (int i = level + 1; i &lt; s.Length - level - 1; ++i)<br>            if (s[i] == s[level])<br>            {<br>                Swap(ref s[i], ref s[s.Length - level - 1]);<br>                ans = Math.Min(ans, 1 + f(s, level + 1));<br>                Swap(ref s[i], ref s[s.Length - level - 1]);<br>            }<br> <br>        for (int i = level + 1; i &lt; s.Length - level - 1; ++i)<br>            if (s[i] == s[s.Length - level - 1])<br>            {<br>                Swap(ref s[i], ref s[level]);<br>                ans = Math.Min(ans, 1 + f(s, level + 1));<br>                Swap(ref s[i], ref s[level]);<br>            }<br>        return ans;<br>    }<br> <br>    private void Swap&lt;T&gt;(ref T x, ref T y)<br>    {<br>        T temp = x;<br>        x = y;<br>        y = temp;<br>    }<br> <br> <br>}<br>//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!<br></td>