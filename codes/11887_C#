<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Text;<br>using System.Text.RegularExpressions;<br>using System.Collections;<br>using System.Collections.Generic;<br><br>public class AntsMeet {<br>    public int countAnts(int[] _x, int[] _y, string direction) {<br>        string s = "NESW";<br>        int[] dx = new int[] { 0, +1, 0, -1 };<br>        int[] dy = new int[] { +1, 0, -1, 0 };<br>        List&lt;double&gt; x = new List&lt;double&gt;();<br>        List&lt;double&gt; y = new List&lt;double&gt;();        <br>        for (int i = 0; i &lt; _x.Length; i++)<br>        {<br>            x.Add(_x[i]);<br>            y.Add(_y[i]);<br>            <br>        }<br>        for (int step = 0; step &lt;= 4000; step++)<br>        {<br>            bool[] have = new bool[x.Count];<br>            for (int i = 0; i &lt; x.Count; i++)<br>                have[i] = true;<br>            for(int i=0;i&lt;x.Count;i++)<br>                for (int j = i + 1; j &lt; y.Count; j++)<br>                {<br>                    if (Math.Abs(x[i] - x[j]) &lt;= 1e-7 &amp;&amp; Math.Abs(y[i] - y[j]) &lt;= 1e-7)<br>                    {<br>                        have[i] = false;<br>                        have[j] = false;<br>                    }<br>                }<br>            List&lt;double&gt; nx = new List&lt;double&gt;();<br>            List&lt;double&gt; ny = new List&lt;double&gt;();<br>            string ndir = "";<br>            for (int i = 0; i &lt; x.Count; i++)<br>            {<br>                if (have[i])<br>                {<br>                    nx.Add(x[i]);<br>                    ny.Add(y[i]);<br>                    ndir += direction[i];<br>                }<br>            }<br>            x = nx;<br>            y = ny;<br>            direction = ndir;<br>            for (int i = 0; i &lt; x.Count; i++)<br>            {<br>                int at = s.IndexOf(direction[i]);<br>                x[i] += dx[at] / 2.0;<br>                y[i] += dy[at] / 2.0;<br>            }<br>        }<br>        return x.Count;<br>    }<br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by CodeProcessor<br></td>