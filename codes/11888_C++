<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;vector&gt;<br>#include &lt;list&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;deque&gt;<br>#include &lt;queue&gt;<br>#include &lt;stack&gt;<br>#include &lt;bitset&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;functional&gt;<br>#include &lt;numeric&gt;<br>#include &lt;utility&gt;<br>#include &lt;sstream&gt;<br>#include &lt;iostream&gt;<br>#include &lt;iomanip&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cctype&gt;<br>#include &lt;string&gt;<br>#include &lt;cstring&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;ctime&gt;<br><br>using namespace std;<br><br>#define LENGTH(X) ((int)(X.length()))<br><br>const int MOD=1000000007;<br><br>class AkariDaisukiDiv1<br>{<br>public:<br>  int solve(string s,bool prefix[60],bool suffix[60],string key)<br>  {<br>    int L=LENGTH(key);<br>    int D=LENGTH(s);<br>    for (int i=0;i&lt;L;i++)<br>    {<br>      prefix[i]=(key.substr(L-i)==s.substr(0,i));<br>      suffix[i]=(key.substr(0,i)==s.substr(D-i));<br>    }<br>    int R=0;<br>    for (int i=0;i&lt;=D-L;i++) if (s.substr(i,L)==key) R++;<br>    return R;<br>  }<br>  int countF(string a, string b, string c, string s, string key, int k)<br>  {<br>    int L=LENGTH(key);<br>    for (;LENGTH(s)&lt;L &amp;&amp; k&gt;0;k--) s=a+s+b+s+c;<br>    if (k==0)<br>    {<br>      int R=0;<br>      for (int i=0;i&lt;=LENGTH(s)-L;i++) if (s.substr(i,L)==key) R++;<br>      return R;<br>    }<br>    bool prefix[60],suffix[60];<br>    int cnt=solve(s,prefix,suffix,key);<br>    int R=cnt;<br>    bool last_prefix[60],last_suffix[60];<br>    bool fixed=false;<br>    int delta=0;<br>    for (int step=0;step&lt;k;step++)<br>    {<br>      if (!fixed)<br>      {<br>        for (int i=0;i&lt;L;i++) last_prefix[i]=prefix[i];<br>        for (int i=0;i&lt;L;i++) last_suffix[i]=suffix[i];<br>        string token=s.substr(0,L-1)+"."+s.substr(LENGTH(s)-L+1);<br>        s=a+token+b+token+c;<br>        delta=solve(s,prefix,suffix,key);<br>        if (step&gt;=50)<br>        {<br>          fixed=true;<br>          for (int i=0;i&lt;L;i++) if (last_prefix[i]!=prefix[i]) fixed=false;<br>          for (int i=0;i&lt;L;i++) if (last_suffix[i]!=suffix[i]) fixed=false;<br>        }<br>      }<br>      R&lt;&lt;=1;<br>      if (R&gt;=MOD) R-=MOD;<br>      R+=delta;<br>      if (R&gt;=MOD) R-=MOD;<br>    }<br>    return R;<br>  }<br>};<br></td>