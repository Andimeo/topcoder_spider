<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br> <br>public class EvenPaths {<br> <br>    int n;<br>    boolean[][] a;<br>    boolean[] mb;<br>    int[] p;<br>    boolean[] d;<br> <br>    int m;<br>    boolean[] z;<br> <br> <br>    public long theCount(String[] maze, String rooms) {<br>        n = maze.length;<br>        a = new boolean[n][n];<br>        mb = new boolean[n];<br>        p = new int[n];<br>        d = new boolean[n];<br>        for (int i = 0; i &lt; n; i++) {<br>            for (int j = 0; j &lt; n; j++) {<br>                a[i][j] = maze[i].charAt(j) == 'Y';<br>            }<br>        }<br>        for (int i = 0; i &lt; n; i++) {<br>            mb[i] = rooms.charAt(i) == '?';<br>        }<br>        z = new boolean[n];<br>        for (int i = 0; i &lt; n; i++) {<br>            dfs(i);<br>        }<br>        d[0] = true;<br>//        System.out.println(Arrays.toString(p));<br>        long res = bt(0, 1);<br>        return res;<br>    }<br> <br>    Map&lt;Long, Long&gt; mem = new HashMap&lt;Long, Long&gt;();<br> <br>    private long bt(int ii, long ms) {<br>        if (p[ii] == 1) {<br>            if (!d[1]) {<br>                long res = ms;<br>                for (int j = ii; j &lt; n; j++) {<br>                    if (mb[p[j]]) res *= 2;<br>                }<br>                return res;<br>            } else {<br>                return 0;<br>            }<br>        }<br>        long z = 1;<br>        for (int j = ii; j &lt; n; j++) {<br>            z = z * 2 + (d[p[j]] ? 1 : 0);<br>        }<br>        Long result = mem.get(z);<br>        if (result != null) return result * ms;<br>        int i = p[ii];<br>        if (!mb[i]) {<br>            if (d[i]) {<br>                for (int j = 0; j &lt; n; j++) {<br>                    if (a[i][j]) {<br>                        d[j] = !d[j];<br>                    }<br>                }<br>            }<br>            long res = bt(ii + 1, ms);<br>            if (d[i]) {<br>                for (int j = 0; j &lt; n; j++) {<br>                    if (a[i][j]) {<br>                        d[j] = !d[j];<br>                    }<br>                }<br>            }<br>            mem.put(z, res / ms);<br>            return res;<br>        } else {<br>            if (d[i]) {<br>                long res = bt(ii + 1, ms);<br>                for (int j = 0; j &lt; n; j++) {<br>                    if (a[i][j]) {<br>                        d[j] = !d[j];<br>                    }<br>                }<br>                res += bt(ii + 1, ms);<br>                for (int j = 0; j &lt; n; j++) {<br>                    if (a[i][j]) {<br>                        d[j] = !d[j];<br>                    }<br>                }<br>                mem.put(z, res / ms);<br>                return res;<br>            } else {<br>                long res = bt(ii + 1, ms * 2);<br>                mem.put(z, res / ms);<br>                return res;<br>            }<br>        }<br>    }<br> <br>    private void dfs(int i) {<br>        if (z[i]) return;<br>        z[i] = true;<br>        for (int j = 0; j &lt; n; j++) {<br>            if (a[j][i]) dfs(j);<br>        }<br>        p[m++] = i;<br>    }<br> <br> <br>}<br> <br> <br>// Powered by FileEdit<br>// Powered by RETester [based on ExampleBuilder]<br>// Powered by CodeProcessor<br></td>