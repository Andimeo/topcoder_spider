<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;iostream&gt;<br>#include &lt;sstream&gt;<br>#include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;stack&gt;<br>#include &lt;queue&gt;<br>#include &lt;set&gt;<br>#include &lt;map&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cstring&gt;<br>#include &lt;cctype&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cassert&gt;<br>#include &lt;climits&gt;<br>#include &lt;numeric&gt;<br>using namespace std;<br> <br>#define all(c) (c).begin(), (c).end()<br>#define iter(c) __typeof((c).begin())<br>#define cpresent(c, e) (find(all(c), (e)) != (c).end())<br>#define rep(i, n) for (int i = 0; i &lt; (int)(n); i++)<br>#define tr(c, i) for (iter(c) i = (c).begin(); i != (c).end(); ++i)<br>#define pb push_back<br>#define mp make_pair<br> <br>struct EllysXors {<br>  long long getXor(long long L, long long R);<br>};<br> <br>typedef long long ll;<br> <br>ll cum_xor(ll n) {<br>  switch (n % 4) {<br>  case 0: return n;<br>  case 1: return 1;<br>  case 2: return n + 1;<br>  case 3: return 0;<br>  }<br>  assert(false);<br>}<br> <br> <br>long long EllysXors::getXor(long long L, long long R) {<br>  return cum_xor(R) ^ cum_xor(L - 1);<br>}<br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br>// Powered by FileEdit<br>// Powered by moj 4.17pre2 [modified TZTester]<br>// Powered by CodeProcessor<br></td>