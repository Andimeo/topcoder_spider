<td class="problemText" colspan="8" valign="middle" align="left">
            public class EllysThreeRivers {<br>  public double getMin(int length, int walk, int[] width, int[] swim) {<br>    double l = 0;<br>    double r = length;<br>    double time = Integer.MAX_VALUE;<br>    while (r - l &gt; 1e-10) {<br>      double c1 = l + (r - l) / 3;<br>      double c2 = l + (r - l) / 3 * 2;<br>      double t1 = Math.sqrt(width[0] * width[0] + c1 * c1) / swim[0]<br>          + getMin2(length - c1, walk, width, swim);<br>      double t2 = Math.sqrt(width[0] * width[0] + c2 * c2) / swim[0]<br>          + getMin2(length - c2, walk, width, swim);<br>      if (t1 &lt; t2)<br>        r = c2;<br>      else<br>        l = c1;<br>      time = Math.min(t1, t2);<br>    }<br>    return time;<br>  }<br><br>  public double getMin2(double length, double walk, int[] width, int[] swim) {<br>    double l = 0;<br>    double r = length;<br>    double time = Integer.MAX_VALUE;<br>    while (r - l &gt; 1e-10) {<br>      double c1 = l + (r - l) / 3;<br>      double c2 = l + (r - l) / 3 * 2;<br>      double t1 = c1 / walk + getMin3(length - c1, width, swim);<br>      double t2 = c2 / walk + getMin3(length - c2, width, swim);<br>      if (t1 &lt; t2)<br>        r = c2;<br>      else<br>        l = c1;<br>      time = Math.min(t1, t2);<br>    }<br>    return time;<br>  }<br><br>  public double getMin3(double length, int[] width, int[] swim) {<br>    double l = 0;<br>    double r = length;<br>    double time = Integer.MAX_VALUE;<br>    while (r - l &gt; 1e-10) {<br>      double c1 = l + (r - l) / 3;<br>      double c2 = l + (r - l) / 3 * 2;<br>      double t1 = Math.sqrt(width[1] * width[1] + c1 * c1)<br>          / swim[1]<br>          + Math.sqrt(width[2] * width[2] + (length - c1)<br>              * (length - c1)) / swim[2];<br>      double t2 = Math.sqrt(width[1] * width[1] + c2 * c2)<br>          / swim[1]<br>          + Math.sqrt(width[2] * width[2] + (length - c2)<br>              * (length - c2)) / swim[2];<br>      if (t1 &lt; t2)<br>        r = c2;<br>      else<br>        l = c1;<br>      time = Math.min(t1, t2);<br>    }<br>    return time;<br>  }<br>  <br>  <br>}<br></td>