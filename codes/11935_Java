<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>import static java.lang.Math.*;<br> <br>public class StrangeDictionary2 {<br>  public void p(Object ...o) {System.out.println(Arrays.deepToString(o));}<br>  public double[] getProbabilities(String[] words) {<br>    W = words;<br>    N = words.length;<br>    L = words[0].length();<br>    DP = new double[1&lt;&lt;N][N];<br>    for (int i = 0; i &lt; 1&lt;&lt;N; i++) {<br>      DP[i][0] = -1;<br>    }<br>    return solve((1&lt;&lt;N)-1);<br>  }<br>  static int N;<br>  static int L;<br>  static String[] W;<br>  static double[][] DP;<br>  static double[] solve(int subset) {<br>    if (DP[subset][0] != -1) {<br>      return DP[subset];<br>    }<br>    if (Integer.bitCount(subset) == 1) {<br>      int left = Integer.numberOfTrailingZeros(subset);<br>      Arrays.fill(DP[subset], 0);<br>      DP[subset][left] = 1.0;<br>      return DP[subset];<br>    }<br>    Arrays.fill(DP[subset], 0);<br>    int count = 0;<br>    for (int i = 0; i &lt; L; i++) {<br>      char min = 'z';<br>      int to = 0;<br>      for (int j = 0; j &lt; N; j++) {<br>        if (((1&lt;&lt;j)&amp;subset) != 0) {<br>          char ch = W[j].charAt(i);<br>          if (ch &lt; min) {<br>            min = ch;<br>            to = 1 &lt;&lt; j;<br>          } else if (ch == min) {<br>            to |= 1 &lt;&lt; j;<br>          }<br>        }<br>      }<br>      if (to != subset) {<br>        count++;<br>        double[] recur = solve(to);<br>        for (int j = 0; j &lt; N; j++) {<br>          DP[subset][j] += recur[j];<br>        }<br>      }<br>    }<br>    for (int j = 0; j &lt; N; j++) {<br>      DP[subset][j] /= count;<br>    }<br>    return DP[subset];<br>  }<br>}<br></td>