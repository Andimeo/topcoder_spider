<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.List;<br>import java.util.Arrays;<br>import java.util.ArrayList;<br>import java.util.Comparator;<br>import java.util.Collection;<br><br>/**<br> * Built using CHelper plug-in<br> * Actual solution is at the top<br> * @author Egor Kulikov (egor@egork.net)<br> */<br>public class Spacetsk {<br>  int[][] gcd = new int[2001][2001];<br>  final static long MOD = (long) (1e9 + 7);<br>  long[][] c = IntegerUtils.generateBinomialCoefficients(2000, MOD);<br><br>  {<br>    for (int i = 0; i &lt;= 2000; i++)<br>      gcd[i][0] = gcd[0][i] = i;<br>    for (int i = 1; i &lt;= 2000; i++) {<br>      for (int j = i; j &lt;= 2000; j++)<br>        gcd[i][j] = gcd[j][i] = gcd[i][j - i];<br>    }<br>  }<br><br>  public int countsets(int L, int H, int K) {<br>    if (K == 1)<br>      return (L + 1) * (H + 1);<br>    long answer = 0;<br>    for (int i = 0; i &lt;= L; i++) {<br>      for (int j = 1; j &lt;= H; j++) {<br>        int possible = gcd[i][j] + 1;<br>        if (possible &lt; K)<br>          continue;<br>        answer += c[possible - 1][K - 1] * (L - i + 1) * (i == 0 ? 1 : 2) % MOD;<br>      }<br>    }<br>    return (int) (answer % MOD);<br>  }<br><br><br>}<br><br>class IntegerUtils {<br><br>  public static long[][] generateBinomialCoefficients(int n, long module) {<br>    long[][] result = new long[n + 1][n + 1];<br>    if (module == 1)<br>      return result;<br>    for (int i = 0; i &lt;= n; i++) {<br>      result[i][0] = 1;<br>      for (int j = 1; j &lt;= i; j++) {<br>        result[i][j] = result[i - 1][j - 1] + result[i - 1][j];<br>        if (result[i][j] &gt;= module)<br>          result[i][j] -= module;<br>      }<br>    }<br>    return result;<br>  }<br><br>  }<br><br><br><br>// Powered by FileEdit<br>// Powered by moj 4.15 [modified TZTester]<br>// Powered by CodeProcessor<br></td>