<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;vector&gt;<br>#include &lt;list&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;deque&gt;<br>#include &lt;queue&gt;<br>#include &lt;stack&gt;<br>#include &lt;bitset&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;functional&gt;<br>#include &lt;numeric&gt;<br>#include &lt;utility&gt;<br>#include &lt;sstream&gt;<br>#include &lt;iostream&gt;<br>#include &lt;iomanip&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cctype&gt;<br>#include &lt;string&gt;<br>#include &lt;cstring&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;ctime&gt;<br><br>using namespace std;<br><br>#define SIZE(X) ((int)(X.size()))<br>#define MP(X,Y) make_pair(X,Y)<br>template&lt;class T&gt; inline void checkmin(T &amp;a,T b){if(b&lt;a) a=b;}<br>typedef pair&lt;int,int&gt; ipair;<br><br>const int oo=1000000000;<br><br>class HeavyBooks<br>{<br>public:<br>  int n,m;<br>  int b[60],a[60];<br>  bool visited[60][60];<br>  ipair f[60][60];<br>  ipair solve(int d,int c)<br>  {<br>    if (d==m) return (c==n)?MP(0,0):MP(-oo,-oo);<br>    if (visited[d][c]) return f[d][c];<br>    visited[d][c]=true;<br>    ipair &amp;ret=f[d][c];<br>    ret=solve(d+1,c);<br>    if (c&lt;n)<br>    {<br>      ipair tmp=solve(d+1,c+1);<br>      if (b[c]==0)<br>        tmp.first+=a[d];<br>      else<br>        tmp.first-=a[d];<br>      tmp.second+=a[d];<br>      if (tmp&gt;ret) ret=tmp;<br>    }<br>    return ret;<br>  }<br>  vector &lt;int&gt; findWeight(vector &lt;int&gt; _a, vector &lt;int&gt; moves)<br>  {<br>    sort(_a.begin(),_a.end());<br>    reverse(_a.begin(),_a.end());<br>    m=SIZE(_a);<br>    for (int i=0;i&lt;m;i++) a[i]=_a[i];<br>    n=moves[0];<br>    vector&lt;int&gt; v[2];<br>    for (int i=0;i&lt;n;i++) v[0].push_back(i);<br>    for (int i=1;i&lt;SIZE(moves);i++)<br>    {<br>      int side=(i-1)%2;<br>      int cnt=moves[i];<br>      checkmin(cnt,SIZE(v[side]));<br>      sort(v[side].begin(),v[side].end());<br>      reverse(v[side].begin(),v[side].end());<br>      for (int i=0;i&lt;cnt;i++)<br>      {<br>        int key=v[side][SIZE(v[side])-1];<br>        v[side].pop_back();<br>        v[1-side].push_back(key);<br>      }<br>    }<br>    for (int i=0;i&lt;2;i++) for (int j=0;j&lt;SIZE(v[i]);j++) b[v[i][j]]=i;<br>    memset(visited,false,sizeof(visited));<br>    ipair ret=solve(0,0);<br>    int del=ret.first;<br>    int sum=ret.second;<br>    vector&lt;int&gt; R;<br>    R.push_back((sum-del)/2);<br>    R.push_back((sum+del)/2);<br>    return R;<br>  }<br>};<br></td>