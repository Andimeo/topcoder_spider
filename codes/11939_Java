<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.List;<br>import java.util.Arrays;<br>import java.util.Comparator;<br>import java.util.AbstractList;<br>import java.util.Collections;<br><br>/**<br> * Built using CHelper plug-in<br> * Actual solution is at the top<br> * @author Egor Kulikov (egor@egork.net)<br> */<br>public class HeavyBooks {<br>  public int[] findWeight(int[] books, int[] moves) {<br>    int[] who = new int[moves[0]];<br>    Arrays.fill(who, 1);<br>    for (int i = 1; i &lt; moves.length; i++) {<br>      int moveTo = i % 2 == 1 ? -1 : 1;<br>      int remainingMoves = moves[i];<br>      for (int j = 0; j &lt; who.length &amp;&amp; remainingMoves != 0; j++) {<br>        if (who[j] != moveTo) {<br>          who[j] = moveTo;<br>          remainingMoves--;<br>        }<br>      }<br>    }<br>    Collections.sort(Array.wrap(books), new ReverseComparator&lt;Integer&gt;());<br>    int[][] resultSum = new int[books.length + 1][who.length + 1];<br>    int[][] resultDifference = new int[books.length + 1][who.length + 1];<br>    ArrayUtils.fill(resultDifference, Integer.MIN_VALUE);<br>    resultDifference[0][0] = 0;<br>    resultSum[0][0] = 0;<br>    for (int i = 0; i &lt; books.length; i++) {<br>      for (int j = 0; j &lt;= i &amp;&amp; j &lt;= who.length; j++) {<br>        if (resultDifference[i + 1][j] &lt; resultDifference[i][j] || resultDifference[i + 1][j] == resultDifference[i][j] &amp;&amp; resultSum[i + 1][j] &lt; resultSum[i][j]) {<br>          resultDifference[i + 1][j] = resultDifference[i][j];<br>          resultSum[i + 1][j] = resultSum[i][j];<br>        }<br>        if (j &lt; who.length &amp;&amp; (resultDifference[i + 1][j + 1] &lt; resultDifference[i][j] + who[j] * books[i] || resultDifference[i + 1][j + 1] == resultDifference[i][j] + who[j] * books[i] &amp;&amp; resultSum[i + 1][j + 1] &lt; resultSum[i][j] + books[i])) {<br>          resultDifference[i + 1][j + 1] = resultDifference[i][j] + who[j] * books[i];<br>          resultSum[i + 1][j + 1] = resultSum[i][j] + books[i];<br>        }<br>      }<br>    }<br>    int tomek = (resultSum[books.length][who.length] - resultDifference[books.length][who.length]) / 2;<br>    int wojtek = resultSum[books.length][who.length] - tomek;<br>    return new int[]{tomek, wojtek};<br>  }<br><br>}<br><br>abstract class Array&lt;T&gt; extends AbstractList&lt;T&gt; {<br><br>  public static List&lt;Integer&gt; wrap(int...array) {<br>    return new IntArray(array);<br>  }<br><br>  protected static class IntArray extends Array&lt;Integer&gt; {<br>    protected final int[] array;<br><br>    protected IntArray(int[] array) {<br>      this.array = array;<br>    }<br><br>    public int size() {<br>      return array.length;<br>    }<br><br>    public Integer get(int index) {<br>      return array[index];<br>    }<br><br>    public Integer set(int index, Integer value) {<br>      int result = array[index];<br>      array[index] = value;<br>      return result;<br>    }<br>  }<br><br>  }<br><br>class ReverseComparator&lt;T extends Comparable&lt;T&gt;&gt; implements Comparator&lt;T&gt; {<br>  public int compare(T o1, T o2) {<br>    return o2.compareTo(o1);<br>  }<br>}<br><br>class ArrayUtils {<br><br>  public static void fill(int[][] array, int value) {<br>    for (int[] row : array)<br>      Arrays.fill(row, value);<br>  }<br><br>  }<br><br><br><br>// Powered by FileEdit<br>// Powered by moj 4.17 [modified TZTester]<br>// Powered by CodeProcessor<br></td>