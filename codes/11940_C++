<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;algorithm&gt;<br>#include &lt;cmath&gt;<br>#include &lt;ctime&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cstring&gt;<br>#include &lt;iostream&gt;<br>#include &lt;sstream&gt;<br>#include &lt;string&gt;<br>#include &lt;vector&gt;<br>using namespace std;<br> <br>typedef long long llint;<br>typedef pair&lt;llint, llint&gt; par;<br> <br>llint first, last;<br>llint mod, target_mod;<br>par memo[48][40000][2];<br> <br>class SequenceTransmission {<br>public:<br>  <br>  par rec(llint x, int left, int prev_bit) {<br>    llint lo = x &lt;&lt; left;<br>    llint hi = ((x + 1) &lt;&lt; left) - 1;<br>    if (lo &gt; last || hi &lt; first) return par(0, 0);<br> <br>    if (left == 0) {<br>      if (x % mod == target_mod) {<br>        return par(1, 0);<br>      } else {<br>        return par(0, 0);<br>      }<br>    }<br> <br>    bool memoize = left &lt; 48 &amp;&amp; lo &gt;= first &amp;&amp; hi &lt;= last;<br>    if (memoize &amp;&amp; memo[left][x % mod][prev_bit].first != -1) {<br>      return memo[left][x % mod][prev_bit];<br>    }<br> <br>    par ret(0, 0);<br>    for (int next_bit = 0; next_bit &lt; 2; ++next_bit) {<br>      par t = rec((x &lt;&lt; 1) | next_bit, left - 1, next_bit);<br>      ret.first += t.first;<br>      ret.second += t.second;<br>      if (x != 0 &amp;&amp; prev_bit != next_bit) {<br>        ret.second += t.first;<br>      }<br>    }<br>    if (memoize) {<br>      memo[left][x % mod][prev_bit] = ret;<br>    }<br>    return ret;<br>  }<br> <br>  llint signalChanges(llint a, llint b, llint n) {<br>    first = a + b;<br>    last = n * a + b;<br>    mod = a;<br>    target_mod = b % mod;<br>    <br>    llint base;<br>    if (first % 2 == 0) {<br>      if (a % 2 == 0) base = n - 1;<br>      else base = n / 2;<br>    } else {<br>      if (a % 2 == 0) base = 0;<br>      else base = (n - 1) / 2;<br>    }<br>    memset(memo, -1, sizeof memo);<br>    return base + rec(0LL, 61, 0).second;<br>  }<br>};<br> <br> <br> <br> <br> <br> <br>// Powered by FileEdit<br>// Powered by moj 4.16 [modified TZTester]<br>// Powered by CodeProcessor<br></td>