<td class="problemText" colspan="8" valign="middle" align="left">
            // BEGIN CUT HERE<br><br>// END CUT HERE<br>#line 5 "BlurredDartboard.cpp"<br>#include &lt;cstring&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cmath&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;vector&gt;<br>#include &lt;string&gt;<br>#include &lt;iostream&gt;<br>#include &lt;sstream&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;queue&gt;<br>#include &lt;stack&gt;<br>#include &lt;fstream&gt;<br>#include &lt;iomanip&gt;<br>#include &lt;bitset&gt;<br>#include &lt;list&gt;<br>using namespace std;<br><br>typedef long long ll;<br>typedef vector&lt;int&gt; vi;<br>typedef pair&lt;int, int&gt; pii;<br>typedef vector&lt;pii&gt; vp;<br>typedef vector&lt;vi&gt; vvi;<br><br>const int N = 100010;<br>const int M = 55;<br>const int K = 200010;<br>const int LIT = 2500;<br>const int INF = 1 &lt;&lt; 30;<br>const double EPS = 1e-13;<br><br>#define mp make_pair<br>#define pb push_back<br>#define fst first<br>#define snd second<br><br>class BlurredDartboard<br>{<br>  public:<br>  int minThrows(vector &lt;int&gt; v, int p)<br>   {<br>    int flags[55];<br>    int zero[55],len_z=0;<br>    int n=v.size();<br>    int num_zero=0,sum_zero=0;<br>    int max_now=0;<br>    len_z=0;<br>    num_zero=sum_zero=max_now=0;<br>    memset(flags,0,sizeof(flags));<br>    for(int i=0;i&lt;n;i++)<br>    {<br>      if(0 == v[i])<br>      {<br>        num_zero++;<br>      }<br>      else if(max_now &lt; v[i])<br>      {<br>        max_now=v[i];<br>      }<br>      flags[v[i]]=1;<br>    }<br>    for(int i=1;i&lt;=n;i++)<br>    {<br>      if( 0 == flags[i] )<br>      {<br>        sum_zero+=i;<br>        zero[len_z++]=i;<br>      }<br>    }<br>    int ans = 0;<br>    if(sum_zero &gt; num_zero*max_now)<br>    {<br>      ans+=p/sum_zero*num_zero;<br>      p%=sum_zero;<br>      int sum_test=0,test_ans=len_z;<br>      for(int i=0;i&lt;len_z;i++)<br>      {<br>        if(sum_test&gt;=p)<br>        {<br>          test_ans=i;<br>          break;<br>        }<br>        sum_test+=zero[i];<br>      }<br>      int max_ans=0==max_now?99999:(p+max_now-1)/max_now;<br>      ans+=max_ans&lt;test_ans?max_ans:test_ans;<br>    }<br>    else<br>      ans+=(p+max_now-1)/max_now;<br>    return ans;<br>  }<br>  <br>};<br></td>