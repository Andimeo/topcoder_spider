<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;algorithm&gt;<br>#include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;queue&gt;<br>#include &lt;iostream&gt;<br>#include &lt;cmath&gt;<br>#include &lt;sstream&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>using namespace std;<br>#define pb push_back<br>#define INF 1000000000<br>#define L(s) (int)((s).size())<br>#define FOR(i,a,b) for (int _n(b), i(a); i &lt;= _n; i++)<br>#define FORD(i,a,b) for(int i=(a),_b=(b);i&gt;=_b;i--)<br>#define rep(i,n) FOR(i,1,(n))<br>#define rept(i,n) FOR(i,0,(n)-1)<br>#define ll long long<br>#define VI vector&lt;int&gt;<br><br>VI p;<br>class ElectionFraudDiv1 <br>  {<br>    public:<br>    inline bool check(int sum) {<br>      ll smin = 0, smax = 0;<br>      rept(i, L(p)) {<br>        int l = p[i] * sum / 100;<br>        int mn = INF, mx = -INF;<br>        FOR(j, l - 1, l + 1) {<br>          if (j &lt; 0 || j &gt; sum) continue;<br>          double t = (double)j / sum * 100;<br>          int r = (int)(t + 0.5 + 1e-8);<br>          if (r == p[i]) {<br>            mn = min(mn, j);<br>            mx = max(mx, j);<br>          }<br>        }<br>        smin += mn; smax += mx;<br>      }<br>      if (smin &lt;= sum &amp;&amp; smax &gt;= sum) return 1; else<br>      return 0;<br>    }<br>       int MinimumVoters( vector &lt;int&gt; percentages )<br>    {<br>      p = percentages;<br>      rep(i, 500000) {<br>        if (check(i)) return i;<br>      }<br><br>      return -1;<br>    }<br>  };<br><br><br><br>// Powered by FileEdit<br>// Powered by moj 4.16 [modified TZTester]<br>// Powered by CodeProcessor<br></td>