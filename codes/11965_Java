<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>import static java.lang.Math.*;<br>import static java.util.Arrays.*;<br> <br>public class PointyWizardHats {<br>  <br>  public int getNumHats(int[] topHeight, int[] topRadius, int[] bottomHeight, int[] bottomRadius) {<br>    int n = topHeight.length, m = bottomHeight.length;<br>    V[] vs = new V[n], us = new V[m];<br>    for (int i = 0; i &lt; n; i++) vs[i] = new V();<br>    for (int i = 0; i &lt; m; i++) us[i] = new V();<br>    for (int i = 0; i &lt; n; i++) {<br>      for (int j = 0; j &lt; m; j++) {<br>        if (topRadius[i] &lt; bottomRadius[j] &amp;&amp; topHeight[i] * bottomRadius[j] &gt; bottomHeight[j] * topRadius[i]) {<br>          vs[i].connect(us[j]);<br>        }<br>      }<br>    }<br>    return bipartiteMatching(vs);<br>  }<br>  <br>  int bipartiteMatching(V[] vs) {<br>    int match = 0;<br>    for (V v : vs) if (v.pair == null) {<br>      for (V u : vs) u.used = false;<br>      if (dfs(v)) match++;<br>    }<br>    return match;<br>  }<br>  boolean dfs(V v) {<br>    v.used = true;<br>    for (V u : v) {<br>      V w = u.pair;<br>      if (w == null || !w.used &amp;&amp; dfs(w)) {<br>        v.pair = u;<br>        u.pair = v;<br>        return true;<br>      }<br>    }<br>    return false;<br>  }<br>  class V extends ArrayList&lt;V&gt; {<br>    V pair;<br>    boolean used;<br>    void connect(V v) {<br>      add(v);<br>      v.add(this);<br>    }<br>  }<br>  <br>  void debug(Object...os) {<br>    System.err.println(deepToString(os));<br>  }<br>  <br>}<br></td>