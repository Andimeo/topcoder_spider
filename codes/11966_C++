<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;vector&gt;<br>#include &lt;list&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;deque&gt;<br>#include &lt;stack&gt;<br>#include &lt;bitset&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;functional&gt;<br>#include &lt;numeric&gt;<br>#include &lt;utility&gt;<br>#include &lt;sstream&gt;<br>#include &lt;iostream&gt;<br>#include &lt;iomanip&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;ctime&gt;<br> <br>using namespace std;<br> <br>class MagicalHats {<br>public:<br>  int findMaximumReward(vector &lt;string&gt;, vector &lt;int&gt;, int);<br>};<br> <br>int k, x[15], y[15], guess, kg;<br>int mem[2222222];<br>int good[222222];<br> <br>int go(int v) {<br>  if (mem[v] &gt;= 0) return mem[v];<br>  int b[15], vv = v, cur = 0;<br>  for (int i=0;i&lt;k;i++) {<br>    b[i] = vv % 3;<br>    if (b[i] &gt; 0) cur++;<br>    vv /= 3;<br>  }<br>  if (cur == guess) {<br>    mem[v] = 0;<br>    for (int i=0;i&lt;k;i++)<br>      if (b[i] == 1) mem[v]++;<br>    return mem[v];<br>  }<br>  int mx = 0;<br>  for (int i=0;i&lt;k;i++) {<br>    if (b[i] &gt; 0) continue;<br>    int mn = 100000;<br>    for (int j=1;j&lt;=2;j++) {<br>      int canbe = 0;<br>      for (int tt=0;tt&lt;kg;tt++) {<br>        int t = good[tt];<br>        int ok = 1;<br>        for (int z=0;z&lt;k;z++)<br>          if (b[z] &gt; 0)<br>            if (t &amp; (1 &lt;&lt; z)) {<br>              if (b[z] == 2) {ok = 0; break; }<br>            } else {<br>              if (b[z] == 1) {ok = 0; break; }<br>            }<br>        if (!ok) continue;<br>        if (j == 1) {<br>          if (t &amp; (1 &lt;&lt; i)) {<br>            canbe = 1;<br>            break;<br>          }<br>        } else {<br>          if (!(t &amp; (1 &lt;&lt; i))) {<br>            canbe = 1;<br>            break;<br>          }<br>        }<br>      }<br>      if (canbe) {<br>        vv = v;<br>        int pw = 1;<br>        for (int z=0;z&lt;i;z++) pw *= 3;<br>        pw *= j;<br>        if (go(vv + pw) &lt; mn) mn = go(vv+pw);<br>      }<br>    }<br>    if (mn == 100000) continue;<br>    if (mn &gt; mx) mx = mn;<br>  }<br>  mem[v] = mx;<br>  return mx;<br>}<br> <br>int MagicalHats::findMaximumReward(vector &lt;string&gt; a, vector &lt;int&gt; coins, int guess) {<br>  int n = a.size(), m = a[0].length(), i, j, k = 0;<br>  int row[16], col[16];<br>  ::guess = guess;<br>  for (i=0;i&lt;n;i++)<br>    for (j=0;j&lt;m;j++)<br>      if (a[i][j] == 'H') {<br>        x[k] = i;<br>        y[k] = j;<br>        k++;<br>      }<br>  ::k = k;<br>  kg = 0;<br>  for (int t=0;t&lt;(1&lt;&lt;k);t++) {<br>    int kq = 0, p[111];<br>    for (i=0;i&lt;k;i++)<br>      if (t &amp; (1 &lt;&lt; i)) p[kq++] = i;<br>    if (kq != coins.size()) continue;<br>    for (i=0;i&lt;n;i++) row[i] = 0;<br>    for (i=0;i&lt;m;i++) col[i] = 0;<br>    for (i=0;i&lt;n;i++)<br>      for (j=0;j&lt;m;j++)<br>        if (a[i][j] == 'H') {<br>          row[i] ^= 1;<br>          col[j] ^= 1;<br>        }<br>    for (i=0;i&lt;kq;i++) {<br>      row[x[p[i]]] ^= 1;<br>      col[y[p[i]]] ^= 1;<br>    }<br>    int ok = 1;<br>    for (i=0;i&lt;n;i++)<br>      if (row[i]) ok = 0;<br>    for (i=0;i&lt;m;i++)<br>      if (col[i]) ok = 0;<br>    if (!ok) continue;<br>    good[kg++] = t;<br>  }<br>  if (kg == 0) return -1;<br>  int pw = 1;<br>  for (i=0;i&lt;k;i++) pw *= 3;<br>  for (i=0;i&lt;pw;i++) mem[i] = -1;<br>  int cnt = go(0);<br>  sort(coins.begin(),coins.end());<br>  int ans = 0;<br>  for (i=0;i&lt;cnt;i++) ans += coins[i];<br>  return ans;<br>}<br> <br> <br>//Powered by [KawigiEdit] 2.0!<br></td>