<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections;<br>using System.Collections.Generic;<br>using System.Text;<br><br>public class FlipGame {<br>    public int minOperations(string[] board)<br>    {<br>        Queue&lt;int&gt; ret = new Queue&lt;int&gt;();<br>        for (int i = 0; i &lt; board.Length; i++)<br>        {<br>            Queue&lt;int&gt; nextret = new Queue&lt;int&gt;();<br>            int pre = '0';<br>            int next = -1;<br>            if (ret.Count != 0) next = ret.Dequeue();<br>            for (int j = board[i].Length - 1; j &gt;= 0; j--)<br>            {<br>                while (next &gt; j)<br>                {<br>                    if (next == -1) next = ret.Dequeue();<br>                    nextret.Enqueue(next);<br>                    nextret.Enqueue(next);<br>                    next = -1;<br>                    if (ret.Count != 0)<br>                    {<br>                        ret.Dequeue();<br>                        if (ret.Count != 0) next = ret.Dequeue();<br>                    }<br>                }<br>                if (board[i][j] != pre)<br>                {<br>                    nextret.Enqueue(j);<br>                    if (ret.Count != 0) next = ret.Dequeue();<br>                    else next = -1;<br>                }<br>                pre = board[i][j];<br>            }<br>            while (ret.Count != 0 || next != -1)<br>            {<br>                if (next == -1) next = ret.Dequeue();<br>                nextret.Enqueue(next);<br>                nextret.Enqueue(next);<br>                next = -1;<br>                if (ret.Count != 0)<br>                {<br>                    ret.Dequeue();<br>                    if (ret.Count != 0) next = ret.Dequeue();<br>                }<br>            }<br>            List&lt;int&gt; ll = new List&lt;int&gt;();<br>            foreach (int item in nextret)<br>            {<br>                ll.Add(item);<br>            }<br>            int[] ar = ll.ToArray();<br>            Array.Sort(ar);<br>            Array.Reverse(ar);<br>            foreach (int item in ar)<br>            {<br>                ret.Enqueue(item);<br>            }<br>        }<br>        return ret.Count;<br>    }<br><br><br><br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003] [modified for C# by Petr]<br>// Powered by CodeProcessor<br></td>