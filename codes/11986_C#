<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections;<br>using System.Collections.Generic;<br>using System.Collections.Specialized;<br>using System.Text;<br>using System.Text.RegularExpressions;<br> <br> <br>public class KingdomAndDice<br>{<br>  public double newFairness(int[] f, int[] s, int x)<br>  {<br>    int n = f.Length;<br>    Dictionary&lt;int,int&gt; fd = new Dictionary&lt;int,int&gt;();<br>    Dictionary&lt;int,int&gt; sd = new Dictionary&lt;int,int&gt;();    <br>    foreach(int v in f)<br>    {<br>      if(v != 0)<br>        fd[v] = 1;<br>    }<br>    foreach(int v in s)<br>    {<br>      sd[v] = 1;<br>    }<br>    Array.Sort(s);<br>    Array.Sort(f);<br>    <br>    int[] av = new int[n + 1];<br>    av[0] = n;<br>    for(int i=0; i&lt;n; i++)<br>    {<br>      int cnt = 0;<br>      int t = s[i] + 1;<br>      int next = x + 1;<br>      if(i &lt; n - 1)<br>        next = s[i + 1];<br>      while(t &lt; next &amp;&amp; cnt &lt; n)<br>      {<br>        if(!fd.ContainsKey(t))<br>        {<br>          cnt ++;<br>        }<br>        t ++;<br>      }<br>      av[i + 1] = cnt;<br>    }    <br> <br>    int ba = 0;<br>    int zc = 0;<br>    foreach(int v in f)<br>    {<br>      if(v == 0)<br>      {<br>        zc ++;<br>        continue;<br>      }<br>      foreach(int v2 in s)<br>      {<br>        if(v &gt; v2)<br>        {<br>          ba ++;<br>        }<br>      }<br>    }<br>    bool[,,] b = new bool[n * n + 1, zc + 1, n + 1];    <br>    <br>    b[ba, 0, 0] = true;<br>    int n21 = n * n + 1;    <br>    int n2 = n * n;<br>    int minc = 0;<br>    int min = n21;<br>    <br>    for(int k=1; k&lt;=n; k++)<br>    {<br>      for(int j=0; j&lt;=zc; j++)<br>      {<br>        int ui = Math.Min(n2, (n2 + min) / 2 + 1);<br>        for(int i=ba; i&lt;=ui; i++)<br>        {<br>          int upper = Math.Min((i - ba) / k, Math.Min(av[k], j));<br>          for(int q = 0; q &lt;= upper; q++)<br>          {<br>            if(b[i - q * k, j - q, k - 1])<br>            {<br>              b[i, j, k] = true;<br>              <br>              int val = Math.Abs(i + i - n2);<br>              if(val &lt; min)<br>              {<br>                min = val;<br>                minc = i;<br>              }<br>              else if(val == min &amp;&amp; i &lt; minc)<br>              {<br>                minc = i;<br>              }<br>              <br>              break;<br>            }<br>          }<br>        }<br>      }<br>    }<br>    <br>    /*for(int i=0; i&lt;n21; i++)<br>    {<br>      for(int j=0; j&lt;zc + 1; j++)<br>      {<br>        if(b[i, j, n])<br>        {<br>          int val = Math.Abs(i * 2 - n * n);<br>          if(val &lt; min)<br>          {<br>            min = val;<br>            minc = i;<br>          }<br>          else if(val == min &amp;&amp; i &lt; minc)<br>          {<br>            minc = i;<br>          }<br>        }<br>      }<br>    }*/<br>            <br>    return (double)minc / n / n;<br>  }<br> <br> <br>}<br>//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!<br></td>