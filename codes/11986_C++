<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;map&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cstring&gt;<br>#include &lt;cassert&gt;<br>#include &lt;set&gt;<br>#include &lt;iostream&gt;<br>#include &lt;sstream&gt;<br>#include &lt;cstddef&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;utility&gt;<br>#include &lt;iterator&gt;<br>#include &lt;numeric&gt;<br>#include &lt;list&gt;<br>#include &lt;complex&gt;<br>#include &lt;queue&gt;<br>#include &lt;climits&gt;<br> <br>using namespace std;<br> <br>typedef vector&lt;int&gt; vi;<br>typedef vector&lt;string&gt; vs;<br>typedef long long ll;<br>typedef complex&lt;double&gt; pnt;<br>typedef pair&lt;int, int&gt; pii;<br> <br>#define RA(x) (x).begin(), (x).end()<br>#define FE(i, x) for (typeof((x).begin()) i = (x).begin(); i != (x).end(); i++)<br>#define SZ(x) ((int) (x).size())<br> <br> <br>class KingdomAndDice<br>{<br>public:<br>    double newFairness(vector &lt;int&gt; firstDie, vector &lt;int&gt; secondDie, int X);<br>};<br> <br>double KingdomAndDice::newFairness(vector &lt;int&gt; firstDie, vector &lt;int&gt; secondDie, int X)<br>{<br>    int N = SZ(secondDie);<br>    sort(RA(secondDie));<br>    vector&lt;int&gt; lo(N + 1), hi(N + 1);<br>    int zeros = 0;<br>    for (int i = 0; i &lt; N; i++)<br>    {<br>        int x = firstDie[i];<br>        if (x == 0)<br>            zeros++;<br>        else<br>        {<br>            int p = lower_bound(RA(secondDie), x) - secondDie.begin();<br>            lo[p]++;<br>        }<br>    }<br> <br>    hi[0] = lo[0] + zeros;<br>    secondDie.push_back(X + 1);<br>    for (int i = 0; i &lt; N; i++)<br>    {<br>        hi[i + 1] = min(lo[i + 1] + zeros, secondDie[i + 1] - secondDie[i] - 1);<br>    }<br> <br>    vector&lt;int&gt; mz(N * N + 1, N + 1);<br>    mz[0] = 0;<br>    for (int i = N; i &gt;= 0; i--)<br>    {<br>        vector&lt;int&gt; mz2(N * N + 1, N + 1);<br>        for (int z = 0; z &lt;= hi[i] - lo[i]; z++)<br>        {<br>            int add = i * (lo[i] + z);<br>            for (int j = add; j &lt;= N * N; j++)<br>            {<br>                mz2[j] = min(mz2[j], mz[j - add] + z);<br>            }<br>        }<br>        mz.swap(mz2);<br>    }<br> <br>    int best = -1;<br>    int bestscore = INT_MAX;<br>    for (int i = 0; i &lt;= N * N; i++)<br>    {<br>        if (mz[i] &lt;= zeros)<br>        {<br>            int score = abs(2 * i - N * N);<br>            if (score &lt; bestscore)<br>            {<br>                bestscore = score;<br>                best = i;<br>            }<br>        }<br>    }<br>    return best / double(N * N);<br>}<br> <br> <br>// Powered by FileEdit<br></td>