<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.Arrays;<br> <br>/**<br> * Built using CHelper plug-in<br> * Actual solution is at the top<br> */<br>public class KingdomAndDice {<br>    public double newFairness(int[] firstDie, int[] secondDie, int X) {<br>        int n = firstDie.length;<br>        int numFree = 0;<br>        for (int x : firstDie) if (x == 0) ++numFree;<br>        long[] can = new long[n * n + 1];<br>        can[0] |= 1;<br>        Arrays.sort(secondDie);<br>        for (int i = secondDie.length; i &gt; 0; --i) {<br>            int cur = i == secondDie.length ? (X + 1) : secondDie[i];<br>            int prev = secondDie[i - 1];<br>            int room = cur - prev - 1;<br>            int alr = 0;<br>            for (int x : firstDie)<br>                if (x &gt; prev &amp;&amp; x &lt; cur)<br>                    ++alr;<br>            long[] ncan = new long[n * n + 1];<br>            for (int oldInv = can.length - 1; oldInv &gt;= 0; --oldInv) {<br>                for (int extra = 0; extra + alr &lt;= room &amp;&amp; extra &lt;= numFree; ++extra) {<br>                    int newInv = oldInv + (extra + alr) * i;<br>                    if (newInv &lt; can.length) {<br>                        ncan[newInv] |= can[oldInv] &lt;&lt; extra;<br>                    }<br>                }<br>            }<br>            can = ncan;<br>        }<br>        int res = -1;<br>        for (int inv = 0; inv &lt; can.length; ++inv) {<br>            if ((can[inv] &amp; ((1L &lt;&lt; (numFree + 1)) - 1)) != 0) {<br>                if (Math.abs(2 * inv - n * n) &lt; Math.abs(2 * res - n * n) ||<br>                        (Math.abs(2 * inv - n * n) == Math.abs(2 * res - n * n) &amp;&amp; inv &lt; res)) {<br>                    res = inv;<br>                }<br>            }<br>        }<br>        return res / (double) n / (double) n;<br>    }<br> <br> <br>}<br> <br> <br> <br>// Powered by FileEdit<br>// Powered by moj 4.16 [modified TZTester]<br>// Powered by CodeProcessor<br></td>