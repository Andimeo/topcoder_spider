<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections;<br>using System.Collections.Generic;<br><br>public class ThreePoints<br>{<br>  public class Fenwick<br>  {<br>    private long[] _h;<br>    private int _maxn;<br><br>    public Fenwick( int maxValue )<br>    {<br>      _maxn = maxValue;<br>      _h = new long[maxValue + 1];<br>    }<br><br>    private int prev( int x )<br>    {<br>      return x &amp; ( x + 1 );<br>    }<br><br>    private int next( int x )<br>    {<br>      return x | ( x + 1 );<br>    }<br><br>    public void Modify( int x, long valueToAdd )<br>    {<br>      while ( x &lt;= _maxn )<br>      {<br>        _h[x] += valueToAdd;<br>        x = next( x );<br>      }<br>    }<br><br>    public long Sum( int l, int r )<br>    {<br>      long res = 0;<br>      while ( r &gt;= 0 )<br>      {<br>        res += _h[r];<br>        r = prev( r ) - 1;<br>      }<br>      --l;<br>      while ( l &gt;= 0 )<br>      {<br>        res -= _h[l];<br>        l = prev( l ) - 1;<br>      }<br>      return res;<br>    }<br>  }<br><br>  public long countColoring( int N, int xzero, int xmul, int xadd, int xmod, int yzero, int ymul, int yadd, int ymod )<br>  {<br>    int[] x = new int[N], y = new int[N];<br>    x[0] = xzero;<br>    for ( int i = 1; i &lt; N; ++i )<br>    {<br>      x[i] = (int)( ( (long)x[i - 1] * xmul + xadd ) % xmod );<br>    }<br>    y[0] = yzero;<br>    for ( int i = 1; i &lt; N; ++i )<br>    {<br>      y[i] = (int)( ( (long)y[i - 1] * ymul + yadd ) % ymod );<br>    }<br>    int[] a = (int[])x.Clone();<br>    Array.Sort( a );<br>    Dictionary&lt;int, int&gt; h = new Dictionary&lt;int, int&gt;();<br>    for ( int i = 0; i &lt; N; ++i ) h.Add( a[i], i );<br>    for ( int i = 0; i &lt; N; ++i ) x[i] = h[x[i]];<br><br>    a = (int[])y.Clone();<br>    Array.Sort( a );<br>    h = new Dictionary&lt;int, int&gt;();<br>    for ( int i = 0; i &lt; N; ++i ) h.Add( a[i], i );<br>    for ( int i = 0; i &lt; N; ++i ) y[i] = h[y[i]];<br><br>    Fenwick f = new Fenwick( N + 1 ), f2 = new Fenwick( N + 1 );<br><br>    List&lt;Point&gt; all = new List&lt;Point&gt;();<br>    for ( int i = 0; i &lt; N; ++i ) all.Add( new Point( x[i], y[i] ) );<br>    all.Sort();<br><br>    long res = 0;<br>    for ( int i = N - 1; i &gt;= 0; --i )<br>    {<br>      long cnt = f.Sum( all[i].y + 1, N + 1 );<br>      res += cnt * ( cnt - 1 ) / 2;<br>      res -= f2.Sum( all[i].y + 1, N + 1 );<br>      f.Modify( all[i].y, 1 );<br>      f2.Modify( all[i].y, cnt );<br>    }<br><br>    return res;<br>  }<br><br>  class Point : IComparable&lt;Point&gt;<br>  {<br>    public int x, y;<br>    public int CompareTo( Point other )<br>    {<br>      return x.CompareTo( other.x );<br>    }<br>    public Point( int x, int y )<br>    {<br>      this.x = x;<br>      this.y = y;<br>    }<br>  }<br><br>}<br><br><br> <br>// Powered by moj 4.16 [modified TZTester]<br>// Powered by CleanSharp 1.0<br>// Powered by CodeProcessor<br></td>