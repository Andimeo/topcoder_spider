<td class="problemText" colspan="8" valign="middle" align="left">
            import static java.util.Arrays.binarySearch;<br>import static java.util.Arrays.sort;<br><br>import java.util.*;<br><br>public class ThreePoints {<br>  public long countColoring(int n, int xzero, int xmul, int xadd, int xmod, int yzero, int ymul,<br>      int yadd, int ymod) {<br>    int x = xzero, y = yzero;<br>    Point[] p = new Point[n];<br>    p[0] = new Point(x, y);<br>    for (int i = 1; i &lt; n; i++) {<br>      x = (int) (((long) x * xmul + xadd) % xmod);<br>      y = (int) (((long) y * ymul + yadd) % ymod);<br>      p[i] = new Point(x, y);<br>    }<br>    sort(p, new Comparator&lt;Point&gt;() {<br>      public int compare(Point o1, Point o2) {<br>        return o1.x - o2.x;<br>      }<br>    });<br>    Set&lt;Integer&gt; allYs = new HashSet&lt;Integer&gt;();<br>    for (Point point : p) {<br>      allYs.add(point.y);<br>    }<br>    int[] yy = toArray(allYs);<br>    sort(yy);<br><br>    for (Point point : p) {<br>      point.y = binarySearch(yy, point.y);<br>    }<br><br>    int[] countLess = countLess(p, yy.length);<br><br>    for (Point point : p) {<br>      point.y = yy.length - 1 - point.y;<br>    }<br>    for (int i = 0, j = n - 1; i &lt; j; i++, j--) {<br>      Point t = p[i];<br>      p[i] = p[j];<br>      p[j] = t;<br>    }<br>    int[] countGreater = countLess(p, yy.length);<br><br>    for (int i = 0, j = n - 1; i &lt; j; i++, j--) {<br>      int t = countGreater[i];<br>      countGreater[i] = countGreater[j];<br>      countGreater[j] = t;<br>    }<br><br>    long answer1 = 0;<br>    for (int i = 0; i &lt; n; i++) {<br>      answer1 += (long) countLess[i] * countGreater[i];<br>    }<br>    long answer2 = 0;<br>    for (int i = 0; i &lt; n; i++) {<br>      answer2 += (long) countGreater[i] * (countGreater[i] - 1) / 2;<br>    }<br>    return answer2 - answer1;<br>  }<br><br>  static int[] countLess(Point[] p, int ys) {<br>    int n = p.length;<br>    int[] countLess = new int[n];<br>    Fenwick f = new Fenwick(ys);<br>    for (int i = 0; i &lt; n;) {<br>      int j = i;<br>      while (j &lt; n &amp;&amp; p[j].x == p[i].x) {<br>        j++;<br>      }<br>      for (int t = i; t &lt; j; t++) {<br>        countLess[t] = f.getSum(p[t].y - 1);<br>      }<br>      for (int t = i; t &lt; j; t++) {<br>        f.add(p[t].y, 1);<br>      }<br>      i = j;<br>    }<br>    return countLess;<br>  }<br><br>  static class Fenwick {<br>    private final int[] s;<br><br>    public Fenwick(int n) {<br>      s = new int[n];<br>    }<br><br>    public int getSum(int i) {<br>      int res = 0;<br>      for (; i &gt;= 0; i = (i &amp; i + 1) - 1) {<br>        res += s[i];<br>      }<br>      return res;<br>    }<br><br>    public void add(int i, int val) {<br>      for (; i &lt; s.length; i |= i + 1) {<br>        s[i] += val;<br>      }<br>    }<br>  }<br><br>  static int[] toArray(Collection&lt;Integer&gt; collection) {<br>    int[] res = new int[collection.size()];<br>    int i = 0;<br>    for (int element : collection) {<br>      res[i++] = element;<br>    }<br>    return res;<br>  }<br><br>  static class Point {<br>    int x, y;<br><br>    private Point(int x, int y) {<br>      this.x = x;<br>      this.y = y;<br>    }<br><br>    public String toString() {<br>      return "(" + x + ", " + y + ")";<br>    }<br>  }<br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by CodeProcessor<br></td>