<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;vector&gt;<br>#include &lt;list&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;deque&gt;<br>#include &lt;queue&gt;<br>#include &lt;stack&gt;<br>#include &lt;bitset&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;functional&gt;<br>#include &lt;numeric&gt;<br>#include &lt;utility&gt;<br>#include &lt;sstream&gt;<br>#include &lt;iostream&gt;<br>#include &lt;iomanip&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cctype&gt;<br>#include &lt;string&gt;<br>#include &lt;cstring&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;ctime&gt;<br><br>using namespace std;<br><br>#define SIZE(X) ((int)(X.size()))<br>typedef long long int64;<br>#define two(X) (1&lt;&lt;(X))<br>#define contain(S,X) (((S)&amp;two(X))!=0)<br><br>class SetAndSet<br>{<br>public:<br>  int n,c[20],g[20][100];<br>  int64 R;<br>  int get_father(int f[],int p)<br>  {<br>    int r=p;<br>    for (;f[r]&gt;=0;r=f[r]);<br>    for (int t=f[p];t&gt;=0;p=t,t=f[p]) f[p]=r;<br>    return r;<br>  }<br>  void DFS(int d,int op,int father[60])<br>  {<br>    if (d==20)<br>    {<br>      int s=0;<br>      for (int i=0;i&lt;n;i++) if (father[i]&lt;0) s++;<br>      int64 cnt=(1LL&lt;&lt;s)-2;<br>      if (op==1)<br>        R+=cnt;<br>      else<br>        R-=cnt;<br>      return;<br>    }<br>    DFS(d+1,op,father);<br>    if (c[d]&lt;n)<br>    {<br>      int new_father[60];<br>      for (int i=0;i&lt;n;i++) new_father[i]=father[i];<br>      int key=get_father(new_father,g[d][0]);<br>      for (int i=1;i&lt;c[d];i++)<br>      {<br>        int tmp=get_father(new_father,g[d][i]);<br>        if (tmp!=key) new_father[tmp]=key;<br>      }<br>      DFS(d+1,-op,new_father);<br>    }<br>  }<br>  int64 countandset(vector &lt;int&gt; a)<br>  {<br>    n=SIZE(a);<br>    int mask=a[0];<br>    for (int i=0;i&lt;n;i++) mask&amp;=a[i];<br>    for (int i=0;i&lt;n;i++) a[i]-=a[i]&amp;mask;<br>    for (int k=0;k&lt;20;k++)<br>    {<br>      c[k]=0;<br>      for (int i=0;i&lt;n;i++) if (!contain(a[i],k)) g[k][c[k]++]=i;<br>      if (c[k]&lt;n &amp;&amp; c[k]&lt;2) return 0;<br>    }<br>    int father[60];<br>    memset(father,255,sizeof(father));<br>    R=0;<br>    DFS(0,1,father);<br>    return R;<br>  }<br>};<br></td>