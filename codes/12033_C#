<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections;<br>using System.Collections.Generic;<br>using System.Collections.Specialized;<br>using System.Text;<br>using System.Text.RegularExpressions;<br> <br> <br>public class RotatingBot<br>{<br>  int[] dx = { 1, 0, -1, 0 };<br>  int[] dy = { 0, -1, 0, 1 };<br>  bool[,] map;<br> <br>  public int minArea(int[] moves)<br>  {<br>    int maxx = 0, minx = 0;<br>    int maxy = 0, miny = 0;<br>    <br>    int cx = 0, cy = 0;<br>    <br>    for ( int i = 0; i &lt; moves.Length; i++ ) {<br>      cx += moves[i] * dx[i%4];<br>      cy += moves[i] * dy[i%4];<br>      <br>      maxx = Math.Max( cx, maxx );<br>      minx = Math.Min( cx, minx );<br>      <br>      maxy = Math.Max( cy, maxy );<br>      miny = Math.Min( cy, miny );<br>    }<br>    <br>    int offx = -minx;<br>    int offy = -miny;<br>    <br>    int sx = maxx - minx + 1;<br>    int sy = maxy - miny + 1;<br>    <br>    map = new bool[sx,sy];<br>    <br>    cx = offx;<br>    cy = offy;<br>    map[cx,cy] = true;<br>    for ( int i = 0; i &lt; moves.Length; i++ ) {<br>      for ( int j = 1; j &lt;= moves[i]; j++ ) {<br>        cx += dx[i%4];<br>        cy += dy[i%4];<br>        <br>        if ( map[cx,cy] ) return -1;<br>        map[cx,cy] = true;<br>      }<br>      <br>      if ( i + 1 != moves.Length ) {<br>      int nx = cx + dx[i%4];<br>      int ny = cy + dy[i%4];<br>      <br>      if ( nx &gt;= 0 &amp;&amp; nx &lt; sx &amp;&amp; ny &gt;= 0 &amp;&amp; ny &lt; sy &amp;&amp; !map[nx,ny] ) return -1;<br>      }<br>    }<br>    <br>    return sx * sy;<br>  }<br> <br> <br>}<br>//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!<br></td>