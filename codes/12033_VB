<td class="problemText" colspan="8" valign="middle" align="left">
            Imports Microsoft.VisualBasic<br>Imports System<br>Imports System.Collections<br>Imports System.Text<br>Imports System.Collections.Generic<br>Imports System.Math<br> <br>Public Class RotatingBot<br>    Public dx As Integer() = {1, 0, -1, 0}<br>    Public dy As Integer() = {0, -1, 0, 1}<br>    Public ss As SortedDictionary(Of Pair(Of Integer, Integer), Boolean)<br>    Public Structure Pair(Of T1 As IComparable(Of T1), T2 As IComparable(Of T2))<br>        Implements System.IComparable<br>        Implements System.IComparable(Of Pair(Of T1, T2))<br>        Public First As T1, Second As T2<br>        Public Sub New(ByVal V1 As T1, ByVal V2 As T2)<br>            First = V1 : Second = V2<br>        End Sub<br>        Public Function CompareTo(ByVal tar As Pair(Of T1, T2)) As Integer Implements System.IComparable(Of Pair(Of T1, T2)).CompareTo<br>            If First.CompareTo(tar.First) &gt; 0 Then Return 1 Else If First.CompareTo(Tar.First) &lt; 0 Then Return -1 Else If Second.CompareTo(Tar.Second) &gt; 0 Then Return 1 Else If Second.CompareTo(Tar.Second) &lt; 0 Then Return -1 Else Return 0<br>        End Function<br>        Public Function CompareTo(ByVal tar As Object) As Integer Implements System.IComparable.CompareTo<br>            If tar.GetType() IsNot Me.GetType() Then Throw New ArgumentException("[\u27604][\u36611][\u19981][\u21487][\u33021][\u12394][\u22411][\u12391][\u12377]", "tar")<br>            Return Me.CompareTo(DirectCast(tar, Pair(Of T1, T2)))<br>        End Function<br>    End Structure<br> <br>    Public Function minArea(ByVal moves As Integer()) As Integer<br>        Dim i As Integer, j As Integer<br>        ss = New SortedDictionary(Of Pair(Of Integer, Integer), Boolean)<br>        For j = 0 To 1<br>            Dim x As Integer = 0, y As Integer = 0, d As Integer = 0<br>            Dim minX As Integer = 0, maxX As Integer = -0<br>            Dim minY As Integer = 0, maxY As Integer = -0<br>            Dim HasError As Boolean = False<br>            ss.Add(New Pair(Of Integer, Integer)(x, y), True)<br>            For Each t As Integer In moves<br>                If HasError Then<br>                    Return -1<br>                End If<br>                For i = 1 To t<br>                    x += dx(d)<br>                    y += dy(d)<br>                    If ss.ContainsKey(New Pair(Of Integer, Integer)(x, y)) Then<br>                        Return -1<br>                    End If<br>                    ss.Add(New Pair(Of Integer, Integer)(x, y), True)<br>                    minX = Min(minX, x)<br>                    minY = Min(minY, y)<br>                    maxX = Max(maxX, x)<br>                    maxY = Max(maxY, y)<br>                Next<br>                If j = 1 Then<br>                    If ss.ContainsKey(New Pair(Of Integer, Integer)(x + dx(d), y + dy(d))) = False Then<br>                        HasError = True<br>                    End If<br>                End If<br>                d = (d + 1) Mod 4<br> <br>            Next<br>            Dim W As Integer = maxX - minX + 1, H As Integer = maxY - minY + 1<br>            minArea = W * H<br>            ss.Clear()<br>            For i = minY To maxY<br>                ss.Add(New Pair(Of Integer, Integer)(minX - 1, i), True)<br>                ss.Add(New Pair(Of Integer, Integer)(maxX + 1, i), True)<br>            Next<br>            For i = minX To maxX<br>                ss.Add(New Pair(Of Integer, Integer)(i, minY - 1), True)<br>                ss.Add(New Pair(Of Integer, Integer)(i, maxY + 1), True)<br>            Next<br>        Next j<br>    End Function<br>End Class<br></td>