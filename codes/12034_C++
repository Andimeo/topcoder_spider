<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;vector&gt;<br>#include &lt;list&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;deque&gt;<br>#include &lt;stack&gt;<br>#include &lt;bitset&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;functional&gt;<br>#include &lt;numeric&gt;<br>#include &lt;utility&gt;<br>#include &lt;sstream&gt;<br>#include &lt;iostream&gt;<br>#include &lt;iomanip&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;ctime&gt;<br> <br>using namespace std;<br> <br>class CosmicBlocks {<br>public:<br>  int getNumOrders(vector &lt;int&gt;, int, int);<br>};<br> <br>vector &lt;int&gt; a;<br>int ans, cnt;<br>int n, minw, maxw, height[9], total[9];<br>int g[9][9];<br>int b[9], c[9];<br>int ok[9], deg[9];<br> <br>void find(int v) {<br>  if (v == n) {<br>    cnt++;<br>    return;<br>  }<br>  for (int i=0;i&lt;n;i++)<br>    if (ok[i] &amp;&amp; deg[i] == 0) {<br>      for (int j=0;j&lt;n;j++)<br>        if (g[i][j]) deg[j]--;<br>      ok[i] = 0;<br>      find(v+1);<br>      ok[i] = 1;<br>      for (int j=0;j&lt;n;j++)<br>        if (g[i][j]) deg[j]++;<br>    }<br>}<br> <br>int m, fin, last[33], was[33];<br>int ss[555], ff[555], cc[555], f[555], obr[555], pred[555];<br> <br>void add(int x,int y,int z,int xx,int yy) {<br>  m++;<br>  ss[m] = x;<br>  ff[m] = y;<br>  cc[m] = z;<br>  f[m] = xx;<br>  obr[m] = yy;<br>  pred[m] = last[x];<br>  last[x] = m;<br>}<br> <br>int flow(int v, int w) {<br>  if (v == fin) return w;<br>  was[v] = 1;<br>  int r = 0, j = last[v], ww, t;<br>  while (j &gt; 0) {<br>    if (cc[j] &gt; f[j] &amp;&amp; !was[ff[j]]) {<br>      ww = cc[j]-f[j];<br>      if (w-r &lt; ww) ww = w-r;<br>      t = flow(ff[j],ww);<br>      if (t &gt; 0) {<br>        f[j] += t;<br>        if (obr[j] != 0) f[obr[j]] -= t;<br>        r += t;<br>        if (r == w) break;<br>      }<br>    }<br>    j = pred[j];<br>  }<br>  return r;<br>}<br> <br>void go(int v, int w) {<br>  if (v == n) {<br>    for (int i=0;i&lt;n;i++) {<br>      if (height[i] == 0) continue;<br>      int sum = 0;<br>      for (int j=0;j&lt;n;j++)<br>        if (g[i][j]) sum += a[j];<br>      if (sum &lt; a[i]) return;<br>    }<br>    for (int i=0;i&lt;n;i++) {<br>      b[i] = a[i];<br>      c[i] = a[i];<br>    }<br>    for (int i=0;i&lt;n;i++)<br>      for (int j=0;j&lt;n;j++)<br>        if (g[i][j]) {<br>          b[i]--; c[j]--;<br>          if (b[i] &lt; 0 || c[j] &lt; 0) return;<br>        }<br>    for (int q=0;q&lt;n;q++) {<br>      memset(last,0,sizeof(last));<br>      int need = 0, n1 = 0, n2 = 0;<br>      int num[33];<br>      m = 0;<br>      for (int i=0;i&lt;n;i++)<br>        if (height[i] == q+1) {<br>          n1++;<br>          add(0,n1,b[i],0,0);<br>          need += b[i];<br>          num[i] = n1;<br>        }<br>      for (int i=0;i&lt;n;i++)<br>        if (height[i] == q) n2++;<br>      fin = n1+n2+1;<br>      int id = n1;<br>      for (int i=0;i&lt;n;i++)<br>        if (height[i] == q) {<br>          id++;<br>          add(id,fin,c[i],0,0);<br>          num[i] = id;<br>        }<br>      for (int i=0;i&lt;n;i++)<br>        for (int j=0;j&lt;n;j++)<br>          if (g[i][j] &amp;&amp; height[i] == q+1 &amp;&amp; height[j] == q) {<br>            add(num[i],num[j],1000000,0,m+2);<br>            add(num[j],num[i],0,0,m);<br>          }<br>      while (1) {<br>        for (int i=0;i&lt;=fin;i++) was[i] = 0;<br>        int t = flow(0,1000000);<br>        if (t == 0) break;<br>        need -= t;<br>      }<br>      if (need &gt; 0) return;<br>    }<br>    for (int i=0;i&lt;n;i++) ok[i] = 1;<br>    for (int i=0;i&lt;n;i++) deg[i] = 0;<br>    for (int i=0;i&lt;n;i++)<br>      for (int j=0;j&lt;n;j++)<br>        if (g[i][j]) deg[j]++;<br>    cnt = 0;<br>    find(0);<br>    if (minw &lt;= cnt &amp;&amp; cnt &lt;= maxw) ans++;<br>    return;<br>  }<br>  g[v][w] = 0;<br>  if (w &lt; n-1) go(v,w+1);<br>  else go(v+1,0);<br>  if (height[v] == height[w]+1) {<br>    g[v][w] = 1;<br>    if (w &lt; n-1) go(v,w+1);<br>    else go(v+1,0);<br>    g[v][w] = 0;<br>  }<br>}<br> <br>void rec(int v) {<br>  if (v == n) {<br>    for (int i=0;i&lt;n-1;i++)<br>      if (total[i] &lt; total[i+1]) return;<br>    go(0,0);<br>    return;<br>  }<br>  for (int i=0;i&lt;n;i++) {<br>    height[v] = i;<br>    total[i] += a[v];<br>    rec(v+1);<br>    total[i] -= a[v];<br>  }<br>}<br> <br>int CosmicBlocks::getNumOrders(vector &lt;int&gt; a, int minWays, int maxWays) {<br>  ::a = a;<br>  n = a.size();<br>  minw = minWays;<br>  maxw = maxWays;<br>  for (int i=0;i&lt;n;i++) total[i] = 0;<br>  ans = 0;<br>  rec(0);<br>  return ans;<br>}<br> <br> <br>//Powered by [KawigiEdit] 2.0!<br></td>