<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.Arrays;<br><br>/**<br> * Built using CHelper plug-in<br> * Actual solution is at the top<br> * @author Egor Kulikov (egor@egork.net)<br> */<br>public class FleaCircus {<br>  long[] odd;<br>  private static final long MOD = (long) (1e9 + 9);<br><br>  public int countArrangements(String[] afterFourClicks) {<br>    String all = StringUtils.unite(afterFourClicks);<br>    String[] tokens = all.split(" ");<br>    int[] permutation = new int[tokens.length];<br>    for (int i = 0; i &lt; tokens.length; i++)<br>      permutation[i] = Integer.parseInt(tokens[i]);<br>    boolean[] visited = new boolean[permutation.length];<br>    int[] count = new int[permutation.length + 1];<br>    for (int i = 0; i &lt; permutation.length; i++) {<br>      if (visited[i])<br>        continue;<br>      int length = 0;<br>      int current = i;<br>      do {<br>        current = permutation[current];<br>        visited[current] = true;<br>        length++;<br>      } while (current != i);<br>      count[length]++;<br>    }<br>    odd = new long[permutation.length + 1];<br>    long result = 1;<br>    for (int i = 1; i &lt;= permutation.length; i++) {<br>      if (i % 2 == 1) {<br>        Arrays.fill(odd, -1);<br>        odd[0] = 1;<br>        result = result * odd(count[i], i) % MOD;<br>      } else<br>        result = result * even(count[i], i) % MOD;<br>    }<br>    return (int) result;<br>  }<br><br>  private long even(int count, long perCycle) {<br>    if ((count &amp; 3) != 0)<br>      return 0;<br>    if (count == 0)<br>      return 1;<br>    return even(count - 4, perCycle) * ((long)(count - 1) * (count - 2) * (count - 3) % MOD) % MOD * perCycle * perCycle % MOD * perCycle % MOD;<br>  }<br><br>  private long odd(int count, long perCycle) {<br>    if (odd[count] != -1)<br>      return odd[count];<br>    odd[count] = odd(count - 1, perCycle);<br>    if (count &gt;= 2)<br>      odd[count] += odd(count - 2, perCycle) * (count - 1) * perCycle;<br>    if (count &gt;= 4)<br>      odd[count] += odd(count - 4, perCycle) * ((long)(count - 1) * (count - 2) * (count - 3) % MOD) % MOD * perCycle * perCycle % MOD * perCycle;<br>    return odd[count] %= MOD;<br>  }<br><br><br>}<br><br>class StringUtils {<br><br>  public static String unite(String[] array) {<br>    StringBuilder result = new StringBuilder();<br>    for (String s : array) {<br>      result.append(s);<br>    }<br>    return result.toString();<br>  }<br><br>  }<br><br><br><br>// Powered by FileEdit<br>// Powered by moj 4.15 [modified TZTester]<br>// Powered by CodeProcessor<br></td>