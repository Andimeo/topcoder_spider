<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.Arrays;<br> <br>/**<br> * Built using CHelper plug-in<br> * Actual solution is at the top<br> */<br>public class FavouriteDigits {<br>    public long findNext(long N, int digit1, int count1, int digit2, int count2) {<br>        long[][][][] res = new long[18][2][count1 + 1][count2 + 1];<br>        for (long[][][] a : res) for (long[][] b : a) for (long[] c : b) Arrays.fill(c, -1);<br>        res[0][0][0][0] = 0;<br>        res[0][1][0][0] = 0;<br>        long p10 = 1;<br>        for (int len = 1; len &lt; res.length; ++len) {<br>            for (int seenGreater = 0; seenGreater &lt; 2; ++seenGreater) {<br>                int minDigit = seenGreater == 0 ? (int) ((N / p10) % 10) : 0;<br>                boolean hadNonZero = seenGreater &gt; 0 || (N &gt;= p10 * 10);<br>                for (int c1 = 0; c1 &lt;= count1; ++c1)<br>                    for (int c2 = 0; c2 &lt;= count2; ++c2) {<br>                        long best = -1;<br>                        for (int digit = minDigit; digit &lt; 10; ++digit) {<br>                            int nc1 = c1;<br>                            if (digit == digit1 &amp;&amp; nc1 &gt; 0 &amp;&amp; (digit1 &gt; 0 || hadNonZero)) --nc1;<br>                            int nc2 = c2;<br>                            if (digit == digit2 &amp;&amp; nc2 &gt; 0 &amp;&amp; (digit2 &gt; 0 || hadNonZero)) --nc2;<br>                            int nSeenGreater = (seenGreater == 1 || (digit &gt; minDigit)) ? 1 : 0;<br>                            long cur = res[len - 1][nSeenGreater][nc1][nc2];<br>                            if (cur &lt; 0) continue;<br>                            cur += p10 * digit;<br>                            if (best &lt; 0 || cur &lt; best) {<br>                                best = cur;<br>                            }<br>                        }<br>                        res[len][seenGreater][c1][c2] = best;<br>                    }<br>            }<br>            p10 *= 10;<br>        }<br>        return res[res.length - 1][0][count1][count2];<br>    }<br>}<br> <br> <br> <br>// Powered by FileEdit<br>// Powered by moj 4.16 [modified TZTester]<br>// Powered by CodeProcessor<br></td>