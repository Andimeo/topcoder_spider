<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;iostream&gt;<br>#include &lt;vector&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;list&gt;<br>#include &lt;map&gt;<br>#include &lt;cmath&gt;<br>using namespace std;<br><br><br>//[\u26368][\u22823][\u22242]<br>//[\u36820][\u22238][\u26368][\u22823][\u22242][\u22823][\u23567][\u21644][\u19968][\u20010][\u26041][\u26696],[\u20256][\u20837][\u22270][\u30340][\u22823][\u23567]n[\u21644][\u37051][\u25509][\u38453]mat<br>//mat[i][j][\u20026][\u24067][\u23572][\u37327]<br>const int MAXN = 60;<br><br>void clique(int n, int * u, const bool mat[][MAXN], int size, int &amp; max, int &amp; bb, int * res, int * rr, int * c) {<br>  int i, j, vn, v[MAXN];<br>  if (n) {<br>    if (size + c[u[0]] &lt;= max) {<br>      return ;<br>    }<br>    for (i = 0; i &lt; n + size - max &amp;&amp; i &lt; n; ++i) {<br>      for (j = i + 1, vn = 0; j &lt; n; ++j) {<br>        if (mat[u[i]][u[j]]) {<br>          v[vn++] = u[j];<br>        }<br>      }<br>      rr[size] = u[i];<br>      clique(vn, v, mat, size + 1, max, bb, res, rr, c);<br>      if (bb) {<br>        return ;<br>      } <br>    }<br>  } else if (size &gt; max) {<br>    max = size;<br>    for (i = 0; i &lt; size; ++i) {<br>      res[i] = rr[i];<br>    }<br>    bb = 1;<br>  }<br>}<br><br>int maxclique(int n, const bool mat[][MAXN], int * ret) {<br>  int max = 0, bb, c[MAXN], i, j;<br>  int vn, v[MAXN], rr[MAXN];<br>  for (c[i = n - 1] = 0; i &gt;= 0; --i) {<br>    vn = 0;<br>    for (j = i + 1; j &lt; n; ++j) {<br>      if (mat[i][j]) {<br>        v[vn++] = j;<br>      }<br>    }<br>    bb = 0;<br>    rr[0] = i;<br>    clique(vn, v, mat, 1, max, bb, ret, rr, c);<br>    c[i] = max;<br>  }<br>  return max;<br>}<br><br><br>int gcd(int a, int b) {<br>  int t;<br>  if (a &lt; 0) {<br>    a = -a;<br>  }<br>  if (b &lt; 0) {<br>    b = -b;<br>  }<br>  if (!b) {<br>    return a;<br>  } <br>  while (t = a % b) {<br>    a = b;<br>    b = t;<br>  }<br>  return b;<br>}<br><br><br>bool relativeprim(int a, int b)<br>{<br>  return gcd(a,b)==1;<br>}<br><br><br>class RelativelyPrimeSubset{<br>public:<br>  int findSize(vector &lt;int&gt; S)<br>  {<br>    int size = S.size();<br>    bool mat[MAXN][MAXN];<br>    for( int i =0; i&lt; size; i++)<br>      for( int j =0; j&lt; size; j++)<br>        mat[i][j] = relativeprim(S[i], S[j]);<br>    int tmp[100];<br>    return maxclique(size, mat, tmp);<br><br>  }<br>};<br></td>