<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br><br>class set {<br>  public ArrayList&lt;Integer&gt; list;<br><br>  public set() {<br>    list = new ArrayList&lt;Integer&gt;();<br>  }<br><br>  public set(set other, int val) {<br>    list = new ArrayList&lt;Integer&gt;();<br>    for (int i=0; i&lt;other.size(); i++)<br>      list.add(other.list.get(i));<br>    list.add(val);<br>  }<br><br>  public void add(int a) {<br>    list.add(a);<br>    //Collections.sort(a);<br>  }<br><br>  public int size() {<br>    return list.size();<br>  }<br><br>}<br>public class RelativelyPrimeSubset {<br><br>  public static void main(String[] args) {<br><br>    int[] a = {2,3,11,7,4};<br>    System.out.println(findSize(a));<br>  }<br><br>  public static int findSize(int[] S) {<br><br>    Arrays.sort(S);<br><br>    boolean[] taken = new boolean[101];<br>    Arrays.fill(taken, false);<br><br>    ArrayList&lt;Integer&gt; current = new ArrayList&lt;Integer&gt;();<br><br>    while (true) {<br><br>      int takeIndex = findBest(S, current);<br>      if (takeIndex == -1) break;<br><br>      current.add(S[takeIndex]);<br>      S[takeIndex] = -1;<br>    }<br>    return current.size();<br>  }<br><br>  public static int findBest(int[] S, ArrayList&lt;Integer&gt; current) {<br><br>    int minRemove = 100, best = -1;<br>    for (int i=0; i&lt;S.length; i++) {<br><br>      if (S[i] == -1) continue;<br><br>      if (!pass(current, S[i])) continue;<br><br>      int remove = 0;<br>      for (int j=0; j&lt;S.length; j++) {<br>        if (i == j) continue;<br><br>        if (gcd(S[j], S[i]) != 1) remove++;<br>      }<br><br>      if (remove &lt; minRemove) {<br>        minRemove = remove;<br>        best = i;<br>      }<br>    }<br>    return best;<br>  }<br><br>  public static boolean pass(ArrayList&lt;Integer&gt; s, int val) {<br><br>    for (int i=0; i&lt;s.size(); i++)<br>      if (gcd(s.get(i), val) != 1)<br>        return false;<br>    return true;<br>  }<br><br>  public static int gcd(int a, int b) {<br>    if (a==-1 || b ==-1) return 1;<br>    if (a == 0) return b;<br>    if (b == 0) return a;<br>    return gcd(b, a%b);<br>  }<br>}<br></td>