<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections;<br>using System.Collections.Generic;<br>using System.Collections.Specialized;<br>using System.Text;<br>using System.Text.RegularExpressions;<br> <br> <br>public class RectangularSum<br>{<br>  public long minimalArea(int _h, int _w, long s)<br>  {<br>    long h = _h;<br>    long w = _w;<br>    if((long) h * w &gt; s)<br>      return 1;<br>    long sw = s / w;<br>    <br>    List&lt;long&gt; ps = new List&lt;long&gt;();<br>    for(long x = 1; x * x &lt;= s; x++)<br>    {<br>      if(s % x == 0)<br>      {<br>        ps.Add(x);<br>        if(s % (x * 2) != 0)<br>          ps.Add(x * 2);<br>        if(x * x != s)<br>        {<br>          ps.Add(s / x);<br>          if(s % (s / x * 2) != 0)<br>            ps.Add(s / x * 2);<br>        }<br>      }<br>    }<br>    ps.Sort();    <br>    long min = long.MaxValue;<br>    for(int ib=0; ib&lt;ps.Count; ib++)<br>    //for(long b = 1; b &lt;= h &amp;&amp; b * (b - 1) / 2 &lt;= sw; b++)<br>    {<br>      long b = ps[ib];<br>      if(!(b &lt;= h &amp;&amp; b * (b - 1) / 2 &lt;= sw))<br>        break;<br>      if((b % 2 == 0 &amp;&amp; s % (b/2) == 0) || (b % 2 != 0 &amp;&amp; s % b == 0))<br>      {<br>        long au = (s - b * (b - 1) / 2 * w) / b;<br>        for(int ia=0; ia&lt;ps.Count; ia++)<br>        //for(long a = 1; a &lt;= w &amp;&amp; a * (a - 1) / 2 &lt;= au; a++)<br>        {<br>          long a = ps[ia];<br>          if(!(a &lt;= w &amp;&amp; a * (a - 1) / 2 &lt;= au))<br>            break;<br>          if((a % 2 == 0 &amp;&amp; s % (a/2) == 0) || (a % 2 != 0 &amp;&amp; s % a == 0))<br>          {<br>            long t = s - b * (b - 1) / 2 * a * w - a * (a - 1) / 2 * b;<br>            long ab = a * b;<br>            if(t &gt;= 0 &amp;&amp; t % ab == 0)<br>            {<br>              long v = t / ab;<br>              long r1 = v / w;<br>              long r2 = v % w;<br>              if(r1 + b &lt;= h &amp;&amp; r2 + a &lt;= w)<br>              {                <br>                min = Math.Min(min, ab);<br>              }<br>            }<br>          }          <br>        }<br>      }<br>    }<br>    if(min == long.MaxValue)<br>    {<br>      min = -1;<br>    }<br>    return min;<br>  }<br> <br> <br>}<br>//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!<br></td>