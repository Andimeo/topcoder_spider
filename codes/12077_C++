<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;vector&gt;<br>#include &lt;list&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;queue&gt;<br>#include &lt;deque&gt;<br>#include &lt;stack&gt;<br>#include &lt;bitset&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;functional&gt;<br>#include &lt;numeric&gt;<br>#include &lt;utility&gt;<br>#include &lt;sstream&gt;<br>#include &lt;iostream&gt;<br>#include &lt;iomanip&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;ctime&gt;<br> <br>using namespace std;<br> <br>typedef long long int64;<br> <br>class RectangularSum {<br>public:<br>  long long minimalArea(int height, int width, long long S) {<br>    int n = height, m = width;<br> <br>    int64 ans = LONG_LONG_MAX;<br> <br>    for (int nRow = 1; nRow &lt;= n; ++nRow) {<br>      for (int nCol = 1; nCol &lt;= width; ++nCol) {<br>        int64 add = 1LL * nRow * (nRow - 1) / 2 * nCol * width + 1LL * nRow * (nCol) * (nCol - 1) / 2;<br>        if (add &gt; S)<br>          break;<br>        int64 rem = S - add;<br>        if (rem % (1LL * nRow * nCol) != 0)<br>          continue;<br>        int64 val = rem / nRow / nCol;<br>        int64 r = val / width, c = val % width;<br>        if (r + nRow &lt;= n &amp;&amp; c + nCol &lt;= m) {<br>          ans = min(ans, 1LL * nRow * nCol);<br>        }<br>      }<br>    }<br> <br>    if (ans == LONG_LONG_MAX)<br>      ans = -1;<br>    return ans;<br>  }<br>};<br> <br> <br>//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!<br></td>