<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.Arrays;<br>import java.util.BitSet;<br><br>public class Incubator {<br>  public int maxMagicalGirls(String[] love) {<br>    int n = love.length;<br>    char[][] L = new char[n][];<br>    for(int i = 0;i &lt; n;i++){<br>      L[i] = love[i].toCharArray();<br>    }<br>    <br>    for (int k = 0; k &lt; n; k++) {<br>      for (int i = 0; i &lt; n; i++) {<br>        for (int j = 0; j &lt; n; j++) {<br>          if(L[i][k] == 'Y' &amp;&amp; L[k][j] == 'Y'){<br>            L[i][j] = 'Y';<br>          }<br>        }<br>      }<br>    }<br>    <br>    boolean[][] g = new boolean[n][n];<br>    for(int i = 0;i &lt; n;i++){<br>      for(int j = 0;j &lt; n;j++){<br>        g[i][j] = L[i][j] == 'Y';<br>      }<br>    }<br>    return n-doBipartiteMatching(g);<br>  }<br>  <br>  public static int doBipartiteMatching(boolean[][] g)<br>  {<br>    int n = g.length;<br>    if(n == 0)return 0;<br>    int m = g[0].length;<br>    if(m == 0)return n;<br>    int[] im = new int[m];<br>    Arrays.fill(im, -1);<br>    BitSet visited = new BitSet();<br>    int matched = 0;<br>    for(int i = 0;i &lt; n;i++){<br>      if(visit(g, i, visited, im)) {<br>        visited.clear();<br>        matched++;<br>      }<br>    }<br>    return matched;<br>  }<br><br>  public static boolean visit(boolean[][] g, int cur, BitSet visited, int[] im)<br>  {<br>    if(cur == -1)return true;<br><br>    for(int i = visited.nextClearBit(0);i != g[cur].length;i = visited.nextClearBit(i+1)){<br>      if(g[cur][i]){<br>        visited.set(i);<br>        if(visit(g, im[i], visited, im)){<br>          im[i] = cur;<br>          return true;<br>        }<br>      }<br>    }<br>    return false;<br>  }<br><br>  void tr(Object... o) { System.out.println(Arrays.deepToString(o)); }<br>}<br></td>