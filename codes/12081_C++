<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;vector&gt;<br>#include &lt;list&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;deque&gt;<br>#include &lt;queue&gt;<br>#include &lt;stack&gt;<br>#include &lt;bitset&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;functional&gt;<br>#include &lt;numeric&gt;<br>#include &lt;utility&gt;<br>#include &lt;sstream&gt;<br>#include &lt;iostream&gt;<br>#include &lt;iomanip&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cctype&gt;<br>#include &lt;string&gt;<br>#include &lt;cstring&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;ctime&gt;<br><br>using namespace std;<br><br>#define SIZE(X) ((int)(X.size()))<br><br>//CORRECTNESS: *****<br><br>#include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cmath&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;ctime&gt;<br>#include &lt;list&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;bitset&gt;<br>#include &lt;functional&gt;<br>#include &lt;utility&gt;<br>#include &lt;iostream&gt;<br>#include &lt;fstream&gt;<br>#include &lt;sstream&gt;<br> <br>using namespace std;<br><br>const int maxnode=20000+5;<br>const int maxedge=1000000+5;<br>const int oo=1000000000;<br><br>int node,src,dest,nedge;<br>int head[maxnode],point[maxedge],next[maxedge],flow[maxedge],capa[maxedge];<br>int dist[maxnode],Q[maxnode],work[maxnode];<br><br>void init(int _node,int _src,int _dest)<br>{<br>  node=_node;<br>  src=_src;<br>  dest=_dest;<br>  for (int i=0;i&lt;node;i++) head[i]=-1;<br>  nedge=0;<br>}<br>void addedge(int u,int v,int c1,int c2)<br>{<br>  point[nedge]=v,capa[nedge]=c1,flow[nedge]=0,next[nedge]=head[u],head[u]=(nedge++);<br>  point[nedge]=u,capa[nedge]=c2,flow[nedge]=0,next[nedge]=head[v],head[v]=(nedge++);<br>}<br>bool dinic_bfs()<br>{<br>  for (int i=0;i&lt;node;i++) dist[i]=-1;<br>  dist[src]=0;<br>  int sizeQ=0;<br>  Q[sizeQ++]=src;<br>  for (int cl=0;cl&lt;sizeQ;cl++)<br>    for (int k=Q[cl],i=head[k];i&gt;=0;i=next[i])<br>      if (flow[i]&lt;capa[i] &amp;&amp; dist[point[i]]&lt;0)<br>      {<br>        dist[point[i]]=dist[k]+1;<br>        Q[sizeQ++]=point[i];<br>      }<br>  return dist[dest]&gt;=0;<br>}<br>int dinic_dfs(int x,int exp)<br>{<br>  if (x==dest) return exp;<br>  int res=0;<br>  for (int &amp;i=work[x];i&gt;=0;i=next[i])<br>  {<br>    int v=point[i],tmp;<br>    if (flow[i]&lt;capa[i] &amp;&amp; dist[v]==dist[x]+1 &amp;&amp; (tmp=dinic_dfs(v,min(exp,capa[i]-flow[i])))&gt;0)<br>    {<br>      flow[i]+=tmp;<br>      flow[i^1]-=tmp;<br>      res+=tmp;<br>      exp-=tmp;<br>      if (exp==0) break;<br>    }<br>  }<br>  return res;<br>}<br>int dinic_flow()<br>{<br>  int result=0;<br>  while (dinic_bfs())<br>  {<br>    for (int i=0;i&lt;node;i++) work[i]=head[i];<br>    result+=dinic_dfs(src,oo);<br>  }<br>  return result;<br>}<br><br>#define ID(x,y) (x*size_y+y)<br><br>class FoxAndCake<br>{<br>public:<br>  void init(set&lt;int&gt; M,vector&lt;int&gt; &amp;H)<br>  {<br>    H.clear();<br>    vector&lt;int&gt; A(M.begin(),M.end());<br>    for (int i=0;i&lt;SIZE(A);i++)<br>    {<br>      H.push_back(A[i]);<br>      if (i+1&lt;SIZE(A)) for (int key=A[i]+1;key&lt;=A[i]+6 &amp;&amp; key&lt;A[i+1];key++) H.push_back(key);<br>    }<br>  }<br>  string ableToDivide(int n, int m, vector &lt;int&gt; x, vector &lt;int&gt; y)<br>  {<br>    set&lt;int&gt; MX,MY;<br>    MX.insert(1);<br>    MY.insert(1);<br>    MX.insert(n);<br>    MY.insert(m);<br>    for (int i=0;i&lt;7;i++)<br>    {<br>      MX.insert(x[i]);<br>      MY.insert(y[i]);<br>    }<br>    vector&lt;int&gt; HX,HY;<br>    init(MX,HX);<br>    init(MY,HY);<br>    int size_x=SIZE(HX);<br>    int size_y=SIZE(HY);<br>    int size=size_x*size_y;<br>    int src=size_x*size_y*2;<br>    int dest=size_x*size_y*2+1;<br>    ::init(size+size+2,src,dest);<br>    for (int i=0;i&lt;size_x;i++) for (int j=0;j&lt;size_y;j++)<br>    {<br>      for (int dx=-1;dx&lt;=1;dx++) for (int dy=-1;dy&lt;=1;dy++) if (abs(dx)+abs(dy)==1)<br>      {<br>        int x2=i+dx,y2=j+dy;<br>        if (x2&gt;=0 &amp;&amp; x2&lt;size_x &amp;&amp; y2&gt;=0 &amp;&amp; y2&lt;size_y)<br>          addedge(ID(i,j)+size,ID(x2,y2),1,0);<br>      }<br>      bool ok=true;<br>      if (HX[i]==x[0] &amp;&amp; HY[j]==y[0]) continue;<br>      addedge(ID(i,j),ID(i,j)+size,1,0);<br>      for (int k=1;k&lt;=6;k++)<br>        if (HX[i]==x[k] &amp;&amp; HY[j]==y[k])<br>          if (k&lt;=3)<br>            addedge(src,ID(i,j),1,0);<br>          else<br>            addedge(ID(i,j)+size,dest,1,0);<br>    }<br>    int f=dinic_flow();<br>    if (f==3)<br>      return "Yes";<br>    else<br>      return "No";<br>  }<br>};<br></td>