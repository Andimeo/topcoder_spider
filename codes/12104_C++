<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;string&gt;<br><br>using namespace std;<br><br>const long long MOD = 1000000007;<br><br>class KingdomAndCities<br>{<br>public:<br>  long long choose[2500][2500];<br>  long long f[51][51];<br>  long long g[51][51];<br>  long long f2(int a, int b)<br>  {<br>    return (a * b * a * b + a * b * (choose[a][2] + choose[b][2]) * 2) % MOD;<br>  }<br>  long long f3(int a, int b, int c)<br>  {<br>    return (a * b * a * c + b * a * b * c + c * a * c * b) * 2 % MOD;<br>  }<br>  int howMany(int N, int M, int K)<br>  {<br>    if (K &lt; N - 1 || K &gt; N * (N - 1) / 2)<br>      return 0;<br>    if (N &lt;= 2)<br>      return (M == 0) ? 1 : 0;<br>    memset(choose, 0, sizeof(choose));<br>    for (int n = 0; n &lt; 2500; ++n)<br>    {<br>      choose[n][0] = 1;<br>      choose[n][n] = 1;<br>      for (int m = 1; m &lt;= n - 1; ++m)<br>        choose[n][m] = (choose[n - 1][m - 1] + choose[n - 1][m]) % MOD;<br>    }<br>    memset(g, 0, sizeof(g));<br>    for (int n = 1; n &lt;= N; ++n)<br>      for (int k = 0; k &lt;= K; ++k)<br>      {<br>        g[n][k] = choose[choose[n][2]][k];<br>        f[n][k] = g[n][k];<br>        for (int m = 1; m &lt; n; ++m)<br>          for (int l = 0; l &lt;= k; ++l)<br>            f[n][k] -= f[m][l] * g[n - m][k - l] % MOD * choose[n - 1][m - 1] % MOD;<br>        f[n][k] = (f[n][k] % MOD + MOD) % MOD;<br>      }<br>    if (M == 0)<br>      return f[N][K];<br>    else if (M == 1)<br>    {<br>      if (K &lt; 2)<br>        return 0;<br>      long long results = f[N - 1][K - 2] * choose[N - 1][2] % MOD;<br>      for (int n = 1; n &lt; N - 1; ++n)<br>        for (int k = 0; k &lt;= K - 2; ++k)<br>          results += f[n][k] * f[N - 1 - n][K - 2 - k] % MOD * n * (N - 1 - n) % MOD * choose[N - 2][n - 1] % MOD;<br>      return results % MOD;<br>    }<br>    else<br>    {<br>      if (K &lt; 3)<br>        return 0;<br>      long long results = f[N - 2][K - 3] * (N - 2) * (N - 2) % MOD;<br>      for (int n = 1; n &lt; N - 2; ++n)<br>        for (int k = 0; k &lt;= K - 3; ++k)<br>          results += f[n][k] * f[N - 2 - n][K - 3 - k] % MOD * n * (N - 2 - n) * 2 % MOD * choose[N - 3][n - 1] % MOD;<br>      if (K &gt;= 4)<br>      {<br>        results += f[N - 2][K - 4] * choose[N - 2][2] % MOD * choose[N - 2][2] % MOD;<br>        for (int n = 1; n &lt; N - 2; ++n)<br>          for (int k = 0; k &lt;= K - 4; ++k)<br>            results += f[n][k] * f[N - 2 - n][K - 4 - k] % MOD * f2(n, N - 2 - n) % MOD * choose[N - 3][n - 1] % MOD;<br>        for (int n = 1; n &lt; N - 2; ++n)<br>          for (int k = 0; k &lt;= K - 4; ++k)<br>            for (int n2 = 1; n + n2 &lt; N - 2; ++n2)<br>              for (int k2 = 0; k + k2 &lt;= K - 4; ++k2)<br>                results += f[n][k] * f[n2][k2] % MOD * f[N - 2 - n - n2][K - 4 - k - k2] % MOD * f3(n, n2, N - 2 - n - n2) % MOD * choose[N - 3][n - 1] % MOD * choose[N - 3 - n][n2 - 1] % MOD;<br>      }<br>      return results % MOD;<br>    }<br>  }<br>};<br></td>