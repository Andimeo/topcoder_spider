<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;vector&gt;<br>#include &lt;list&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;deque&gt;<br>#include &lt;stack&gt;<br>#include &lt;bitset&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;functional&gt;<br>#include &lt;numeric&gt;<br>#include &lt;utility&gt;<br>#include &lt;sstream&gt;<br>#include &lt;iostream&gt;<br>#include &lt;iomanip&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;ctime&gt;<br> <br>using namespace std;<br> <br>class ConversionMachine {<br>public:<br>  int countAll(string, string, vector &lt;int&gt;, int);<br>};<br> <br>const int md = 1000000007;<br> <br>int a[99][99], b[99][99], c[99][99];<br>int w[99][99][99];<br> <br>int ConversionMachine::countAll(string word1, string word2, vector &lt;int&gt; costs, int maxCost) {<br>  int n = word1.length(), i, j, k, k0 = 0, k1 = 0, k2 = 0;<br>  for (i=0;i&lt;n;i++) {<br>    int z = 0;<br>    while (word1[i] != word2[i]) {<br>      maxCost -= costs[word1[i]-'a'];<br>      if (maxCost &lt; 0) return 0;<br>      z++;<br>      word1[i]++;<br>      if (word1[i] == 'd') word1[i] = 'a';<br>    }<br>    if (z == 0) k0++;<br>    if (z == 1) k1++;<br>    if (z == 2) k2++;<br>  }<br>  int z0, z1, z2, t = 0;<br>  for (z0=0;z0&lt;=n;z0++)<br>    for (z1=0;z0+z1&lt;=n;z1++) {<br>      z2 = n-z0-z1;<br>      w[z0][z1][z2] = t++;<br>    }<br>  memset(a,0,sizeof(a));<br>  for (z0=0;z0&lt;=n;z0++)<br>    for (z1=0;z0+z1&lt;=n;z1++) {<br>      z2 = n-z0-z1;<br>      int q = w[z0][z1][z2];<br>      if (z0 &gt; 0) a[q][w[z0-1][z1][z2+1]] = z0;<br>      if (z1 &gt; 0) a[q][w[z0+1][z1-1][z2]] = z1;<br>      if (z2 &gt; 0) a[q][w[z0][z1+1][z2-1]] = z2;<br>      if (z1+z2 == 0) a[q][t] = 1;<br>    }<br>  a[t][t] = 1;<br>  t++;<br>  memset(b,0,sizeof(b));<br>  for (i=0;i&lt;t;i++)<br>    for (j=0;j&lt;t;j++) b[i][j] = (i == j);<br>  long long tot = costs[0]; tot += costs[1]; tot += costs[2];<br>  int pw = k1+2*k2+3*(maxCost/tot)+1, step = 1 &lt;&lt; 30;<br>  while (step &gt; 0) {<br>    for (i=0;i&lt;t;i++)<br>      for (j=0;j&lt;t;j++) {<br>        c[i][j] = 0;<br>        for (k=0;k&lt;t;k++) c[i][j] = (c[i][j]+(long long)b[i][k]*b[k][j]) % md;<br>      }<br>    for (i=0;i&lt;t;i++)<br>      for (j=0;j&lt;t;j++) b[i][j] = c[i][j];<br>    if (step &amp; pw) {<br>      for (i=0;i&lt;t;i++)<br>        for (j=0;j&lt;t;j++) {<br>          c[i][j] = 0;<br>          for (k=0;k&lt;t;k++) c[i][j] = (c[i][j]+(long long)b[i][k]*a[k][j]) % md;<br>        }<br>      for (i=0;i&lt;t;i++)<br>        for (j=0;j&lt;t;j++) b[i][j] = c[i][j];<br>    }<br>    step &gt;&gt;= 1;<br>  }<br>  return b[w[k0][k1][k2]][t-1];<br>}<br> <br> <br>//Powered by [KawigiEdit] 2.0!<br></td>