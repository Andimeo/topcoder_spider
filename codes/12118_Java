<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>import static java.lang.Math.*;<br>import static java.util.Arrays.*;<br> <br>public class ConversionMachine {<br>  <br>  long M = 1000000007;<br>  <br>  public int countAll(String word1, String word2, int[] costs, int maxCost) {<br>    int n = word1.length();<br>    int[] from = new int[n], to = new int[n];<br>    for (int i = 0; i &lt; n; i++) {<br>      from[i] = word1.charAt(i) - 'a';<br>      to[i] = word2.charAt(i) - 'a';<br>    }<br>    long need = 0, count = 0;<br>    int s0 = 0, s1 = 0;<br>    for (int i = 0; i &lt; n; i++) {<br>      int f = from[i];<br>      if ((to[i] + 3 - f) % 3 == 0) s0++;<br>      if ((to[i] + 3 - f) % 3 == 2) s1++;<br>      while (f != to[i]) {<br>        need += costs[f];<br>        f = (f + 1) % 3;<br>        count++;<br>      }<br>    }<br>    long loop = 0;<br>    for (int i = 0; i &lt; 3; i++) loop += costs[i];<br>    if (need &gt; maxCost) return 0;<br>    long max = (maxCost - need) / loop * 3 + count;<br>    int m = 0;<br>    int[][] id = new int[n + 1][n + 1];<br>    for (int i0 = 0; i0 &lt;= n; i0++) for (int i1 = 0; i0 + i1 &lt;= n; i1++) id[i0][i1] = m++;<br>    long[][] A = new long[m + 1][m + 1];<br>    for (int f0 = 0; f0 &lt;= n; f0++) {<br>      for (int f1 = 0; f0 + f1 &lt;= n; f1++) {<br>        int f2 = n - f0 - f1;<br>        if (f0 &gt; 0) A[id[f0 - 1][f1 + 1]][id[f0][f1]] += f0;<br>        if (f1 &gt; 0) A[id[f0][f1 - 1]][id[f0][f1]] += f1;<br>        if (f2 &gt; 0) A[id[f0 + 1][f1]][id[f0][f1]] += f2;<br>      }<br>    }<br>    A[m][id[n][0]] = 1;<br>    A[m][m] = 1;<br>    A = pow(A, max + 1);<br>    int s = id[s0][s1];<br>    return (int)(A[m][s] % M);<br>  }<br>  <br>  long[][] mul(long[][] a, long[][] b) {<br>    int n = a.length;<br>    long[][] c = new long[n][n];<br>    for (int i = 0; i &lt; n; i++) {<br>      for (int k = 0; k &lt; n; k++) {<br>        for (int j = 0; j &lt; n; j++) {<br>          c[i][j] = (c[i][j] + a[i][k] * b[k][j]) % M;<br>        }<br>      }<br>    }<br>    return c;<br>  }<br>  long[][] pow(long[][] a, long b) {<br>    int n = a.length;<br>    long[][] c = new long[n][n];<br>    for (int i = 0; i &lt; n; i++) c[i][i] = 1;<br>    while (b &gt; 0) {<br>      if ((b &amp; 1) != 0) c = mul(c, a);<br>      a = mul(a, a);<br>      b &gt;&gt;&gt;= 1;<br>    }<br>    return c;<br>  }<br>  <br>  void debug(Object...os) {<br>    System.err.println(deepToString(os));<br>  }<br>  <br>}<br></td>