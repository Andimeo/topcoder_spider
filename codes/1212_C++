<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;algorithm&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cctype&gt;<br>#include &lt;cmath&gt;<br>#include &lt;iostream&gt;<br>#include &lt;sstream&gt;<br>#include &lt;string&gt;<br>#include &lt;utility&gt;<br>#include &lt;vector&gt;<br>using namespace std;<br>#define REP(i,n) for(int i=0;i&lt;(n);++i)<br>#define FOR(i,a,b) for(int i=(a);i&lt;=(b);++i)<br>#define FORD(i,a,b) for(int i=(a);i&gt;=(b);--i)<br>#define VAR(a,b) typeof(b) a=(b)<br>#define FOREACH(it,c) for(VAR(it,(c).begin());it!=(c).end();++it)<br>#define ALL(f,w) ({ bool _ok=true; f _ok=_ok &amp;&amp; (w); _ok; })<br>#define EXISTS(f,w) (!(ALL(f,!(w))))<br><br>typedef long long LL; typedef long double ld;<br>typedef vector&lt;int&gt; VI; typedef vector&lt;string&gt; VS;<br>const int INF = 1000000000; const LL INFLL = LL(INF)*LL(INF);<br>template&lt;class T&gt; inline int size(const T&amp;c) { return c.size(); }<br>template&lt;class T&gt; vector&lt;T&gt; makeV(T a) { vector&lt;T&gt; v(1); v[0]=a; return v; }<br>template&lt;class T&gt; vector&lt;T&gt; makeV(T a,T b) { vector&lt;T&gt; v(2);v[0]=a;v[1]=b;return v; }<br>template&lt;class T&gt; vector&lt;T&gt; makeV(T a,T b,T c) {<br>  vector&lt;T&gt; v(3);v[0]=a;v[1]=b;v[2]=c;return v;<br>}<br>int s2i(string s) { istringstream i(s); int x; i&gt;&gt;x; return x; }<br>LL s2ll(string s) { istringstream i(s); LL x; i&gt;&gt;x; return x; }<br>template&lt;class T&gt; string i2s(T x) { ostringstream o; o&lt;&lt;x; return o.str(); }<br>VS split(string s,string del=" ") {<br>  s+=del[0]; string w = ""; VS res;<br>  FOREACH(it,s) {<br>    if(find(del.begin(),del.end(),*it)==del.end()) w+=*it;<br>    else if(w!="") { res.push_back(w); w=""; }<br>  }<br>  return res;<br>}<br>VI s2vi(string s,string del=" ") {<br>  VS v = split(s,del); VI res;<br>  FOREACH(it,v) res.push_back(s2i(*it));<br>  return res;<br>}<br><br>//////////////////////////////////////////////////////////////////////<br><br>struct ShipBoxes {<br>  // MAIN<br>  int bestCost(vector &lt;int&gt; box1, vector &lt;int&gt; box2) {<br>    sort(box1.begin(),box1.end());<br>    sort(box2.begin(),box2.end());<br>    int result = 2*INF;<br>    do {<br>      do {<br>        int a = max(box1[0],box2[0]);<br>        int b = max(box1[1],box2[1]);<br>        int c = box1[2]+box2[2];<br>        int d = a*b, e = b*c, f = c*a;<br>        int v = d+e+f+min(min(d,e),f);<br>        v *= 2;<br>        result = min(result,v);<br>      } while(next_permutation(box2.begin(),box2.end()));<br>    } while(next_permutation(box1.begin(),box1.end()));<br>    return result;<br>  }<br>};<br><br><br><br>// Powered by FileEdit<br></td>