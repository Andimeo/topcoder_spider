<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;cstdio&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cmath&gt;<br>#include &lt;climits&gt;<br>#include &lt;cfloat&gt;<br>#include &lt;map&gt;<br>#include &lt;utility&gt;<br>#include &lt;set&gt;<br>#include &lt;iostream&gt;<br>#include &lt;memory&gt;<br>#include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;functional&gt;<br>#include &lt;sstream&gt;<br>#include &lt;complex&gt;<br>#include &lt;stack&gt;<br>#include &lt;queue&gt;<br> <br>#define REP(i, n) for(int i=0; i&lt;(int)n; ++i)<br>#define FOR(i, c) for(__typeof((c).begin())i=(c).begin();i!=(c).end();++i)<br>#define ALL(c) (c).begin(),(c).end()<br> <br>using namespace std;<br> <br>typedef long long lli;<br> <br>static const double EPS = 1e-5;<br> <br>const int N = 50 + 1;<br>const int A = 0, B = 1, C = 2, D = 3;<br>const int LAST = 4, FIRST = 4;<br> <br>lli memo[FIRST][LAST][N][N][N];<br> <br>const lli mod = 1000000007;<br> <br>lli rec(int first, int last, int a, int b, int c)<br>{<br>  lli &amp;ret = memo[first][last][a][b][c];<br>  if (ret != -1) return ret;<br>  if (a == 0 &amp;&amp; b == 0 &amp;&amp; c == 0) {<br>    return last != first;<br>  }<br> <br>  lli sum = 0;<br> <br>  if (first == D) {<br>    if (a) sum = (sum + rec(A, A, a - 1, b, c)) % mod;<br>    if (b) sum = (sum + rec(B, B, a, b - 1, c)) % mod;<br>    if (c) sum = (sum + rec(C, C, a, b, c - 1)) % mod;<br>  } else {<br>    if (last == A) {<br>      if (b) sum = (sum + rec(first, B, a, b - 1, c)) % mod;<br>      if (c) sum = (sum + rec(first, C, a, b, c - 1)) % mod;<br>    }<br>    if (last == B) {<br>      if (a) sum = (sum + rec(first, A, a - 1, b, c)) % mod;<br>      if (c) sum = (sum + rec(first, C, a, b, c - 1)) % mod;<br>    }<br>    if (last == C) {<br>      if (a) sum = (sum + rec(first, A, a - 1, b, c)) % mod;<br>      if (b) sum = (sum + rec(first, B, a, b - 1, c)) % mod;<br>    }<br>  }<br> <br>  return ret = sum;<br>}<br> <br>class ColorfulCupcakesDivTwo {<br>public:<br>  int countArrangements(string C)<br>  {<br>    int a = count(C.begin(), C.end(), 'A');<br>    int b = count(C.begin(), C.end(), 'B');<br>    int c = count(C.begin(), C.end(), 'C');<br> <br>    fill(&amp;memo[0][0][0][0][0], &amp;memo[FIRST][0][0][0][0], -1);<br>    return rec(D, D, a, b, c) % mod;<br>  }<br> <br> <br> <br>};<br> <br> <br> <br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003]<br>// Powered by CodeProcessor<br></td>