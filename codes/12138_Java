<td class="problemText" colspan="8" valign="middle" align="left">
            public class ColorfulCupcakesDivTwo {<br>    int As;<br>    int Bs;<br>    int Cs;<br>    int mod;<br>    <br>    boolean[][][][][] seen;<br>    int[][][][][] results;<br>  public int countArrangements(String cupcakes) {<br>    As = 0;<br>    Bs = 0;<br>    Cs = 0;<br>    for(int i = 0; i &lt; cupcakes.length(); i++) {<br>      if(cupcakes.charAt(i) == 'A') {<br>        As++;<br>      } else if(cupcakes.charAt(i) == 'B') {<br>        Bs++;<br>      } else if(cupcakes.charAt(i) == 'C') {<br>        Cs++;<br>      }<br>    }<br>    <br>    seen = new boolean[As + 1][Bs + 1][Cs + 1][3][3];<br>    results = new int[As + 1][Bs + 1][Cs + 1][3][3];<br>  <br>    mod = 1000000007;<br>    <br>    int result = 0;<br>    if(As != 0) {<br>      result += Solve(1, 0, 0, 0, 0);<br>    }<br>    result %= mod;<br>    if(Bs != 0) {<br>      result += Solve(0, 1, 0, 1, 1);<br>    }<br>    result %= mod;<br>    if(Cs != 0) {<br>      result += Solve(0, 0, 1, 2, 2);<br>    }<br>    result %= mod;<br>    return result;<br>  }<br>  <br>  public int Solve(int A, int B, int C, int first, int last) {<br>    if(A + B + C == As + Bs + Cs) {<br>      if(first != last) {<br>        return 1;<br>      }<br>      return 0;<br>    }<br>    <br>    if(seen[A][B][C][first][last]) {<br>      return results[A][B][C][first][last];<br>    }<br>    <br>    int result = 0;<br>    if(last == 0) {<br>      if(B &lt; Bs) {<br>        result += Solve(A, B + 1, C, first, 1);<br>      }<br>      result %= mod;<br>      <br>      if(C &lt; Cs) {<br>        result += Solve(A, B, C + 1, first, 2);<br>      }<br>      result %= mod;<br>    } else if(last == 1) {<br>      if(A &lt; As) {<br>        result += Solve(A + 1, B, C, first, 0);<br>      }<br>      result %= mod;<br>      if(C &lt; Cs) {<br>        result += Solve(A, B, C + 1, first, 2);<br>      }<br>      result %= mod;<br>    } else if(last == 2) {<br>      if(A &lt; As) {<br>        result += Solve(A + 1, B, C, first, 0);<br>      }<br>      result %= mod;<br>      if(B &lt; Bs) {<br>        result += Solve(A, B + 1, C, first, 1);<br>      }<br>      result %= mod;<br>    }<br>    <br>    seen[A][B][C][first][last] = true;<br>    results[A][B][C][first][last] = result;<br>    <br>    return result;<br>  }<br>}<br></td>