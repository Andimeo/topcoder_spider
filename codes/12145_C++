<td class="problemText" colspan="8" valign="middle" align="left">
            #include&lt;vector&gt;<br>#include&lt;string&gt;<br>#include&lt;algorithm&gt;<br>#include&lt;cmath&gt;<br>#include&lt;utility&gt;<br>#include&lt;set&gt;<br>#include&lt;queue&gt;<br>#include&lt;map&gt;<br>#include&lt;cstdlib&gt;<br>#include&lt;cstdio&gt;<br>#include&lt;cstring&gt;<br>#include&lt;iostream&gt;<br>#include&lt;sstream&gt;<br>#include&lt;climits&gt;<br>#include&lt;sys/time.h&gt;<br>using namespace std;<br><br>#define REP(i,a,b) for(i=a;i&lt;b;i++)<br>#define rep(i,n) REP(i,0,n)<br><br>#define ll long long<br><br>int getPrime(int n,int p[]){int i,j,n2=n/2;rep(i,n2)p[i]=1;for(i=3;i*i&lt;n;i+=2)if(p[i&gt;&gt;1])for(j=(i*i)&gt;&gt;1;j&lt;n2;j+=i)p[j]=0;j=1;p[0]=2;REP(i,1,n2)if(p[i])p[j++]=i*2+1;return j;}<br>int p[1100000], ps; ll p2[1100000], p3[1100000];<br>int bef[1100000];<br><br>ll res, n;<br><br>void solve(int depth, ll now){<br>  ll k;<br><br>/*  printf("%d (%d) %lld\n",depth,p[depth],now);*/<br><br>  if(depth == ps){ /*puts("PLUS");*/ res++; return; }<br><br>  if(now * p2[depth] &gt; n || now * (double)p2[depth] &gt; n + 100000){<br>    k = n / now;<br>    if(k &gt; 1000010) k = 1000010;<br>/*    printf("bef depth %d %d\n",bef[k],depth);*/<br>    if(bef[k] &gt;= depth){<br>      res += bef[k] - depth + 1;<br>/*      printf("ADD %d\n",bef[k] - depth + 1);*/<br>    }<br>    res++; /*puts("PLUS");*/<br>    return;<br>  }<br><br>  solve(depth+1, now);<br>  <br>  now *= p[depth];<br>  for(;;){<br>    solve(depth+1, now);<br>    if(now * p2[depth] &gt; n || now * (double)p2[depth] &gt; n + 100000) break;<br>    now *= p2[depth];<br>  }<br>}<br><br>class HolyNumbers {<br>public:<br>ll count(ll upTo, int maximalPrime) {<br>  int i,j,k;<br><br>  ps = getPrime(maximalPrime + 10, p);<br>  while(ps &gt; 0 &amp;&amp; p[ps-1] &gt; maximalPrime) ps--;<br><br>  rep(i,ps) p2[i] = p[i] * (ll)p[i];<br>  rep(i,ps) p3[i] = p2[i] * p[i];<br><br>  rep(i,1001000) bef[i] = -1;<br>  rep(i,ps) bef[p[i]] = i;<br>  REP(i,1,1001000) if(bef[i]==-1) bef[i] = bef[i-1];<br><br>  n = upTo;<br>  res = 0;<br><br>  solve(0, 1);<br><br>  return res;<br>}<br><br><br>};<br><br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003]<br>// Powered by CodeProcessor<br></td>