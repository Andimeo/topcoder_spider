<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections;<br>using System.Collections.Generic;<br>using System.Text;<br><br>public class MapGuessing {<br>    public long countPatterns(string goal, string[] code)<br>    {<br>        string c = "";<br>        foreach (string s in code)<br>        {<br>            c += s;<br>        }<br>        int len = goal.Length;<br>        Dictionary&lt;long, bool&gt; dic = new Dictionary&lt;long, bool&gt;();<br>        List&lt;long&gt; l = new List&lt;long&gt;();<br>        long bit = (1L &lt;&lt; len) - 1;<br>        for (int i = 0; i &lt; len; i++)<br>        {<br>            List&lt;long&gt; cl = new List&lt;long&gt;();<br>            cl.Add(0);<br>            long changed = 0;<br>            long correct = 0;<br>            int now = i;<br>            bool ok = true;<br>            for (int j = 0; j &lt; c.Length; j++)<br>            {<br>                if (c[j] == '&gt;') now++;<br>                else if(c[j] == '&lt;') now--;<br>                else<br>                {<br>                    changed |= (1L &lt;&lt; now);<br>                    if (c[j] != goal[now]) correct |= (1L &lt;&lt; now);<br>                    else correct &amp;= ~(1L &lt;&lt; now);<br>                }<br>                if (now &lt; 0 || now &gt;= len)<br>                {<br>                    ok = false;<br>                    break;<br>                }<br>                if (correct == 0)<br>                {<br>                    cl.Add(changed);<br>                    <br>                }<br>            }<br>            if (ok)<br>            {<br>                foreach (long item in cl)<br>                {<br>                    if (!dic.ContainsKey(item))<br>                    {<br>                        dic[item] = true;<br>                        l.Add(item);<br>                    }<br>                }<br>            }<br>        }<br><br>        long ret = 0;<br>        List&lt;long&gt; ll = new List&lt;long&gt;();<br>        foreach (long item in l)<br>        {<br>            bool flag = true;<br>            foreach (long item2 in l)<br>            {<br>                if (item == item2) continue;<br>                if ((item &amp; item2) == item)<br>                {<br>                    flag = false;<br>                    break;<br>                }<br>            }<br>            if (flag) ll.Add(item);<br>        }<br>        Dictionary&lt;long, int&gt; dicplus = new Dictionary&lt;long, int&gt;();<br>        Dictionary&lt;long, int&gt; dicminus = new Dictionary&lt;long, int&gt;();<br>        foreach (long item in ll)<br>        {<br>            //Console.WriteLine("num:" + item);<br>            Dictionary&lt;long, int&gt; ndicplus = new Dictionary&lt;long, int&gt;();<br>            Dictionary&lt;long, int&gt; ndicminus = new Dictionary&lt;long, int&gt;();<br>            foreach (KeyValuePair&lt;long, int&gt; a in dicplus)<br>            {<br>                ndicplus[a.Key] = a.Value;<br>            }<br>            foreach (KeyValuePair&lt;long, int&gt; a in dicminus)<br>            {<br>                ndicminus[a.Key] = a.Value;<br>            }<br>            if (!ndicplus.ContainsKey(item)) ndicplus[item] = 0;<br>            ndicplus[item] += 1;<br>            foreach (KeyValuePair&lt;long, int&gt; a in dicplus)<br>            {<br>                long next = a.Key &amp; item;<br>                if (!ndicminus.ContainsKey(next)) ndicminus[next] = 0;<br>                ndicminus[next] += a.Value;<br>            }<br>            foreach (KeyValuePair&lt;long, int&gt; a in dicminus)<br>            {<br>                long next = a.Key &amp; item;<br>                if (!ndicplus.ContainsKey(next)) ndicplus[next] = 0;<br>                ndicplus[next] += a.Value;<br>            }<br>            dicplus = ndicplus;<br>            dicminus = ndicminus;<br>        }<br><br>        foreach (KeyValuePair&lt;long, int&gt; a in dicplus)<br>        {<br>            //Console.WriteLine("p: " + a.Key + " " + a.Value);<br>            ret += (1L &lt;&lt; bitCount(a.Key)) * a.Value;<br>        }<br>        foreach (KeyValuePair&lt;long, int&gt; a in dicminus)<br>        {<br>            //Console.WriteLine("m: " + a.Key + " " + a.Value);<br>            ret -= (1L &lt;&lt; bitCount(a.Key)) * a.Value;<br>        }<br><br>        return ret;<br>    }<br><br>    int bitCount(long x)<br>    {<br>        x = (x &amp; 0x5555555555555555) + (x &gt;&gt; 1 &amp; 0x5555555555555555);<br>        x = (x &amp; 0x3333333333333333) + (x &gt;&gt; 2 &amp; 0x3333333333333333);<br>        x = (x &amp; 0x0f0f0f0f0f0f0f0f) + (x &gt;&gt; 4 &amp; 0x0f0f0f0f0f0f0f0f);<br>        x = (x &amp; 0x00ff00ff00ff00ff) + (x &gt;&gt; 8 &amp; 0x00ff00ff00ff00ff);<br>        x = (x &amp; 0x0000ffff0000ffff) + (x &gt;&gt; 16 &amp; 0x0000ffff0000ffff);<br>        return (int)((x &amp; 0x00000000ffffffff) + (x &gt;&gt; 32 &amp; 0x00000000ffffffff));<br>    }<br><br><br><br><br><br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003] [modified for C# by Petr]<br>// Powered by CodeProcessor<br></td>