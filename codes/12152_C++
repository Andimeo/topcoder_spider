<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;stdio.h&gt;<br>#include &lt;math.h&gt;<br>#include &lt;string.h&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;vector&gt;<br>#include &lt;string&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;list&gt;<br>#include &lt;queue&gt;<br>#include &lt;stack&gt;<br><br>#define vc vector<br>#define pr pair<br>#define mp make_pair<br>#define ft first<br>#define sd second<br><br><br>typedef long long LL;<br>#define SZ(a) ((int)(a).size())<br>#define pi 3.1415926535897932384626433832795<br><br>using namespace std;<br><br>class MapGuessing {<br>public:<br>  bool chk[36];<br>  char be[36];<br>  LL getval(string&amp; goal, string&amp; C, int pos) {<br>    for (int i=0;i&lt;SZ(goal);i++) {<br>      chk[i] = false;<br>    }<br>    <br>    LL res = 0;<br>    for (int i=0;i&lt;SZ(C);i++) {<br>      if (C[i] == '0' || C[i] == '1') {<br>        be[pos] = C[i];<br>        chk[pos] = true;<br>      }<br>      if (C[i] == '&lt;') pos --;<br>      if (C[i] == '&gt;') pos ++;<br>      <br>      bool okay = true;<br>      LL now = 0;<br>      for (int j=0;j&lt;SZ(goal);j++) {<br>        if (chk[j] &amp;&amp; be[j] != goal[j]) okay = false;<br>        if (chk[j]) now = now + (1ll &lt;&lt; (long long)j);<br>      }<br>      if (okay) res = now;<br>    }<br>    return res;<br>  }<br>  <br>  LL rmain[37];<br>  LL Comb[100][100];<br>  LL get(LL bt) {<br>    LL res = 1;<br>    while( bt &gt; 0 ){ <br>      if (bt &amp; 1) res *= 2;<br>      bt = bt / 2;<br>    }<br>    return res;<br>  }<br>  LL countPatterns(string goal, vector &lt;string&gt; code) {<br>    Comb[0][0] = 1;<br>    for (int i=1;i&lt;100;i++) {<br>      Comb[i][0] = 1;<br>      for (int j=1;j&lt;100;j++) {<br>        Comb[i][j] = Comb[i-1][j-1] + Comb[i-1][j];<br>      }<br>    }<br>    string C = "";<br>    for (int i=0;i&lt;SZ(code);i++) C += code[i];<br>    int pos = 0;<br>    int lpos, rpos;<br>    lpos = rpos = 0;<br>    for (int i=0;i&lt;SZ(C);i++) {<br>      if (C[i] == '&lt;') {<br>        pos --;<br>      } else if (C[i] == '&gt;') {<br>        pos ++;<br>      }<br>      if (pos &lt; lpos) lpos = pos;<br>      if (pos &gt; rpos) rpos = pos;<br>    }<br>    lpos = -lpos;<br>    int vol = rpos + lpos;<br>    <br>    vector&lt;LL&gt; num;<br>    for (int i=lpos;i&lt;SZ(goal)-rpos;i++) {<br>      num.push_back( getval(goal, C, i) );<br>    }<br>    <br>    if (SZ(num) == 0) return 0ll;<br>    <br>    for (int i=1;i&lt;=SZ(goal);i++) {<br>      rmain[i] = Comb[ SZ(goal) ][i];<br>    }<br>    <br>    LL sol = 0;<br>    for (int i=0;i&lt;SZ(num);i++) {<br>      int vv = min( SZ(num) - i - 1, vol );<br>      for (int j=0;j&lt;(1&lt;&lt;vv);j++) {<br>        int one = 1;<br>        LL bt = num[i];<br>        for (int k=0;k&lt;vv;k++) {<br>          if (j &amp; (1&lt;&lt;k)) {<br>            one ++; bt &amp;= num[i+1 + k];<br>          }<br>        }<br>        rmain[one] --;<br>        LL gbt = get(bt);<br>        if (one % 2) sol += gbt;<br>        else sol -= gbt;<br>      }<br>    }<br>    for (int i=1;i&lt;=SZ(goal);i++) {<br>      if (i % 2) sol += rmain[i];<br>      else sol -= rmain[i];<br>    }<br>    return sol;<br>  }<br>};<br></td>