<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.List;<br>import java.util.Arrays;<br>import java.util.ArrayList;<br>import java.util.Set;<br>import java.util.Comparator;<br>import java.util.Collection;<br>import java.util.HashSet;<br> <br>/**<br> * Built using CHelper plug-in<br> * Actual solution is at the top<br> * @author Egor Kulikov (egor@egork.net)<br> */<br>public class MapGuessing {<br>  public long countPatterns(String goal, String[] code) {<br>    char[] program = StringUtils.unite(code).toCharArray();<br>    Set&lt;String&gt; variants = new HashSet&lt;String&gt;();<br>    char[] target = goal.toCharArray();<br>    for (int i = 0; i &lt; target.length; i++) {<br>      String result = execute(target, program, i);<br>      if (result != null)<br>        variants.add(result);<br>    }<br>    if (variants.size() &gt; target.length / 2) {<br>      long[] masks = new long[variants.size() * (1 &lt;&lt; (target.length - variants.size() + 1))];<br>      int size = 0;<br>      for (String variant : variants) {<br>        long xMask = 0;<br>        long add = 0;<br>        char[] charArray = variant.toCharArray();<br>        for (int i = 0, charArrayLength = charArray.length; i &lt; charArrayLength; i++) {<br>          char c = charArray[i];<br>          if (c == 'x')<br>            xMask += 1L &lt;&lt; i;<br>          else if (c == '1')<br>            add += 1L &lt;&lt; i;<br>        }<br>        long all = xMask;<br>        masks[size++] = add + xMask;<br>        do {<br>          xMask = (xMask - 1) &amp; all;<br>          masks[size++] = add + xMask;<br>        } while (xMask != 0);<br>      }<br>      Arrays.sort(masks, 0, size);<br>      long answer = 0;<br>      if (size != 0)<br>        answer++;<br>      for (int i = 1; i &lt; size; i++) {<br>        if (masks[i] != masks[i - 1])<br>          answer++;<br>      }<br>      return answer;<br>    }<br>    long answer = 0;<br>    String[] array = variants.toArray(new String[variants.size()]);<br>    int total = 1 &lt;&lt; array.length;<br>    for (int i = 1; i &lt; total; i++) {<br>      long current = 1;<br>      for (int j = 0; j &lt; goal.length(); j++) {<br>        int digit = -1;<br>        for (int k = 0; k &lt; array.length; k++) {<br>          if ((i &gt;&gt; k &amp; 1) == 1) {<br>            if (array[k].charAt(j) == 'x')<br>              continue;<br>            if (digit == -1 || array[k].charAt(j) - '0' == digit)<br>              digit = array[k].charAt(j) - '0';<br>            else<br>              digit = -2;<br>          }<br>        }<br>        if (digit == -2)<br>          current = 0;<br>        if (digit == -1)<br>          current *= 2;<br>      }<br>      if (Integer.bitCount(i) % 2 == 1)<br>        answer += current;<br>      else<br>        answer -= current;<br>    }<br>    return answer;<br>  }<br> <br>  private String execute(char[] target, char[] program, int position) {<br>    char[] mask = new char[target.length];<br>    char[] lastValidMask = new char[target.length];<br>    for (char c : program) {<br>      if (c == '&lt;') {<br>        position--;<br>        if (position &lt; 0)<br>          return null;<br>      } else if (c == '&gt;') {<br>        position++;<br>        if (position &gt;= target.length)<br>          return null;<br>      } else if (c == '0')<br>        mask[position] = '0';<br>      else<br>        mask[position] = '1';<br>      boolean good = true;<br>      for (int i = 0; i &lt; target.length; i++) {<br>        if (mask[i] != 0 &amp;&amp; target[i] != mask[i])<br>          good = false;<br>      }<br>      if (good)<br>        System.arraycopy(mask, 0, lastValidMask, 0, target.length);<br>    }<br>    char[] result = new char[target.length];<br>    for (int i = 0; i &lt; target.length; i++) {<br>      if (lastValidMask[i] != 0) {<br>        if (target[i] != lastValidMask[i])<br>          throw new RuntimeException();<br>        result[i] = 'x';<br>      } else<br>        result[i] = target[i];<br>    }<br>    return new String(result);<br>  }<br>}<br> <br>class StringUtils {<br> <br>  public static String unite(String[] array) {<br>    StringBuilder result = new StringBuilder();<br>    for (String s : array) {<br>      result.append(s);<br>    }<br>    return result.toString();<br>  }<br> <br>  }<br></td>