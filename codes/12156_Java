<td class="problemText" colspan="8" valign="middle" align="left">
            import static java.lang.Math.abs;<br>import static java.util.Arrays.sort;<br><br>import java.util.*;<br><br>public class Ear {<br>  public long getCount(String[] redX, String[] blueX, String[] blueY) {<br>    int[] xRed = getInts(concat(redX));<br>    int[] xBlue = getInts(concat(blueX));<br>    int[] yBlue = getInts(concat(blueY));<br>    sort(xRed);<br>    long res = 0;<br>    for (int p = 0; p &lt; xBlue.length; p++) {<br>      for (int q = 0; q &lt; xBlue.length; q++) {<br>        if (yBlue[p] &lt;= yBlue[q]) {<br>          continue;<br>        }<br>        int intersection = getIntersection(xBlue[p], yBlue[p],<br>            xBlue[q], yBlue[q]);<br>        int cnt1 = 0, cnt2 = 0, cnt3 = 0, cnt4 = 0;<br>        if (xBlue[p] &lt; xBlue[q]) {<br>          cnt1 = countLess(xRed, xBlue[p]);<br>          cnt2 = countGreater(xRed, xBlue[q]);<br>          cnt3 = countLess(xRed, xBlue[q]);<br>          cnt4 = countGreater(xRed, xBlue[p] + intersection);<br>        } else {<br>          cnt1 = countGreater(xRed, xBlue[p]);<br>          cnt2 = countLess(xRed, xBlue[q]);<br>          cnt3 = countGreater(xRed, xBlue[q]);<br>          cnt4 = countLess(xRed, xBlue[p] - intersection);<br>        }<br>        cnt2 -= cnt4;<br>        cnt3 -= cnt1;<br>        res += get(cnt1, cnt2, cnt3, cnt4);<br>      }<br>    }<br>    return res;<br>  }<br><br>  static long get(long cnt1, long cnt2, long cnt3, long cnt4) {<br>    long ab = cnt1 * (cnt1 - 1) / 2;<br>    ab += cnt1 * cnt3;<br>    long cd = cnt4 * (cnt4 - 1) / 2;<br>    cd += cnt2 * cnt4;<br>    return ab * cd;<br>  }<br><br>  static int countGreater(int[] array, int val) {<br>    int left = -1, right = array.length;<br>    while (right - left &gt; 1) {<br>      int mid = left + right &gt;&gt; 1;<br>      if (array[mid] &lt;= val) {<br>        left = mid;<br>      } else {<br>        right = mid;<br>      }<br>    }<br>    return array.length - right;<br>  }<br><br>  static int countLess(int[] array, int val) {<br>    int left = -1, right = array.length;<br>    while (right - left &gt; 1) {<br>      int mid = left + right &gt;&gt; 1;<br>      if (array[mid] &lt; val) {<br>        left = mid;<br>      } else {<br>        right = mid;<br>      }<br>    }<br>    return right;<br>  }<br><br>  static int getIntersection(int x1, int y1, int x2, int y2) {<br>    int dx = abs(x1 - x2);<br>    int dy = y1 - y2;<br>    int res = (dx * y1) / dy;<br>    return res;<br>  }<br><br>  static int[] getInts(String s) {<br>    StringTokenizer tok = new StringTokenizer(s);<br>    List&lt;Integer&gt; list = new ArrayList&lt;Integer&gt;();<br>    while (tok.hasMoreTokens()) {<br>      list.add(Integer.parseInt(tok.nextToken()));<br>    }<br>    return toIntArray(list);<br>  }<br><br>  private static int[] toIntArray(List&lt;Integer&gt; list) {<br>    int[] ret = new int[list.size()];<br>    int cnt = 0;<br>    for (int val : list) {<br>      ret[cnt++] = val;<br>    }<br>    return ret;<br>  }<br><br>  static String concat(String[] s) {<br>    StringBuffer sb = new StringBuffer();<br>    for (String ss : s) {<br>      sb.append(ss);<br>    }<br>    return sb.toString();<br>  }<br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by CodeProcessor<br></td>