<td class="problemText" colspan="8" valign="middle" align="left">
            Imports Microsoft.VisualBasic<br>Imports System<br>Imports System.Collections<br>Imports System.Text<br>Imports System.Collections.Generic<br>Imports System.Math<br> <br>Public Class Ear<br>    Public Structure Point<br>        Implements System.IComparable(Of Point)<br>        Public X As Integer, Y As Integer<br>        Public Sub New(ByVal X As Integer, ByVal y As Integer)<br>            Me.X = X<br>            Me.Y = y<br>        End Sub<br>        Public Function Substract(ByVal p As Point) As Point<br>            Return New Point(Me.X - p.X, Me.Y - p.Y)<br>        End Function<br>        Public Function Cross(ByVal p As Point) As Integer<br>            Return Me.X * p.Y - Me.Y * p.X<br>        End Function<br>        Public Function CompareTo(ByVal other As Point) As Integer Implements System.IComparable(Of Point).CompareTo<br>            If Me.X.CompareTo(other.X) &lt;&gt; 0 Then<br>                Return Me.X.CompareTo(other.X)<br>            End If<br>            Return Me.Y.CompareTo(other.Y)<br>        End Function<br>    End Structure<br>    Public Function ccw(ByVal a As Point, ByVal b As Point, ByVal c As Point) As Integer<br>        b = b.Substract(a)<br>        c = c.Substract(a)<br>        If b.Cross(c) &lt; 0 Then<br>            Return True<br>        End If<br>        Return False<br>    End Function<br>    Public red As List(Of Point), blue As List(Of Point)<br> <br>    Public Function getArray(ByVal r As String()) As Integer()<br>        Dim s As String = ""<br>        For Each t As String In r<br>            s += t<br>        Next<br>        Dim a As String() = s.Split(" ")<br>        Dim res As Integer() = New Integer(a.Length - 1) {}<br>        For i As Integer = 0 To a.Length - 1<br>            res(i) = Integer.Parse(a(i))<br>        Next<br>        Return res<br>    End Function<br> <br>    Public Function Solve(ByVal P As Point, ByVal Q As Point) As Long<br>        ' P.x &lt; Q.x[\u12434][\u20206][\u23450]<br>        ' [\u20206][\u23450][\u12364][\u12394][\u12426][\u12383][\u12383][\u12394][\u12356][\u22580][\u21512][\u12399][\u38929][\u24373][\u12387][\u12390][\u36870][\u36578][\u12373][\u12379][\u12424][\u12358]<br>        Dim i as Integer,j as Integer<br>        Dim Right As Long, Left As Long<br>        ' [\u12392][\u12426][\u12354][\u12360][\u12378][\u21491][\u12395][\u12388][\u12356][\u12390][\u35519][\u12409][\u12427]<br>        Dim start As Integer = -1<br>        For i = 0 To red.Count - 1<br>            If ccw(P, red(i), Q) Then<br>                start = i<br>                Exit For<br>            End If<br>        Next<br>        If start = -1 Then<br>            Return 0<br>        End If<br>        Dim qcnt As Integer = 0 ' Q[\u12424][\u12426][\u21491][\u12398][\u28857][\u12391]start[\u12424][\u12426][\u12418][\u24038][\u12395][\u12354][\u12427][\u28857][\u12398][\u25968]<br>        For i = 0 To red.Count - 1<br>            If Q.X &lt; red(i).X AndAlso red(i).X &lt; red(start).X Then<br>                qcnt += 1<br>            End If<br>        Next<br>        For i = start To red.Count - 1<br>            Right += qcnt<br>            qcnt += 1<br>        Next<br>        ' Q[\u12424][\u12426][\u12418][\u24038][\u12395][\u12354][\u12426][\u12289]P[\u12424][\u12426][\u12418][\u21491][\u12395][\u12354][\u12427][\u28857][\u12398][\u25968]<br>        Dim pcnt As Integer = 0<br>        For i = 0 To red.Count - 1<br>            If red(i).X &lt; Q.X AndAlso P.X &lt;= red(i).X Then<br>                pcnt += 1<br>            End If<br>        Next<br>        start = -1<br>        For i = 0 To red.Count - 1<br>            If red(i).X &lt; P.X Then<br>                start = i<br>            End If<br>        Next<br>        If start = -1 Then<br>            Return 0<br>        End If<br>        For i = start To 0 Step -1<br>            Left += pcnt<br> <br>            pcnt += 1<br>        Next<br>        Return Right * Left<br>    End Function<br>    Public Function getCount(ByVal _redX As String(), ByVal _blueX As String(), ByVal _blueY As String()) As Long<br>        Dim i As Integer, j As Integer<br>        Dim redX As Integer(), blueX As Integer(), blueY As Integer()<br>        redX = getArray(_redX)<br>        blueX = getArray(_blueX)<br>        blueY = getArray(_blueY)<br> <br>        red = New List(Of Point)<br>        blue = New List(Of Point)<br>        For i = 0 To redX.Length - 1<br>            red.Add(New Point(redX(i), 0))<br>        Next<br>        For i = 0 To blueX.Length - 1<br>            blue.Add(New Point(blueX(i), blueY(i)))<br>        Next<br>        getCount = 0<br>        red.Sort()<br>        blue.Sort()<br>        Dim revRed As New List(Of Point)<br>        Dim revBlue As New List(Of Point)<br>        Dim tred As List(Of Point)<br>        Dim tblue As List(Of Point)<br>        tred = red<br>        tblue = blue<br>        For i = 0 To red.Count - 1<br>            revRed.Add(New Point(-red(i).X, 0))<br>        Next<br>        revRed.Sort()<br>        For i = 0 To blue.Count - 1<br>            revBlue.Add(New Point(-blue(i).X, blue(i).Y))<br>        Next<br>        'blue[\u12434][\u27770][\u12417][\u12427]<br>        For i = 0 To blue.Count - 1<br>            For j = 0 To blue.Count - 1<br>                If blue(i).Y &gt; blue(j).Y Then<br>                    If blue(i).X &lt; blue(j).X Then<br>                        getCount += Solve(blue(i), blue(j))<br>                    Else<br> <br>                        blue = revBlue<br>                        red = revRed<br>                        getCount += Solve(blue(i), blue(j))<br>                        red = tred<br>                        blue = tblue<br> <br>                    End If<br>                End If<br>            Next<br>        Next<br>    End Function<br>End Class<br></td>