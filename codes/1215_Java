<td class="problemText" colspan="8" valign="middle" align="left">
            //As always, pops deserves props for the plugins<br>import java.util.*;<br>public class StripePainter {<br>  public int minStrokes(String stripes) {<br>    int MX = 999999999;<br>    int [][] mn = new int[stripes.length()][stripes.length()];<br>    for (int i = 0; i &lt; stripes.length(); i++) mn[i][0] = 1;<br>    for (int len = 1; len &lt; stripes.length(); len++) {<br>      for (int start = 0; start &lt; stripes.length() - len; start++) {<br>        if (stripes.charAt(start) != stripes.charAt(start + len)) {<br>          //not same color<br>          mn[start][len] = 1 + Math.min(mn[start][len-1], mn[start+1][len-1]);<br>        } else {<br>          if (len &gt;= 2) mn[start][len] = 1 + mn[start+1][len-2];<br>          else mn[start][len] = 1;<br>        }<br>      }<br>      <br>      //shorten<br>      for (int start = 0; start &lt; stripes.length() - len; start++) {<br>        for (int l2 = 0; l2 &lt; len; l2++) {<br>          if (mn[start][len] &gt; mn[start][l2] + mn[start + l2][len - l2] - 1) {<br>            mn[start][len] = mn[start][l2] + mn[start + l2][len - l2] - 1;<br>          }<br>        }<br>      }<br>    }<br>    return mn[0][stripes.length()-1];<br>  }<br> <br>  // -- Begin Cutting Here of the Main Method $&amp;%*@# --<br>  public static void main(String[] a) {<br>    new StripePainter().runTestCase(0);<br>    new StripePainter().runTestCase(1);<br>    new StripePainter().runTestCase(2);<br>    new StripePainter().runTestCase(3);<br>    new StripePainter().runTestCase(4);<br>  }<br> <br>  public void runTestCase(int nbr) {<br>    switch(nbr) {<br>      case 0 : {<br>        checkOutput(minStrokes("RGBGR"), 3, 0); break;<br>      }<br>      case 1 : {<br>        checkOutput(minStrokes("RGRG"), 3, 1); break;<br>      }<br>      case 2 : {<br>        checkOutput(minStrokes("ABACADA"), 4, 2); break;<br>      }<br>      case 3 : {<br>        checkOutput(minStrokes("AABBCCDDCCBBAABBCCDD"), 7, 3); break;<br>      }<br>      case 4 : {<br>        checkOutput(minStrokes("BECBBDDEEBABDCADEAAEABCACBDBEECDEDEACACCBEDABEDADD"), 26, 4); break;<br>      }<br>    }<br>  }<br>  final void checkOutput(int mine, int them, int nbr) {<br>    boolean success = (mine==them);<br>    StringBuffer out = new StringBuffer();<br>    out.append("Example ");<br>    out.append((nbr+1));<br>    out.append(" - ");<br>    out.append(success ? "success" : "failure   ");<br>    if(!success) {<br>      out.append("Got: ");<br>      out.append(mine);<br>      out.append(", Expected: ");<br>      out.append(them);<br>    }<br>    System.out.println(out);<br>  }<br>  final void checkOutput(long mine, long them, int nbr) {<br>    boolean success = (mine==them);<br>    StringBuffer out = new StringBuffer();<br>    out.append("Example ");<br>    out.append((nbr+1));<br>    out.append(" - ");<br>    out.append(success ? "success" : "failure   ");<br>    if(!success) {<br>      out.append("Got: ");<br>      out.append(mine);<br>      out.append(", Expected: ");<br>      out.append(them);<br>    }<br>    System.out.println(out);<br>  }<br>  final void checkOutput(double mine, double them, int nbr) {<br>    boolean success = (mine==them);<br>    StringBuffer out = new StringBuffer();<br>    out.append("Example ");<br>    out.append((nbr+1));<br>    out.append(" - ");<br>    out.append(success ? "success" : "failure   ");<br>    if(!success) {<br>      out.append("Got: ");<br>      out.append(mine);<br>      out.append(", Expected: ");<br>      out.append(them);<br>    }<br>    System.out.println(out);<br>  }<br>  final void checkOutput(char mine, char them, int nbr) {<br>    boolean success = (mine==them);<br>    StringBuffer out = new StringBuffer();<br>    out.append("Example ");<br>    out.append((nbr+1));<br>    out.append(" - ");<br>    out.append(success ? "success" : "failure   ");<br>    if(!success) {<br>      out.append("Got: ");<br>      out.append("'");<br>      out.append(mine);<br>      out.append("'");<br>      out.append(", Expected: ");<br>      out.append("'");<br>      out.append(them);<br>      out.append("'");<br>    }<br>    System.out.println(out);<br>  }<br>  final void checkOutput(String mine, String them, int nbr) {<br>    boolean success = (mine.equals(them));<br>    StringBuffer out = new StringBuffer();<br>    out.append("Example ");<br>    out.append((nbr+1));<br>    out.append(" - ");<br>    out.append(success ? "success" : "failure   ");<br>    if(!success) {<br>      out.append("Got: ");<br>      out.append("\"");<br>      out.append(mine);<br>      out.append("\"");<br>      out.append(", Expected: ");<br>      out.append("\"");<br>      out.append(them);<br>      out.append("\"");<br>    }<br>    System.out.println(out);<br>  }<br>  final void checkOutput(long[] mine, long[] them, int nbr) {<br>    boolean success = (Arrays.equals(mine, them));<br>    StringBuffer out = new StringBuffer();<br>    out.append("Example ");<br>    out.append((nbr+1));<br>    out.append(" - ");<br>    out.append(success ? "success" : "failure   ");<br>    if(!success) {<br>      out.append("Got: ");<br>      out.append("{");<br>      for(int x=0;x&lt;mine.length;x++) {<br>        out.append(mine[x]);<br>        if(x&lt;mine.length-1) out.append(", ");<br>      }<br>      out.append("}");<br>      out.append(", Expected: ");<br>      out.append("{");<br>      for(int x=0;x&lt;them.length;x++) {<br>        out.append(them[x]);<br>        if(x&lt;them.length-1) out.append(", ");<br>      }<br>      out.append("}");<br>    }<br>    System.out.println(out);<br>  }<br>  final void checkOutput(char[] mine, char[] them, int nbr) {<br>    boolean success = (Arrays.equals(mine, them));<br>    StringBuffer out = new StringBuffer();<br>    out.append("Example ");<br>    out.append((nbr+1));<br>    out.append(" - ");<br>    out.append(success ? "success" : "failure   ");<br>    if(!success) {<br>      out.append("Got: ");<br>      out.append("{");<br>      for(int x=0;x&lt;mine.length;x++) {<br>        out.append(mine[x]);<br>        if(x&lt;mine.length-1) out.append(", ");<br>      }<br>      out.append("}");<br>      out.append(", Expected: ");<br>      out.append("{");<br>      for(int x=0;x&lt;them.length;x++) {<br>        out.append(them[x]);<br>        if(x&lt;them.length-1) out.append(", ");<br>      }<br>      out.append("}");<br>    }<br>    System.out.println(out);<br>  }<br>  final void checkOutput(double[] mine, double[] them, int nbr) {<br>    boolean success = (Arrays.equals(mine, them));<br>    StringBuffer out = new StringBuffer();<br>    out.append("Example ");<br>    out.append((nbr+1));<br>    out.append(" - ");<br>    out.append(success ? "success" : "failure   ");<br>    if(!success) {<br>      out.append("Got: ");<br>      out.append("{");<br>      for(int x=0;x&lt;mine.length;x++) {<br>        out.append(mine[x]);<br>        if(x&lt;mine.length-1) out.append(", ");<br>      }<br>      out.append("}");<br>      out.append(", Expected: ");<br>      out.append("{");<br>      for(int x=0;x&lt;them.length;x++) {<br>        out.append(them[x]);<br>        if(x&lt;them.length-1) out.append(", ");<br>      }<br>      out.append("}");<br>    }<br>    System.out.println(out);<br>  }<br>  final void checkOutput(int[] mine, int[] them, int nbr) {<br>    boolean success = (Arrays.equals(mine, them));<br>    StringBuffer out = new StringBuffer();<br>    out.append("Example ");<br>    out.append((nbr+1));<br>    out.append(" - ");<br>    out.append(success ? "success" : "failure   ");<br>    if(!success) {<br>      out.append("Got: ");<br>      out.append("{");<br>      for(int x=0;x&lt;mine.length;x++) {<br>        out.append(mine[x]);<br>        if(x&lt;mine.length-1) out.append(", ");<br>      }<br>      out.append("}");<br>      out.append(", Expected: ");<br>      out.append("{");<br>      for(int x=0;x&lt;them.length;x++) {<br>        out.append(them[x]);<br>        if(x&lt;them.length-1) out.append(", ");<br>      }<br>      out.append("}");<br>    }<br>    System.out.println(out);<br>  }<br>  final void checkOutput(String[] mine, String[] them, int nbr) {<br>    boolean success = (Arrays.equals(mine, them));<br>    StringBuffer out = new StringBuffer();<br>    out.append("Example ");<br>    out.append((nbr+1));<br>    out.append(" - ");<br>    out.append(success ? "success" : "failure   ");<br>    if(!success) {<br>      out.append("Got: ");<br>      out.append("{");<br>      for(int x=0;x&lt;mine.length;x++) {<br>        out.append(mine[x]);<br>        if(x&lt;mine.length-1) out.append(", ");<br>      }<br>      out.append("}");<br>      out.append(", Expected: ");<br>      out.append("{");<br>      for(int x=0;x&lt;them.length;x++) {<br>        out.append(them[x]);<br>        if(x&lt;them.length-1) out.append(", ");<br>      }<br>      out.append("}");<br>    }<br>    System.out.println(out);<br>  }<br>  // -- End Cutting Here of the Main Method $&amp;%*@# --<br>}<br> <br>// Powered by PopsEdit<br>// Powered by CodeProcessor<br></td>