<td class="problemText" colspan="8" valign="middle" align="left">
            Imports Microsoft.VisualBasic<br>Imports System<br>Imports System.Collections<br>Imports System.Text<br>Imports System.Collections.Generic<br>Imports System.Math<br> <br>Public Class TheBrickTowerMediumDivOne<br>    ''' &lt;param name="k"&gt;[\u20309][\u20491][\u20351][\u12387][\u12383][\u12363]&lt;/param&gt;<br>    ''' &lt;param name="now"&gt;[\u29694][\u22312][\u12398][\u37197][\u21015]&lt;/param&gt;<br>    ''' &lt;param name="Remain"&gt;[\u12398][\u12371][\u12426][\u12418][\u12398]&lt;/param&gt;<br>    Public Function Solve(ByVal k As Integer, ByVal now As Integer(), ByVal Remain As List(Of Integer)) As Boolean<br>        Remain.Sort()<br>        Dim i As Integer<br>        '[\u19979][\u38477]<br>        For i = 0 To k - 2<br>            If now(i) &gt;= now(i + 1) Then<br> <br>            Else<br>                Exit For<br>            End If<br>        Next<br>        If i = k - 1 Then<br>            Return True ' [\u19979][\u38477][\u12375][\u12363][\u12375][\u12390][\u12356][\u12394][\u12356]<br>        End If<br>        For i = i To k - 2<br>            If now(i) &lt;= now(i + 1) Then<br> <br>            Else<br>                Exit For<br>            End If<br>        Next<br>        ' [\u19978][\u26119][\u20013]<br>        If i &lt;&gt; k - 1 Then<br>            Return False '[\u20984][\u12376][\u12419][\u12394][\u12356][\u12375]<br>        End If<br>        If Remain.Count &gt;= 1 AndAlso now(k - 1) &gt; Remain(0) Then<br>            Return False<br>        End If<br>        Return True<br>    End Function<br> <br>    Public Function find(ByVal heights As Integer()) As Integer()<br> <br>        Dim i As Integer, j As Integer<br>        Dim res As Integer() = New Integer(heights.Length - 1) {}<br>        find = res<br>        Dim remain As New List(Of Integer)<br>        Dim used(heights.Length - 1) As Boolean<br>        For i = 0 To heights.Length - 1<br>            used(i) = False<br>        Next<br>        Dim ret As New List(Of Integer)<br>        remain.AddRange(heights)<br>        For i = 0 To heights.Length - 1<br>            For j = 0 To heights.Length - 1<br>                If used(j) Then Continue For<br>                ret.Add(heights(j))<br>                remain.Remove(heights(j))<br>                If Solve(ret.Count, ret.ToArray, remain) Then<br>                    used(j) = True<br>                    res(i) = j<br>                    Exit For<br>                Else<br>                    ret.RemoveAt(ret.Count - 1)<br>                    remain.Add(heights(j))<br>                End If<br>            Next<br>        Next<br> <br>    End Function<br>End Class<br></td>