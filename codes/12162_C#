<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections;<br>using System.Collections.Generic;<br>using System.Text;<br><br>public class TheBrickTowerMediumDivTwo<br>{<br>    public int[] find(int[] heights)<br>    {<br>        int N = heights.Length;<br>        int[] index = new int[N];<br>        for (int i = 0; i &lt; N; i++) { index[i] = i; }<br>        int[] ans = new int[N];<br>        int min = int.MaxValue;<br><br>        do<br>        {<br>            int sum = 0;<br>            for (int i = 0; i &lt; N - 1; i++)<br>            {<br>                sum += Math.Max(heights[index[i]], heights[index[i + 1]]);<br>            }<br>            if (sum &lt; min)<br>            {<br>                min = sum; index.CopyTo(ans, 0);<br>            }<br>            else if (sum == min)<br>            {<br>                bool ok = false;<br>                for (int i = 0; i &lt; N; i++)<br>                {<br>                    if (index[i] &lt; ans[i]) { ok = true; break; }<br>                    else if (ans[i] &lt; index[i]) { ok = false; break; }<br>                }<br>                if (ok) { index.CopyTo(ans, 0); }<br>            }<br><br>        } while (Permutation&lt;int&gt;.NextPermutation(index));<br>        <br>        return ans;<br>    }<br><br>    public static class Permutation&lt;T&gt;<br>    {<br>        public static bool NextPermutation(T[] a)<br>        {<br>            Comparer&lt;T&gt; comp = Comparer&lt;T&gt;.Default;<br>            for (int i = a.Length - 2; i &gt;= 0; i--)<br>            {<br>                if (comp.Compare(a[i], a[i + 1]) &lt; 0)<br>                {<br>                    int j = a.Length - 1;<br>                    while (comp.Compare(a[i], a[j]) &gt;= 0) { j--; }<br>                    T tmp = a[i]; a[i] = a[j]; a[j] = tmp;<br>                    Array.Reverse(a, i + 1, a.Length - i - 1);<br>                    return true;<br>                }<br>            }<br>            return false;<br>        }<br>    }<br> <br>}<br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003] Modified for C# by ysn<br>// Powered by CodeProcessor<br></td>