<td class="problemText" colspan="8" valign="middle" align="left">
            public class TheBrickTowerMediumDivTwo {<br> <br>    private static boolean nextPermutation(int[] a){<br>            int j=a.length-2;<br>            while(j&gt;=0 &amp;&amp; a[j]&gt;a[j+1]) j--;            <br>            if(j&gt;=0){<br>                    int k=a.length-1;<br>                    while(k&gt;=0 &amp;&amp; a[k]&lt;a[j]) k--;                    <br>                    int tmp=a[k];<br>                    a[k]=a[j];<br>                    a[j]=tmp;<br>                    k=j+1;<br>                    for(int m=0; m&lt;(a.length-k)/2; m++){<br>                            tmp=a[k+m];<br>                            a[k+m]=a[a.length-m-1];<br>                            a[a.length-m-1]=tmp;<br>                    }<br>            }else<br>                    return false;<br>            return true;<br>    }       <br> <br>  public int[] find(int[] heights) {<br>    int[] a=new int[heights.length];<br>    for(int i=0; i&lt;a.length; i++) a[i]=i;  <br>    int[] best=new int[heights.length];<br>    int actual=1;<br>    for(int i=0; i&lt;a.length-1; i++){<br>      actual += Math.max(heights[a[i]],heights[a[i+1]]);<br>      best[i]=a[i];<br>    }<br>    best[a.length-1]=a[a.length-1];<br>    int min=actual;    <br>    while(nextPermutation(a)){<br>      actual=1;<br>      for(int i=0; i&lt;a.length-1; i++)<br>        actual += Math.max(heights[a[i]],heights[a[i+1]]);<br>      if(actual&lt;min){<br>        min=actual;<br>        for(int i=0; i&lt;a.length; i++) best[i]=a[i];<br>      }<br>    }    <br>    return best; <br>  }<br> <br>}<br></td>