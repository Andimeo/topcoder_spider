<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;vector&gt;<br>#include &lt;list&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;deque&gt;<br>#include &lt;queue&gt;<br>#include &lt;stack&gt;<br>#include &lt;bitset&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;functional&gt;<br>#include &lt;numeric&gt;<br>#include &lt;utility&gt;<br>#include &lt;sstream&gt;<br>#include &lt;iostream&gt;<br>#include &lt;iomanip&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cctype&gt;<br>#include &lt;string&gt;<br>#include &lt;cstring&gt;<br>#include &lt;ctime&gt;<br>#include &lt;string.h&gt;<br><br>using namespace std;<br><br>typedef long long int64;<br>typedef unsigned long long uint64;<br>typedef unsigned short ushort;<br>typedef unsigned char uchar;<br>#define two(X) (1&lt;&lt;(X))<br>#define twoL(X) (((int64)(1))&lt;&lt;(X))<br>#define contain(S,X) (((S)&amp;two(X))!=0)<br>#define containL(S,X) (((S)&amp;twoL(X))!=0)<br>const double pi=acos(-1.0);<br>const double eps=1e-11;<br>template&lt;class T&gt; inline void ckmin(T &amp;a,T b){if(b&lt;a) a=b;}<br>template&lt;class T&gt; inline void ckmax(T &amp;a,T b){if(b&gt;a) a=b;}<br>template&lt;class T&gt; inline T sqr(T x){return x*x;}<br>typedef pair&lt;int,int&gt; ipair;<br>#define SIZE(A) ((int)A.size())<br>#define LENGTH(A) ((int)A.length())<br>#define MP(A,B) make_pair(A,B)<br>#define PB(X) push_back(X)<br>typedef vector&lt;int&gt; VI;<br>typedef vector&lt;double&gt; VD;<br>typedef vector&lt;string&gt; VS;<br>typedef set&lt;int&gt; SI;<br>typedef set&lt;double&gt; SD;<br>typedef set&lt;string&gt; SS;<br><br>template&lt;typename T&gt; static T gcd(T a, T b) { return b ? gcd(b, a % b) : a; }<br>template&lt;typename T&gt; static T lcm(T a, T b) { return a*(b/gcd(a,b)); }<br>template&lt;typename T&gt; static T lowbit(T n) { return (n^(n-1))&amp;n; }<br>template&lt;typename T&gt; static int countbit(T n) { return (n==0)?0:(1+countbit(n&amp;(n-1))); }<br><br>class FloodFill3D<br>{<br>public:<br>  void trim(string &amp;s,char key)<br>  {<br>    for (int i=0;i&lt;LENGTH(s) &amp;&amp; s[i]==key;i++) s[i]=' ';<br>    for (int i=LENGTH(s)-1;i&gt;=0 &amp;&amp; s[i]==key;i--) s[i]=' ';<br>  }<br>  int64 solve(string s1,string s2,string s3,char key)<br>  {<br>    int l1=LENGTH(s1);<br>    int l2=LENGTH(s2);<br>    int l3=LENGTH(s3);<br>    int64 c1=0,c2=0,c3=0;<br>    for (int i=0;i&lt;l1;i++) if (s1[i]==key) c1++;<br>    for (int i=0;i&lt;l2;i++) if (s2[i]==key) c2++;<br>    for (int i=0;i&lt;l3;i++) if (s3[i]==key) c3++;<br>    int64 R=(int64)c1*c2*c3;<br>    trim(s1,key);<br>    trim(s2,key);<br>    trim(s3,key);<br>    c1=c2=c3=0;<br>    for (int i=0;i&lt;l1;i++) if (s1[i]==key) c1++;<br>    for (int i=0;i&lt;l2;i++) if (s2[i]==key) c2++;<br>    for (int i=0;i&lt;l3;i++) if (s3[i]==key) c3++;<br>    R-=(int64)c1*c2*c3;<br>    return R;<br>  }<br>    long long countBlack(vector &lt;string&gt; SArray, vector &lt;string&gt; TArray, vector &lt;string&gt; UArray) <br>    {<br>    string s1="",s2="",s3="";<br>    for (int i=0;i&lt;SIZE(SArray);i++) s1+=SArray[i];<br>    for (int i=0;i&lt;SIZE(TArray);i++) s2+=TArray[i];<br>    for (int i=0;i&lt;SIZE(UArray);i++) s3+=UArray[i];<br>    int l1=LENGTH(s1);<br>    int l2=LENGTH(s2);<br>    int l3=LENGTH(s3);<br>    int64 R=0;<br>    R+=solve(s1,s2,s3,'o');<br>    cout&lt;&lt;R&lt;&lt;endl;<br>    R+=solve(s1,s2,s3,'x');<br>    cout&lt;&lt;R&lt;&lt;endl;<br>    return (int64)l1*(int64)l2*(int64)l3-R;<br>    }<br>};<br><br><br>// Powered by FileEdit<br></td>