<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;vector&gt;<br>#include &lt;list&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;deque&gt;<br>#include &lt;queue&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;stack&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;iostream&gt;<br>#include &lt;string&gt;<br>#include &lt;cstring&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cassert&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;iterator&gt;<br>#include &lt;functional&gt;<br>#include &lt;bitset&gt;<br>#include &lt;ctime&gt;<br>#define pb push_back<br>#define mp make_pair      <br>using namespace std;<br> <br>typedef long long ll;<br>typedef long double ld;<br> <br> <br>class CirclesGame {<br> <br>vector&lt;int&gt; g[55];<br>bool root[55];<br>int grund[55];<br> <br>void dfs2(int v,int x,vector&lt;int&gt;&amp; u){<br>  for (int i = 0; i &lt; (int)g[v].size(); i++)<br>    x ^= grund[g[v][i]];<br>  u.pb(x);<br>  for (int i = 0; i &lt; (int)g[v].size(); i++)<br>    dfs2(g[v][i],x ^ grund[g[v][i]],u);<br>}<br> <br>int dfs(int v){<br>  for (int i = 0; i &lt; (int)g[v].size(); i++)<br>    dfs(g[v][i]);<br>  vector&lt;int&gt; used;<br>  dfs2(v,0,used);<br>  sort(used.begin(),used.end());<br>  used.erase(unique(used.begin(),used.end()),used.end());<br>  used.pb(1&lt;&lt;30);<br>  for (int i = 0; ; i++)<br>    if (used[i] != i)<br>      return grund[v] = i;<br>  assert(false);<br>}<br> <br>public:<br>    string whoCanWin(vector &lt;int&gt; x, vector &lt;int&gt; y, vector &lt;int&gt; r) {<br>      int n = x.size();<br>        for (int i = 0; i &lt; n; i++){<br>          int best = -1;<br>          for (int j = 0; j &lt; n; j++)<br>            if ((x[i] - x[j]) * 1LL*(x[i] - x[j]) + (y[i] - y[j]) *1LL* (y[i] - y[j]) &lt; (r[i] - r[j]) * 1LL* (r[i] - r[j]) &amp;&amp; r[j] &gt; r[i])<br>              if (best == -1 || r[j] &lt; r[best])<br>                best = j;<br>          if (best != -1)<br>            g[best].pb(i), root[i] = false;<br>          else<br>            root[i] = true;            <br>        }<br>        <br>        int res = 0;<br>        for (int i = 0; i &lt; n; i++)<br>          if (root[i])<br>            res ^= dfs(i);<br>            <br>        if (res == 0)<br>          return "Bob";<br>        return "Alice";<br>    }<br>};<br> <br> <br> <br> <br> <br> <br> <br> <br>//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!<br></td>