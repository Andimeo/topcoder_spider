<td class="problemText" colspan="8" valign="middle" align="left">
            #include&lt;iostream&gt;<br>#include&lt;vector&gt;<br>#include&lt;cstdio&gt;<br>#include&lt;cstring&gt;<br>#include&lt;cstdlib&gt;<br>#include&lt;algorithm&gt;<br>using namespace std;<br>#define rep(i,n) for(i=0;i&lt;n;i++)<br>#define FOR(i,j,k) for(i=j;i&lt;=k;i++)<br>#define FORD(i,j,k) for(i=j;i&gt;=k;i--)<br>#define FIT(i,j) for(typeof((i).begin()) j=(i).begin();j!=(i).end();j++)<br>#define met(i,j) memset(i,j,sizeof(i))<br>#define PB push_back<br>#define MK make_pair<br>#define sz size()<br>#define TF(a) typeof(a)<br>const int oo=2147483647;<br>typedef long long LL;<br>typedef unsigned long long ULL;<br>bool bj[100];<br><br>class LeftRightDigitsGame<br>{<br>    public:<br>        string minNumber(string digits)<br>        {<br>            int i,ij,q,j,zero=0;<br>            for(i=ij=(int)digits.sz-1;i&gt;=0;i=ij-1)<br>            {<br>                q=100;ij=0;<br>                for(j=i;j&gt;=0;j--)<br>                {<br>                    if(!zero&amp;&amp;digits[j]=='0')continue;<br>                    if(digits[j]&lt;q)q=digits[j],ij=j;<br>                }<br>                bj[ij]=1;<br>                zero=1;<br>            }<br>            string ans="";<br>            rep(i,(int)digits.sz)<br>            {<br>                if(bj[i])ans=digits[i]+ans;else ans=ans+digits[i];<br>            }<br>            return ans;<br>        }<br>};<br></td>