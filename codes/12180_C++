<td class="problemText" colspan="8" valign="middle" align="left">
            #line 5 "CuttingBitString.cpp"<br><br>#include &lt;cstdlib&gt;<br>#include &lt;cstring&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cmath&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;vector&gt;<br>#include &lt;string&gt;<br>#include &lt;iostream&gt;<br>#include &lt;sstream&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;queue&gt;<br><br>using namespace std;<br><br>#define pb push_back<br>#define sz(x) ((int)((x).size()))<br>#define out(x) printf(#x" %d\n", x)<br>#define rep(i,n) for(int i=0;i&lt;(n);++i)<br>#define repf(i,l,h) for(int i=(l);i&lt;=(h);++i)<br>#define repd(i,h,l) for(int i=(h);i&gt;=(l);--i)<br><br>typedef vector&lt;int&gt; vi;<br>typedef vector&lt;string&gt; vs;<br>typedef vector&lt;double&gt; vd;<br>typedef long long ll;<br>typedef pair&lt;int,int&gt; pii;<br><br>const int mod = 555555555;<br>const int maxn = 3200;<br><br>int com[maxn][maxn];<br><br>void add(int&amp; x, int y) {<br>    x += y;<br>    if (x &gt;= mod) x -= mod;<br>}<br><br>class XorBoard<br>{<br>    public:<br>        int count(int h, int w, int rc, int cc, int s)<br>        {<br>            repf (i, 0, maxn - 1) {<br>                com[i][0] = com[i][i] = 1;<br>                repf (j, 1, i - 1) {<br>                    com[i][j] = (com[i - 1][j - 1] + com[i - 1][j]) % mod;<br>                }<br>            }<br>            <br>            int ans = 0;<br>            repf (i, 0, min(rc, h)) repf (j, 0, min(cc, w)) {<br>                if (i * w + j * h - 2 * i * j == s) {<br>                    add (ans, solve(i, j, rc, cc, h, w));<br>                }<br>            }<br>            return ans;<br>        }<br>        <br>        int solve(int rt, int ct, int rtot, int ctot, int h, int w) {<br>            int rleft = rtot - rt, cleft = ctot - ct;<br>            <br>            if (rleft &amp; 1) return 0;<br>            if (cleft &amp; 1) return 0;<br>            <br>            rleft &gt;&gt;= 1; cleft &gt;&gt;= 1;<br>            <br>            ll res = 1LL;<br>            res = (res * com[h][rt] % mod) * com[w][ct] % mod;<br>            res = (res * com[h + rleft - 1][h - 1] % mod) * com[w + cleft - 1][w - 1] % mod;<br>            return res;<br>        }<br><br><br><br>};<br><br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003]<br>// Powered by CodeProcessor<br></td>