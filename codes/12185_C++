<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;vector&gt;<br>#include &lt;string&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;list&gt;<br>#include &lt;set&gt;<br>#include &lt;queue&gt;<br>#include &lt;stack&gt;<br>#include &lt;sstream&gt;<br>#include &lt;numeric&gt;<br>#include &lt;functional&gt;<br>#include &lt;utility&gt;<br>#include &lt;bitset&gt;<br>#include &lt;iostream&gt;<br>#include &lt;cmath&gt;<br>#include &lt;map&gt;<br>#include &lt;cstring&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cassert&gt;<br>#include &lt;cstdarg&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;stdint.h&gt;<br>#include &lt;fcntl.h&gt;<br>using namespace std;<br><br>template &lt;class INT&gt; inline INT Gcd(INT a, INT b)<br>{<br>    assert(a || b);<br>    if (b == 0)<br>    {<br>        return a;<br>    }<br>    else<br>    {<br>        return Gcd(b, a % b);<br>    }<br>}<br><br>template &lt;class INT&gt; inline INT Lcm(INT a, INT b)<br>{<br>    assert(a || b);<br>    return a * (b / Gcd(a, b));<br>}<br><br><br>class ThePowers<br>{<br>public:<br>    long long find(int A, int B);<br>};<br><br>int top;<br><br>typedef map &lt;pair&lt;long long, int&gt;, long long&gt; Mli;<br><br>Mli Ans;<br>long long B;<br><br>long long cal(long long lcm, int large)<br>{<br>    Mli::iterator x = Ans.find(make_pair(lcm, large));<br>    if (x != Ans.end())<br>        return x -&gt; second;<br>    long long ans = B / lcm;<br>    if (ans == 0)<br>        return 0;<br>    for (int i = large + 1; i &lt;= top; ++ i)<br>    {<br>        ans -= cal(Lcm(lcm, (long long)i), i);<br>    }<br>    Ans[make_pair(lcm, large)] = ans;<br>    return ans;<br>}<br><br>long long solve(int i, long long b)<br>{<br>    long long ans = 0;<br>    for (int j = 1; j &lt;= i; ++ j)<br>    {<br>        top = i;<br>        B = b * j;<br>        Ans.clear();<br>        ans += cal(j, j);<br>    }<br>    return ans;<br>}<br><br>long long P[100];<br><br>bool flag[100010] = {};<br><br>long long ThePowers::find(int A, int B)<br>{<br>    long long ans = 1;<br>    long long UpBound = min(100000, A);<br>    <br>    for (int i = 1; i &lt;= 30; ++ i)<br>        P[i] = solve(i, B);<br>    for (int i = 2; i &lt;= UpBound; ++ i)<br>    {<br>        if (flag[i])<br>            continue;<br>        long long x = i, p = 1;<br>        while (x * i &lt;= A)<br>        {<br>            x *= i;<br>            p ++;<br>            if (x &lt;= UpBound)<br>                flag[x] = 1;<br>            else<br>                ans -= B;<br>        }<br>        ans += P[p];<br>    }<br>    ans += (A - UpBound) * B;<br>    return ans;<br>}<br></td>