<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;vector&gt;<br>#include &lt;list&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;deque&gt;<br>#include &lt;stack&gt;<br>#include &lt;bitset&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;functional&gt;<br>#include &lt;numeric&gt;<br>#include &lt;utility&gt;<br>#include &lt;sstream&gt;<br>#include &lt;iostream&gt;<br>#include &lt;iomanip&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;ctime&gt;<br><br>#define rep(i, n) for (int i = 0; i &lt; (int)n; ++i)<br>#define pb push_back<br>#define mp make_pair<br>#define iter(c) __typeof((c).begin())<br>#define tr(c, i) for (iter(c) i = (c).begin(); i != (c).end(); ++i)<br><br>using namespace std;<br><br>class StringSequences {<br>public:<br>  int countSequences(string, string);<br>};<br><br>typedef long long ll;<br>typedef pair&lt;ll, ll&gt; pll;  // (num of chars, combinations)<br>const ll MOD = 1000000007;<br><br>ll cmb[2510][2510];<br><br>void init_cmb(int n) {<br>  cmb[0][0] = 1;<br>  for (int i = 1; i &lt;= n; ++i) {<br>    cmb[i][0] = 1;<br>    for (int j = 1; j &lt;= i; ++j) cmb[i][j] = (cmb[i - 1][j - 1] + cmb[i - 1][j]) % MOD;<br>  }<br>}<br><br>pll join(pll a, pll b) {<br>  ll n = a.first + b.first;<br>  return mp(n, cmb[n][a.first] * a.second % MOD * b.second % MOD);<br>}<br><br><br>string A, B;<br>int AL, BL;<br><br>ll mem1[60][60];<br><br>pll search1(int l, int r) {  // B[l, r), B[r]<br>  if (l == r) return mp(0, 1);<br>  if (mem1[l][r] != -1) return mp(r - l, mem1[l][r]);<br><br>  ll res = 0;<br>  for (int m = l; m &lt; r; ++m) {  // first<br>    if (B[m] == B[r]) continue;<br>    (res += join(search1(l, m), search1(m + 1, r)).second) %= MOD;<br>  }<br><br>  mem1[l][r] = res;<br>  return mp(r - l, res);<br>}<br><br>pair&lt;ll, ll&gt; mem2[60][60];<br><br>pll search2(int a, int b) {<br>  if (a == AL) return search1(b, BL);<br>  if (mem2[a][b] != mp(-1LL, -1LL)) return mem2[a][b];<br><br>  pll res = mp(0, 0);<br>  for (int tb = b; tb &lt; BL; ++tb) {<br>    if (B[tb] != A[a]) continue;<br>    pll x = search1(b, tb);<br>    pll y = search2(a + 1, tb + 1);<br>    pll z = join(x, y);<br><br>    if (z.second) {<br>      res.first = z.first;<br>      (res.second += z.second) %= MOD;<br>    }<br>  }<br><br>  return mem2[a][b] = res;<br>}<br><br>int StringSequences::countSequences(string A_, string B_) {<br>  A = A_;<br>  B = B_;<br>  AL = A.length();<br>  BL = B.length();<br>  A += 'Z';<br>  B += 'Z';  // sentinel<br><br>  init_cmb(500);<br>  <br>  memset(mem1, -1, sizeof(mem1));<br>  memset(mem2, -1, sizeof(mem2));<br>  return search2(0, 0).second;<br>}<br><br><br><br><br><br><br>//Powered by [KawigiEditNonTest] modified by pivanof!<br><br><br>// Powered by FileEdit<br></td>