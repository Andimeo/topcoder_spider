<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;vector&gt;<br>#include &lt;list&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;deque&gt;<br>#include &lt;stack&gt;<br>#include &lt;bitset&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;functional&gt;<br>#include &lt;numeric&gt;<br>#include &lt;utility&gt;<br>#include &lt;sstream&gt;<br>#include &lt;iostream&gt;<br>#include &lt;iomanip&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;ctime&gt;<br> <br>using namespace std;<br> <br>class FoxAndMountainEasy {<br>public:<br>  string possible(int, int, int, string);<br>};<br> <br>string FoxAndMountainEasy::possible(int n, int h0, int hn, string h) {<br>  int m = h.length(), i, x = h0;<br>  for (i=0;i&lt;m;i++)<br>    if (h[i] == 'U') x++; else<br>    if (h[i] == 'D') x--;<br>  int d = x-hn;<br>  if (d &lt; 0) d = -d;<br>  if (d &gt; n-m) return "NO";<br>  if (d % 2 != (n-m) % 2) return "NO";<br>  int up = (n-m-d)/2;<br>  if (hn &gt; x) up += hn-x;<br>  x = h0+up;<br>  for (i=0;i&lt;m;i++) {<br>    if (h[i] == 'U') x++; else<br>    if (h[i] == 'D') x--;<br>    if (x &lt; 0) return "NO";<br>  }<br>  return "YES";<br>}<br> <br> <br>//Powered by [KawigiEdit] 2.0!<br></td>