<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections;<br>using System.Collections.Generic;<br>using System.Text;<br><br>public class LeftRightDigitsGame2<br>{<br>  private string D, L;<br>  private int n;<br><br>  string[, ,] dp;<br>  private bool[, ,] was;<br><br>  string go( int p1, int len, bool bigger )<br>  {<br>    if ( len == 0 )<br>    {<br>      if ( bigger )<br>      {<br>        return null;<br>      }<br>      else<br>      {<br>        return "";<br>      }<br>    }<br>    if ( was[p1, len, bigger ? 1 : 0] )<br>      return dp[p1, len, bigger ? 1 : 0];<br>    string res = null;<br><br>    for ( int i = 0; i &lt; len; ++i )<br>    {<br>      if ( D[i] &gt; L[p1] )<br>      {<br>        string cur = D[i] + GetMin( i ) + D.Substring( i + 1, len - i - 1 );<br>        if ( res == null || res.CompareTo( cur ) &gt; 0 ) res = cur;<br>      }<br>      else if ( D[i] == L[p1] )<br>      {<br>        int sufBigger = 0;<br>        if ( i &lt; len - 1 )<br>        {<br>          string suf = D.Substring( i + 1, len - i - 1 );<br>          sufBigger = suf.CompareTo( L.Substring( p1 + len - ( len - i - 1 ), len - i - 1 ) );<br>        }<br>        bool newBigger = false;<br>        if ( sufBigger &lt; 0 ) newBigger = true;<br>        else if ( sufBigger == 0 ) newBigger = bigger;<br>        string cur = go( p1 + 1, i, newBigger );<br>        if ( cur == null ) continue;<br>        cur = D[i] + cur + D.Substring( i + 1, len - i - 1 );<br>        if ( res == null || res.CompareTo( cur ) &gt; 0 ) res = cur;<br>      }<br>    }<br><br>    was[p1, len, bigger ? 1 : 0] = true;<br>    return dp[p1, len, bigger ? 1 : 0] = res;<br>  }<br><br>  private string[] dpLen;<br>  private string GetMin( int len )<br>  {<br>    if ( len == 0 ) return "";<br>    if ( dpLen[len] != null )<br>      return dpLen[len];<br>    string res = "";<br>    for ( int i = 0; i &lt; len; ++i )<br>    {<br>      string cur = D[i] + GetMin( i ) + D.Substring( i + 1, len - i - 1 );<br>      if ( res == "" || res.CompareTo( cur ) &gt; 0 ) res = cur;<br>    }<br><br>    return dpLen[len] = res;<br>  }<br><br>  public string minNumber( string digits, string lowerBound )<br>  {<br>    D = digits;<br>    L = lowerBound;<br>    n = D.Length;<br>    dpLen = new string[digits.Length + 1];<br>    was = new bool[digits.Length, digits.Length + 1, 2];<br>    dp = new string[digits.Length, digits.Length + 1, 2];<br>    string res = go( 0, digits.Length, false );<br>    return res == null ? "" : res;<br>  }<br><br>}<br><br><br> <br>// Powered by moj 4.16 [modified TZTester]<br>// Powered by CleanSharp 1.0<br>// Powered by CodeProcessor<br></td>