<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;cstdio&gt;<br>#include &lt;iostream&gt;<br>#include &lt;vector&gt;<br>#include &lt;cmath&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;string&gt;<br>#include &lt;set&gt;<br>#include &lt;map&gt;<br>#include &lt;ctime&gt;<br>#include &lt;cstring&gt;<br>#include &lt;cassert&gt;<br>#include &lt;sstream&gt;<br>#include &lt;complex&gt;<br>#include &lt;bitset&gt;<br> <br>using namespace std;<br> <br>#define forn(i, n) for(int i = 0; i &lt; (int)(n); i++)<br>#define ford(i, n) for(int i = (int)(n) - 1; i &gt;= 0; i--)<br>#define pb push_back<br>#define mp make_pair<br>#define fs first<br>#define sc second<br>#define last(a) int(a.size() - 1)<br>#define all(a) a.begin(), a.end()<br>#define seta(a,x) memset (a, x, sizeof (a))<br>#define I (int)<br> <br>typedef long long int64;<br>typedef pair &lt;int, int&gt; pii;<br> <br>class LeftRightDigitsGame2 {<br>public:<br>  string minNumber(string, string);<br>};<br> <br>const int nmax = 52;<br> <br>bool can[nmax][nmax][3];<br>string t[nmax][nmax][3];<br>string a, s;<br>int n;<br> <br>void add(int l, int r, int tp, const string&amp; now) {<br>  if (!can[l][r][tp]) {<br>    can[l][r][tp] = 1;<br>    t[l][r][tp] = now;<br>  } else<br>    t[l][r][tp] = min(t[l][r][tp], now);<br>}<br> <br>int get1(int a, char b, char c){<br>  if (b &gt; c) return 2;<br>  if (b == c) return a;<br>  return 0;<br>}<br> <br>int get2(int a, char b, char c){<br>  if (a == 2) return 2;<br>  if (a == 1) {<br>    if (b &gt; c) return 2;<br>    if (b == c) return 1;<br>    return 0;<br>  }<br>  return 0;<br>}<br> <br>void go(int l, int r, int tp) {  <br>  if (!can[l][r][tp]) return;<br>  //cerr &lt;&lt; l &lt;&lt; " " &lt;&lt; r &lt;&lt; " " &lt;&lt; tp &lt;&lt; " " &lt;&lt; t[l][r][tp] &lt;&lt; endl;<br>  char cur = a[r-l+1];<br>  if (l &gt; 0) {<br>    int ntp = get1(tp, cur, s[l-1]);<br>    add(l-1, r, ntp, cur + t[l][r][tp]);<br>  }<br>  if (r &lt; n-1) {<br>    int ntp = get2(tp, cur, s[r+1]);<br>    add(l, r+1, ntp, t[l][r][tp] + cur);<br>  }<br>}<br> <br>string LeftRightDigitsGame2::minNumber(string d1, string l1) {<br>  a = d1;<br>  s = l1;<br>  n = a.size();<br>  memset(can, 0, sizeof can);<br>  forn(i, n){<br>    char now = a[0];<br>    string qwe = "";<br>    qwe += now;<br>    if (now &gt; s[i])<br>      add(i, i, 2, qwe);<br>    if (now == s[i])<br>      add(i, i, 1, qwe);<br>    if (now &lt; s[i])<br>      add(i, i, 0, qwe);<br>  }<br>  for (int len = 1; len &lt; n; len ++)<br>    for (int i = 0; i + len - 1 &lt; n; i ++)<br>      for (int j = 0; j &lt; 3; j ++)<br>        go(i, i + len - 1, j);<br>  string res;<br>  for (int j = 1; j &lt;= 2; j ++) {<br>    if (can[0][n-1][j]){<br>      if (res == "" || res &gt; t[0][n-1][j])<br>        res = t[0][n-1][j];<br>    }<br>  }<br>  return res;<br>}<br></td>