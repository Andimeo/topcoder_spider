<td class="problemText" colspan="8" valign="middle" align="left">
            /**<br> * Built using CHelper plug-in<br> * Actual solution is at the top<br> */<br>public class HyperKnight {<br>  public long countCells(int a, int b, int numRows, int numColumns, int k) {<br>        long[] dr = new long[]{a,a,-a,-a,b,b,-b,-b};<br>        long[] dc = new long[]{b,-b,b,-b,a,-a,a,-a};<br>        long res = 0;<br>        long[] need = new long[1 &lt;&lt; dr.length];<br>        for (int mask = 0; mask &lt; (1 &lt;&lt; dr.length); ++mask)<br>            if (Integer.bitCount(mask) == k)<br>                ++need[mask];<br>        for (int mask = 0; mask &lt; (1 &lt;&lt; dr.length); ++mask) {<br>            if (need[mask] != 0) {<br>                long by = need[mask];<br>                long minR = 0;<br>                long maxR = numRows - 1;<br>                long minC = 0;<br>                long maxC = numColumns - 1;<br>                for (int i = 0; i &lt; dr.length; ++i) {<br>                    if ((mask &amp; (1 &lt;&lt; i)) != 0) {<br>                        minR = Math.max(minR, -dr[i]);<br>                        minC = Math.max(minC, -dc[i]);<br>                        maxR = Math.min(maxR, numRows - 1 - dr[i]);<br>                        maxC = Math.min(maxC, numColumns - 1 - dc[i]);<br>                    }<br>                }<br>                if (minR &gt; maxR || minC &gt; maxC) continue;<br>                long cur = (maxR - minR + 1) * (maxC - minC + 1);<br>                res += cur * by;<br>                for (int subMask = 0; subMask &lt; (1 &lt;&lt; dr.length); ++subMask)<br>                    if ((subMask &amp; mask) == mask)<br>                        need[subMask] -= by;<br>            }<br>        }<br>        return res;<br>  }<br>}<br></td>