<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;vector&gt;<br>#include &lt;list&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;deque&gt;<br>#include &lt;queue&gt;<br>#include &lt;stack&gt;<br>#include &lt;bitset&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;functional&gt;<br>#include &lt;numeric&gt;<br>#include &lt;utility&gt;<br>#include &lt;sstream&gt;<br>#include &lt;iostream&gt;<br>#include &lt;iomanip&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cctype&gt;<br>#include &lt;string&gt;<br>#include &lt;cstring&gt;<br>#include &lt;ctime&gt;<br>#include &lt;string.h&gt;<br><br>using namespace std;<br><br>typedef long long int64;<br>typedef unsigned long long uint64;<br>typedef unsigned short ushort;<br>typedef unsigned char uchar;<br>#define two(X) (1&lt;&lt;(X))<br>#define twoL(X) (((int64)(1))&lt;&lt;(X))<br>#define contain(S,X) (((S)&amp;two(X))!=0)<br>#define containL(S,X) (((S)&amp;twoL(X))!=0)<br>const double pi=acos(-1.0);<br>const double eps=1e-11;<br>template&lt;class T&gt; inline void ckmin(T &amp;a,T b){if(b&lt;a) a=b;}<br>template&lt;class T&gt; inline void ckmax(T &amp;a,T b){if(b&gt;a) a=b;}<br>template&lt;class T&gt; inline T sqr(T x){return x*x;}<br>typedef pair&lt;int,int&gt; ipair;<br>#define SIZE(A) ((int)A.size())<br>#define LENGTH(A) ((int)A.length())<br>#define MP(A,B) make_pair(A,B)<br>#define PB(X) push_back(X)<br>typedef vector&lt;int&gt; VI;<br>typedef vector&lt;double&gt; VD;<br>typedef vector&lt;string&gt; VS;<br>typedef set&lt;int&gt; SI;<br>typedef set&lt;double&gt; SD;<br>typedef set&lt;string&gt; SS;<br><br>template&lt;typename T&gt; static T gcd(T a, T b) { return b ? gcd(b, a % b) : a; }<br>template&lt;typename T&gt; static T lcm(T a, T b) { return a*(b/gcd(a,b)); }<br>template&lt;typename T&gt; static T lowbit(T n) { return (n^(n-1))&amp;n; }<br>template&lt;typename T&gt; static int countbit(T n) { return (n==0)?0:(1+countbit(n&amp;(n-1))); }<br><br>const int maxn=100000+5;<br><br>class StRings<br>{<br>public:<br>  set&lt;int&gt; g;<br>  int father[maxn];<br>  int c[maxn];<br>  int getfather(int p)<br>  {<br>    return (father[p]&lt;0)?p:(father[p]=getfather(father[p]));<br>  }<br>  void merge(int a,int b)<br>  {<br>    a=getfather(a);<br>    b=getfather(b);<br>    if (rand()&amp;1) swap(a,b);<br>    father[a]=b;<br>  }<br>  bool can_add(int s,int t)<br>  {<br>    if (c[s]&amp;1) return false;<br>    if (c[t]&amp;2) return false;<br>    if (getfather(s)==getfather(t)) return false;<br>    return true;<br>  }<br>  void add(int s,int t)<br>  {<br>    c[s]|=1;<br>    c[t]|=2;<br>    merge(s,t);<br>    if (!(c[s]&amp;2)) g.insert(s);<br>    else g.erase(s);<br>    if (!(c[t]&amp;2)) g.insert(t);<br>    else g.erase(t);<br>  }<br>    vector &lt;int&gt; getSmallest(int n, vector &lt;int&gt; a) <br>    {<br>    if (n==1)<br>    {<br>      VI ret;<br>      ret.push_back(1);<br>      return ret;<br>    }<br>    for (int i=0;i&lt;SIZE(a);i++) a[i]--;<br>    memset(father,255,sizeof(father));<br>    for (int i=0;i&lt;n;i++) c[i]=0;<br>    for (int i=0;i&lt;n;i++) g.insert(i);<br>    for (int i=0;i&lt;SIZE(a);i++)<br>    {      <br>      if (i&lt;n-1 &amp;&amp; !can_add(i,a[i])) return VI(0);<br>      add(i,a[i]);<br>    }<br>    VI ret=a;<br>    for (int i=SIZE(a);i&lt;n;i++)<br>      if (i==n-1)<br>        ret.push_back(*g.begin());<br>      else<br>      {<br>        bool ok=false;<br>        for (set&lt;int&gt;::iterator it=g.begin();it!=g.end();++it)<br>          if (can_add(i,*it))<br>          {<br>            add(i,*it);<br>            ret.push_back(*it);<br>            ok=true;<br>            break;<br>          }<br>        if (!ok) return VI(0);<br>      }<br>    for (int i=0;i&lt;n;i++) ret[i]++;<br>    if (n&gt;50)<br>    {<br>      VI ret2;<br>      for (int i=0;i&lt;50;i++) ret2.push_back(ret[n-50+i]);<br>      return ret2;<br>    }<br>    return ret;<br>    }<br>};<br><br><br>// Powered by FileEdit<br></td>