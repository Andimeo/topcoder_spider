<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>import java.math.*;<br><br>public class StRings {<br>  int[] set;<br>  int[] size;<br>  int[] next;<br>  int[] last;<br>  <br>  int get(int index) {<br>    //if (set[index] == index)<br>  //    return index;<br>//    return set[index] = get(set[index]);<br>    return set[index];<br>  }<br>  <br>  void join(int a, int b) {<br>//    set[get(a)] = get(b);<br>    if (size[set[a]] &lt; size[set[b]]) {<br>      int temp = a;<br>      a = b;<br>      b = temp;<br>    }<br>    size[set[a]] += size[set[b]];<br>    int i = b;<br>    while (i != -1) {<br>      set[i] = set[a];<br>      i = last[i];<br>    }<br>    i = b;<br>    while (i != -1) {<br>      set[i] = set[a];<br>      i = next[i];<br>    }<br>  }<br><br>  public int[] getSmallest(int N, int[] first) {<br>    next = new int[N];<br>    last = new int[N];<br>    size = new int[N];<br>    Arrays.fill(next, -1);<br>    Arrays.fill(last, -1);<br>    set = new int[N];<br>    for (int i = 0; i &lt; N; i++) {<br>      set[i] = i;<br>      size[i] = 1;<br>    }<br>    int nnext = 0;<br>    int second = 0;<br>    for (int i = 0; i &lt; N; i++) {<br>      if (i &lt; first.length) {<br>        first[i]--;<br>        if (get(i) == get(first[i]) &amp;&amp; i != N - 1)<br>          return new int[]{};<br>        join(i, first[i]);<br>        last[i] = first[i];<br>        next[first[i]] = i;<br>        continue;<br>      }<br>      if (last[i] != -1)<br>        continue;<br>      while (next[nnext] != -1)<br>        nnext++;<br>      if (i != N - 1) {<br>        if (second &lt;= nnext)<br>          second = nnext + 1;<br>        while (next[second] != -1)<br>          second++;<br>      }<br>      if (i == N - 1 || get(i) != get(nnext)) {<br>        join(i, nnext);<br>        last[i] = nnext;<br>        next[nnext] = i;<br>        continue;<br>      }<br>      join(i, second);<br>      last[i] = second;<br>      next[second] = i;<br>    }<br>    int[] answer = new int[Math.min(50, N)];<br>    for (int i = 0; i &lt; answer.length; i++)<br>      answer[i] = last[N - (answer.length - i)] + 1;<br>    return answer;<br>  }<br>}<br><br><br>// Powered by FileEdit<br></td>