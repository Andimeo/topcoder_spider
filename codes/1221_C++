<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;algorithm&gt;<br>#include &lt;cmath&gt;<br>#include &lt;iostream&gt;<br>#include &lt;map&gt;<br>#include &lt;sstream&gt;<br>#include &lt;string&gt;<br>#include &lt;vector&gt;<br>using namespace std;<br> <br>typedef long double ld;<br>typedef long long ll;<br>template &lt;class T&gt; T MIN(T a, T b) {return a &lt; b? a : b;}<br>template &lt;class T&gt; T MAX(T a, T b) {return b &lt; a? a : b;}<br>template &lt;class T&gt; T ABS(T a) {return MAX(a, -a);}<br> <br>string toString(ld d, int precision=-1) {ostringstream out; if (precision != -1) {out.precision(precision); out.setf(ios::fixed);} out &lt;&lt; d; return out.str();}<br>string toString(ll n) {ostringstream out; out &lt;&lt; n; return out.str();}<br>string toString(int n) {return toString(ll(n));}<br>ll toInt(string s) {istringstream in(s); ll n; in &gt;&gt; n; return n;}<br>ld toDouble(string s) {istringstream in(s); ld d; in &gt;&gt; d; return d;}<br>int getNumWords(string s) {int n=0; string t; istringstream in(s); while (in &gt;&gt; t) n++; return n;}<br>string getWord(string s, int n) {string t; istringstream in(s); while (n &gt;= 0) {n--; in &gt;&gt; t;} return t;}<br>ll gcd(ll n, ll m) {return m==0? ABS(n) : gcd(m, n%m);}<br> <br>class DecodeMoveToFront {<br>  public:<br>  int numPlaced;<br>  string result;<br>  vector &lt;int&gt; perm;<br>  vector &lt;bool&gt; used;<br>  bool isPossible;<br>  <br>  void place(char ch) {<br>    int index = ch - 'A';<br>    if (ch == ' ') index = 26;<br>    if (used[index]) {isPossible = false; cout &lt;&lt; "USED";}<br>    used[index] = true;<br>    numPlaced++;<br>  }<br>  <br>  void doIt(string plain, string cipher) {<br>    int i;<br>    for (i = 0; i &lt; 27; i++) perm[i] = i;<br>    <br>    for (i = 0; i &lt; cipher.size(); i++) {<br>      int pos = cipher[i] - 'A';<br>      if (cipher[i] == ' ') pos = 26;<br>      int pos2 = pos;      <br>      pos = perm[pos];<br>      cout &lt;&lt; pos &lt;&lt; " " &lt;&lt; pos2 &lt;&lt; " " &lt;&lt; cipher[i] &lt;&lt; " " &lt;&lt; result &lt;&lt; endl;<br>      <br>      if (result[pos] == '-') {result[pos] = plain[i]; place(plain[i]);}<br>      if (result[pos] != plain[i]) {isPossible = false; cout &lt;&lt; "BADSPOT";}<br>      <br>      vector &lt;int&gt; newPerm = perm;<br>      newPerm[0] = perm[pos2];<br>      for (int j = 1; j &lt;= pos2; j++) newPerm[j] = perm[j-1];<br>      perm = newPerm;<br>    }<br>  }<br>  <br>  string findKey(vector &lt;string&gt; plaintexts, vector &lt;string&gt; ciphertexts) {<br>    isPossible = true;<br>    used.resize(27, false);<br>    perm.resize(27);<br>    <br>    numPlaced = 0;<br>    result = "---------------------------";<br>    for (int i = 0 ; i &lt; plaintexts.size(); i++) doIt(plaintexts[i], ciphertexts[i]);<br>    <br>    if (numPlaced == 26) {<br>      for (int i = 0; i &lt; 27; i++) <br>      if (!used[i]) {<br>        char ch = i + 'A';<br>        if (i == 26) ch = ' ';<br>        for (int j = 0; j &lt; 27; j++) if (result[j] == '-') result[j] = ch;<br>      }<br>    }<br>    <br>    if (isPossible) return result;<br> <br>    <br>    else return "ERROR";<br>  }<br>};<br> <br>// Powered by PopsEdit<br></td>