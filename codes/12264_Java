<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.Arrays;<br> <br>/**<br> * Built using CHelper plug-in<br> * Actual solution is at the top<br> */<br>public class TheDivisionGame {<br>  public long countWinningIntervals(int L, int R) {<br>        int[] psum = new int[R - L + 1];<br>        int[] rem = new int[R - L + 1];<br>        for (int i = 0; i &lt; rem.length; ++i) {<br>            rem[i] = L + i;<br>        }<br>        for (int by = 2; by * by &lt;= R; ++by) {<br>            int first = (L - 1) / by * by + by;<br>            for (int i = first; i &lt;= R; i += by) {<br>                while (rem[i - L] % by == 0) {<br>                    rem[i - L] /= by;<br>                    ++psum[i - L];<br>                }<br>            }<br>        }<br>        for (int i = 0; i &lt; rem.length; ++i) {<br>            if (rem[i] &gt; 1) ++psum[i];<br>        }<br>        int[] xors = new int[psum.length + 1];<br>        for (int i = 0; i &lt; psum.length; ++i) {<br>            xors[i + 1] = xors[i] ^ psum[i];<br>        }<br>        Arrays.sort(xors);<br>        long res = (R - L + 2) * (long) (R - L + 1) / 2;<br>        for (int i = 0; i &lt; xors.length;) {<br>            int j = i;<br>            while (j &lt; xors.length &amp;&amp; xors[j] == xors[i]) ++j;<br>            res -= ((j - i) * (long) (j - i - 1)) / 2;<br>            i = j;<br>        }<br>        return res;<br>  }<br>}<br></td>