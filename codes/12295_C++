<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;vector&gt;<br>#include &lt;list&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;deque&gt;<br>#include &lt;stack&gt;<br>#include &lt;bitset&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;functional&gt;<br>#include &lt;numeric&gt;<br>#include &lt;utility&gt;<br>#include &lt;sstream&gt;<br>#include &lt;iostream&gt;<br>#include &lt;iomanip&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;ctime&gt;<br> <br>using namespace std;<br>const int MAXN = 150;<br>const int MAXD = 600;<br> <br>class DrawingPointsDivOne {<br>public:<br>  int maxSteps(vector &lt;int&gt;, vector &lt;int&gt;);<br>};<br> <br>int N;<br>bool pt[MAXN][MAXN];<br>bool seen[MAXD][MAXD];<br>int res[MAXD][MAXD];<br> <br>bool works (int x)<br>{<br>  for (int i = 0; i &lt; MAXN + x; i++)<br>    for (int j = 0; j &lt; MAXN + x; j++)<br>      seen[i][j] = false;<br>  <br>  for (int i = 0; i &lt; MAXN; i++)<br>    for (int j = 0; j &lt; MAXN; j++)<br>      if (pt[i][j])<br>      {<br>        for (int k = 0; k &lt; x; k++)<br>          for (int l = 0; l &lt; x; l++)<br>            seen[i+k][j+l] = true;<br>      }<br>  <br>  for (int i = 0; i &lt;= MAXN + x; i++)<br>  {<br>    res[i][MAXN+x] = 0;<br>    res[MAXN+x][i] = 0;<br>  }<br>  <br>  for (int i = MAXN + x - 1; i &gt;= 0; i--)<br>    for (int j = MAXN + x - 1; j &gt;= 0; j--)<br>    {<br>      res[i][j] = min (res[i+1][j], min (res[i+1][j+1], res[i][j+1])) + 1;<br>      if (!seen[i][j])<br>        res[i][j] = 0;<br>      <br>      if (res[i][j] &gt;= x)<br>      {<br>        if (!pt[i][j])<br>          return false;<br>      }<br>    }<br>  return true;<br>}<br> <br>int DrawingPointsDivOne::maxSteps(vector &lt;int&gt; x, vector &lt;int&gt; y) {<br>  for (int i = 0; i &lt; MAXN; i++)<br>    for (int j = 0; j &lt; MAXN; j++)<br>      pt[i][j] = false;<br>  N = x.size();<br>  <br>  for (int i = 0; i &lt; N; i++)<br>    pt[x[i]+70][y[i]+70] = true;<br>  <br>  if (works (400)) return -1;<br>  <br>  int lo = 0, hi = 400;<br>  while (lo &lt; hi)<br>  {<br>    int mid = (lo + hi + 1) / 2;<br>    if (works (mid))<br>      lo = mid;<br>    else<br>      hi = mid - 1;<br>  }<br>  return lo - 1;<br>}<br> <br> <br>//Powered by [KawigiEdit] 2.0!<br></td>