<td class="problemText" colspan="8" valign="middle" align="left">
            /**<br> * Built using CHelper plug-in<br> * Actual solution is at the top<br> */<br>public class DrawingPointsDivOne {<br>    static final int MAX_GEN = 300;<br> <br>  public int maxSteps(int[] x, int[] y) {<br>        int minX = 0;<br>        int maxX = 0;<br>        for (int xx : x) minX = Math.min(minX, xx);<br>        for (int xx : x) maxX = Math.max(maxX, xx);<br>        int minY = 0;<br>        int maxY = 0;<br>        for (int yy : y) minY = Math.min(minY, yy);<br>        for (int yy : y) maxY = Math.max(maxY, yy);<br>        boolean[][] cover = new boolean[MAX_GEN + maxX - minX + 1][MAX_GEN + maxY - minY + 1];<br>        for (int i = 0; i &lt; x.length; ++i) {<br>            cover[x[i] - minX][y[i] - minY] = true;<br>        }<br>        int[][] cnt = new int[cover.length][cover[0].length];<br>        int[][] cnt2 = new int[cover.length][cover[0].length];<br>        for (int generation = 0; generation &lt; MAX_GEN; ++generation) {<br>            for (int xx = cnt.length - 1; xx &gt;= 0; --xx) {<br>                for (int yy = cnt[xx].length - 1; yy &gt;= 0; --yy) {<br>                    if (cover[xx][yy]) {<br>                        cnt[xx][yy] = 1;<br>                        if (yy + 1 &lt; cnt[xx].length)<br>                            cnt[xx][yy] += cnt[xx][yy + 1];<br>                    } else {<br>                        cnt[xx][yy] = 0;<br>                    }<br>                }<br>            }<br>            int found = 0;<br>            for (int yy = cnt[0].length - 1; yy &gt;= 0; --yy) {<br>                for (int xx = cnt.length - 1; xx &gt;= 0; --xx) {<br>                    if (cnt[xx][yy] &gt;= 1 + generation) {<br>                        cnt2[xx][yy] = 1;<br>                        if (xx + 1 &lt; cnt.length)<br>                            cnt2[xx][yy] += cnt2[xx + 1][yy];<br>                        if (cnt2[xx][yy] &gt;= 1 + generation) {<br>                            ++found;<br>                        }<br>                    } else {<br>                        cnt2[xx][yy] = 0;<br>                    }<br>                }<br>            }<br>            if (found &gt; x.length) return generation - 1;<br>            for (int xx = cnt.length - 1; xx &gt;= 0; --xx) {<br>                for (int yy = cnt[xx].length - 1; yy &gt;= 0; --yy) {<br>                    if (cover[xx][yy]) {<br>                        cover[xx + 1][yy] = true;<br>                        cover[xx][yy + 1] = true;<br>                        cover[xx + 1][yy + 1] = true;<br>                    }<br>                }<br>            }<br>        }<br>        return -1;<br>  }<br>}<br></td>