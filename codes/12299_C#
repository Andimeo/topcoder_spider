<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Text;<br>using System.Text.RegularExpressions;<br>using System.Collections.Generic;<br><br>public class TheMountain<br>{<br>  const int inf = 1000000000;<br><br>  int n, m;<br>  int[,] f;<br>  int[,,] a;<br>  int[,,] sums;<br><br>  int[] dx = new int[] { -1,  1, -1, 1 };<br>  int[] dy = new int[] { -1, -1,  1, 1 };<br><br>  void update(int t, int x, int y)<br>  {<br>    int nx = x + dx[t];<br>    int ny = y + dy[t];<br><br>    int r = 1;<br><br>    if(nx &gt;= 0 &amp;&amp; nx &lt; m)<br>      r = Math.Max(r, a[y, nx, t] + 1);<br><br>    if(ny &gt;= 0 &amp;&amp; ny &lt; n)<br>      r = Math.Max(r, a[ny, x, t] + 1);<br><br>    if(f[y, x] &gt; 0 &amp;&amp; f[y, x] &lt; r)<br>      a[y, x, t] = inf;<br>    else<br>      a[y, x, t] = Math.Max(f[y, x], r);<br><br>    {<br>      int s = a[y, x, t];<br><br>      if(nx &gt;= 0 &amp;&amp; nx &lt; m)<br>        s += sums[y, nx, t];<br><br>      if(ny &gt;= 0 &amp;&amp; ny &lt; n)<br>        s += sums[ny, x, t];<br><br>      if(nx &gt;= 0 &amp;&amp; nx &lt; m &amp;&amp; ny &gt;= 0 &amp;&amp; ny &lt; n)<br>        s -= sums[ny, nx, t];<br><br>      sums[y, x, t] = s;<br>    }<br>  }<br><br>  int get(int cx, int cy, int x, int y)<br>  {<br>    int res = 0;<br><br>    if(x &lt;= cx &amp;&amp; y &lt;= cy)<br>      res = Math.Max(res, a[y, x, 0]);<br><br>    if(x &lt;= cx &amp;&amp; y &gt;= cy)<br>      res = Math.Max(res, a[y, x, 2]);<br><br>    if(x &gt;= cx &amp;&amp; y &lt;= cy)<br>      res = Math.Max(res, a[y, x, 1]);<br><br>    if(x &gt;= cx &amp;&amp; y &gt;= cy)<br>      res = Math.Max(res, a[y, x, 3]);<br><br>    return res;<br>  }<br><br>  public int minSum(int n, int m, int[] rowIndex, int[] columnIndex, int[] element)<br>  {<br>    {<br>      this.n = n;<br>      this.m = m;<br>      this.f = new int[n, m];<br><br>      for(int i = 0; i &lt; n; i++)<br>        for(int j = 0; j &lt; m; j++)<br>          f[i, j] = -1;<br><br>      for(int i = 0; i &lt; rowIndex.Length; i++)<br>        f[rowIndex[i], columnIndex[i]] = element[i];<br>    }<br><br>    a = new int[n, m, 4];<br>    sums = new int[n, m, 4];<br><br>    for(int y = 0; y &lt; n; y++)<br>      for(int x = 0; x &lt; m; x++)<br>      {<br>        update(0, x, y);<br>        update(1, m - 1 - x, y);<br>        update(2, x, n - 1 - y);<br>        update(3, m - 1 - x, n - 1 - y);<br>      }<br><br>    int res = -1;<br><br>    for(int y = 0; y &lt; n; y++)<br>      for(int x = 0; x &lt; m; x++)<br>      {<br>        if(get(x, y, x, y) &gt;= inf)<br>          continue;<br><br>        int c = -get(x, y, x, y);<br><br>        if(y &gt; 0 &amp;&amp; x &gt; 0)<br>          c += sums[y - 1, x - 1, 0];<br><br>        if(y &gt; 0 &amp;&amp; x &lt; m - 1)<br>          c += sums[y - 1, x + 1, 1];<br><br>        if(y &lt; n - 1 &amp;&amp; x &gt; 0)<br>          c += sums[y + 1, x - 1, 2];<br><br>        if(y &lt; n - 1 &amp;&amp; x &lt; m - 1)<br>          c += sums[y + 1, x + 1, 3];<br><br>        for(int i = 0; i &lt; n; i++)<br>          c += get(x, y, x, i);<br><br>        for(int i = 0; i &lt; m; i++)<br>          c += get(x, y, i, y);<br><br>        if(res == -1 || c &lt; res)<br>          res = c;<br>      }<br><br>    return res;<br>  }<br><br><br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by CodeProcessor<br></td>