<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.Arrays;<br><br>public class TheMountain {<br><br>    public int minSum(int n, int m, int[] rowIndex, int[] columnIndex,<br>            int[] element) {<br>        int ans = Integer.MAX_VALUE;<br>        int[][] st = new int[n][m];<br>        for (int i = 0; i &lt; n; i++)<br>            Arrays.fill(st[i],  Integer.MAX_VALUE);<br>        for (int i = 0; i &lt; rowIndex.length; i++) {<br>            st[rowIndex[i]][columnIndex[i]] = element[i];<br>        }<br>        for (int column = 0; column &lt; m; column++) {<br>            int[][] a = new int[n][m];<br>            for (int i = 0; i &lt; n; i++)<br>                Arrays.fill(a[i], 1);<br>            for (int i = 0; i &lt; rowIndex.length; i++) {<br>                a[rowIndex[i]][columnIndex[i]] = element[i];<br>            }<br>            for (int i = 0; i &lt; n; i++) {<br>                for (int j = 1; j &lt;= column; j++)<br>                    a[i][j] = Math.max(a[i][j], a[i][j - 1] + 1);<br>                for (int j = m - 2; j &gt;= column; j--)<br>                    a[i][j] = Math.max(a[i][j], a[i][j + 1] + 1);<br>            }<br>            int[][] go_down = new int[n][m];<br>            for (int i = 0; i &lt; n; i++)<br>                for (int j = 0; j &lt; m; j++) {<br>                    go_down[i][j] = a[i][j];<br>                    if (i &gt; 0)<br>                        go_down[i][j] = Math.max(go_down[i][j],<br>                                go_down[i - 1][j] + 1);<br>                }<br>            int[][] go_up = new int[n][m];<br>            for (int i = n - 1; i &gt;= 0; i--)<br>                for (int j = 0; j &lt; m; j++) {<br>                    go_up[i][j] = a[i][j];<br>                    if (i &lt; n - 1)<br>                        go_up[i][j] = Math.max(go_up[i][j],<br>                                go_up[i + 1][j] + 1);<br>                }<br>            int max_go_down = n - 1;<br>            for (int i = 0; i &lt; n; i++)<br>                for (int j = 0; j &lt; m; j++)<br>                    if (go_down[i][j] &gt; st[i][j])<br>                        max_go_down = Math.min(max_go_down, i - 1);<br>            int min_go_up = 0;<br>            for (int i = 0; i &lt; n; i++)<br>                for (int j = 0; j &lt; m; j++)<br>                    if (go_up[i][j] &gt; st[i][j])<br>                        min_go_up = Math.max(min_go_up, i + 1);<br>            int sum_up = 0;<br>            for (int i = 0; i &lt; n; i++)<br>                for (int j = 0; j &lt; m; j++)<br>                    sum_up += go_up[i][j];<br>            int sum_down = 0;<br>            for (int del = 0; del &lt; n; del++) {<br>                for (int j = 0; j &lt; m; j++)<br>                    sum_up -= go_up[del][j];<br>                int res = 0;<br>                for (int j = 0; j &lt; m; j++)<br>                    res += Math.max(go_up[del][j], go_down[del][j]);<br>                res += sum_up + sum_down;<br>                if (del &lt;= max_go_down &amp;&amp; del &gt;= min_go_up)<br>                    ans = Math.min(ans, res);<br>                for (int j = 0; j &lt; m; j++)<br>                    sum_down += go_down[del][j];<br>            }<br>        }<br>        if (ans == Integer.MAX_VALUE)<br>            ans = -1;<br>        return ans;<br>    }<br><br>}<br></td>