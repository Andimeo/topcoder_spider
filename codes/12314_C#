<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections;<br>using System.Collections.Generic;<br>using System.Collections.Specialized;<br>using System.Text;<br>using System.Text.RegularExpressions;<br> <br> <br>public class ICPCBalloons<br>{<br>    public int minRepaintings(int[] balloonCount, string balloonSize, int[] maxAccepted)<br>    {<br>        int ans = -1;<br>        List&lt;int&gt; haveL = new List&lt;int&gt;();<br>        List&lt;int&gt; haveM = new List&lt;int&gt;();<br>        int sumL = 0;<br>        int sumM = 0;<br>        for (int i = 0; i &lt; balloonCount.Length; i++)<br>        {<br>            if (balloonSize[i] == 'L')<br>            {<br>                haveL.Add(balloonCount[i]);<br>                sumL += balloonCount[i];<br>            }<br>            else<br>            {<br>                haveM.Add(balloonCount[i]);<br>                sumM += balloonCount[i];<br>            }<br>        }<br>        haveL.Sort();<br>        haveL.Reverse();<br>        haveM.Sort();<br>        haveM.Reverse();<br>        Array.Sort(maxAccepted);<br>        Array.Reverse(maxAccepted);<br>        int[] L = haveL.ToArray();<br>        int[] M = haveM.ToArray();<br>        for (int i = 0; i &lt; (1 &lt;&lt; maxAccepted.Length); i++)<br>        {<br>            int thisL = 0;<br>            int thisM = 0;<br>            int iL = 0;<br>            int iM = 0;<br>            int cur = 0;<br>            bool ok = true;<br>            for (int j = 0; j &lt; maxAccepted.Length; j++)<br>            {<br>                if ((i &amp; (1 &lt;&lt; j)) &gt; 0)<br>                {<br>                    thisL += maxAccepted[j];<br>                    if (iL == L.Length)<br>                    {<br>                        cur += maxAccepted[j];<br>                    }<br>                    else if (L[iL] &gt;= maxAccepted[j])<br>                    {<br>                        iL++;<br>                    }<br>                    else<br>                    {<br>                        cur += maxAccepted[j] - L[iL];<br>                        iL++;<br>                    }<br>                }<br>                else<br>                {<br>                    thisM += maxAccepted[j];<br>                    if (iM == M.Length)<br>                    {<br>                        cur += maxAccepted[j];<br>                    }<br>                    else if (M[iM] &gt;= maxAccepted[j])<br>                    {<br>                        iM++;<br>                    }<br>                    else<br>                    {<br>                        cur += maxAccepted[j] - M[iM];<br>                        iM++;<br>                    }<br>                }<br>            }<br>            if (thisL &gt; sumL || thisM &gt; sumM) ok = false;<br>            if (ok &amp;&amp; (ans == -1 || cur &lt; ans))<br>                ans = cur;<br>        }<br>        return ans;<br>    }<br> <br>}<br>//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!<br></td>