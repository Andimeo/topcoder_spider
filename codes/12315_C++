<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;vector&gt;<br>#include &lt;list&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;deque&gt;<br>#include &lt;stack&gt;<br>#include &lt;bitset&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;functional&gt;<br>#include &lt;numeric&gt;<br>#include &lt;utility&gt;<br>#include &lt;sstream&gt;<br>#include &lt;iostream&gt;<br>#include &lt;iomanip&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cstring&gt;<br>#include &lt;ctime&gt;<br> <br>using namespace std;<br> <br>class RandomOption {<br>public:<br>  double getProbability(int, vector &lt;int&gt;, vector &lt;int&gt;);<br>};<br>long long dp[1&lt;&lt;14][14];<br>int c[14][14];<br>double RandomOption::getProbability(int keyCount, vector &lt;int&gt; badLane1, vector &lt;int&gt; badLane2) {<br>  int i, j, k, n = badLane1.size();<br>  memset(c, 0, sizeof(c));<br>  memset(dp, 0, sizeof(dp));<br>  for (i = 0; i &lt; n; i++){<br>      c[badLane1[i]][badLane2[i]] = 1;<br>      c[badLane2[i]][badLane1[i]] = 1;<br>  }<br>  for (i = 0; i &lt; keyCount; i++){<br>      dp[1&lt;&lt;i][i] = 1;<br>  }<br>  for (k = 1; k &lt; (1&lt;&lt;keyCount); k++){<br>      for (i = 0; i &lt; keyCount; i++){<br>          if (dp[k][i] == 0) continue;<br>          for (j = 0; j &lt; keyCount; j++){<br>              if (k &amp; (1&lt;&lt;j)) continue;<br>              if (c[i][j]) continue;<br>              dp[k | (1&lt;&lt;j)][j] += dp[k][i];<br>          }<br>      }<br>  }<br>  double ans = 0;<br>  for (i = 0; i &lt; keyCount; i++){<br>      ans += dp[(1&lt;&lt;keyCount) - 1][i];<br>  }<br>  for (i = 0; i &lt; keyCount; i++) ans /= i + 1;<br>  return ans;<br>}<br> <br> <br>//Powered by [KawigiEdit] 2.0!<br></td>