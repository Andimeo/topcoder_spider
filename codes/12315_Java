<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>public class RandomOption<br>  {<br>  /*<br>   * Simple bitmask code for boolean isset, int set and int clr<br>   */<br>  public static boolean isset(int n,int i) //returns 1 if the ith bit (from left) of n is set<br>    {<br>    return ((n&gt;&gt;i)&amp;1)==1;<br>    }<br><br>  public static int clr(int n,int i) //makes the ith bit (from left) of n=0<br>    {<br>    return n&amp;(~(1&lt;&lt;i));<br>    }<br><br>  public double getProbability(int N, int[] badLane1, int[] badLane2)<br>    {<br>    //make lookups faster<br>    HashSet&lt;Integer&gt; C[]=new HashSet[N];<br>    for(int i=0;i&lt;N;i++)<br>      C[i]=new HashSet&lt;Integer&gt;();<br>    for(int i=0;i&lt;badLane1.length;i++)<br>      {<br>      C[badLane1[i]].add(badLane2[i]);<br>      C[badLane2[i]].add(badLane1[i]);<br>      }<br>    // DP[mask][j] is the number of possible ways using keys in mask<br>    // and the last key lane is <br>    long DP[][]=new long[1&lt;&lt;N][N];<br>    for(int i=0;i&lt;N;i++)<br>      DP[1&lt;&lt;i][i]=1;<br>    for(int mask=0;mask&lt;1&lt;&lt;N;mask++)<br>      {<br>      for(int last=0;last&lt;N;last++)<br>        {<br>        if(!isset(mask,last))<br>          continue;<br>        for(int j=0;j&lt;N;j++)<br>          {<br>          if(isset(mask,j)&amp;&amp;!C[last].contains(j))<br>            {<br>            DP[mask][last]+=DP[clr(mask,last)][j];<br>            //System.out.println("using "+binary(clr(mask,last),N)+" with end = "+j +" for "+binary(mask,N)+" with end = "+last);<br>            }<br>          }<br>        }<br>      }<br>    long tot=0;<br>    for(int i=0;i&lt;N;i++)<br>      tot+=DP[(1&lt;&lt;N)-1][i];<br>    return (double)tot/fact(N);<br>    }<br>  <br>  public static long fact(int n)<br>    {<br>    long ans=1;<br>    while (n&gt;0)<br>      {<br>      ans=ans*n;<br>      n--;<br>      }<br>    return ans;<br>    }<br>  public String binary(int a, int len)<br>    {<br>    String s=Integer.toBinaryString(a);<br>    while(s.length()!=len)<br>      s="0"+s;<br>    return s;<br>    }<br>  }<br><br><br>// Powered by FileEdit<br>// Powered by CodeProcessor<br></td>