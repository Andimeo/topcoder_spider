<td class="problemText" colspan="8" valign="middle" align="left">
            #include&lt;vector&gt;<br>#include&lt;string&gt;<br>#include&lt;algorithm&gt;<br>#include&lt;set&gt;<br>#include&lt;map&gt;<br>#include&lt;queue&gt;<br>#include&lt;cmath&gt;<br>#include&lt;cstdio&gt;<br>#include&lt;iostream&gt;<br>#include&lt;sstream&gt;<br>#include&lt;cstdlib&gt;<br>#define MOD<br>#define ADD(X,Y) ((X) = ((X) + (Y)%MOD) % MOD)<br>using namespace std;<br>typedef long long i64; typedef vector&lt;int&gt; ivec; typedef vector&lt;string&gt; svec;<br><br>int uf[100];<br><br>int root(int p)<br>{<br>  return (uf[p]&lt;0) ? p : (uf[p] = root(uf[p]));<br>}<br><br>void join(int p, int q)<br>{<br>  p = root(p); q = root(q); if(p==q) return;<br>  uf[p] += uf[q];<br>  uf[q] = p;<br>}<br><br>bool sameside(int p, int q)<br>{<br>  if(root(p*2) == root(q*2+1)) return true;<br>  join(p*2, q*2);<br>  join(p*2+1, q*2+1);<br>  return false;<br>}<br><br>bool diffside(int p, int q)<br>{<br>  if(root(p*2) == root(q*2)) return true;<br>  join(p*2, q*2+1);<br>  join(p*2+1, q*2);<br>  return false;<br>}<br><br>class ThreeColorability<br>{<br>  svec C;<br>  int H, W;<br><br>  bool judge()<br>  {<br>    for(int i=0;i&lt;100;i++) uf[i] = -1;<br><br>    for(int i=0;i&lt;H;i++){<br>      int bp = -1;<br>      for(int j=0;j&lt;W;j++) if(C[i][j] != '?'){<br>        if(bp==-1) bp = j;<br>        else{<br>          if(C[i][bp] == C[i][j]){<br>            if(sameside(bp, j)) return false;<br>          }else{<br>            if(diffside(bp, j)) return false;<br>          }<br>        }<br>      }<br>    }<br><br>    for(int i=0;i&lt;100;i++) uf[i] = -1;<br>    for(int j=0;j&lt;W;j++){<br>      int bp = -1;<br>      for(int i=0;i&lt;H;i++) if(C[i][j] != '?'){<br>        if(bp==-1) bp = i;<br>        else{<br>          if(C[bp][j] == C[i][j]){<br>            if(sameside(bp, i)) return false;<br>          }else{<br>            if(diffside(bp, i)) return false;<br>          }<br>        }<br>      }<br>    }<br><br>    return true;<br>  }<br><br>public:<br>  vector &lt;string&gt; lexSmallest(svec Cv)<br>  {<br>    C = Cv;<br>    H = C.size(); W = C[0].size();<br><br>    if(!judge()) return vector&lt;string&gt;();<br>    for(int i=0;i&lt;H;i++)<br>      for(int j=0;j&lt;W;j++) if(C[i][j] == '?'){<br>        C[i][j] = 'N';<br>        if(!judge()) C[i][j] = 'Z';<br>      }<br><br>    return C;<br>  }<br>  <br><br>};<br><br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003]<br>// Powered by CodeProcessor<br></td>