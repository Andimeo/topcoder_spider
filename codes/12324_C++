<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;iostream&gt;<br>#include &lt;vector&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstring&gt;<br>#include &lt;string&gt;<br>using namespace std;<br><br>const int INF = 1000000000;<br><br>class MarblePositioning {<br>public:<br>    double cal_center(double c1, double r1, double r2) {<br>        return c1 + 2 * sqrt(r1 * r2);<br>    }<br><br><br>    double totalWidth(vector &lt;int&gt; r) {<br>        vector&lt;int&gt; p;<br>        int times = 1;<br>        for (int i = 0; i &lt; r.size(); ++i) {<br>            p.push_back(i);<br>            times *= (i + 1);<br>        }<br>        <br>        double ans = 1e100;<br>        double c[10];<br>        for (int i = 0; i &lt; times; ++i) {<br>            c[p[0]] = 0;<br>            for (int j = 1; j &lt; r.size(); ++j) {<br>                double tmp = 0, tmp2;<br>                for (int k = 0; k &lt; j; ++k) {<br>                    tmp2 = cal_center(c[p[k]], r[p[k]], r[p[j]]);<br>                    if (tmp2 &gt; tmp) tmp = tmp2;<br>                }<br>                c[p[j]] = tmp;<br>            }<br>            if (c[p[r.size() - 1]] &lt; ans) ans = c[p[r.size() - 1]];<br>        <br>            next_permutation(p.begin(), p.end());<br>        }<br>        <br>        return ans;<br>    }<br>};<br></td>