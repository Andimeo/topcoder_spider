<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br> <br>public class MarblePositioning{<br>    public double totalWidth(int[] radius){<br>        permute(radius, 0);<br>        return min_dist;<br>    }<br>    <br>    void permute(int[] radius, int start){<br>      if (start == radius.length){<br>        //compute dist<br>        double dist = 0;<br>        <br>        double[] pos = new double[radius.length];<br>        pos[0] = 0;<br>        for(int i=1; i &lt; radius.length; i++){<br>          double max_pos = 0;<br>          for(int j = 0; j &lt; i; j++){<br>            long h = (radius[j]+radius[i]);<br>            long s = (radius[j]-radius[i]);<br>            if (Math.sqrt(h*h - s*s) + pos[j] &gt; max_pos){<br>              max_pos = Math.sqrt(h*h - s*s) + pos[j];<br>            }<br>          }<br>          pos[i] = max_pos;<br>        }<br>        if (pos[radius.length-1] &lt; min_dist)<br>          min_dist = pos[radius.length-1];<br>      }<br>      for(int i = start; i &lt; radius.length; i++){<br>        swap(radius, i, start);<br>        permute(radius, start+1);<br>        swap(radius, i, start);<br>      }<br>    }<br>    <br>    void swap(int[] arr, int i, int j){<br>      int t = arr[i];<br>      arr[i] = arr[j];<br>      arr[j] =t;<br>    }<br>    <br>    double min_dist=Long.MAX_VALUE;<br>}<br></td>