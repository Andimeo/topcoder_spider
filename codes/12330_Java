<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.Arrays;<br> <br>/**<br> * Built using CHelper plug-in<br> * Actual solution is at the top<br> */<br>public class CoinsGame {<br>    static final int[] dr = new int[]{-1, 0, 1, 0};<br>    static final int[] dc = new int[]{0, -1, 0, 1};<br>    static final long MODULO = (long) (1e9 + 9);<br> <br>  public int ways(String[] board) {<br>        int height = board.length;<br>        int width = board[0].length();<br>        int[][] next = new int[height * width][4];<br>        boolean[] exists = new boolean[height * width];<br>        for (int r = 0; r &lt; height; ++r)<br>            for (int c = 0; c &lt; width; ++c)<br>                if (board[r].charAt(c) == '.') {<br>                    exists[r * width + c] = true;<br>                    for (int i = 0; i &lt; 4; ++i) {<br>                        int nr = r + dr[i];<br>                        int nc = c + dc[i];<br>                        if (nr &lt; 0 || nc &lt; 0 || nr &gt;= height || nc &gt;= width) {<br>                            next[r * width + c][i] = -1;<br>                        } else {<br>                            if (board[nr].charAt(nc) == '.') {<br>                                next[r * width + c][i] = nr * width + nc;<br>                            } else {<br>                                next[r * width + c][i] = r * width + c;<br>                            }<br>                        }<br>                    }<br>                }<br>        int n = height * width;<br>        int[] color = new int[n + 10];<br>        int[] nextSame = new int[n + 10];<br>        int[] first = new int[n + 10];<br>        int[] bycolor = new int[n + 10];<br>        int[] bycolorgen = new int[n + 10];<br>        int numColors = 1;<br>        int[] ncolor = new int[n + 10];<br>        int lastgen = 0;<br>        while (true) {<br>            int oldNumColors = numColors;<br>            for (int dir = 0; dir &lt; 4; ++dir) {<br>                Arrays.fill(first, 0, numColors, -1);<br>                for (int i = 0; i &lt; n; ++i) if (exists[i]) {<br>                    nextSame[i] = first[color[i]];<br>                    first[color[i]] = i;<br>                }<br>                int newNumColors = 0;<br>                for (int col = 0; col &lt; numColors; ++col) {<br>                    ++lastgen;<br>                    int cur = first[col];<br>                    while (cur &gt;= 0) {<br>                        int dcolor = next[cur][dir];<br>                        if (dcolor &gt;= 0) dcolor = color[dcolor];<br>                        ++dcolor;<br>                        if (bycolorgen[dcolor] &lt; lastgen) {<br>                            bycolorgen[dcolor] = lastgen;<br>                            bycolor[dcolor] = newNumColors++;<br>                            ncolor[cur] = bycolor[dcolor];<br>                        } else {<br>                            ncolor[cur] = bycolor[dcolor];<br>                        }<br>                        cur = nextSame[cur];<br>                    }<br>                }<br>                numColors = newNumColors;<br>                int[] tmp = color;<br>                color = ncolor;<br>                ncolor = tmp;<br>            }<br>            if (oldNumColors == numColors) break;<br>        }<br>        long[] p2 = new long[n + 10];<br>        p2[0] = 1;<br>        for (int i = 1; i &lt; p2.length; ++i) p2[i] = p2[i - 1] * 2 % MODULO;<br>        int total = 0;<br>        int[] byColor = new int[n + 10];<br>        for (int i = 0; i &lt; n; ++i) if (exists[i]) {<br>            ++total;<br>            ++byColor[color[i]];<br>        }<br>        long res = p2[total] - 1;<br>        for (int i = 0; i &lt; numColors; ++i) {<br>            res -= p2[byColor[i]] - 1;<br>        }<br>        res %= MODULO;<br>        res += MODULO;<br>        res %= MODULO;<br>        return (int) res;<br>  }<br>}<br></td>