<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;cstdio&gt;<br>#include &lt;iostream&gt;<br>#include &lt;vector&gt;<br>#include &lt;algorithm&gt;<br>using namespace std;<br><br>int ans = 11;<br>int n, m;<br><br>int fell(int x, int y) {<br>  return x &lt; 0 || x &gt;= n || y &lt; 0 || y &gt;= m;<br>}<br><br>void move(int x1, int y1, int x2, int y2, int cur, vector&lt;string&gt; &amp;board) {<br>  if(cur &gt; 10) return;<br>  if(fell(x1, y1) &amp;&amp; fell(x2, y2)) return;<br>  if(fell(x1, y1) || fell(x2, y2)) {<br>    ans = min(ans, cur);<br>    return;<br>  }<br>  int dx[4] = {1, 0, -1, 0};<br>  int dy[4] = {0, 1, 0, -1};<br>  for(int i = 0; i &lt; 4; i++) {<br>    int nx1, nx2, ny1, ny2;<br>    nx1 = x1 + dx[i], ny1 = y1 + dy[i];<br>    if(!fell(nx1, ny1) &amp;&amp; board[nx1][ny1] == '#') {<br>      nx1 = x1, ny1 = y1;<br>    }<br>    nx2 = x2 + dx[i], ny2 = y2 + dy[i];<br>    if(!fell(nx2, ny2) &amp;&amp; board[nx2][ny2] == '#') {<br>      nx2 = x2, ny2 = y2;<br>    }<br>    move(nx1, ny1, nx2, ny2, cur + 1, board);<br>  }<br>}<br><br>class CoinsGameEasy {<br>public:<br>  int minimalSteps(vector&lt;string&gt; board) {<br>    int x[2], y[2];<br>    int cnt = 0;<br>    n = board.size(), m = board[0].size();<br>    for(int i = 0; i &lt; board.size(); i++) {<br>      for(int j = 0; j &lt; board[i].size(); j++) {<br>        if(board[i][j] == 'o') {<br>          x[cnt] = i;<br>          y[cnt] = j;<br>          cnt++;<br>        }<br>      }<br>    }<br>    move(x[0], y[0], x[1], y[1], 0, board);<br>    if(ans == 11) return -1;<br>    return ans;<br>  }<br>};<br></td>