<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.HashSet;<br>import java.util.LinkedList;<br><br>public class CoinsGameEasy {<br>    private static class Data {<br>        private int hash;<br>        int count;<br>        char[][] c;<br><br>        public Data(int count, char[][] c) {<br>            this.count = count;<br>            this.c = c;<br>            final int prime = 31;<br>            int result = 1;<br>            for (int i = 0; i &lt; c.length; i++) {<br>                for (int j = 0; j &lt; c[i].length; j++) {<br>                    result = prime * result + c[i][j];<br>                }<br>            }<br>            result = prime * result + count;<br>            hash = result;<br>        }<br><br>        @Override<br>        public int hashCode() {<br>            return hash;<br>        }<br><br>        @Override<br>        public boolean equals(Object obj) {<br>            if (this == obj)<br>                return true;<br>            if (obj == null)<br>                return false;<br>            if (getClass() != obj.getClass())<br>                return false;<br>            Data other = (Data) obj;<br>            for (int i = 0; i &lt; c.length; i++) {<br>                for (int j = 0; j &lt; c[i].length; j++) {<br>                    if (c[i][j] != other.c[i][j])<br>                        return false;<br>                }<br>            }<br>            if (count != other.count)<br>                return false;<br>            return true;<br>        }<br>    }<br><br>    public int minimalSteps(String[] board) {<br>        return breadthFirstSearch(board);<br>    }<br><br>    private static int breadthFirstSearch(String[] board) {<br>        char[][] c = new char[board.length][];<br>        for (int i = 0; i &lt; c.length; i++) {<br>            c[i] = board[i].toCharArray();<br>        }<br>        LinkedList&lt;Data&gt; list = new LinkedList&lt;Data&gt;();<br>        HashSet&lt;Data&gt; used = new HashSet&lt;Data&gt;();<br>        {<br>            Data d = new Data(0, c);<br>            list.add(d);<br>            used.add(d);<br>        }<br><br>        for (; !list.isEmpty();) {<br>            Data d = list.poll();<br><br>            if (d.count &gt; 10) {<br>                return -1;<br>            }<br><br>            int count = 0;<br>            for (int i = 0; i &lt; d.c.length; i++) {<br>                for (int j = 0; j &lt; d.c[i].length; j++) {<br>                    if ('o' == d.c[i][j]) {<br>                        count++;<br>                    }<br>                }<br>            }<br>            if (count == 1) {<br>                return d.count;<br>            }<br><br>            // up<br>            {<br>                char[][] copy = copy(d);<br>                for (int i = 0; i &lt; copy.length; i++) {<br>                    for (int j = 0; j &lt; copy[i].length; j++) {<br>                        if ('o' == copy[i][j]) {<br>                            if (i == 0) {<br>                                copy[i][j] = '.';<br>                                continue;<br>                            }<br>                            if (copy[i - 1][j] == '.') {<br>                                copy[i - 1][j] = 'o';<br>                                copy[i][j] = '.';<br>                            }<br>                        }<br>                    }<br>                }<br>                {<br>                    Data next = new Data(d.count + 1, copy);<br>                    if (!used.contains(next)) {<br>                        list.add(next);<br>                        used.add(next);<br>                    }<br>                }<br>            }<br>            // down<br>            {<br>                char[][] copy = copy(d);<br>                for (int i = copy.length - 1; i &gt;= 0; i--) {<br>                    for (int j = 0; j &lt; copy[i].length; j++) {<br>                        if ('o' == copy[i][j]) {<br>                            if (i == copy.length - 1) {<br>                                copy[i][j] = '.';<br>                                continue;<br>                            }<br>                            if (copy[i + 1][j] == '.') {<br>                                copy[i + 1][j] = 'o';<br>                                copy[i][j] = '.';<br>                            }<br>                        }<br>                    }<br>                }<br>                {<br>                    Data next = new Data(d.count + 1, copy);<br>                    if (!used.contains(next)) {<br>                        list.add(next);<br>                        used.add(next);<br>                    }<br>                }<br>            }<br>            // left<br>            {<br>                char[][] copy = copy(d);<br>                for (int i = 0; i &lt; copy.length; i++) {<br>                    for (int j = 0; j &lt; copy[i].length; j++) {<br>                        if ('o' == copy[i][j]) {<br>                            if (j == 0) {<br>                                copy[i][j] = '.';<br>                                continue;<br>                            }<br>                            if (copy[i][j - 1] == '.') {<br>                                copy[i][j - 1] = 'o';<br>                                copy[i][j] = '.';<br>                            }<br>                        }<br>                    }<br>                }<br>                {<br>                    Data next = new Data(d.count + 1, copy);<br>                    if (!used.contains(next)) {<br>                        list.add(next);<br>                        used.add(next);<br>                    }<br>                }<br>            }// right<br>            {<br>                char[][] copy = copy(d);<br>                for (int i = 0; i &lt; copy.length; i++) {<br>                    for (int j = copy[i].length - 1; j &gt;= 0; j--) {<br>                        if ('o' == copy[i][j]) {<br>                            if (j == copy[i].length - 1) {<br>                                copy[i][j] = '.';<br>                                continue;<br>                            }<br>                            if (copy[i][j + 1] == '.') {<br>                                copy[i][j + 1] = 'o';<br>                                copy[i][j] = '.';<br>                            }<br>                        }<br>                    }<br>                }<br>                {<br>                    Data next = new Data(d.count + 1, copy);<br>                    if (!used.contains(next)) {<br>                        list.add(next);<br>                        used.add(next);<br>                    }<br>                }<br>            }<br>        }<br>        return -1;<br>    }<br>    public static char[][] copy(Data d) {<br>        char[][] copy = new char[d.c.length][d.c[0].length];<br>        for (int i = 0; i &lt; d.c.length; i++) {<br>            for (int j = 0; j &lt; d.c[i].length; j++) {<br>                copy[i][j] = d.c[i][j];<br>            }<br>        }<br>        return copy;<br>    }<br>    <br>}<br></td>