<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections;<br>using System.Collections.Generic;<br>using System.Collections.Specialized;<br>using System.Text;<br>using System.Text.RegularExpressions;<br> <br> <br>public class PenguinSledding<br>{<br>  public long countDesigns(int numCheckpoints, int[] checkpoint1, int[] checkpoint2)<br>  {<br>      long ret = 0;<br>        bool[,] edge = new bool[numCheckpoints+1,numCheckpoints+1];<br>      for (int i = 0; i &lt; checkpoint1.Length; i++)<br>      {<br>            edge[checkpoint1[i], checkpoint2[i]] = true;<br>            edge[checkpoint2[i], checkpoint1[i]] = true;<br>        }<br>      for (int i = 1; i &lt; numCheckpoints+1; i++)<br>      {<br>          int cnt = 0;<br>          for (int j = 0; j &lt; checkpoint1.Length; j++)<br>          {<br>              if (checkpoint1[j]==i||checkpoint2[j]==i)<br>              {<br>                  ++cnt;<br>              }<br> <br>          }<br>          if (cnt&gt;1)<br>          {<br>                ret = ret + (((long)1L) &lt;&lt; cnt) - cnt - 1;    <br>          }<br>          <br>      }<br>      for (int i = 1; i &lt; numCheckpoints+1; i++)<br>      {<br>            for (int j = i + 1; j &lt; numCheckpoints + 1; j++)<br>          {<br>                for (int k = j + 1; k &lt; numCheckpoints + 1; k++)<br>              {<br>                  if (edge[i,j]&amp;&amp;edge[j,k]&amp;&amp;edge[k,i])<br>                  {<br>                      ++ret;<br>                  }<br>              }<br>          }<br>      }<br>      ret = ret + checkpoint1.Length + 1;<br>      return ret;<br>  }<br> <br> <br>}<br>//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!<br></td>