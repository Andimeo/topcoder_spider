<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>import static java.lang.Math.*;<br>import static java.util.Arrays.*;<br> <br>public class DefectiveAddition {<br>  <br>  long M = 1000000007;<br>  <br>  public int count(int[] cards, int n) {<br>    int N = cards.length;<br>    long res = 0;<br>    for (int i = 1 &lt;&lt; 30; i &gt; 0; i &gt;&gt;= 1) {<br>      int bit = 0;<br>      for (int j = 0; j &lt; N; j++) {<br>        if (cards[j] &gt;= i) {<br>          long add = 1;<br>          for (int k = 0; k &lt; j; k++) add = (add * (cards[k] + 1)) % M;<br>          long[] dp = new long[2];<br>          dp[bit] = 1;<br>          for (int k = j + 1; k &lt; N; k++) {<br>            long[] next = new long[2];<br>            if (cards[k] &gt;= i) {<br>              for (int a = 0; a &lt; 2; a++) {<br>                next[a] = (dp[a] * i) % M;<br>              }<br>              for (int a = 0; a &lt; 2; a++) {<br>                next[a] = (next[a] + dp[a ^ 1] * (cards[k] - i + 1)) % M;<br>              }<br>            } else {<br>              for (int a = 0; a &lt; 2; a++) {<br>                next[a] = (dp[a] * (cards[k] + 1)) % M;<br>              }<br>            }<br>            dp = next;<br>          }<br>          if ((n &amp; i) != 0) add = (add * dp[1]) % M;<br>          else add = (add * dp[0]) % M;<br>          res = (res + add) % M;<br>          bit ^= 1;<br>          cards[j] -= i;<br>        }<br>      }<br>      if ((bit != 0) ^ ((n &amp; i) != 0)) break;<br>      if (i == 1) res = (res + 1) % M;<br>    }<br>    debug(res);<br>    return (int)(res % M);<br>  }<br>  <br>  void debug(Object...os) {<br>    System.err.println(deepToString(os));<br>  }<br>  <br>}<br></td>