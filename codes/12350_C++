<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;algorithm&gt;<br>#include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;queue&gt;<br>#include &lt;iostream&gt;<br>#include &lt;cmath&gt;<br>#include &lt;sstream&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;functional&gt;<br>using namespace std;<br>#define pb push_back<br>#define INF 1000000000<br>#define L(s) (int)((s).size())<br>#define FOR(i,a,b) for (int _n(b), i(a); i &lt;= _n; i++)<br>#define FORD(i,a,b) for(int i=(a),_b=(b);i&gt;=_b;i--)<br>#define rep(i,n) FOR(i,1,(n))<br>#define rept(i,n) FOR(i,0,(n)-1)<br>#define C(a) memset((a),0,sizeof(a))<br>#define ll long long<br><br>ll dp[51][111];<br>inline void upd(ll &amp;a, ll b) {<br>  if (b &gt; a) a = b;<br>}<br>class MonstersValley <br>  {<br>    public:<br>       int minimumPrice( vector&lt;long long&gt; dread, vector &lt;int&gt; price )<br>    {<br>      memset(dp, -1, sizeof(dp));<br>      int n = L(dread);<br>      dp[0][0] = 0;<br>      rept(i, n) {<br>        rept(j, 2 * n + 1) {<br>          if (dp[i][j] == -1) continue;<br>          upd(dp[i + 1][j + price[i]], dp[i][j] + dread[i]);<br>          if (dp[i][j] &gt;= dread[i]) upd(dp[i + 1][j], dp[i][j]);<br>        }<br>      }<br>      rept(i, 111) {<br>        if (dp[n][i] != -1) return i;<br>      }<br>      return -1;<br>    }<br>  };<br><br><br><br>// Powered by FileEdit<br>// Powered by moj 4.17 [modified TZTester]<br>// Powered by CodeProcessor<br></td>