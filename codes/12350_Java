<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.Arrays;<br> <br>/**<br> * Built using CHelper plug-in<br> * Actual solution is at the top<br> */<br>public class MonstersValley {<br>  public int minimumPrice(long[] dread, int[] price) {<br>        int n = dread.length;<br>        int maxSpend = 2 * n;<br>        long[] maxParty = new long[maxSpend + 1];<br>        Arrays.fill(maxParty, -1);<br>        maxParty[0] = 0;<br>        for (int i = 0; i &lt; n; ++i) {<br>            long[] newMaxParty = new long[maxSpend + 1];<br>            Arrays.fill(newMaxParty, -1);<br>            for (int oldSpend = 0; oldSpend &lt;= maxSpend; ++oldSpend)<br>                if (maxParty[oldSpend] &gt;= 0) {<br>                    newMaxParty[oldSpend + price[i]] = Math.max(newMaxParty[oldSpend + price[i]], maxParty[oldSpend] + dread[i]);<br>                    if (maxParty[oldSpend] &gt;= dread[i])<br>                        newMaxParty[oldSpend] = Math.max(newMaxParty[oldSpend], maxParty[oldSpend]);<br>                }<br>            maxParty = newMaxParty;<br>        }<br>        for (int spend = 0; spend &lt;= maxSpend; ++spend)<br>            if (maxParty[spend] &gt;= 0)<br>                return spend;<br>        throw new RuntimeException();<br>  }<br>}<br></td>