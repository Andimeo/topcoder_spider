<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;vector&gt;<br>#include &lt;list&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;deque&gt;<br>#include &lt;stack&gt;<br>#include &lt;bitset&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;functional&gt;<br>#include &lt;numeric&gt;<br>#include &lt;utility&gt;<br>#include &lt;sstream&gt;<br>#include &lt;iostream&gt;<br>#include &lt;iomanip&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;ctime&gt;<br> <br>using namespace std;<br> <br>class UnknownTree {<br>public:<br>  int getCount(vector &lt;int&gt;, vector &lt;int&gt;, vector &lt;int&gt;);<br>};<br> <br>const int md = 1000000009;<br> <br>vector &lt; pair &lt;int, int&gt; &gt; v[7];<br> <br>int get_res(vector &lt; pair&lt;int, int&gt; &gt; V) {<br>  int i, j, res = 1;<br>  sort(V.begin(), V.end());<br>  int sz = V.size();<br>  i = 0;<br>  while (i &lt; sz) {<br>    j = i;<br>    while (j &lt; sz &amp;&amp; V[i].first == V[j].first) j++;<br>    if (V[i].second != 0) res = 0;<br>    for (int k=i+1;k&lt;j;k++) {<br>      int cnt = 0;<br>      for (int p=i;p&lt;k;p++)<br>        if (V[p].second &lt; V[k].second) cnt++;<br>      res = (long long)res*cnt % md;<br>    }<br>    i = j;<br>  }<br>  return res;<br>}<br> <br>int mabs(int x) {<br>  return (x &lt; 0) ? -x : x;<br>}<br> <br>int UnknownTree::getCount(vector &lt;int&gt; dA, vector &lt;int&gt; dB, vector &lt;int&gt; dC) {<br>  int n = dA.size(), i, j, ans = 0;<br>  int min = (int)1e9, km = -1;<br>  for (i=0;i&lt;n;i++) {<br>    int cur = dA[i]+dB[i]+dC[i];<br>    if (cur &lt; min) min = cur, km = i; else<br>    if (cur == min) km = -1;<br>  }<br>  if (km != -1) {<br>    int center = km;<br>    int dAc = dA[center], dBc = dB[center], dCc = dC[center], ok = 1;<br>    for (i=0;i&lt;4;i++) v[i].clear();<br>    v[0].push_back(make_pair(0, 0));<br>    v[1].push_back(make_pair(dAc, 0));<br>    v[2].push_back(make_pair(dBc, 0));<br>    v[3].push_back(make_pair(dCc, 0));<br>    for (i=0;i&lt;n;i++) {<br>      if (i == center) continue;<br>      int qa = dA[i]-dAc, qb = dB[i]-dBc, qc = dC[i]-dCc;<br>      if (qa != qb &amp;&amp; qa != qc &amp;&amp; qb != qc) {<br>        ok = 0;<br>        break;<br>      }<br>      if (qa == qb &amp;&amp; qa == qc &amp;&amp; qb == qc) {<br>        v[0].push_back(make_pair(0, qa));<br>        continue;<br>      }<br>      if (qb == qc) {<br>        int t1 = qb-qa, t2 = qb+qa;<br>        if (t1 &lt; 0 || t1 % 2 != 0 || t2 &lt; 0 || t2 % 2 != 0) ok = 0;<br>        v[1].push_back(make_pair(t1/2, t2/2));<br>      } <br>      if (qa == qc) {<br>        int t1 = qa-qb, t2 = qa+qb;<br>        if (t1 &lt; 0 || t1 % 2 != 0 || t2 &lt; 0 || t2 % 2 != 0) ok = 0;<br>        v[2].push_back(make_pair(t1/2, t2/2));<br>      } <br>      if (qa == qb) {<br>        int t1 = qa-qc, t2 = qa+qc;<br>        if (t1 &lt; 0 || t1 % 2 != 0 || t2 &lt; 0 || t2 % 2 != 0) ok = 0;<br>        v[3].push_back(make_pair(t1/2, t2/2));<br>      } <br>      if (!ok) break;<br>    }<br>    if (ok) {<br>      int res = 1;<br>      for (int z=0;z&lt;4;z++) {<br>        res = (long long)res*get_res(v[z]) % md;<br>      }<br>      ans = (ans+res) % md;<br>    }<br>  }<br> <br>  for (int rot=0;rot&lt;3;rot++) {<br>    int min = (int)1e9, km = 0, mi[77];<br>    for (i=0;i&lt;n;i++) {<br>      int ft = dA[i]+dC[i];<br>      if (ft &lt; min) {<br>        min = ft;<br>        km = 0;<br>      }<br>      if (ft == min) mi[km++] = i;<br>    }<br>    for (i=0;i&lt;km;i++)<br>      for (j=i+1;j&lt;km;j++)<br>        if (dA[mi[i]] &gt; dA[mi[j]]) {<br>          int tmp = mi[i]; mi[i] = mi[j]; mi[j] = tmp;<br>        }<br>    int ok = 1;<br>    for (i=0;i&lt;km-1;i++)<br>      if (dA[mi[i]] == dA[mi[i+1]]) ok = 0;<br>    if (ok) {<br>      for (int w=0;w&lt;2;w++) {<br>        int dAB;<br>        if (w == 0) dAB = dA[mi[0]]+dB[mi[0]];<br>        else dAB = dA[mi[0]]-dB[mi[0]];<br>        if (dAB &lt;= 0 || dAB &gt;= min) continue;<br>        int err = 0;<br>        for (i=0;i&lt;km;i++) {<br>          int dd = dAB-dA[mi[i]];<br>          if (dd &lt; 0) dd = -dd;<br>          if (dd != dB[mi[i]]) err = 1;<br>        }<br>        if (err) continue;<br>        for (i=0;i&lt;3;i++) v[i].clear();<br>        v[0].push_back(make_pair(0, 0));<br>        v[2].push_back(make_pair(dAB, 0));<br>        v[1].push_back(make_pair(min-dAB, 0));<br>        for (i=0;i&lt;n;i++) {<br>          bool w1 = (dA[i]-dB[i] == dAB);<br>          bool w2 = (dC[i]-dB[i] == min-dAB);<br>          if (!w1 &amp;&amp; !w2) {<br>            err = 1;<br>            break;<br>          }<br>          if (w1 &amp;&amp; w2) {<br>            v[0].push_back(make_pair(0, dB[i]));<br>            continue;<br>          }<br>          if (w1) {<br>            int t2 = dB[i]+dC[i]-(min-dAB);<br>            int t1 = dB[i]-t2/2;<br>            if (t1 &lt;= 0 || t2 &lt; 0 || t2 % 2 == 1) err = 1;<br>            v[1].push_back(make_pair(t1, t2/2));<br>          }<br>          if (w2) {<br>            int t2 = dA[i]+dB[i]-dAB;<br>            int t1 = dB[i]-t2/2;<br>            if (t1 &lt;= 0 || t2 &lt; 0 || t2 % 2 == 1) err = 1;<br>            v[2].push_back(make_pair(t1, t2/2));<br>          }<br>          if (err) break;<br>        }<br>        if (err) continue;<br>        int res = 1;<br>        for (int z=0;z&lt;3;z++) {<br>          res = (long long)res*get_res(v[z]) % md;<br>        }<br>        ans = (ans+res) % md;<br>      }<br>    }<br>    vector &lt;int&gt; vtmp = dA;<br>    dA = dB;<br>    dB = dC;<br>    dC = vtmp;<br>  }<br>  <br>  for (int rot=0;rot&lt;3;rot++) {<br>    int dAB = mabs(dA[0]-dB[0]), dBC = mabs(dB[0]-dC[0]), ok = 1;<br>    for (i=0;i&lt;n;i++) {<br>      if (mabs(dA[i]-dB[i]) != dAB || mabs(dB[i]-dC[i]) != dBC) ok = 0;<br>      if (dB[i] &gt; dA[i] &amp;&amp; dB[i] &gt; dC[i]) ok = 0;<br>    }<br>    if (dAB == 0 || dBC == 0) ok = 0;<br>    if (ok) {<br>      for (i=0;i&lt;3;i++) v[i].clear();<br>      v[0].push_back(make_pair(0, 0));<br>      v[1].push_back(make_pair(dAB, 0));<br>      v[2].push_back(make_pair(dBC, 0));<br>      for (i=0;i&lt;n;i++) {<br>        if (dB[i] &lt; dA[i] &amp;&amp; dB[i] &lt; dC[i]) {<br>          v[0].push_back(make_pair(0, dB[i]));<br>        }<br>        if (dA[i] &lt; dB[i]) {<br>          v[1].push_back(make_pair(dAB, dA[i]));<br>        }<br>        if (dC[i] &lt; dB[i]) {<br>          v[2].push_back(make_pair(dBC, dC[i]));<br>        }<br>      }<br>      int res = 1;<br>      for (int z=0;z&lt;3;z++) {<br>        res = (long long)res*get_res(v[z]) % md;<br>      }<br>      ans = (ans+res) % md;<br>    }<br>    vector &lt;int&gt; vtmp = dA;<br>    dA = dB;<br>    dB = dC;<br>    dC = vtmp;<br>  }<br> <br>  return ans;<br>}<br> <br> <br>//Powered by [KawigiEdit] 2.0!<br></td>