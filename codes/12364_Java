<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.Arrays;<br> <br>/**<br> * Built using CHelper plug-in<br> * Actual solution is at the top<br> */<br>public class EqualSums {<br>    static final long MODULO = (long) (1e9 + 7);<br> <br>    int height;<br>    int width;<br>    boolean[] srow;<br>    boolean[] scol;<br>    long[] vrow;<br>    long[] vcol;<br>    String[] board;<br> <br>    public int count(String[] board) {<br>        this.board = board;<br>        height = board.length;<br>        width = board[0].length();<br>        srow = new boolean[height];<br>        scol = new boolean[width];<br>        vrow = new long[height];<br>        vcol = new long[width];<br>        long[] res = new long[]{1, 0};<br>        for (int i = 0; i &lt; height; ++i) if (!srow[i]) {<br>            long[] cur = dorow(i);<br>            long[] nres = new long[2];<br>            for (int j = 0; j &lt; 2; ++j)<br>                for (int k = 0; k &lt; 2; ++k) {<br>                    nres[Math.max(j, k)] += res[j] * cur[k];<br>                }<br>            for (int j = 0; j &lt; 2; ++j)<br>                res[j] = nres[j] % MODULO;<br>        }<br>        for (int i = 0; i &lt; width; ++i) if (!scol[i]) {<br>            long[] cur = docol(i);<br>            long[] nres = new long[2];<br>            for (int j = 0; j &lt; 2; ++j)<br>                for (int k = 0; k &lt; 2; ++k) {<br>                    nres[Math.max(j, k)] += res[j] * cur[k];<br>                }<br>            for (int j = 0; j &lt; 2; ++j)<br>                res[j] = nres[j] % MODULO;<br>        }<br>        return (int) res[1];<br>    }<br> <br>    private long[] docol(int col) {<br>        long[] res = new long[2];<br>        for (int value = 0; value &lt;= 10; ++value) {<br>            Arrays.fill(vrow, -1);<br>            Arrays.fill(vcol, -1);<br>            int am = dfscol(col, value);<br>            if (am == 1) ++res[0];<br>            if (am == 2) ++res[1];<br>        }<br>        return res;<br>    }<br> <br>    private long[] dorow(int row) {<br>        long[] res = new long[2];<br>        for (int value = 0; value &lt;= 10; ++value) {<br>            Arrays.fill(vrow, -1);<br>            Arrays.fill(vcol, -1);<br>            int am = dfsrow(row, value);<br>            if (am == 1) ++res[0];<br>            if (am == 2) ++res[1];<br>        }<br>        return res;<br>    }<br> <br>    private int dfsrow(int row, long value) {<br>        srow[row] = true;<br>        if (value &lt; 0)<br>            return 3;<br>        if (vrow[row] &gt;= 0) {<br>            if (vrow[row] == value) {<br>                return 1;<br>            } else {<br>                return 3;<br>            }<br>        }<br>        vrow[row] = value;<br>        int good = (value == 0) ? 2 : 1;<br>        for (int col = 0; col &lt; width; ++col) {<br>            char ch = board[row].charAt(col);<br>            if (ch &gt;= '0' &amp;&amp; ch &lt;= '9') {<br>                good = Math.max(good, dfscol(col, ch - '0' - value));<br>            }<br>        }<br>        return good;<br>    }<br> <br>    private int dfscol(int col, long value) {<br>        scol[col] = true;<br>        if (value &lt; 0)<br>            return 3;<br>        if (vcol[col] &gt;= 0) {<br>            if (vcol[col] == value) {<br>                return 1;<br>            } else {<br>                return 3;<br>            }<br>        }<br>        vcol[col] = value;<br>        int good = 1;<br>        for (int row = 0; row &lt; height; ++row) {<br>            char ch = board[row].charAt(col);<br>            if (ch &gt;= '0' &amp;&amp; ch &lt;= '9') {<br>                good = Math.max(good, dfsrow(row, ch - '0' - value));<br>            }<br>        }<br>        return good;<br>    }<br>}<br></td>