<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;vector&gt;<br>#include &lt;list&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;deque&gt;<br>#include &lt;stack&gt;<br>#include &lt;bitset&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;functional&gt;<br>#include &lt;numeric&gt;<br>#include &lt;utility&gt;<br>#include &lt;sstream&gt;<br>#include &lt;iostream&gt;<br>#include &lt;iomanip&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;ctime&gt;<br> <br>using namespace std;<br> <br>class NextAndPrev {<br>public:<br>  int getMinimum(int, int, string, string);<br>};<br> <br>int was[999], x[999], y[999];<br>char mp[999];<br> <br>int NextAndPrev::getMinimum(int nextCost, int prevCost, string start, string goal) {<br>  if (start == goal) return 0;<br>  int n = start.length();<br>  for (char c='a';c&lt;='z';c++) was[c] = 0;<br>  for (int i=0;i&lt;n;i++) was[goal[i]] = 1;<br>  int ok = 0;<br>  for (char c='a';c&lt;='z';c++)<br>    if (!was[c]) ok = 1;<br>  if (!ok) return -1;<br>  for (char c='a';c&lt;='z';c++) mp[c] = ' ';<br>  for (int i=0;i&lt;n;i++)<br>    if (mp[start[i]] == ' ') mp[start[i]] = goal[i]; else<br>    if (mp[start[i]] != goal[i]) return -1;<br>  vector &lt; pair &lt;int, int&gt; &gt; x;<br>  x.clear();<br>  for (char c='a';c&lt;='z';c++)<br>    if (mp[c] != ' ')<br>      x.push_back(make_pair(c-'a', mp[c]-'a'));<br>  int m = x.size();<br>  int ans = (int)2e9;<br>  for (int st=0;st&lt;m;st++) {<br>    int good = 1;<br>    for (int i=0;i&lt;m-1;i++)<br>      if (x[i].second &gt; x[i+1].second) good = 0;<br>    if (good) {<br>      for (int shift=-5;shift&lt;=5;shift++) {<br>        for (int i=0;i&lt;m;i++) x[i].second += shift*26;<br>        int i = 0, cur = 0;<br>        while (i &lt; m) {<br>          int j = i;<br>          while (j &lt; m &amp;&amp; x[i].second == x[j].second) j++;<br>          int low = x[i].second, high = x[i].second;<br>          for (int k=i;k&lt;j;k++) {<br>            if (x[k].first &lt; low) low = x[k].first;<br>            if (x[k].first &gt; high) high = x[k].first;<br>          }<br>          cur += (x[i].second-low)*nextCost;<br>          cur += (high-x[i].second)*prevCost;<br>          i = j;<br>        }<br>        if (cur &lt; ans) ans = cur;<br>        for (int i=0;i&lt;m;i++) x[i].second -= shift*26;<br>      }<br>    }<br>    x[0].first += 26;<br>    sort(x.begin(), x.end());<br>  }<br>  return ans &gt; 1e9 ? -1 : ans;<br>}<br> <br> <br>//Powered by [KawigiEdit] 2.0!<br></td>