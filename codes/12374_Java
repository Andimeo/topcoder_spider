<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>import java.util.regex.*;<br>import java.text.*;<br>import java.math.*;<br>import java.awt.geom.*;<br> <br>public class NextAndPrev<br>{<br>  final int INF = 1000000000;<br> <br>  public int getMinimum(int nextCost, int prevCost, String start, String goal) {<br>    if (start.equals(goal))<br>      return 0;<br>    int numLetters = 0;<br> <br>    int[] map = new int[26 * 3];<br>    int[] revCount = new int[26];<br>    Arrays.fill(map, -1);<br>    for (int i = 0; i &lt; start.length(); i++) {<br>      int c = start.charAt(i) - 'a';<br>      int d = goal.charAt(i) - 'a';<br>      if (map[c] != -1 &amp;&amp; map[c] != d) {<br>        return -1;<br>      }<br>      map[c] = d;<br>      if (revCount[d] == 0)<br>        numLetters++;<br>      revCount[d]++;<br>    }<br>    for (int i = 0; i &lt; 26; i++) {<br>      map[i + 26] = map[i];<br>      map[i + 26 * 2] = map[i];<br>    }<br>    if (numLetters == 26)<br>      return -1;<br>    int letter1 = -1;<br>    for (int i = 0; i &lt; 26; i++)<br>      if (map[i] != -1) {<br>        letter1 = map[i];<br>        break;<br>      }<br>    if (numLetters == 1) {<br>      int ans = INF;<br>      for (int shift = 0; shift &lt; 26; shift++) {<br>        int l1 = 0, r1 = 0;<br>        for (int x = 0; x &lt; 26; x++) {<br>          int y = (letter1 + 26 - shift + x) % 26;<br>          if (map[y] != -1) {<br>            if (x &lt; shift &amp;&amp; l1 == 0)<br>              l1 = shift - x;<br>            if (x &gt; shift)<br>              r1 = x - shift;<br>          }<br>        }<br>        int res = nextCost * l1 + prevCost * r1;<br>        if (res &lt; ans)<br>          ans = res;<br>      }<br>      return ans;<br>    }<br>    int first = 26;<br>    while (map[first] == -1 || map[first] == letter1) {<br>      first--;<br>    }<br>    first++;<br>    while (map[first] == -1)<br>      first++;<br>    int ans = INF;<br>    for (int cycle = -3; cycle &lt;= 3; cycle++) {<br>      int res = 0;<br> <br>      int pos = first;<br>      int next = -1;<br>      int sh = 0;<br>      while (next != first + 26) {<br>        int last = pos;<br>        while (map[last] == -1 || map[last] == map[pos])<br>          last++;<br>        next = last;<br>        last--;<br>        while (map[last] == -1)<br>          last--;<br> <br>        res += getCost(nextCost, prevCost, pos - cycle * 26, last - cycle * 26, map[pos] + sh);<br> <br>        if (map[next] &lt; map[pos]) {<br>          if (sh != 0)<br>            return -1;<br>          sh += 26;<br>        }<br> <br>        pos = next;<br>      }<br>      if (ans &gt; res)<br>        ans = res;<br>    }<br>    return ans;<br>  }<br> <br>  int getCost(int nextCost, int prevCost, int a, int b, int c) {<br>    if (b &lt; c)<br>      return nextCost * (c - a);<br>    if (a &gt; c)<br>      return prevCost * (b - c);<br>    return nextCost * (c - a) + prevCost * (b - c);<br>  }<br> <br>  <br>  <br>}<br>//Powered by [KawigiEdit] 2.0!<br></td>