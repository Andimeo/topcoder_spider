<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;map&gt;<br>using namespace std;<br><br>const int MOD = 1000000009;<br>int c[2048][2048];<br><br>int ptable[2048];<br>int ps[2048];<br>int total;<br>struct MegaFactorialDiv2<br>{<br><br>    int countDivisors(int N, int K)<br>    {<br>    for(int i = 2; i &lt; 2048; i++)<br>        if(!ptable[i])<br>        {<br>            ps[total++] = i;<br>            for(int j = i * i; j &lt; 2048; j += i)<br>                ptable[j] = 1;<br>        }<br>    <br>    <br>        for(int i = 0; i &lt; 2048; i++)<br>        {<br>            c[i][0] = c[i][i] = 1;<br>            for(int j = 1; j &lt; i; j++)<br>                c[i][j] = (c[i - 1][j] + c[i - 1][j - 1]) % MOD;<br>        }<br><br>        map&lt;int, int&gt; alc;<br>        int ans = 1;<br>        for(int i = 2; i &lt;= N; i++)<br>        {<br>            int fac = c[N - i + K - 1][K - 1];<br>            for(int n = i, j = 0; j &lt; total; j++)<br>                while(n % ps[j] == 0)<br>                {<br>                    n /= ps[j];<br>                    (alc[ps[j]] += fac) %= MOD;<br>                }<br>        }<br>        for(map&lt;int, int&gt;::iterator it = alc.begin(); it != alc.end(); it++)<br>            ans = ans * (long long int)(it-&gt;second + 1) % MOD;<br>        return ans;<br>    }<br>};<br></td>