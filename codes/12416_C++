<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;vector&gt;<br>#include &lt;list&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;deque&gt;<br>#include &lt;stack&gt;<br>#include &lt;bitset&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;functional&gt;<br>#include &lt;numeric&gt;<br>#include &lt;utility&gt;<br>#include &lt;sstream&gt;<br>#include &lt;iostream&gt;<br>#include &lt;iomanip&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;ctime&gt;<br> <br>using namespace std;<br> <br>class CandyOnDisk {<br>public:<br>  string ableToAchieve(vector &lt;int&gt;, vector &lt;int&gt;, vector &lt;int&gt;, int, int, int, int);<br>};<br> <br>map &lt; pair &lt;int, int&gt;, int &gt; mp;<br> <br>const int N = 2610;<br> <br>int ver;<br>int t[N], c[N], q[N], was[N];<br>int g[N][N];<br>long double r1[N], r2[N];<br> <br>int addv(int tt, long double rs, long double rf, int up, int cc) {<br>  if (rs &lt; 0) rs = 0;<br>  if (rf &gt; up) rf = up;<br>  t[ver] = tt;<br>  r1[ver] = rs;<br>  r2[ver] = rf;<br>  c[ver] = cc;<br>  ver++;<br>  return ver-1;<br>}<br> <br>string CandyOnDisk::ableToAchieve(vector &lt;int&gt; x, vector &lt;int&gt; y, vector &lt;int&gt; r, int sx, int sy, int tx, int ty) {<br>  if (sx == tx &amp;&amp; sy == ty) return "YES";<br>  int n = x.size();<br>  mp.clear();<br>  for (int i=0;i&lt;n;i++) {<br>    pair &lt;int, int&gt; p = make_pair(x[i], y[i]);<br>    if (r[i] &gt; mp[p]) mp[p] = r[i];<br>  }<br>  int nn = 0;<br>  for (int i=0;i&lt;n;i++) {<br>    pair &lt;int, int&gt; p = make_pair(x[i], y[i]);<br>    if (mp[p] &gt; 0) {<br>      x[nn] = x[i];<br>      y[nn] = y[i];<br>      r[nn] = mp[p];<br>      nn++;<br>      mp[p] = 0;<br>    }<br>  }<br>  n = nn;<br>  memset(g, 0, sizeof(g));<br>  ver = 0;<br>  for (int i=0;i&lt;n;i++)<br>    for (int j=i+1;j&lt;n;j++) {<br>      long double dist = sqrt(1.0*(x[i]-x[j])*(x[i]-x[j]) + 1.0*(y[i]-y[j])*(y[i]-y[j]));<br>      if (dist &gt; r[i]+r[j]) continue;<br>      int x = addv(i, dist-r[j], dist+r[j], r[i], 0);<br>      int y = addv(j, dist-r[i], dist+r[i], r[j], 0);<br>      g[x][y] = g[y][x] = 1;<br>    }<br>  for (int i=0;i&lt;n;i++) {<br>    long double dist = sqrt(1.0*(x[i]-sx)*(x[i]-sx) + 1.0*(y[i]-sy)*(y[i]-sy));<br>    if (dist &lt;= r[i]) addv(i, dist, dist, r[i], 1);<br>  }<br>  for (int i=0;i&lt;n;i++) {<br>    long double dist = sqrt(1.0*(x[i]-tx)*(x[i]-tx) + 1.0*(y[i]-ty)*(y[i]-ty));<br>    if (dist &lt;= r[i]) addv(i, dist, dist, r[i], 2);<br>  }<br>  long double eps = 1e-10;<br>  for (int i=0;i&lt;ver;i++)<br>    for (int j=0;j&lt;ver;j++)<br>      if (t[i] == t[j])<br>        if (r2[i]+eps &lt; r1[j] || r2[j]+eps &lt; r1[i]) continue;<br>        else g[i][j] = 1;<br>  for (int ii=0;ii&lt;ver;ii++) was[ii] = 0;<br>  for (int ii=0;ii&lt;ver;ii++)<br>    if (!was[ii]) {<br>      int i = 1, e = 1;<br>      q[1] = ii;<br>      int z = c[ii];<br>      was[ii] = 1;<br>      while (i &lt;= e) {<br>        for (int j=0;j&lt;ver;j++)<br>          if (!was[j] &amp;&amp; g[q[i]][j]) {<br>            e++;<br>            q[e] = j;<br>            z |= c[j];<br>            was[j] = 1;<br>          }<br>        i++;<br>      }<br>      if (z == 3) return "YES";<br>    }<br>  return "NO";<br>}<br> <br> <br>//Powered by [KawigiEdit] 2.0!<br></td>