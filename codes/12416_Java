<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.Comparator;<br>import java.util.Arrays;<br> <br>/**<br> * Built using CHelper plug-in<br> * Actual solution is at the top<br> */<br>public class CandyOnDisk {<br>    static class Disk {<br>        int x;<br>        int y;<br>        int r;<br>        double minGet = 1e100;<br>        double maxGet = -1e100;<br> <br>        Disk(int x, int y, int r) {<br>            this.x = x;<br>            this.y = y;<br>            this.r = r;<br>        }<br>    }<br> <br>    public String ableToAchieve(int[] x, int[] y, int[] r, int sx, int sy, int tx, int ty) {<br>        if (sx == tx &amp;&amp; sy == ty) return "YES";<br>        Disk[] disks = new Disk[x.length];<br>        for (int i = 0; i &lt; x.length; ++i)<br>            disks[i] = new Disk(x[i], y[i], r[i]);<br>        Arrays.sort(disks, new Comparator&lt;Disk&gt;() {<br>            public int compare(Disk o1, Disk o2) {<br>                return o2.r - o1.r;<br>            }<br>        });<br>        int cnt = 0;<br>        for (int i = 0; i &lt; disks.length; ++i) {<br>            boolean ok = true;<br>            for (int j = 0; j &lt; cnt; ++j) if (disks[j].x == disks[i].x &amp;&amp; disks[j].y == disks[i].y) ok = false;<br>            if (ok) {<br>                disks[cnt++] = disks[i];<br>            }<br>        }<br>        Disk[] tmp = new Disk[cnt];<br>        System.arraycopy(disks, 0, tmp, 0, cnt);<br>        disks = tmp;<br>        for (Disk d : disks) {<br>            long dx = d.x - sx;<br>            long dy = d.y - sy;<br>            if (dx * dx + dy * dy &lt;= d.r * (long) d.r)<br>                d.minGet = d.maxGet = Math.sqrt(dx * dx + dy * dy);<br>        }<br>        double[][] minInter = new double[cnt][cnt];<br>        double[][] maxInter = new double[cnt][cnt];<br>        for (int i = 0; i &lt; cnt; ++i)<br>            for (int j = 0; j &lt; cnt; ++j)<br>                if (i != j) {<br>                    Disk a = disks[i];<br>                    Disk b = disks[j];<br>                    long dx = a.x - b.x;<br>                    long dy = a.y - b.y;<br>                    double d = Math.sqrt(dx * dx + dy * dy);<br>                    double min = Math.max(0, d - b.r);<br>                    double max = Math.min(a.r, d + b.r);<br>                    if (min &lt; max) {<br>                        minInter[i][j] = min;<br>                        maxInter[i][j] = max;<br>                    } else {<br>                        minInter[i][j] = 1e100;<br>                        maxInter[i][j] = -1e100;<br>                    }<br>                }<br>        while (true) {<br>            boolean updated = false;<br>            for (int i = 0; i &lt; cnt; ++i)<br>                for (int j = 0; j &lt; cnt; ++j) {<br>                    if (i != j) {<br>                        Disk a = disks[i];<br>                        Disk b = disks[j];<br>                        if (a.minGet &gt; a.maxGet) continue;<br>                        if (minInter[i][j] &gt; maxInter[i][j]) continue;<br>                        if (Math.max(a.minGet, minInter[i][j]) &lt;= Math.min(a.maxGet, maxInter[i][j])) {<br>                            if (minInter[i][j] &lt; a.minGet) {<br>                                a.minGet = minInter[i][j];<br>                                updated = true;<br>                            }<br>                            if (maxInter[i][j] &gt; a.maxGet) {<br>                                a.maxGet = maxInter[i][j];<br>                                updated = true;<br>                            }<br>                            if (minInter[j][i] &lt; b.minGet) {<br>                                b.minGet = minInter[j][i];<br>                                updated = true;<br>                            }<br>                            if (maxInter[j][i] &gt; b.maxGet) {<br>                                b.maxGet = maxInter[j][i];<br>                                updated = true;<br>                            }<br>                        }<br>                    }<br>                }<br>            if (!updated) break;<br>        }<br>        for (Disk d : disks) {<br>            long dx = d.x - tx;<br>            long dy = d.y - ty;<br>            if (dx * dx + dy * dy &lt;= d.r * (long) d.r) {<br>                if (d.minGet == d.maxGet) {<br>                    long udx = d.x - sx;<br>                    long udy = d.y - sy;<br>                    if (dx * dx + dy * dy == udx * udx + udy * udy)<br>                        return "YES";<br>                } else if (d.minGet &lt; d.maxGet) {<br>                    double need = Math.sqrt(dx * dx + dy * dy);<br>                    if (d.minGet &lt;= need &amp;&amp; d.maxGet &gt;= need)<br>                        return "YES";<br>                }<br>            }<br>        }<br>        return "NO";<br>    }<br>}<br></td>