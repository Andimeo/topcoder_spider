<td class="problemText" colspan="8" valign="middle" align="left">
            //  SRM 577 (C)<br><br>#include &lt;cstdio&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cstring&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cassert&gt;<br>#include &lt;iostream&gt;<br>#include &lt;sstream&gt;<br>#include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;queue&gt;<br>#include &lt;set&gt;<br>#include &lt;map&gt;<br>#include &lt;utility&gt;<br>#include &lt;numeric&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;bitset&gt;<br>#include &lt;complex&gt;<br><br>using namespace std;<br><br>typedef unsigned uint;<br>typedef long long Int;<br>typedef vector&lt;int&gt; vint;<br>typedef pair&lt;int,int&gt; pint;<br>#define mp make_pair<br><br>template&lt;class T&gt; void pv(T a, T b) { for (T i = a; i != b; ++i) cout &lt;&lt; *i &lt;&lt; " "; cout &lt;&lt; endl; }<br>template&lt;class T&gt; void chmin(T &amp;t, T f) { if (t &gt; f) t = f; }<br>template&lt;class T&gt; void chmax(T &amp;t, T f) { if (t &lt; f) t = f; }<br><br>namespace BM {<br>  #define MAXN0 100010<br>  #define MAXN1 100010<br>  #define MAXM  100010<br>  int n0, n1, m, ptr[MAXN0], next[MAXM], zu[MAXM];<br>  int to[MAXN0], fr[MAXN1], us[MAXN1], total;<br>  int lev[MAXN0], que[MAXN0], *qb, *qe;<br>  inline void init(int _n0, int _n1) {<br>    n0 = _n0; n1 = _n1; m = 0; memset(ptr, ~0, n0 &lt;&lt; 2);<br>  }<br>  inline void ae(int u, int v) {<br>    next[m] = ptr[u]; ptr[u] = m; zu[m] = v; ++m;<br>  }<br>  int augment(int u) {<br>    int i, v, w;<br>    us[u] = total;<br>    for (i = ptr[u]; ~i; i = next[i]) {<br>      if (!~(w = fr[v = zu[i]]) || us[w] != total &amp;&amp; lev[u] &lt; lev[w] &amp;&amp; augment(w)) {<br>        to[u] = v; fr[v] = u; return 1;<br>      }<br>    }<br>    return 0;<br>  }<br>  int hopk() {<br>    int f, i, u, w;<br>    memset(to, ~0, n0 &lt;&lt; 2); memset(fr, ~0, n1 &lt;&lt; 2); memset(us, ~0, n1 &lt;&lt; 2);<br>    for (total = 0; ; total += f) {<br>      qb = qe = que;<br>      memset(lev, ~0, n0 &lt;&lt; 2);<br>      for (u = 0; u &lt; n0; ++u) if (!~to[u]) lev[*qe++ = u] = 0;<br>      for (; qb != qe; ) for (i = ptr[u = *qb++]; ~i; i = next[i]) {<br>        if (~(w = fr[zu[i]]) &amp;&amp; !~lev[w]) lev[*qe++ = w] = lev[u] + 1;<br>      }<br>      for (f = 0, u = 0; u &lt; n0; ++u) if (!~to[u]) f += augment(u);<br>      if (!f) return total;<br>    }<br>  }<br>}<br><br>int M, N;<br>int A[110][110];<br>int V0, V1;<br>int ids[110][110];<br><br>struct BoardPainting {<br>  <br>  int minimalSteps(vector &lt;string&gt; target) {<br>    int x, y;<br>    int u0, v0, u1, v1;<br>    <br>    M = target.size();<br>    N = target[0].size();<br>    for (x = 0; x &lt; M; ++x) for (y = 0; y &lt; N; ++y) {<br>      A[x][y] = (target[x][y] == '#');<br>    }<br>    <br>    int cnt = 0;<br>    for (x = 0; x &lt; M; ++x) for (y = 0; y &lt; N; ++y) {<br>      if (A[x][y]) {<br>        ++cnt;<br>      }<br>    }<br>    <br>    V0 = V1 = 0;<br>    memset(ids, ~0, sizeof(ids));<br>    for (x = 0; x &lt; M; ++x) for (y = 0; y &lt; N; ++y) {<br>      if (x &amp;&amp; A[x - 1][y] &amp;&amp; A[x][y]) {<br>        ids[(x - 1) + x][y + y] = V0++;<br>      }<br>      if (y &amp;&amp; A[x][y - 1] &amp;&amp; A[x][y]) {<br>        ids[x + x][(y - 1) + y] = V1++;<br>      }<br>    }<br>    <br>    BM::init(V0, V1);<br>    for (x = 0; x &lt; M; ++x) for (y = 0; y &lt; N; ++y) {<br>      if (A[x][y]) {<br>        u0 = x ? ids[(x - 1) + x][y + y] : -1;<br>        v0 = ids[x + (x + 1)][y + y];<br>        u1 = y ? ids[x + x][(y - 1) + y] : -1;<br>        v1 = ids[x + x][y + (y + 1)];<br>        if (~u0 &amp;&amp; ~u1) BM::ae(u0, u1);<br>        if (~u0 &amp;&amp; ~v1) BM::ae(u0, v1);<br>        if (~v0 &amp;&amp; ~u1) BM::ae(v0, u1);<br>        if (~v0 &amp;&amp; ~v1) BM::ae(v0, v1);<br>      }<br>    }<br>    int res = BM::hopk();<br>    <br>    int ans = cnt - (V0 + V1 - res);<br>    return ans;<br>    <br>  }<br>  <br>};<br></td>