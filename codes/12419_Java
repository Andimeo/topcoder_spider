<td class="problemText" colspan="8" valign="middle" align="left">
            import java.math.*;<br>import java.util.*;<br> <br>public class LISNumber {<br>    final static int MOD = (int)1e9 + 7;<br> <br>    public int count(int[] cards, int part) {<br>        long[][] binom = new long[2000][2000];<br>        for (int i = 0; i &lt; 2000; ++ i) {<br>            binom[i][0] = 1;<br>            for (int j = 1; j &lt;= i; ++ j) {<br>                binom[i][j] = (binom[i - 1][j - 1] + binom[i - 1][j]) % MOD;<br>            }<br>        }<br>        int n = cards.length;<br>        long[] ways = new long[part + 1];<br>        boolean first = true;<br>        int length = 0;<br>        for (int number : cards) {<br>            if (number == 0) {<br>                continue;<br>            }<br>            if (first) {<br>                first = false;<br>                if (number &lt;= part) {<br>                    ways[number] = 1;<br>                }<br>            } else {<br>                long[] newWays = new long[part + 1];<br>                for (int p = 0; p &lt;= part; ++ p) {<br>                    if (ways[p] == 0) {<br>                        continue;<br>                    }<br>                    // +0 : p<br>                    // +1 : lenght + 1 - p<br>                    for (int x = 0; x &lt;= number &amp;&amp; x &lt;= p; ++ x) {<br>                        if (p + number - x &lt;= part) {<br>                            newWays[p + number - x] += ways[p] * binom[p][x] % MOD * binom[length + 1 - p + x + number - x - 1][number - x] % MOD;<br>                            newWays[p + number - x] %= MOD;<br>                        }<br>                    }<br>                }<br>                ways = newWays;<br>            }<br>            length += number;<br>        }<br>        return (int)ways[part];<br>    }<br> <br>    void debug(Object...os) {<br>        System.err.println(Arrays.deepToString(os));<br>    }<br> <br>}<br> <br> <br> <br>// Powered by FileEdit<br>// Powered by moj 4.17 [modified TZTester]<br>// Powered by CodeProcessor<br></td>