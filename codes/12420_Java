<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.Map;<br>import java.util.Arrays;<br>import java.util.HashMap;<br> <br>/**<br> * Built using CHelper plug-in<br> * Actual solution is at the top<br> */<br>public class EllysBulls {<br>    static class Solution {<br>        int what;<br>        boolean ambiguous;<br>    }<br> <br>    public String getNumber(String[] guesses, int[] bulls) {<br>        Map&lt;String, Solution&gt; second = new HashMap&lt;String, Solution&gt;();<br>        int len = guesses[0].length();<br>        int secondHalf = len / 2;<br>        int firstHalf = len - secondHalf;<br>        int p10Second = 1;<br>        {<br>            int p10 = 1;<br>            for (int i = 0; i &lt; secondHalf; ++i) {<br>                p10 *= 10;<br>            }<br>            int[] tmpArr = new int[bulls.length];<br>            for (int what = 0; what &lt; p10; ++what) {<br>                System.arraycopy(bulls, 0, tmpArr, 0, bulls.length);<br>                int tmp = what;<br>                for (int digit = 0; digit &lt; secondHalf; ++digit) {<br>                    char cur = (char) ('0' + (tmp % 10));<br>                    tmp /= 10;<br>                    for (int i = 0; i &lt; guesses.length; ++i) {<br>                        if (guesses[i].charAt(len - 1 - digit) == cur)<br>                            --tmpArr[i];<br>                    }<br>                }<br>                boolean ok = true;<br>                StringBuilder nbulls = new StringBuilder();<br>                for (int i = 0; i &lt; tmpArr.length; ++i) {<br>                    if (tmpArr[i] &lt; 0) ok = false;<br>                    nbulls.append((char) ('0' + tmpArr[i]));<br>                }<br>                if (!ok) continue;<br>                String nb = nbulls.toString();<br>                Solution oldSol = second.get(nb);<br>                if (oldSol == null) {<br>                    oldSol = new Solution();<br>                    oldSol.what = what;<br>                    oldSol.ambiguous = false;<br>                    second.put(nb, oldSol);<br>                } else {<br>                    oldSol.ambiguous = true;<br>                }<br>            }<br>            p10Second = p10;<br>        }<br>        {<br>            int answer = -1;<br>            int p10 = 1;<br>            for (int i = 0; i &lt; firstHalf; ++i) {<br>                p10 *= 10;<br>            }<br>            int[] tmpArr = new int[bulls.length];<br>            for (int what = 0; what &lt; p10; ++what) {<br>                Arrays.fill(tmpArr, 0);<br>                int tmp = what;<br>                for (int digit = 0; digit &lt; firstHalf; ++digit) {<br>                    char cur = (char) ('0' + (tmp % 10));<br>                    tmp /= 10;<br>                    for (int i = 0; i &lt; guesses.length; ++i) {<br>                        if (guesses[i].charAt(firstHalf - 1 - digit) == cur)<br>                            ++tmpArr[i];<br>                    }<br>                }<br>                StringBuilder nbulls = new StringBuilder();<br>                for (int i = 0; i &lt; tmpArr.length; ++i) {<br>                    nbulls.append((char) ('0' + tmpArr[i]));<br>                }<br>                String nb = nbulls.toString();<br>                Solution oldSol = second.get(nb);<br>                if (oldSol != null) {<br>                    if (answer &gt;= 0 || oldSol.ambiguous) {<br>                        return "Ambiguity";<br>                    }<br>                    answer = what * p10Second + oldSol.what;<br>                }<br>            }<br>            if (answer &lt; 0)<br>                return "Liar";<br>            String s = "" + answer;<br>            while (s.length() &lt; len) s = "0" + s;<br>            return s;<br>        }<br>    }<br>}<br></td>