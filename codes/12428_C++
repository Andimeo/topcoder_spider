<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;algorithm&gt;<br>#include &lt;iostream&gt;<br>#include &lt;sstream&gt;<br>#include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;queue&gt;<br>#include &lt;set&gt;<br>#include &lt;map&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cctype&gt;<br>#include &lt;cstring&gt;<br>#include &lt;cmath&gt;<br>using namespace std;<br><br>const int N = 50;<br><br>double f[60][60][60][2];<br>int n;<br>vector&lt;int&gt;adj[60];<br><br>class CentaurCompany {<br>public:<br>  void gao(int x,int y) {<br>      double g[60][60][2];<br>    f[x][0][0][0]=1;<br>        f[x][1][1][1]=1;<br>    for (int i = 0; i &lt; adj[x].size(); ++i)<br>            if(adj[x][i]!=y) {<br>                gao(adj[x][i],x); memset(g, 0, sizeof(g));<br>                for (int j = 0; j &lt; n + 1; ++j)<br>                    for (int k = 0; k &lt; n + 1; ++k)<br>                        if(f[adj[x][i]][j][k][0]||f[adj[x][i]][j][k][1]) {<br>                            for(int l=0;l+j&lt;=n;l++)<br>                                for(int m=0;m+k&lt;=n;m++){<br>                                    g[l+j][m+k][0]+=f[x][l][m][0]*f[adj[x][i]][j][k][0];<br>                                    g[l+j][m+k][0]+=f[x][l][m][0]*f[adj[x][i]][j][k][1];<br>                                    g[l+j][m+k][1]+=f[x][l][m][1]*f[adj[x][i]][j][k][0];<br>                                    g[l+j][m+k-1][1]+=f[x][l][m][1]*f[adj[x][i]][j][k][1];<br>                                }<br>                }<br>                memcpy(f[x], g, sizeof(f[x]));<br>            }<br>  }<br><br>  double getvalue(vector &lt;int&gt; A, vector &lt;int&gt; B) {<br>      double res = 0;<br>    n = A.size() + 1;<br>    memset(f, 0, sizeof(f));<br>    for (int i = 1; i &lt;= n; ++i)<br>            adj[i].clear();<br>    for(int i = 0; i&lt;n-1 ; i++) {<br>      adj[A[i]].push_back(B[i]);<br>      adj[B[i]].push_back(A[i]);<br>    }<br>    gao(1, 0);<br>    for (int i = 0; i &lt; n; ++i)<br>            for (int j = 0; j &lt; i + 1; ++j)<br>                res+=(f[1][i][j][0]+f[1][i][j][1])*max((j-1)*2-i,0);<br>    for (int i = 0; i &lt;= n - 2; ++i) res /= 2;<br>    return res;<br>  }<br>};<br><br><br>// Powered by FileEdit<br>// Powered by CodeProcessor<br></td>