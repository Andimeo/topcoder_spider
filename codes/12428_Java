<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>import java.util.regex.*;<br>import java.text.*;<br>import java.math.*;<br>import java.awt.geom.*;<br> <br>public class CentaurCompany<br>{<br>  public double getvalue(int[] a, int[] b) {<br>    n = a.length + 1;<br>    ss = new boolean[n][n];<br>    for (int i = 0; i + 1 &lt; n; i++) {<br>      int x = a[i] - 1, y = b[i] - 1;<br>      ss[x][y] = ss[y][x] = true;<br>    }<br>    count = new int[n];<br>    count(0, -1);<br>    long[][][] res = dfs(0, -1);<br> <br>    long ans = 0;<br>    for (int a1 = 0; a1 &lt;= n; a1++)<br>      for (int a2 = 0; a2 &lt;= n; a2++)<br>        for (int a3 = 0; a2 + a3 &lt;= n; a3++) {<br>          long t = res[a1][a2][a3];<br>          int cnt1 = Math.max(0, 2 * (a2 - 1) - a1), cnt2 = Math.max(0, 2 * (a3 - 1) - (n - a1));<br>          ans += t * (cnt1 + cnt2);<br>        }<br>    return ans / Math.pow(2.0, n - 1);<br>  }<br> <br>  void count(int x, int par) {<br>    count[x] = 1;<br>    for (int y = 0; y &lt; n; y++) {<br>      if (y == x || y == par || !ss[x][y])<br>        continue;<br>      count(y, x);<br>      count[x] += count[y];<br>    }<br>  }<br> <br>  long[][][] dfs(int x, int par) {<br>    int n = count[x];<br>    long[][][] first = new long[n + 1][n + 1][n + 1];<br>    first[1][1][0] = 1;<br>    for (int y = 0; y &lt; this.n; y++) {<br>      if (y == x || y == par || !ss[x][y])<br>        continue;<br>      long[][][] second = dfs(y, x);<br>      int m = count[y];<br>      long[][][] result = new long[n + m + 1][n + m + 1][n + m + 1];<br> <br>      for (int a1 = 0; a1 &lt;= n; a1++)<br>        for (int a2 = 0; a2 &lt;= n; a2++)<br>          for (int a3 = 0; a2 + a3 &lt;= n; a3++) {<br>            long t = first[a1][a2][a3];<br>            if (t == 0)<br>              continue;<br>            for (int b1 = 0; b1 &lt;= m; b1++)<br>              for (int b2 = 0; b2 &lt;= m; b2++)<br>                for (int b3 = 0; b2 + b3 &lt;= m; b3++) {<br>                  long u = second[b1][b2][b3];<br>                  if (u == 0)<br>                    continue;<br>                  result[a1 + b1][a2 + b2 - 1][a3 + b3] += t * u;<br>                  result[a1 + m - b1][a2 + b3][a3 + b2] += t * u;<br>                }<br>          }<br>      first = result;<br>      n += m;<br>    }<br>    return first;<br>  }<br> <br>  int n;<br>  int[] count;<br>  boolean[][] ss;<br>  <br>  <br>}<br>//Powered by [KawigiEdit] 2.0!<br></td>