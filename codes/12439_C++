<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;vector&gt;<br>#include &lt;list&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;deque&gt;<br>#include &lt;stack&gt;<br>#include &lt;bitset&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;functional&gt;<br>#include &lt;numeric&gt;<br>#include &lt;utility&gt;<br>#include &lt;sstream&gt;<br>#include &lt;iostream&gt;<br>#include &lt;iomanip&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;ctime&gt;<br> <br>using namespace std;<br> <br>class MagicMoleculeEasy {<br>public:<br>    int maxMagicPower(vector &lt;int&gt;, vector &lt;string&gt;, int);<br>};<br> <br>int n;<br>int ans;<br>vector&lt;int&gt; p;<br>vector&lt;string&gt; a;<br>int vc(vector&lt;pair&lt;int,int&gt; &gt; g, int k, set&lt;int&gt; sel) {<br>    if (g.size() == 0) {<br>        int q1 = 0;<br>        if (k &gt; 0) {<br>            vector&lt;int&gt; qq;<br>            for (int i=0; i&lt;n; i++) {<br>                if (sel.count(i) == 0) {<br>                    qq.push_back(p[i]);}<br>            }<br>            sort(qq.begin(),qq.end());<br>            reverse(qq.begin(),qq.end());<br>            for (int i=0; i&lt;qq.size(); i++) {<br>                if (k == 0) break;<br>                q1 += qq[i];<br>                k--;<br>            }<br>        }<br>        return 0+q1;<br>    }<br>    if (g.size() &gt;= k*n) {<br>        return -1;<br>    }<br>    int t1 = g[0].first;<br>    int t2 = g[0].second;<br>    vector&lt;pair&lt;int,int&gt; &gt; g2;<br>    for (int i=0; i&lt;g.size(); i++) {<br>        if (g[i].first == t1 || g[i].second == t1) continue;<br>        g2.push_back(g[i]);<br>    }<br>    vector&lt;pair&lt;int,int&gt; &gt; g3;<br>    for (int i=0; i&lt;g.size(); i++) {<br>        if (g[i].first == t2 || g[i].second == t2) continue;<br>        g3.push_back(g[i]);<br>    }<br>    set&lt;int&gt; s2(sel);<br>    set&lt;int&gt; s3(sel);<br>    s2.insert(t1);<br>    int t3 = vc(g2,k-1,s2);<br>    s3.insert(t2);<br>    int t4 = vc(g3,k-1,s3);<br>    if (t3 == -1 &amp;&amp; t4 == -1) {<br>        return -1;<br>    } else if (t3 == -1) {<br>        return t4 + p[t2];<br>    } else if (t4 == -1) {<br>        return t3 + p[t1];<br>    } else {<br>        int q1 = t3 + p[t1];<br>        int q2 = t4+p[t2];<br>        return max(q1,q2);<br>    }<br> <br>}<br>int MagicMoleculeEasy::maxMagicPower(vector &lt;int&gt; magicPower, vector &lt;string&gt; magicBond, int _k) {<br>    int cnt[55];<br>    n = magicPower.size();<br>    p=magicPower;<br>    a=magicBond;<br>    vector&lt;pair&lt;int,int&gt; &gt; u;<br>    for (int i=0; i&lt;n; i++) {<br>        for (int j=i+1; j&lt;n; j++) {<br>            if (a[i][j] == 'Y') {<br>                u.push_back(make_pair(i,j));<br>            }<br>        }<br>    }<br>    set&lt;int&gt; sel;<br>    return vc(u,_k,sel);<br>}<br> <br> <br>//Powered by [KawigiEdit] 2.0!<br></td>