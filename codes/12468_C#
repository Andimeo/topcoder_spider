<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections;<br>using System.Collections.Generic;<br>using System.Collections.Specialized;<br>using System.Text;<br>using System.Text.RegularExpressions;<br> <br> <br>public class SkiResorts<br>{<br>    bool reachable(string[] road)<br>    {<br>        int N = road.Length;<br>        bool[,] edge = new bool[N,N];<br>        for (int i = 0; i &lt; N; i++)<br>        {<br>            for (int j = 0; j &lt; N; j++)<br>            {<br>                if ((road[i][j]=='Y')||(i==j))<br>                {<br>                    edge[i, j] = true;<br>                }<br>            }<br>        }<br>        for (int i = 0; i &lt; N; i++)<br>        {<br>            for (int j = 0; j &lt; N; j++)<br>            {<br>                for (int k = 0; k &lt; N; k++)<br>                {<br>                    if (edge[j,i]&amp;&amp;edge[i,k])<br>                    {<br>                        edge[j, k] = true;<br>                    }<br>                }<br>            }<br>        }<br>        return edge[0, N - 1];<br>    }<br> <br> <br>  public long minCost(string[] road, int[] altitude)<br>  {<br>      if (!reachable(road))<br>      {<br>          return -1;<br>      }<br>      int N = altitude.Length;<br>        int[] A = new int[N];<br>      for (int i = 0; i &lt; N; i++)<br>      {<br>          A[i] = altitude[i];<br>      }<br>        Array.Sort(A);<br>      long ret = (1L) &lt;&lt; 50;<br>      long inf = (1L) &lt;&lt; 50;<br>        long[,] cost = new long[N,N];<br>      for (int i = 0; i &lt; N; i++)<br>      {<br>          long t1 = altitude[0] - A[i];<br>          if (t1&lt;0)<br>          {<br>              t1 = -t1;<br>          }<br>          cost[0, i] = t1;<br>      }<br>      for (int i = 1; i &lt; N; i++)<br>      {<br>          for (int j = 0; j &lt; N; j++)<br>          {<br>              cost[i, j] = inf;<br>          }<br>      }<br>      bool changed = false;<br>      do<br>      {<br>          changed = false;<br>          for (int i = 0; i &lt; N; i++)<br>          {<br>              for (int j = 0; j &lt; N; j++)<br>              {<br>                  if (cost[i,j]&gt;=inf)<br>                  {<br>                      continue;<br>                  }<br>                  for (int k = 0; k &lt; N; k++)<br>                  {<br>                      if (road[i][k]=='N')<br>                      {<br>                          <br>                            continue;<br>                      }<br>                      for (int l = 0; l &lt; j+1; l++)<br>                      {<br>                          long t1 = altitude[k] - A[l];<br>                          if (t1&lt;0)<br>                          {<br>                              t1 = -t1;<br>                          }<br>                          t1 = t1 + cost[i, j];<br>                          if (t1&lt;cost[k,l])<br>                          {<br>                              cost[k, l] = t1;<br>                              changed = true;<br>                          }<br>                      }<br>                  }<br>              }<br>          }<br>      } while (changed);<br>      for (int i = 0; i &lt; N; i++)<br>      {<br>          ret = Math.Min(ret, cost[N - 1, i]);<br>      }<br>      return ret;<br>  }<br> <br> <br>}<br>//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!<br></td>