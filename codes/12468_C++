<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;vector&gt;<br>#include &lt;list&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;deque&gt;<br>#include &lt;stack&gt;<br>#include &lt;bitset&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;functional&gt;<br>#include &lt;numeric&gt;<br>#include &lt;utility&gt;<br>#include &lt;sstream&gt;<br>#include &lt;iostream&gt;<br>#include &lt;iomanip&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;ctime&gt;<br> <br>using namespace std;<br> <br>class SkiResorts {<br>public:<br>  long long minCost(vector &lt;string&gt;, vector &lt;int&gt;);<br>};<br> <br>const int maxN = 60;<br>const long long inf = 1000000000000000000LL;<br>int g[maxN][maxN];<br>long long d[maxN][maxN];<br> <br>long long dist(long long x, long long y) {<br>  if (x &gt; y) {<br>    return x - y;<br>  } else {<br>    return y - x;<br>  }<br>}<br> <br>long long SkiResorts::minCost(vector &lt;string&gt; road, vector &lt;int&gt; altitude) {<br>  int n = road.size();<br>  memset(g, 0, sizeof(g));<br> <br>  for (int i = 0; i &lt; n; ++i) {<br>    for (int j = 0; j &lt; n; ++j) {<br>      if (road[i][j] == 'Y') {<br>        g[i][j] = 1;<br>      } else {<br>        g[i][j] = 0;<br>      }<br>    }<br>  }<br> <br>  long long res = inf;<br>  for (int i = 0; i &lt; n; ++i) {<br>    for (int j = 0; j &lt; n; ++j) {<br>      d[i][j] = inf;<br>    }<br>  }<br> <br>  set &lt; pair &lt; long long, pair &lt; int, int &gt; &gt; &gt; S;<br> <br>  for (int i = 0; i &lt; n; ++i) {<br>    d[0][i] = dist(altitude[0], altitude[i]);<br>    S.insert(make_pair(d[0][i], make_pair(0, i)));<br>  }<br> <br>  while (!S.empty()) {<br>    pair &lt; long long, pair &lt; int, int &gt; &gt; current = * S.begin();<br>    S.erase(S.begin());<br>    long long length = current.first;<br>    int v = current.second.first;<br>    int p = current.second.second;<br> <br>    for (int i = 0; i &lt; n; ++i) {<br>      if (!g[v][i]) {<br>        continue;<br>      }<br>      for (int j = 0; j &lt; n; ++j) {<br>        if (altitude[p] &gt;= altitude[j] &amp;&amp; d[i][j] &gt; length + dist(altitude[i], altitude[j])) {<br>          S.erase(make_pair(d[i][j], make_pair(i, j)));<br>          d[i][j] = length + dist(altitude[i], altitude[j]);<br>          S.insert(make_pair(d[i][j], make_pair(i, j)));<br>        }<br>      }<br>    }<br>  }<br> <br>  for (int i = 0; i &lt; n; ++i) {<br>    res = min(res, d[n - 1][i]);<br>  }<br>  return res == inf ? -1LL : res;<br>}<br> <br> <br>//Powered by [KawigiEdit] 2.0!<br></td>