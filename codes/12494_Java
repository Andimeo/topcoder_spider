<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br><br>public class TheLargestString {<br>  public String find(String s, String t) {<br>    int n = s.length();<br>    State[] dp = new State[n + 1];<br>    dp[0] = new State("", "");<br>    for (int lastChar = n - 1; lastChar &gt;= 0; --lastChar) {<br>      char c1 = s.charAt(lastChar);<br>      char c2 = t.charAt(lastChar);<br>      State[] nextDp = dp.clone();<br>      for (int length = n; length &gt;= 0; --length) {<br>        if (dp[length] == null) {<br>          continue;<br>        }<br>        State canGet = new State(c1 + dp[length].inS, c2 + dp[length].inT);<br>        if (nextDp[length + 1] == null || nextDp[length + 1].compareTo(canGet) &lt; 0) {<br>          nextDp[length + 1] = canGet;<br>        }<br>      }<br>      dp = nextDp;<br>    }<br>    String best = "";<br>    for (int i = 0; i &lt; dp.length; i++) {<br>      if (dp[i] == null) {<br>        continue;<br>      }<br>      String cur = dp[i].toString();<br>      if (best.compareTo(cur) &lt; 0) {<br>        best = cur;<br>      }<br>    }<br>    return best;<br>  }<br><br>  static class State implements Comparable&lt;State&gt; {<br>    String inS, inT;<br><br>    private State(String inS, String inT) {<br>      this.inS = inS;<br>      this.inT = inT;<br>    }<br><br>    public int compareTo(State o) {<br>      int cmp = inS.compareTo(o.inS);<br>      if (cmp != 0) {<br>        return cmp;<br>      }<br>      return inT.compareTo(o.inT);<br>    }<br>    <br>    public String toString() {<br>      return inS+inT;<br>    }<br>  }<br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by CodeProcessor<br></td>