<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;cstdio&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cstring&gt;<br>#include &lt;iostream&gt;<br>#include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;algorithm&gt;<br>using namespace std;<br>class TheTilesDivTwo {<br>public:<br>    int f[1000][1000],a[1000][1000];<br>    int n,m,i,j;<br>    bool check(int s,int x,int k) <br>    {<br>        return (a[x][k]==0) &amp;&amp; (!((s&gt;&gt;(k-1))&amp;1));<br>    }<br>    void dfs(int x,int k,int s,int ns,int sum)<br>    {<br>        if (k&gt;n) {<br>            f[x+1][ns]=max(f[x+1][ns],f[i][j]+sum);<br>            return ;<br>        }<br>        dfs(x,k+1,s,ns,sum);<br>        if (((x+k)%2==0) &amp;&amp; check(s,x,k)) {<br>            if (check(s,x,k-1) &amp;&amp; check(ns,x+1,k)) dfs(x,k+1,s | (1&lt;&lt;(k-2)) | (1&lt;&lt;(k-1)),ns | (1&lt;&lt;(k-1)),sum+1);<br>            if (check(s,x,k+1) &amp;&amp; check(ns,x+1,k)) dfs(x,k+1,s | (1&lt;&lt;(k-1)) | (1&lt;&lt;(k)),ns | (1&lt;&lt;(k-1)),sum+1);<br>        }<br>        if (((x+1+k)%2==0) &amp;&amp; check(ns,x+1,k)) {<br>            if (check(s,x,k) &amp;&amp; check(ns,x+1,k-1)) dfs(x,k+1,s | (1&lt;&lt;(k-1)),ns | (1&lt;&lt;(k-2)) | (1&lt;&lt;(k-1)),sum+1);<br>            if (check(s,x,k) &amp;&amp; check(ns,x+1,k+1)) dfs(x,k+1,s | (1&lt;&lt;(k-1)),ns | (1&lt;&lt;(k)) | (1&lt;&lt;(k-1)),sum+1);<br>        }<br>    }<br>  int find(vector &lt;string&gt; b){<br>        memset(a,1,sizeof(a));<br>        n=b.size();<br>        for (int i=0;i&lt;n;i++) {<br>            m=b[i].size();<br>            for (int j=0;j&lt;m;j++)<br>                if (b[i][j]=='X') a[j+1][i+1]=1;<br>                else a[j+1][i+1]=0;<br>        }<br>        memset(f,129,sizeof(f));<br>        f[1][0]=0;<br>        for (i=1;i&lt;=m;i++) <br>            for (j=0;j&lt;=((1&lt;&lt;n)-1);j++) <br>                if (f[i][j]&gt;=0) dfs(i,1,j,0,0);<br>        int ans=0;<br>        for (int i=1;i&lt;=m;i++)<br>            for (int j=0;j&lt;=((1&lt;&lt;n)-1);j++) ans=max(ans,f[i][j]);<br>        ans=max(ans,f[m+1][0]);<br>        return ans;<br>  }<br>};<br></td>