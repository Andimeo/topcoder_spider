<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.Arrays;<br><br>public class TheTilesDivTwo {<br><br>  char[][] myboard;<br>  int N, M;<br>  int goDp[][];<br>  int[] originalRows;<br>  int calcRowDp[][][][];<br><br>  public int go(int rowNum, int prevMask) {<br>    if (rowNum == N)<br>      return 0;<br>    if (goDp[rowNum][prevMask] != -1)<br>      return goDp[rowNum][prevMask];<br><br>    return goDp[rowNum][prevMask] = calcRow(rowNum, 0, prevMask,<br>        originalRows[rowNum]);<br>  }<br><br>  public int calcRow(int rowNum, int col, int prevMask, int curMask) {<br><br>    if (col == M)<br>      return go(rowNum + 1, curMask);<br>    if (calcRowDp[rowNum][col][prevMask][curMask] != -1)<br>      return calcRowDp[rowNum][col][prevMask][curMask];<br><br>    int ans = calcRow(rowNum,<br>        col + 1, prevMask, curMask);<br><br>    if (((rowNum + col) % 2 == 1)&amp;&amp;col - 1 &gt; -1 &amp;&amp; (((prevMask &amp; (1 &lt;&lt; (col - 1))) == 0))<br>        &amp;&amp; ((prevMask &amp; (1 &lt;&lt; (col))) == 0)<br>        &amp;&amp; (((curMask &amp; (1 &lt;&lt; (col))) == 0))) {<br>      int newPrev = (prevMask|(1&lt;&lt;col));<br>      newPrev |= (1&lt;&lt;(col-1));<br>      int newCur = curMask|(1&lt;&lt;col);<br>      ans = Math.max(ans , 1 + calcRow(rowNum,col+1,newPrev , newCur));<br>    }<br><br>    if (((rowNum + col) % 2 == 1)&amp;&amp; col + 1 &lt; M &amp;&amp; (((prevMask &amp; (1 &lt;&lt; (col + 1))) == 0))<br>        &amp;&amp; ((prevMask &amp; (1 &lt;&lt; (col))) == 0)<br>        &amp;&amp; (((curMask &amp; (1 &lt;&lt; (col))) == 0))) {<br>      int newPrev = (prevMask|(1&lt;&lt;col));<br>      newPrev |= (1&lt;&lt;(col+1));<br>      int newCur = curMask|(1&lt;&lt;col);<br>      ans = Math.max(ans , 1 + calcRow(rowNum,col+1,newPrev , newCur));<br>    }<br><br>    if (((rowNum + col) % 2 == 0)&amp;&amp;col - 1 &gt; -1 &amp;&amp; (((curMask &amp; (1 &lt;&lt; (col - 1))) == 0))<br>        &amp;&amp; ((prevMask &amp; (1 &lt;&lt; (col))) == 0)<br>        &amp;&amp; (((curMask &amp; (1 &lt;&lt; (col))) == 0))) {<br>      int newPrev = (prevMask|(1&lt;&lt;col));<br>      int newCur = curMask|(1&lt;&lt;col);<br>      newCur |= (1&lt;&lt;(col-1));<br>      ans = Math.max(ans , 1 + calcRow(rowNum,col+1,newPrev , newCur));<br>    }<br>    <br>    if (((rowNum + col) % 2 == 0)&amp;&amp;col + 1 &lt; M &amp;&amp; (((curMask &amp; (1 &lt;&lt; (col + 1))) == 0))<br>        &amp;&amp; ((prevMask &amp; (1 &lt;&lt; (col))) == 0)<br>        &amp;&amp; (((curMask &amp; (1 &lt;&lt; (col))) == 0))) {<br>      int newPrev = (prevMask|(1&lt;&lt;col));<br>      int newCur = curMask|(1&lt;&lt;col);<br>      newCur |= (1&lt;&lt;(col+1));<br>      ans = Math.max(ans , 1 + calcRow(rowNum,col+1,newPrev , newCur));<br>    }<br>    return calcRowDp[rowNum][col][prevMask][curMask] = ans;<br>  }<br><br>  public int find(String[] board) {<br>    N = board.length;<br>    M = board[0].length();<br>    myboard = new char[M][N];<br>    for (int i = 0; i &lt; N; i++)<br>      for (int j = 0; j &lt; M; j++)<br>        myboard[j][i] = board[i].charAt(j);<br>    N = myboard.length;<br>    M = myboard[0].length;<br>    goDp = new int[N + 2][(1 &lt;&lt; M) + 10];<br>    for (int i = 0; i &lt; N + 1; i++)<br>      Arrays.fill(goDp[i], -1);<br>    originalRows = new int[N];<br>    for (int i = 0; i &lt; N; i++) {<br>      for (int j = 0; j &lt; M; j++)<br>        if (myboard[i][j] == 'X')<br>          originalRows[i] |= (1 &lt;&lt; j);<br>    }<br>    calcRowDp = new int[N+1][M+1][(1 &lt;&lt; M) + 2][(1 &lt;&lt; M) + 2];<br>    for (int i = 0; i &lt; N; i++)<br>      for (int j = 0; j &lt; M; j++)<br>        for (int k = 0; k &lt; (1 &lt;&lt; M) + 1; k++)<br>          Arrays.fill(calcRowDp[i][j][k], -1);<br>    return go(0, (1 &lt;&lt; M) - 1);<br>  }<br><br>}<br><br><br><br>// Powered by FileEdit<br>// Powered by moj 4.17 [modified TZTester]<br>// Powered by CodeProcessor<br></td>