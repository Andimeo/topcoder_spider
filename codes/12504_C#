<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections;<br>using System.Collections.Generic;<br>using System.Text;<br><br>public class ArcadeManao {<br>    public int shortestLadder(string[] level, int coinRow, int coinColumn)<br>    {<br>        coinRow--; coinColumn--;<br>        int H = level.Length;<br>        int W = level[0].Length;<br>        bool[,] ok = new bool[H, W];<br>        ok[H - 1, 0] = true;<br>        for (int L = 0; L &lt; 100; L++)<br>        {<br>            Queue&lt;int&gt; q = new Queue&lt;int&gt;();<br>            for (int i = 0; i &lt; H; i++)<br>            {<br>                for (int j = 0; j &lt; W; j++)<br>                {<br>                    if (ok[i, j]) q.Enqueue(i * W + j);<br>                }<br>            }<br>            while (q.Count != 0)<br>            {<br>                int now = q.Dequeue();<br>                int y = now / W;<br>                int x = now % W;<br>                for (int t = -1; t &lt;= 1; t+=2)<br>                {<br>                    int nx = x + t;<br>                    if (nx &lt; 0 || nx &gt;= W) continue;<br>                    if (ok[y, nx]) continue;<br>                    if (level[y][nx] != 'X') continue;<br>                    ok[y, nx] = true;<br>                    q.Enqueue(y * W + nx);<br>                }<br>                for (int t = -L; t &lt;= L; t++)<br>                {<br>                    int ny = y + t;<br>                    if (ny &lt; 0 || ny &gt;= H) continue;<br>                    if (ok[ny, x]) continue;<br>                    if (level[ny][x] != 'X') continue;<br>                    ok[ny, x] = true;<br>                    q.Enqueue(ny * W + x);<br>                }<br>            }<br>            if (ok[coinRow, coinColumn]) return L;<br>        }<br><br>        return -1;<br>    }<br><br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003] Modified for C# by ysn<br>// Powered by CodeProcessor<br></td>