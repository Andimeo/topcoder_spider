<td class="problemText" colspan="8" valign="middle" align="left">
            /**<br> * Built using CHelper plug-in<br> * Actual solution is at the top<br> * @author Egor Kulikov (egor@egork.net)<br> */<br>public class ArcadeManao {<br>    public int shortestLadder(String[] level, int coinRow, int coinColumn) {<br>    int rowCount = level.length;<br>    int columnCount = level[0].length();<br>    char[][] map = new char[rowCount][];<br>    for (int i = 0; i &lt; rowCount; i++)<br>      map[i] = level[i].toCharArray();<br>    IndependentSetSystem setSystem = new RecursiveIndependentSetSystem(rowCount * columnCount);<br>    for (int i = 0; i &lt; rowCount; i++) {<br>      for (int j = 1; j &lt; columnCount; j++) {<br>        if (map[i][j] == 'X' &amp;&amp; map[i][j - 1] == 'X')<br>          setSystem.join(i * columnCount + j, i * columnCount + j - 1);<br>      }<br>    }<br>    coinRow--;<br>    coinColumn--;<br>    for (int i = 1; i &lt;= rowCount; i++) {<br>      if (setSystem.get((rowCount - 1) * columnCount) == setSystem.get(coinRow * columnCount + coinColumn))<br>        return i - 1;<br>      for (int j = i; j &lt; rowCount; j++) {<br>        for (int k = 0; k &lt; columnCount; k++) {<br>          if (map[j][k] == 'X' &amp;&amp; map[j - i][k] == 'X')<br>            setSystem.join(j * columnCount + k, (j - i) * columnCount + k);<br>        }<br>      }<br>    }<br>    throw new RuntimeException();<br>    }<br>}<br> <br>interface IndependentSetSystem {<br>  public boolean join(int first, int second);<br> <br>  public int get(int index);<br> <br>  public static interface Listener {<br>    public void joined(int joinedRoot, int root);<br>  }<br>}<br> <br>class RecursiveIndependentSetSystem implements IndependentSetSystem {<br>  private final int[] color;<br>  private int setCount;<br>  private Listener listener;<br> <br>  public RecursiveIndependentSetSystem(int size) {<br>    color = new int[size];<br>    for (int i = 0; i &lt; size; i++)<br>      color[i] = i;<br>    setCount = size;<br>  }<br> <br>  public RecursiveIndependentSetSystem(RecursiveIndependentSetSystem other) {<br>    color = other.color.clone();<br>    setCount = other.setCount;<br>  }<br> <br>  public boolean join(int first, int second) {<br>    first = get(first);<br>    second = get(second);<br>    if (first == second)<br>      return false;<br>    setCount--;<br>    color[second] = first;<br>    if (listener != null)<br>      listener.joined(second, first);<br>    return true;<br>  }<br> <br>  public int get(int index) {<br>    if (color[index] == index)<br>      return index;<br>    return color[index] = get(color[index]);<br>  }<br> <br>  }<br></td>