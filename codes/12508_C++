<td class="problemText" colspan="8" valign="middle" align="left">
            #line 71 "TheExperimentDiv2.cpp"<br>#include &lt;vector&gt;<br>#include &lt;list&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;queue&gt;<br>#include &lt;deque&gt;<br>#include &lt;stack&gt;<br>#include &lt;bitset&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;functional&gt;<br>#include &lt;numeric&gt;<br>#include &lt;utility&gt;<br>#include &lt;sstream&gt;<br>#include &lt;iostream&gt;<br>#include &lt;iomanip&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;ctime&gt;<br>#include &lt;cstring&gt;<br><br>using namespace std;<br><br>/* User defined Data Types */<br>typedef vector&lt;int&gt;              vi;<br>typedef vector&lt;vector&lt;int&gt; &gt;     vvi;<br>typedef pair&lt;int,int&gt;            ii;<br>typedef long long                ll;<br>typedef vector&lt;pair&lt;int,int&gt; &gt;   vii;<br>typedef vector&lt;string&gt;           vs;<br><br>/* User defined Macros */<br>#define FOR(i,a,b)               for(int i = a; i &lt; b; i++)<br>#define FORD(i,a,b)              for(int i = (a)-1, min_ = (b); i &gt;= min_; --i)<br>#define REP(i,n)                 for(int i = 0; i &lt; n; i++)<br>#define REPD(i,n)                for(int i = (n)-1; i &gt;= 0; --i)<br>#define pb                       push_back<br>#define all(x)                   x.begin(), x.end()<br>#define sz(a)                    int((a).size())<br>#define SORT(c)                  sort(c.begin(), c.end())<br>#define RSORT(c)                 sort(c.rbegin(), c.rend())<br>#define REVERSE(c)             reverse(c.begin(), c.end())<br><br>#define tr(c,i)                  for(typeof((c).begin()) i = (c).begin(); i != (c).end(); i++)<br>#define present(c,x)             ((c).find(x) != (c).end())<br>#define cpresent(c,x)            (find(c.begin(), c.end(), x) != (c).end())<br>#define DREP(a)                  sort(a.begin(), a.end()); a.erase(unique(a.begin(),a.end()), a.end())<br>#define INDEX(arr,ind)           (lower_bound(arr.begin(), arr.end(), ind) - arr.begin())<br>#define FILL(x,v)                memset(x, v, sizeof(x));<br><br>#define INF                      (int)1e9<br>#define LINF                     (long long)1e18<br>#define EPS                      1e-9<br>#define PI                       3.1415926535897932384626433832795<br><br>#define bitcount                 __builtin_popcount<br>#define bitcountl                __builtin_popcountl<br>#define bitcountll               __builtin_popcountll<br><br>#define mp                       make_pair<br>#define FF                       first<br>#define SS                       second<br>#define tri(a,b,c)               make_pair(a, make_pair(b, c))<br>#define XX                       first<br>#define YY                       second.first<br>#define ZZ                       second.second<br><br>/* Useful functions */<br>int GCD ( int a, int b ) { return b != 0 ? GCD(b, a % b) : a; }<br>int LCM ( int a, int b ) { return a * (b / GCD(a, b)); }<br>template &lt;class _T&gt; inline string to_string(const _T&amp; a) { ostringstream os(""); os &lt;&lt; a; return os.str(); }<br><br>class TheExperimentDiv2<br> {<br>public:<br>    vector &lt;int&gt; determineHumidity(vector &lt;int&gt; intensity, int L, vector &lt;int&gt; leftEnd)<br>  {<br>      int I = sz(intensity);<br>      int M = sz(leftEnd);<br>      vi ans(M, 0);<br>        vi used(I, 0);<br><br>      REP(i, M)<br>        {<br>            REP(j, I)<br>            {<br>                if (used[j])<br>                    continue;<br>                double pos = j == 0 ? 0.5 : j + 0.5;<br>                if (((double)(leftEnd[i])) &lt;= pos &amp;&amp; ((double)(leftEnd[i]+ L)) &gt;= pos)<br>                    ans[i] += intensity[j], used[j] = 1;<br>            }<br>        }<br>        return ans;<br>  }<br>};<br><br><br><br>// Powered by FileEdit<br>// Powered by TesterDream 1.2.4 by fushar (December 19 2012)<br>// Powered by CodeProcessor<br></td>