<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;vector&gt;<br>#include &lt;list&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;deque&gt;<br>#include &lt;stack&gt;<br>#include &lt;bitset&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;functional&gt;<br>#include &lt;numeric&gt;<br>#include &lt;utility&gt;<br>#include &lt;sstream&gt;<br>#include &lt;iostream&gt;<br>#include &lt;iomanip&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cctype&gt;<br>#include &lt;string&gt;<br>#include &lt;cstring&gt;<br>#include &lt;ctime&gt;<br> <br>using namespace std;<br> <br>typedef long long Int;<br> <br>const Int MOD = 1000000009LL;<br> <br>class TheExperiment {<br>  public:<br>    Int dp[310][310][3];<br> <br>    int countPlacements(vector &lt;string&gt; intensity, int M, int L, int A, int B) {<br>        int N = 0;<br>        vector&lt;int&gt; drops;<br>        for (int i = 0; i &lt; (int)intensity.size(); ++i) {<br>            N += intensity[i].size();<br>            for (int j = 0; j &lt; (int)intensity[i].size(); ++j) {<br>                drops.push_back(intensity[i][j] - '0');<br>            }<br>        }<br> <br>        memset(dp, 0, sizeof(dp));<br>        dp[0][0][0] = 1;<br> <br>        for (int i = 0; i &lt; N; ++i) {<br>            for (int j = 0; j &lt; M; ++j) {<br>                for (int p = 0; p &lt; 3; ++p) {<br>                    if (dp[i][j][p] &gt; 0) {<br>                        // cerr &lt;&lt; i &lt;&lt; ' ' &lt;&lt; j &lt;&lt; ' ' &lt;&lt; p &lt;&lt; ' ' &lt;&lt; dp[i][j][p] &lt;&lt; endl;<br>                        int ds = 0;<br>                        for (int k = i; k &lt; N &amp;&amp; k-i+1 &lt;= L; ++k) {<br>                            ds += drops[k];<br>                            if (ds &lt; A) {<br>                                continue;<br>                            }<br>                            if (ds &gt; B) {<br>                                break;<br>                            }<br> <br>                            if (k - i + 1 == L) {<br>                                (dp[k + 1][j + 1][2] += dp[i][j][p]) %= MOD;<br>                            } else {<br>                                (dp[k + 1][j + 1][max(p, 1)] += dp[i][j][p]) %= MOD;<br>                            }<br>                        }<br>                        if (p != 1) {<br>                            (dp[i + 1][j][0] += dp[i][j][p]) %= MOD;<br>                        }<br>                    }<br>                }<br>            }<br>        }<br> <br>        Int sol = 0;<br>        for (int i = 0; i &lt;= N; ++i) {<br>            sol += dp[i][M][2];<br>            sol %= MOD;<br>        }<br> <br>        return sol;<br>    }<br>    <br>    <br> <br>};<br> <br> <br> <br> <br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003]<br>// Powered by CodeProcessor<br></td>