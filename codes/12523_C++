<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;map&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cstring&gt;<br>#include &lt;cassert&gt;<br>#include &lt;set&gt;<br>#include &lt;iostream&gt;<br>#include &lt;sstream&gt;<br>#include &lt;cstddef&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;utility&gt;<br>#include &lt;iterator&gt;<br>#include &lt;numeric&gt;<br>#include &lt;list&gt;<br>#include &lt;complex&gt;<br>#include &lt;queue&gt;<br>#include &lt;climits&gt;<br> <br>using namespace std;<br> <br>typedef vector&lt;int&gt; vi;<br>typedef vector&lt;string&gt; vs;<br>typedef long long ll;<br>typedef complex&lt;double&gt; pnt;<br>typedef pair&lt;int, int&gt; pii;<br> <br>#define RA(x) (x).begin(), (x).end()<br>#define FE(i, x) for (typeof((x).begin()) i = (x).begin(); i != (x).end(); i++)<br>#define SZ(x) ((int) (x).size())<br> <br> <br>class UndoHistory<br>{<br>public:<br>    int minPresses(vector &lt;string&gt; lines);<br>};<br> <br>static bool prefix(const string &amp;pre, const string &amp;all)<br>{<br>    return all.size() &gt;= pre.size() &amp;&amp; all.substr(0, pre.size()) == pre;<br>}<br> <br>int UndoHistory::minPresses(vector &lt;string&gt; lines)<br>{<br>    set&lt;string&gt; undo;<br>    undo.insert("");<br>    int total = 0;<br>    string buf;<br>    for (int i = 0; i &lt; SZ(lines); i++)<br>    {<br>        string line = lines[i];<br>        int cost = 2 + line.size();<br>        if (prefix(buf, line))<br>            cost = line.size() - buf.size();<br>        FE(j, undo)<br>        {<br>            const string &amp;p = *j;<br>            if (prefix(p, line))<br>                cost = min(cost, int(2 + line.size() - p.size()));<br>        }<br>        total += cost + 1;<br>        for (int i = 1; i &lt;= SZ(line); i++)<br>            undo.insert(line.substr(0, i));<br>        buf = line;<br>    }<br>    return total;<br>}<br> <br> <br>// Powered by FileEdit<br></td>