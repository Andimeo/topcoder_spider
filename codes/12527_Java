<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>import static java.lang.Math.*;<br>import static java.util.Arrays.*;<br> <br>public class EllysChessboard {<br>  <br>  int INF = 1 &lt;&lt; 29;<br>  <br>  public int minCost(String[] board) {<br>    char[][] cs = new char[8][];<br>    for (int i = 0; i &lt; 8; i++) cs[i] = board[i].toCharArray();<br>    int[][][][] dp = new int[15][15][15][15];<br>    for (int i = 0; i &lt; 15; i++) {<br>      for (int j = 0; j &lt; 15; j++) {<br>        for (int k = 0; k &lt; 15; k++) {<br>          for (int h = 0; h &lt; 15; h++) {<br>            dp[i][j][k][h] = INF;<br>          }<br>        }<br>      }<br>    }<br>    boolean zero = true;<br>    for (int x = 0; x &lt; 8; x++) {<br>      for (int y = 0; y &lt; 8; y++) if (cs[x][y] == '#') {<br>        zero = false;<br>        int i = x + y, j = x - y + 7, k = -x + y + 7, h = -x - y + 14;<br>        dp[i][j][k][h] = 0;<br>      }<br>    }<br>    if (zero) return 0;<br>    for (int i = 0; i &lt; 15; i++) {<br>      for (int j = 0; j &lt; 15; j++) {<br>        for (int k = 0; k &lt; 15; k++) {<br>          for (int h = 0; h &lt; 15; h++) if (dp[i][j][k][h] &lt; INF) {<br>            for (int x = 0; x &lt; 8; x++) {<br>              for (int y = 0; y &lt; 8; y++) if (cs[x][y] == '#') {<br>                int i2 = x + y, j2 = x - y + 7, k2 = -x + y + 7, h2 = -x - y + 14;<br>                if (i &lt; i2 || j &lt; j2 || k &lt; k2 || h &lt; h2) {<br>                  int i3 = max(i, i2), j3 = max(j, j2), k3 = max(k, k2), h3 = max(h, h2);<br>                  int cost = dp[i][j][k][h];<br>                  for (int x2 = 0; x2 &lt; 8; x2++) {<br>                    for (int y2 = 0; y2 &lt; 8; y2++) if (cs[x2][y2] == '#') {<br>                      int i4 = x2 + y2, j4 = x2 - y2 + 7, k4 = -x2 + y2 + 7, h4 = -x2 - y2 + 14;<br>                      if ((i &lt; i4 || j &lt; j4 || k &lt; k4 || h &lt; h4) &amp;&amp; (i4 &lt;= i3 &amp;&amp; j4 &lt;= j3 &amp;&amp; k4 &lt;= k3 &amp;&amp; h4 &lt;= h3)) {<br>                        cost += max(max(i3 - i4, j3 - j4), max(k3 - k4, h3 - h4));<br>                      }<br>                    }<br>                  }<br>                  dp[i3][j3][k3][h3] = min(dp[i3][j3][k3][h3], cost);<br>                }<br>              }<br>            }<br>          }<br>        }<br>      }<br>    }<br>    int res = INF;<br>    for (int i = 0; i &lt; 15; i++) {<br>      for (int j = 0; j &lt; 15; j++) {<br>        for (int k = 0; k &lt; 15; k++) {<br>          for (int h = 0; h &lt; 15; h++) if (dp[i][j][k][h] &lt; INF) {<br>            boolean ok = true;<br>            for (int x = 0; x &lt; 8; x++) {<br>              for (int y = 0; y &lt; 8; y++) if (cs[x][y] == '#') {<br>                int i2 = x + y, j2 = x - y + 7, k2 = -x + y + 7, h2 = -x - y + 14;<br>                if (i &lt; i2 || j &lt; j2 || k &lt; k2 || h &lt; h2) {<br>                  ok = false;<br>                }<br>              }<br>            }<br>            if (ok) res = min(res, dp[i][j][k][h]);<br>          }<br>        }<br>      }<br>    }<br>    debug(res);<br>    return res;<br>  }<br>  <br>  void debug(Object...os) {<br>    System.err.println(deepToString(os));<br>  }<br>  <br>}<br></td>