<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;vector&gt;<br>#include &lt;list&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;queue&gt;<br>#include &lt;deque&gt;<br>#include &lt;stack&gt;<br>#include &lt;bitset&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;functional&gt;<br>#include &lt;numeric&gt;<br>#include &lt;utility&gt;<br>#include &lt;sstream&gt;<br>#include &lt;iostream&gt;<br>#include &lt;iomanip&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;ctime&gt;<br> <br>using namespace std;<br> <br>#define pb push_back<br> <br>class WolfInZooDivTwo {<br>public:<br>  int ways[301][301];<br>  <br>  static const int P = 1000000000 + 7;<br> <br>  int count(int N, vector &lt;string&gt; L, vector &lt;string&gt; R) {<br>    stringstream lstr(accumulate(L.begin(), L.end(), string()));<br>    vector&lt;int&gt; l;<br>    int x;<br>    while (lstr &gt;&gt; x) {<br>      cerr &lt;&lt; x &lt;&lt; '\n';<br>      l.pb(x + 1);<br>    }<br>    stringstream rstr(accumulate(R.begin(), R.end(), string()));<br>    vector&lt;int&gt; r;<br>    while (rstr &gt;&gt; x) {<br>      r.pb(x + 1);<br>    }<br>    ways[0][0] = 1;<br>    int M = l.size();<br>    cerr &lt;&lt; M &lt;&lt; '\n';<br>    for (int i = 1; i &lt;= N; ++i) {<br>      for (int j = 0; j &lt; i; ++j) {<br>        ways[i][i] += ways[i - 1][j];<br>        ways[i][i] %= P;<br>        bool ok = true;<br>        for (int k = 0; k &lt; M; ++k) {<br>          if (i &gt;= r[k] &amp;&amp; j &lt; l[k]) {<br>            ok = false;<br>            break;<br>          }<br>        }<br>        if (ok) {<br>          ways[i][j] += ways[i - 1][j];<br>          ways[i][j] %= P;<br>        }<br>      }<br>    }<br>    int ans = 0;<br>    for (int j = 0; j &lt;= N; ++j) {<br>      ans += ways[N][j];<br>      ans %= P;<br>    }<br>    return ans;<br>  }<br>};<br> <br> <br> <br>//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!<br></td>