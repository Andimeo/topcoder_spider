<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.Arrays;<br><br>public class GooseInZooDivOne {<br>  static int R;<br>  static int C;<br>  static int D;<br>  static long M = 1000L*1000*1000+7;<br>  <br>  static boolean[][] S;<br>  static int size = 0;<br>  static void dfs(int r, int c) {<br>    if(r&lt;0 || c&lt;0 || r&gt;=R || c&gt;=C || S[r][c]) return;<br>    S[r][c] = true;<br>    size++;<br>    for(int dr=-D; dr&lt;=D; dr++)<br>      for(int dc=-D; dc&lt;=D; dc++) {<br>        if(Math.abs(dr)+Math.abs(dc) &gt; D) continue;<br>        dfs(r+dr, c+dc);<br>      }<br>  }<br>  public int count(String[] field, int dist) {<br>    D = dist;<br>    R = field.length;<br>    C = field[0].length();<br>    S = new boolean[R][C];<br>    for(int r=0; r&lt;R; r++)<br>      for(int c=0; c&lt;C; c++)<br>        S[r][c] = field[r].charAt(c)=='.';<br>    <br>    int even = 0;<br>    int odd = 0;<br>    for(int r=0; r&lt;R; r++)<br>      for(int c=0; c&lt;C; c++) {<br>        size = 0;<br>        dfs(r, c);<br>        if(size &gt; 0) {<br>          if(size%2==0) even++;<br>          else odd++;<br>        }<br>      }<br>    long ans = 1;<br>    for(int i=0; i&lt;even; i++)<br>      ans = (ans*2)%M;<br>    for(int i=0; i&lt;odd-1; i++)<br>      ans = (ans*2)%M;<br>    ans = (ans+M-1)%M;<br>    return (int)ans;<br>  }<br><br>}<br></td>