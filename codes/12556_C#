<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections.Generic;<br><br>public class GameOnABoard {<br>    int rr = int.MaxValue;<br>    public int optimalChoice(string[] cost)<br>    {<br>        int n = cost.Length;<br>        int m = cost[0].Length;<br>        <br>        for (int x1 = 0; x1 &lt; n; x1++)<br>        {<br>            for (int y1 = 0; y1 &lt; m; y1++)<br>            {<br>                int l = BobChoose(cost, n, m, x1, y1);<br><br>                if (l &lt; rr)<br>                {<br>                    rr = l;<br>                }<br>            }<br>        }<br><br>        return rr;<br>    }<br><br>    private class Point<br>    {<br>        public int X = 0;<br>        public int Y = 0;<br><br>        public Point(int x,int y)<br>        {<br>            X = x;<br>            Y = y;<br>        }<br>    }<br><br>    private int[] dx = { 1, 0, 0, -1 };<br>    private int[] dy = { 0, 1, -1, 0 };<br>    private int BobChoose(string[] cost, int n, int m, int x1, int y1)<br>    {<br>        int result = int.MinValue;<br><br>        int maxv = n * m + 1;<br>        int[,] a = new int[n, m];<br>        for(int i = 0; i &lt; n;i++)<br>        {<br>            for(int j = 0; j&lt;m;j++)<br>            {<br>                a[i,j] =maxv; <br>            }<br>        }<br><br>        Queue&lt;Point&gt; q = new Queue&lt;Point&gt;();<br>        q.Enqueue(new Point(x1, y1));<br>        a[x1, y1] = (int)(cost[x1][y1] - '0');<br><br>        while (q.Count != 0)<br>        {<br>            Point p = q.Dequeue();<br>            int x = p.X;<br>            int y = p.Y;<br><br>            for (int i = 0; i &lt; 4; i++)<br>            {<br>                if (x + dx[i] &gt;= 0 &amp;&amp; x + dx[i] &lt; n &amp;&amp; y + dy[i] &gt;= 0 &amp;&amp; y + dy[i] &lt; m &amp;&amp;<br>                    (int)(cost[x + dx[i]][y + dy[i]] - '0') + a[x, y] &lt; a[x + dx[i], y + dy[i]])<br>                {<br>                    a[x + dx[i], y + dy[i]] = (int)(cost[x + dx[i]][y + dy[i]] - '0') + a[x, y];<br>                    q.Enqueue(new Point(x + dx[i], y + dy[i]));<br>                }<br>            }<br>        }<br><br>        for (int i = 0; i &lt; n; i++)<br>        {<br>            for (int j = 0; j &lt; m; j++)<br>            {<br>                if (a[i, j] &gt; result) result = a[i, j];<br>            }<br>        }<br><br>        return result;<br>    }<br><br> <br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by CodeProcessor<br></td>