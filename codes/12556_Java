<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.ArrayList;<br>import java.util.List;<br><br>public class GameOnABoard {<br><br>  int[][] mp = null;<br>  boolean[][] vis = null;<br>  int m, n;<br>  int[][] res = null;<br>  public int optimalChoice(String[] cost) {<br>    <br>    mp = new int[cost.length][cost[0].length()];<br>    <br>    <br>    for(int i =0;i &lt; mp.length; i++){<br>      char[] arr = cost[i].toCharArray();<br>      for(int j = 0; j &lt; arr.length; j++){<br>        mp[i][j] = arr[j] == '0' ? 0 : 1;<br>      }<br>    }<br>    <br>    m = mp.length;<br>    n = mp[0].length;<br>    <br>    vis = new boolean[m][n];<br>    res = new int[m][n];<br>    <br>    int min = 1000000;<br>    <br>    for(int i=0; i&lt; m; i++){<br>      for(int j = 0; j &lt; n; j ++){<br>        eval(i, j);<br>        int max = 0;<br>        <br>        for(int a =0; a&lt; m ; a++){<br>          for(int b = 0; b &lt; n; b++){<br>            max = Math.max(max, res[a][b]);<br>          }<br>        }<br>        <br>        min = Math.min(max, min);<br>      }<br>    }<br>    <br>    <br>    return min;<br>    <br>  }<br>  <br>  <br>  public void eval(int x, int y){<br>    for(int i = 0; i&lt; m ;i ++){<br>      for(int j = 0; j&lt; n ; j++){<br>        vis[i][j] = false;<br>        res[i][j] = 10000;<br>      }<br>    }<br>    <br>    res[x][y] = mp[x][y];<br>    vis[x][y] = true;<br>    <br>    List&lt;Integer&gt; xVis = new ArrayList&lt;Integer&gt;();<br>    List&lt;Integer&gt; yVis = new ArrayList&lt;Integer&gt;();<br>    <br>    xVis.add(x);<br>    yVis.add(y);<br>    <br>    while(xVis.size() &gt; 0){<br>      int i = xVis.remove(0);<br>      int j = yVis.remove(0);<br>      <br>      if(i &gt; 0 &amp;&amp; res[i-1][j] &gt; (res[i][j] + mp[i-1][j])){<br>        res[i-1][j] = res[i][j] + mp[i-1][j];<br>        xVis.add(i-1);<br>        yVis.add(j);<br>      }<br>      <br>      if( i &lt; (m -1 ) &amp;&amp; res[i+1][j] &gt; (res[i][j] + mp[i+1][j])){<br>        res[i+1][j] = res[i][j] + mp[i+1][j];<br>        xVis.add(i+1);<br>        yVis.add(j);<br>      }<br>      <br>      if(j &gt; 0 &amp;&amp; res[i][j-1] &gt; (res[i][j] + mp[i][j-1])){<br>        res[i][j-1] = res[i][j] + mp[i][j-1];<br>        xVis.add(i);<br>        yVis.add(j-1);<br>      }<br>      <br>      if(j &lt; (n - 1) &amp;&amp; res[i][j+1] &gt; (res[i][j] + mp[i][j+1])){<br>        res[i][j+1] = res[i][j] + mp[i][j+1];<br>        xVis.add(i);<br>        yVis.add(j+1);<br>      }<br>      <br>      <br>    }<br>    <br>    return ;<br>  }<br><br>}<br></td>