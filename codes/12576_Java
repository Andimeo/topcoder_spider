<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>import java.util.regex.*;<br>import java.text.*;<br>import java.math.*;<br> <br> <br>public class ShoutterDiv1<br>{<br>  String concat(String[] ar) {<br>    StringBuilder sb = new StringBuilder();<br>    for (String s : ar) {<br>      sb.append(s);<br>    }<br>    return sb.toString();<br>  }<br> <br>  int[] concat(String[] s1000, String[] s100, String[] s10, String[] s1) {<br>    String c1000 = concat(s1000);<br>    String c100 = concat(s100);<br>    String c10 = concat(s10);<br>    String c1 = concat(s1);<br>    int[] r = new int[c1.length()];<br>    for (int i = 0; i &lt;  r.length; ++i) {<br>      r[i] = (((c1000.charAt(i) - '0') * 10 + c100.charAt(i) - '0') * 10 + c10.charAt(i) - '0') * 10 + c1.charAt(i) - '0';<br>    }<br>    return r;<br>  }<br>  <br>  int n;<br>  int[] s, t;<br>  int[] repostLeft, repostRight, repost;<br>  <br>  final int INF = 1000000000;<br>  <br>  int repostLeft(int i) {<br>    if (repostLeft[i] == -1) {<br>      boolean need = false;<br>      for (int j = 0; j &lt; n &amp;&amp; !need; ++j) {<br>        need |= t[j] &lt; s[i];<br>      }<br>      if (need) {<br>        repostLeft[i] = INF;<br>        for (int j = 0; j &lt; n; ++j) {<br>          if (s[j] &lt; s[i] &amp;&amp; t[j] &gt;= s[i]) {<br>            repostLeft[i] = Math.min(repostLeft[i], repostLeft(j) + 1);<br>          }<br>        }<br>      } else {<br>        repostLeft[i] = 0;<br>      }<br>    }<br>    return repostLeft[i];<br>  }<br>  <br>  int repostRight(int i) {<br>    if (repostRight[i] == -1) {<br>      boolean need = false;<br>      for (int j = 0; j &lt; n &amp;&amp; !need; ++j) {<br>        need |= s[j] &gt; t[i];<br>      }<br>      if (need) {<br>        repostRight[i] = INF;<br>        for (int j = 0; j &lt; n; ++j) {<br>          if (t[j] &gt; t[i] &amp;&amp; s[j] &lt;= t[i]) {<br>            repostRight[i] = Math.min(repostRight[i], repostRight(j) + 1);<br>          }<br>        }<br>      } else {<br>        repostRight[i] = 0;<br>      }<br>    }<br>    return repostRight[i];<br>  }<br>  <br>  int repost(int i) {<br>    if (repost[i] == -1) {<br>      repost[i] = repostLeft(i) + repostRight(i);<br>      for (int j = 0; j &lt; n; ++j) {<br>        if (s[j] &lt; s[i] &amp;&amp; t[i] &lt; t[j]) {<br>          repost[i] = Math.min(repost[i], repost(j) + 1);<br>        }<br>      }<br>    }<br>    return repost[i];<br>  }<br>  <br>  public int count(String[] s1000, String[] s100, String[] s10, String[] s1, String[] t1000, String[] t100, String[] t10, String[] t1)<br>  {<br>    s = concat(s1000, s100, s10, s1);<br>    t = concat(t1000, t100, t10, t1);<br>    n = s.length;<br>    repostLeft = new int[n];<br>    repostRight = new int[n];<br>    repost = new int[n];<br>    Arrays.fill(repostLeft, -1);<br>    Arrays.fill(repostRight, -1);<br>    Arrays.fill(repost, -1);<br>    int ans = 0;<br>    for (int i = 0; i &lt; n; ++i) {<br>      //System.out.println(i + " " + repost(i));<br>      if (repost(i) &gt;= INF) {<br>        return -1;<br>      }<br>      ans += repost(i);<br>    }<br>    return ans;<br>  }<br>  <br> <br>}<br>//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!<br></td>