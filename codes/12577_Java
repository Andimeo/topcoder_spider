<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.Arrays;<br> <br>/**<br> * Built using CHelper plug-in<br> * Actual solution is at the top<br> * @author Egor Kulikov (egor@egork.net)<br> */<br>public class WallGameDiv1 {<br>  int[] sums;<br>  int[][] rabbit;<br>  int[][] eel;<br>  int[] cost;<br> <br>    public int play(String[] costs) {<br>    int rowCount = costs.length;<br>    int columnCount = costs[0].length();<br>    cost = new int[columnCount];<br>    for (int i = 0; i &lt; columnCount; i++)<br>      cost[i] = costs[rowCount - 1].charAt(i) - '0';<br>    sums = new int[columnCount + 1];<br>    rabbit = new int[columnCount][columnCount];<br>    eel = new int[columnCount][columnCount];<br>    int[] next = new int[columnCount];<br>    for (int i = rowCount - 2; i &gt;= 0; i--) {<br>      sums[0] = 0;<br>      for (int j = 0; j &lt; columnCount; j++)<br>        sums[j + 1] = sums[j] + costs[i].charAt(j) - '0';<br>      ArrayUtils.fill(rabbit, -1);<br>      ArrayUtils.fill(eel, -1);<br>      for (int j = 0; j &lt; columnCount; j++)<br>        next[j] = countEel(j, j) + sums[j + 1] - sums[j];<br>      int[] temp = cost;<br>      cost = next;<br>      next = temp;<br>    }<br>    int answer = Integer.MAX_VALUE;<br>    for (int i = 0; i &lt; columnCount; i++)<br>      answer = Math.min(answer, cost[i]);<br>    return answer;<br>  }<br> <br>  private int countEel(int current, int other) {<br>    if (eel[current][other] != -1)<br>      return eel[current][other];<br>    return eel[current][other] = Math.max(cost[current], countRabbit(current, other));<br>  }<br> <br>  private int countRabbit(int current, int other) {<br>    if (rabbit[current][other] != -1)<br>      return rabbit[current][other];<br>    if (Math.abs(current - other) == cost.length - 1)<br>      return rabbit[current][other] = 0;<br>    int right = Math.max(current, other);<br>    int left = Math.min(current, other);<br>    if (right == cost.length - 1)<br>      return rabbit[current][other] = countEel(left - 1, right) + sums[current] - sums[left - 1];<br>    if (left == 0)<br>      return rabbit[current][other] = countEel(right + 1, left) + sums[right + 2] - sums[current + 1];<br>    return rabbit[current][other] = Math.min(<br>      countEel(left - 1, right) + sums[current] - sums[left - 1],<br>      countEel(right + 1, left) + sums[right + 2] - sums[current + 1]<br>    );<br>  }<br>}<br> <br>class ArrayUtils {<br> <br>  public static void fill(int[][] array, int value) {<br>    for (int[] row : array)<br>      Arrays.fill(row, value);<br>  }<br> <br>  }<br></td>