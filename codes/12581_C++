<td class="problemText" colspan="8" valign="middle" align="left">
            #include&lt;algorithm&gt;<br>#include&lt;vector&gt;<br>#include&lt;iostream&gt;<br><br>using namespace std;<br><br>template &lt;class T&gt; void setmin(T &amp;a, T b) { if(b &lt; a) a = b; }<br>template &lt;class T&gt; void setmax(T &amp;a, T b) { if(b &gt; a) a = b; }<br><br>class ColorTheCells {<br>    public:<br>        int N;<br>        vector&lt;int&gt; T;<br>        vector&lt;int&gt; done;<br>        int out;<br>        void dfs(int curT, int pos, int num) {<br>            //cerr &lt;&lt; curT &lt;&lt; ' ' &lt;&lt; pos &lt;&lt; ' ' &lt;&lt; num &lt;&lt; '\n';<br>            if(num == N) setmin(out, curT);<br>            for(int i = 0; i &lt; N; i++) {<br>                if(done[i] == -1) {<br>                    for(int nxt = i - 1; nxt &lt;= i + 1; nxt += 2) {<br>                        if(nxt &gt;= N || nxt &lt; 0) continue;<br>                        int nxtT = curT;<br>                        int cur = pos;<br>                        while(cur != nxt) {<br>                            cur -= (cur &gt; nxt) ? 1 : -1;<br>                            nxtT ++;<br>                            setmax(nxtT, done[cur]);<br>                        }<br>                        nxtT ++;// paint time<br>                        done[i] = nxtT + T[i] + 1;<br>                        dfs(nxtT, nxt, num + 1);<br>                        done[i] = -1;<br>                    }<br>                }<br>            }<br>        }<br><br>        int minimalTime(vector &lt;int&gt; dryingTime) {<br>            T = dryingTime;<br>            N = T.size();<br>            done.resize(N);<br>            for(int i = 0; i &lt; N; i++) done[i] = -1;<br>            out = 1 &lt;&lt; 25;<br>            dfs(0, 0, 0);<br>            return out;<br>        }<br>};<br><br> <br>// Edited by VimCoder 0.3.5<br>// http://github.com/chazmcgarvey/vimcoder<br></td>