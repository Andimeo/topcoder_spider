<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;functional&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;stdexcept&gt;<br>#include &lt;iostream&gt;<br>#include &lt;sstream&gt;<br>#include &lt;fstream&gt;<br>#include &lt;numeric&gt;<br>#include &lt;iomanip&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cstring&gt;<br>#include &lt;utility&gt;<br>#include &lt;cctype&gt;<br>#include &lt;vector&gt;<br>#include &lt;string&gt;<br>#include &lt;bitset&gt;<br>#include &lt;cmath&gt;<br>#include &lt;queue&gt;<br>#include &lt;stdio.h&gt;<br>#include &lt;stack&gt;<br>#include &lt;ctime&gt;<br>#include &lt;list&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;assert.h&gt;<br>#define REP(i,n) for(int i=0;i&lt;n;i++)<br>#define TR(i,x) for(typeof(x.begin()) i=x.begin();i!=x.end();i++)<br>#define ALL(x) x.begin(),x.end()<br>#define SORT(x) sort(ALL(x))<br>#define CLEAR(x) memset(x,0,sizeof(x))<br>#define FILL(x,c) memset(x,c,sizeof(x))<br> <br>using namespace std;<br> <br>const double eps = 1e-8;<br> <br>#define PB push_back<br>#define MP make_pair<br> <br>typedef map&lt;int,int&gt; MII;<br>typedef map&lt;string,int&gt; MSI;<br>typedef vector&lt;int&gt; VI;<br>typedef vector&lt;string&gt; VS;<br>typedef vector&lt;long double&gt; VD;<br>typedef pair&lt;int,int&gt; PII;<br>typedef long long int64;<br>typedef long long ll;<br>typedef unsigned int UI;<br>typedef long double LD;<br>typedef unsigned long long ULL;<br> <br>class ColorfulBuilding {<br>public:<br>  int count(vector &lt;string&gt;, vector &lt;string&gt;, int);<br>};<br> <br>const int MOD = 1000000009;<br> <br>int coef[1400];<br>int sum[1400];<br>int detail[1400][1400];<br>int dp[1400][1400];<br>int color[1400];<br>map&lt;string, int&gt; ref;<br> <br>int ColorfulBuilding::count(vector &lt;string&gt; color1, vector &lt;string&gt; color2, int L) {<br>  string c1, c2;<br>  TR(it, color1) c1 += *it;<br>  TR(it, color2) c2 += *it;<br>  int n = c1.size();<br>  ref.clear();<br>  int all = 0;<br>  REP(i, n) {<br>    char c;<br>    string res = "";<br>    c = c1[i];<br>    res = res + c;<br>    c = c2[i];<br>    res = res + c;<br>    if (ref.find(res) == ref.end()) {<br>      ref[res] = all++;<br>    }<br>    color[i] = ref[res];<br>  }<br>  reverse(color, color + n);<br>  CLEAR(dp);<br>  CLEAR(detail);<br>  CLEAR(coef);<br>  CLEAR(sum);<br>  dp[0][1] = 1;<br>  detail[color[0]][1] = 1;<br>  REP(i, n) coef[i] = 1;<br>  sum[1] = 1;<br> <br>  for (int i = 1; i &lt; n; ++i) {<br>    for (int j = 1; j &lt;= n; ++j) {<br>      int cur = sum[j - 1];<br>      cur = (cur - coef[color[i]] * (ll)detail[color[i]][j - 1]) % MOD;<br>      cur = (cur + coef[color[i]] * (ll)detail[color[i]][j]) % MOD;<br>      dp[i][j] = cur;<br>    }<br>    for (int j = 0; j &lt; all; ++j) {<br>      coef[j] = coef[j] * (ll)i % MOD;<br>    }<br>    for (int j = 1; j &lt;= n; ++j) {<br>      sum[j] = (sum[j] * (ll)i + dp[i][j]) % MOD;<br>    }<br>    for (int j = 1; j &lt;= n; ++j) {<br>      detail[color[i]][j] = (detail[color[i]][j] * (ll)coef[color[i]] + dp[i][j]) % MOD;<br>    }<br>    coef[color[i]] = 1;<br>  }<br> <br>  if (sum[L] &lt; 0) sum[L] += MOD;<br> <br>  return sum[L];<br>}<br> <br> <br>//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!<br></td>