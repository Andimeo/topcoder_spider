<td class="problemText" colspan="8" valign="middle" align="left">
            import java.math.BigInteger;<br> <br>/**<br> * Built using CHelper plug-in<br> * Actual solution is at the top<br> */<br>public class ColorfulBuilding {<br>    static final int MODULO = (int) (1e9 + 9);<br> <br>    public int count(String[] color1, String[] color2, int L) {<br>        String C1 = concatenate(color1);<br>        String C2 = concatenate(color2);<br>        int n = C1.length();<br>        int[] colorId = new int[n + 1];<br>        for (int i = 0; i &lt; n; ++i)<br>            colorId[i + 1] = decode(C1.charAt(i)) * 52 + decode(C2.charAt(i));<br>        colorId[0] = 52 * 52;<br>        int[][] arb = new int[n + 1][n + 1];<br>        for (int a = 0; a &lt;= n; ++a) {<br>            arb[a][0] = 1;<br>            for (int b = 1; b &lt;= a; ++b) {<br>                arb[a][b] = (int) (a * (long) arb[a - 1][b - 1] % MODULO);<br>            }<br>        }<br>        int maxColor = 52 * 52 + 1;<br>        int[][] ways = new int[n + 1][L + 1];<br>        int[] waysSum = new int[L + 1];<br>        int[][] waysSumPerColor = new int[L + 1][maxColor];<br>        ways[0][0] = 1;<br>        waysSum[0] = 1;<br>        waysSumPerColor[0][colorId[0]] = 1;<br>        for (int last = 1; last &lt;= n; ++last) {<br>            for (int seen = 0; seen &lt;= L; ++seen) {<br>                ways[last][seen] = (ways[last][seen] + waysSumPerColor[seen][colorId[last]]) % MODULO;<br>                if (seen &gt; 0)<br>                    ways[last][seen] = (int) ((ways[last][seen] + (long) waysSum[seen - 1] - waysSumPerColor[seen - 1][colorId[last]] + MODULO) % MODULO);<br>            }<br>            if (last &lt; n) {<br>                long inv = BigInteger.valueOf(n - last).modInverse(BigInteger.valueOf(MODULO)).longValue();<br>                for (int seen = 0; seen &lt;= L; ++seen) {<br>                    ways[last][seen] = (int) (ways[last][seen] * inv % MODULO);<br>                }<br>            }<br>            for (int seen = 0; seen &lt;= L; ++seen) {<br>                waysSum[seen] = (waysSum[seen] + ways[last][seen]) % MODULO;<br>                waysSumPerColor[seen][colorId[last]] = (waysSumPerColor[seen][colorId[last]] + ways[last][seen]) % MODULO;<br>            }<br>        }<br>        long res = ways[n][L];<br>        for (int i = 1; i &lt;= n - 1; ++i)<br>            res = res * i % MODULO;<br>        return (int) res;<br>    }<br> <br>    private int decode(char c) {<br>        if (c &gt;= 'a' &amp;&amp; c &lt;= 'z')<br>            return c - 'a';<br>        else if (c &gt;= 'A' &amp;&amp; c &lt;= 'Z')<br>            return c - 'A' + 26;<br>        else<br>            throw new RuntimeException();<br>    }<br> <br>    private String concatenate(String[] a) {<br>        StringBuilder b = new StringBuilder();<br>        for (String x : a) b.append(x);<br>        return b.toString();<br>    }<br>}<br></td>