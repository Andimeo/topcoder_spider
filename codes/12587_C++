<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;vector&gt;<br>#include &lt;list&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;queue&gt;<br>#include &lt;deque&gt;<br>#include &lt;stack&gt;<br>#include &lt;bitset&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;functional&gt;<br>#include &lt;numeric&gt;<br>#include &lt;utility&gt;<br>#include &lt;sstream&gt;<br>#include &lt;iostream&gt;<br>#include &lt;iomanip&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;ctime&gt;<br>#include&lt;cstring&gt;<br> <br>using namespace std;<br> <br>const int MAXN = 9;<br>bool mrk[MAXN+1];<br>int per[MAXN+10];<br>int dis[2][MAXN+1][MAXN+1];<br>bool adj[2][MAXN+1][MAXN+1];<br>int ind;<br>int n;<br> <br>void dfs(int k,int v,int d=0)<br>{<br>  mrk[v] = true;<br>  dis[k][ind][v] = d;<br>  for(int i=0; i&lt;n; i++)<br>    if( !mrk[i] &amp;&amp; adj[k][v][i] )<br>      dfs(k,i,d+1);<br>}<br> <br>class TreeUnionDiv2 {<br>public:<br>  int maximumCycles(vector &lt;string&gt; tree1, vector &lt;string&gt; tree2, int K) {<br>    n = (int)tree1.size();<br> <br>      for(int i=0; i&lt;n; i++)<br>        for(int j=0; j&lt;n; j++)<br>          if( tree1[i][j] == 'X' )<br>            adj[0][i][j] = 1;<br>          else<br>            adj[0][i][j] = 0;<br> <br>      for(int i=0; i&lt;n; i++)<br>        for(int j=0; j&lt;n; j++)<br>          if( tree2[i][j] == 'X' )<br>            adj[1][i][j] = 1;<br>          else<br>            adj[1][i][j] = 0;<br>    for(int k=0; k&lt;2; k++)<br>      for(int i=0; i&lt;n; i++)<br>      {<br>        memset( mrk , 0 , sizeof mrk );<br>        ind = i;<br>        dfs(k,i);<br>      }<br> <br>    for(int i=0; i&lt;n; i++)<br>      per[i] = i;<br> <br>    int best = 0;<br> <br>    do{<br>      int cnt = 0;<br>      for(int i=0; i&lt;n; i++)<br>        for(int j=i+1; j&lt;n; j++)<br>          if( dis[0][i][j] + 2 + dis[1][per[i]][per[j]] == K )<br>            cnt++;<br>      best = max( best , cnt );<br>    }while( next_permutation( per , per+n ) );<br>    return best;<br>  }<br>};<br> <br> <br> <br>//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!<br></td>