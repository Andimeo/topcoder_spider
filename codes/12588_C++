<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;vector&gt;<br>#include &lt;list&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;queue&gt;<br>#include &lt;deque&gt;<br>#include &lt;stack&gt;<br>#include &lt;bitset&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;sstream&gt;<br>#include &lt;fstream&gt;<br>#include &lt;iostream&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cassert&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;climits&gt;<br>#include &lt;cstring&gt;<br><br>using namespace std;<br><br>typedef     long long        ll;<br>typedef     long double      ld;<br>typedef     pair&lt;int,int&gt;    pii;<br>typedef     vector&lt;int&gt;      vi;<br>typedef     vector&lt;string&gt;   vs;<br>typedef     map&lt;int,int&gt;     mii;<br>typedef     map&lt;string,int&gt;  msi;<br>typedef     map&lt;char,int&gt;    mci;<br>typedef     istringstream    iss;<br>typedef     ostringstream    oss;<br><br>#define    REP(i,a)          for (int i=0; i&lt;a; i++)<br>#define    FIT(it,v)         for (typeof((v).begin())it=(v).begin(); it!=(v).end(); ++it)<br>#define    ALL(v)            (v).begin(),(v).end()<br>#define    SET(a,x)          memset((a),(x),sizeof(a))<br>#define    EXIST(a,b)        find(ALL(a),(b))!=(a).end()<br>#define    SORT(x)           sort(ALL(x))<br>#define    GSORT(x)          sort(ALL(x), greater&lt;typeof(*((x).begin()))&gt;())<br>#define    UNIQUE(v)         SORT(v); (v).resize(unique(ALL(v)) - (v).begin())<br>#define    pb                push_back<br>#define    mp                make_pair<br>#define    MOD               1000000007<br><br>template&lt;typename T&gt; inline string tostring(const T&amp; x){oss os;os&lt;&lt;x;return os.str();}<br>inline int toint(const string&amp; s){iss is(s);int x;is&gt;&gt;x;return x;}<br>inline int todecimal(string s){int a=0;REP(i,s.size())a=2*a+(s[i]-'0');return a;}<br>inline string tobinary( int a){string s;while(a!=0){s=(char)(a%2+'0')+s;a&gt;&gt;=1;}return s;}<br><br>template&lt;typename T&gt; inline T sqr(T x){return x*x;}<br>template&lt;typename T&gt; T gcd(T a,T b){return (b==0)?abs(a):gcd(b,a%b);}<br>inline int isvowel(char c){if(c=='a'||c=='e'||c=='i'||c=='o'||c=='u')return 1;return 0;}<br>inline int isprime(int a){for(int i=2;i*i&lt;=a;i++)if(!(a%i))return 0;return 1;}<br><br>class node {<br>public:<br>    int x, y, z;<br>    node( int a, int b, int c ) {x=a; y=b; z=c;}<br>};<br>bool operator&lt;( const node &amp;a, const node &amp;b ) {<br>    return a.x &gt; b.x;<br>}<br>bool compare( const node &amp;a, const node &amp;b ) {<br>    return a.x &lt; b.x;<br>}<br><br>class SurveillanceSystem {<br>  public:<br>  string getContainerInfo(string containers, vector &lt;int&gt; reports, int L) {<br>    int n = containers.size();<br><br>    int count[n+1];<br>    SET( count, 0 );<br><br>    REP( i, reports.size() ) count[reports[i]]++;<br><br>    string answer;<br>    REP( i, n ) answer += '?';<br><br>    vector&lt; vi &gt; vv[n+1];<br>    REP( i, n-L+1 ) {<br>        vi v;<br>        int y = 0;<br>        REP( j, L ) {<br>            v.pb( i+j );<br>            if ( containers[i+j] == 'X' ) y++;<br>        }<br>        vv[y].pb( v );<br>    }<br><br>    int not_negative[n];<br>    SET( not_negative, 0 );<br><br>    REP( i, n+1 ) {<br>        if ( vv[i].size() == 0 || count[i] == 0 ) continue;<br>        int y = vv[i].size();<br><br>        int cnt[n];<br>        SET( cnt, 0 );<br><br>        REP( j, y ) {<br>                REP( k, vv[i][j].size() ) {<br>                    int element = vv[i][j][k];<br>                    cnt[element]++;<br>                    not_negative[element] = 1;<br>                }<br>        }<br><br>        REP( j, n ) {<br>            if ( y - cnt[j] + 1 &lt;= count[i] ) answer[j] = '+';<br>        }<br>    }<br><br>    REP( i, n ) {<br>        if ( !not_negative[i] ) answer[i] = '-';<br>    }<br><br>    return answer;<br>  }<br>};<br><br><br><br>// Powered by FileEdit<br>// Powered by TesterDream 1.2.4 by fushar (December 19 2012)<br>// Powered by CodeProcessor<br></td>