<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;vector&gt;<br>#include &lt;list&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;deque&gt;<br>#include &lt;stack&gt;<br>#include &lt;bitset&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;functional&gt;<br>#include &lt;numeric&gt;<br>#include &lt;utility&gt;<br>#include &lt;sstream&gt;<br>#include &lt;iostream&gt;<br>#include &lt;iomanip&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;ctime&gt;<br> <br>using namespace std;<br> <br>class TurnOnLamps {<br>public:<br>       int minimize(vector &lt;int&gt;, string, string);<br>};<br> <br>const int maxN = 60;<br>const int inf = 1000000;<br>vector &lt; int &gt; g[maxN];<br>int n;<br>int color[maxN][maxN], imp[maxN][maxN];<br>bool used[maxN];<br> <br>int d[maxN][maxN];<br>int p[maxN][maxN];<br> <br>void dfs(int v) {<br>  used[v] = true;<br>  vector &lt; int &gt; children;<br>  for (int i = 0; i &lt; g[v].size(); ++i) {<br>    if (!used[g[v][i]]) {<br>      dfs(g[v][i]);<br>      children.push_back(g[v][i]);<br>    }<br>  }<br> <br>  for (int i = 0; i &lt;= n; ++i) {<br>    for (int j = 0; j &lt;= n; ++j) {<br>      p[i][j] = inf;<br>    }<br>  }<br> <br>  p[0][0] = 0;<br>  for (int i = 0; i &lt; children.size(); ++i) {<br>    for (int j = 0; j &lt;= n; ++j) {<br>      int current = color[v][children[i]];<br>      bool isImp = imp[v][children[i]];<br> <br>      for (int k = 0; k &lt;= n; ++k) {<br>        for (int to = 0; to &lt;= k; ++to) {<br>          if (isImp &amp;&amp; (current + to) % 2 != 1) {<br>            continue;<br>          }<br> <br>          p[i + 1][abs(j - to)] = min(p[i + 1][abs(j - to)], p[i][j] + d[children[i]][k] - min(j, to));<br>        }<br>      }<br>    }<br>  }<br> <br>  for (int i = 0; i &lt;= n; ++i) {<br>    d[v][i] = p[children.size()][i];<br>  }<br>  for (int i = 0; i &lt;= n; ++i) {<br>    for (int j = 0; j &lt; i; ++j) {<br>      d[v][i] = min(d[v][i], d[v][j] + (i - j));<br>    }<br>  }<br>}<br> <br>int TurnOnLamps::minimize(vector &lt;int&gt; roads, string initState, string isImportant) {<br>  n = roads.size() + 1;<br>  for (int i = 0; i &lt; n; ++i) {<br>    g[i].clear();<br>  }<br> <br>  memset(color, 0, sizeof(color));<br>  memset(imp, 0, sizeof(imp));<br>  for (int i = 0; i &lt; roads.size(); ++i) {<br>    g[i + 1].push_back(roads[i]);<br>    g[roads[i]].push_back(i + 1);<br> <br>    color[roads[i]][i + 1] = color[i + 1][roads[i]] = initState[i] - '0';<br>    imp[roads[i]][i + 1] = imp[i + 1][roads[i]] = isImportant[i] - '0';<br>  }<br> <br>  memset(used, 0, sizeof(used));<br>  dfs(0);<br> <br>  int res = inf;<br>  for (int i = 0; i &lt;= n; ++i) {<br>    res = min(res, d[0][i]);<br>  }<br>  return res;<br>}<br> <br> <br>//Powered by [KawigiEdit] 2.0!<br></td>