<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;vector&gt;<br>#include &lt;list&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;deque&gt;<br>#include &lt;stack&gt;<br>#include &lt;bitset&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;functional&gt;<br>#include &lt;numeric&gt;<br>#include &lt;utility&gt;<br>#include &lt;sstream&gt;<br>#include &lt;iostream&gt;<br>#include &lt;iomanip&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;ctime&gt;<br> <br>using namespace std;<br> <br>class TheGameDAG {<br>public:<br>  double getProbability(vector &lt;int&gt;, int, int);<br>};<br> <br>int n, a, b;<br> <br>int open[42], p[42];<br> <br>double res, total;<br> <br>void go(int v, bool edge) {<br>  if (v == n + 1) {<br>    for (int i = 0; i &lt; n; i++) open[i] = 0;<br>    for (int i = 1; i &lt;= n; i++) open[p[i]]++;<br>    int cnt = 0;<br>    double prob = 1.0;<br>    for (int i = 0; i &lt; n; i++) {<br>      cnt += open[i];<br>      prob /= cnt;<br>      cnt--;<br>    }<br>    for (int i = 1; i &lt;= n; i++)<br>      if (p[i] &gt;= 2) prob *= (1 &lt;&lt; (p[i] - 1));<br>    if (edge) {<br>      if (p[b] &lt; a) return;<br>      if (p[b] &gt; a) prob /= 2;<br>    }<br>    if (edge) res += prob;<br>    else total += prob;<br>    return;<br>  }<br>  for (int i = 0; i &lt; v; i++) {<br>    p[v] = i;<br>    go(v + 1, edge);<br>  }<br>}<br> <br>double TheGameDAG::getProbability(vector &lt;int&gt; P, int A, int B) {<br>  n = P.size(), a = -1, b = -1;<br>  for (int i = 0; i &lt; n; i++) {<br>    if (P[i] == A) a = i;<br>    if (P[i] == B) b = i;<br>  }<br>  a++; b++;<br>  if (a &gt; b) return 0.0;<br>  total = 0;<br>  go(1, false);<br>  res = 0;<br>  go(1, true);<br>  return res / total;<br>}<br> <br>//Powered by [KawigiEdit] 2.0!<br></td>