<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.Arrays;<br>import java.util.Comparator;<br>import java.util.NoSuchElementException;<br> <br>/**<br> * Built using CHelper plug-in<br> * Actual solution is at the top<br> * @author Egor Kulikov (egor@egork.net)<br> */<br>public class TheGameDAG {<br>    int a, b;<br> <br>    double[][][] weight;<br>    double[][][] answer;<br> <br>    public double getProbability(int[] P, int A, int B) {<br>        MiscUtils.decreaseByOne(P);<br>        int[] reverse = ArrayUtils.reversePermutation(P);<br>        A = reverse[A - 1];<br>        B = reverse[B - 1];<br>        if (A &gt; B)<br>            return 0;<br>        a = A + 1;<br>        b = B + 1;<br>        answer = new double[3][P.length + 1][1 &lt;&lt; P.length];<br>        weight = new double[3][P.length + 1][1 &lt;&lt; P.length];<br>        ArrayUtils.fill(answer, -1);<br>        calculate(1, P.length, 0);<br>        return answer[1][P.length][0];<br>    }<br> <br>    private void calculate(int sure, int step, int mask) {<br>        if (answer[sure][step][mask] != -1)<br>            return;<br>        if (step == 0) {<br>            weight[sure][step][mask] = 1;<br>            answer[sure][step][mask] = sure / 2d;<br>            return;<br>        }<br>        answer[sure][step][mask] = 0;<br>        for (int i = mask; ; i = (i - 1) &amp; mask) {<br>            int nSure = sure;<br>            if (step == a &amp;&amp; ((mask &gt;&gt; (b - 1) &amp; 1) == 1)) {<br>                if ((i &gt;&gt; (b - 1) &amp; 1) == 1)<br>                    nSure = 0;<br>                else<br>                    nSure = 2;<br>            }<br>            int nMask = i + (1 &lt;&lt; (step - 1));<br>            calculate(nSure, step - 1, nMask);<br>            double delta = 1d / (Integer.bitCount(i) + 1);<br>            weight[sure][step][mask] += weight[nSure][step - 1][nMask] * delta;<br>            answer[sure][step][mask] += answer[nSure][step - 1][nMask] * weight[nSure][step - 1][nMask] * delta;<br>            if (i == 0)<br>                break;<br>        }<br>        if (weight[sure][step][mask] != 0)<br>            answer[sure][step][mask] /= weight[sure][step][mask];<br>        weight[sure][step][mask] /= 1 &lt;&lt; Integer.bitCount(mask);<br>    }<br>}<br> <br>class MiscUtils {<br> <br>    public static void decreaseByOne(int[]...arrays) {<br>    for (int[] array : arrays) {<br>      for (int i = 0; i &lt; array.length; i++)<br>        array[i]--;<br>    }<br>  }<br> <br>  }<br> <br>class ArrayUtils {<br> <br>  public static void fill(double[][] array, double value) {<br>    for (double[] row : array)<br>      Arrays.fill(row, value);<br>  }<br> <br>  public static void fill(double[][][] array, double value) {<br>    for (double[][] row : array)<br>      fill(row, value);<br>  }<br> <br>  public static int[] reversePermutation(int[] permutation) {<br>    int[] result = new int[permutation.length];<br>    for (int i = 0; i &lt; permutation.length; i++)<br>      result[permutation[i]] = i;<br>    return result;<br>  }<br> <br>  }<br></td>