<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;cstdio&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cstring&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cctype&gt;<br>#include &lt;iostream&gt;<br>#include &lt;string&gt;<br>#include &lt;sstream&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;queue&gt;<br>#include &lt;vector&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;utility&gt;<br>#include &lt;functional&gt;<br>using namespace std;<br><br><br>//copied from SCL<br>#define INF 2000000000<br>#define MAXN 111<br>#define MAXM 11111<br>using namespace std;<br>typedef int type;<br>struct node<br>{<br>  int u, v;<br>  type w;<br>}edge[MAXN * MAXN];<br>int pre[MAXN], id[MAXN], vis[MAXN], n, m;<br>type in[MAXN];<br>type Directed_MST(int root, int V, int E)<br>{<br>  type ret = 0;<br>  while(true)<br>  {<br>    //1.[\u25214][\u26368][\u23567][\u20837][\u36793]<br>    for(int i = 0; i &lt; V; i++)<br>      in[i] = INF;<br>    for(int i = 0; i &lt; E; i++)<br>    {<br>      int u = edge[i].u;<br>      int v = edge[i].v;<br>      if(edge[i].w &lt; in[v] &amp;&amp; u != v)<br>      {pre[v] = u; in[v] = edge[i].w;}<br>    }<br>    for(int i = 0; i &lt; V; i++)<br>    {<br>      if(i == root) continue;<br>      if(in[i] == INF) return -1;//[\u38500][\u20102][\u26681][\u20197][\u22806][\u26377][\u28857][\u27809][\u26377][\u20837][\u36793],[\u21017][\u26681][\u26080][\u27861][\u21040][\u36798][\u23427]<br>    }<br>    //2.[\u25214][\u29615]<br>    int cnt = 0;<br>    memset(id, -1, sizeof(id));<br>    memset(vis, -1, sizeof(vis));<br>    in[root] = 0;<br>    for(int i = 0; i &lt; V; i++) //[\u26631][\u35760][\u27599][\u20010][\u29615]<br>    {<br>      ret += in[i];<br>      int v = i;<br>      while(vis[v] != i &amp;&amp; id[v] == -1 &amp;&amp; v != root)  //[\u27599][\u20010][\u28857][\u23547][\u25214][\u20854][\u21069][\u24207][\u28857], [\u35201][\u20040][\u26368][\u32456][\u23547][\u25214][\u33267][\u26681][\u37096], [\u35201][\u20040][\u25214][\u21040][\u19968][\u20010][\u29615]<br>      {<br>        vis[v] = i;<br>        v = pre[v];<br>      }<br>      if(v != root &amp;&amp; id[v] == -1)//[\u32553][\u28857]<br>      {<br>        for(int u = pre[v]; u != v; u = pre[u]) <br>          id[u] = cnt;<br>        id[v] = cnt++;<br>      }<br>    }<br>    if(cnt == 0) break; //[\u26080][\u29615]   [\u21017]break<br>    for(int i = 0; i &lt; V; i++)<br>      if(id[i] == -1) id[i] = cnt++;<br>    //3.[\u24314][\u31435][\u26032][\u22270]<br>    for(int i = 0; i &lt; E; i++)<br>    {<br>      int u = edge[i].u;<br>      int v = edge[i].v;<br>      edge[i].u = id[u];<br>      edge[i].v = id[v];<br>      if(id[u] != id[v]) edge[i].w -= in[v];<br>    }<br>    V = cnt;<br>    root = id[root];<br>  }<br>  return ret;<br>}<br>//end of copy<br><br>class FoxTheLinguist{<br>  public:<br>  int minimalHours(int n, vector &lt;string&gt; courseInfo){<br>    string s="";<br>    for(int i=0; i&lt;courseInfo.size(); i++)<br>      s+=courseInfo[i];<br>    istringstream sin(s);<br>    string t;<br>    int E=0,V=10*n+1;<br>    while(sin&gt;&gt;t){<br>      char f1,f2;<br>      int l1,l2,tim,a1,a2;<br>      sscanf(t.c_str(),"%c%d%*c%*c%c%d%*c%d",&amp;f1,&amp;l1,&amp;f2,&amp;l2,&amp;tim);<br>      a1=f1-'A';<br>      a2=f2-'A';<br>      for(int i=l1; i&lt;=9; i++){<br>        node tmp;<br>        tmp.u=a1*10+i;<br>        tmp.v=a2*10+l2;<br>        tmp.w=tim;<br>        edge[E++]=tmp;<br>      }<br>    }<br>    for(int i=0; i&lt;n; i++){<br>      node tmp;<br>      tmp.u=V-1;<br>      tmp.v=i*10;<br>      tmp.w=0;<br>      edge[E++]=tmp;<br>    }<br>    for(int i=0; i&lt;n; i++)<br>      for(int j=9; j&gt;0; j--){<br>        node tmp;<br>        tmp.u=i*10+j;<br>        tmp.v=i*10+j-1;<br>        tmp.w=0;<br>        edge[E++]=tmp;<br>      }<br>    return Directed_MST(V-1,V,E);<br>  }<br>  <br> <br>};<br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003]<br>// Powered by CodeProcessor<br></td>