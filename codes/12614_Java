<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.Arrays;<br> <br>/**<br> * Built using CHelper plug-in<br> * Actual solution is at the top<br> */<br>public class FoxTheLinguist {<br>    static final int INF = (int) 1e9;<br> <br>    public int minimalHours(int n, String[] courseInfo) {<br>        StringBuilder bu = new StringBuilder();<br>        for (String x : courseInfo) bu.append(x);<br>        String[] courses = bu.toString().split(" ", -1);<br>        int cn = courses.length;<br>        int[] src = new int[cn];<br>        int[] dst = new int[cn];<br>        int[] spent = new int[cn];<br>        for (int i = 0; i &lt; cn; ++i) {<br>            src[i] = (courses[i].charAt(0) - 'A') * 10 + courses[i].charAt(1) - '0';<br>            dst[i] = (courses[i].charAt(4) - 'A') * 10 + courses[i].charAt(5) - '0';<br>            spent[i] = Integer.parseInt(courses[i].substring(7));<br>        }<br>        int[][] best = new int[1 &lt;&lt; n][n * 10];<br>        for (int subset = 1; subset &lt; (1 &lt;&lt; n); ++subset) {<br>            int[] sbest = best[subset];<br>            Arrays.fill(sbest, INF);<br>            if (((subset - 1) &amp; subset) == 0) {<br>                int what = 0;<br>                while ((subset &amp; (1 &lt;&lt; what)) == 0) ++what;<br>                sbest[what * 10 + 9] = 0;<br>            } else {<br>                for (int child = (subset - 1) &amp; subset; child &gt; 0; child = (child - 1) &amp; subset) {<br>                    int[] c1 = best[child];<br>                    int[] c2 = best[subset ^ child];<br>                    for (int i = 0; i &lt; sbest.length; ++i) {<br>                        sbest[i] = Math.min(sbest[i], c1[i] + c2[i]);<br>                    }<br>                }<br>            }<br>            while (true) {<br>                boolean updated = false;<br>                for (int a = 0; a &lt; n; ++a)<br>                    for (int b = 0; b &lt; 10; ++b) {<br>                        int c = a * 10 + b;<br>                        if (sbest[c] &gt;= INF) continue;<br>                        if (b + 1 &lt; 10) {<br>                            int d = c + 1;<br>                            if (sbest[d] &gt; sbest[c]) {<br>                                sbest[d] = sbest[c];<br>                                updated = true;<br>                            }<br>                        }<br>                        if (b == 0 &amp;&amp; a &gt; 0) {<br>                            int d = c - 10;<br>                            if (sbest[d] &gt; sbest[c]) {<br>                                sbest[d] = sbest[c];<br>                                updated = true;<br>                            }<br>                        }<br>                    }<br>                for (int i = 0; i &lt; cn; ++i)<br>                {<br>                    int c = dst[i];<br>                    if (sbest[c] &gt;= INF) continue;<br>                    int d = src[i];<br>                    int dist = sbest[c] + spent[i];<br>                    if (sbest[d] &gt; dist) {<br>                        sbest[d] = dist;<br>                        updated = true;<br>                    }<br>                }<br>                if (!updated) break;<br>            }<br>        }<br>        int res = best[(1 &lt;&lt; n) - 1][0];<br>        if (res &gt;= INF) res = -1;<br>        return res;<br>    }<br>}<br></td>