<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;vector&gt;<br>#include &lt;list&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;deque&gt;<br>#include &lt;stack&gt;<br>#include &lt;bitset&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;functional&gt;<br>#include &lt;numeric&gt;<br>#include &lt;utility&gt;<br>#include &lt;sstream&gt;<br>#include &lt;iostream&gt;<br>#include &lt;iomanip&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;ctime&gt;<br> <br>using namespace std;<br>typedef long long ll;<br> <br>class PyramidSequences {<br>public:<br>  long long distinctPairs(int, int);<br>};<br> <br>ll gcf (ll A, ll B)<br>{<br>  return ((B == 0) ? A : gcf (B, A % B));<br>}<br> <br>ll per;<br> <br>ll solve (ll N, ll loc) // loc 0 = 0, 1 = 1,2,...per/2-1, 2 = per/2<br>{<br>  //cout &lt;&lt; N &lt;&lt; " " &lt;&lt; loc &lt;&lt; "\n";<br>  <br>  if (loc == 0)<br>  {<br>    return (N - 1) / per + 1;<br>  }<br>  else if (loc == 1)<br>  {<br>    return (2 * N - 2) / per;<br>  }<br>  else<br>  {<br>    if ((N - 1) % per == 0)<br>      return (N - 1) / per;<br>    return (N - 1) / per + 1;<br>  }<br>}<br> <br>long long PyramidSequences::distinctPairs(int N, int M) {<br>  per = gcf (2 * N - 2, 2 * M - 2);<br>  <br>  //cout &lt;&lt; solve (N, 0) &lt;&lt; " " &lt;&lt; solve (M, 0) &lt;&lt; " " &lt;&lt; solve (N, 1) &lt;&lt; " " &lt;&lt; solve (M, 1) &lt;&lt; " " &lt;&lt; solve (N, 2) &lt;&lt; " " &lt;&lt; solve (M, 2);<br>  <br>  return solve (N, 0) * solve (M, 0) + ((per - 2) / 2) * solve (N, 1) * solve (M, 1) + solve (N, 2) * solve (M, 2);<br>}<br> <br> <br>//Powered by [KawigiEdit] 2.0!<br></td>