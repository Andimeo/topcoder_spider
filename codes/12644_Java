<td class="problemText" colspan="8" valign="middle" align="left">
            public class Excavations2 {<br>  <br>  int[] values;<br>  int[] needs;<br>  long[][] ccs;<br>  <br>  long C(int m, int n) {<br>    if (n == 0) {<br>      return 1;<br>    }<br>    if (m == n) {<br>      return 1;<br>    }<br>    if (ccs[m][n] != -1) {<br>      return ccs[m][n];<br>    }<br>    ccs[m][n] = C(m - 1, n - 1) + C(m - 1, n);<br>    return ccs[m][n];<br>  }<br>  <br>  long[][] ff;<br>  long fun(int s, int i) {<br>    if (i == values.length) {<br>      if (s == 0) {<br>        return 1;<br>      }<br>      return 0;<br>    }<br>    if (ff[s][i] != -1) {<br>      return ff[s][i];<br>    }<br>    int need = needs[i + 1];<br>    long ret = 0;<br>    for (int x = 1; x &lt;= values[i]; x++) {<br>      int ns = s - x;<br>      if (ns &lt; need) {<br>        break;<br>      }<br>      long r = fun(ns, i + 1);<br>      ret += r * C(values[i], x);<br>    }<br>    ff[s][i] = ret;<br>    return ret;<br>  }<br>  <br>  public long count(int[] kind, int[] found, int K) {<br>    values = new int[found.length];<br>    for (int i = 0; i &lt; values.length; i++) {<br>      int s = 0;<br>      for (int j = 0; j &lt; kind.length; j++) {<br>        if (kind[j] == found[i]) {<br>          s++;<br>        }<br>      }<br>      values[i] = s;<br>    }<br>    needs = new int[values.length + 1];<br>    int s = 0;<br>    for (int i = values.length; i &gt;= 0; i--) {<br>      needs[i] = s;<br>      s++;<br>    }<br>    ccs = new long[100][100];<br>    ff = new long[100][100];<br>    for (int i = 0; i &lt; ccs.length; i++) {<br>      for (int j = 0; j &lt; ccs[i].length; j++) {<br>        ccs[i][j] = -1;<br>        ff[i][j] = -1;<br>      }<br>    }<br>    return fun(K, 0);<br>  }<br>  <br>  public static void main(String[] args) {<br>    Excavations2 e = new Excavations2();<br>    int[] kinds = new int[] {50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50};<br>    int[] founds = new int[] {50};<br>    int K = 21;<br>    long res = e.count(kinds, founds, K);<br>    System.out.println(res);<br>  }<br>}<br></td>