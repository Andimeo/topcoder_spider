<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.Arrays;<br>import java.util.Comparator;<br>import java.util.NoSuchElementException;<br> <br>/**<br> * Built using CHelper plug-in<br> * Actual solution is at the top<br> * @author Egor Kulikov (egor@egork.net)<br> */<br>public class StringWeight {<br>    public int getMinimum(int[] L) {<br>    int count = L.length;<br>    int[][][] result = new int[count + 1][27][27];<br>    ArrayUtils.fill(result, Integer.MAX_VALUE / 2);<br>    result[0][0][0] = 0;<br>    for (int i = 0; i &lt; count; i++) {<br>      int current = L[i];<br>      for (int j = 0; j &lt;= 26; j++) {<br>        for (int k = 0; k &lt;= j; k++) {<br>          for (int l = 0; j + l &lt;= 26; l++) {<br>            for (int m = 0; m + k &lt;= j + l; m++) {<br>              if (j + l - k &lt; Math.min(current, 26))<br>                continue;<br>              int addCost = 0;<br>              int openClosed = Math.min(j - k, m);<br>              addCost += openClosed * (openClosed + 1) / 2;<br>              int stillOpen = Math.max(0, j - k - m);<br>              addCost += stillOpen * current;<br>              int newlyOpened = Math.min(l, j + l - (k + m));<br>              addCost += newlyOpened * (newlyOpened - 1) / 2;<br>              if (stillOpen == 0)<br>                addCost += Math.max(current - 26, 0);<br>              result[i + 1][j + l][k + m] = Math.min(result[i + 1][j + l][k + m], result[i][j][k] + addCost);<br>            }<br>          }<br>        }<br>      }<br>    }<br>    int answer = Integer.MAX_VALUE / 2;<br>    for (int[] row : result[count])<br>      answer = Math.min(answer, ArrayUtils.minElement(row));<br>    return answer;<br>  }<br>}<br> <br>class ArrayUtils {<br> <br>  public static void fill(int[][] array, int value) {<br>    for (int[] row : array)<br>      Arrays.fill(row, value);<br>  }<br> <br>  public static void fill(int[][][] array, int value) {<br>    for (int[][] subArray : array)<br>      fill(subArray, value);<br>  }<br> <br>  public static int minPosition(int[] array) {<br>    return minPosition(array, 0, array.length);<br>  }<br> <br>  public static int minPosition(int[] array, int from, int to) {<br>        if (from &gt;= to)<br>            return -1;<br>        int min = array[from];<br>        int result = from;<br>        for (int i = from + 1; i &lt; to; i++) {<br>            if (array[i] &lt; min) {<br>                min = array[i];<br>                result = i;<br>            }<br>        }<br>        return result;<br>    }<br> <br>  public static int minElement(int[] array) {<br>    return array[minPosition(array)];<br>  }<br> <br>  }<br></td>