<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections;<br>using System.Collections.Generic;<br>using System.Text;<br><br>public class History {<br>    public string verifyClaims(string[] dynasties, string[] battles, string[] queries)<br>    {<br>        int n = dynasties.Length;<br>        int[][] years = new int[dynasties.Length][];<br>        for (int i = 0; i &lt; dynasties.Length; i++)<br>        {<br>            string[] st = dynasties[i].Split(' ');<br>            years[i] = new int[st.Length];<br>            for (int j = 0; j &lt; st.Length; j++)<br>            {<br>                years[i][j] = int.Parse(st[j]);<br>            }<br>        }<br>        string bst = "";<br>        foreach (var item in battles)<br>        {<br>            bst += item;<br>        }<br>        string[] bb = bst.Split(' ');<br><br>        int b = bb.Length;<br>        int[,] nation = new int[b, 2];<br>        int[,] number = new int[b, 2];<br>        for (int i = 0; i &lt; b; i++)<br>        {<br>            nation[i, 0] = bb[i][0] - 'A';<br>            number[i, 0] = bb[i][1] - '0';<br>            nation[i, 1] = bb[i][3] - 'A';<br>            number[i, 1] = bb[i][4] - '0';<br>        }<br><br>        string ret = "";<br>        for (int i = 0; i &lt; queries.Length; i++)<br>        {<br>            int nata = queries[i][0] - 'A';<br>            int numa = queries[i][1] - '0';<br>            int natb = queries[i][3] - 'A';<br>            int numb = queries[i][4] - '0';<br><br>            int[] min = new int[n];<br>            int[] max = new int[n];<br>            for (int j = 0; j &lt; n; j++)<br>            {<br>                min[j] = -999999;<br>                max[j] = 999999;<br>            }<br>            min[nata] = max[nata] = 0;<br><br>            while (true)<br>            {<br>                bool flag = false;<br>                for (int j = 0; j &lt; b; j++)<br>                {<br>                    if (years[nation[j, 0]][number[j, 0] + 1] + max[nation[j, 0]] &lt;= years[nation[j, 1]][number[j, 1]] + max[nation[j, 1]])<br>                    {<br>                        max[nation[j, 1]] += ((years[nation[j, 0]][number[j, 0] + 1] + max[nation[j, 0]]) - (years[nation[j, 1]][number[j, 1]] + max[nation[j, 1]])) - 1;<br>                        flag = true;<br>                    }<br>                    if (years[nation[j, 0]][number[j, 0]] + min[nation[j, 0]] &gt;= years[nation[j, 1]][number[j, 1] + 1] + min[nation[j, 1]])<br>                    {<br>                        min[nation[j, 1]] += ((years[nation[j, 0]][number[j, 0]] + min[nation[j, 0]]) - (years[nation[j, 1]][number[j, 1] + 1] + min[nation[j, 1]])) + 1;<br>                        flag = true;<br>                    }<br><br>                    if (years[nation[j, 1]][number[j, 1] + 1] + max[nation[j, 1]] &lt;= years[nation[j, 0]][number[j, 0]] + max[nation[j, 0]])<br>                    {<br>                        max[nation[j, 0]] += ((years[nation[j, 1]][number[j, 1] + 1] + max[nation[j, 1]]) - (years[nation[j, 0]][number[j, 0]] + max[nation[j, 0]])) - 1;<br>                        flag = true;<br>                    }<br>                    if (years[nation[j, 1]][number[j, 1]] + min[nation[j, 1]] &gt;= years[nation[j, 0]][number[j, 0] + 1] + min[nation[j, 0]])<br>                    {<br>                        min[nation[j, 0]] += ((years[nation[j, 1]][number[j, 1]] + min[nation[j, 1]]) - (years[nation[j, 0]][number[j, 0] + 1] + min[nation[j, 0]])) + 1;<br>                        flag = true;<br>                    }<br>                }<br><br>                /*<br>                for (int j = 0; j &lt; n; j++)<br>                {<br>                    Console.WriteLine(min[j] + " " + max[j]);<br>                }<br>                Console.WriteLine();<br>                 */<br>                if (!flag) break;<br>            }<br>            /*<br>            Console.WriteLine(min[nata] + " " + max[nata] + " " + years[nata][numa] + " " + years[nata][numa + 1]);<br>            Console.WriteLine(min[natb] + " " + max[natb] + " " + years[natb][numb] + " " + years[natb][numb + 1]);<br>            Console.WriteLine();<br>             */<br>            bool ok = true;<br>            if (years[nata][numa + 1] + max[nata] &lt;= years[natb][numb] + min[natb])<br>            {<br>                ok = false;<br>            }<br>            if (years[nata][numa] + min[nata] &gt;= years[natb][numb + 1] + max[natb])<br>            {<br>                ok = false;<br>            }<br><br>            if (years[natb][numb + 1] + max[natb] &lt;= years[nata][numa] + min[nata])<br>            {<br>                ok = false;<br>            }<br>            if (years[natb][numb] + min[natb] &gt;= years[nata][numa + 1] + max[nata])<br>            {<br>                ok = false;<br>            }<br>            if (ok) ret += "Y";<br>            else ret += "N";<br><br><br>        }<br><br><br>        return ret;<br>    }<br><br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003] Modified for C# by ysn<br>// Powered by CodeProcessor<br></td>