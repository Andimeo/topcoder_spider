<td class="problemText" colspan="8" valign="middle" align="left">
            from operator import concat<br> <br>class History:<br>    def verifyClaims(_, dynasties, battles, queries, ):<br>        D = map(lambda x: map(int, x.split()), dynasties)<br>        N = len(D)<br> <br>        battles = reduce(concat, battles).split()<br> <br>        def r(s):<br>            x = ord(s[0]) - ord('A')<br>            y = ord(s[3]) - ord('A')<br>            xx = int(s[1])<br>            yy = int(s[4])<br> <br>            dmax = D[x][xx+1]-1 - D[y][yy]<br>            dmin = D[x][xx] - (D[y][yy+1]-1)<br> <br>            return (x,y, dmin, dmax)<br> <br>        dist = [ [ 1000000000 ] * N for i in xrange(N) ]<br> <br>        for s in battles:<br>            x,y,dmin,dmax = r(s)<br>            <br>            dist[x][y] = min(dist[x][y], dmax)<br>            dist[y][x] = min(dist[y][x], -dmin)<br> <br>        for k in xrange(N):<br>            for i in xrange(N):<br>                for j in xrange(N):<br>                    dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])<br> <br>        ans = ""<br>        for s in queries:<br>            x,y,dmin,dmax = r(s)<br> <br>            dmax2 = dist[x][y]<br>            dmin2 = -dist[y][x]<br> <br>            if dmin2 &lt;= dmax and dmax2 &gt;= dmin:<br>                ans += 'Y'<br>            else:<br>                ans += 'N'<br>        return ans<br></td>