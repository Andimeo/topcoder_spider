<td class="problemText" colspan="8" valign="middle" align="left">
            Option Infer On<br>Imports Microsoft.VisualBasic<br>Imports System<br>Imports System.Collections<br>Imports System.Text<br>Imports System.Collections.Generic<br> <br>Public Class History<br>    Public Structure Battle<br>        Dim a1, d1, a2, d2 As Integer<br>    End Structure<br>    Public Const INF As Integer = 99999999<br>    Public Function Check(ByRef G(,) As Integer) As Boolean<br>        Dim N As Integer = G.GetLength(0)<br> <br>        Dim D(N - 1) As Integer<br>        For i = 0 To N - 1<br>            D(i) = 0<br>        Next<br>        For q = 0 To N + 3<br>            Dim update = False<br>            For j = 0 To N - 1<br>                For k = 0 To N - 1<br>                    If (D(k) &gt; D(j) + G(j, k)) Then<br>                        D(k) = D(j) + G(j, k)<br>                        update = True<br>                    End If<br>                Next<br>            Next<br>            If q = N + 2 Then<br>                Return False<br>            End If<br>            If Not update Then<br>                Exit For<br>            End If<br>        Next<br>        Return True<br>    End Function<br>    Public Function verifyClaims(ByVal dynasties As String(), ByVal _battles As String(), ByVal queries As String()) As String<br>        ' [\u30683][\u30462][\u12377][\u12427][\u12363][\u12393][\u12358][\u12363][\u12434][\u32771][\u12360][\u12427]<br>        ' [\u38929][\u24373][\u12427]<br>        Dim Bss = ""<br>        For Each BB In _battles<br>            Bss += BB<br>        Next<br>        Dim D As Integer()() = New Integer(dynasties.Length)() {}<br>        For i = 0 To dynasties.Length - 1<br>            Dim ts = dynasties(i).Split<br>            D(i) = New Integer(ts.Length) {}<br>            For j = 0 To ts.Length - 1<br>                D(i)(j) = ts(j)<br>            Next<br>        Next<br>        Dim Bs = Bss.Split(" ")<br>        Dim N As Integer = dynasties.Length<br>        Dim G(N - 1, N - 1) As Integer<br>        For i = 0 To N - 1<br>            For j = 0 To N - 1<br>                G(i, j) = (i &lt;&gt; j) * -INF<br>            Next<br>        Next<br>        For Each BB In Bs<br>            Dim P1 = BB.Split("-")(0), P2 = BB.Split("-")(1)<br>            Dim b As Battle<br>            b.a1 = Asc(P1(0)) - 65<br>            b.a2 = Asc(P2(0)) - 65<br>            b.d1 = Integer.Parse(P1.Substring(1))<br>            b.d2 = Integer.Parse(P2.Substring(1))<br>            G(b.a2, b.a1) = Math.Min(G(b.a2, b.a1), D(b.a2)(b.d2 + 1) - D(b.a1)(b.d1) - 1)<br>            G(b.a1, b.a2) = Math.Min(G(b.a1, b.a2), D(b.a1)(b.d1 + 1) - D(b.a2)(b.d2) - 1)<br>        Next<br>        verifyClaims = ""<br>        For Each BB In queries<br>            Dim P1 = BB.Split("-")(0), P2 = BB.Split("-")(1)<br>            Dim b As Battle<br>            b.a1 = Asc(P1(0)) - 65<br>            b.a2 = Asc(P2(0)) - 65<br>            b.d1 = Integer.Parse(P1.Substring(1))<br>            b.d2 = Integer.Parse(P2.Substring(1))<br>            Dim GG(N - 1, N - 1) As Integer<br>            For i = 0 To N - 1<br>                For j = 0 To N - 1<br>                    GG(i, j) = G(i, j)<br>                Next<br>            Next<br>            GG(b.a2, b.a1) = Math.Min(GG(b.a2, b.a1), D(b.a2)(b.d2 + 1) - D(b.a1)(b.d1) - 1)<br>            GG(b.a1, b.a2) = Math.Min(GG(b.a1, b.a2), D(b.a1)(b.d1 + 1) - D(b.a2)(b.d2) - 1)<br>            If Check(GG) Then<br>                verifyClaims += "Y"<br>            Else<br>                verifyClaims += "N"<br>            End If<br>        Next<br>    End Function<br> <br>End Class<br></td>