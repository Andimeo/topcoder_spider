<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;vector&gt;<br>#include &lt;list&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;deque&gt;<br>#include &lt;stack&gt;<br>#include &lt;bitset&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;functional&gt;<br>#include &lt;numeric&gt;<br>#include &lt;utility&gt;<br>#include &lt;sstream&gt;<br>#include &lt;iostream&gt;<br>#include &lt;iomanip&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;ctime&gt;<br> <br>using namespace std;<br> <br>class EnclosingTriangle {<br>public:<br>  long long getNumber(int, vector &lt;int&gt;, vector &lt;int&gt;);<br>};<br> <br>const int N = 1000010;<br> <br>int x[N], y[N], nx[N], pr[N];<br>long long sum[N];<br> <br>long long EnclosingTriangle::getNumber(int m, vector &lt;int&gt; xp, vector &lt;int&gt; yp) {<br>  int k = xp.size();<br>  int n = 0;<br>  for (int i=0;i&lt;m;i++) { x[n] = i; y[n] = 0; n++; }<br>  for (int i=0;i&lt;m;i++) { x[n] = m; y[n] = i; n++; }<br>  for (int i=m;i&gt;0;i--) { x[n] = i; y[n] = m; n++; }<br>  for (int i=m;i&gt;0;i--) { x[n] = 0; y[n] = i; n++; }<br>  for (int i=0;i&lt;n;i++) {<br>    x[i+n] = x[i];<br>    y[i+n] = y[i];<br>  }<br>  for (int i=0;i&lt;n;i++) {<br>    int ll = i+1, rr = i+n-1;<br>    while (ll+1 &lt; rr) {<br>      int mid = (ll + rr) &gt;&gt; 1;<br>      long long a = y[mid] - y[i];<br>      long long b = x[i] - x[mid];<br>      long long c = - a * x[i] - b * y[i];<br>      bool ok = true;<br>      for (int p=0;p&lt;k;p++) {<br>        if (a * xp[p] + b * yp[p] + c &gt; 0) {<br>          ok = false;<br>          break;<br>        }<br>      }<br>      if (ok) ll = mid;<br>      else rr = mid;<br>    }<br>    nx[i] = ll-i;<br>  }<br>  for (int i=n;i&lt;n+n;i++) {<br>    int ll = i-n+1, rr = i-1;<br>    while (ll+1 &lt; rr) {<br>      int mid = (ll + rr) &gt;&gt; 1;<br>      long long a = y[mid] - y[i];<br>      long long b = x[i] - x[mid];<br>      long long c = - a * x[i] - b * y[i];<br>      bool ok = true;<br>      for (int p=0;p&lt;k;p++) {<br>        if (a * xp[p] + b * yp[p] + c &lt; 0) {<br>          ok = false;<br>          break;<br>        }<br>      }<br>      if (ok) rr = mid;<br>      else ll = mid;<br>    }<br>    pr[i-n] = i-ll;<br>  }<br>  sum[0] = 0;<br>  for (int i=0;i&lt;n;i++) sum[i + 1] = sum[i] + nx[i];<br>  long long ans = 0;<br>  for (int i=0;i&lt;n;i++) {<br>    int ll = 1, rr = nx[i]+1;<br>    while (ll &lt; rr) {<br>      int mid = (ll + rr) &gt;&gt; 1;<br>      int j = (i + mid) % n;<br>      int total = mid + pr[i] + nx[j] - 1;<br>      if (total &gt;= n) rr = mid;<br>      else ll = mid + 1;<br>    }<br>    if (ll &lt;= nx[i]) {<br>      long long len = nx[i] - ll + 1;<br>      ans += len * (ll + nx[i]) / 2;<br>      ans += len * pr[i];<br>      ans -= len * n;<br>      int start = (i + ll) % n;<br>      int finish = (i + nx[i]) % n;<br>      if (start &lt;= finish) ans += sum[finish + 1] - sum[start];<br>      else ans += sum[finish + 1] + (sum[n] - sum[start]);<br>    }<br>  }<br>  for (int i=0;i&lt;n;i++) {<br>    int j = (i+nx[i]) % n;<br>    if (nx[i]+nx[j] == n) ans -= 2;<br>  }<br>  return ans / 3;<br>}<br> <br>  <br>//Powered by [KawigiEdit] 2.0!<br></td>