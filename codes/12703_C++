<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;vector&gt;<br>#include &lt;list&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;deque&gt;<br>#include &lt;stack&gt;<br>#include &lt;bitset&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;functional&gt;<br>#include &lt;numeric&gt;<br>#include &lt;utility&gt;<br>#include &lt;sstream&gt;<br>#include &lt;iostream&gt;<br>#include &lt;iomanip&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;ctime&gt;<br> <br>using namespace std;<br> <br>class LittleElephantAndBoard {<br>public:<br>  int getNumber(int, int, int, int);<br>};<br> <br>const int md = 1000000007;<br>const int N = 1000042;<br> <br>int fact[N], inv[N];<br> <br>int pw(int a, int b) {<br>  int x = 1, step = 1 &lt;&lt; 30;<br>  while (step &gt; 0) {<br>    x = (long long)x * x % md;<br>    if (step &amp; b) x = (long long)x * a % md;<br>    step &gt;&gt;= 1;<br>  }<br>  return x;<br>}<br> <br>int C(int n, int k) {<br>  if (n &lt; 0 || k &lt; 0 || k &gt; n) return 0;<br>  int x = fact[n];<br>  int y = inv[k];<br>  int z = inv[n - k];<br>  return (long long)x * y % md * z % md;<br>}<br> <br>int LittleElephantAndBoard::getNumber(int M, int R, int G, int B) {<br>  fact[0] = 1;<br>  for (int i = 1; i &lt; N; i++) fact[i] = (long long)fact[i - 1] * i % md;<br>  inv[0] = 1;<br>  for (int i = 1; i &lt; N; i++) inv[i] = pw(fact[i], md - 2);<br>  if (R &gt; M || G &gt; M || B &gt; M) {<br>    return 0;<br>  }<br>  int rb = M - G, rg = M - B, bg = M - R;<br>  int ans = 0;<br>  for (int cnt_rb = 0; cnt_rb &lt;= rb; cnt_rb++) {<br>    if (rb &gt; 0 &amp;&amp; cnt_rb == 0) continue;<br>    for (int cnt_rg = cnt_rb - 1; cnt_rg &lt;= cnt_rb + 1 &amp;&amp; cnt_rg &lt;= rg; cnt_rg++) {<br>      if (cnt_rg &lt; 0) continue;<br>      if (rg &gt; 0 &amp;&amp; cnt_rg == 0) continue;<br>      int need = (rb - cnt_rb) + (rg - cnt_rg);<br>      if (need &gt; bg) continue;<br>      int have = rg + rb + 1;<br>      if (bg &gt; have) continue;<br>      int cur = 2;<br>      if (cnt_rg == cnt_rb) cur *= 2;<br>      if (rb &gt; 0) cur = (long long)cur * C(rb - 1, cnt_rb - 1) % md;<br>      if (rg &gt; 0) cur = (long long)cur * C(rg - 1, cnt_rg - 1) % md;<br>      cur = (long long)cur * C(have - need, bg - need) % md;<br>      ans = (ans + cur) % md;<br>    }<br>  }<br>  return ans;<br>}<br> <br> <br>//Powered by [KawigiEdit] 2.0!<br></td>