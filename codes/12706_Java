<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.Comparator;<br>import java.util.Arrays;<br> <br>/**<br> * Built using CHelper plug-in<br> * Actual solution is at the top<br> */<br>public class GUMIAndSongsDiv1 {<br>    static class Song {<br>        int duration;<br>        int tone;<br> <br>        Song(int duration, int tone) {<br>            this.duration = duration;<br>            this.tone = tone;<br>        }<br>    }<br> <br>    public int maxSongs(int[] duration, int[] tone, int T) {<br>        Song[] songs = new Song[duration.length];<br>        for (int i = 0; i &lt; duration.length; ++i) {<br>            songs[i] = new Song(duration[i], tone[i]);<br>        }<br>        Arrays.sort(songs, new Comparator&lt;Song&gt;() {<br>            @Override<br>            public int compare(Song o1, Song o2) {<br>                return o1.tone - o2.tone;<br>            }<br>        });<br>        int res = 0;<br>        for (int first = 0; first &lt; songs.length; ++first)<br>            for (int last = first; last &lt; songs.length; ++last) {<br>                int timeLeft = T - (songs[last].tone - songs[first].tone);<br>                if (timeLeft &lt; 0) continue;<br>                Song[] cur = new Song[last - first + 1];<br>                System.arraycopy(songs, first, cur, 0, cur.length);<br>                Arrays.sort(cur, new Comparator&lt;Song&gt;() {<br>                    @Override<br>                    public int compare(Song o1, Song o2) {<br>                        return o1.duration - o2.duration;<br>                    }<br>                });<br>                int got = 0;<br>                for (Song x : cur) {<br>                    if (x.duration &lt;= timeLeft) {<br>                        timeLeft -= x.duration;<br>                        ++got;<br>                    } else break;<br>                }<br>                res = Math.max(res, got);<br>            }<br>        return res;<br>    }<br>}<br></td>