<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.Arrays;<br> <br>/**<br> * Built using CHelper plug-in<br> * Actual solution is at the top<br> */<br>public class GameInDarknessDiv1 {<br>    public String check(String[] field) {<br>        int rows = field.length;<br>        int cols = field[0].length();<br>        int[][] aliceDist = getDist(rows, cols, field, 'A');<br>        int[][] bobDist = getDist(rows, cols, field, 'B');<br>        boolean[][] nice = new boolean[rows][cols];<br>        int rootRow = -1;<br>        int rootCol = -1;<br>        for (int r = 0; r &lt; rows; ++r)<br>            for (int c = 0; c &lt; cols; ++c)<br>                if (bobDist[r][c] &lt;= aliceDist[r][c] - 2) {<br>                    nice[r][c] = true;<br>                    if (rootRow &lt; 0 || (aliceDist[r][c] &lt; aliceDist[rootRow][rootCol])) {<br>                        rootRow = r;<br>                        rootCol = c;<br>                    }<br>                }<br>        if (rootRow &lt; 0)<br>            return "Alice wins";<br>        for (int attempt = 0; attempt &lt; 2; ++attempt) {<br>            int[][] prev = new int[rows][cols];<br>            int[][] rootDist = getDist2(rows, cols, nice, prev, rootRow, rootCol);<br>            int mxr = rootRow;<br>            int mxc = rootCol;<br>            for (int r = 0; r &lt; rows; ++r)<br>                for (int c = 0; c &lt; cols; ++c)<br>                    if (nice[r][c] &amp;&amp; rootDist[r][c] &gt; rootDist[mxr][mxc]) {<br>                        mxr = r;<br>                        mxc = c;<br>                    }<br>            boolean[][] mainPath = new boolean[rows][cols];<br>            mainPath[rootRow][rootCol] = true;<br>            while (mxr != rootRow || mxc != rootCol) {<br>                mainPath[mxr][mxc] = true;<br>                int pr = prev[mxr][mxc];<br>                mxr = pr / cols;<br>                mxc = pr % cols;<br>            }<br>            int[][] mainDist = getDist3(rows, cols, nice, mainPath);<br>            int delta = Math.abs(aliceDist[rootRow][rootCol] - bobDist[rootRow][rootCol]) % 2;<br>            int maxAllowed = 2;<br>            boolean foiled = false;<br>            for (int r = 0; r &lt; rows; ++r)<br>                for (int c = 0; c &lt; cols; ++c)<br>                    if (nice[r][c] &amp;&amp; mainDist[r][c] &gt; maxAllowed) {<br>                        foiled = true;<br>                    }<br>            if (!foiled)<br>                return "Alice wins";<br>            for (int r = 0; r &lt; rows; ++r)<br>                for (int c = 0; c &lt; cols; ++c)<br>                    if (aliceDist[r][c] &gt; aliceDist[rootRow][rootCol]) {<br>                        rootRow = r;<br>                        rootCol = c;<br>                    }<br>            for (int r = 0; r &lt; rows; ++r)<br>                for (int c = 0; c &lt; cols; ++c)<br>                    if (aliceDist[r][c] &gt;= 0)<br>                        nice[r][c] = true;<br>        }<br> <br>        return "Bob wins";<br>    }<br> <br>    private int[][] getDist3(int rows, int cols, boolean[][] nice, boolean[][] mainPath) {<br>        int[][] res = new int[rows][cols];<br>        for (int[] x : res) Arrays.fill(x, -1);<br>        int[] qr = new int[rows * cols + 10];<br>        int[] qc = new int[rows * cols + 10];<br>        int qh = 0;<br>        int qt = 0;<br>        for (int row = 0; row &lt; rows; ++row)<br>            for (int col = 0; col &lt; cols; ++col)<br>                if (nice[row][col] &amp;&amp; mainPath[row][col]) {<br>                    qr[qh] = row;<br>                    qc[qh] = col;<br>                    ++qh;<br>                    res[row][col] = 0;<br>                }<br>        while (qt &lt; qh) {<br>            int row = qr[qt];<br>            int col = qc[qt];<br>            ++qt;<br>            for (int dr = -1; dr &lt;= 1; ++dr)<br>                for (int dc = -1; dc &lt;= 1; ++dc)<br>                    if (Math.abs(dr) + Math.abs(dc) == 1) {<br>                        int nr = row + dr;<br>                        int nc = col + dc;<br>                        if (nr &gt;= 0 &amp;&amp; nr &lt; rows &amp;&amp; nc &gt;= 0 &amp;&amp; nc &lt; cols &amp;&amp; nice[nr][nc] &amp;&amp; res[nr][nc] &lt; 0) {<br>                            res[nr][nc] = res[row][col]  + 1;<br>                            qr[qh] = nr;<br>                            qc[qh] = nc;<br>                            ++qh;<br>                        }<br>                    }<br>        }<br>        return res;<br>    }<br> <br>    private int[][] getDist2(int rows, int cols, boolean[][] nice, int[][] prev, int rootRow, int rootCol) {<br>        int[][] res = new int[rows][cols];<br>        for (int[] x : res) Arrays.fill(x, -1);<br>        int[] qr = new int[rows * cols + 10];<br>        int[] qc = new int[rows * cols + 10];<br>        int qh = 0;<br>        int qt = 0;<br>        for (int row = 0; row &lt; rows; ++row)<br>            for (int col = 0; col &lt; cols; ++col)<br>                if (row == rootRow &amp;&amp; col == rootCol) {<br>                    qr[qh] = row;<br>                    qc[qh] = col;<br>                    ++qh;<br>                    res[row][col] = 0;<br>                }<br>        while (qt &lt; qh) {<br>            int row = qr[qt];<br>            int col = qc[qt];<br>            ++qt;<br>            for (int dr = -1; dr &lt;= 1; ++dr)<br>                for (int dc = -1; dc &lt;= 1; ++dc)<br>                    if (Math.abs(dr) + Math.abs(dc) == 1) {<br>                        int nr = row + dr;<br>                        int nc = col + dc;<br>                        if (nr &gt;= 0 &amp;&amp; nr &lt; rows &amp;&amp; nc &gt;= 0 &amp;&amp; nc &lt; cols &amp;&amp; nice[nr][nc] &amp;&amp; res[nr][nc] &lt; 0) {<br>                            res[nr][nc] = res[row][col]  + 1;<br>                            prev[nr][nc] = row * cols + col;<br>                            qr[qh] = nr;<br>                            qc[qh] = nc;<br>                            ++qh;<br>                        }<br>                    }<br>        }<br>        return res;<br>    }<br> <br>    private int[][] getDist(int rows, int cols, String[] field, char who) {<br>        int[][] res = new int[rows][cols];<br>        for (int[] x : res) Arrays.fill(x, -1);<br>        int[] qr = new int[rows * cols + 10];<br>        int[] qc = new int[rows * cols + 10];<br>        int qh = 0;<br>        int qt = 0;<br>        for (int row = 0; row &lt; rows; ++row)<br>            for (int col = 0; col &lt; cols; ++col)<br>                if (field[row].charAt(col) == who) {<br>                    qr[qh] = row;<br>                    qc[qh] = col;<br>                    ++qh;<br>                    res[row][col] = 0;<br>                }<br>        while (qt &lt; qh) {<br>            int row = qr[qt];<br>            int col = qc[qt];<br>            ++qt;<br>            for (int dr = -1; dr &lt;= 1; ++dr)<br>                for (int dc = -1; dc &lt;= 1; ++dc)<br>                    if (Math.abs(dr) + Math.abs(dc) == 1) {<br>                        int nr = row + dr;<br>                        int nc = col + dc;<br>                        if (nr &gt;= 0 &amp;&amp; nr &lt; rows &amp;&amp; nc &gt;= 0 &amp;&amp; nc &lt; cols &amp;&amp; field[nr].charAt(nc) != '#' &amp;&amp; res[nr][nc] &lt; 0) {<br>                            res[nr][nc] = res[row][col]  + 1;<br>                            qr[qh] = nr;<br>                            qc[qh] = nc;<br>                            ++qh;<br>                        }<br>                    }<br>        }<br>        return res;<br>    }<br>}<br></td>