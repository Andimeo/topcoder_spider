<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections;<br>using System.Collections.Generic;<br>using System.Collections.Specialized;<br>using System.Text.RegularExpressions;<br> <br> <br>public class KeyDungeonDiv1<br>{<br>  private int[] _doorR;<br>        private int[] _doorG;<br>        private int[] _roomR;<br>        private int[] _roomG;<br>        private int[] _roomW;<br>        private int[] _keys;<br>        Dictionary&lt;long, int&gt; visited = new Dictionary&lt;long, int&gt;();<br>        public int maxKeys(int[] doorR, int[] doorG, int[] roomR, int[] roomG, int[] roomW, int[] keys)<br>        {<br>            _doorR = doorR;<br>            _doorG = doorG;<br>            _roomR = roomR;<br>            _roomG = roomG;<br>            _roomW = roomW;<br>            _keys = keys;<br> <br>            return FindBest(0, keys[0], keys[1], keys[2]);<br> <br> <br>        }<br> <br>        private int FindBest(int flags, int red, int green, int white)<br>        {<br>            long signature = Sign(flags, red, white);<br>            if (!visited.ContainsKey(signature))<br>            {<br>                int best = red+ green + white;<br>                for (int i = 0; i &lt; _doorR.Length; i++)<br>                {<br>                    if ((flags &amp; 1 &lt;&lt; i) == 0)<br>                    {<br>                        int missingRed = Math.Max(0, _doorR[i] - red );<br>                        int missingGreen = Math.Max(0, _doorG[i] - green);<br>                        int diff = white - (missingRed + missingGreen);<br>                        if (diff &lt; 0) continue;<br>                        int remainingRed = Math.Max(0, red - _doorR[i]);<br>                        int remainingGreen = Math.Max(0, green - _doorG[i]);<br> <br>                                                best = Math.Max(best, FindBest(flags | (1 &lt;&lt; i), remainingRed + _roomR[i], remainingGreen + _roomG[i], diff + _roomW[i]));<br> <br>                    }<br>                }<br>    <br>                visited[signature] = best;<br>            }<br>            return visited[signature];<br>            <br>        }<br> <br>        private long Sign(int flags, int red, int white)<br>        {<br>            return white + ((long)(red * 200)) + ((long)flags * 200 * 200);<br>        }<br> <br> <br>}<br>//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!<br></td>