<td class="problemText" colspan="8" valign="middle" align="left">
            //  SRM 588 (B)<br><br>#include &lt;cstdio&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cstring&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cassert&gt;<br>#include &lt;iostream&gt;<br>#include &lt;sstream&gt;<br>#include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;queue&gt;<br>#include &lt;set&gt;<br>#include &lt;map&gt;<br>#include &lt;utility&gt;<br>#include &lt;numeric&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;bitset&gt;<br>#include &lt;complex&gt;<br><br>using namespace std;<br><br>typedef unsigned uint;<br>typedef long long Int;<br>typedef vector&lt;int&gt; vint;<br>typedef pair&lt;int,int&gt; pint;<br>#define mp make_pair<br><br>template&lt;class T&gt; void pv(T a, T b) { for (T i = a; i != b; ++i) cout &lt;&lt; *i &lt;&lt; " "; cout &lt;&lt; endl; }<br>template&lt;class T&gt; void chmin(T &amp;t, T f) { if (t &gt; f) t = f; }<br>template&lt;class T&gt; void chmax(T &amp;t, T f) { if (t &lt; f) t = f; }<br><br>const int R = 265;<br><br>int N;<br>int dp[5010][310];<br><br>struct KeyDungeonDiv1 {<br>  <br>  int maxKeys(vector &lt;int&gt; doorR, vector &lt;int&gt; doorG, vector &lt;int&gt; roomR, vector &lt;int&gt; roomG, vector &lt;int&gt; roomW, vector &lt;int&gt; keys) {<br>    int h, i;<br>    int r;<br>    int w;<br>    <br>    N = doorR.size();<br>    <br>    memset(dp, ~0, sizeof(dp));<br>    for (w = 0; w &lt;= keys[2]; ++w) {<br>      chmax(dp[0][keys[0] + w], keys[1] + (keys[2] - w));<br>    }<br>    for (h = 0; h &lt; 1 &lt;&lt; N; ++h) for (r = 0; r &lt;= R; ++r) if (dp[h][r] &gt;= 0) {<br>      for (i = 0; i &lt; N; ++i) if (!(h &amp; 1 &lt;&lt; i)) {<br>        if (r &gt;= doorR[i] &amp;&amp; dp[h][r] &gt;= doorG[i]) {<br>          for (w = 0; w &lt;= roomW[i]; ++w) {<br>            chmax(dp[h | 1 &lt;&lt; i][r - doorR[i] + roomR[i] + w], dp[h][r] - doorG[i] + roomG[i] + (roomW[i] - w));<br>          }<br>        }<br>      }<br>    }<br>    <br>    int ans = 0;<br>    for (h = 0; h &lt; 1 &lt;&lt; N; ++h) for (r = 0; r &lt;= R; ++r) if (dp[h][r] &gt;= 0) {<br>      chmax(ans, r + dp[h][r]);<br>    }<br>    return ans;<br>    <br>  }<br>  <br>};<br></td>