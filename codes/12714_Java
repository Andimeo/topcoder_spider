<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.Arrays;<br> <br>/**<br> * Built using CHelper plug-in<br> * Actual solution is at the top<br> */<br>public class KeyDungeonDiv1 {<br>    public int maxKeys(int[] doorR, int[] doorG, int[] roomR, int[] roomG, int[] roomW, int[] keys) {<br>        int n = doorR.length;<br>        int totalReds = keys[0];<br>        for (int x : roomR) totalReds += x;<br>        int[][] maxWhite = new int[1 &lt;&lt; n][totalReds + 1];<br>        for (int[] x : maxWhite)<br>            Arrays.fill(x, -1);<br>        maxWhite[0][keys[0]] = keys[2];<br>        int res = keys[0] + keys[1] + keys[2];<br>        for (int set = 0; set &lt; (1 &lt;&lt; n); ++set) {<br>            int total = keys[0] + keys[1] + keys[2];<br>            for (int i = 0; i &lt; n; ++i)<br>                if ((set &amp; (1 &lt;&lt; i)) != 0) {<br>                    total += roomR[i] + roomG[i] + roomW[i] - doorR[i] - doorG[i];<br>                }<br>            for (int reds = 0; reds &lt;= totalReds; ++reds) {<br>                int white = maxWhite[set][reds];<br>                if (white &gt;= 0) {<br>                    int green = total - reds - white;<br>                    for (int i = 0; i &lt; n; ++i)<br>                        if ((set &amp; (1 &lt;&lt; i)) == 0) {<br>                            int newReds = reds;<br>                            int newGreen = green;<br>                            int newWhite = white;<br>                            newReds -= doorR[i];<br>                            if (newReds &lt; 0) {<br>                                newWhite += newReds;<br>                                newReds = 0;<br>                            }<br>                            newGreen -= doorG[i];<br>                            if (newGreen &lt; 0) {<br>                                newWhite += newGreen;<br>                                newGreen = 0;<br>                            }<br>                            if (newWhite &gt;= 0) {<br>                                newReds += roomR[i];<br>                                newGreen += roomG[i];<br>                                newWhite += roomW[i];<br>                                maxWhite[(set | (1 &lt;&lt; i))][newReds] = Math.max(maxWhite[(set | (1 &lt;&lt; i))][newReds], newWhite);<br>                                res = Math.max(res, newReds + newGreen + newWhite);<br>                            }<br>                        }<br>                }<br>            }<br>        }<br>        return res;<br>    }<br>}<br></td>