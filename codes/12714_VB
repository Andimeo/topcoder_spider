<td class="problemText" colspan="8" valign="middle" align="left">
            Imports Microsoft.VisualBasic<br>Imports System<br>Imports System.Collections<br>Imports System.Text<br> <br>Public Class KeyDungeonDiv1<br>    Public Function maxKeys(<br>                           ByVal doorR As Integer(),<br>                           ByVal doorG As Integer(),<br>                           ByVal roomR As Integer(),<br>                           ByVal roomG As Integer(),<br>                           ByVal roomW As Integer(),<br>                           ByVal keys As Integer()<br>                           ) As Integer<br>        Dim n = doorR.Length<br>        Dim P = 1 &lt;&lt; n<br>        Dim minR(P - 1), minG(P - 1), total(P - 1) As Integer<br>        For j = 0 To P - 1<br>            minR(j) = Integer.MaxValue<br>            minG(j) = Integer.MaxValue<br>        Next<br> <br>        minR(0) = keys(0)<br>        minG(0) = keys(1)<br>        total(0) = minR(0) + minG(0) + keys(2)<br>        For t = 0 To n - 1<br>            For j = 0 To P - 1<br>                For i = 0 To n - 1 ' go to room i<br>                    If (j &gt;&gt; i) And 1 Then Continue For ' already visited<br>                    Dim jj = j Or (1 &lt;&lt; i) ' new state<br>                    If Not (doorR(i) + doorG(i) &lt;= total(j) AndAlso (doorR(i) &lt;= total(j) - minG(j) AndAlso doorG(i) &lt;= total(j) - minR(j))) Then Continue For<br>                    Console.WriteLine("{0} -&gt; {1}: {2} red; {3} green; {4} white", j, jj, Math.Min(minR(jj), Math.Max(0, minR(j) - doorR(i)) + roomR(i)), Math.Min(minG(jj), Math.Max(0, minG(j) - doorG(i)) + roomG(i)), total(j) - doorR(i) - doorG(i) + roomR(i) + roomG(i) + roomW(i) - (Math.Min(minR(jj), Math.Max(0, minR(j) - doorR(i)) + roomR(i)) + Math.Min(minG(jj), Math.Max(0, minG(j) - doorG(i)) + roomG(i))))<br>                    total(jj) = total(j) - doorR(i) - doorG(i) + roomR(i) + roomG(i) + roomW(i)<br>                    minR(jj) = Math.Min(minR(jj), Math.Max(0, minR(j) - doorR(i)) + roomR(i))<br>                    minG(jj) = Math.Min(minG(jj), Math.Max(0, minG(j) - doorG(i)) + roomG(i))<br>                Next<br>            Next<br>        Next<br>        maxKeys = 0<br>        For Each t In total<br>            maxKeys = Math.Max(maxKeys, t)<br>        Next<br>    End Function<br> <br>End Class<br></td>