<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.Arrays;<br> <br>/**<br> * Built using CHelper plug-in<br> * Actual solution is at the top<br> * @author Niyaz Nigmatullin<br> */<br>public class FlippingBitsDiv1 {<br>    public int getmin(String[] S, int M) {<br>        StringBuilder sb = new StringBuilder();<br>        for (String e : S) {<br>            sb.append(e);<br>        }<br>        int blocks = (sb.length() + M - 1) / M;<br>        char[] c = sb.toString().toCharArray();<br>        if (blocks &lt; M) {<br>            int best = Integer.MAX_VALUE;<br>            for (int mask = 0; mask &lt; 1 &lt;&lt; blocks - 1; mask++) {<br>                int curCost = 0;<br>                for (int i = 0; i &lt; M; i++) {<br>                    int cm = mask;<br>                    int cost1 = 0;<br>                    int cost2 = 0;<br>                    for (int j = i; j &lt; c.length; j += M, cm &gt;&gt;= 1) {<br>                        if ((cm &amp; 1) == 1) {<br>                            if (c[j] == '1') {<br>                                ++cost1;<br>                            } else {<br>                                ++cost2;<br>                            }<br>                        } else {<br>                            if (c[j] == '1') {<br>                                ++cost2;<br>                            } else {<br>                                ++cost1;<br>                            }<br>                        }<br>                    }<br>                    curCost += Math.min(cost1, cost2);<br>                }<br>                for (int i = 1; i &lt; blocks; i++) {<br>                    if (((mask &gt;&gt; i) &amp; 1) != ((mask &gt;&gt; (i - 1)) &amp; 1)) {<br>                        ++curCost;<br>                    }<br>                }<br>                if (curCost &lt; best) best = curCost;<br>            }<br>            return best;<br>        } else {<br>            int ans = Integer.MAX_VALUE;<br>            int[][] dp = new int[blocks][2];<br>            for (int mask = 0; mask &lt; 1 &lt;&lt; M; mask++) {<br>                for (int[] d : dp) {<br>                    Arrays.fill(d, Integer.MAX_VALUE);<br>                }<br>                dp[0][0] = getCost(mask, c, 0, M);<br>                for (int i = 1; i &lt; blocks; i++) {<br>                    for (int j = 0; j &lt; 2; j++) {<br>                        int val = dp[i - 1][j];<br>                        if (val == Integer.MAX_VALUE) continue;<br>                        for (int k = 0; k &lt; 2; k++) {<br>                            int curMask = k == 0 ? mask : (mask ^ ((1 &lt;&lt; M) - 1));<br>                            int curCost = getCost(curMask, c, i * M, Math.min(c.length, (i + 1) * M));<br>                            dp[i][k] = Math.min(dp[i][k], val + (j != k ? 1 : 0) +<br>                                    curCost);<br>                        }<br>                    }<br>                }<br>//                System.out.println(Arrays.deepToString(dp));<br>//                System.out.println(dp[blocks - 1][0] + " " + dp[blocks - 1][1]);<br>                ans = Math.min(ans, Math.min(dp[blocks - 1][0], dp[blocks - 1][1]));<br>            }<br>            return ans;<br>        }<br>    }<br> <br>    static int getCost(int mask, char[] c, int l, int r) {<br>        int ret = 0;<br>        for (int i = 0; i &lt; r - l; i++) {<br>            int ch = c[i + l] - '0';<br>            int cc = ((mask &gt;&gt; i) &amp; 1);<br>            if (ch != cc) {<br>                ++ret;<br>            }<br>        }<br>//        System.out.println(new String(c, l, r - l) + " " + mask + " " + ret);<br>        return ret;<br>    }<br>}<br></td>