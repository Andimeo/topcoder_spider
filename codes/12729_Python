<td class="problemText" colspan="8" valign="middle" align="left">
            from collections import namedtuple<br> <br>Node = namedtuple("Node", "to cap rev")<br> <br>def new_graph(V):<br>    return [[] for i in xrange(V)]<br> <br>def add_edge(G, s, t, cap = 1, rev_cap = 0):<br>    G[s] += [Node(t, cap, len(G[t]))]<br>    G[t] += [Node(s, rev_cap, len(G[s]) - 1)]<br> <br>def max_flow(G, S, T):<br>    visd = set()<br> <br>    def dfs(x, max_cap):<br>        if x in visd: return 0<br>        visd.add(x)<br> <br>        if x == T: return max_cap<br> <br>        for i, (t, cap, rev) in enumerate(G[x]):<br>            if not cap: continue<br> <br>            ret = dfs(t, min(max_cap, cap))<br>            if ret:<br>                G[x][i] = Node( G[x][i].to, G[x][i].cap - ret, G[x][i].rev)<br>                G[t][rev] = Node( G[t][rev].to, G[t][rev].cap + ret, G[t][rev].rev)<br>                return ret<br> <br>        return 0<br> <br>    ans = 0<br>    while True:<br>        visd = set()<br>        ret = dfs(S, 1000000)<br>        if not ret: return ans<br>        ans += ret<br> <br>class GearsDiv1:<br>    def getmin(_, color, graph):<br>        N = len(color)<br> <br>        def process(ca, cb):<br>            A = color.count(ca)<br>            B = color.count(cb)<br> <br>            G = new_graph(A+B+2)<br>            S = A+B<br>            T = A+B+1<br> <br>            CA = 0<br>            for i in xrange(N):<br>                if color[i] == ca:<br>                    CB = 0<br>                    for j in xrange(N):<br>                        if color[j] == cb:<br>                            if graph[i][j] == 'Y':<br>                                add_edge(G, CA, A+CB)<br>                            CB += 1<br>                    CA += 1<br> <br>            for i in xrange(A):<br>                add_edge(G, S, i)<br> <br>            for i in xrange(B):<br>                add_edge(G, A+i, T)<br> <br>            return max_flow(G, S, T)<br> <br>        return min(process('R', 'G'), process('G', 'B'), process('R', 'B'))<br></td>