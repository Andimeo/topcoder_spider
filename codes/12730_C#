<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections;<br>using System.Collections.Generic;<br>using System.Linq;<br>using System.Text;<br><br><br>public class DisjointSet<br>{<br>    private int[] group;<br>    public DisjointSet(int n)<br>    {<br>        group = Enumerable.Repeat(-1, n).ToArray();<br>    }<br>    public bool unionSet(int x, int y)<br>    {<br>        x = root(x); y = root(y);<br>        if (x != y)<br>        {<br>            if (group[y] &lt; group[x]) return unionSet(y, x);<br>            group[x] += group[y];<br>            group[y] = x;<br>        }<br>        return x != y;<br>    }<br>    public bool isSameSet(int x, int y) { return root(x) == root(y); }<br>    public int root(int x) { return group[x] &lt; 0 ? x : group[x] = root(group[x]); }<br>    public int size(int x) { return -group[root(x)]; }<br>};<br><br><br>public class GooseTattarrattatDiv1 {<br>  public int getmin(string S) {<br>        int ans = 0;<br>        DisjointSet ds = new DisjointSet(30);<br><br>        for (int s = 0, t = S.Length - 1; s &lt;= t; s++, t--)<br>        {<br>            if (S[s] == S[t]) continue;<br>            int i1 = S[s] - 'a';<br>            int i2 = S[t] - 'a';<br>            ds.unionSet(i1, i2);<br>        }<br><br>        for (int i = 0; i &lt; 30; i++)<br>        {<br>            if (ds.root(i) == i)<br>            {<br>                int sum = 0, maxval = 0;<br>                for (int j = 0; j &lt; 30; j++)<br>                {<br>                    if (ds.root(j) == i)<br>                    {<br>                        int cnt =  S.Count(c =&gt; c == (char)(j + 'a'));<br>                        sum += cnt;<br>                        maxval = Math.Max(maxval, cnt);<br>                    }<br>                }<br>                ans += sum - maxval;<br>            }<br>        }<br><br>        return ans;<br>  }<br><br><br>}<br><br><br><br>// Powered by FileEdit<br>// Powered by moj 4.17 [modified TZTester]<br>// Powered by CodeProcessor<br></td>