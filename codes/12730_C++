<td class="problemText" colspan="8" valign="middle" align="left">
            #include&lt;cstdio&gt;<br>#include&lt;cstring&gt;<br>#include&lt;algorithm&gt;<br>#include&lt;string&gt;<br>#include&lt;vector&gt;<br>#define N 100<br>using namespace std;<br> <br>int cnt[100];<br>int father[100];<br>vector&lt;int&gt;vec[N];<br> <br>void reset(int n)<br>{<br>  for (int i=0;i&lt;=n;i++)<br>    father[i]=i;<br>}<br> <br>int find(int u)<br>{<br>  if (u==father[u])<br>    return u;<br>  else<br>    return father[u]=find(father[u]);<br>}<br> <br>void merge(int a,int b)<br>{<br>  int fa=find(a);<br>  int fb=find(b);<br>  if (fa!=fb)<br>    father[fa]=fb;<br>}<br> <br>class GooseTattarrattatDiv1<br>{<br>  public:<br> <br>  int getmin(string str)<br>  {<br>    int n=str.size(),res=0,tmp,i,j;<br> <br>    memset(cnt,0,sizeof(cnt));<br>    reset(26);<br> <br>    for (i=0;i&lt;n;i++)<br>      cnt[str[i]-'a']++;<br>    for (i=0;i&lt;n/2;i++)<br>      merge(str[i]-'a',str[n-i-1]-'a');<br>    for (i=0;i&lt;26;i++)<br>      if (cnt[i])<br>        vec[find(i)].push_back(cnt[i]);<br> <br>    for (i=0;i&lt;26;i++)<br>    {<br>      if ((int)vec[i].size()==0)<br>        continue;<br> <br>      sort(vec[i].begin(),vec[i].end());<br>      tmp=0;<br>      for (j=0;j&lt;vec[i].size();j++)<br>        tmp+=vec[i][j];<br>      tmp-=vec[i][vec[i].size()-1];<br>      res+=tmp;<br>    }<br> <br>    return res;<br>  }<br>};<br></td>