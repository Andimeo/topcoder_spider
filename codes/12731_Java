<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>import java.util.regex.*;<br>import java.text.*;<br>import java.math.*;<br>import java.io.*; <br> <br> <br>public class FlippingBitsDiv2<br>{<br>  public int getmin(String[] S, int M)<br>  {<br>    String all=""; <br>    for (int i=0; i&lt;S.length; i++) {<br>      all = all + S[i];<br>    }<br>    <br>    int[] s = new int[all.length() + 1];<br>    for (int i=0; i&lt;all.length(); i++) {<br>      if (i&gt;0) s[i] = s[i-1]; <br>      if (all.charAt(i)=='1') s[i]++; <br>    }<br>    <br>    StringBuilder sb =  new StringBuilder(all);<br>    <br>    String all2 = sb.reverse().toString();<br>    <br>    int[] s2 = new int[all.length() + 1];<br>    for (int i=0; i&lt;all.length(); i++) {<br>      if (i&gt;0) s2[i] = s2[i-1]; <br>      if (all2.charAt(i)=='1') s2[i]++; <br>    }<br>    <br>    <br>    int[][] d1 = new int[all.length() / M][2]; <br>    int[][] d2 = new int[all.length() / M][2]; <br>    int blocks = all.length() / M; <br>    for(int i=0; i&lt;blocks; i++) {<br>      int ones = s[(i+1)*M - 1] - (i&gt;0 ? s[i*M - 1] : 0);<br>      int zeroes = M - ones; <br>      d1[i][0] = 1000000000;<br>      d1[i][0] = Math.min(d1[i][0], ones + (i&gt;0 ? d1[i-1][0] : 0));<br>      d1[i][0] = Math.min(d1[i][0], zeroes + (i&gt;0 ? d1[i-1][1] : 0) + 1); <br>      <br>      d1[i][1] = 1000000000;<br>      d1[i][1] = Math.min(d1[i][1], zeroes + (i&gt;0 ? d1[i-1][1] : 0));<br>      d1[i][1] = Math.min(d1[i][1], ones + (i&gt;0 ? d1[i-1][0] : 0) + 1);<br>      //System.out.println(d1[i][1] +"here"); <br>    }<br>    <br>    for(int i=0; i&lt;blocks; i++) {<br>      int ones = s2[(i+1)*M - 1] - (i&gt;0 ? s2[i*M - 1] : 0);<br>      int zeroes = M - ones; <br>      d2[i][0] = 1000000000;<br>      d2[i][0] = Math.min(d2[i][0], ones + (i&gt;0 ? d2[i-1][0] : 0));<br>      d2[i][0] = Math.min(d2[i][0], zeroes + (i&gt;0 ? d2[i-1][1] : 0) + 1); <br>      <br>      d2[i][1] = 1000000000;<br>      d2[i][1] = Math.min(d2[i][1], zeroes + (i&gt;0 ? d2[i-1][1] : 0));<br>      d2[i][1] = Math.min(d2[i][1], ones + (i&gt;0 ? d2[i-1][0] : 0) + 1);<br>    }<br>    <br>    int ans = all.length() - s[all.length() - 1];<br>    //System.out.println(ans); <br>    for (int i=0; i&lt;blocks; i++) {<br>      ans = Math.min(ans, d1[i][1] + (blocks - i - 1 - 1&gt;=0 ? d2[blocks - i - 1 - 1][1]:0)); <br>    }<br>    return ans;<br>  }<br>  <br> <br>}<br>//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!<br></td>