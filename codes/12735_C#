<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections;<br>using System.Collections.Generic;<br>using System.Text;<br><br>public class LittleElephantAndPermutationDiv1 {<br><br>    long mod = 1000000007;<br>    public int getNumber(int N, int K)<br>    {<br>        long ret = 0;<br>        int MAX = N * N;<br>        long[,] dp = new long[MAX + 1, N + 1]; //sum, down<br>        dp[0, 0 ] = 1;<br>        for (int p = 1; p &lt;= N; p++)<br>        {<br>            long[,] nextdp = new long[MAX + 1, N + 1];<br>            for (int i = 0; i &lt;= MAX; i++)<br>            {<br>                for (int j = 0; j &lt;= N; j++)<br>                {<br>                    if (dp[i, j] == 0) continue;<br>                    if (j != 0)<br>                    {<br>                        nextdp[p * 2 + i, j - 1] += dp[i, j] * (j * j);<br>                        nextdp[p * 2 + i, j - 1] %= mod;<br>                    }<br>                    nextdp[p + i, j] += dp[i, j] * (1 + 2 * j);<br>                    nextdp[p + i, j] %= mod;<br>                    nextdp[i, j + 1] += dp[i, j];<br>                    nextdp[i, j + 1] %= mod;<br>                }<br>            }<br>            dp = nextdp;<br>        }<br><br><br>        for (int i = K; i &lt;= MAX; i++)<br>        {<br>            ret += dp[i, 0];<br>            ret %= mod;<br>        }<br><br>        for (int i = 0; i &lt; N; i++)<br>        {<br>            ret *= (i + 1);<br>            ret %= mod;<br>        }<br>        return (int)(ret % mod);<br>    }<br><br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003] Modified for C# by ysn<br>// Powered by CodeProcessor<br></td>