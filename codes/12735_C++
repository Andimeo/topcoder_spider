<td class="problemText" colspan="8" valign="middle" align="left">
            #include&lt;cstdio&gt;<br>#include&lt;cstdlib&gt;<br>#include&lt;cstring&gt;<br>#include&lt;algorithm&gt;<br>#include&lt;iostream&gt;<br>#include&lt;fstream&gt;<br>#include&lt;map&gt;<br>#include&lt;ctime&gt;<br>#include&lt;set&gt;<br>#include&lt;queue&gt;<br>#include&lt;cmath&gt;<br>#include&lt;vector&gt;<br>#include&lt;bitset&gt;<br>#include&lt;functional&gt;<br>#define x first<br>#define y second<br>#define mp make_pair<br>#define pb push_back<br>#define REP(i,l,r) for((i)=(l);(i)&lt;=(r);++(i))<br>#define REP2(i,l,r) for((i)=(l);(i)!=(r);++(i))<br>using namespace std;<br><br>typedef long long LL;<br>typedef double ld;<br><br>const int NUM=50+10;<br>const int MAX=3000+10;<br>const int Mod=(int)1e9+7;<br><br>int f[NUM][NUM][MAX];<br>//[\u21069]i[\u20010][\u25968][\u65292][\u25630][\u22909][\u20102][\u30340][\u23545][\u25968][\u20026]j[\u65292][\u21644][\u20026]k[\u12290]<br><br>void update(int&amp; a,int b)<br>{<br>  a+=b;<br>  if(a&gt;=Mod)<br>    a-=Mod;<br>}<br><br>struct LittleElephantAndPermutationDiv1<br>{<br>  int getNumber(int N, int K)<br>  {<br>    int i,j,k,l;<br>    f[0][0][0]=1;<br>    REP(i,1,N)<br>      REP(j,0,i)<br>        REP(k,0,N*N)<br>          if(f[i-1][j][k])<br>          {<br>            int np=f[i-1][j][k];<br>            //first [\u33258][\u24049][\u21644][\u33258][\u24049][\u25630]<br>            update(f[i][j+1][k+i],np);<br>            REP2(l,0,4)<br>            {<br>              LL w=np,to=0,e=0;<br>              if(l&amp;1)<br>              {<br>                ++e;<br>                w=w*(i-1-j)%Mod;<br>                to+=i;<br>              }<br>              if(l&amp;2)<br>              {<br>                ++e;<br>                w=w*(i-1-j)%Mod;<br>                to+=i;<br>              }<br>              update(f[i][j+e][k+to],w);<br>            }<br>          }<br>    int ans=0;<br>    REP(i,K,N*N)<br>      update(ans,f[N][N][i]);<br>    REP(i,1,N)<br>      ans=(LL)ans*i % Mod;<br>    return ans;<br>  }<br>};<br></td>