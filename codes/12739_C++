<td class="problemText" colspan="8" valign="middle" align="left">
            /*<br> * in the name of god<br> *<br> *<br> *<br> *<br> *<br> *<br> *<br> *<br> */<br><br>#include &lt;iostream&gt;<br>#include &lt;fstream&gt;<br>#include &lt;sstream&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cstring&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cmath&gt;<br>#include &lt;ctime&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;vector&gt;<br>#include &lt;queue&gt;<br>#include &lt;deque&gt;<br>#include &lt;stack&gt;<br>#include &lt;set&gt;<br>#include &lt;map&gt;<br>#include &lt;complex&gt;<br>#include &lt;bitset&gt;<br>#include &lt;iomanip&gt;<br>#include &lt;utility&gt;<br><br>using namespace std;<br><br>typedef long long LL;<br>typedef pair&lt;int,int&gt; pii;<br>typedef complex&lt;double&gt; point;<br>typedef pair&lt;LL, LL&gt; pLL;<br><br>int func[1&lt;&lt;20];<br>LL first[1&lt;&lt;20];<br>vector &lt;int&gt; Q[1&lt;&lt;20];<br><br>struct SparseFactorial{<br>  <br>  long long getCount(long long lo, long long hi, long long divisor){<br>    vector &lt;pLL&gt; factor;<br>    LL temptemp = divisor;<br>    for (LL i=2; i*i&lt;=divisor; i++){<br>      LL cnt = 0;<br>      while (divisor % i == 0){<br>        cnt++;<br>        divisor/=i;<br>      }<br>      if (cnt)<br>        factor.push_back(pLL(i,cnt));<br>    }<br>    if (divisor &gt; 1)<br>      factor.push_back(pLL(divisor, 1LL));<br>    <br>    divisor = temptemp;<br>    for (int i=0; i&lt;divisor; i++)<br>      first[i] = i;<br>    <br>    for (int i=0; i&lt;=1000000; i++)<br>      func[i] = ((LL)i * i) % divisor;<br>      <br>    for (int i=0; i&lt;(int)factor.size(); i++){<br>      if (i&gt;0)<br>        for (int j=0; j&lt;factor[i-1].first; j++)<br>          Q[j].clear();<br>      for (int j=0; (LL)j*j&lt;=hi; j++){<br>        LL pos = ((LL)j * j) % factor[i].first;<br>        if ((int)Q[pos].size() &lt; factor[i].second)<br>          Q[pos].push_back(j);<br>      }<br>      for (int j=1; j&lt;divisor; j++){<br>        int mod = j % factor[i].first;<br>        int need = factor[i].second;<br>        int poi = 0;<br>        while ((poi &lt; (int)Q[mod].size()) &amp;&amp; need){<br>          int cur = (func[Q[mod][poi]] - j + divisor) % divisor;<br>          while ((need) &amp;&amp; (cur % factor[i].first == 0))<br>            cur/=factor[i].first, need--;<br>          poi++;<br>        }<br>        if (need == 0){<br>          LL temp = (LL)Q[mod][poi-1] * Q[mod][poi-1] + 1;<br>          if (temp % divisor != j){<br>            if ((temp % divisor) &lt; j)<br>              temp+= (j - temp%divisor);<br>            else{<br>              temp+= (j - temp%divisor) + divisor;<br>            }<br>          }<br>          first[j] = max(first[j], temp);<br>        }else<br>          first[j] = hi+1;<br>      }<br>    }<br>    LL ret = 0;<br>    for (int i=0; i&lt;divisor; i++){<br>      LL mylo = max(lo, first[i]);<br>      LL f0 = mylo / divisor + ((mylo%divisor) &gt; i);<br>      LL f1 = hi / divisor + ((hi%divisor)&gt;= i);<br>      ret+= max(0LL, f1-f0);<br>    }<br>    return ret;<br>  }  <br>};<br></td>