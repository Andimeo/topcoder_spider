<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;vector&gt;<br>#include &lt;list&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;deque&gt;<br>#include &lt;stack&gt;<br>#include &lt;bitset&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;functional&gt;<br>#include &lt;numeric&gt;<br>#include &lt;utility&gt;<br>#include &lt;sstream&gt;<br>#include &lt;iostream&gt;<br>#include &lt;iomanip&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;ctime&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;string&gt;<br>#include &lt;cstring&gt;<br> <br>using namespace std;<br> <br>class FoxAndGo {<br>public:<br>  int maxKill(vector &lt;string&gt;);<br>};<br> <br>const int maxN = 30;<br> <br>int a[maxN][maxN];<br>int used[maxN][maxN];<br>int cnt;<br>int good;<br>int n, m;<br> <br>int dx[] = {0, 0, 1, -1};<br>int dy[] = {1, -1, 0, 0};<br> <br>bool is_in(int x, int y) {<br>  return x &gt;= 0 &amp;&amp; x &lt; n &amp;&amp; y &gt;= 0 &amp;&amp; y &lt; m;<br>}<br> <br>void dfs(int x, int y) {<br>  if (used[x][y]) return;<br>  used[x][y] = 1;<br>  ++cnt;<br>  for (int i = 0; i &lt; 4; ++i) {<br>    if (is_in(x + dx[i], y + dy[i]) &amp;&amp; a[x + dx[i]][y + dy[i]] == 2) {<br>      dfs(x + dx[i], y + dy[i]);<br>    }<br>    if (is_in(x + dx[i], y + dy[i]) &amp;&amp; a[x + dx[i]][y + dy[i]] == 0) {<br>      good = true;<br>    }<br>  }<br>}<br> <br>int solve(vector &lt;string&gt; s) {<br>  memset(a, 0, sizeof(a));<br>  n = s.size();<br>  m = s[0].length();<br>  for (int i = 0; i &lt; n; ++i) {<br>    for (int j = 0; j &lt; m; ++j) {<br>      if (s[i][j] == '.') a[i][j] = 0; else <br>      if (s[i][j] == 'x') a[i][j] = 1; else<br>      if (s[i][j] == 'o') a[i][j] = 2;<br>    }<br>  }<br> <br>  int cres = 0;<br>  memset(used, 0, sizeof(used));<br>  for (int i = 0; i &lt; n; ++i) {<br>    for (int j = 0; j &lt; m; ++j) {<br>      if (a[i][j] == 2 &amp;&amp; !used[i][j]) {<br>        cnt = 0;<br>        good = false;<br>        dfs(i, j);<br>        if (!good) {<br>          cres += cnt;<br>        }<br>      }<br>    }<br>  }<br>  return cres;<br>}<br> <br>int FoxAndGo::maxKill(vector &lt;string&gt; board) {<br>  int n = board.size();<br>  int m = board[0].length();<br>  int res = 0;<br>  for (int i = 0; i &lt; n; ++i) {<br>    for (int j = 0; j &lt; m; ++j) {<br>      if (board[i][j] == '.') {<br>        vector &lt;string&gt; buf = board;<br>        buf[i][j] = 'x';<br>        res = max(res, solve(buf));<br>      }<br>    }<br>  }<br>  return res;<br>}<br> <br> <br>//Powered by [KawigiEdit] 2.0!<br></td>