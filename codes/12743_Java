<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.Arrays;<br><br><br>public class FoxAndGo {<br>  int count;<br>  int n;<br>  int[][] xx;<br>  boolean[][] vis;<br>  int[] cc;<br>  public int maxKill(String[] board)<br>  {<br>    count = 1;<br>    n = board.length;<br>    xx = new int[n][n];<br>    vis = new boolean[n][n];<br>    for(int i=0; i&lt;n; i++)<br>    {<br>      for(int j=0; j&lt;n; j++)<br>      {<br>        if(board[i].charAt(j)=='o' &amp;&amp; !vis[i][j])<br>        {<br>          floodfill(i,j,board);<br>          count++;<br>        }<br>        else if(board[i].charAt(j)=='x') xx[i][j]=-1;<br>      }<br>    }<br>    //for(int i=0; i&lt;n; i++)<br>      //System.out.println(Arrays.toString(xx[i]));<br>    cc = new int[count];<br>    for(int i=0; i&lt;n; i++)<br>    {<br>      for(int j=0; j&lt;n; j++)<br>      {<br>        if(xx[i][j]&gt;=1)<br>        {<br>          cc[xx[i][j]]++;          <br>        }<br>      }<br>    }<br>    int max = 0;<br>    for(int i=0; i&lt;n; i++)<br>    {<br>      for(int j=0; j&lt;n; j++)<br>      {<br>        if(board[i].charAt(j)=='.')<br>        {<br>          max = Math.max(putX(i, j,board),max);<br>        }<br>      }<br>    }<br>    return max;<br>  }<br>  public int putX(int x, int y,String[] board)<br>  {<br>    int countKill = 0;<br>    board[x] =board[x].substring(0,y)+'x'+board[x].substring(y+1);<br>    for(int c=1; c&lt;count; c++)<br>    {<br>      boolean safe = false;<br>      out: for(int i=0; i&lt;n; i++)<br>      {<br>        for(int j=0; j&lt;n; j++)<br>        {<br>          if(xx[i][j]==c)<br>          {<br>            if(isSafe(i, j, board))<br>            {<br>              safe = true;<br>              break out;<br>            }<br>            <br>          }<br>        }<br>      }<br>      if(!safe) countKill +=cc[c];<br>    }<br>    board[x] =board[x].substring(0,y)+'.'+board[x].substring(y+1);<br>    return countKill;<br>  }<br>  public boolean isSafe(int x, int y, String[] board)<br>  {<br>    boolean f = false;<br>    if(isV(x+1,y) &amp;&amp; board[x+1].charAt(y)=='.')<br>      f = true;<br>    else if(isV(x-1,y) &amp;&amp; board[x-1].charAt(y)=='.')<br>      f = true;<br>    else if(isV(x,y+1) &amp;&amp; board[x].charAt(y+1)=='.')<br>      f = true;<br>    else if(isV(x,y-1) &amp;&amp; board[x].charAt(y-1)=='.')<br>      f = true;<br>    return f;<br>  }<br>  public void floodfill(int x, int y, String[] board)<br>  {<br>    xx[x][y] = count;<br>    vis[x][y] = true;<br>    if(isV(x+1,y)&amp;&amp; !vis[x+1][y] &amp;&amp; board[x+1].charAt(y)=='o')<br>      floodfill(x+1,y,board);<br>    if(isV(x-1,y)&amp;&amp; !vis[x-1][y] &amp;&amp; board[x-1].charAt(y)=='o')<br>      floodfill(x-1,y,board);<br>    if(isV(x,y+1)&amp;&amp; !vis[x][y+1] &amp;&amp; board[x].charAt(y+1)=='o')<br>      floodfill(x,y+1,board);<br>    if(isV(x,y-1)&amp;&amp; !vis[x][y-1] &amp;&amp; board[x].charAt(y-1)=='o')<br>      floodfill(x,y-1,board);<br>  }<br>  public boolean isV(int x, int y)<br>  {<br>    if(x&gt;=0 &amp;&amp; y&gt;=0 &amp;&amp; x&lt;n &amp;&amp; y&lt;n) return true;<br>    return false;<br>  }<br>}<br></td>