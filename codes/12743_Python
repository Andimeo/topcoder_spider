<td class="problemText" colspan="8" valign="middle" align="left">
            dir = (0,1,0,-1,0)<br>class FoxAndGo:<br>  def __init__(self):<br>    self.flag = set()<br>  def testsplit(self, tx, ty):<br>    if (tx,ty) in self.flag:<br>      return 0, []<br>    self.flag.add((tx,ty))<br>    breathpoints = set()<br>    size = 1<br>    <br>    for i in range(4):<br>      ix = tx + dir[i]<br>      iy = ty + dir[i+1]<br>      if ix &gt;= 0 and iy &gt;= 0 and ix &lt; self.n and iy &lt; self.n:<br>        if self.board[ix][iy] == '.':<br>          breathpoints.add((ix,iy))<br>        elif self.board[ix][iy] == 'o':<br>          leftsize, leftbp = self.testsplit(ix, iy)<br>          size += leftsize<br>          breathpoints.update(leftbp)<br>    return size, breathpoints<br>  def split(self):<br>    results = []<br>    for i in range(self.n):<br>      for j in range(self.n):<br>        if self.board[i][j] == 'o':<br>          r = self.testsplit(i,j)<br>          if r:<br>            results.append(r)<br>    return results<br>  def die_filter(self,item):<br>    if len(item[1]) == 0:<br>      return item[0]<br>    else:<br>      return 0<br>  def tokill_filter(self, item):<br>    if len(item[1]) == 1:<br>      return True<br>  def maxKill(self, board):<br>    <br>    self.board = board<br>    self.n = len(board)<br>    splits = self.split()<br>    print splits<br>    die = sum(map(self.die_filter, splits))<br>    merged_tokill = {}<br>    tokills = filter(self.tokill_filter, splits)<br>    for tokill in tokills:<br>      key = tokill[1].pop()<br>      if key not in merged_tokill:<br>        merged_tokill[key]  = 0<br>      merged_tokill[key] += tokill[0]<br>    print "direct_die: ",die<br>    if merged_tokill:<br>      die += max(merged_tokill.values())<br>    <br>    return die<br></td>