<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;vector&gt;<br>#include &lt;list&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;deque&gt;<br>#include &lt;stack&gt;<br>#include &lt;bitset&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;functional&gt;<br>#include &lt;numeric&gt;<br>#include &lt;utility&gt;<br>#include &lt;sstream&gt;<br>#include &lt;iostream&gt;<br>#include &lt;iomanip&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;ctime&gt;<br>#include &lt;string&gt;<br>#include &lt;cstring&gt;<br>#include &lt;cstdio&gt;<br> <br>using namespace std;<br> <br>class FoxAndShogi {<br>public:<br>  int differentOutcomes(vector &lt;string&gt;);<br>};<br> <br>const int mod = 1000000007;<br>const int maxN = 60;<br>int dp[maxN][maxN];<br> <br>int solve_sample(string s) {<br>  memset(dp, 0, sizeof(dp));<br>  vector &lt;pair&lt;int, int&gt; &gt; cur;<br>  int n = s.size();<br>  for (int i = 0; i &lt; s.size(); ++i) {<br>    if (s[i] == 'U') {<br>      cur.push_back(make_pair(i, -1));<br>    } else if (s[i] == 'D') {<br>      cur.push_back(make_pair(i, +1));<br>    }<br>  }<br>  if (cur.size() == 0) {<br>    return 1;<br>  }<br> <br>  int cpos = cur[0].first;<br>  int dir = cur[0].second;<br>  for (; cpos &gt;= 0 &amp;&amp; cpos &lt; n; cpos += dir) {<br>    dp[0][cpos] = 1;<br>  }<br> <br>  for (int i = 1; i &lt; cur.size(); ++i) {<br>    int cpos = cur[i].first;<br>    int dir = cur[i].second;<br>    for (; cpos &gt;= 0 &amp;&amp; cpos &lt; n; cpos += dir) {<br>      dp[i][cpos] = 0;<br>      for (int j = 0; j &lt; cpos; ++j) {<br>        dp[i][cpos] += dp[i - 1][j];<br>        if (dp[i][cpos] &gt;= mod) {<br>          dp[i][cpos] -= mod;<br>        }<br>      }<br>    }<br>  }<br> <br>  int res = 0;<br>  for (int i = 0; i &lt; n; ++i) {<br>    int total = (int)(cur.size()) - 1;<br>    res += dp[total][i];<br>    if (res &gt;= mod) {<br>      res -= mod;<br>    }<br>  }<br>  return res;<br>}<br> <br>int FoxAndShogi::differentOutcomes(vector &lt;string&gt; board) {<br>  int n = board.size();<br>  int m = board[0].length();<br>  long long ans = 1;<br>  for (int i = 0; i &lt; m; ++i) {<br>    string s = "";<br>    for (int j = 0; j &lt; n; ++j) {<br>      s += board[j][i];<br>    }<br>    long long cur = solve_sample(s);<br>    ans *= cur;<br>    ans %= 1000000007LL;<br>  }<br>  return (int)ans;<br>}<br> <br>//Powered by [KawigiEdit] 2.0!<br></td>