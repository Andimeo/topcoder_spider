<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections.Generic;<br>using System.Linq;<br>using System.Text;<br>using System.Numerics;<br><br>class ConvertibleStrings<br>{<br>    public static bool NextPermutation&lt;T&gt;(T[] elements) where T : IComparable&lt;T&gt;<br>    {<br>        int count = elements.Length;<br>        bool done = true;<br><br>        for (int i = count - 1; i &gt; 0; i--)<br>        {<br>            T curr = elements[i];<br>            if (curr.CompareTo(elements[i - 1]) &lt; 0) { continue; }<br>            done = false;<br>            T prev = elements[i - 1];<br>            int currIndex = i;<br><br>            for (int j = i + 1; j &lt; count; j++)<br>            {<br>                T tmp = elements[j];<br><br>                if (tmp.CompareTo(curr) &lt; 0 &amp;&amp; tmp.CompareTo(prev) &gt; 0)<br>                {<br>                    curr = tmp;<br>                    currIndex = j;<br>                }<br>            }<br><br>            elements[currIndex] = prev;<br>            elements[i - 1] = curr;<br><br>            for (int j = count - 1; j &gt; i; j--, i++)<br>            {<br>                T tmp = elements[j];<br>                elements[j] = elements[i];<br>                elements[i] = tmp;<br>            }<br><br>            break;<br>        }<br><br>        return done;<br>    }<br>    private static char[] convert(string S, char[] dic)<br>    {<br>        char[] cs = new char[S.Length];<br>        for (int i = 0; i &lt; cs.Length; i++)<br>        {<br>            cs[i] = dic[S[i] - 'A'];<br>        }<br>        return cs;<br>    }<br>    private static int count(char[] a, char[] b)<br>    {<br>        int cnt = 0;<br>        for (int i = 0; i &lt; a.Length; i++)<br>        {<br>            if (a[i] == b[i]) { cnt++; }<br>        }<br>        return cnt;<br>    }<br>    public int leastRemovals(string A, string B)<br>    {<br>        char[] dic = new char[] { '0', '1', '2', '3', '4', '5', '6', '7', '8' };<br>        char[] a = convert(A, dic);<br>        int max = 0;<br>        do<br>        {<br>            char[] b = convert(B, dic);<br>            max = Math.Max(count(a, b), max);<br>        }<br>        while (!NextPermutation(dic));<br>        return A.Length - max;<br>    }<br>}<br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003] Modified for C# by ysn<br>// Powered by CodeProcessor<br></td>