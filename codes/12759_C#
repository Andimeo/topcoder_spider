<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections;<br>using System.Collections.Generic;<br>using System.Text;<br>using System.Linq;<br> <br>public class LittleElephantAndPermutationDiv2<br>{<br>  public long getNumber(int N, int K)<br>  {<br>    int[] a = new int[N];<br>    int perm = 1;<br>    for (int i = 0; i &lt; N; i++) {<br>      a[i] = i + 1;<br>      perm *= i + 1;<br>    }<br>    int[] l = new int[N];<br>    a.CopyTo(l, 0);<br>    <br>    long cnt = 0;<br>    do {<br>      int sum = 0;<br>      for (int i = 0; i &lt; N; i++) {<br>        sum += Math.Max(a[i], l[i]);<br>      }<br>      if (sum &gt;= K) {<br>        cnt++;<br>      }<br>    } while (Utility.Algorithm.NextPermutation&lt;int&gt;(a, 0, N));<br>    <br>    return cnt * perm;<br>  }<br> <br> <br>}<br> <br>#if TAKKA_TOPCODER<br>#else<br>namespace Utility<br>{<br>    public static class Algorithm<br>    {<br>        public static bool NextPermutation&lt;T&gt;(T[] array, int start, int length)<br>            where T : IComparable<br>        {<br>            int end = start + length - 1;<br> <br>            // [\u65533][\u65533][\u65533][\u65533][\u65533][\u65533][\u65533][\u65533][\u65533][\u65533][\u65533][\u65533][\u65533][\u65533][\u65533][\u65533][\u65533][\u65533][\u65533][\u65533][\u65533]<br>            if (end &lt;= start) return false;<br> <br>            int last = end;<br>            while (true)<br>            {<br>                int pos = last--;<br>                <br>                if (array[last].CompareTo(array[pos]) &lt; 0)<br>                {<br>                    int i;<br>                    for (i = end + 1; array[last].CompareTo(array[--i]) &gt;= 0; ) { }<br>                    T tmp = array[last]; array[last] = array[i]; array[i] = tmp;<br>                    Array.Reverse(array, pos, end - pos + 1);<br>                    return true;<br>                }<br>                if (last == start)  // [\u65533][\u65533][\u65533][\u65533][\u65533][\u65533][\u65533][\u65533][\u65533][\u65533][\u65533][\u65533][\u65533][\u65533][\u65533]<br>                {<br>                    Array.Reverse(array, start, end - start);<br>                    return false;<br>                }<br>            }<br> <br>            // [\u65533][\u65533][\u65533][\u65533][\u65533][\u65533][\u65533][\u65533][\u65533][\u65533][\u65533][\u65533][\u65533][\u65533][\u65533][\u65533][\u65533][\u65533][\u65533][\u65533][\u65533][\u65533][\u65533][\u65533][\u65533][\u65533][\u65533][\u65533][\u65533][\u65533]<br>            throw new Exception("NextPermutation: Fatal error");<br>        }<br>  }<br>}<br>#endif<br> <br> <br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003] Modified for C# by ysn<br>// Powered by CodeProcessor<br></td>