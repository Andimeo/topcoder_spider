<td class="problemText" colspan="8" valign="middle" align="left">
            import static java.lang.System.*;<br><br>import java.lang.reflect.Array;<br><br>public class LittleElephantAndPermutationDiv2 {<br><br>  // as=[0,1,[\u31414][\u65382],n]<br>    static boolean next_permutation(int[]as) {<br>      int n = as.length;<br>      for (int i = n - 1; i &gt; 0; i--) {<br>        if (as[i - 1] &lt; as[i]) {<br>          int j = n;<br>          while (as[i - 1] &gt;= as[--j]);<br>          swap(as, i - 1, j);<br>          reverse(as, i, n);<br>          return true;<br>        }<br>      }<br>      return false;<br>    }<br>    static void swap(int[] is, int i, int j) {<br>      int t = is[i];<br>      is[i] = is[j];<br>      is[j] = t;<br>    }<br>    static void reverse(int[] is, int s, int t) {<br>      while (s &lt; --t) swap(is, s++, t);<br>    }<br>    public long fact(int i) {<br>      return i == 0 ? 1 : i * fact(i - 1);<br>    }<br><br>  public long getNumber(int N, int K) {<br>    long res=0;<br>    int[] per=new int[N];<br>    for(int i=0;i&lt;N;i++)<br>      per[i]=i;<br><br>    int[] as=new int[N];<br>    for(int i=0;i&lt;N;i++)<br>      as[i]=i+1;<br><br>    do{<br>      int k=0;<br>      for(int i=0;i&lt;N;i++){<br>        k+=Math.max(as[i],as[per[i]]);<br>      }<br>      if(k&gt;=K)res++;<br>    }while(next_permutation(per));<br>    return res*fact(N);<br>  }<br><br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by CodeProcessor<br></td>