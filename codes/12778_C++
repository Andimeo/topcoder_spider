<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;list&gt;<br>#include &lt;vector&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;queue&gt;<br>#include &lt;deque&gt;<br>#include &lt;stack&gt;<br>#include &lt;bitset&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;functional&gt;<br>#include &lt;numeric&gt;<br>#include &lt;utility&gt;<br>#include &lt;sstream&gt;<br>#include &lt;fstream&gt;<br>#include &lt;iostream&gt;<br>#include &lt;iomanip&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cassert&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;ctime&gt;<br>#include &lt;climits&gt;<br>#include &lt;cstring&gt;<br>#define rep(i,a,b) for(int i = a;i &lt; b;i++)<br><br>using namespace std;<br>class WolfDelaymaster<br>{<br>public:<br>    string check(string str)<br>    {<br>        int cnw = 0,cno = 0,cnl = 0,cnf = 0;<br>        rep(i,0,str.size())<br>        {<br>            if(str[i] == 'w') cnw++;<br>            if(str[i] == 'o') cno++;<br>            if(str[i] == 'l') cnl++;<br>            if(str[i] == 'f') cnf++;<br>        }<br>        if(!(cnw == cno &amp;&amp; cno == cnl &amp;&amp; cnl == cnf &amp;&amp; cnf == cnw)) return "INVALID";<br>        vector&lt;string&gt; possiwrd;<br>        string wolff = "wolf";<br>        rep(i,1,14)<br>        {<br>            string tstr = "";<br>            rep(k,0,4)<br>            {<br>                rep(j,0,i)<br>                {<br>                    tstr += wolff[k];<br>                }<br>            }<br>            possiwrd.push_back(tstr);<br>        }<br>        int curr = 0;<br>        while(true)<br>        {<br>            int flag = 1;<br>            if(curr == str.size()) return "VALID";<br>            rep(k,0,possiwrd.size())<br>            {<br>                if(str.substr(curr,possiwrd[k].size()) == possiwrd[k])<br>                {<br>                    curr += possiwrd[k].size();<br>                    flag = 0;<br>                    break;<br>                }<br>            }<br>            if(flag) return "INVALID";<br>        }<br>        return "INVALID";<br>    }<br>};<br></td>