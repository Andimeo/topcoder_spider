<td class="problemText" colspan="8" valign="middle" align="left">
            /**<br> * Built using CHelper plug-in<br> * Actual solution is at the top<br> */<br>public class WolfDelaymasterHard {<br>    static final int MODULO = (int) (1e9 + 7);<br> <br>    public int countWords(int N, int wlen, int w0, int wmul, int wadd, int olen, int o0, int omul, int oadd) {<br>        int[] word = new int[N];<br> <br>        long x = w0;<br>        for(int i=0;i&lt;wlen;i++){<br>            word[((int) x)] = 1;        // Rewrite the x-th (0-based) character of s<br>            x = (x * wmul + wadd) % N;<br>        }<br> <br>        x = o0;<br>        for(int i=0;i&lt;olen;i++){<br>            word[((int) x)] = 2;        // Rewrite the x-th (0-based) character of s<br>            x = (x * omul + oadd) % N;<br>        }<br>        int[] nexto = new int[N];<br>        int[] prevo = new int[N];<br>        int[] prevw = new int[N];<br>        int cur = -1;<br>        for (int i = 0; i &lt; N; ++i) {<br>            if (word[i] == 1) {<br>                cur = i;<br>            }<br>            prevw[i] = cur;<br>        }<br>        cur = -1;<br>        for (int i = 0; i &lt; N; ++i) {<br>            if (word[i] == 2) {<br>                cur = i;<br>            }<br>            prevo[i] = cur;<br>        }<br>        cur = N;<br>        for (int i = N - 1; i &gt;= 0; --i) {<br>            if (word[i] == 2) {<br>                cur = i;<br>            }<br>            nexto[i] = cur;<br>        }<br>        int[] answer = new int[N];<br>        int[] answerSum = new int[N + 1];<br>        answerSum[0] = 1;<br>        for (int pos = 1; pos &lt; N; pos += 2) {<br>            int ans = 0;<br> <br>            int pw = prevw[pos];<br>            int po = prevo[pos];<br>            if (po &lt; pw) {<br>                int mx = (pos - pw) / 2;<br>                if (pos - 1 &gt;= 0)<br>                    ans += answerSum[pos - 1];<br>                if (pos - 1 - 2 * mx &gt;= 0)<br>                    ans -= answerSum[pos - 1 - 2 * mx];<br>                if (ans &lt; 0) ans += MODULO;<br>                if (ans &gt;= MODULO) ans -= MODULO;<br>            } else {<br>                {<br>                    int mx = (pos - po) / 2;<br>                    if (pos - 1 &gt;= 0)<br>                        ans += answerSum[pos - 1];<br>                    if (pos - 1 - 2 * mx &gt;= 0)<br>                        ans -= answerSum[pos - 1 - 2 * mx];<br>                    if (ans &lt; 0) ans += MODULO;<br>                    if (ans &gt;= MODULO) ans -= MODULO;<br>                }<br>                while (po &gt; pw) {<br>                    int mn = (pos - po + 1);<br>                    int start = pos - 2 * mn + 1;<br>                    if (start &lt;= pw) break;<br>                    if (nexto[start] == po) {<br>                        int left = Math.max(pw, prevo[start]);<br>                        int mx = (pos - left) / 2;<br>                        if (pos + 1 - 2 * mn &gt;= 0)<br>                            ans += answerSum[pos + 1 - 2 * mn];<br>                        if (pos - 1 - 2 * mx &gt;= 0)<br>                            ans -= answerSum[pos - 1 - 2 * mx];<br>                        if (ans &lt; 0) ans += MODULO;<br>                        if (ans &gt;= MODULO) ans -= MODULO;<br>                        po = prevo[start];<br>                    } else {<br>                        po = nexto[start];<br>                    }<br>                }<br>            }<br> <br>            if (pw &gt;= 0) {<br>                int mx = Math.min(pos - pw, (pos - prevo[pw]) / 2);<br>                int mn = Math.max((pos - pw) / 2 + 1, pos - nexto[pw] + 1);<br>                if (mn &lt;= mx) {<br>                    if (pos + 1 - 2 * mn &gt;= 0)<br>                        ans += answerSum[pos + 1 - 2 * mn];<br>                    if (pos - 1 - 2 * mx &gt;= 0)<br>                        ans -= answerSum[pos - 1 - 2 * mx];<br>                    if (ans &lt; 0) ans += MODULO;<br>                    if (ans &gt;= MODULO) ans -= MODULO;<br>                }<br>            }<br> <br>            answer[pos] = ans;<br>            answerSum[pos + 1] = ans;<br>            if (pos &gt; 0) answerSum[pos + 1] += answerSum[pos - 1];<br>            if (answerSum[pos + 1] &gt;= MODULO) answerSum[pos + 1] -= MODULO;<br>        }<br>        return answer[N - 1];<br>    }<br>}<br></td>