<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections.Generic;<br>using System.Linq;<br>using System.Text;<br> <br>public class HexagonalBoard<br>{<br>    const int INF = 10000000;<br>    string[] m_board;<br>    bool[, ,] edge = new bool[50, 50, 6];<br>    int[,] color = new int[50, 50];<br> <br>    int[] dx = new int[] { 0, 1, 1, 0, -1, -1, };<br>    int[] dy = new int[] { -1, -1, 0, 1, 1, 0, };<br> <br>    bool F(int y, int x, int angle)<br>    {<br>        int ax = x + dx[angle];<br>        int ay = y + dy[angle];<br>        if (ay &lt; 0 || m_board.Length &lt;= ay ||<br>            ax &lt; 0 || m_board[ay].Length &lt;= ax)<br>            return false;<br>        return m_board[ay][ax] == 'X';<br>    }<br>    int G(int y, int x, int require)<br>    {<br>        if (y &lt; 0 || x &lt; 0 || m_board.Length &lt;= y || m_board[y].Length &lt;= x) { return 0; }<br>        if (m_board[y][x] != 'X') { return 0; }<br> <br>        if(require &gt;= 0 &amp;&amp; color[y,x]&gt;=0 &amp;&amp; require != color[y,x])<br>        {<br>            return 3;<br>        }<br>        if (color[y, x] &gt;= 0) { return 2; }<br>        if(require &lt; 0){require = 0;}<br>        color[y, x] = require;<br> <br>        int res = 1;<br>        for (int a = 0; a &lt; 6; ++a)<br>        {<br>            res = Math.Max(res, G(y + dy[a], x + dx[a], require == 0 ? 1 : 0));<br>        }<br>        return res;<br>    }<br>    public int minColors(string[] board)<br>    {<br>        m_board = board;<br>        int res = 0;<br>        for (int y = 0; y &lt; board.Length; ++y)<br>        {<br>            for (int x = 0; x &lt; board[y].Length; ++x)<br>            {<br>                if (board[y][x] != 'X') continue;<br> <br>                res = 1;<br>                color[y, x] = -1;<br>                for (int k = 0; k &lt; 6; ++k)<br>                {<br>                    edge[y, x, k] = F(y, x, k);<br>                }<br>            }<br>        }<br> <br>        if (res != 0)<br>        {<br>            for (int y = 0; y &lt; m_board.Length; ++y)<br>            {<br>                for (int x = 0; x &lt; m_board[y].Length; ++x)<br>                    res = Math.Max(res, G(y, x, -1));<br>            }<br>        }<br>        return res;<br>    }<br> <br>}<br>// Powered by Greed 1.5<br></td>