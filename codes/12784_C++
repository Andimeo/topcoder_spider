<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;algorithm&gt;<br>#include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;queue&gt;<br>#include &lt;iostream&gt;<br>#include &lt;cmath&gt;<br>#include &lt;sstream&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;cstring&gt;<br>using namespace std;<br>#define pb push_back<br>#define INF 1000000000<br>#define L(s) (int)((s).size())<br>#define FOR(i,a,b) for (int _n(b), i(a); i &lt;= _n; i++)<br>#define rep(i,n) FOR(i,1,(n))<br>#define rept(i,n) FOR(i,0,(n)-1)<br>#define C(a) memset((a),0,sizeof(a))<br>#define ll long long<br>#define all(c) (c).begin(), (c).end()<br>#define SORT(c) sort(all(c))<br>#define VI vector&lt;int&gt;<br>#define ppb pop_back<br>#define mp make_pair<br><br>const int di[] = {-1, -1, 0, 0, 1, 1};<br>const int dj[] = {0, 1, -1, 1, -1, 0};<br>int mas[52][52];<br>bool dfs(int ci, int cj, vector&lt;string&gt; &amp;board) {<br>  int n = L(board);<br>  rept(i, 6) {<br>    int ni = ci + di[i];<br>    int nj = cj + dj[i];<br>    if (ni &lt; 0 || ni &gt;= n || nj &lt; 0 || nj &gt;= n) continue;<br>    if (board[ni][nj] != 'X') continue;<br>    if (mas[ni][nj] != -1) {<br>      if (mas[ni][nj] != (mas[ci][cj] ^ 1)) return 1;<br>    } else {<br>      mas[ni][nj] = mas[ci][cj] ^ 1;<br>      if (dfs(ni, nj, board)) return 1;<br>    }<br>  }<br>  return 0;<br>}<br>class HexagonalBoard <br>  {<br>    public:<br>       int minColors( vector &lt;string&gt; board )<br>    {<br>      int n = L(board);<br>      bool ok = 0, ok2 = 0;<br>      rept(i, n) {<br>        rept(j, n) {<br>          if (board[i][j] != 'X') continue;<br>          ok2 = 1;<br>          rept(z, 6) {<br>            int ni = i + di[z];<br>            int nj = j + dj[z];<br>            if (ni &lt; 0 || ni &gt;= n || nj &lt; 0 || nj &gt;= n) continue;<br>            if (board[ni][nj] == 'X') ok = 1;<br>          }<br>          memset(mas, -1, sizeof(mas));<br>          mas[i][j] = 0;<br>          if (dfs(i, j, board)) return 3;<br>        }<br>      }<br>      if (!ok2) return 0;<br>      if (!ok) return 1;<br>      return 2;<br>    }<br>  };<br><br><br><br>// Powered by FileEdit<br>// Powered by moj 4.18 [modified TZTester]<br>// Powered by CodeProcessor<br></td>