<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;vector&gt;<br>#include &lt;list&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;deque&gt;<br>#include &lt;stack&gt;<br>#include &lt;bitset&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;functional&gt;<br>#include &lt;numeric&gt;<br>#include &lt;utility&gt;<br>#include &lt;sstream&gt;<br>#include &lt;iostream&gt;<br>#include &lt;iomanip&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;ctime&gt;<br> <br>using namespace std;<br> <br>class ConvexPolygonGame {<br>public:<br>  string winner(vector &lt;int&gt;, vector &lt;int&gt;);<br>};<br> <br>const int co = 100001;<br>const int nuff = 300300;<br> <br>int xp[nuff + 10], yp[nuff + 10];<br> <br>string ConvexPolygonGame::winner(vector &lt;int&gt; x, vector &lt;int&gt; y) {<br>  int n = x.size();<br>  for (int i = 0; i &lt; n; i++) x[i] += co, y[i] += co;<br>  int L = (int)1e9, R = -(int)1e9;<br>  for (int i = 0; i &lt; n; i++) {<br>    if (x[i] &lt; L) L = x[i];<br>    if (x[i] &gt; R) R = x[i];<br>  }<br>  x.push_back(x[0]);<br>  y.push_back(y[0]);<br>  int pts = 0;<br>  for (int xx = L; xx &lt;= R; xx++) {<br>    long long lown = (int)1e9, lowd = 1;<br>    long long highn = 0, highd = 1;<br>    for (int i = 0; i &lt; n; i++)<br>      if (x[i] == xx) {<br>        if (y[i] &lt; lown) lown = y[i];<br>        if (y[i] &gt; highn) highn = y[i];<br>      }<br>    for (int i = 0; i &lt; n; i++) {<br>      if (x[i] &lt;= xx &amp;&amp; x[i + 1] &lt;= xx) continue;<br>      if (x[i] &gt;= xx &amp;&amp; x[i + 1] &gt;= xx) continue;<br>      long long a = y[i + 1] - y[i];<br>      long long b = x[i] - x[i + 1];<br>      long long c = -a * x[i] - b * y[i];<br>      long long num = (-a * xx - c);<br>      long long den = b;<br>      if (den &lt; 0) {<br>        num = -num;<br>        den = -den;<br>      }<br>      if (num * lowd &lt; lown * den) {<br>        lown = num;<br>        lowd = den;<br>      }<br>      if (num * highd &gt; highn * den) {<br>        highn = num;<br>        highd = den;<br>      }<br>    }<br>    int low = (lown + lowd - 1) / lowd;<br>    int high = highn / highd;<br>    for (int yy = low; yy &lt;= high; yy++) {<br>      xp[pts] = xx;<br>      yp[pts] = yy;<br>      pts++;<br>      if (pts &gt; nuff) return "Masha";<br>    }<br>  }<br>  int npts = 0;<br>  for (int i = 0; i &lt; pts; i++) {<br>    bool ok = true;<br>    for (int j = 0; j &lt; n; j++)<br>      if (xp[i] == x[j] &amp;&amp; yp[i] == y[j]) {<br>        ok = false;<br>        break;<br>      }<br>    if (!ok) {<br>      continue;<br>    }<br>    xp[npts] = xp[i];<br>    yp[npts] = yp[i];<br>    npts++;<br>  }<br>  pts = npts;<br>  if (pts &lt;= 2) return "Petya";<br>  long long a = yp[1] - yp[0];<br>  long long b = xp[0] - xp[1];<br>  long long c = -a * xp[0] - b * yp[0];<br>  for (int i = 0; i &lt; pts; i++) {<br>    long long z = a * xp[i] + b * yp[i] + c;<br>    if (z != 0) return "Masha";<br>  }<br>  return "Petya";<br>}<br> <br> <br>//Powered by [KawigiEdit] 2.0!<br></td>