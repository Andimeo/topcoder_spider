<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;vector&gt;<br>#include &lt;list&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;deque&gt;<br>#include &lt;stack&gt;<br>#include &lt;bitset&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;functional&gt;<br>#include &lt;numeric&gt;<br>#include &lt;utility&gt;<br>#include &lt;sstream&gt;<br>#include &lt;iostream&gt;<br>#include &lt;iomanip&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;ctime&gt;<br> <br>using namespace std;<br> <br>class GameWithTree {<br>public:<br>  string winner(vector &lt;int&gt;, string);<br>};<br> <br>const int N = 55;<br> <br>int n, par[N];<br>long long g[N];<br> <br>int A[N][N], a[N][N];<br> <br>vector &lt;long long&gt; dfs(int v) {<br>  vector &lt;long long&gt; sub;<br>  for (int j = 0; j &lt; n; j++)<br>    if (par[j] == v) {<br>      vector &lt;long long&gt; cur = dfs(j);<br>      int sz = cur.size();<br>      for (int t = 0; t &lt; sz; t++) sub.push_back(cur[t]);<br>    }<br>  int cols = sub.size() + 1;<br>  int rows = n;<br>  for (int i = 0; i &lt; rows; i++) {<br>    for (int j = 0; j &lt; cols - 1; j++)<br>      if (sub[j] &amp; (1LL &lt;&lt; i)) A[i][j] = 1;<br>      else A[i][j] = 0;<br>    A[i][cols - 1] = 2;<br>  }<br>  for (int row = rows - 1; row &gt;= 0; row--) {<br>    for (int i = 0; i &lt; rows; i++)<br>      for (int j = 0; j &lt; cols; j++) a[i][j] = A[i][j];<br>    a[row][cols - 1] = 0;<br>    bool success = true;<br>    for (int e = 0; e &lt; rows; e++) {<br>      bool found = false;<br>      for (int i = e; i &lt; rows; i++) {<br>        for (int j = e; j &lt; cols - 1; j++)<br>          if (a[i][j] == 1) {<br>            int tmp;<br>            for (int q = 0; q &lt; cols; q++) {<br>              tmp = a[i][q]; a[i][q] = a[e][q]; a[e][q] = tmp;<br>            }<br>            for (int q = 0; q &lt; rows; q++) {<br>              tmp = a[q][j]; a[q][j] = a[q][e]; a[q][e] = tmp;<br>            }<br>            found = true;<br>            break;<br>          }<br>        if (found) break;<br>      }<br>      if (!found) {<br>        for (int i = e; i &lt; rows; i++)<br>          if (a[i][cols - 1] != 0) success = false;<br>        break;<br>      }<br>      for (int i = e + 1; i &lt; rows; i++)<br>        if (a[i][e] == 1) {<br>          for (int j = e; j &lt; cols - 1; j++) a[i][j] ^= a[e][j];<br>          if (a[i][cols - 1] == 2 || a[e][cols - 1] == 2) {<br>            a[i][cols - 1] = 2;<br>          } else {<br>            a[i][cols - 1] ^= a[e][cols - 1];<br>          }<br>        }<br>    }<br>    if (success) A[row][cols - 1] = 1;<br>    else A[row][cols - 1] = 0;<br>  }<br>  g[v] = 0;<br>  for (int i = 0; i &lt; rows; i++)<br>    if (A[i][cols - 1] == 1) g[v] += (1LL &lt;&lt; i);<br>  sub.push_back(g[v]);<br>  return sub;<br>}<br> <br>string GameWithTree::winner(vector &lt;int&gt; parent, string color) {<br>  n = parent.size() + 1;<br>  par[0] = -1;<br>  for (int i = 1; i &lt; n; i++) par[i] = parent[i - 1];<br>  dfs(0);<br>  long long x = 0;<br>  for (int i = 0; i &lt; n; i++)<br>    if (color[i] == 'W') x ^= g[i];<br>  return (x ? "Masha" : "Petya");<br>}<br> <br> <br>//Powered by [KawigiEdit] 2.0!<br></td>