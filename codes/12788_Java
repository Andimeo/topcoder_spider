<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.Arrays;<br><br>public class PairsOfStrings {<br>  public int getNumber(int n, int k) {<br>    int mod = 1000000007;<br>    int[] ds = new int[3000];<br>    int p = 0;<br>    for(int i = 1;i*i &lt;= n;i++){<br>      if(n % i == 0){<br>        ds[p++] = i;<br>        if(i*i &lt; n)ds[p++] = n/i;<br>      }<br>    }<br>    Arrays.sort(ds, 0, p);<br>    long[] q = new long[p];<br>    for(int i = 0;i &lt; p;i++){<br>      q[i] = pow(k, ds[i], mod);<br>    }<br>    <br>    for(int i = 0;i &lt; p-1;i++){<br>      for(int j = i+1;j &lt; p;j++){<br>        if(ds[j] % ds[i] == 0){<br>          q[j] += mod - q[i];<br>          if(q[j] &gt;= mod)q[j] -= mod;<br>        }<br>      }<br>    }<br>    long ret = 0;<br>    for(int i = 0;i &lt; p;i++){<br>      ret += q[i] * ds[i] % mod;<br>    }<br>    <br>    return (int)(ret%mod);<br>  }<br>  <br>  public static long pow(long a, long n, long mod)<br>  {<br>//    a %= mod;<br>    long ret = 1;<br>    int x = 63-Long.numberOfLeadingZeros(n);<br>    for(;x &gt;= 0;x--){<br>      ret = ret * ret % mod;<br>      if(n&lt;&lt;63-x&lt;0)ret = ret * a % mod;<br>    }<br>    return ret;<br>  }<br><br>  void tr(Object... o) { System.out.println(Arrays.deepToString(o)); }<br>}<br></td>