<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections.Generic;<br>using System.Linq;<br><br>public class BitwiseAnd<br>{<br>    int[] positions(long a)<br>    {<br>        return Enumerable.Range(0, 60).Where(ob =&gt; ((1L &lt;&lt; ob) &amp; a) != 0).ToArray();<br>    }<br><br>    public long[] lexSmallest(long[] subset, int N)<br>    {<br>        int[] cnt = new int[60];<br>        foreach (var l in subset)<br>        {<br>            foreach (var l1 in subset)<br>            {<br>                if ((l&amp;l1)==0)<br>                {<br>                    return new long[0];<br>                }<br>            }<br>        }<br>        foreach (var l in subset)<br>        {<br>            var cc = positions(l);<br>            foreach (var i in cc)<br>            {<br>                cnt[i]++;<br>            }<br>        }<br>        if (cnt.Any(i=&gt;i&gt;2))<br>        {<br>            return new long[0];<br>        }<br>        int rem = N - subset.Length;<br>        List&lt;long&gt; res = subset.ToList();<br>        while (rem&gt;0)<br>        {<br>            List&lt;int&gt; current = new List&lt;int&gt;();<br>            foreach (var re in res)<br>            {<br>                var pos = positions(re).Where(i =&gt; cnt[i] == 1).ToArray();<br>                if (pos.Length==0)<br>                {<br>                    return new long[0];<br>                }<br>                current.Add(pos.First());<br>            }<br>            List&lt;int&gt; available = Enumerable.Range(0, 60).Where(i =&gt; cnt[i] == 0).ToList();<br>            if (available.Count&lt;rem-1)<br>            {<br>                return new long[0];<br>            }<br>            current.AddRange(available.Take(rem-1));<br>            long val = 0;<br>            foreach (var i in current)<br>            {<br>                val = val | (1L &lt;&lt; i);<br>            }<br>            res.Add(val);<br>            foreach (var i in current)<br>            {<br>                cnt[i]++;<br>            }<br>            --rem;<br><br>        }<br>        res.Sort();<br>        return res.ToArray();<br><br><br>    }<br>}<br></td>