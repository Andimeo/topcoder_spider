<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;vector&gt;<br>#include &lt;list&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;queue&gt;<br>#include &lt;deque&gt;<br>#include &lt;stack&gt;<br>#include &lt;bitset&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;functional&gt;<br>#include &lt;numeric&gt;<br>#include &lt;utility&gt;<br>#include &lt;sstream&gt;<br>#include &lt;iostream&gt;<br>#include &lt;iomanip&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;ctime&gt;<br>#include &lt;limits.h&gt;<br> <br>#define FOR(i,a,b) for(int i=(a);i&lt;(b);++i)<br>#define REP(i,n) FOR(i,0,n)<br>#define ALL(a) (a).begin(),a.end()<br>#define SORT(a) sort(ALL(a))<br>#define SZ(a) ((int) a.size())<br>#define pb push_back<br> <br>using namespace std;<br> <br> <br>class LittleElephantAndBallsAgain {<br>public:<br>  int getNumber(string S) {<br>    int consecutive = 1;<br>    char current = S[0];<br>    int maxConsecutive = 1;<br>    for (int i = 1; i &lt; S.size(); i++){<br>      if (S[i] == (current)){<br>        consecutive++;<br>      } else {<br>        consecutive = 1;<br>      }<br>      current = S[i];<br>      maxConsecutive = max(consecutive, maxConsecutive);<br>    }<br>    return S.size() - maxConsecutive;<br>    <br>  }<br>};<br> <br> <br> <br>//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!<br></td>