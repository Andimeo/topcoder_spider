<td class="problemText" colspan="8" valign="middle" align="left">
            /**<br> * Built using CHelper plug-in<br> * Actual solution is at the top<br> */<br>public class Constellation {<br>    public double expectation(int[] x, int[] y, int[] prob) {<br>        double res = 0;<br>        int n = x.length;<br>        for (int i = 0; i &lt; n; ++i)<br>            for (int j = 0; j &lt; n; ++j) if (i != j) {<br>                int x1 = x[i];<br>                int y1 = y[i];<br>                int x2 = x[j];<br>                int y2 = y[j];<br>                double pr = prob[i] * prob[j] / 1000000.0;<br>                for (int k = 0; k &lt; n; ++k) if (k != i &amp;&amp; k != j) {<br>                    int x3 = x[k];<br>                    int y3 = y[k];<br>                    int z = (x3 - x1) * (y2 - y1) - (y3 - y1) * (x2 - x1);<br>                    boolean bad = false;<br>                    if (z &gt; 0) bad = true; else if (z == 0) {<br>                        int z1 = (x3 - x1) * (x2 - x1) + (y3 - y1) * (y2 - y1);<br>                        int z2 = (x3 - x2) * (x1 - x2) + (y3 - y2) * (y1 - y2);<br>                        if (z1 &lt; 0 || z2 &lt; 0) bad = true;<br>                    }<br>                    if (bad)<br>                        pr *= (1000 - prob[k]) / 1000.0;<br>                }<br>                res += pr * ((x1 - x2) * (y1 + y2)); <br>            }<br>        return res / 2;<br>    }<br>}<br></td>