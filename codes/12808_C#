<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections.Generic;<br>using System.Linq;<br><br>public class FoxAndGo3<br>{<br>    private int R;<br>    private int C;<br>    private int[,] M;<br>    private bool[,] Visited;<br>    private string[] G;<br><br>    bool Dfs(int r,int c)<br>    {<br>        if (Visited[r, c])<br>        {<br>            return false;<br>        }<br>        Visited[r, c] = true;<br>        for (int i = -1; i &lt; 2; i++)<br>        {<br>            for (int j = -1; j &lt; 2; j++)<br>            {<br>                if ((i==0)^(j==0))<br>                {<br>                    int tr = r + i;<br>                    int tc = c + j;<br>                    if (tr &lt; 0 || tr &gt;= R)<br>                    {<br>                        continue;<br>                    }<br>                    if (tc &lt; 0 || tc &gt;= C)<br>                    {<br>                        continue;<br>                    }<br>                    if (G[tr][tc]!='.')<br>                    {<br>                        continue;<br>                    }<br>                    if (M[tr, tc] == -1 || Dfs(M[tr, tc] / C, M[tr, tc] % C))<br>                    {<br>                        M[r, c] = tr*C + tc;<br>                        M[tr, tc] = r*C + c;<br>                        return true;<br>                    }<br>                    <br>                }<br>            }<br>        }<br>        return false;<br><br>    }<br><br>    public int maxEmptyCells(string[] board)<br>    {<br>        G = board;<br>        R = board.Length;<br>        C = board[0].Length;<br>        M = new int[R, C];<br>        Visited = new bool[R,C];<br>        for (int i = 0; i &lt; R; i++)<br>        {<br>            for (int j = 0; j &lt; C; j++)<br>            {<br>                M[i, j] = -1;<br>            }<br>        }<br>        int match = 0;<br>        int total = 0;<br>        for (int i = 0; i &lt; R; i++)<br>        {<br>            for (int j = 0; j &lt; C; j++)<br>            {<br>                if (board[i][j] != 'x') ++total;<br>                if (board[i][j]=='o')<br>                {<br>                    if (M[i,j]==-1)<br>                    {<br>                        for (int k = 0; k &lt; R; k++)<br>                        {<br>                            for (int l = 0; l &lt; C; l++)<br>                            {<br>                                Visited[k, l] = false;<br>                            }<br>                        }<br>                        if (Dfs(i,j))<br>                        {<br>                            ++match;<br>                        }<br><br>                    }<br>                }<br>            }<br>        }<br>        return total - match;<br>    }<br>}<br></td>