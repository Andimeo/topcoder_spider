<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.Arrays;<br> <br>/**<br> * Built using CHelper plug-in<br> * Actual solution is at the top<br> * @author sheep<br> */<br>public class FoxAndGo3 {<br>    private static final int MAX_VALUE = 0x3F3F3F3F;<br>    private int[] dx = new int[]{-1, 1, 0, 0};<br>    private int[] dy = new int[]{0, 0, -1, 1};<br>    public int maxEmptyCells(String[] boards) {<br>        int n = boards.length;<br>        char[][] board = new char[n][];<br>        for (int i = 0; i &lt; n; ++i) {<br>            board[i] = boards[i].toCharArray();<br>        }<br>        int[][] index = new int[n][n];<br>        int allIndex = 0;<br>        for (int i = 0; i &lt; n; ++i) {<br>            for (int j = 0; j &lt; n; ++j) {<br>                index[i][j] = allIndex++;<br>            }<br>        }<br>        int source = allIndex++;<br>        int target = allIndex++;<br>        MaxFlow flow = new MaxFlow(allIndex, source, target);<br>        int result = 0;<br>        for (int i = 0; i &lt; n; ++i) {<br>            for (int j = 0; j &lt; n; ++j) {<br>                if (board[i][j] == 'x') continue;<br>                ++result;<br>                if ((i + j) % 2 == 0) {<br>                    flow.insert(source, index[i][j], 1);<br>                    for (int k = 0; k &lt; 4; ++k) {<br>                        int nx = i + dx[k];<br>                        int ny = j + dy[k];<br>                        if (nx &gt;= 0 &amp;&amp; nx &lt; n &amp;&amp; ny &gt;= 0 &amp;&amp; ny &lt; n) {<br>                            if (board[nx][ny] != 'x' &amp;&amp; board[nx][ny] != board[i][j]) {<br>                                flow.insert(index[i][j], index[nx][ny], MAX_VALUE);<br>                            }<br>                        }<br>                    }<br>                } else {<br>                    flow.insert(index[i][j], target, 1);<br>                }<br>            }<br>        }<br>        return result - flow.maxFlow();<br>    }<br>}<br> <br>class MaxFlow<br>{<br>    public class Edge<br>    {<br>        public int u,v,c;<br>        public Edge next,r;<br> <br>        public Edge(int u,int v,int c)<br>        {<br>            this.u = u;<br>            this.v = v;<br>            this.c = c;<br>            next = r = null;<br>        }<br>    }<br> <br>    public Edge vertex[];<br>    public int height[], nheight[];<br>    public int s, t, n;<br> <br>    public void init(int n,int s,int t)<br>    {<br>        height = new int[n+1];<br>        nheight = new int[n+1];<br>        vertex = new Edge[n+1];<br>        this.s = s;<br>        this.t = t;<br>        this.n = n;<br>    }<br> <br>    public MaxFlow(int n,int s,int t)<br>    {<br>        init(n,s,t);<br>    }<br> <br>    public void insert(int u,int v,int c)<br>    {<br>        Edge e = new Edge(u,v,c);<br>        Edge r = new Edge(v,u,0);<br>        e.r = r;<br>        r.r = e;<br>        e.next = vertex[u];<br>        vertex[u] = e;<br>        r.next = vertex[v];<br>        vertex[v] = r;<br>    }<br> <br>    public int augPath(int u,int push)<br>    {<br>        if (u == t) return push;<br>        int flow = push, minheight = n-1;<br>        for (Edge e = vertex[u]; e != null; e = e.next)<br>            if (e.c != 0)<br>            {<br>                if (height[e.v] + 1 == height[e.u])<br>                {<br>                    int delta = flow &lt; e.c ? flow : e.c;<br>                    if (delta &gt; 0)<br>                        delta = augPath(e.v,delta);<br>                    e.c -= delta;<br>                    e.r.c += delta;<br>                    flow -= delta;<br>                    if (0 == flow || height[s] &gt;= n) return push - flow;<br>                }<br>                minheight = Math.min(minheight, height[e.v]);<br>            }<br>        if (push == flow)<br>        {<br>            --nheight[height[u]];<br>            if (0 == nheight[height[u]]) height[s] = n;<br>            height[u] = ++minheight;<br>            ++nheight[height[u]];<br>        }<br>        return push - flow;<br>    }<br> <br>    public int maxFlow()<br>    {<br>        Arrays.fill(height, 0);<br>        Arrays.fill(nheight, 0);<br>        nheight[0] = n;<br>        int flow = 0;<br>        while (height[s] &lt; n)<br>            flow += augPath(s,Integer.MAX_VALUE);<br>        return flow;<br>    }<br>}<br></td>