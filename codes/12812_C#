<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections;<br>using System.Collections.Generic;<br>using System.Collections.Specialized;<br>using System.Text;<br>using System.Text.RegularExpressions;<br> <br>public class AstronomicalRecordsEasy<br>{<br>  public int minimalPlanets(int[] A, int[] B)<br>  {<br>      var agcd = GTDarray(A);<br>      var bgcd = GTDarray(B);<br>      var i = 0;<br>      var j = 0;<br>      for (i = 0; i &lt; A.Length; i++)<br>      {<br>          A[i] = A[i]/agcd;<br>      }<br>      for ( j = 0; j &lt; B.Length; j++)<br>      {<br>          B[j] = B[j]/bgcd;<br>      }<br>      var res = 1000000;<br>      for (var ka = 0; ka &lt; A.Length; ka++)<br>      {<br>          for (var kb = 0; kb &lt; B.Length; kb++)<br>          {<br>              var gcd = GTD(A[ka], B[kb]);<br>              var res1 = solver(A, B, B[kb]/gcd, A[ka]/gcd);<br> <br>              if (res1 &lt; res)<br>              {<br>                  res = res1;<br>              }<br> <br>          }<br>      }<br> <br>      return res;<br> <br>  }<br> <br>    public int solver( int[]A, int[]B, int ak, int bk)<br>    {<br>        int i, j;<br>        var res = 0;<br>        i = j = 0;<br>        while (i &lt; A.Length &amp;&amp; j &lt; B.Length)<br>        {<br>            var ac = ak*A[i];<br>            var bc = bk*B[j];<br>            if (ac == bc)<br>            {<br>                res++;<br>                i++;<br>                j++;<br>                continue;<br>            }<br>            if (ac &lt; bc)<br>            {<br>                i++;<br>                res++;<br>                continue;<br>            }<br>            if (ac &gt; bc)<br>            {<br>                j++;<br>                res++;<br>            }<br>        }<br>        res += (A.Length - i);<br>        res += (B.Length - j);<br>        return res;<br>    }<br> <br>    public int GTDarray(int[] A)<br>    {<br>        var last = A[0];<br>        for (var i = 1; i &lt; A.Length; i++)<br>        {<br>            last = GTD(last, A[i]);<br>        }<br>        return last;<br>    }<br> <br> <br>    public int GTD(int n, int m)<br>    {<br>        if (n % m == 0) return m;<br>        if (m == 1)<br>        {<br>            return 1;<br>        }<br>        return GTD(m, n % m);<br>    }<br> <br> <br> <br> <br>}<br>//Powered by [KawigiEdit] 2.0!<br></td>