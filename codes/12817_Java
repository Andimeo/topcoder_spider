<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.Arrays;<br> <br>/**<br> * Built using CHelper plug-in<br> * Actual solution is at the top<br> */<br>public class TBlocks {<br> <br>    static final int MODULO = (int) (1e9 + 7);<br>    int height;<br>    int width;<br> <br>    int[] dr = new int[]{-1, 0, 1, 0};<br>    int[] dc = new int[]{0, -1, 0, 1};<br>    boolean[][] mark;<br>    boolean[][] mark2;<br>    boolean[][] mark3;<br>    boolean[][] center;<br>    boolean[][] adj;<br>    int seenBorder;<br> <br>    public int count(String[] board) {<br>        height = board.length;<br>        width = board[0].length();<br>        center = new boolean[height][width];<br>        boolean[][] scenter = new boolean[height][width];<br>        mark = new boolean[height][width];<br>        mark2 = new boolean[height][width];<br>        mark3 = new boolean[height][width];<br>        adj = new boolean[height][width];<br>        int[] starRow = new int[100];<br>        int[] starCol = new int[100];<br>        int starCnt = 0;<br>        for (int row = 0; row &lt; height; ++row)<br>            for (int col = 0; col &lt; width; ++col) {<br>                char ch = board[row].charAt(col);<br>                if (ch == 'o') {<br>                    center[row][col] = true;<br>                } else if (ch == '*') {<br>                    starRow[starCnt] = row;<br>                    starCol[starCnt] = col;<br>                    ++starCnt;<br>                }<br>            }<br>        for (int row = 0; row &lt; height; ++row)<br>            for (int col = 0; col &lt; width; ++col)<br>                scenter[row][col] = center[row][col];<br>        int res = 0;<br>        outer: for (int set = 0; set &lt; (1 &lt;&lt; starCnt); ++set) {<br>            for (int row = 0; row &lt; height; ++row)<br>                for (int col = 0; col &lt; width; ++col)<br>                    center[row][col] = scenter[row][col];<br>            for (int i = 0; i &lt; starCnt; ++i)<br>                if ((set &amp; (1 &lt;&lt; i)) != 0)<br>                    center[starRow[i]][starCol[i]] = true;<br>            res = (res + solveOne(center)) % MODULO;<br>        }<br>        return res;<br>    }<br> <br>    private int solveOne(boolean[][] center) {<br>        for (boolean[] x : mark) Arrays.fill(x, false);<br>        for (boolean[] x : mark2) Arrays.fill(x, false);<br>        for (boolean[] x : mark3) Arrays.fill(x, false);<br>        for (boolean[] x : adj) Arrays.fill(x, false);<br>        for (int row = 0; row &lt; height; ++row)<br>            for (int col = 0; col &lt; width; ++col) if (center[row][col]) {<br>                adj[row][col] = true;<br>                for (int k = 0; k &lt; 4; ++k) {<br>                    int nr = row + dr[k];<br>                    int nc = col + dc[k];<br>                    if (nr &gt;= 0 &amp;&amp; nr &lt; height &amp;&amp; nc &gt;= 0 &amp;&amp; nc &lt; width) adj[nr][nc] = true;<br>                }<br>            }<br>        int res = 1;<br>        for (int row = 0; row &lt; height; ++row)<br>            for (int col = 0; col &lt; width; ++col) if (adj[row][col] &amp;&amp; !mark[row][col]) {<br>                seenBorder = 0;<br>                br1 = -1;<br>                br2 = -1;<br>                bc1 = -1;<br>                bc2 = -1;<br>                int ways = dfs(row, col, -1, -1);<br>                if (br1 &gt;= 0) {<br>                    if (dfs2(row, col, -1, -1)) {<br>                        return 0;<br>                    }<br>                    ways = -2;<br>                }<br>                int bound = seenBorder;<br>                if (ways == -2) {<br>                    if (bound == 0)<br>                        ways = 2;<br>                    else<br>                        ways = 0;<br>                } else {<br>                    if (bound == 1)<br>                        ways = 1;<br>                    else if (bound &gt; 1)<br>                        ways = 0;<br>                }<br>                res = (int) ((res * (long) ways) % MODULO);<br>                if (res == 0) return 0;<br>            }<br>        return res;<br>    }<br> <br>    int br1;<br>    int bc1;<br>    int br2;<br>    int bc2;<br> <br>    private int dfs(int row, int col, int pr, int pc) {<br>        mark[row][col] = true;<br>        int sum = 0;<br>        if (!center[row][col]) ++sum;<br>        for (int k = 0; k &lt; 4; ++k) {<br>            int nr = row + dr[k];<br>            int nc = col + dc[k];<br>            if (nr == pr &amp;&amp; nc == pc) continue;<br>            if (center[row][col] &amp;&amp; !(nr &gt;= 0 &amp;&amp; nr &lt; height &amp;&amp; nc &gt;= 0 &amp;&amp; nc &lt; width)) ++seenBorder;<br>            if (nr &gt;= 0 &amp;&amp; nr &lt; height &amp;&amp; nc &gt;= 0 &amp;&amp; nc &lt; width &amp;&amp; adj[nr][nc] &amp;&amp; (center[row][col] || center[nr][nc])) {<br>                if (center[row][col] &amp;&amp; center[nr][nc]) ++seenBorder;<br>                if (!mark[nr][nc]) {<br>                    int child = dfs(nr, nc, row, col);<br>                    sum += child;<br>                } else {<br>                    if (br1 &lt; 0) {<br>                        br1 = row;<br>                        bc1 = col;<br>                        br2 = nr;<br>                        bc2 = nc;<br>                    }<br>                }<br>            }<br>        }<br>        return sum;<br>    }<br> <br>    private boolean dfs2(int row, int col, int pr, int pc) {<br>        mark2[row][col] = true;<br>        for (int k = 0; k &lt; 4; ++k) {<br>            int nr = row + dr[k];<br>            int nc = col + dc[k];<br>            if (nr == pr &amp;&amp; nc == pc) continue;<br>            if (nr == br1 &amp;&amp; nc == bc1 &amp;&amp; row == br2 &amp;&amp; col == bc2) continue;<br>            if (nr == br2 &amp;&amp; nc == bc2 &amp;&amp; row == br1 &amp;&amp; col == bc1) continue;<br>            if (nr &gt;= 0 &amp;&amp; nr &lt; height &amp;&amp; nc &gt;= 0 &amp;&amp; nc &lt; width &amp;&amp; adj[nr][nc] &amp;&amp; (center[row][col] || center[nr][nc])) {<br>                if (mark2[nr][nc]) return true;<br>                if (dfs2(nr, nc, row, col)) return true;<br>            }<br>        }<br>        return false;<br>    }<br>}<br></td>