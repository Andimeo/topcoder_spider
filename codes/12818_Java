<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>import static java.lang.Math.*;<br>import static java.util.Arrays.*;<br><br>public class SemiMultiple {<br>  <br>  long MOD = 1000000007;<br>  <br>  public int count(int N, int M) {<br>    int[] num = new int[M];<br>    int p = 1 % M;<br>    for (int i = 0; i &lt; N; i++) {<br>      num[p]++;<br>      p = p * 2 % M;<br>    }<br>    long[][] front = new long[M / 2 + 2][M];<br>    front[0][0] = 1;<br>    for (int i = 0; i * 2 &lt;= M; i++) {<br>      long[] crt = front[i];<br>      for (int rep = 0; rep &lt; 2; rep++) {<br>        int I = rep == 0 ? i : M - i;<br>        for (int j = 0; j &lt; num[I]; j++) {<br>          long[] next = new long[M];<br>          for (int k = 0; k &lt; M; k++) {<br>            int k2 = k + I;<br>            if (k2 &gt;= M) k2 -= M;<br>            next[k] += crt[k];<br>            if (next[k] &gt;= MOD) next[k] -= MOD;<br>            next[k2] += crt[k];<br>            if (next[k2] &gt;= MOD) next[k2] -= MOD;<br>          }<br>          crt = next;<br>        }<br>        if (i == 0 || i * 2 == M) break;<br>      }<br>      front[i + 1] = crt;<br>    }<br>    long[][] back = new long[M / 2 + 2][M];<br>    back[M / 2 + 1][0] = 1;<br>    for (int i = M / 2; i &gt;= 0; i--) {<br>      long[] crt = back[i + 1];<br>      for (int rep = 0; rep &lt; 2; rep++) {<br>        int I = rep == 0 ? i : M - i;<br>        for (int j = 0; j &lt; num[I]; j++) {<br>          long[] next = new long[M];<br>          for (int k = 0; k &lt; M; k++) {<br>            int k2 = k + I;<br>            if (k2 &gt;= M) k2 -= M;<br>            next[k] += crt[k];<br>            if (next[k] &gt;= MOD) next[k] -= MOD;<br>            next[k2] += crt[k];<br>            if (next[k2] &gt;= MOD) next[k2] -= MOD;<br>          }<br>          crt = next;<br>        }<br>        if (i == 0 || i * 2 == M) break;<br>      }<br>      back[i] = crt;<br>    }<br>    long res = 0;<br>    for (int i = 0; i * 2 &lt;= M; i++) {<br>      if (i == 0) {<br>      } else {<br>        { // +i<br>          long[] crt = front[i].clone();<br>          int add = i * num[i] % M;<br>          for (int j = 0; j &lt; num[i]; j++) {<br>            for (int k = 0; k &lt; M; k++) {<br>              long tmp = crt[k] * back[i + 1][(M - k - add + M) % M] % MOD;<br>              res += tmp;<br>              if (res &gt;= MOD) res -= MOD;<br>            }<br>            long[] next = new long[M];<br>            for (int k = 0; k &lt; M; k++) {<br>              next[k] += crt[k];<br>              if (next[k] &gt;= MOD) next[k] -= MOD;<br>              int k2 = k + i;<br>              if (k2 &gt;= M) k2 -= M;<br>              next[k2] += crt[k];<br>              if (next[k2] &gt;= MOD) next[k2] -= MOD;<br>            }<br>            crt = next;<br>            add -= i;<br>            if (add &lt; 0) add += M;<br>          }<br>          if (i * 2 &lt; M) {<br>            for (int j = 0; j &lt; num[M - i]; j++) {<br>              for (int k = 0; k &lt; M; k++) {<br>                long tmp = crt[k] * back[i + 1][(M - k - add + M) % M] % MOD;<br>                res += tmp;<br>                if (res &gt;= MOD) res -= MOD;<br>              }<br>              long[] next = new long[M];<br>              for (int k = 0; k &lt; M; k++) {<br>                next[k] += crt[k];<br>                if (next[k] &gt;= MOD) next[k] -= MOD;<br>                int k2 = k - i;<br>                if (k2 &lt; 0) k2 += M;<br>                next[k2] += crt[k];<br>                if (next[k2] &gt;= MOD) next[k2] -= MOD;<br>              }<br>              crt = next;<br>            }<br>          }<br>        }<br>        { // -i<br>          long[] crt = front[i].clone();<br>          int add = (M - i) * num[M - i] % M;<br>          if (i * 2 == M) add = 0;<br>          for (int j = 0; j &lt; num[i]; j++) {<br>            for (int k = 0; k &lt; M; k++) {<br>              long tmp = crt[k] * back[i + 1][(M - k - add + M) % M] % MOD;<br>              res += tmp;<br>              if (res &gt;= MOD) res -= MOD;<br>            }<br>            long[] next = new long[M];<br>            for (int k = 0; k &lt; M; k++) {<br>              next[k] += crt[k];<br>              if (next[k] &gt;= MOD) next[k] -= MOD;<br>              int k2 = k + i;<br>              if (k2 &gt;= M) k2 -= M;<br>              next[k2] += crt[k];<br>              if (next[k2] &gt;= MOD) next[k2] -= MOD;<br>            }<br>            crt = next;<br>          }<br>          if (i * 2 &lt; M) {<br>            for (int j = 0; j &lt; num[M - i]; j++) {<br>              for (int k = 0; k &lt; M; k++) {<br>                long tmp = crt[k] * back[i + 1][(M - k - add + M) % M] % MOD;<br>                res += tmp;<br>                if (res &gt;= MOD) res -= MOD;<br>              }<br>              long[] next = new long[M];<br>              for (int k = 0; k &lt; M; k++) {<br>                next[k] += crt[k];<br>                if (next[k] &gt;= MOD) next[k] -= MOD;<br>                int k2 = k - i;<br>                if (k2 &lt; 0) k2 += M;<br>                next[k2] += crt[k];<br>                if (next[k2] &gt;= MOD) next[k2] -= MOD;<br>              }<br>              crt = next;<br>              add += i;<br>              if (add &gt;= M) add -= M;<br>            }<br>          }<br>        }<br>      }<br>    }<br>    debug(res);<br>    return (int)res;<br>  }<br>  <br>  long pow(long a, long b) {<br>    long res = 1;<br>    while (b &gt; 0) {<br>      if ((b &amp; 1) != 0) res = (res * a) % MOD;<br>      a = (a * a) % MOD;<br>      b &gt;&gt;&gt;= 1;<br>    }<br>    return res;<br>  }<br>  <br>  void debug(Object...os) {<br>    System.err.println(deepToString(os));<br>  }<br>  <br>}<br></td>