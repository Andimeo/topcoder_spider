<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;vector&gt;<br>#include &lt;list&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;deque&gt;<br>#include &lt;stack&gt;<br>#include &lt;bitset&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;functional&gt;<br>#include &lt;numeric&gt;<br>#include &lt;utility&gt;<br>#include &lt;sstream&gt;<br>#include &lt;iostream&gt;<br>#include &lt;iomanip&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;ctime&gt;<br> <br>using namespace std;<br> <br>class JumpingOnTheGrid {<br>public:<br>  long long maxEnergy(vector &lt;string&gt;, int, int);<br>};<br> <br>typedef long long llint;<br> <br>const int MAXN = 25 * 25 + 10;<br>int SLIMIT = 5000;<br>int TLIMIT = 2000;<br>const llint SHIFT = SLIMIT * 100;<br>const llint INF = 0x123456789ABCDEFLL;<br> <br>const int dx[4] = {1, 0, -1, 0};<br>const int dy[4] = {0, 1, 0, -1};<br> <br>int id[33][33];<br>llint scr[MAXN];<br>vector&lt;pair&lt;int, int&gt; &gt; e[MAXN];<br> <br>int score(char ch) {<br>  int ret = 0;<br>  if (isdigit(ch)) {<br>    ret = ch - '0';<br>  }<br>  else if (islower(ch)) {<br>    ret = ch - 'a' + 10;<br>  }<br>  else if (isupper(ch)) {<br>    ret = ch - 'A' + 36;<br>  }<br>  return ret;<br>}<br> <br>long long JumpingOnTheGrid::maxEnergy(vector &lt;string&gt; grid, int E, int T) {<br>  int r = (int)grid.size(), c = (int)grid[0].size(), n = 0;<br>  int sid = -1, tid = -1;<br>  for (int i = 0; i &lt; r; ++i) {<br>    for (int j = 0; j &lt; c; ++j) {<br>      if (grid[i][j] != '#') {<br>        if (grid[i][j] == '*') {<br>          sid = n;<br>        }<br>        if (grid[i][j] == '$') {<br>          tid = n;<br>        }<br>        id[i][j] = n++;<br>      }<br>      else {<br>        id[i][j] = -1;<br>      }<br>    }<br>  }<br>  for (int i = 0; i &lt; r; ++i) {<br>    for (int j = 0; j &lt; c; ++j) {<br>      int from = id[i][j];<br>      if (from == -1) {<br>        continue;<br>      }<br>      scr[from] = score(grid[i][j]);<br>      e[from].push_back(make_pair(from, scr[from]));<br>      for (int k = 0; k &lt; 4; ++k) {<br>        int x = i + dx[k], y = j + dy[k], z = 1;<br>        while (0 &lt;= x &amp;&amp; x &lt; r &amp;&amp; 0 &lt;= y &amp;&amp; y &lt; c &amp;&amp; id[x][y] != -1) {<br>          e[from].push_back(make_pair(id[x][y], -(z * z)));<br>          x += dx[k];<br>          y += dy[k];<br>          z += 1;<br>        }<br>      }<br>    }<br>  }<br> <br>  if (T &lt;= SLIMIT + TLIMIT) {<br>    SLIMIT = T;<br>  }<br> <br>  vector&lt;llint&gt; sdp(n, -INF);<br>  sdp[sid] = E;<br>  for (int t = 0; t &lt; SLIMIT; ++t) {<br>    vector&lt;llint&gt; tmp(n, -INF);<br>    for (int i = 0; i &lt; n; ++i) {<br>      if (sdp[i] &lt; 0) {<br>        continue;<br>      }<br>      for (vector&lt;pair&lt;int, int&gt; &gt;::const_iterator j = e[i].begin(); j != e[i].end(); ++j) {<br>        tmp[j-&gt;first] = max(tmp[j-&gt;first], sdp[i] + j-&gt;second);<br>      }<br>    }<br>    sdp.swap(tmp);<br>  }<br> <br>  llint ret = max(-1LL, sdp[tid]);<br>  if (T == SLIMIT) {<br>    return ret;<br>  }<br>  puts("&gt;_&lt;");<br> <br>  vector&lt;llint&gt; tdp(n, -INF);<br>  tdp[tid] = SHIFT;<br>  for (int t = 1; t &lt;= TLIMIT; ++t) {<br>    vector&lt;llint&gt; tmp(n, -INF);<br>    for (int i = 0; i &lt; n; ++i) {<br>      if (tdp[i] &lt; 0) {<br>        continue;<br>      }<br>      for (vector&lt;pair&lt;int, int&gt; &gt;::const_iterator j = e[i].begin(); j != e[i].end(); ++j) {<br>        tmp[j-&gt;first] = max(tmp[j-&gt;first], tdp[i] + j-&gt;second);<br>      }<br>    }<br>    tdp.swap(tmp);<br> <br>    for (int i = 0; i &lt; n; ++i) {<br>      if (sdp[i] &gt;= 0 &amp;&amp; tdp[i] &gt;= 0 &amp;&amp; scr[i] &gt; 0) {<br>        ret = max(ret, sdp[i] + tdp[i] + scr[i] * (T - SLIMIT - t) - SHIFT);<br>      }<br>    }<br>  }<br> <br>  return ret;<br>}<br> <br>//Powered by [KawigiEditNonTest] modified by pivanof!<br></td>