<td class="problemText" colspan="8" valign="middle" align="left">
            #line 80 "ScoringSystems.cpp"<br>// @author peter50216<br>// #includes {{{<br>#include&lt;stdio.h&gt;<br>#include&lt;stdlib.h&gt;<br>#include&lt;string.h&gt;<br>#include&lt;functional&gt;<br>#include&lt;math.h&gt;<br>#include&lt;assert.h&gt;<br>#include&lt;stdarg.h&gt;<br>#include&lt;time.h&gt;<br>#include&lt;limits.h&gt;<br>#include&lt;ctype.h&gt;<br>#include&lt;string&gt;<br>#include&lt;map&gt;<br>#include&lt;set&gt;<br>#include&lt;queue&gt;<br>#include&lt;algorithm&gt;<br>#include&lt;vector&gt;<br>#include&lt;iostream&gt;<br>#include&lt;sstream&gt;<br>using namespace std;<br>// }}}<br>// #defines {{{<br>#define FOR(i,c) for(__typeof((c).begin()) i=(c).begin();i!=(c).end();i++)<br>#define REP(i,n) for(int i=0;i&lt;(n);i++)<br>#define REP1(i,a,b) for(int i=(a);i&lt;=(b);i++)<br>#define MS0(x) memset(x,0,sizeof(x))<br>typedef long long LL;<br>// }}}<br><br>vector&lt;int&gt; c,s;<br>LL dpc[501000];<br>int dpmi[501000],dpma[501000];<br>const int INF=1000000000;<br>class ScoringSystems {<br>public:<br>    string isEquivalent(vector &lt;int&gt; c, vector &lt;int&gt; s) {<br>        string ret;<br>        ::c=c;<br>        ::s=s;<br>        int n=c.size();<br>        MS0(dpc);<br>        dpc[0]=1;<br>        REP(i,501000){<br>            dpmi[i]=INF;<br>            dpma[i]=-INF;<br>        }<br>        dpmi[0]=dpma[0]=0;<br>        int sum=0;<br>        REP(i,n){<br>            int a=c[i];<br>            for(int j=sum;j&gt;=0;j--){<br>                if(dpc[j]){<br>                    dpc[j+a]+=dpc[j];<br>                    dpmi[j+a]=min(dpmi[j+a],dpmi[j]+s[i]);<br>                    dpma[j+a]=max(dpma[j+a],dpma[j]+s[i]);<br>                }<br>            }<br>            sum+=a;<br>        }<br>        int lmi=-1,lma=-1;<br>        REP1(i,0,sum){<br>            //printf("i=%d %lld %d %d\n",i,dpc[i],dpmi[i],dpma[i]);<br>            if(dpc[i]){<br>                if(dpc[i]&gt;1&amp;&amp;dpmi[i]!=dpma[i])return "Not Equivalent";<br>                if(dpmi[i]&lt;=lma)return "Not Equivalent";<br>                lmi=dpmi[i];<br>                lma=dpma[i];<br>            }<br>        }<br>        return "Equivalent";<br>    }<br><br>};<br>// vim: fdm=marker:commentstring=\ \"\ %s:autoread<br><br><br>// Powered by FileEdit<br>// Powered by CodeProcessor<br></td>