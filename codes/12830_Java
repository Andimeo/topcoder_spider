<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.Arrays;<br> <br>/**<br> * Built using CHelper plug-in<br> * Actual solution is at the top<br> */<br>public class ScoringSystems {<br>    static final int INF = (int) 1e9;<br> <br>    public String isEquivalent(int[] c, int[] s) {<br>        int max = 0;<br>        for (int x : c) max = Math.max(x, max);<br>        for (int x : s) max = Math.max(x, max);<br>        int n = c.length;<br>        int[] left = new int[2 * n * max + 1];<br>        int[] nleft = new int[2 * n * max + 1];<br>        Arrays.fill(left, INF);<br>        int[] right = new int[2 * n * max + 1];<br>        int[] nright = new int[2 * n * max + 1];<br>        Arrays.fill(right, -INF);<br>        left[n * max] = n * max;<br>        right[n * max] = n * max;<br>        for (int i = 0; i &lt; n; ++i) {<br>            System.arraycopy(left, 0, nleft, 0, left.length);<br>            System.arraycopy(right, 0, nright, 0, right.length);<br>            for (int old = 0; old &lt; left.length; ++old)<br>                if (left[old] &lt;= right[old]) {<br>                    update(nleft, nright, old - c[i], left[old] - s[i], right[old] - s[i]);<br>                    update(nleft, nright, old + c[i], left[old] + s[i], right[old] + s[i]);<br>                }<br>            int[] tmp = left;<br>            left = nleft;<br>            nleft = tmp;<br>            tmp = right;<br>            right = nright;<br>            nright = tmp;<br>        }<br>        for (int val = 0; val &lt; n * max; ++val)<br>            if (left[val] &lt;= right[val] &amp;&amp; right[val] &gt;= n * max)<br>                return "Not Equivalent";<br>        if (left[n * max] &lt;= right[n * max] &amp;&amp; (left[n * max] &lt; n * max || right[n * max] &gt; n * max))<br>            return "Not Equivalent";<br>        for (int val = n * max + 1; val &lt; left.length; ++val)<br>            if (left[val] &lt;= right[val] &amp;&amp; left[val] &lt;= n * max)<br>                return "Not Equivalent";<br>        return "Equivalent";<br>    }<br> <br>    private void update(int[] nleft, int[] nright, int at, int l, int r) {<br>        nleft[at] = Math.min(nleft[at], l);<br>        nright[at] = Math.max(nright[at], r);<br>    }<br>}<br></td>