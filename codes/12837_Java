<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.ArrayList;<br>import java.util.HashMap;<br><br>public class ColorfulRoad {<br><br>    public static int getMin(String road) {<br>        int n = road.length();<br>        char[] s = road.toCharArray();<br>        HashMap&lt;Character, Character&gt; map = new HashMap&lt;Character, Character&gt;();<br>        map.put('R', 'G');<br>        map.put('G', 'B');<br>        map.put('B', 'R');<br>        int min = Integer.MAX_VALUE;<br>        int left = (int) Math.round(Math.pow(2, n - 1));<br>        int right = (int) Math.round(Math.pow(2, n));<br>        for (int i = left; i &lt; right; i++) {<br>            String status = Integer.toBinaryString(i);<br>            if (status.charAt(status.length() - 1) == '0') {<br>                continue;<br>            }<br>            int cost = 0;<br>            int prev = 0;<br>            char prevC = 'R';<br>            boolean valid = true;<br>            for (int j = status.indexOf("1", 1); j &lt; n &amp;&amp; j &gt; 0; j = status.indexOf("1", j + 1)) {<br>                if (s[j] == map.get(prevC)) {<br>                    cost += (j - prev) * (j - prev);<br>                    prevC = s[j];<br>                    prev = j;<br>                } else {<br>                    valid = false;<br>                    break;<br>                }<br>            }<br><br>            if (valid) {<br>                min = Math.min(min, cost);<br>            }<br>        }<br>        if (min == Integer.MAX_VALUE) {<br>            return -1;<br>        }<br>        return min;<br>    }<br><br>    public static void main(String[] args) {<br>        System.out.println(getMin("RBRGBGBGGBGRGGG"));<br>    }<br>}<br></td>