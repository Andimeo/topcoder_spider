<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.List;<br>import java.util.ArrayList;<br> <br>/**<br> * Built using CHelper plug-in<br> * Actual solution is at the top<br> */<br>public class FindPolygons {<br>    static final int INF = (int) 1e9;<br> <br>    public double minimumPolygon(int L) {<br>        if (L % 2 != 0 || L &lt; 4) return -1;<br>        int res = solveTriangle(L);<br>        if (res &gt;= INF) res = (L % 4 == 0 ? 0 : 1);<br>        return res;<br>    }<br> <br>    static class IntDiag {<br>        int a;<br>        int b;<br>        int c;<br> <br>        IntDiag(int a, int b, int c) {<br>            this.a = a;<br>            this.b = b;<br>            this.c = c;<br>        }<br>    }<br> <br>    private int solveTriangle(int L) {<br>        int res = INF;<br>        List&lt;IntDiag&gt; diags = buildDiags((L - 1) / 2);<br>        for (int i = 0; i &lt; diags.size(); ++i) {<br>            IntDiag first = diags.get(i);<br>            for (int j = i; j &lt; diags.size(); ++j) {<br>                IntDiag second = diags.get(j);<br>                int rem = L - first.c - second.c;<br>                if (rem &gt; 0 &amp;&amp; first.c + second.c &gt; rem &amp;&amp; first.c + rem &gt; second.c &amp;&amp; second.c + rem &gt; first.c) {<br>                    if (<br>                            isHypot(first.a + second.a, first.b + second.b, rem) ||<br>                            isHypot(first.a - second.a, first.b + second.b, rem) ||<br>                            isHypot(first.a + second.a, first.b - second.b, rem) ||<br>                            isHypot(first.a - second.a, first.b - second.b, rem) ||<br>                            isHypot(first.a + second.b, first.b + second.a, rem) ||<br>                            isHypot(first.a - second.b, first.b + second.a, rem) ||<br>                            isHypot(first.a + second.b, first.b - second.a, rem) ||<br>                            isHypot(first.a - second.b, first.b - second.a, rem)) {<br>                        res = Math.min(res, Math.max(first.c, Math.max(second.c, rem)) - Math.min(first.c, Math.min(second.c, rem)));<br>                    }<br>                }<br>            }<br>        }<br>        return res;<br>    }<br> <br>    private boolean isHypot(int a, int b, int c) {<br>        return a * a + b * b == c * c;<br>    }<br> <br>    private List&lt;IntDiag&gt; buildDiags(int maxC) {<br>        List&lt;IntDiag&gt; res = new ArrayList&lt;IntDiag&gt;();<br>        for (int a = 0; a &lt;= maxC; ++a)<br>            for (int b = a; a * a + b * b &lt;= maxC * maxC; ++b) {<br>                int c2 = a * a + b * b;<br>                if (c2 &lt;= 0) continue;<br>                int cs = (int) Math.sqrt(c2);<br>                if (cs * cs == c2) {<br>                    res.add(new IntDiag(a, b, cs));<br>                }<br>            }<br>        return res;<br>    }<br>}<br></td>