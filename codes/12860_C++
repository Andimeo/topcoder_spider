<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;vector&gt;<br>#include &lt;list&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;deque&gt;<br>#include &lt;stack&gt;<br>#include &lt;bitset&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;functional&gt;<br>#include &lt;numeric&gt;<br>#include &lt;utility&gt;<br>#include &lt;sstream&gt;<br>#include &lt;iostream&gt;<br>#include &lt;iomanip&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;ctime&gt;<br> <br>using namespace std;<br> <br>class WinterAndPresents {<br>public:<br>  long long getNumber(vector &lt;int&gt;, vector &lt;int&gt;);<br>};<br> <br>long long WinterAndPresents::getNumber(vector &lt;int&gt; apple, vector &lt;int&gt; orange) {<br>  int n = apple.size();<br>  int small = (int)1e9;<br>  for (int i = 0; i &lt; n; i++) {<br>    int x = apple[i] + orange[i];<br>    if (x &lt; small) small = x;<br>  }<br>  long long ans = 0;<br>  for (int X = 1; X &lt;= small; X++) {<br>    int low = 0, high = 0;<br>    for (int i = 0; i &lt; n; i++) {<br>      if (X &gt; orange[i]) low += X - orange[i];<br>      if (X &lt; apple[i]) high += X;<br>      else high += apple[i];<br>    }<br>    ans += (high - low + 1);<br>  }<br>  return ans;<br>}<br> <br> <br>//Powered by [KawigiEdit] 2.0!<br></td>