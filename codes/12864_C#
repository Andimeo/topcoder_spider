<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections;<br>using System.Collections.Generic;<br>using System.Text;<br><br>public class FoxAndFencing {<br><br>    long[] m, r;<br>    string[] rr = new string[] { "Liss", "Draw", "Ciel" };<br><br>    public string WhoCanWin(int mov1, int mov2, int rng1, int rng2, int d)<br>    {<br>        m = new long[] { mov1, mov2 };<br>        r = new long[] { rng1, rng2 };<br>        int ret = dfs(d, 0, 10);<br>        if (ret == 0) return rr[0];<br>        if (ret == 2) return rr[2];<br><br>        int fast = 0;<br>        if (m[0] == m[1]) return rr[1];<br>        if (m[0] &lt; m[1]) fast = 1;<br>        int slow = 1 - fast;<br><br>        if (dfs(m[slow] + r[slow] + 1, slow, 10) == 0) return rr[2 - fast * 2];<br>        return rr[1];<br><br>    }<br><br><br>    int dfs(long d, int turn, int depth)<br>    {<br>        //Console.WriteLine(d + " " + turn + " " + depth);<br>        //Console.ReadLine();<br>        if (d &lt; 0) d = 0;<br>        if (depth == 0) return 1;<br>        if (d &lt;= m[turn] + r[turn])<br>        {<br>            return 2;<br>        }<br><br>        int ret = 0;<br>        int enemy = 1 - turn;<br><br>        ret = Math.Max(ret, 2 - dfs(d + m[turn], enemy, depth - 1));<br>        ret = Math.Max(ret, 2 - dfs(d - m[turn], enemy, depth - 1));<br><br>        if (Math.Abs(m[enemy] + r[enemy] + 1 - d) &lt;= m[turn])<br>        {<br>            ret = Math.Max(ret, 2 - dfs(m[enemy] + r[enemy] + 1, enemy, depth - 1));<br>        }<br>        return ret;<br>    }<br><br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003] Modified for C# by ysn<br>// Powered by CodeProcessor<br></td>