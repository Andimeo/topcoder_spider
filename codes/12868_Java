<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.Set;<br>import java.util.Arrays;<br>import java.util.HashSet;<br> <br>/**<br> * Built using CHelper plug-in<br> * Actual solution is at the top<br> */<br>public class SimilarNames {<br>    int cnt;<br>    int[] prefix;<br>    int n;<br>    boolean[][] graph;<br> <br>    static final int MODULO = (int) (1e9 + 7);<br> <br>    public int count(String[] names, int[] info1, int[] info2) {<br>        Set&lt;Integer&gt; allInfo = new HashSet&lt;Integer&gt;();<br>        for (int x : info1) allInfo.add(x);<br>        for (int x : info2) allInfo.add(x);<br>        cnt = allInfo.size();<br>        int[] all = new int[cnt];<br>        cnt = 0;<br>        for (int x : allInfo)<br>            all[cnt++] = x;<br>        if (cnt != all.length) throw new RuntimeException();<br>        Arrays.sort(all);<br>        prefix = new int[cnt];<br>        for (int i = 0; i &lt; info1.length; ++i) {<br>            int p1 = Arrays.binarySearch(all, info1[i]);<br>            int p2 = Arrays.binarySearch(all, info2[i]);<br>            prefix[p1] |= 1 &lt;&lt; p2;<br>        }<br>        n = names.length + 1;<br>        graph = new boolean[n][n];<br>        for (int i = 0; i &lt; n - 1; ++i) {<br>            graph[0][i + 1] = true;<br>        }<br>        for (int i = 0; i &lt; n - 1; ++i) {<br>            for (int j = 0; j &lt; n - 1; ++j)<br>                if (i != j &amp;&amp; names[j].startsWith(names[i])) {<br>                    graph[0][j + 1] = false;<br>                    graph[i + 1][j + 1] = true;<br>                    for (int k = 0; k &lt; n - 1; ++k)<br>                        if (k != i &amp;&amp; k != j &amp;&amp; names[j].startsWith(names[k]) &amp;&amp; names[k].startsWith(names[i]))<br>                            graph[i + 1][j + 1] = false;<br>                }<br>        }<br>        int[] res = get(0);<br>        int ret = res[(1 &lt;&lt; cnt) - 1];<br>        for (int i = 1; i &lt;= names.length - cnt; ++i)<br>            ret = (int) (ret * (long) i % MODULO);<br>        return ret;<br>    }<br> <br>    private int[] get(int at) {<br>        int totalSets = 1 &lt;&lt; cnt;<br>        int[] res = new int[totalSets];<br>        res[0] = 1;<br>        for (int child = 0; child &lt; n; ++child)<br>            if (graph[at][child]) {<br>                int[] cres = get(child);<br>                for (int set = totalSets - 1; set &gt;= 0; --set)<br>                    if (res[set] != 0) {<br>                        for (int oset = 0; oset &lt; totalSets; oset = ((oset | set) + 1) &amp; (~set)) {<br>                            if (oset != 0 &amp;&amp; cres[oset] != 0) {<br>                                res[set | oset] = (int) ((res[set | oset] + res[set] * (long) cres[oset]) % MODULO);<br>                            }<br>                        }<br>                    }<br>            }<br>        if (at &gt; 0) {<br>            for (int set = totalSets - 1; set &gt;= 0; --set) {<br>                for (int what = 0; what &lt; cnt; ++what) {<br>                    if ((set &amp; (1 &lt;&lt; what)) == 0 &amp;&amp; (set &amp; prefix[what]) == prefix[what]) {<br>                        res[set | (1 &lt;&lt; what)] = (res[set | (1 &lt;&lt; what)] + res[set]) % MODULO;<br>                    }<br>                }<br>            }<br>        }<br>        return res;<br>    }<br>}<br></td>