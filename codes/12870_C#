<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections;<br>using System.Collections.Generic;<br>using System.Collections.Specialized;<br>using System.Text;<br>using System.Text.RegularExpressions;<br> <br>public class BigFatInteger2<br>{<br>  const int lim = 35000;<br>  bool[] isPrime = new bool[lim];<br> <br>  public string isDivisible(int A, int B, int C, int D)<br>  {<br>    for (int i = 2; i &lt; lim; i++)<br>      isPrime[i] = true;<br> <br>    for (int i = 2; i &lt; lim; i++)<br>      if (isPrime[i])<br>        for (int j = i + i; j &lt; lim; j += i)<br>          isPrime[j] = false;<br> <br>    Dictionary&lt;int, long&gt; a = fact(A);<br>    Dictionary&lt;int, long&gt; c = fact(C);<br>    foreach (int k in keys(a.Keys))<br>    {<br>      a[k] = a[k] * B;<br>    }<br> <br>    foreach (int k in keys(c.Keys))<br>    {<br>      c[k] = c[k] * D;<br>    }<br> <br>    foreach (int k in keys(c.Keys))<br>    {<br>      if (!a.ContainsKey(k) || c[k] &gt; a[k])<br>        return "not divisible";<br>    }<br> <br>    return "divisible";<br>  }<br> <br>  int[] keys(Dictionary&lt;int, long&gt;.KeyCollection col)<br>  {<br>    List&lt;int&gt; r = new List&lt;int&gt;();<br>    foreach (var k in col)<br>      r.Add(k);<br>    return r.ToArray();<br>  }<br> <br>  Dictionary&lt;int, long&gt; fact(int x)<br>  {<br>    Dictionary&lt;int, long&gt; res = new Dictionary&lt;int, long&gt;();<br> <br>    for (int i = 2; i &lt; lim; i++)<br>      if (isPrime[i])<br>      {<br>        while (x % i == 0)<br>        {<br>          if (!res.ContainsKey(i))<br>            res.Add(i, 1);<br>          else<br>            res[i] = res[i] + 1;<br> <br>          x /= i;<br>        }<br>      }<br>    if (x != 1)<br>    {<br>      if (!res.ContainsKey(x))<br>        res.Add(x, 1);<br>      else<br>        res[x] = res[x] + 1;<br>    }<br>    return res;<br>  }<br> <br> <br>}<br>//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!<br></td>