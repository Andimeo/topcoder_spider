<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;vector&gt;<br>#include &lt;string&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;iostream&gt;<br> <br>#define MAXN 3000<br> <br>using namespace std;<br> <br>string A,B,C;<br>int lcs[MAXN][MAXN][2];<br>int endA[MAXN];<br>int endB[MAXN];<br> <br>int min_start(string &amp;s1, string &amp;s2, int e){<br>    int i,j;<br> <br>    j = (int)s2.length()-1;<br> <br> <br>    for(i = e; i &gt;= 0; --i){<br>        if(s1[i] != s2[j]) continue;<br>        --j;<br>        if(j &lt; 0) break;<br>    }<br> <br>    if(j &gt;= 0) return -1;<br>    return i;<br>}<br> <br>void init(){<br>    int i;<br> <br>    for(i = 0; i &lt; A.length(); ++i){<br>        if(A[i] != C[C.length()-1]){<br>            endA[i] = -1;<br>            continue;<br>        }<br>        endA[i] = min_start(A,C,i);<br>    }<br> <br>    for(i = 0; i &lt; B.length(); ++i){<br>        if(B[i] != C[C.length()-1]){<br>            endB[i] = -1;<br>            continue;<br>        }<br>        endB[i] = min_start(B,C,i);<br>    }<br> <br>}<br> <br>int DP(){<br>    int i,j,b;<br> <br>    for(i = 1; i &lt;= A.size(); ++i){<br>        for(j = 1; j &lt;= B.size(); ++j){<br>            for(b = 0; b &lt; 2; ++b){<br>                lcs[i][j][b] = max(lcs[i-1][j][b],lcs[i][j-1][b]);<br>                if(A[i-1] == B[j-1] &amp;&amp; !b){<br>                    lcs[i][j][b] = max(lcs[i][j][b],lcs[i-1][j-1][b]+1);<br>                }<br>                if(b &amp;&amp; endA[i-1] &gt;= 0 &amp;&amp; endB[j-1] &gt;= 0){<br>                    lcs[i][j][b] = max(lcs[i][j][b],lcs[endA[i-1]][endB[j-1]][0]+(int)C.length());<br>                }<br>                if(b &amp;&amp; lcs[i-1][j-1][b] &amp;&amp; A[i-1] == B[j-1]){<br>                    lcs[i][j][b] = max(lcs[i][j][b],lcs[i-1][j-1][b]+1);<br>                }<br>            }<br>        }<br>    }<br> <br>    return lcs[A.size()][B.size()][1];<br>}<br> <br>class WinterAndReindeers{<br>public:<br>    int getNumber(vector&lt;string&gt; allA, vector&lt;string&gt; allB, vector&lt;string&gt; allC){<br>        int i;<br> <br>        for(i = 0; i &lt; allA.size(); ++i){<br>            A.append(allA[i]);<br>        }<br> <br>        for(i =0 ; i &lt; allB.size(); ++i){<br>            B.append(allB[i]);<br>        }<br> <br>        for(i = 0; i &lt; allC.size(); ++i){<br>            C.append(allC[i]);<br>        }<br> <br>        init();<br> <br>        return DP();<br>    }<br>};<br></td>