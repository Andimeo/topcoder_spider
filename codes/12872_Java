<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.Arrays;<br>import java.util.Vector;<br><br>public class WinterAndReindeers {<br><br>  public int getNumber(String[] allA, String[] allB, String[] allC) {<br>    String sa = "";<br>    String sb = "";<br>    String sc = "";<br>    <br>    for(String a: allA)<br>      sa += a;<br>    <br>    for(String b: allB)<br>      sb += b;<br>    <br>    for(String c: allC)<br>      sc += c;<br>    <br>    final int an = sa.length();<br>    final int bn = sb.length();<br>    final int cn = sc.length();<br>    <br>    char[] A = sa.toCharArray();<br>    char[] B = sb.toCharArray();<br>    char[] C = sc.toCharArray();<br>    <br>    Vector&lt;Integer&gt; foundA = findAll(A, C, an, cn);<br>    <br>    Vector&lt;Integer&gt; foundB = findAll(B, C, bn, cn);<br>    <br>    int[][] dpForward = new int[an+1][bn+1];<br>    <br>    for(int i=1; i&lt;=an; i++) {<br>      for(int j=1; j&lt;=bn; j++) {<br>        if(A[i-1] == B[j-1]) {<br>          dpForward[i][j] = dpForward[i-1][j-1] + 1;<br>        } else {<br>          dpForward[i][j] = Math.max(dpForward[i-1][j], dpForward[i][j-1]);<br>        }<br>      }<br>    }<br>    <br>    int[][] dpReverse = new int[an+1][bn+1];<br>    <br>    for(int i=an-1; i&gt;=0; i--) {<br>      for(int j=bn-1; j&gt;=0; j--) {<br>        if(A[i] == B[j]) {<br>          dpReverse[i][j] = dpReverse[i+1][j+1] + 1;<br>        } else {<br>          dpReverse[i][j] = Math.max(dpReverse[i+1][j], dpReverse[i][j+1]);<br>        }<br>      }<br>    }<br>    <br>    int max = 0;<br>    <br>    for(int i=0; i&lt;foundA.size(); i+=2) {<br>      for(int j=0; j&lt;foundB.size(); j+=2) {<br>        int fa1 = foundA.get(i);<br>        int fa2 = foundA.get(i+1);<br>        int fb1 = foundB.get(j);<br>        int fb2 = foundB.get(j+1);<br>        max = Math.max(max, cn + dpForward[fa1][fb1] + dpReverse[fa2][fb2]);<br>      }<br>    }<br>    <br>    System.out.println(foundA);<br>    System.out.println(foundB);<br>    System.out.println();<br>    return max;<br>  }<br>  <br>  public Vector&lt;Integer&gt; findAll(char[] S, char[] C, final int sn, final int cn) {<br>    Vector&lt;Integer&gt; found = new Vector&lt;Integer&gt;();<br>    <br>    for(int i=0; i&lt;sn; i++) {<br>      if(S[i]==C[0]) {<br>        int temp = substring(S, C, sn, cn, i+1);<br>        if(temp!=-1) {<br>          found.add(i);<br>          found.add(temp);<br>        }<br>      }<br>    }<br>    <br>    return found;<br>  }<br><br>  public int substring(char[] S, char[] C, final int sn, final int cn, int i) {<br>    int count = 1;<br><br>    for(; i&lt;sn &amp;&amp; count&lt;cn; i++) {<br>      if(S[i]==C[count]) {<br>        count++;<br>      }<br>      if(sn-i &lt; cn-count) {<br>        return -1;<br>      }<br>    }<br>    <br>    if(count&lt;cn) return -1;<br>    <br>    return i;<br>  }<br>}<br></td>