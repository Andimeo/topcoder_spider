<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>import static java.lang.Math.*;<br>import static java.util.Arrays.*;<br> <br>public class PalindromeMatrix {<br>  <br>  int INF = 1 &lt;&lt; 29;<br>  <br>  public int minChange(String[] A, int rowCount, int columnCount) {<br>    int[] num = new int[16];<br>    for (int i = 0; i &lt; 16; i++) num[i] = Integer.bitCount(i);<br>    int n = A.length, m = A[0].length();<br>    char[][] cs = new char[n][];<br>    for (int i = 0; i &lt; n; i++) cs[i] = A[i].toCharArray();<br>    debug(n, m);<br>    int res = Integer.MAX_VALUE;<br>    for (int i = 0; i &lt; 1 &lt;&lt; m; i++) if (Integer.bitCount(i) &gt;= columnCount) {<br>      int[] dp = new int[rowCount + 1];<br>      fill(dp, INF);<br>      dp[0] = 0;<br>      for (int j = 0; j &lt; n / 2; j++) {<br>        int[] crt = new int[4], next = new int[4];<br>        for (int k = 0; k &lt; m / 2; k++) {<br>          fill(next, INF);<br>          for (int s = 0; s &lt; 16; s++) {<br>            boolean a = (cs[j][k] == '0') ^ ((s &gt;&gt; 0 &amp; 1) != 0);<br>            boolean b = (cs[j][m - k - 1] == '0') ^ ((s &gt;&gt; 1 &amp; 1) != 0);<br>            boolean c = (cs[n - j - 1][k] == '0') ^ ((s &gt;&gt; 2 &amp; 1) != 0);<br>            boolean d = (cs[n - j - 1][m - k - 1] == '0') ^ ((s &gt;&gt; 3 &amp; 1) != 0);<br>            if ((i &gt;&gt; k &amp; 1) != 0 &amp;&amp; a != c) continue;<br>            if ((i &gt;&gt; (m - k - 1) &amp; 1) != 0 &amp;&amp; b != d) continue;<br>            int f = 0;<br>            if (a != b) f |= 1;<br>            if (c != d) f |= 2;<br>            for (int h = 0; h &lt; 4; h++) {<br>              if (next[h | f] &gt; crt[h] + num[s]) {<br>                next[h | f] = crt[h] + num[s];<br>              }<br>            }<br>          }<br>          int[] tmp = crt; crt = next; next = tmp;<br>        }<br>        int[] dp2 = new int[rowCount + 1];<br>        fill(dp2, INF);<br>        for (int k = 0; k &lt;= rowCount; k++) {<br>          for (int h = 0; h &lt; 4; h++) {<br>            int k2 = min(rowCount, k + 2 - num[h]);<br>            dp2[k2] = min(dp2[k2], dp[k] + crt[h]);<br>          }<br>        }<br>        dp = dp2;<br>      }<br>      res = min(res, dp[rowCount]);<br>    }<br>    debug(res);<br>    return res;<br>  }<br>  <br>  void debug(Object...os) {<br>    System.err.println(deepToString(os));<br>  }<br>  <br>}<br></td>