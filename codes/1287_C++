<td class="problemText" colspan="8" valign="middle" align="left">
            #ifdef WIN32<br>#pragma warning(disable:4786 4503)<br>#endif<br>#include &lt;algorithm&gt;<br>#include &lt;functional&gt;<br>#include &lt;iostream&gt;<br>#include &lt;list&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;sstream&gt;<br>#include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdarg&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cstring&gt;<br>using namespace std;<br>#ifdef WIN32<br>#define min _cpp_min<br>#define max _cpp_max<br>#define i64 __int64<br>#define u64 unsigned __int64<br>#else<br>#define i64 long long<br>#define u64 unsigned long long<br>#endif<br>#define all(x) (x).begin(), (x).end()<br>typedef vector&lt;int&gt; vi;<br>typedef vector&lt;vi&gt; vvi;<br>typedef vector&lt;string&gt; vs;<br>typedef vector&lt;vs&gt; vvs;<br>typedef set&lt;int&gt; si;<br>typedef set&lt;string&gt; ss;<br>typedef set&lt;char&gt; sc;<br>typedef pair&lt;int,int&gt; pii;<br>#ifdef WIN32<br>#include &lt;conio.h&gt;<br>#include "..\\utils\\debug.cpp"<br>#endif<br><br>#include &lt;stdarg.h&gt;<br><br>template &lt;class T&gt; ostream &amp;operator &lt;&lt; (ostream &amp;out, const vector&lt;T&gt; &amp;a);<br>template &lt;class T&gt; void print(const T &amp;a);<br>template &lt;class Ta, class Tb&gt; bool eq(const Ta &amp;a, const Tb &amp;b);<br>vector&lt;int&gt; mkvecint(int n, ...);<br>vector&lt;string&gt; mkvecstring(int n, ...);<br><br><br>class fraction<br>{<br>private:<br>  i64 num,den;<br>public:<br>  static i64 gcd(i64 a,i64 b)<br>  {<br>    if(a&lt;0)<br>      a=-a;<br>    if(b&lt;0)<br>      b=-b;<br>    while(a&gt;0 &amp;&amp; b&gt;0)<br>      if(a&gt;b)<br>        a=a%b;<br>      else<br>        b=b%a;<br>    return a+b;<br>  }<br>  fraction():num(0),den(1)<br>  {<br>  }<br>  fraction(i64 _num):num(_num),den(1)<br>  {<br>  }<br>  fraction(i64 _num,i64 _den):num(_num),den(_den)<br>  {<br>    if(den&lt;0)<br>    {<br>      num=-num;<br>      den=-den;<br>    }<br>    if(den&gt;1)<br>    {<br>      i64 d=gcd(num,den);<br>      num/=d;<br>      den/=d;<br>    }<br>  }<br>  i64 getnum() const<br>  {<br>    return num;<br>  }<br>  i64 getden() const<br>  {<br>    return den;<br>  }<br>  fraction operator+(const fraction&amp; x) const<br>  {<br>    return fraction(num*x.den+den*x.num,den*x.den);<br>  }<br>  fraction operator-(const fraction&amp; x) const<br>  {<br>    return fraction(num*x.den-den*x.num,den*x.den);<br>  }<br>  fraction operator*(const fraction&amp; x) const<br>  {<br>    return fraction(num*x.num,den*x.den);<br>  }<br>  fraction operator/(const fraction&amp; x) const<br>  {<br>    return fraction(num*x.den,den*x.num);<br>  }<br>  void operator+=(const fraction&amp; x)<br>  {<br>    (*this)=(*this)+x;<br>  }<br>  void operator-=(const fraction&amp; x)<br>  {<br>    (*this)=(*this)-x;<br>  }<br>  void operator*=(const fraction&amp; x)<br>  {<br>    (*this)=(*this)*x;<br>  }<br>  void operator/=(const fraction&amp; x)<br>  {<br>    (*this)=(*this)/x;<br>  }<br>  fraction operator-() const<br>  {<br>    return fraction(-num,den);<br>  }<br>  bool operator==(const fraction&amp; x) const<br>  {<br>    return num==x.num &amp;&amp; den==x.den;<br>  }<br>  bool operator!=(const fraction&amp; x) const<br>  {<br>    return num!=x.num || den!=x.den;<br>  }<br>  bool operator&lt;(const fraction&amp; x) const<br>  {<br>    return num*x.den&lt;den*x.num;<br>  }<br>  bool operator&lt;=(const fraction&amp; x) const<br>  {<br>    return num*x.den&lt;=den*x.num;<br>  }<br>  bool operator&gt;(const fraction&amp; x) const<br>  {<br>    return num*x.den&gt;den*x.num;<br>  }<br>  bool operator&gt;=(const fraction&amp; x) const<br>  {<br>    return num*x.den&gt;=den*x.num;<br>  }<br>};<br><br>fraction fabs(const fraction&amp; x)<br>{<br>  if(x&lt;0)<br>    return -x;<br>  else<br>    return x;<br>}<br><br>ostream&amp; operator&lt;&lt;(ostream&amp; o,const fraction&amp; x)<br>{<br>  o&lt;&lt;x.getnum()&lt;&lt;"/"&lt;&lt;x.getden();<br>  return o;<br>}<br><br>class Ordered<br>{<br>public:<br>  string getType(vector&lt;int&gt; a)<br>  {<br>    int i,n=a.size();<br>    fraction mean=0;<br>    for(i=0;i&lt;n;i++)<br>      mean+=a[i];<br>    mean/=n;<br>    int freq=0;<br>    for(i=0;i&lt;n;i++)<br>      freq=max(freq,count(all(a),a[i]));<br>    ostringstream str;<br>    for(i=0;i+1&lt;n;i++)<br>      if(a[i]&gt;=a[i+1])<br>        goto next;<br>    str&lt;&lt;"ASCENDING "&lt;&lt;mean;<br>    return str.str();<br>next:;<br>    for(i=0;i+1&lt;n;i++)<br>      if(a[i]&lt;=a[i+1])<br>        goto next2;<br>    str&lt;&lt;"DESCENDING "&lt;&lt;mean;<br>    return str.str();<br>next2:;<br>    for(i=0;i+1&lt;n;i++)<br>      if(a[i]&gt;a[i+1])<br>        goto next3;<br>    str&lt;&lt;"NONDESCENDING "&lt;&lt;freq;<br>    return str.str();<br>next3:;<br>    for(i=0;i+1&lt;n;i++)<br>      if(a[i]&lt;a[i+1])<br>        goto next4;<br>    str&lt;&lt;"NONASCENDING "&lt;&lt;freq;<br>    return str.str();<br>next4:;<br>    return "NOTHING";<br>  }<br>  static bool fmain;<br>static void main(){<br>  if(fmain) return;<br>  fmain = true;<br>  validateExample("1", (new Ordered())-&gt;getType(mkvecint(4,1,2,4,11)), "ASCENDING 9/2", "getType(mkvecint(4,1,2,4,11))");<br>  validateExample("2", (new Ordered())-&gt;getType(mkvecint(6,1,2,2,2,3,4)), "NONDESCENDING 3", "getType(mkvecint(6,1,2,2,2,3,4))");<br>  validateExample("3", (new Ordered())-&gt;getType(mkvecint(3,6,5,1)), "DESCENDING 4/1", "getType(mkvecint(3,6,5,1))");<br>  validateExample("4", (new Ordered())-&gt;getType(mkvecint(5,5,5,4,4,1)), "NONASCENDING 2", "getType(mkvecint(5,5,5,4,4,1))");<br>  validateExample("5", (new Ordered())-&gt;getType(mkvecint(5,1,2,3,4,1)), "NOTHING", "getType(mkvecint(5,1,2,3,4,1))");<br>  validateExample("6", (new Ordered())-&gt;getType(mkvecint(3,1000,999,998)), "DESCENDING 999/1", "getType(mkvecint(3,1000,999,998))");<br>  validateExample("7", (new Ordered())-&gt;getType(mkvecint(6,999,1000,1000,1000,1000,1000)), "NONDESCENDING 5", "getType(mkvecint(6,999,1000,1000,1000,1000,1000))");<br>  validateExample("8", (new Ordered())-&gt;getType(mkvecint(6,1,1000,1,1000,1,1000)), "NOTHING", "getType(mkvecint(6,1,1000,1,1000,1,1000))");<br>  validateExample("9", (new Ordered())-&gt;getType(mkvecint(50,1,2,3,4,5,6,7,8,9,10, 11,12,13,14,15,16,17,18,19,20, 21,22,23,24,25,26,27,28,29,30, 31,32,33,34,35,36,37,38,39,40, 41,42,43,44,45,46,47,48,49,51)), "ASCENDING 638/25", "getType(mkvecint(50,1,2,3,4,5,6,7,8,9,10, 11,12,13,14,15,16,17,18,19,20, 21,22,23,24,25,26,27,28,29,30, 31,32,33,34,35,36,37,38,39,40, 41,42,43,44,45,46,47,48,49,51))");<br>  validateExample("10", (new Ordered())-&gt;getType(mkvecint(3,2,2,1)), "NONASCENDING 2", "getType(mkvecint(3,2,2,1))");<br>  validateExample("11", (new Ordered())-&gt;getType(mkvecint(3,1,2,2)), "NONDESCENDING 2", "getType(mkvecint(3,1,2,2))");<br>}<br>  static void validateExample(string exampleNum, string returned, string expected, string methodInvocation) {<br>    print(exampleNum);<br>    print("  ");<br>    if (!eq(returned,expected)) {<br>      print("FAIL");<br>    } else {<br>      print("SUCCESS");<br>    }<br>    print(" ");  <br>    print(methodInvocation);<br>    print("\tGot:[");<br>    print(returned);<br>    print("]\t");<br>    print("Expected:[");<br>    print(expected);<br>    print("]");<br>    print("\n");<br>  }<br><br><br>};<br><br>bool Ordered::fmain = false;<br><br>template &lt;class T&gt; ostream &amp;operator &lt;&lt; (ostream &amp;out, const vector&lt;T&gt; &amp;a){<br>  int s = a.size();<br>  for(int i=0; i&lt;s-1; i++)<br>    out &lt;&lt; a[i] &lt;&lt; ",";<br>  if(s&gt;0)<br>    out &lt;&lt; a[s-1];<br>  return out;<br>}<br><br>template &lt;class T&gt; void print(const T &amp;a){<br>  cout &lt;&lt; a;<br>}<br><br>template &lt;class Ta, class Tb&gt; bool eq(const Ta &amp;a, const Tb &amp;b){<br>  return (a==b);<br>}<br><br>vector&lt;int&gt; mkvecint(int n, ...){<br>  vector&lt;int&gt; v(0);<br>  va_list vl;<br>  va_start(vl, n);<br>  for(int i=0; i&lt;n; i++){<br>    int t = va_arg(vl, int);<br>    v.push_back(t);<br>  }<br>  va_end(vl);<br>  return v;<br>}<br><br>vector&lt;string&gt; mkvecstring(int n, ...){<br>  vector&lt;string&gt; v(0);<br>  va_list vl;<br>  va_start(vl, n);<br>  for(int i=0; i&lt;n; i++){<br>    char *t = va_arg(vl, char *);<br>    v.push_back(t);<br>  }<br>  va_end(vl);<br>  return v;<br>}<br><br><br>#ifdef WIN32<br>void main()<br>{<br>  Ordered::main();<br>}<br>#endif<br> <br>// Powered by CodeProcessor<br></td>