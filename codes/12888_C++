<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;vector&gt;<br>#include &lt;list&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;deque&gt;<br>#include &lt;stack&gt;<br>#include &lt;bitset&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;functional&gt;<br>#include &lt;numeric&gt;<br>#include &lt;utility&gt;<br>#include &lt;sstream&gt;<br>#include &lt;iostream&gt;<br>#include &lt;iomanip&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;ctime&gt;<br> <br>using namespace std;<br> <br>class ORSolitaire {<br>public:<br>  int getMinimum(vector &lt;int&gt;, int);<br>};<br> <br>int ORSolitaire::getMinimum(vector &lt;int&gt; numbers, int goal) {<br>  vector &lt;int&gt; nn;<br>  for (int i = 0; i &lt; numbers.size(); i++)<br>  {<br>    bool bad = false;<br>    for (int j = 0; j &lt; 30; j++)<br>      if (numbers[i] &amp; (1 &lt;&lt; j))<br>        if (!(goal &amp; (1 &lt;&lt; j)))<br>          bad = true;<br>    <br>    if (!bad)<br>      nn.push_back (numbers[i]);<br>  }<br>  <br>  int ans = 1000;<br>  for (int i = 0; i &lt; 30; i++)<br>    if (goal &amp; (1 &lt;&lt; i))<br>    {<br>      int cnt = 0;<br>      for (int j = 0; j &lt; nn.size(); j++)<br>        if (nn[j] &amp; (1 &lt;&lt; i))<br>          cnt++;<br>      ans = min (ans, cnt);<br>    }<br>  return ans;<br>}<br> <br> <br>//Powered by [KawigiEdit] 2.0!<br></td>