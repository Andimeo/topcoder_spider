<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;iostream&gt;<br>#include &lt;stdio.h&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;string&gt;<br>#include &lt;string.h&gt;<br>#include &lt;sstream&gt;<br>#include &lt;math.h&gt;<br>#include &lt;cmath&gt;<br>#include &lt;stack&gt;<br>#include &lt;queue&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;vector&gt;<br>#include &lt;list&gt;<br>#include &lt;bitset&gt;<br>#include &lt;complex&gt;<br>#include &lt;functional&gt;<br>#include &lt;deque&gt;<br>#include &lt;iomanip&gt;<br>using namespace std;<br><br>typedef vector&lt;int&gt; vi;<br>#define L(s) (int)((s).size())<br>#define INF ((1&lt;&lt;30)-1)<br><br>class ORSolitaireDiv2 {<br>public:<br>  int getMinimum(vector &lt;int&gt; N, int G) {<br>    vi a;<br>    for (int i = 0; i &lt; L(N); ++i)<br>      if (!(N[i] &amp; (~G)))<br>        a.push_back(N[i]);<br>    int n = L(a);<br>    int Min = INF;<br>    int X = (1 &lt;&lt; n);<br>    for (int BM = 0; BM &lt; X; ++BM) {<br>      int OR = 0, count = 0;<br>      for (int j = 0; j &lt; n; ++j)<br>        if ((BM &gt;&gt; j) % 2)<br>          OR |= a[j];<br>        else<br>          ++count;<br>      if (OR != G)<br>        if (count &lt; Min)<br>          Min = count;<br>    }<br>    return Min;<br>  }<br>};<br></td>