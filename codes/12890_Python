<td class="problemText" colspan="8" valign="middle" align="left">
            import sys<br><br>class ORSolitaireDiv2:<br><br>  def divide(self, n):<br>    d = []<br>    while n &gt; 0:<br>      d.append(n % 2)<br>      n = n // 2<br>    return d<br><br>  def getMinimum(self, numbers, goal):<br>    dgoal = self.divide(goal)<br>    dcnt  = [0] * len(dgoal)<br>    <br>    #print dgoal<br>    <br>    for n in numbers:<br>      dn = self.divide(n)<br>      fit = True<br>      #print n, dn<br>      for i in range(len(dn)):<br>        if i &gt;= len(dgoal) and dn[i] == 1:<br>          fit = False<br>        elif i &lt; len(dgoal):<br>          if dn[i] == 1 and dgoal[i] == 0:<br>            fit = False<br>      <br>      #print fit<br>      if fit:<br>        for i in range(len(dgoal)):<br>          if i &lt; len(dn):<br>            if dgoal[i] == 1 and dn[i] == 1:<br>              dcnt[i] = dcnt[i] + 1<br>          <br>      #print dcnt<br>      <br>    m = len(numbers)<br>    for i in range(len(dcnt)):<br>      if dgoal[i] == 1:<br>        m = min(dcnt[i], m)<br>        <br>    return m<br></td>