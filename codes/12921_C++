<td class="problemText" colspan="8" valign="middle" align="left">
            #line 2 "FamilyCrest.cpp"<br>#include &lt;iostream&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cstring&gt;<br>#include &lt;memory.h&gt;<br>#include &lt;cassert&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;cmath&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;bitset&gt;<br>#include &lt;string&gt;<br>#include &lt;vector&gt;<br>using namespace std;<br> <br>typedef long long llong;<br>#define eprintf(...) (fprintf(stderr, __VA_ARGS__), fflush(stderr));<br> <br>typedef long double ldouble;<br> <br>struct vt<br>{<br>    ldouble x, y;<br>    vt(ldouble _x, ldouble _y)<br>    {<br>        x = _x, y = _y;<br>    }<br>    friend vt operator +(vt a, vt b)<br>    {<br>        return vt(a.x + b.x, a.y + b.y);<br>    }<br>    friend ldouble operator ^(vt a, vt b)<br>    {<br>        return a.x * b.y - b.x * a.y;<br>    }<br>    friend ldouble operator *(vt a, vt b)<br>    {<br>        return a.x * b.x + a.y * b.y;<br>    }<br>    friend vt operator -(vt a, vt b)<br>    {<br>        return vt(a.x - b.x, a.y - b.y);<br>    }<br>    friend bool operator &lt;(vt a, vt b)<br>    {<br>        return atan2l(a.y, a.x) &lt; atan2l(b.y, b.x);<br>    }<br>    friend vt operator ~(vt a)<br>    {<br>        return vt(a.y, -a.x);<br>    }<br>    friend vt operator *(vt a, ldouble k)<br>    {<br>        return vt(a.x * k, a.y * k);<br>    }<br>    vt norm()<br>    {<br>        ldouble d = sqrtl(x * x + y * y);<br>        return vt(x / d, y / d);<br>    }<br>};<br> <br>const ldouble eps1 = 3e-5;<br>const ldouble eps2 = 1e-11;<br> <br>inline int sign(double x)<br>{<br>    return (x &gt; eps2) ? 1 : (x &lt; -eps2) ? -1 : 0;<br>}<br> <br>inline bool inter(vt a, vt b, vt c, vt d)<br>{<br>    return sign((a - c) ^ (d - c)) * sign((b - c) ^ (d - c)) &lt;= 0 &amp;&amp; sign((c - a) ^ (b - a)) * sign((d - a) ^ (b - a)) &lt;= 0;<br>}<br> <br>bool shift(vector&lt;pair&lt;vt, vt&gt; &gt; A, vt d)<br>{<br>    for (int i = 0; i &lt; A.size(); i++)<br>        for (int j = 0; j &lt; A.size(); j++)<br>        {<br>            if (inter(A[i].first, A[i].second, A[j].first + d, A[j].second + d))<br>                return false;<br>        }<br>    return true;<br>}<br> <br>class FamilyCrest {<br>  public:<br>  string canBeInfinite(vector &lt;int&gt; A, vector &lt;int&gt; B, vector &lt;int&gt; C, vector &lt;int&gt; D) {<br>    vector&lt;vt&gt; I;<br>        I.push_back(vt(1, 0));<br>        I.push_back(~I.back());<br>        I.push_back(~I.back());<br>        I.push_back(~I.back());<br>        vector&lt;pair&lt;vt, vt&gt; &gt; S;<br>        int n = A.size();<br>        for (int i = 0; i &lt; n; i++)<br>            S.push_back(make_pair(vt(A[i], B[i]), vt(C[i], D[i])));<br>        for (int i = 0; i &lt; n; i++)<br>        {<br>            I.push_back((S[i].second - S[i].first).norm());<br>            I.push_back(~I.back());<br>            I.push_back(~I.back());<br>            I.push_back(~I.back());<br>        }<br>        sort(I.begin(), I.end());<br>        for (int i = 0; i &lt; I.size(); i++)<br>        {<br>            vt v = I[i] + I[(i + 1 == I.size()) ? 0 : i + 1];<br>            v = v.norm() * eps1;<br>            if (shift(S, v))<br>            {<br>                eprintf("%.3Lf %.3Lf\n", v.x, v.y);<br>                return "Infinite";<br>            }<br>        }<br>        return "Finite";<br>  }<br>};<br> <br> <br> <br> <br>// Powered by FileEdit<br>// Powered by moj 4.18 [modified TZTester]<br>// Powered by CodeProcessor<br></td>