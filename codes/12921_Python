<td class="problemText" colspan="8" valign="middle" align="left">
            import math,string,itertools,fractions,heapq,collections,re,array,bisect<br> <br>MED = 2 ** 60<br>MAX = MED * MED<br> <br>def sp (x0, y0, x1, y1, x2, y2):<br>  return (x1 - x0) * (x2 - x0) + (y1 - y0) * (y2 - y0)<br> <br>def vp (x0, y0, x1, y1, x2, y2):<br>  return (x1 - x0) * (y2 - y0) - (x2 - x0) * (y1 - y0)<br> <br>def intersect (x1, y1, x2, y2, x3, y3, x4, y4):<br>  p1 = vp (x1, y1, x2, y2, x3, y3)<br>  q1 = vp (x1, y1, x2, y2, x4, y4)<br>  if (p1 == 0) and (q1 == 0):<br>    return (sp (x1, y1, x2, y2, x3, y3) &lt;= 0) or \<br>           (sp (x1, y1, x2, y2, x4, y4) &lt;= 0) or \<br>           (sp (x3, y3, x4, y4, x1, y1) &lt;= 0) or \<br>           (sp (x3, y3, x4, y4, x2, y2) &lt;= 0)<br>  p2 = vp (x3, y3, x4, y4, x1, y1)<br>  q2 = vp (x3, y3, x4, y4, x2, y2)<br>  return (p1 * q1 &lt;= 0) and (p2 * q2 &lt;= 0)<br> <br>xa = []<br>ya = []<br>xb = []<br>yb = []<br>xc = []<br>yc = []<br>xd = []<br>yd = []<br>xu = []<br>yu = []<br>xv = []<br>yv = []<br>dx = []<br>dy = []<br>n = []<br> <br>def go (ddx, ddy):<br>  global xa, ya, xb, yb, xc, yc, xd, yd, xu, yu, xv, yv, dx, dy, n<br>  xc = [t + ddx for t in xu]<br>  yc = [t + ddy for t in yu]<br>  xd = [t + ddx for t in xv]<br>  yd = [t + ddy for t in yv]<br>  for i in range (n):<br>    for j in range (n):<br>      if intersect (xu[i], yu[i], xv[i], yv[i],<br>                    xc[j], yc[j], xd[j], yd[j]):<br>        return False<br>  return True<br> <br>class FamilyCrest:<br>  def canBeInfinite (self, A, B, C, D):<br>    global xa, ya, xb, yb, xu, yu, xv, yv, dx, dy, n<br>    n = len (A)<br>    xa = A<br>    ya = B<br>    xb = C<br>    yb = D<br>    xu = [t * MAX for t in xa]<br>    yu = [t * MAX for t in ya]<br>    xv = [t * MAX for t in xb]<br>    yv = [t * MAX for t in yb]<br>    dx = []<br>    dy = []<br>    for i in range (n):<br>      dx += [xb[i] - xa[i]]<br>      dy += [yb[i] - ya[i]]<br>    for i in range (n):<br>      if go ( dx[i] * MED + dy[i],  dy[i] * MED - dx[i]) or \<br>         go ( dx[i] * MED - dy[i],  dy[i] * MED + dx[i]) or \<br>         go (-dx[i] * MED + dy[i], -dy[i] * MED - dx[i]) or \<br>         go (-dx[i] * MED - dy[i], -dy[i] * MED + dx[i]):<br>        return "Infinite"<br>    return "Finite"<br> <br> <br>#Powered by KawigiEdit-pf 2.1.9.1!<br></td>