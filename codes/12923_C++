<td class="problemText" colspan="8" valign="middle" align="left">
            //  SRM 602 (C)<br><br>#include &lt;cstdio&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cstring&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cassert&gt;<br>#include &lt;iostream&gt;<br>#include &lt;sstream&gt;<br>#include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;queue&gt;<br>#include &lt;set&gt;<br>#include &lt;map&gt;<br>#include &lt;utility&gt;<br>#include &lt;numeric&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;bitset&gt;<br>#include &lt;complex&gt;<br><br>using namespace std;<br><br>typedef unsigned uint;<br>typedef long long Int;<br>typedef vector&lt;int&gt; vint;<br>typedef pair&lt;int,int&gt; pint;<br>#define mp make_pair<br><br>template&lt;class T&gt; void pv(T a, T b) { for (T i = a; i != b; ++i) cout &lt;&lt; *i &lt;&lt; " "; cout &lt;&lt; endl; }<br>template&lt;class T&gt; void chmin(T &amp;t, T f) { if (t &gt; f) t = f; }<br>template&lt;class T&gt; void chmax(T &amp;t, T f) { if (t &lt; f) t = f; }<br><br>const Int MO = 1000000007;<br><br>int msLen;<br>int ms[410][410];<br>bool g[410][410];<br>Int dp[410][410];<br><br>bool isValid(int a00, int a01, int a10, int a11) {<br>  int cnt = 0;<br>  if (a00 == 1) ++cnt;<br>  if (a01 == 0) ++cnt;<br>  if (a11 == 1) ++cnt;<br>  if (a10 == 0) ++cnt;<br>  return (cnt &lt; 3);<br>}<br><br>Int solve1(int M, int N) {<br>  int x, y;<br>  int z, s;<br>  int u, v;<br>  msLen = 0;<br>  for (z = 1; z &lt;= N; ++z) for (s = 0; s &lt; 2; ++s) {<br>    for (y = 0; y &lt; N; ++y) {<br>      ms[msLen][y] = (y &lt; z) ? s : (s ^ 1);<br>    }<br>    ++msLen;<br>  }<br>// for(u=0;u&lt;msLen;++u)pv(ms[u],ms[u]+N);<br>  for (u = 0; u &lt; msLen; ++u) for (v = 0; v &lt; msLen; ++v) {<br>    g[u][v] = 1;<br>    for (y = 0; y &lt; N - 1; ++y) {<br>      if (!isValid(ms[u][y], ms[u][y + 1], ms[v][y], ms[v][y + 1])) {<br>        g[u][v] = 0;<br>        break;<br>      }<br>    }<br>  }<br>// for(u=0;u&lt;msLen;++u)pv(g[u],g[u]+msLen);<br>  memset(dp, 0, sizeof(dp));<br>  for (u = 0; u &lt; msLen; ++u) {<br>    dp[1][u] = 1;<br>  }<br>  for (x = 1; x &lt; M; ++x) {<br>    for (u = 0; u &lt; msLen; ++u) for (v = 0; v &lt; msLen; ++v) if (g[u][v]) {<br>      (dp[x + 1][v] += dp[x][u]) %= MO;<br>    }<br>  }<br>  Int ret = 0;<br>  for (u = 0; u &lt; msLen; ++u) {<br>    (ret += dp[M][u]) %= MO;<br>  }<br>  return ret;<br>}<br><br>Int solve2(int M, int N) {<br>  Int ret = 0;<br>  <br>  //  0 rect<br>  ret += 2;<br>  ret %= MO;<br>  <br>  //  1 rect<br>  int x, y;<br>  for (x = 1; x &lt;= M; ++x) for (y = 1; y &lt;= N; ++y) {<br>    ret += (x &lt; M &amp;&amp; y &lt; N) ? 4 : (x &lt; M || y &lt; N) ? 2 : 0;<br>  }<br>  ret %= MO;<br>  <br>  //  2 rect<br>  ret += ((M * (M - 1) / 2) * (N * (N - 1) / 2)) * 2;<br>  ret -= (M - 1) * (N - 1);<br>  ret %= MO;<br>  <br>  ret = (ret % MO + MO) % MO;<br>  return ret;<br>}<br><br>struct BlackBoxDiv1 {<br>  <br>  int count(int N, int M) {<br>    Int ans = 0;<br>    <br>    Int two = 1;<br>    int x, y;<br>    for (x = 0; x &lt; M; ++x) for (y = 0; y &lt; N; ++y) {<br>      (two *= 2) %= MO;<br>    }<br>    <br>    ans += solve1(M, N);<br>    ans += solve1(N, M);<br>    ans -= solve2(M, N);<br>    ans = two - ans;<br>    ans = (ans % MO + MO) % MO;<br>    return ans;<br>    <br>  }<br>  <br>};<br></td>