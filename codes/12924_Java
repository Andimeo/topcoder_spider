<td class="problemText" colspan="8" valign="middle" align="left">
            import java.io.OutputStream;<br>import java.io.OutputStreamWriter;<br>import java.io.PrintWriter;<br>import java.util.Arrays;<br>import java.io.BufferedWriter;<br>import java.io.Writer;<br> <br>/**<br> * Built using CHelper plug-in<br> * Actual solution is at the top<br> * @author Ankit Srivastava<br> */<br>public class TypoCoderDiv1 {<br>    int[] d;<br>    int n;<br> <br>    int dp[][][];<br> <br>    int go(int x, int brown, int i) {<br>        if(i == n) return 0;<br>        if(dp[x][brown][i] == -1) {<br>            if(brown == 1) {<br>                long cur = x + d[i - 1];<br>                if(cur - d[i] &lt; 2200) dp[x][brown][i] = 1 + go(Math.max(0, (int)(cur - d[i])), 0, i + 1);<br>            } else {<br>                long nw = x - d[i];<br>                dp[x][brown][i] = go(Math.max(0, (int)nw), 0, i + 1);<br>                nw = x + d[i];<br>                int s = nw &gt;= 2200 ? 1 : 0;<br>                dp[x][brown][i] = Math.max(dp[x][brown][i], s + go(s == 1 ? x : (int)nw, s, i + 1));<br>            }<br>        }<br>        return dp[x][brown][i];<br>    }<br> <br>    public int getmax(int[] D, int X) {<br>        d = D;<br>        n = D.length;<br>        dp = new int[2300][2][n];<br>        ArrayUtils.fill3d(dp, -1);<br>        return go(X, 0, 0);<br>    }<br>}<br> <br>class ArrayUtils {<br> <br>    public static void fill2d(int[][] array, int value) {<br>        for (int i = 0; i &lt; array.length; i++)<br>            Arrays.fill(array[i], value);<br>    }<br> <br>    public static void fill3d(int[][][] array, int value) {<br>        for (int i = 0; i &lt; array.length; i++) {<br>            fill2d(array[i], value);<br>        }<br>    }<br> <br>    }<br></td>