<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.List;<br>import java.util.Comparator;<br>import java.util.Arrays;<br>import java.util.Random;<br> <br>/**<br> * Built using CHelper plug-in<br> * Actual solution is at the top<br> * @author Niyaz Nigmatullin<br> */<br>public class PilingRectsDiv1 {<br>    public long getmax(int n, int[] XS, int[] YS, int XA, int XB, int XC, int YA, int YB, int YC) {<br>        int[] x = new int[2 * n];<br>        int[] y = new int[2 * n];<br>        for (int i = 0; i &lt; XS.length; i++) {<br>            x[i] = XS[i];<br>            y[i] = YS[i];<br>        }<br>        for (int i = XS.length; i &lt; 2 * n; i++) {<br>            x[i] = (int) (((long) XA * x[i - 1] + XB) % XC + 1);<br>            y[i] = (int) (((long) YA * y[i - 1] + YB) % YC + 1);<br>        }<br>        Rectangle[] a = new Rectangle[2 * n];<br>        for (int i = 0; i &lt; 2 * n; i++) {<br>            a[i] = new Rectangle(x[i], y[i]);<br>        }<br>        Arrays.sort(a, new Comparator&lt;Rectangle&gt;() {<br>            @Override<br>            public int compare(Rectangle o1, Rectangle o2) {<br>                if (o1.x != o2.x) return Integer.compare(o1.x, o2.x);<br>                return Integer.compare(o1.y, o2.y);<br>            }<br>        });<br>        if (n == 1) {<br>            return (long) a[0].x * a[0].y + (long) a[1].x * a[1].y;<br>        }<br>        int[] minY = new int[2 * n];<br>        minY[0] = a[0].y;<br>        for (int i = 1; i &lt; 2 * n; i++) {<br>            minY[i] = Math.min(minY[i - 1], a[i].y);<br>        }<br>        ys = new int[2 * n];<br>        for (int i = 0; i &lt; 2 * n; i++) ys[i] = a[i].y;<br>        ys = ArrayUtils.sortAndUnique(ys);<br>        f = new Fenwick(ys.length);<br>        long ans = 0;<br>        for (int i = 2 * n - 1; i &gt; 0; i--) {<br>            int first = i;<br>            if (first == n) {<br>                int id = getKth(1);<br>                ans = Math.max(ans, (long) a[0].x * minY[i - 1] + (long) a[i].x * Math.min(ys[id], a[i].y));<br>            } else if (first &lt; n) {<br>                {<br>                    int toGet = n - first;<br>                    int id = getKth(toGet + 1);<br>                    int fId = getKth(1);<br>                    ans = Math.max(ans, (long) a[0].x * Math.min(minY[i - 1], ys[fId]) + (long) a[i].x * Math.min(a[i].y, ys[id]));<br>                }<br>                {<br>                    int toGet = n - 1;<br>                    int id = getKth(toGet + 1);<br>                    int fId = getKth(1);<br>                    ans = Math.max(ans, (long) a[0].x * Math.min(minY[i - 1], ys[id]) + (long) a[i].x * Math.min(a[i].y, ys[fId]));<br>                }<br>            }<br>            f.add(Arrays.binarySearch(ys, a[i].y), 1);<br>        }<br>        return ans;<br>    }<br> <br>    static int getKth(int k) {<br>        if (f.getSum(0, ys.length) &lt; k) {<br>            return Integer.MIN_VALUE;<br>        }<br>        int l = -1;<br>        int r = ys.length;<br>        while (l &lt; r - 1) {<br>            int mid = (l + r) &gt;&gt; 1;<br>            if (f.getSum(0, mid) &lt; k) {<br>                l = mid;<br>            } else {<br>                r = mid;<br>            }<br>        }<br>        return l;<br>    }<br> <br>    static int[] ys;<br>    static Fenwick f;<br> <br>    static class Rectangle {<br>        int x;<br>        int y;<br> <br>        Rectangle(int x, int y) {<br>            if (x &gt; y) {<br>                int t = x;<br>                x = y;<br>                y = t;<br>            }<br>            this.x = x;<br>            this.y = y;<br>        }<br>    }<br>}<br> <br>class ArrayUtils {<br> <br> <br>    static final long seed = System.nanoTime();<br> <br>    static final Random rand = new Random(seed);<br> <br>    static public int[] sortAndUnique(int[] a) {<br>        int[] ret = a.clone();<br>        sort(ret);<br>        if (ret.length == 0) {<br>            return ret;<br>        }<br>        int last = ret[0];<br>        int j = 1;<br>        for (int i = 1; i &lt; ret.length; i++) {<br>            if (last != ret[i]) {<br>                ret[j++] = ret[i];<br>                last = ret[i];<br>            }<br>        }<br>        return Arrays.copyOf(ret, j);<br>    }<br> <br>    public static void sort(int[] a) {<br>        shuffle(a);<br>        Arrays.sort(a);<br>    }<br> <br>    public static void shuffle(int[] a) {<br>        for (int i = 0; i &lt; a.length; i++) {<br>            int j = rand.nextInt(i + 1);<br>            int t = a[i];<br>            a[i] = a[j];<br>            a[j] = t;<br>        }<br>    }<br> <br> <br>    }<br> <br>class Fenwick {<br>    int[] a;<br> <br>    public Fenwick(int n) {<br>        a = new int[n];<br>    }<br> <br>    public void add(int x, int y) {<br>        for (int i = x; i &lt; a.length; i |= i + 1) {<br>            a[i] += y;<br>        }<br>    }<br> <br>    public int getSum(int x) {<br>        if (x &gt;= a.length) x = a.length - 1;<br>        int ret = 0;<br>        for (int i = x; i &gt;= 0; i = (i &amp; (i + 1)) - 1) {<br>            ret += a[i];<br>        }<br>        return ret;<br>    }<br> <br>    public int getSum(int l, int r) {<br>        return getSum(r - 1) - getSum(l - 1);<br>    }<br>}<br></td>