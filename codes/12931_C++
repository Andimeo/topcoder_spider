<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;stdio.h&gt;<br>#include &lt;string&gt;<br>#include &lt;cmath&gt;<br>#include &lt;memory.h&gt;<br>#include &lt;set&gt;<br>#include &lt;vector&gt;<br>#include &lt;algorithm&gt;<br>using namespace std;<br>int dp[51][51][51];<br>class MiningGoldEasy{<br>public:<br>  int R, C,n;<br>  vector&lt;int&gt; eR, eC;<br>  int calc(int d, int er, int ec){<br>    if (d == n)<br>      return 0;<br>    if (dp[d][er][ec] == -1){<br>      dp[d][er][ec] = R + C - abs(eR[er] - eR[d]) - abs(eC[ec] - eC[d]);<br>      int mx = 0;<br>      for (int i = 0; i &lt; n;++i)<br>        mx=max(mx,max(calc(d + 1, i, ec), calc(d + 1, er, i)));<br>      dp[d][er][ec] += mx;<br>    }<br>    return dp[d][er][ec];<br>  }<br>  int GetMaximumGold(int nn, int m, vector &lt;int&gt; eer, vector &lt;int&gt; eec){<br>    R = nn;<br>    C = m;<br>    n = eer.size();<br>    eR = eer;<br>    eC = eec;<br>    memset(dp, -1, sizeof(dp));<br>    int mx = 0;<br>    for (int i = 0; i &lt; n;++i)<br>    for (int j = 0; j &lt; n; ++j)<br>      mx = max(mx, calc(0, i, j));<br>    return mx;<br>  }<br>};<br></td>