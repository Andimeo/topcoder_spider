<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br><br>public class AlienAndPermutation {<br><br>  final int MOD = (int) (1e9 + 7);<br><br>  public int getNumber(int[] p, int k) {<br>    int n = p.length;<br><br>    int[][] max = new int[n][n];<br>    for (int i = 0; i &lt; n; i++) {<br>      max[i][i] = p[i];<br>      for (int j = i + 1; j &lt; n; j++) {<br>        max[i][j] = Math.max(max[i][j - 1], p[j]);<br>      }<br>    }<br><br>    int[][][] dp = new int[n + 1][n + 1][k + 1];<br>    dp[0][0][0] = 1;<br><br>    for (int i = 0; i &lt; n; i++) {<br>      for (int j = 0; j &lt;= n; j++) {<br>        for (int t = 0; t &lt;= k; t++) {<br>          int val = dp[i][j][t];<br>          if (val != 0) {<br>            if (i == j) {<br>              if ((dp[i + 1][j + 1][t] += val) &gt;= MOD) {<br>                dp[i + 1][j + 1][t] -= MOD;<br>              }<br>            }<br>            if ((dp[i + 1][j][t] += val) &gt;= MOD) {<br>              dp[i + 1][j][t] -= MOD;<br>            }<br><br>            if (t &lt; k) {<br>              int fromJ = j;<br>              if (i == j) {<br>                fromJ++;<br>              }<br>              for (int newJ = fromJ; newJ &lt; n; newJ++) {<br>                int mx = max[Math.min(i, j)][Math.max(i, newJ)];<br>                if (mx != p[i]) {<br>                  break;<br>                }<br><br>                if ((dp[i + 1][newJ + 1][t + 1] += val) &gt;= MOD) {<br>                  dp[i + 1][newJ + 1][t + 1] -= MOD;<br>                }<br>              }<br>            }<br>          }<br>        }<br>      }<br>    }<br>    int ans = 0;<br>    for (int i = 0; i &lt;= k; i++) {<br>      ans = (ans + dp[n][n][i]) % MOD;<br>    }<br>    return ans;<br>  }<br><br>}<br></td>