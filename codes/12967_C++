<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;cassert&gt;<br>#include &lt;cctype&gt;<br>#include &lt;cmath&gt;<br>#include &lt;climits&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cstring&gt;<br>#include &lt;ctime&gt;<br> <br>#include &lt;algorithm&gt;<br>#include &lt;deque&gt;<br>#include &lt;functional&gt;<br>#include &lt;iterator&gt;<br>#include &lt;list&gt;<br>#include &lt;map&gt;<br>#include &lt;numeric&gt;<br>#include &lt;queue&gt;<br>#include &lt;set&gt;<br>#include &lt;stack&gt;<br>#include &lt;string&gt;<br>#include &lt;utility&gt;<br>#include &lt;vector&gt;<br> <br>#include &lt;fstream&gt;<br>#include &lt;iostream&gt;<br>#include &lt;sstream&gt;<br> <br>#include &lt;ext/numeric&gt;<br> <br>using namespace std;<br>using namespace __gnu_cxx;<br> <br>typedef long long int64;<br> <br>const int INF = 0x3f3f3f3f;<br> <br>template &lt;class T&gt; int len (T a) { return a.size (); }<br> <br>int dp [5005][5005];<br> <br>class PalindromicSubstringsDiv2 {<br>    public:<br>    int<br>    count(vector&lt;string&gt; S1, vector&lt;string&gt; S2) {<br>        string a = accumulate (S1.begin (), S1.end (), string (""));<br>        string b = accumulate (S2.begin (), S2.end (), string (""));<br>        string S = a + b;<br>        memset (dp, 0, sizeof (dp));<br>        int N = len (S);<br>        for (int i = 0; i &lt; N; i++) {<br>            int l = i, r = i, l1 = i, r1 = i + 1;<br>            while (l &gt;= 0 &amp;&amp; r &lt; N)<br>                if (S [l] == S [r])<br>                    dp [l--][r++] = true;<br>                else<br>                    break;<br>    <br>            while (l1 &gt;= 0 &amp;&amp; r1 &lt; N)<br>                if (S [l1] == S [r1])<br>                    dp [l1--][r1++] = true;<br>                else<br>                    break;<br>        }<br>        int ret = 0;<br>        for (int i = 0; i &lt; N; i++) <br>            for (int j = 0; j &lt; N; j++) <br>                ret += dp [i][j];<br> <br>        return ret;<br>    }<br>};<br> <br>// Powered by Greed 2.0-RC<br></td>