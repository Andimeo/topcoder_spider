<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.Arrays;<br> <br>/**<br> * Built using CHelper plug-in<br> * Actual solution is at the top<br> */<br>public class CombinationLockDiv1 {<br>    static final int INF = (int) 1e9;<br> <br>    public int minimumMoves(String[] P, String[] Q) {<br>        StringBuilder srcBuilder = new StringBuilder();<br>        for (String x : P) srcBuilder.append(x);<br>        String src = srcBuilder.toString();<br>        StringBuilder dstBuilder = new StringBuilder();<br>        for (String x : Q) dstBuilder.append(x);<br>        String dst = dstBuilder.toString();<br> <br>        int n = src.length();<br>        int[] delta = new int[n];<br>        for (int i = 0; i &lt; n; ++i) {<br>            delta[i] = dst.charAt(i) - src.charAt(i);<br>            if (delta[i] &lt; 0) delta[i] += 10;<br>        }<br> <br>        int maxRotations = n * 5 + 1;<br> <br>        int[] best = new int[2 * maxRotations + 1];<br>        int[] nbest = new int[best.length];<br>        Arrays.fill(best, INF);<br>        best[maxRotations] = 0;<br>        for (int pos = 0; pos &lt; n; ++pos) {<br>            Arrays.fill(nbest, INF);<br>            int curBest = INF;<br>            int need = (delta[pos] + maxRotations) % 10;<br>            for (int oldRotations = maxRotations; oldRotations &gt;= -maxRotations; --oldRotations) {<br>                if (oldRotations &lt; 0) {<br>                    curBest += 1;<br>                }<br>                curBest = Math.min(curBest, best[oldRotations + maxRotations]);<br>                if ((oldRotations + maxRotations) % 10 == need) {<br>                    nbest[oldRotations + maxRotations] = Math.min(nbest[oldRotations + maxRotations], curBest);<br>                }<br>            }<br>            curBest = INF;<br>            for (int oldRotations = -maxRotations; oldRotations &lt;= maxRotations; ++oldRotations) {<br>                if (oldRotations &gt; 0) {<br>                    curBest += 1;<br>                }<br>                curBest = Math.min(curBest, best[oldRotations + maxRotations]);<br>                if ((oldRotations + maxRotations) % 10 == need) {<br>                    nbest[oldRotations + maxRotations] = Math.min(nbest[oldRotations + maxRotations], curBest);<br>                }<br>            }<br> <br>            int[] tmp = best;<br>            best = nbest;<br>            nbest = tmp;<br>        }<br> <br>        int res = INF;<br>        for (int x : best) res = Math.min(res, x);<br>        return res;<br>    }<br>}<br></td>