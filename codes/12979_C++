<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;vector&gt;<br>#include &lt;list&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;deque&gt;<br>#include &lt;stack&gt;<br>#include &lt;bitset&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;functional&gt;<br>#include &lt;numeric&gt;<br>#include &lt;utility&gt;<br>#include &lt;sstream&gt;<br>#include &lt;iostream&gt;<br>#include &lt;iomanip&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;ctime&gt;<br>#include &lt;cstring&gt;<br> <br>using namespace std;<br> <br>class Subcube {<br>public:<br>  long long getCount(vector &lt;int&gt;, vector &lt;int&gt;, vector &lt;int&gt;);<br>};<br> <br>const int N = 8;<br>const int maxN = 60;<br>int a[N] = {0, 0, 0, 0, 1, 1, 1, 1};<br>int b[N] = {0, 0, 1, 1, 0, 0, 1, 1};<br>int c[N] = {0, 1, 0, 1, 0, 1, 0, 1};<br> <br>long long d[N][N], s[maxN][maxN];<br> <br>vector &lt; int &gt; x, y, z;<br>int n, pos[N], q[N];<br>long long coef;<br> <br>set &lt; long long &gt; S;<br> <br>void rec(int index) {<br>  if (index == n) {<br>    for (int i = 0; i &lt; N; ++i) {<br>      q[i] = pos[i];<br>    }<br>    sort(q, q + N);<br>    long long h = 0;<br>    for (int i = 0; i &lt; N; ++i) {<br>      h = h * 63LL + (long long)(q[i] + 2);<br>    }<br>    S.insert(h);<br>    return ;<br>  }<br> <br>  {<br>    rec(index + 1);<br>  }<br> <br>  for (int i = 0; i &lt; N; ++i) {<br>    if (pos[i] != -1) {<br>      continue;<br>    }<br> <br>    pos[i] = index;<br>    if (coef == -1) {<br>      bool nice = true;<br>      for (int j = 0; j &lt; N; ++j) {<br>        if (pos[j] == -1 || j == i) {<br>          continue;<br>        }<br> <br>        if (s[pos[j]][pos[i]] % d[j][i] != 0) {<br>          nice = false;<br>          break;<br>        } else {<br>          coef = s[pos[j]][pos[i]] / d[j][i];<br>          break;<br>        }<br>      }<br>      if (nice) {<br>        rec(index + 1);<br>      }<br>      coef = -1;<br>    } else {<br>      bool nice = true;<br>      for (int j = 0; j &lt; N; ++j) {<br>        if (pos[j] == -1) {<br>          continue;<br>        }<br>        if (s[pos[j]][pos[i]] != coef * d[j][i]) {<br>          nice = false;<br>          break;<br>        }<br>      }<br>      if (nice) {<br>        rec(index + 1);<br>      }<br>    }<br>    pos[i] = -1;<br>  }<br>}<br> <br>long long Subcube::getCount(vector &lt;int&gt; X, vector &lt;int&gt; Y, vector &lt;int&gt; Z) {<br>  x = X;<br>  y = Y;<br>  z = Z;<br>  S.clear();<br>  for (int i = 0; i &lt; N; ++i) {<br>    for (int j = 0; j &lt; N; ++j) {<br>      d[i][j] = (a[i] - a[j]) * (a[i] - a[j]) + (b[i] - b[j]) * (b[i] - b[j]) + (c[i] - c[j]) * (c[i] - c[j]);<br>    }<br>  }<br> <br>  n = x.size();<br>  for (int i = 0; i &lt; n; ++i) {<br>    for (int j = 0; j &lt; n; ++j) {<br>      long long dx = x[i] - x[j];<br>      long long dy = y[i] - y[j];<br>      long long dz = z[i] - z[j];<br>      s[i][j] = dx * dx + dy * dy + dz * dz;<br>    }<br>  }<br> <br>  memset(pos, -1, sizeof(pos));<br>  coef = -1;<br>  rec(0);<br>  return (int)(S.size()) - 1;<br>}<br> <br> <br>//Powered by [KawigiEdit] 2.0!<br></td>