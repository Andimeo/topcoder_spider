<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections;<br>using System.Collections.Generic;<br>using System.Text;<br><br>public class AlienAndSetDiv1 {<br>    public int getNumber(int N, int K)<br>    {<br>        long mod = 1000000007;<br><br>        Dictionary&lt;long, long&gt; dic = new Dictionary&lt;long, long&gt;();<br>        Dictionary&lt;long, int[]&gt; ardic = new Dictionary&lt;long, int[]&gt;();<br><br>        dic[0] = 1;<br>        ardic[0] = new int[0];<br><br>        for (int i = 0; i &lt; 2 * N; i++)<br>        {<br>            Dictionary&lt;long, long&gt; nextdic = new Dictionary&lt;long, long&gt;();<br><br>            //Console.WriteLine("turn " + i);<br>            foreach (var item in dic)<br>            {<br>                long now = item.Key;<br>                long num = item.Value;<br><br>                //Console.WriteLine(now + " " + num);<br><br>                int[] ar = ardic[now];<br>                //Console.WriteLine(String.Join(" ", ar));<br><br>                if (ar.Length == 0)<br>                {<br>                    int[] nextar = new int[1] { K - 1 };<br>                    long nexthash = gethash(nextar);<br><br>                    if (!ardic.ContainsKey(nexthash))<br>                    {<br>                        ardic[nexthash] = nextar;<br>                    }<br>                    if (!nextdic.ContainsKey(nexthash))<br>                    {<br>                        nextdic[nexthash] = 0;<br>                    }<br>                    nextdic[nexthash] += num * 2;<br>                    nextdic[nexthash] %= mod;<br>                }<br>                else<br>                {<br>                    if (true)<br>                    {<br>                        //Console.WriteLine("myon");<br>                        int[] nextar = new int[ar.Length + 1];<br>                        for (int j = 0; j &lt; ar.Length; j++)<br>                        {<br>                            nextar[j] = Math.Max(0, ar[j] - 1);<br>                        }<br>                        nextar[ar.Length] = K - 1;<br><br>                        long nexthash = gethash(nextar);<br>                        //Console.WriteLine("next-a: " + nexthash);<br><br>                        if (!ardic.ContainsKey(nexthash))<br>                        {<br>                            ardic[nexthash] = nextar;<br>                        }<br>                        if (!nextdic.ContainsKey(nexthash))<br>                        {<br>                            nextdic[nexthash] = 0;<br>                        }<br>                        nextdic[nexthash] += num;<br>                        nextdic[nexthash] %= mod;<br>                    }<br><br>                    if (ar[0] == 0)<br>                    {<br>                        //Console.WriteLine("test");<br>                        int[] nextar = new int[ar.Length - 1];<br>                        for (int j = 0; j &lt; ar.Length - 1; j++)<br>                        {<br>                            nextar[j] = Math.Max(0, ar[j + 1] - 1);<br>                        }<br><br>                        //Console.WriteLine(String.Join(" ", nextar));<br><br>                        long nexthash = gethash(nextar);<br>                        //Console.WriteLine("next-b: " + nexthash);<br><br>                        if (!ardic.ContainsKey(nexthash))<br>                        {<br>                            ardic[nexthash] = nextar;<br>                        }<br>                        if (!nextdic.ContainsKey(nexthash))<br>                        {<br>                            nextdic[nexthash] = 0;<br>                        }<br>                        nextdic[nexthash] += num;<br>                        nextdic[nexthash] %= mod;<br>                    }<br>                }<br>            }<br>            dic = nextdic;<br>        }<br><br>        long ret = 0;<br>        if(dic.ContainsKey(0)) ret = dic[0];<br><br>        return (int)(ret % mod);<br>    }<br><br>    long gethash(int[] ar)<br>    {<br>        long ret = 0;<br>        foreach (var item in ar)<br>        {<br>            ret = ret * 187264816348716L ^ 12726561178661L ^ ((item ^ 1723161168361L) * 1256461897246167L);<br>        }<br>        return ret;<br>    }<br><br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003] Modified for C# by ysn<br>// Powered by CodeProcessor<br></td>