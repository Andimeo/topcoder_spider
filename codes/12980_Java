<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.Arrays;<br>import java.util.Comparator;<br>import java.util.NoSuchElementException;<br> <br>/**<br> * Built using CHelper plug-in<br> * Actual solution is at the top<br> * @author Egor Kulikov (egor@egork.net)<br> */<br>public class AlienAndSetDiv1 {<br>  private static final long MOD = (long) (1e9 + 7);<br>  long[][][] answer;<br>  int delta;<br> <br>    public int getNumber(int N, int K) {<br>    answer = new long[2 * N + 1][N + 1][1 &lt;&lt; K];<br>    ArrayUtils.fill(answer, -1);<br>    delta = K;<br>    return (int)go(2 * N, 0, 0);<br>    }<br> <br>  private long go(int remaining, int outstanding, int mask) {<br>    if (outstanding &lt; 0 || outstanding &gt;= answer[remaining].length)<br>      return 0;<br>    if (answer[remaining][outstanding][mask] != -1)<br>      return answer[remaining][outstanding][mask];<br>    if (remaining == 0) {<br>      if (outstanding == 0 &amp;&amp; mask == 0)<br>        return answer[remaining][outstanding][mask] = 1;<br>      return answer[remaining][outstanding][mask] = 0;<br>    }<br>    answer[remaining][outstanding][mask] = (go(remaining - 1, outstanding + (mask &gt;&gt; (delta - 1)), ((mask &lt;&lt; 1) &amp; ((1 &lt;&lt; delta) - 1)) + 1) +<br>      go(remaining - 1, outstanding + (mask &gt;&gt; (delta - 1)) - 1, ((mask &lt;&lt; 1) &amp; ((1 &lt;&lt; delta) - 1)))) % MOD;<br>    if (outstanding == 0 &amp;&amp; mask == 0)<br>      answer[remaining][outstanding][mask] = answer[remaining][outstanding][mask] * 2 % MOD;<br>    return answer[remaining][outstanding][mask];<br>  }<br>}<br> <br>class ArrayUtils {<br> <br>  public static void fill(long[][] array, long value) {<br>    for (long[] row : array)<br>      Arrays.fill(row, value);<br>  }<br> <br>  public static void fill(long[][][] array, long value) {<br>    for (long[][] row : array)<br>      fill(row, value);<br>  }<br> <br>  }<br></td>