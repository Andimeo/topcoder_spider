<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;vector&gt;<br>#include &lt;list&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;queue&gt;<br>#include &lt;deque&gt;<br>#include &lt;stack&gt;<br>#include &lt;bitset&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;functional&gt;<br>#include &lt;numeric&gt;<br>#include &lt;limits&gt;<br>#include &lt;utility&gt;<br>#include &lt;sstream&gt;<br>#include &lt;iostream&gt;<br>#include &lt;iomanip&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cmath&gt;<br>#include &lt;string.h&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;ctime&gt;<br> <br>using namespace std;<br> <br> <br>class TorusSailing {<br>public:<br>  double xp[105][105];<br> <br>  double expectedTime(int N, int M, int goalX, int goalY) {<br>    for(int runs = 0; runs &lt; 7000; runs++){<br>      for(int x=0; x&lt;N; x++)<br>        for(int y=0; y&lt;M; y++){<br>          if(x==0 &amp;&amp; y==0) continue;<br>          int xx = x-1;<br>          if(xx &lt; 0) xx += N;<br>          int yy = y-1;<br>          if(yy &lt; 0) yy += M;<br>          xp[x][y] = 1 + (xp[xx][y]+xp[x][yy])/2;<br>        }<br>    }<br>    return xp[goalX][goalY];<br>  }<br>};<br> <br> <br> <br>//Powered by KawigiEdit-pf 2.3.0!<br></td>