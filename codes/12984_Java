<td class="problemText" colspan="8" valign="middle" align="left">
            /**<br> * Built using CHelper plug-in<br> * Actual solution is at the top<br> * @author Egor Kulikov (egor@egork.net)<br> */<br>public class TorusSailing {<br>    public double expectedTime(int N, int M, int goalX, int goalY) {<br>    int total = N + M;<br>    double[][] c = new double[total + 1][total + 1];<br>    double[] pow = new double[total + 1];<br>    pow[0] = 1;<br>    for (int i = 1; i &lt;= total; i++)<br>      pow[i] = pow[i - 1] * 2;<br>    for (int i = 0; i &lt;= total; i++) {<br>      c[i][0] = 1;<br>      for (int j = 1; j &lt;= i; j++)<br>        c[i][j] = c[i - 1][j - 1] + c[i - 1][j];<br>    }<br>    double[][] mat = new double[total - 1][total];<br>    int[] row = new int[total - 1];<br>    int[] column = new int[total - 1];<br>    for (int i = 1; i &lt; N; i++)<br>      row[i] = i;<br>    for (int i = 1; i &lt; M; i++)<br>      column[i - 1 + N] = i;<br>    for (int i = 0; i &lt; total - 1; i++) {<br>      mat[i][i] = 1;<br>      if (row[i] == 0) {<br>        int targetRow = 0;<br>        int targetColumn = (column[i] + 1) % M;<br>        mat[i][total - 1] += .5;<br>        for (int j = 0; j &lt; total - 1; j++) {<br>          if (row[j] == targetRow &amp;&amp; column[j] == targetColumn) {<br>            mat[i][j] -= .5;<br>            break;<br>          }<br>        }<br>      } else {<br>        int startRow = row[i];<br>        int startColumn = 1;<br>        for (int j = row[i]; j &lt; N - 1; j++) {<br>          int endRow = j;<br>          int endColumn = M - 1;<br>          double p = c[endRow - startRow + endColumn - startColumn][endRow - startRow] / pow[endRow - startRow + endColumn - startColumn] / 4;<br>          int targetRow = j;<br>          int targetColumn = 0;<br>          mat[i][total - 1] += p * (endRow - startRow + endColumn - startColumn + 2);<br>          for (int k = 0; k &lt; total - 1; k++) {<br>            if (targetRow == row[k] &amp;&amp; targetColumn == column[k]) {<br>              mat[i][k] -= p;<br>              break;<br>            }<br>          }<br>        }<br>        for (int j = 1; j &lt; M - 1; j++) {<br>          int endRow = N - 1;<br>          int endColumn = j;<br>          double p = c[endRow - startRow + endColumn - startColumn][endRow - startRow] / pow[endRow - startRow + endColumn - startColumn] / 4;<br>          int targetRow = 0;<br>          int targetColumn = j;<br>          mat[i][total - 1] += p * (endRow - startRow + endColumn - startColumn + 2);<br>          for (int k = 0; k &lt; total - 1; k++) {<br>            if (targetRow == row[k] &amp;&amp; targetColumn == column[k]) {<br>              mat[i][k] -= p;<br>              break;<br>            }<br>          }<br>        }<br>        int endRow = N - 1;<br>        int endColumn = M - 1;<br>        double p = c[endRow - startRow + endColumn - startColumn][endRow - startRow] / pow[endRow - startRow + endColumn - startColumn] / 2;<br>        mat[i][total - 1] += p * (endRow - startRow + endColumn - startColumn + 1);<br>      }<br>      if (column[i] == 0) {<br>        int targetRow = (row[i] + 1) % N;<br>        int targetColumn = 0;<br>        mat[i][total - 1] += .5;<br>        for (int j = 0; j &lt; total - 1; j++) {<br>          if (row[j] == targetRow &amp;&amp; column[j] == targetColumn) {<br>            mat[i][j] -= .5;<br>            break;<br>          }<br>        }<br>      } else {<br>        int startRow = 1;<br>        int startColumn = column[i];<br>        for (int j = 1; j &lt; N - 1; j++) {<br>          int endRow = j;<br>          int endColumn = M - 1;<br>          double p = c[endRow - startRow + endColumn - startColumn][endRow - startRow] / pow[endRow - startRow + endColumn - startColumn] / 4;<br>          int targetRow = j;<br>          int targetColumn = 0;<br>          mat[i][total - 1] += p * (endRow - startRow + endColumn - startColumn + 2);<br>          for (int k = 0; k &lt; total - 1; k++) {<br>            if (targetRow == row[k] &amp;&amp; targetColumn == column[k]) {<br>              mat[i][k] -= p;<br>              break;<br>            }<br>          }<br>        }<br>        for (int j = column[i]; j &lt; M - 1; j++) {<br>          int endRow = N - 1;<br>          int endColumn = j;<br>          double p = c[endRow - startRow + endColumn - startColumn][endRow - startRow] / pow[endRow - startRow + endColumn - startColumn] / 4;<br>          int targetRow = 0;<br>          int targetColumn = j;<br>          mat[i][total - 1] += p * (endRow - startRow + endColumn - startColumn + 2);<br>          for (int k = 0; k &lt; total - 1; k++) {<br>            if (targetRow == row[k] &amp;&amp; targetColumn == column[k]) {<br>              mat[i][k] -= p;<br>              break;<br>            }<br>          }<br>        }<br>        int endRow = N - 1;<br>        int endColumn = M - 1;<br>        double p = c[endRow - startRow + endColumn - startColumn][endRow - startRow] / pow[endRow - startRow + endColumn - startColumn] / 2;<br>        mat[i][total - 1] += p * (endRow - startRow + endColumn - startColumn + 1);<br>      }<br>    }<br>    for (int i = 0; i &lt; total - 1; i++) {<br>      double max = -1;<br>      int at = -1;<br>      for (int j = i; j &lt; total - 1; j++) {<br>        if (Math.abs(mat[j][i]) &gt; max) {<br>          max = Math.abs(mat[j][i]);<br>          at = j;<br>        }<br>      }<br>      for (int j = i; j &lt; total; j++) {<br>        double temp = mat[i][j];<br>        mat[i][j] = mat[at][j];<br>        mat[at][j] = temp;<br>      }<br>      for (int j = total - 1; j &gt;= i; j--)<br>        mat[i][j] /= mat[i][i];<br>      for (int j = 0; j &lt; total - 1; j++) {<br>        if (i == j)<br>          continue;<br>        for (int k = total - 1; k &gt;= i; k--)<br>          mat[j][k] -= mat[i][k] * mat[j][i];<br>      }<br>    }<br>    double answer = (goalX + goalY) * c[goalX + goalY][goalX] / pow[goalX + goalY];<br>    int startRow = 0;<br>    int startColumn = 0;<br>    for (int i = 0; i &lt; goalY; i++) {<br>      int targetRow = 0;<br>      int targetColumn = M - 1 - (goalY - i);<br>      int endRow = goalX;<br>      int endColumn = i;<br>      double p = c[endRow - startRow + endColumn - startColumn][endRow - startRow] / pow[endRow - startRow + endColumn - startColumn] / 2;<br>      answer += p * (endRow - startRow + endColumn - startColumn + 1);<br>      for (int j = 0; j &lt; total - 1; j++) {<br>        if (row[j] == targetRow &amp;&amp; column[j] == targetColumn) {<br>          answer += p * mat[j][total - 1];<br>          break;<br>        }<br>      }<br>    }<br>    for (int i = 0; i &lt; goalX; i++) {<br>      int targetRow = N - 1 - (goalX - i);<br>      int targetColumn = 0;<br>      int endRow = i;<br>      int endColumn = goalY;<br>      double p = c[endRow - startRow + endColumn - startColumn][endRow - startRow] / pow[endRow - startRow + endColumn - startColumn] / 2;<br>      answer += p * (endRow - startRow + endColumn - startColumn + 1);<br>      for (int j = 0; j &lt; total - 1; j++) {<br>        if (row[j] == targetRow &amp;&amp; column[j] == targetColumn) {<br>          answer += p * mat[j][total - 1];<br>          break;<br>        }<br>      }<br>    }<br>    return answer;<br>    }<br>}<br></td>