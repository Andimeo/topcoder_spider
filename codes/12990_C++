<td class="problemText" colspan="8" valign="middle" align="left">
            #include&lt;vector&gt;<br>#include&lt;stack&gt;<br>#include&lt;map&gt;<br>#include&lt;iostream&gt;<br>#include&lt;queue&gt;<br>#include&lt;algorithm&gt;<br>#include&lt;cstring&gt;<br>#include&lt;cstdio&gt;<br>#include&lt;cmath&gt;<br>#include&lt;string&gt;<br>#include&lt;sstream&gt;<br>#include&lt;map&gt;<br>using namespace std;<br>#define FOR(i,a,b)              for(long long i=a;i&lt;b;i++)<br>#define REP(i,n)                FOR(i,0,n)<br>#define maX(a,b)                ((a)&gt;(b)?(a):(b))<br>#define all(x)                  x.begin(),x.end()<br>#define miN(a,b)                ((a)&lt;(b)?(a):(b))<br>#define DREP(a)                 sort(all(a)); a.erase(unique(all(a)),a.end())<br><br>#define foreach(v,c)            for( typeof((c).begin()) v = (c).begin();  v != (c).end(); ++v)<br>void split(vector&lt;string&gt;&amp;s,string g,char c){REP(i,g.length())if(g[i]==c)g[i] = ' ';stringstream in(g);for(string t;in&gt;&gt;t;)s.push_back(t);}<br><br><br><br>class BoundingBox {<br>public:<br>  int smallestArea(vector &lt;int&gt; X, vector &lt;int&gt; Y) {<br>    sort(all(X));<br>    sort(all(Y));<br>    int sz = X.size();<br>            int minx = X[0];<br>            int maxx = X[sz-1];<br>            int miny = Y[0];<br>            int maxy = Y[sz-1];<br>            int ans = (maxy - miny)*(maxx-minx);<br>            return ans;<br>    <br>  }<br>};<br></td>