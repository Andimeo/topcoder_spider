<td class="problemText" colspan="8" valign="middle" align="left">
            /**<br> * Built using CHelper plug-in<br> * Actual solution is at the top<br> */<br>public class TaroCheckers {<br>    static final int MODULO = (int) (1e9 + 7);<br> <br>    public int getNumber(int[] left, int[] right, int M) {<br>        int n = left.length;<br>        int[][] ways = new int[n + 1][n + 1];<br>        ways[0][0] = 1;<br>        for (int column = 0; column &lt; M; ++column) {<br>            int[][] nways = new int[n + 1][n + 1];<br>            int canRight = 0;<br>            int thisRight = 0;<br>            for (int x : right) if (x &gt;= M - column) {<br>                ++canRight;<br>                if (x == M - column) ++thisRight;<br>            }<br>            int canLeft = 0;<br>            int thisLeft = 0;<br>            for (int x : left) if (x &gt; column) {<br>                ++canLeft;<br>                if (x == column + 1) ++thisLeft;<br>            }<br>            for (int gotLeft = 0; gotLeft &lt;= n; ++gotLeft)<br>                for (int gotRight = 0; gotRight &lt;= n; ++gotRight)<br>                    if (ways[gotLeft][gotRight] &gt; 0) {<br>                        long oldWays = ways[gotLeft][gotRight];<br>                        if (n - gotLeft &lt;= canLeft - thisLeft) {<br>                            nways[gotLeft][gotRight] = (int) ((nways[gotLeft][gotRight] + oldWays * (n - canLeft - canRight + 1)) % MODULO);<br>                            if (gotRight &lt; canRight)<br>                                nways[gotLeft][gotRight + 1] = (int) ((nways[gotLeft][gotRight + 1] + oldWays * (canRight - gotRight)) % MODULO);<br>                        }<br>                        if (gotLeft + 1 &lt;= n &amp;&amp; n - gotLeft - 1 &lt;= canLeft - thisLeft) {<br>                            nways[gotLeft + 1][gotRight] = (int) ((nways[gotLeft + 1][gotRight] + oldWays * (canLeft - (n - gotLeft - 1))) % MODULO);<br>                        }<br>                    }<br>            ways = nways;<br>        }<br>        return ways[n][n];<br>    }<br>}<br></td>