<td class="problemText" colspan="8" valign="middle" align="left">
            public class OneDimensionalRobot {<br> <br>  public long theSum(String[] commands1, String[] commands2, int minA,<br>      int maxA, int minB, int maxB) {<br>    StringBuilder sb = new StringBuilder();<br>    for (String s : commands1)<br>      sb.append(s);<br>    for (String s : commands2)<br>      sb.append(s);<br>    String s = sb.toString();<br>    long res = 0;<br>    for (int dist = 1; dist &lt;= maxB + maxA + 1; dist++) {<br>      int minPos = Integer.MAX_VALUE;<br>      int maxPos = Integer.MIN_VALUE;<br>      for (int a = minA; a &lt;= maxA; a++) {<br>        int b = -a + dist - 1;<br>        if (b &gt;= minB &amp;&amp; b &lt;= maxB) {<br>          res -= a;<br>          minPos = Math.min(minPos, a);<br>          maxPos = Math.max(maxPos, a);<br>        }<br>      }<br>      if (minPos &lt;= maxPos) {<br>        int cntInMin = 1;<br>        int cntInMax = 1;<br>        if (minPos == maxPos)<br>          cntInMax = 0;<br>        for (int i = 0; i &lt; s.length(); i++) {<br>          char c = s.charAt(i);<br>          if (c == 'L') {<br>            if (minPos &gt; 0) {<br>              minPos--;<br>              maxPos--;<br>            } else {<br>              if (maxPos == minPos) {<br> <br>              } else {<br>                maxPos--;<br>                if (maxPos == minPos) {<br>                  cntInMin += cntInMax;<br>                  cntInMax = 0;<br>                } else {<br>                  cntInMin++;<br>                }<br>              }<br>            }<br>          } else {<br>            if (maxPos &lt; dist - 1) {<br>              minPos++;<br>              maxPos++;<br>            } else {<br>              if (minPos == maxPos) {<br>                <br>              } else {<br>                minPos++;<br>                if (maxPos == minPos) {<br>                  cntInMin += cntInMax;<br>                  cntInMax = 0;<br>                } else {<br>                  cntInMax++;<br>                }<br>              }<br>            }<br>          }<br>        }<br>        res += minPos * 1L * cntInMin;<br>        res += maxPos * 1L * cntInMax;<br>        for (int i = minPos + 1; i &lt; maxPos; i++)<br>          res += i;<br>      }<br>    }<br>    return res;<br>  }<br> <br>}<br></td>