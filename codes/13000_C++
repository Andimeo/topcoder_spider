<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;vector&gt;<br>#include &lt;list&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;deque&gt;<br>#include &lt;stack&gt;<br>#include &lt;bitset&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;functional&gt;<br>#include &lt;numeric&gt;<br>#include &lt;utility&gt;<br>#include &lt;sstream&gt;<br>#include &lt;iostream&gt;<br>#include &lt;iomanip&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;ctime&gt;<br> <br>using namespace std;<br> <br>class OneDimensionalRobotEasy {<br>public:<br>  int finalPosition(string, int, int);<br>};<br> <br>int OneDimensionalRobotEasy::finalPosition(string commands, int A, int B)<br>{<br>  if(A&gt;0)<br>    A=-A;<br>  int i,pos=0;<br>  for(i=0;i&lt;commands.length();i++)<br>  {<br>    if(commands[i]=='R')<br>    {<br>      if(pos&lt;B)<br>        pos++;<br>    }<br>    else<br>    {<br>      if(pos&gt;A)<br>        pos--;<br>    }<br>  }<br>  return pos;<br>}<br></td>