<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;vector&gt;<br>#include &lt;list&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;queue&gt;<br>#include &lt;deque&gt;<br>#include &lt;stack&gt;<br>#include &lt;bitset&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;functional&gt;<br>#include &lt;numeric&gt;<br>#include &lt;utility&gt;<br>#include &lt;sstream&gt;<br>#include &lt;iostream&gt;<br>#include &lt;iomanip&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;ctime&gt;<br>#include &lt;cstring&gt;<br> <br>using namespace std;<br> <br>const int MAX_N = 50 + 10;<br>bool g[MAX_N][MAX_N], e[MAX_N][MAX_N];<br> <br>int scc[MAX_N], num[MAX_N];<br> <br>int dp[MAX_N];<br> <br>class BigO {<br>public:<br>  int minK(vector&lt;string&gt; graph) {<br>    //scc<br>    int n = graph.size();<br>    for (int i = 0; i &lt; n; ++i) {<br>      for (int j = 0; j &lt; n; ++j) {<br>        g[i][j] = e[i][j] = graph[i][j] == 'Y';<br>      }<br>    }<br> <br>    for (int k = 0; k &lt; n; ++k) {<br>      for (int i = 0; i &lt; n; ++i) {<br>        for (int j = 0; j &lt; n; ++j) {<br>          g[i][j] = g[i][j] || (g[i][k] &amp;&amp; g[k][j]);<br>        }<br>      }<br>    }<br> <br>    memset(scc, -1, sizeof scc);<br>    int cnt = 0;<br> <br>    for (int i = 0; i &lt; n; ++i) {<br>      if (scc[i] != -1)<br>        continue;<br>      scc[i] = cnt;<br>      num[cnt] = 1;<br> <br>      for (int j = 0; j &lt; n; ++j)<br>        if (g[i][j] &amp;&amp; g[j][i] &amp;&amp; (i != j)) {<br>          scc[j] = scc[i];<br>          num[cnt]++;<br>        }<br> <br>      cnt++;<br>    }<br> <br>    //check that each scc is a cycle<br> <br>    for (int i = 0; i &lt; cnt; ++i) {<br>      if (num[i] &gt; 1) {<br>        for (int j = 0; j &lt; n; ++j)<br>          if (scc[j] == i) {<br>            int nIn = 0, nOut = 0;<br>            for (int k = 0; k &lt; n; ++k)<br>              if (scc[k] == i) {<br>                if (e[j][k])<br>                  ++nOut;<br>                if (e[k][j])<br>                  ++nIn;<br>              }<br>            if (nIn != 1 || nOut != 1)<br>              return -1;<br>          }<br>      }<br>    }<br> <br>    //rebuild scc dag<br>    memset(dp, 0, sizeof dp);<br>    for (int i = 0; i &lt; cnt; ++i) {<br>      dp[i] = num[i] &gt; 1;<br>    }<br> <br>    for (int iter = 0; iter &lt; cnt * 2; ++iter) {<br>      for (int i = 0; i &lt; n; ++i) {<br>        for (int j = 0; j &lt; n; ++j)<br>          if (e[i][j]) {<br>            int a = scc[i], b = scc[j];<br>            if (a == b)<br>              continue;<br>            dp[a] = max(dp[a], dp[b] + (num[a] &gt; 1));<br>          }<br>      }<br>    }<br> <br>    int ans = *max_element(dp, dp + cnt);<br>    if (ans &gt;= 2)<br>      return ans - 1;<br>    return 0;<br>  }<br>};<br> <br> <br>//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!<br></td>