<td class="problemText" colspan="8" valign="middle" align="left">
            #import math,string,itertools,fractions,heapq,collections,re,array,bisect<br> <br> <br> <br>INF = 2147483647<br> <br>def sccs(al):<br>    N = len(al)<br>    visited = [False] * N<br>    order = []<br>    for i in range(N):<br>        if visited[i]:<br>            continue<br>        dfs(al, i, visited, order)<br> <br>    order.reverse()<br>    visited = [False] * N<br>    tral = transposeAL(al)<br>    re = []<br>    for i in order:<br>        if visited[i]:<br>            continue<br>        scc = []<br>        dfs(tral, i, visited, scc)<br>        re.append(set(scc))<br>    return re<br> <br>def dfs(al, i, visited, order):<br>    visited[i] = True<br>    for k in al[i]:<br>        if not visited[k]:<br>            dfs(al, k, visited, order)<br>    order.append(i)<br> <br>def transposeAL(al):<br>    N = len(al)<br>    tral = [[] for i in range(N)]<br>    for i, neighbours in enumerate(al):<br>        for n in neighbours:<br>            tral[n].append(i)<br>    return tral<br> <br>def horrible(sccomponents, al):<br>    for scc in sccomponents:<br>        for v in scc:<br>            branches = 0<br>            for w in al[v]:<br>                if w in scc:<br>                    branches += 1<br>                if branches &gt;= 2:<br>                    return True<br>    return False<br> <br>def collapse(sccomponents, al):<br>    re = [set() for i in range(len(sccomponents))]<br>    special = [len(scc) &gt;= 2 for scc in sccomponents]<br>    renaming = {}<br>    for i, scc in enumerate(sccomponents):<br>        for v in scc:<br>            renaming[v] = i<br>    for i, scc in enumerate(sccomponents):<br>        for v in scc:<br>            for w in al[v]:<br>                re[renaming[v]].add(renaming[w])<br> <br>    return (re, special)<br> <br>def longestPath(graph):<br>    al, special = graph<br> <br>    N = len(al)<br>    visited = [False] * N<br>    order = []<br>    for i in range(N):<br>        if visited[i]:<br>            continue<br>        dfs(al, i, visited, order)<br> <br>    order.reverse()<br> <br>    longest = [-1 for i in range(N)]<br>    for v in reversed(order):<br>        best = -1<br>        for w in al[v]:<br>            best = max(best, longest[w])<br>        if special[v]:<br>            longest[v] = best + 1<br>        else:<br>            longest[v] = best<br> <br>    return max(0, max(longest))<br>    <br> <br>class BigO:<br>    def minK(self, graph):<br>        graph = list(graph)<br>        al = [[] for i in range(len(graph))]<br>        for i, a in enumerate(graph):<br>            for k, connection in enumerate(a):<br>                if connection == 'Y':<br>                    al[i].append(k)<br> <br>        sccomponents = sccs(al)<br>        if horrible(sccomponents, al):<br>            return -1<br>        acyclic = collapse(sccomponents, al)<br>        return longestPath(acyclic)<br></td>