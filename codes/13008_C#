<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections;<br>using System.Collections.Generic;<br>using System.Diagnostics;<br>using System.Linq;<br>using System.Numerics;<br>using System.Text;<br>using E = System.Linq.Enumerable;<br> <br>public class Egalitarianism2 {<br>    class Edge {<br>        public int Index1, Index2;<br>        public double Distance;<br>        public double Weight;<br>    }<br> <br>    public double Distance(int x1, int y1, int x2, int y2) {<br>        double dx = x1 - x2;<br>        double dy = y1 - y2;<br>        return Math.Sqrt(dx * dx + dy * dy);<br>    }<br> <br> <br>    public class DisjointSet {<br>        private int[] group;<br>        public DisjointSet(int n) {<br>            group = new int[n];<br>            Clear();<br>        }<br>        public bool unionSet(int x, int y) {<br>            x = root(x); y = root(y);<br>            if (x != y) {<br>                if (group[y] &lt; group[x]) return unionSet(y, x);<br>                group[x] += group[y];<br>                group[y] = x;<br>            }<br>            return x != y;<br>        }<br>        public bool isSameSet(int x, int y) { return root(x) == root(y); }<br>        public int root(int x) { return group[x] &lt; 0 ? x : group[x] = root(group[x]); }<br>        public int size(int x) { return -group[root(x)]; }<br>        public void Clear() {<br>            for (int i = 0; i &lt; group.Length; i++) {<br>                group[i] = -1;<br>            }<br>        }<br>    };<br> <br> <br>    public double minStdev(int[] x, int[] y) {<br>        int n = x.Length;<br> <br>        List&lt;Edge&gt; edges = new List&lt;Edge&gt;();<br>        for (int i = 0; i &lt; n; i++) {<br>            for (int j = 0; j &lt; i; j++) {<br>                edges.Add(new Edge() {<br>                    Index1 = i,<br>                    Index2 = j,<br>                    Distance = Distance(x[i], y[i], x[j], y[j])<br>                });<br>            }<br>        }<br>        double ans = 1e100;<br> <br>        var averageCandidate = (<br>            from e1 in edges<br>            from e2 in edges<br>            select (e1.Distance + e2.Distance) / 2.0<br>        ).Distinct().SelectMany(v =&gt; new[] { v - 1e-3, v + 1e-3 }).ToArray();<br> <br>        foreach (var average in averageCandidate) {<br>            for (int i = 0; i &lt; edges.Count; i++) {<br>                edges[i].Weight = Math.Abs(edges[i].Distance - average);<br>            }<br>            edges.Sort((e1, e2) =&gt; {<br>                return e1.Weight.CompareTo(e2.Weight);<br>            });<br> <br>            DisjointSet DS = new DisjointSet(n);<br>            List&lt;Edge&gt; choised = new List&lt;Edge&gt;();<br>            double sum = 0.0;<br>            foreach (var e in edges) {<br>                if (DS.isSameSet(e.Index1, e.Index2)) continue;<br>                DS.unionSet(e.Index1, e.Index2);<br>                sum += e.Distance;<br>                choised.Add(e);<br>            }<br>            double avg = sum / (n - 1);<br>            double dev = 0.0;<br>            foreach (var e in choised) {<br>                dev += (avg - e.Distance) * (avg - e.Distance);<br>            }<br>            dev = Math.Sqrt(dev / (n - 1));<br>            ans = Math.Min(ans, dev);<br>        }<br> <br>        return ans;<br>    }<br>}<br> <br>// Powered by Greed 2.0-beta<br></td>