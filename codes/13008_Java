<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br><br>public class Egalitarianism2 {<br><br>  static double len(int x1, int y1, int x2, int y2) {<br>    int dx = x2 - x1;<br>    int dy = y2 - y1;<br>    return Math.sqrt(1.0 * dx * dx + 1.0 * dy * dy);<br>  }<br><br>  static class Edge implements Comparable&lt;Edge&gt; {<br>    int v1, v2;<br>    double len;<br><br>    public int compareTo(Edge arg0) {<br>      return Double.compare(len, arg0.len);<br>    }<br><br>    public Edge(int v1, int v2, double len) {<br>      this.v1 = v1;<br>      this.v2 = v2;<br>      this.len = len;<br>    }<br>  }<br><br>  int get(int[] p, int x) {<br>    return p[x] == x ? x : (p[x] = get(p, p[x]));<br>  }<br><br>  double go(int n, Edge[] e, final double mid) {<br>    int[] p = new int[n];<br>    for (int i = 0; i &lt; n; i++) {<br>      p[i] = i;<br>    }<br><br>    double[] vals = new double[n - 1];<br>    int valPtr = 0;<br>    <br>    Arrays.sort(e, new Comparator&lt;Edge&gt;() {<br><br>      @Override<br>      public int compare(Edge arg0, Edge arg1) {<br>        return Double.compare(Math.abs(arg0.len - mid), Math.abs(arg1.len - mid));<br>      }<br>      <br>    });<br><br>    for (int i = 0; valPtr &lt; n - 1; i++) {<br>      Edge cur = e[i];<br>      int v1 = get(p, cur.v1);<br>      int v2 = get(p, cur.v2);<br>      if (v1 == v2)<br>        continue;<br>      p[v2] = v1;<br>      vals[valPtr++] = cur.len;<br>    }<br><br>    double mean = 0;<br>    for (int i = 0; i &lt; n - 1; i++) {<br>      mean += vals[i];<br>    }<br>    mean /= n - 1;<br><br>    double sumD = 0;<br>    for (int i = 0; i &lt; n - 1; i++) {<br>      sumD += (vals[i] - mean) * (vals[i] - mean);<br>    }<br>    <br>    return sumD;<br><br>  }<br><br>  public double minStdev(int[] x, int[] y) {<br>    int n = x.length;<br>    Edge[] e = new Edge[n * (n - 1) / 2];<br>    for (int i = 0, k = 0; i &lt; n; i++) {<br>      for (int j = i + 1; j &lt; n; j++) {<br>        e[k++] = new Edge(i, j, len(x[i], y[i], x[j], y[j]));<br>      }<br>    }<br>    <br>    double ans = 1e50;<br>    <br>    List&lt;Double&gt; mids = new ArrayList&lt;&gt;();<br>    <br>    for (int i = 0; i &lt; e.length; i++) {<br>      for (int j = i + 1; j &lt; e.length; j++) {<br>        double mid = (e[i].len + e[j].len) * 0.5;<br>        mids.add(mid);<br>      }<br>    }<br>    <br>    mids.add(0.0);<br>    mids.add(10_000_000.0);<br>    <br>    Collections.sort(mids);<br>    <br>    for (int i = 0; i &lt; mids.size() - 1; i++) {<br>      double where = 0.5 * (mids.get(i) + mids.get(i + 1));<br>      ans = Math.min(ans, go(n, e, where));<br>    }<br><br>    return Math.sqrt(ans / (n - 1));<br>  }<br><br>}<br></td>