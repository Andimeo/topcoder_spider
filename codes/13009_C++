<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;vector&gt;<br>#include &lt;list&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;deque&gt;<br>#include &lt;stack&gt;<br>#include &lt;bitset&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;functional&gt;<br>#include &lt;numeric&gt;<br>#include &lt;utility&gt;<br>#include &lt;sstream&gt;<br>#include &lt;iostream&gt;<br>#include &lt;iomanip&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;ctime&gt;<br> <br>using namespace std;<br> <br>class ElephantDrinking {<br>public:<br>  int maxSum(vector &lt;string&gt;);<br>};<br> <br>#define up UP<br>#define left LEFT<br>#define right RIGHT<br>#define down DOWN<br> <br>const int N = 55;<br> <br>int a[N][N];<br>int left[N][N], right[N][N], up[N][N], down[N][N];<br>int upleft[N][N], upright[N][N], downleft[N][N], downright[N][N];<br>int bestrow[N];<br> <br>int ElephantDrinking::maxSum(vector &lt;string&gt; field) {<br>  int n = field.size();<br>  int ans = 0;<br>  for (int rot = 0; rot &lt; 2; rot++) {<br>    for (int i = 1; i &lt;= n; i++)<br>      for (int j = 1; j &lt;= n; j++)<br>        if (rot == 0) a[i][j] = field[i - 1][j - 1] - '0';<br>        else a[i][j] = field[j - 1][i - 1] - '0';<br>    for (int i = 1; i &lt;= n; i++) {<br>      left[i][0] = 0;<br>      for (int j = 1; j &lt;= n; j++) left[i][j] = max(left[i][j - 1], a[i][j]);<br>      right[i][n + 1] = 0;<br>      for (int j = n; j &gt;= 1; j--) right[i][j] = max(right[i][j + 1], a[i][j]);<br>    }<br>    for (int j = 1; j &lt;= n; j++) {<br>      up[0][j] = 0;<br>      for (int i = 1; i &lt;= n; i++) up[i][j] = max(up[i - 1][j], a[i][j]);<br>      down[n + 1][j] = 0;<br>      for (int i = n; i &gt;= 1; i--) down[i][j] = max(down[i + 1][j], a[i][j]);<br>    }<br>    for (int i = 0; i &lt;= n; i++)<br>      for (int j = 0; j &lt;= n; j++)<br>        if (i == 0 || j == 0) upleft[i][j] = 0;<br>        else upleft[i][j] = max(up[i][j] + upleft[i][j - 1], left[i][j] + upleft[i - 1][j]);<br>    for (int i = n + 1; i &gt;= 1; i--)<br>      for (int j = 0; j &lt;= n; j++)<br>        if (i == n + 1 || j == 0) downleft[i][j] = 0;<br>        else downleft[i][j] = max(down[i][j] + downleft[i][j - 1], left[i][j] + downleft[i + 1][j]);<br>    for (int i = 0; i &lt;= n; i++)<br>      for (int j = n + 1; j &gt;= 1; j--)<br>        if (i == 0 || j == n + 1) upright[i][j] = 0;<br>        else upright[i][j] = max(up[i][j] + upright[i][j + 1], right[i][j] + upright[i - 1][j]);<br>    for (int i = n + 1; i &gt;= 1; i--)<br>      for (int j = n + 1; j &gt;= 1; j--)<br>        if (i == n + 1 || j == n + 1) downright[i][j] = 0;<br>        else downright[i][j] = max(down[i][j] + downright[i][j + 1], right[i][j] + downright[i + 1][j]);<br>    for (int i = 1; i &lt;= n; i++) {<br>      bestrow[i] = 0;<br>      for (int j = 0; j &lt;= n; j++) bestrow[i] = max(bestrow[i], left[i][j] + right[i][j + 1]);<br>    }<br>    for (int ia = 1; ia &lt;= n; ia++)<br>      for (int ib = ia; ib &lt;= n; ib++) {<br>        int maxup = 0;<br>        for (int j = 0; j &lt;= n; j++) maxup = max(maxup, upleft[ia - 1][j] + upright[ia - 1][j + 1]);<br>        int maxdown = 0;<br>        for (int j = 0; j &lt;= n; j++) maxdown = max(maxdown, downleft[ib + 1][j] + downright[ib + 1][j + 1]);<br>        int total = maxup + maxdown;<br>        for (int i = ia; i &lt;= ib; i++) total += bestrow[i];<br>        if (total &gt; ans) ans = total;<br>      }<br>    for (int ia = 1; ia &lt;= n; ia++)<br>      for (int ib = ia + 1; ib &lt;= n; ib++)<br>        for (int ja = 1; ja &lt;= n; ja++)<br>          for (int jb = ja + 1; jb &lt;= n; jb++) {<br>            int total = upleft[ia][jb - 1] + upright[ib - 1][jb] + downright[ib][ja + 1] + downleft[ia + 1][ja];<br>            if (total &gt; ans) ans = total;<br>          }<br>  }<br>  return ans;<br>}<br> <br> <br>//Powered by [KawigiEdit] 2.0!<br></td>