<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;math.h&gt;<br>#include &lt;stdio.h&gt;<br>#include &lt;string.h&gt;<br>#include &lt;vector&gt;<br>#include &lt;string&gt;<br>#include &lt;queue&gt;<br>#include &lt;map&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;cmath&gt;<br>#include &lt;iostream&gt;<br>#include &lt;sstream&gt;<br>using namespace std;<br> <br>const int mmod = 1000000007;<br>const int max_ver = 1000000;<br>int same[max_ver+1], diff[max_ver+1];<br> <br>class CycleColoring<br>{<br>  public:<br>  void precalc(int K)<br>  {<br>    same[0] = 1;<br>    diff[0] = 0;<br>    <br>    int one = 1;<br>    int two = 0;<br>    int other = 0;<br>    for (int i=1; i&lt;=max_ver; i++) {<br>      int next_one = (two + other * (long long)(K-2)) % mmod;<br>      int next_two = (one + other * (long long)(K-2)) % mmod;<br>      int next_other = (one + two + other * (long long)(K-3)) % mmod;<br>      one = next_one;<br>      two = next_two;<br>      if (K &gt; 2) other = next_other;<br>      same[i] = one;<br>      diff[i] = two;<br>    }<br>  }<br>  <br>  int countColorings(vector &lt;int&gt; cnt, vector &lt;int&gt; A, vector &lt;int&gt; B, int K)<br>  {<br>    precalc(K);<br>    <br>    int n = cnt.size();<br>    cnt.push_back(cnt[0]);<br>    A.push_back(A[0]);<br>    B.push_back(B[0]);<br>    int one = K;<br>    int two = 0;<br>    int other = 0;<br>    <br>    for (int i=1; i&lt;=n; i++) {<br>      int ll = B[i-1] - A[i];<br>      if (ll &lt; 0) ll += cnt[i];<br>      int rr = cnt[i] - ll;<br>      long long ss = (same[ll] * (long long)same[rr]) % mmod;<br>      long long dd = (diff[ll] * (long long)diff[rr]) % mmod;<br>      long long one_1 = (two + other * (long long)(K-2)) % mmod;<br>      long long two_1 = (one + other * (long long)(K-2)) % mmod;<br>      long long other_1 = (one + two + other * (long long)(K-3)) % mmod;<br>      int next_one = (ss * one + dd * one_1) % mmod;<br>      int next_two = (ss * two + dd * two_1) % mmod;<br>      int next_other = (ss * other + dd * other_1) % mmod;<br>      one = next_one;<br>      two = next_two;<br>      if (K&gt;2) other = next_other;<br>    }<br>    return one;<br>  };<br>};<br></td>