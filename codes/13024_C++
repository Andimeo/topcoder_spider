<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;iostream&gt;<br>#include &lt;sstream&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;vector&gt;<br>#include &lt;string&gt;<br>#include &lt;queue&gt;<br>#include &lt;stack&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cctype&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cstring&gt;<br> <br>using namespace std;<br>const int MAX = 52;<br>const int MM = 5002;<br> <br>struct Mission {<br>    int duration, refuel;<br>};<br> <br>int n;<br>Mission a[MAX];<br>int dyn[MAX][MM];<br> <br>void sortByFuel() {<br>    for (int i = 0; i &lt; n; i++) {<br>        for (int c = 0; c &lt; n - 1; c++) {<br>            if (a[c].refuel &gt; a[c + 1].refuel)<br>                swap(a[c], a[c + 1]);<br>        }<br>    }<br>}<br> <br>void sortByDuration() {<br>    for (int i = 0; i &lt; n; i++) {<br>        for (int c = 0; c &lt; n - 1; c++) {<br>            if (a[c].duration &gt; a[c + 1].duration)<br>                swap(a[c], a[c + 1]);<br>        }<br>    }<br>}<br> <br>void sortByDurationMinusFuel() {<br>    for (int i = 0; i &lt; n; i++) {<br>        for (int c = 0; c &lt; n - 1; c++) {<br>            if (a[c].duration - a[c].refuel &gt; a[c + 1].duration - a[c + 1].refuel)<br>                swap(a[c], a[c + 1]);<br>        }<br>    }<br>}<br> <br>int recurse(int idx, int rem) {<br>    if (idx &gt;= n)<br>        return 0;<br>    if (dyn[idx][rem] != -1)<br>        return dyn[idx][rem];<br>    <br>    int ans = 0;<br>    // Don't take current mission<br>    ans = max(ans, recurse(idx + 1, rem));<br>    // Take current mission<br>    if (rem &gt;= a[idx].duration) {<br>        ans = max(ans, recurse(idx + 1, rem - a[idx].duration + a[idx].refuel) + 1);<br>    }<br>    return dyn[idx][rem] = ans;<br>}<br> <br>class AlbertoTheAviator {<br>    public:<br>    int MaximumFlights(int F, vector &lt;int&gt; duration, vector &lt;int&gt; refuel) {<br>        n = (int)duration.size();<br>        for (int i = 0; i &lt; n; i++)<br>            a[i].duration = duration[i], a[i].refuel = refuel[i];<br>        <br>        int ans = 0;<br>        sortByFuel();<br>        memset(dyn, -1, sizeof(dyn));<br>        ans = max(ans, recurse(0, F));<br>        reverse(a, a + n);<br>        memset(dyn, -1, sizeof(dyn));<br>        ans = max(ans, recurse(0, F));<br>        <br>        sortByDuration();<br>        memset(dyn, -1, sizeof(dyn));<br>        ans = max(ans, recurse(0, F));<br>        reverse(a, a + n);<br>        memset(dyn, -1, sizeof(dyn));<br>        ans = max(ans, recurse(0, F));<br>        <br>        sortByDurationMinusFuel();<br>        memset(dyn, -1, sizeof(dyn));<br>        ans = max(ans, recurse(0, F));<br>        reverse(a, a + n);<br>        memset(dyn, -1, sizeof(dyn));<br>        ans = max(ans, recurse(0, F));<br>        <br>        return ans;<br>    }<br>};<br> <br> <br>// Powered by PopsEdit<br>// Powered by TesterDream 1.2.4 by fushar (December 19 2012)<br>// Powered by CodeProcessor<br></td>