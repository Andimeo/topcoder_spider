<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;algorithm&gt;<br>#include &lt;functional&gt;<br>#include &lt;numeric&gt;<br>#include &lt;iostream&gt;<br>#include &lt;iomanip&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cmath&gt;<br>#include &lt;complex&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;ctime&gt;<br>#include &lt;cstring&gt;<br>#include &lt;cassert&gt;<br>#include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;list&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;deque&gt;<br>#include &lt;queue&gt;<br>#include &lt;stack&gt;<br>#include &lt;bitset&gt;<br>#include &lt;sstream&gt;<br>using namespace std;<br> <br>#define LL long long<br>#define LD long double<br>#define PR pair&lt;int,int&gt;<br> <br>#define Fox(i,n) for (i=0; i&lt;n; i++)<br>#define Fox1(i,n) for (i=1; i&lt;=n; i++)<br>#define FoxI(i,a,b) for (i=a; i&lt;=b; i++)<br>#define FoxR(i,n) for (i=n-1; i&gt;=0; i--)<br>#define FoxR1(i,n) for (i=n; i&gt;0; i--)<br>#define FoxRI(i,a,b) for (i=b; i&gt;=a; i--)<br>#define Foxen(i,s) for (i=s.begin(); i!=s.end(); i++)<br>#define Min(a,b) a=min(a, b)<br>#define Max(a,b) a=max(a, b)<br>#define Sz(s) int((s).size())<br>#define All(s) (s).begin(),(s).end()<br>#define Fill(s,v) memset(s,v,sizeof(s))<br>#define pb push_back<br>#define mp make_pair<br>#define x first<br>#define y second<br> <br>template&lt;typename T&gt; T Abs(T x) { return(x&lt;0 ? -x : x); }<br>template&lt;typename T&gt; T Sqr(T x) { return(x*x); }<br> <br>const int INF = (int)1e9;<br>const LD EPS = 1e-9;<br>const LD PI = acos(-1.0);<br> <br>struct TheMatrix {<br>  int MaxArea(vector &lt;string&gt; B) {<br>    int N=Sz(B);<br>    int M=Sz(B[0]);<br>    int i,j,z,a,b,m;<br>    int up[100];<br>    int ans=1;<br>      Fox(z,2)<br>      {<br>          Fox(j,M)<br>            up[j]=0;<br>          Fox(i,N)<br>          {<br>            Fox(j,M)<br>              if (((B[i][j]-'0')^((i+j)%2))==z)<br>                up[j]++;<br>              else<br>                up[j]=0;<br>            Fox(a,M)<br>            {<br>              m=INF;<br>                FoxI(b,a,M-1)<br>                {<br>                  Min(m,up[b]);<br>                  Max(ans,(b-a+1)*m);<br>                }<br>            }<br>          }<br>      }<br>    return(ans);<br>  }<br>};<br> <br> <br> <br> <br> <br>//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!<br></td>