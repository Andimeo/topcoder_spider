<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.Arrays;<br>import java.util.Comparator;<br>import java.util.NoSuchElementException;<br> <br>/**<br> * Built using CHelper plug-in<br> * Actual solution is at the top<br> * @author Egor Kulikov (egor@egork.net)<br> */<br>public class LeftAndRightHandedDiv1 {<br>    public long countSwaps(String Y, int A, int B, int C, int D, int N) {<br>    long index = A;<br>    char[] sequence = new char[N];<br>    for (int i = 0; i &lt; N; i++) {<br>      sequence[i] = Y.charAt((int) (index % Y.length()));<br>      index = (index * B + C) % D;<br>    }<br>    int lCount = ArrayUtils.count(sequence, 'L');<br>    if (lCount == 0 || lCount == N)<br>      return 0;<br>    int[] qty = new int[N + 1];<br>    for (int i = 0; i &lt; N; i++)<br>      qty[i + 1] = qty[i] + (sequence[i] == 'R' ? 1 : 0);<br>    long base = 0;<br>    int skipped = 0;<br>    for (int i = 0; i &lt; N; i++) {<br>      if (sequence[i] == 'L')<br>        skipped++;<br>      else<br>        base += Math.min(skipped, lCount - skipped);<br>    }<br>    if (lCount == 1)<br>      return 0;<br>    if (lCount % 2 == 0) {<br>      int middle = -1;<br>      skipped = 0;<br>      for (int i = 0; i &lt; N; i++) {<br>        if (sequence[i] == 'L')<br>          skipped++;<br>        if (lCount == 2 * skipped) {<br>          middle = i;<br>          break;<br>        }<br>      }<br>      long answer = base;<br>      for (int i = 0; i &lt; N; i++) {<br>        if (sequence[i] == 'R')<br>          continue;<br>        middle++;<br>        if (middle == N)<br>          middle = 0;<br>        while (sequence[middle] == 'R') {<br>          middle++;<br>          if (middle == N)<br>            middle = 0;<br>        }<br>        base -= qty(i, middle, qty);<br>        base += qty(middle, i, qty);<br>        answer = Math.min(answer, base);<br>      }<br>      return answer;<br>    } else {<br>      int middleLeft = -1;<br>      int middleRight = -1;<br>      skipped = 0;<br>      for (int i = 0; i &lt; N; i++) {<br>        if (sequence[i] == 'L')<br>          skipped++;<br>        if (lCount == 2 * skipped + 1) {<br>          middleLeft = i;<br>        }<br>        if (lCount == 2 * skipped - 1) {<br>          middleRight = i;<br>          break;<br>        }<br>      }<br>      long answer = base;<br>      for (int i = 0; i &lt; N; i++) {<br>        if (sequence[i] == 'R')<br>          continue;<br>        middleLeft = middleRight;<br>        middleRight++;<br>        if (middleRight == N)<br>          middleRight = 0;<br>        while (sequence[middleRight] == 'R') {<br>          middleRight++;<br>          if (middleRight == N)<br>            middleRight = 0;<br>        }<br>        base -= qty(i, middleLeft, qty);<br>        base += qty(middleRight, i, qty);<br>        answer = Math.min(answer, base);<br>      }<br>      return answer;<br>    }<br>    }<br> <br>  private long qty(int from, int to, int[] qty) {<br>    if (to &gt;= from)<br>      return qty[to] - qty[from];<br>    return qty[to] + qty[qty.length - 1] - qty[from];<br>  }<br>}<br> <br>class ArrayUtils {<br> <br>  public static int count(char[] array, char value) {<br>    int result = 0;<br>    for (char i : array) {<br>      if (i == value)<br>        result++;<br>    }<br>    return result;<br>  }<br> <br>  }<br></td>