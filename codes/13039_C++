<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;vector&gt;<br>#include &lt;list&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;queue&gt;<br>#include &lt;deque&gt;<br>#include &lt;stack&gt;<br>#include &lt;bitset&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;functional&gt;<br>#include &lt;numeric&gt;<br>#include &lt;utility&gt;<br>#include &lt;sstream&gt;<br>#include &lt;iostream&gt;<br>#include &lt;iomanip&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;ctime&gt;<br>#include &lt;cstring&gt;<br> <br>using namespace std;<br> <br>int A[6][6];<br>int viz[6][6];<br>int N;<br> <br>int possible(int mask) {<br>  memset(viz,0,sizeof(viz));<br>  for (int i = 0; i &lt; (4*N); i++) {<br>    if (mask &amp; (1 &lt;&lt; i)) {<br>      // active<br>      int section = i / N;<br>      int mod = i % N;<br>      if (section == 0) {<br>        // from (0,mod)<br>        bool ok = false;<br>        for (int j = 0; j &lt; N; j++) {<br>          if (viz[j][mod] &gt; 0) {<br>            return 0;<br>          }<br>          viz[j][mod] = 1;<br>          if (A[j][mod] &gt; 0) {<br>            ok = true;<br>            break;<br>          }<br>        }  <br>        if (!ok) return 0;<br>      } else if (section == 1) {<br>        // from (mod,N)<br>        bool ok = false;<br>        for (int j = N-1; j &gt;= 0; j--) {<br>          if (viz[mod][j] &gt; 0) return 0;<br>          viz[mod][j] = 1;<br>          if (A[mod][j] &gt; 0) {<br>            ok = true;<br>            break;<br>          }<br>        }<br>        if (!ok) return 0;<br>      } else if (section == 2) {<br>        // from (N,mod)<br>        bool ok = false;<br>        for (int j = N-1; j &gt;= 0; j--) {<br>          if (viz[j][mod] &gt; 0) return 0;<br>          viz[j][mod] = 1;<br>          if (A[j][mod] &gt; 0) {<br>            ok = true;<br>            break;<br>          }<br>        }<br>        if (!ok) return 0;<br>      } else if (section == 3) {<br>        // from (mod, 0)<br>        bool ok = false;<br>        for (int j = 0; j &lt; N; j++) {<br>          if (viz[mod][j] &gt; 0) {<br>            return 0;<br>          }<br>          viz[mod][j] = 1;<br>          if (A[mod][j] &gt; 0) {<br>            ok = true;<br>            break;<br>          }<br>        }  <br>        if (!ok) return 0;<br>      }<br>    }<br>  }<br>  return 1;<br>}<br> <br>class ElephantDrinkingEasy {<br>public:<br>  int maxElephants(vector &lt;string&gt; maps) {<br>    int res = 0;<br>    memset(A,0,sizeof(A));<br>    for (int i = 0; i &lt; maps.size(); i++) {<br>      for (int j = 0; j &lt; maps[i].size(); j++) {<br>        if (maps[i][j] == 'Y') A[i][j] = 1;<br>      }<br>    }<br>    N = maps.size();<br>    for (int i = 0; i &lt; (1 &lt;&lt; (4*N)); i++) {<br>      int x = possible(i);<br>      if (x &gt; 0) {<br>        int c = 0;<br>        for (int j = 0; j &lt; 4*N; j++) {<br>          if (i &amp; (1 &lt;&lt; j)) c++;<br>        }<br>        res = max(c, res);<br>      }<br>    }<br>    <br>    return res;<br>  }<br>};<br> <br> <br> <br>//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!<br></td>