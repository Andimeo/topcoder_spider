<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.ArrayList;<br>public class ElephantDrinkingEasy {<br>    class Point{<br>        int x, y;<br>        public Point(int x, int y){<br>            this.x = x;<br>            this.y = y;<br>        }<br>    }<br>    class Line{<br>        Point p0, p1;<br>        public Line(Point a, Point b){<br>            this.p0 = a;<br>            this.p1 = b;<br>        }<br>    }<br>    int ccw(Point p0, Point p1, Point p2)<br>    {<br>        int dx1=(p1.x-p0.x), dy1=(p1.y-p0.y);<br>        int dx2=(p2.x-p0.x), dy2=(p2.y-p0.y);<br>        if(dy1*dx2 &lt; dy2*dx1) return 1;<br>        if(dy1*dx2 &gt; dy2*dx1) return -1;<br>        if(dx1*dx2 &lt; 0 || dy1*dy2 &lt; 0) return -1;<br>        if((dx1*dx1+dy1*dy1) &gt;= (dx2*dx2+dy2*dy2))<br>            return 0;<br>        else<br>            return 1;<br>    }<br>    boolean intersection(Line l1,Line l2)<br>    {<br>        return ccw(l1.p0,l1.p1,l2.p0)*ccw(l1.p0,l1.p1,l2.p1) &lt;= 0 &amp;&amp;<br>                ccw(l2.p0,l2.p1,l1.p0)*ccw(l2.p0,l2.p1,l1.p1) &lt;= 0;<br>    }<br> <br>    public int maxElephants(String[] map){<br>        Line l1 = new Line(new Point(1,0), new Point(0,0));<br>        Line l2 = new Line(new Point(0,1), new Point(0,3));<br>        int n = map.length;<br>        int result=0;<br>        for(int bits=1; bits&lt;2&lt;&lt;(3*n); bits++){<br>            ArrayList&lt;Line&gt; lines = new ArrayList&lt;Line&gt;();<br>            boolean halted = false;<br>            for(int pos=0; pos&lt;n; pos++){<br>                if(((bits&gt;&gt;pos)&amp;1)&gt;0){<br>                    int j = pos;<br>                    Line line = null;<br>                    for(int i=0; i&lt;n; i++){<br>                        if(map[i].charAt(j)=='Y'){<br>                            line = new Line(new Point(0,j), new Point(i,j));<br>                            break;<br>                        }<br>                    }<br>                    if(line==null){<br>                        halted = true;<br>                        break;<br>                    }<br>                    lines.add(line);<br>                }<br>            }<br>            if(halted) continue;<br> <br>            for(int pos=n; pos&lt;2*n; pos++){<br>                if(((bits&gt;&gt;pos)&amp;1)&gt;0){<br>                    int i = pos-n;<br>                    Line line = null;<br>                    for(int j=n-1; j&gt;=0; j--){<br>                        if(map[i].charAt(j)=='Y'){<br>                            line = new Line(new Point(i,n-1), new Point(i,j));<br>                            for(Line preLine : lines){<br>                                if(intersection(line,preLine)){<br>                                    line = null;<br>                                    break;<br>                                }<br>                            }<br>                            break;<br>                        }<br>                    }<br>                    if(line==null){<br>                        halted = true;<br>                        break;<br>                    }<br>                    lines.add(line);<br>                }<br>            }<br>            if(halted) continue;<br> <br>            for(int pos=2*n; pos&lt;3*n; pos++){<br>                if(((bits&gt;&gt;pos)&amp;1)&gt;0){<br>                    int j = pos-2*n;<br>                    Line line = null;<br>                    for(int i=n-1; i&gt;=0; i--){<br>                        if(map[i].charAt(j)=='Y'){<br>                            line = new Line(new Point(n-1,j), new Point(i,j));<br>                            for(Line preLine : lines){<br>                                if(intersection(line,preLine)){<br>                                    line = null;<br>                                    break;<br>                                }<br>                            }<br>                            break;<br>                        }<br>                    }<br>                    if(line==null){<br>                        halted = true;<br>                        break;<br>                    }<br>                    lines.add(line);<br>                }<br>            }<br>            if(halted) continue;<br> <br> <br>            int count=0;<br>            for(int i=0; i&lt;n; i++){<br>                Line line = null;<br>                for(int j=0; j&lt;n; j++){<br>                    if(map[i].charAt(j)=='Y'){<br>                        line = new Line(new Point(i,0), new Point(i,j));<br>                        for(Line preLine : lines){<br>                            if(intersection(line,preLine)){<br>                                line = null;<br>                                break;<br>                            }<br>                        }<br>                        break;<br>                    }<br>                }<br>                if(line!=null) count++;<br>            }<br> <br> <br>            for(int pos=0; pos&lt;3*n; pos++){<br>                if(((bits&gt;&gt;pos)&amp;1)&gt;0) count++;<br>            }<br>            if(result&lt;count) result=count;<br>        }<br>        return result;<br>    }<br>}<br></td>