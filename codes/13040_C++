<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;iostream&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cstring&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cmath&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;functional&gt;<br>#include &lt;vector&gt;<br>#include &lt;stack&gt;<br>#include &lt;queue&gt;<br>#include &lt;deque&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;string&gt;<br>#include &lt;sstream&gt;<br>#include &lt;cassert&gt;<br><br>typedef long long LL;<br>const int maxint = 0x7f7f7f7f, mod = 1000000007;<br>const double eps = 1e-8, pi = acos(-1.0);<br><br>using namespace std;<br><br>class LCMSetEasy {<br>public:<br>  string include(vector &lt;int&gt; S, int x);<br>  <br><br>};<br><br>LL gcd(LL x, LL y) {<br>  return y == 0 ? x : gcd(y, x % y);<br>}<br><br>LL lcm(LL x, LL y) {<br>  return (LL)x / gcd(x, y) * y;<br>}<br><br>string LCMSetEasy::include(vector &lt;int&gt; S, int x) {<br>  LL l = 1;<br>  for (int v : S) {<br>    if (x % v == 0) l = lcm(l, v);<br>    if (l &gt; x) return "Impossible";<br>  }<br>  if (l == x) return "Possible";<br>  return "Impossible"; <br>}<br>  <br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003]<br>// Powered by CodeProcessor<br></td>