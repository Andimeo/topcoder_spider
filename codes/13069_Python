<td class="problemText" colspan="8" valign="middle" align="left">
            # -*- coding: utf-8 -*-<br>import math,string,itertools,fractions,heapq,collections,re,array,bisect<br> <br>class TwoLLogo:<br>    def countWays(self, grid):<br>        H = len(grid)<br>        W = len(grid[0])<br>        grid_y = [[-1] * W for i in xrange(H)]<br>        grid_x = [[-1] * W for i in xrange(H)]<br>        for x in xrange(W):<br>            count = -1<br>            for y in xrange(H):<br>                if grid[y][x] == '.':<br>                    count += 1<br>                else:<br>                    count = -1<br>                grid_y[y][x] = count<br>        for y in xrange(H):<br>            count = -1<br>            for x in reversed(xrange(W)):<br>                if grid[y][x] == '.':<br>                    count += 1<br>                else:<br>                    count = -1<br>                grid_x[y][x] = count<br>        result = 0<br>        for y in xrange(1, H):<br>            for x in xrange(W - 1):<br>                if grid[y][x] != '.':<br>                    continue<br>                for y2 in xrange(1, H):<br>                    for x2 in xrange(W - 1):<br>                        if x2 &lt;= x and y2 &lt;= y:<br>                            continue<br>                        if grid[y2][x2] != '.':<br>                            continue<br>                        if x &gt; x2 and y &lt; y2:<br>                            result += grid_x[y][x] * grid_y[y][x] * grid_x[y2][x2] * grid_y[y2][x2]<br>                        elif y == y2:<br>                            result += min((x2 - x - 1), grid_x[y][x]) * grid_y[y][x] * grid_x[y2][x2] * grid_y[y2][x2]<br>                        elif x == x2:<br>                            result += grid_x[y][x] * grid_y[y][x] * grid_x[y2][x2] * min((y2 - y - 1), grid_y[y2][x2])<br>                        elif x &lt; x2 and y &lt; y2:<br>                            result += min((x2 - x - 1), grid_x[y][x]) * grid_y[y][x] * grid_x[y2][x2] * min((y2 - y - 1), grid_y[y2][x2])<br>                            result += (grid_x[y][x] - min((x2 - x - 1), grid_x[y][x])) * grid_y[y][x] * grid_x[y2][x2] * min((y2 - y - 1), grid_y[y2][x2])<br>                            result += min((x2 - x - 1), grid_x[y][x]) * grid_y[y][x] * grid_x[y2][x2] * (grid_y[y2][x2] - min((y2 - y - 1), grid_y[y2][x2]))<br>        """print<br>        for y in xrange(H):<br>            for x in xrange(W):<br>                print grid_y[y][x],<br>            print"""<br>        """print<br>        for y in xrange(H):<br>            for x in xrange(W):<br>                print grid_x[y][x],<br>            print"""<br>        return result<br> <br># Powered by Greed 2.0-RC<br></td>