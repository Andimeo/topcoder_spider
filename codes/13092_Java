<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.Arrays;<br> <br>/**<br> * Built using CHelper plug-in<br> * Actual solution is at the top<br> */<br>public class AlternativePiles {<br>    static final int MODULO = (int) (1e9 + 7);<br> <br>    public int count(String C, int M) {<br>        int[][] ways = new int[M + 1][2 * M];<br>        int[][] nways = new int[M + 1][2 * M];<br>        ways[0][0] = 1;<br>        for (int i = 0; i &lt; C.length(); ++i) {<br>            char ch = C.charAt(i);<br>            for (int[] x : nways) Arrays.fill(x, 0);<br>            if (ch == 'R' || ch == 'W') {<br>                for (int oldBalance = 0; oldBalance &lt; M; ++oldBalance)<br>                    for (int oldRem = 0; oldRem &lt; 2 * M; ++oldRem) {<br>                        int old = ways[oldBalance][oldRem];<br>                        if (old &gt; 0) {<br>                            int newBalance = oldBalance + 1;<br>                            int newRem = oldRem + 1;<br>                            if (newRem &gt;= 2 * M) newRem = 0;<br>                            nways[newBalance][newRem] += old;<br>                            if (nways[newBalance][newRem] &gt;= MODULO) nways[newBalance][newRem] -= MODULO;<br>                        }<br>                    }<br>            }<br>            if (ch == 'G' || ch == 'W') {<br>                for (int oldBalance = 1; oldBalance &lt;= M; ++oldBalance)<br>                    for (int oldRem = 0; oldRem &lt; 2 * M; ++oldRem) {<br>                        int old = ways[oldBalance][oldRem];<br>                        if (old &gt; 0) {<br>                            int newBalance = oldBalance - 1;<br>                            int newRem = oldRem + 1;<br>                            if (newRem &gt;= 2 * M) newRem = 0;<br>                            nways[newBalance][newRem] += old;<br>                            if (nways[newBalance][newRem] &gt;= MODULO) nways[newBalance][newRem] -= MODULO;<br>                        }<br>                    }<br>            }<br>            if (ch == 'B' || ch == 'W') {<br>                for (int oldBalance = 0; oldBalance &lt;= M; ++oldBalance)<br>                    for (int oldRem = 0; oldRem &lt; 2 * M; ++oldRem) {<br>                        int old = ways[oldBalance][oldRem];<br>                        if (old &gt; 0) {<br>                            int newBalance = oldBalance;<br>                            int newRem = oldRem;<br>                            nways[newBalance][newRem] += old;<br>                            if (nways[newBalance][newRem] &gt;= MODULO) nways[newBalance][newRem] -= MODULO;<br>                        }<br>                    }<br>            }<br>            int[][] tmp = ways;<br>            ways = nways;<br>            nways = tmp;<br>        }<br>        return ways[0][0];<br>    }<br>}<br></td>