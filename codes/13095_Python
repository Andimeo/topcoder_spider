<td class="problemText" colspan="8" valign="middle" align="left">
            from fnmatch import fnmatch<br> <br>class MergeStrings:<br>  def getmin(self, S, A, B):<br>    self._cache = {}<br>    answer = self.calculate_min(S, A, B)<br>    return answer if answer else ""<br>  <br>  def calculate_min(self, S, A, B):<br>    try:<br>      return self._cache[A, B]<br>    except KeyError:<br>      pass<br>    if not S:<br>      return ""<br>    variants = []<br>    if A and S[0] in (A[0], '?'):<br>      tail = self.calculate_min(S[1:], A[1:], B)<br>      if tail is not None:<br>        variants.append(A[0] + tail)<br>    if B and S[0] in (B[0], '?'):<br>      tail = self.calculate_min(S[1:], A, B[1:])<br>      if tail is not None:<br>        variants.append(B[0] + tail)<br>    variants = [v for v in variants if v is not None]<br>    answer = min(variants) if variants else None<br>    self._cache[A, B] = answer<br>    return answer<br></td>