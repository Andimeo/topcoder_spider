<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;algorithm&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cmath&gt;<br>#include &lt;iostream&gt;<br>#include &lt;sstream&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;vector&gt;<br>#include &lt;string&gt;<br>#include &lt;cctype&gt;<br>using namespace std;<br><br>#define REP(i,n) for(int i=0;i&lt;(n);++i)<br>#define FOR(i,a,b) for(int i=(a);i&lt;=(b);++i)<br>#define FORD(i,a,b) for(int i=(a);i&gt;=(b);--i)<br>#define FOREACH(i,c) for(__typeof((c).begin()) i=(c).begin();i!=(c).end();++i)<br><br>typedef long long LL; typedef vector&lt;int&gt; VI; typedef vector&lt;string&gt; VS;<br>const int INF = 1000000000;<br>template&lt;class T&gt; inline int size(const T&amp;c) { return c.size(); }<br><br>string i2s(int x) {<br>  char buf[20];<br>  sprintf(buf,"%d",x);<br>  return buf;<br>}<br><br>const int MAX =1000000;<br><br><br>struct BalancedTrees {<br>  // MAIN<br>  int maxHeight(int k, int nn) {<br>    vector&lt;int&gt; f;<br>    f.push_back(0);<br>    while(f.back()&lt;=nn) {<br>      int h = size(f);<br>      int r = 1 + f[h-1] + f[max(h-k-1,0)];<br>      f.push_back(r);<br>    }<br>    return size(f)-2;<br>  }<br>};<br><br><br><br>// Powered by FileEdit<br></td>