<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;algorithm&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cmath&gt;<br>#include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;cctype&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;iostream&gt;<br>#include &lt;sstream&gt;<br>using namespace std;<br><br>#define REP(i,n) for(int i=0;i&lt;(n);++i)<br>#define FOR(i,a,b) for(int i=(a);i&lt;=(b);++i)<br>#define FORD(i,a,b) for(int i=(a);i&gt;=(b);--i)<br>#define FOREACH(it,c) for(__typeof((c).begin()) it=(c).begin();it!=(c).end();++it)<br><br>template&lt;class T&gt; inline int size(const T&amp;c) { return c.size(); }<br>typedef long long LL; typedef vector&lt;int&gt; VI; typedef vector&lt;string&gt; VS;<br>const int INF = 1000000000;<br><br>struct Tree {<br>  int x;<br>  Tree *l, *r;<br>};<br><br>int n;<br>Tree ttt[100];<br><br>VI go(Tree *t) {<br>  if(!t) return VI();<br>  VI L = go(t-&gt;l);<br>  VI R = go(t-&gt;r);<br>  int sr=size(R); int sl=size(L);<br>  VI res1,res2;<br>  if(sr&gt;=sl-1 &amp;&amp; sl&gt;0) {<br>    int pl=0,pr=0;<br>    while(sr-pr&gt;sl-pl-1) {<br>      res1.push_back(R[pr++]);<br>    }<br>    res1.push_back(t-&gt;x);<br>    res1.push_back(L[pl++]);<br>    while(pl&lt;sl) {<br>      res1.push_back(R[pr++]);<br>      res1.push_back(L[pl++]);<br>    }<br>  }<br>  if(sl&gt;=sr) {<br>    int pl=0,pr=0;<br>    while(sl-pl &gt; sr-pr) {<br>      res2.push_back(L[pl++]);<br>    }<br>    res2.push_back(t-&gt;x);<br>    while(pl&lt;sl) {<br>      res2.push_back(R[pr++]);<br>      res2.push_back(L[pl++]);<br>    }<br>  }<br>  if(res1.empty()) return res2;<br>  if(res2.empty()) return res1;<br>  if(res1&lt;res2) return res1; else return res2;<br>}<br><br>struct SkewHeaps {<br>  // MAIN<br>  vector &lt;int&gt; history(vector &lt;int&gt; parent) {<br>    n = size(parent)+1;<br>    REP(i,n) {<br>      ttt[i].l = ttt[i].r = 0; ttt[i].x = i;<br>    }<br>    REP(i,n-1) {<br>      int x = i+1;<br>      int p = parent[i];<br>      if(p&gt;=100) {<br>        ttt[p-100].r = &amp;ttt[x];<br>      }<br>      else {<br>        ttt[p].l = &amp;ttt[x];<br>      }<br>    }<br>    return go(&amp;ttt[0]);<br>  }<br>};<br><br><br>// Powered by FileEdit<br></td>