<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;iostream&gt;<br>#include &lt;sstream&gt;<br>#include &lt;queue&gt;<br>#include &lt;climits&gt;<br>using namespace std;<br> <br>typedef vector&lt;int&gt; VI;<br>typedef vector&lt;string&gt; VS;<br>typedef long long ll;<br> <br>char buffer[500];<br>string sval(int num)    { sprintf(buffer, "%d", num); return buffer; }<br>int    ival(string inp) { return atoi(inp.c_str()); }<br>float  fval(string inp) { return (float)atof(inp.c_str()); }<br>double dval(string inp) { return (double)atof(inp.c_str()); }<br> <br>VS split(string inp, string sep) {<br>   VS ans;<br>   inp += sep;      // this is SO ugly...<br>   for (int i = 0, j = 0; i &lt; inp.length(); i++)<br>      if (inp[i] == sep[0]) {<br>         ans.push_back(inp.substr(j, i - j));<br>         j = i + 1;<br>      }<br>   return ans;<br>}<br> <br>// ****************************************** //<br> <br>class Substitute {<br>   public:<br> <br>int getValue(string key, string code) {<br>  string ans;<br>  int j;<br>    for (int i = 0; i &lt; code.length(); i++) {<br>      char thisone = code[i];<br>      char inthere = false;<br>      for (j = 0; j &lt; key.length(); j++) {<br>        if (key[j] == thisone) { inthere = true; break; }<br>      }<br>      j++;<br>      if (j &gt; 9) j = 0;<br>      if (inthere) ans += sval(j);<br>    }<br>    return ival(ans);<br>   }<br>};<br> <br>// Powered by PopsEdit<br></td>