<td class="problemText" colspan="8" valign="middle" align="left">
            Option Explicit On <br>Option Strict On<br> <br>Imports System.Drawing<br> <br>Public Class Intersect<br>    Public Function area(ByVal x As Integer(), ByVal y As Integer()) As Integer<br>        Dim tmpCont As Integer<br>        Dim MaxCont As Integer = x.Length<br>        Dim tmpRect(MaxCont \ 2 - 1) As Rectangle<br>        Dim tmpTopX As Integer<br>        Dim tmpDownX As Integer<br>        Dim tmpTopY As Integer<br>        Dim tmpDownY As Integer<br>        Dim TmpTemp As Integer<br>        Dim tmpFinRect As Rectangle<br> <br>        While tmpCont &lt; MaxCont - 1<br>            tmpTopX = x(tmpCont)<br>            tmpDownX = x(tmpCont + 1)<br>            tmpTopY = y(tmpCont)<br>            tmpDownY = y(tmpCont + 1)<br>            If tmpTopX &gt; tmpDownX Then<br>                TmpTemp = tmpDownX<br>                tmpDownX = tmpTopX<br>                tmpTopX = TmpTemp<br>            End If<br>            If tmpTopY &gt; tmpDownY Then<br>                TmpTemp = tmpDownY<br>                tmpDownY = tmpTopY<br>                tmpTopY = TmpTemp<br>            End If<br>            tmpRect(tmpCont \ 2) = New Rectangle(tmpTopX, tmpTopY, tmpDownX - tmpTopX, tmpDownY - tmpTopY)<br>            tmpCont += 2<br>        End While<br>        For tmpCont = 0 To MaxCont \ 2 - 1<br>            If tmpCont = 0 Then<br>                tmpFinRect = tmpRect(tmpCont)<br>            Else<br>                If Not tmpFinRect.IntersectsWith(tmpRect(tmpCont)) Then Return 0<br>                tmpFinRect = Rectangle.Intersect(tmpFinRect, tmpRect(tmpCont))<br>            End If<br>        Next<br>        Return tmpFinRect.Width * tmpFinRect.Height<br>    End Function<br> <br> <br>End Class<br></td>