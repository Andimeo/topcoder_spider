<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;cmath&gt;<br>#include &lt;stdio.h&gt;<br>#include &lt;stdlib.h&gt;<br>#include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;iostream&gt;<br>#include &lt;sstream&gt;<br>#include &lt;set&gt;<br>#include &lt;algorithm&gt;<br>using namespace std;<br>typedef long long i64;<br> <br>string o,s;<br>int step[60];<br>int n;<br> <br>class WordParts {<br>  public:<br>  bool good(int i, int j){<br>    int len,k,l;<br>    len = j - i;<br>    k=0;<br>    while(k&lt;len){<br>      if(o[k]!=s[i+k+1]) break;<br>      k++;<br>    }<br>    if(k==len) return true;<br>    k=0;<br>    l = o.size();<br>    while(k&lt;len){<br>      if(o[l-k-1]!=s[j-k]) break;<br>      k++;<br>    }<br>    if(k==len) return true;<br>    return false;  <br>  }<br>    <br>    <br>  int partCount(string original, string compound) {<br>    s = " " + compound;<br>    o = original;<br>    n = compound.size();<br>    if(n==0) return 0;<br>    <br>    for(int i = 1; i &lt; 55; i++) step[i] = -1;<br>    step[0] = 0;<br>    <br>    for(int i = 0; i &lt; n; i++){<br>      for(int j=i+1;j&lt;=n;j++){        <br>        if((step[i]&gt;=0)&amp;&amp;good(i,j)){<br>          if(step[j]&lt;0) step[j] = step[i] + 1;<br>          else if(step[j] &gt; step[i] + 1) step[j] = step[i] + 1;<br>        }<br>      }<br>    }<br>    <br>    return step[n];<br>    <br>    <br>    <br>  }<br>};<br> <br>// Powered by PopsEdit<br></td>