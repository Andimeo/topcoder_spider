<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Text;<br>using System.Collections;<br> <br>public class StableSort<br>{<br>  private static int[] A;<br>  private static int[] B;<br>  private static int[] P;<br>  private static int[] Q;<br>  private static void Merge( int l, int r )<br>  {<br>    int m = (l + r) / 2;<br>    Array.Copy( A, l, B, l, r - l + 1 );<br>    Array.Copy( P, l, Q, l, r - l + 1 );<br>    int left = l - 1;<br>    int right = m;<br>    while( left &lt; m || right &lt; r )<br>    {<br>      if ( right &gt;= r || ( left &lt; m &amp;&amp; B[left + 1] &lt;= B[right + 1] ) )<br>      {<br>        A[++left + right - m] = B[left];<br>        P[left + right - m] = Q[left];<br>      }<br>      else<br>      {<br>        A[left + ++right - m] = B[right];<br>        P[left + right - m] = Q[right];<br>      }<br>    }<br>  }<br>  private static void Sort( int l, int r )<br>  {<br>    if ( r &gt; l )<br>    {<br>      Sort( l, (l + r) / 2 );  Sort( (l + r) / 2 + 1, r ); Merge( l, r );<br>    }<br>  }  <br>  public static int[] Sort( int[] keys, int[] values )<br>  {<br>    A = keys; B = new int[keys.Length]; P = new int[keys.Length];<br>    for( int i = 0; i &lt; keys.Length; i++ )  P[i] = i;<br>    Q = new int[keys.Length]; Sort( 0, keys.Length - 1);<br>    int[] result = new int[keys.Length];<br>    for( int i = 0; i &lt; keys.Length; i++ ) result[i] = values[P[i]];<br>    A = null; B = null; P = null; Q = null;<br>    return result;<br>  }<br>}<br><br>public class BinaryCardinality<br>{<br>  private int calc( int x )<br>  {<br>    int result = 0;<br>    while( x &gt; 0 )<br>    {<br>      result += x % 2;<br>      x /= 2;<br>    }<br>    return result;<br>  }<br>    public int[] arrange( int[] numbers )<br>    {<br>    int[] a = new int[numbers.Length];<br>    Array.Sort( numbers );<br>    for( int i = 0; i &lt; numbers.Length; i++ )<br>    {<br>      a[i] = calc( numbers[i] );<br>    }<br>    int[] result = StableSort.Sort( a, numbers );<br>        return result;<br>    }<br><br>}<br> <br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003]<br>// Powered by CodeProcessor<br></td>