<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections;<br>class Num {<br>  public Num(long n, long d) {<br>    long t = gcd(n, d);<br>    if (t != 0) {<br>      N = n / t;<br>      D = d / t;<br>    }<br>    else {<br>      N = n;<br>      D = d;<br>    }<br>  }<br>  public Num(Num n) {<br>    N = n.N;<br>    D = n.D;<br>  }<br>  long N, D;<br>  public Num getQuater() <br>  {<br>    return new Num(N, D * 4);<br>  }<br>  public Num getHalf() <br>  {<br>    return new Num(N, D * 2);<br>  }<br>  public static Num operator + (Num n1, Num n2) <br>  {<br>    long t = gcd(n1.D, n2.D);<br>    long d1 = n1.D / t;<br>    long d2 = n2.D / t;<br>    long n = d2 * n1.N + d1 * n2.N;<br>    long d = d1 * n2.D;<br>    return new Num(n, d);<br>  }<br>  static long gcd(long i1, long i2) {<br>    if (i1 % i2 == 0)<br>      return i2;<br>    else<br>      return gcd(i2, i1 % i2);<br>  }<br>  public override string ToString() {<br>    if (D == 1)<br>      return string.Format("{0}", N);<br>    else<br>      return string.Format("{0}/{1}", N, D);<br>  }<br>}<br>public class Dragons {<br>  public string snaug(int[] initialFood, int rounds) {<br>    Num[] n = new Num[6];<br>    for (int i = 0; i &lt; 6; ++i) {<br>      n[i] = new Num(initialFood[i], 1);<br>    }<br>    for (int i = 0; i &lt; rounds; ++i) {<br>      if (i == 0) {<br>        Num n0 = n[2].getQuater() + n[3].getQuater() + n[4].getQuater() + n[5].getQuater();<br>        Num n1 = new Num(n0);<br>        Num n2 = n[0].getQuater() + n[1].getQuater() + n[4].getQuater() + n[5].getQuater();<br>        Num n3 = new Num(n2);<br>        Num n4 = n[0].getQuater() + n[1].getQuater() + n[2].getQuater() + n[3].getQuater();<br>        Num n5 = new Num(n4);<br>        n = new Num[6] {n0, n1, n2, n3, n4, n5};<br>      }<br>      else {<br>        Num n0 = n[2].getHalf() + n[4].getHalf();<br>        Num n1 = new Num(n0);<br>        Num n2 = n[0].getHalf() + n[4].getHalf();;<br>        Num n3 = new Num(n2);<br>        Num n4 = n[0].getHalf() + n[2].getHalf();;<br>        Num n5 = new Num(n4);<br>        n = new Num[6] {n0, n1, n2, n3, n4, n5};<br>      }<br>    }<br>    return n[2].ToString();<br>  }<br>}<br><br><br>// Powered by FileEdit<br></td>