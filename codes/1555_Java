<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>public class CircleBugs {<br>  public int cycleLength(String formation) {<br>    String st = canon(formation);<br>    Map hist = new HashMap();<br>    hist.put(st, new Integer(0));<br>    for (int time = 1; true; ++time) {<br>      st = canon(next(st));<br>      Integer prev = (Integer) hist.put(st, new Integer(time));<br>      if (prev != null) return time - prev.intValue();<br>    }<br>  }<br>  <br>  String canon(String state) {<br>    String min = "Z";<br>    for (int i = 0; i &lt; state.length(); ++i) {<br>      String s = state.substring(i) + state.substring(0, i);<br>      if (min.compareTo(s) &gt; 0) min = s;<br>    }<br>    return min;<br>  }<br>  <br>  String next(String state) {<br>    char[] cc = new char[state.length()];<br>    for (int i = 0; i &lt; state.length(); ++i) {<br>      char a = state.charAt(i);<br>      char b = state.charAt((i + 1) % state.length());<br>      cc[i] = (a == b) ? 'R' : 'G';<br>    }<br>    return new String(cc);<br>  }<br>  <br>  public final static void main(String[] args)<br>  {<br>    try {<br>      validateExample("1", new CircleBugs().cycleLength("RRG"), 1, "cycleLength(\"RRG\")");<br>      validateExample("2", new CircleBugs().cycleLength("RRGRG"), 3, "cycleLength(\"RRGRG\")");<br>      validateExample("3", new CircleBugs().cycleLength("RRRRRRRRRR"), 1, "cycleLength(\"RRRRRRRRRR\")");<br>      validateExample("4", new CircleBugs().cycleLength("RGGGGGGGGG"), 6, "cycleLength(\"RGGGGGGGGG\")");<br>      validateExample("5", new CircleBugs().cycleLength("GGRRGGRGRGRRGRRRGGR"), 511, "cycleLength(\"GGRRGGRGRGRRGRRRGGR\")");<br>      validateExample("6", new CircleBugs().cycleLength("RGGGGGGGGGGGGGGGGGGGGGGGGGGGR"), 16383, "cycleLength(\"RGGGGGGGGGGGGGGGGGGGGGGGGGGGR\")");<br>    } catch (Exception e) {<br>      System.out.println(e);<br>      e.printStackTrace(System.out);<br>    }<br>  }<br> <br>  private static void validateExample(String exampleNum, int returned, int expected, String methodInvocation) {<br>    print(exampleNum);<br>    print("  ");<br>    if (!eq(returned,expected)) {<br>      print("FAIL");<br>    } else {<br>      print("SUCCESS");<br>    }<br>    print(" ");  <br>    print(methodInvocation);<br>    print("\tGot:[");<br>    print(returned);<br>    print("]\t");<br>    print("Expected:[");<br>    print(expected);<br>    print("]");<br>    print("\n");<br>  }<br> <br>  public static void print(boolean a) {<br>    System.out.print(a);<br>  }<br> <br>  public static void print(long a) {<br>    System.out.print(a);<br>  }<br> <br>  public static void print(int a) {<br>    System.out.print(a);<br>  }<br> <br>  public static void print(char a) {<br>    System.out.print(a);<br>  }<br> <br>  public static void print(String a) {<br>    System.out.print(a);<br>  }<br> <br>  public static void print(int[] a) {<br>    if (a==null) {System.out.print("null"); return;} <br>    for (int i=0; i&lt;a.length; i++) System.out.print(a[i]+(i&lt;a.length-1?",":"")); <br>  }<br> <br>  public static void print(int[][] a) {<br>    if (a==null) {System.out.print("null"); return;} <br>    for (int i=0; i&lt;a.length; i++) { print(a[i]); print("\n"); }<br>  }<br> <br>  public static void print(String[] a) {<br>    if (a==null) {System.out.print("null"); return;} <br>    for (int i=0; i&lt;a.length; i++) System.out.print(a[i]+(i&lt;a.length-1?",":"")); <br>  }<br> <br>  public static boolean eq(boolean a, boolean b) {<br>    return a==b;<br>  }<br> <br>  public static boolean eq(long a, long b) {<br>    return a==b;<br>  }<br> <br>  public static boolean eq(int a, int b) {<br>    return a==b;<br>  }<br> <br>  public static boolean eq(char a, char b) {<br>    return a==b;<br>  }<br> <br>  public static boolean eq(String a, String b) {<br>    return a.equals(b);<br>  }<br> <br>  public static boolean eq(int[] a, int[] b) { return Arrays.equals(a,b); }<br>  public static boolean eq(String[] a, String[] b) { return Arrays.equals(a,b); }<br> <br>}<br>// Powered by CodeProcessor<br></td>