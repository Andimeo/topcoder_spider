<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections;<br><br>public class GreedyChange <br>{<br>  public static int greedy (int v)<br>  {<br>    if (v == 0)<br>      return 0;<br>    else if (cg[v] &gt; 0)<br>      return cg[v];<br>    else<br>    {<br>      int s = 0;<br><br>      foreach (int x in c)<br>      {<br>        s += v / x;<br>        v = v % x;<br>      }<br>    <br>      return cg[v] = s;<br>    }<br>  }<br><br>  public static int[] c;<br>  public static Hashtable h = new Hashtable();<br><br>  const int M = 1000000;<br><br>  public static int[] cg = new int[M];<br>  public static int[] cr = new int[M];<br><br>  public static int real (int v)<br>  {<br>    <br>    if (v == 0)<br>      return 0;<br>    else if (cr[v] &gt; 0)<br>      return cr[v];<br>    else<br>    {<br>      int m = 1000000000;<br><br>      foreach (int x in c)<br>        if (v &gt;= x)<br>          m = Math.Min(m, real(v - x));<br><br>      return cr[v] = m + 1;<br>    }<br>  }<br><br>  public static int real (int v, int[] c)<br>  {<br>    return real(v);<br>  }<br><br>  public static int smallest (int[] denominations) <br>  {<br>    //Array.Clear(cr, 0, cr.Length);<br>    //Array.Clear(cg, 0, cg.Length);<br><br>    c = denominations;<br><br>    Array.Sort(c);<br>    Array.Reverse(c);<br><br>    //Code.print(c);<br><br>    cr[0] = 0;<br>    cr[1] = 1;<br><br>    for (int i = 0; i &lt; M; i++)<br>    {<br>      if (i &gt; 0)<br>      {<br>        int p = 0;<br><br>        while (i &lt; c[p])<br>          p++;<br><br>        cg[i] = i / c[p] + cg[i % c[p]];<br><br>//        if (i == 3)<br>//          Console.WriteLine("*** {0} {1}", p, c[p]);<br>      }<br><br>//      Console.WriteLine(i + " " + cr[i] + " " + cg[i]);<br><br>      if (cr[i] != cg[i])<br>        return i;<br><br>      foreach (int x in c)<br>      {<br>        int j = i + x;<br><br>        if (j &lt; M)<br>        {<br>          if (cr[j] == 0)<br>            cr[j] = cr[i] + 1;<br>          else<br>            cr[j] = Math.Min(cr[j], cr[i] + 1);<br>        }<br>      }<br>    }<br><br>    return -1;<br>  }<br><br>  public static void Main ()<br>  {<br>    int[] i = new int[4];<br>    i[0] = 1;<br>    i[1] = 25;<br>    i[2] = 10;<br>    i[3] = 5;<br><br>    Array.Clear(cr, 0, cr.Length);<br>    Array.Clear(cg, 0, cg.Length);<br><br>    Console.WriteLine(smallest(new int[] {1,25,10,5}));<br>    Array.Clear(cr, 0, cr.Length);<br>    Array.Clear(cg, 0, cg.Length);<br><br>    Console.WriteLine(smallest(new int[] {1,3,4}));<br>    Array.Clear(cr, 0, cr.Length);<br>    Array.Clear(cg, 0, cg.Length);<br><br>    Console.WriteLine(smallest(new int[] {1,10,10,20,25}));<br>    Array.Clear(cr, 0, cr.Length);<br>    Array.Clear(cg, 0, cg.Length);<br><br>    Console.WriteLine(smallest(new int[] {1,15,25}));<br>    Array.Clear(cr, 0, cr.Length);<br>    Array.Clear(cg, 0, cg.Length);<br><br>    Console.WriteLine(smallest(new int[] {1,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,500000}));<br>    //Console.WriteLine(smallest(new int[] ));<br>    //Console.WriteLine(smallest(new int[] ));<br>    //Console.WriteLine(smallest(new int[] ));<br>  }<br>}<br><br><br>// Powered by FileEdit<br></td>