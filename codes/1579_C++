<td class="problemText" colspan="8" valign="middle" align="left">
            /****************************  http://www.thisisjeff.com/  ****************************/<br> <br>#include &lt;algorithm&gt;<br>#include &lt;bitset&gt;<br>#include &lt;cmath&gt;<br>#include &lt;deque&gt;<br>#include &lt;iostream&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;sstream&gt;<br>#include &lt;stdarg.h&gt;<br>#include &lt;string&gt;<br>#include &lt;vector&gt;<br>using namespace std;<br> <br>#define Forc(i, c) for(typeof(c.begin()) i(c.begin()); i != c.end(); ++i)<br>#define In(c, x) (c.find(x) != c.end())<br>#define Inv(v, x) (find(v, x) &gt;= 0)<br>#define X first<br>#define Y second<br>#define Pair(x, y) pair&lt;typeof(x), typeof(y)&gt;((typeof(x))(x), y)<br>#define SetPair(a, x, y) pair&lt;typeof(x), typeof(y)&gt; a(x, y)<br>#define mkvecint makeVec&lt;int, int&gt;<br>#define mkvecstring makeVec&lt;string, char *&gt;<br>typedef pair&lt;int, int&gt; point;<br> <br>int strToInt(string); string intToStr(int);<br>vector&lt;string&gt; tokenize(string, string = " ", bool = false);<br>vector&lt;int&gt; tokenizeInt(string, string = " ", bool = false);<br>template &lt;class A, class B&gt; int find(const vector&lt;A&gt;&amp;, B);<br>template &lt;class T&gt; T nth(const set&lt;T&gt;&amp;, int);<br>template &lt;class T&gt; ostream &amp;operator &lt;&lt;(ostream&amp;, const vector&lt;T&gt;&amp;);<br>template &lt;class A, class B&gt; ostream &amp;operator &lt;&lt;(ostream&amp;, const pair&lt;A, B&gt;&amp;);<br>template &lt;class A, class B&gt; vector&lt;A&gt; makeVec(int, ...);<br>void validateExample(string, int, int, string);<br> <br>/**************************************************************************************/<br>/*************************** Here is where my code begins. ****************************/<br>/**************************************************************************************/<br> <br>int MyCode(vector&lt;int&gt; a) {<br>  set&lt;int&gt; d;<br>  for (int i(0); i &lt; a.size(); ++i)<br>    d.insert(-a[i]);<br>  vector&lt;int&gt; den;<br>  Forc(i, d)<br>    den.push_back(*i);<br>  int n(den.size());<br>  vector&lt;int&gt; greedy(1000001), dp(1000001);<br>  greedy[0] = 0;<br>  dp[0] = 0;<br>  for (int i(1); i &lt;= 1000000; ++i) {<br>    for (int j(0); j &lt; n; ++j)<br>      if (i + den[j] &gt;= 0) {<br>        greedy[i] = greedy[i + den[j]] + 1;<br>        break;<br>      }<br>    dp[i] = dp[i - 1] + 1;<br>    for (int j(0); j &lt; n; ++j)<br>      if (i + den[j] &gt;= 0)<br>        dp[i] &lt;?= dp[i + den[j]] + 1;<br>    if (greedy[i] != dp[i]) return i;<br>  }<br>  return -1;<br>}<br> <br>/**************************************************************************************/<br>/**************** And here is where my code ends.  Thanks for looking! ****************/<br>/**************************************************************************************/<br> <br>struct GreedyChange {<br>  int smallest(vector&lt;int&gt; a) {<br>/*    validateExample("1", MyCode(mkvecint(4,1,25,10,5)), -1, "smallest(mkvecint(4,1,25,10,5))");<br>    validateExample("2", MyCode(mkvecint(3,1,3,4)), 6, "smallest(mkvecint(3,1,3,4))");<br>    validateExample("3", MyCode(mkvecint(5,1,10,10,20,25)), 30, "smallest(mkvecint(5,1,10,10,20,25))");<br>    validateExample("4", MyCode(mkvecint(3,1,15,25)), 30, "smallest(mkvecint(3,1,15,25))");<br>    validateExample("5", MyCode(mkvecint(50,1,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50, 52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,500000)), -1, "smallest(mkvecint(50,1,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50, 52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,500000))");<br>    validateExample("6", MyCode(mkvecint(3,500000,499999,1)), 999998, "smallest(mkvecint(3,500000,499999,1))");<br>*/    return MyCode(a);<br>  }<br>};<br> <br>int strToInt(string str) {<br>  stringstream ss(str);<br>  int answer;<br>  ss &gt;&gt; answer;<br>  return answer;<br>}<br> <br>string intToStr(int x) {<br>  stringstream s;<br>  s &lt;&lt; x;<br>  return s.str();<br>}<br> <br>vector&lt;string&gt; tokenize(string str, string delim, bool returnDelims) {<br>  vector&lt;string&gt; answer;<br>  string temp;<br>  for (int i(0); i &lt; str.length(); ++i) {<br>    bool isDelim(false);<br>    for (int j(0); j &lt; delim.length(); ++j)<br>      if (str[i] == delim[j]) isDelim = true;<br>    if (!isDelim) {<br>      temp += str[i];<br>      continue;<br>    }<br>    if (temp != "") answer.push_back(temp);<br>    temp = "";<br>    if (returnDelims) answer.push_back(string(1, str[i]));<br>  }<br>  if (temp != "") answer.push_back(temp);<br>  return answer;<br>}<br> <br>vector&lt;int&gt; tokenizeInt(string str, string delim, bool returnDelims) {<br>  vector&lt;string&gt; tokens(tokenize(str, delim, returnDelims));<br>  vector&lt;int&gt; answer(tokens.size());<br>  for (int i(0); i &lt; tokens.size(); ++i)<br>    answer[i] = strToInt(tokens[i]);<br>  return answer;<br>}<br> <br>template &lt;class A, class B&gt; int find(const vector&lt;A&gt; &amp;vec, B item) {<br>  for (int i(0); i &lt; vec.size(); ++i)<br>    if (vec[i] == item) return i;<br>  return -1;<br>}<br> <br>template &lt;class T&gt; T nth(const set&lt;T&gt; &amp;s, int x) {<br>  typename set&lt;T&gt;::iterator answer(s.begin());<br>  for (int i(0); i &lt; x; ++i) ++answer;<br>  return *answer;<br>}<br> <br>template &lt;class T&gt; ostream &amp;operator &lt;&lt;(ostream &amp;os, const vector&lt;T&gt; &amp;vec) {<br>  if (vec.empty()) return os;<br>  for (int i(0); i &lt; vec.size() - 1; ++i) os &lt;&lt; vec[i] &lt;&lt; ',';<br>  return os &lt;&lt; vec[vec.size() - 1];<br>}<br> <br>template &lt;class A, class B&gt; ostream &amp;operator &lt;&lt;(ostream &amp;os, const pair&lt;A, B&gt; &amp;p) {<br>  return os &lt;&lt; '(' &lt;&lt; p.X &lt;&lt; ',' &lt;&lt; p.Y &lt;&lt; ')';<br>}<br> <br>template &lt;class A, class B&gt; vector&lt;A&gt; makeVec(int n, ...) {<br>  vector&lt;A&gt; answer(n);<br>  va_list vl;<br>  va_start(vl, n);<br>  for (int i(0); i &lt; n; ++i) answer[i] = va_arg(vl, B);<br>  va_end(vl);<br>  return answer;<br>}<br> <br>void validateExample(string exampleNo, int returned, int expected, string args) {<br>  cout &lt;&lt; "Example " &lt;&lt; exampleNo &lt;&lt; ": ";<br>  if (returned == expected)<br>    cout &lt;&lt; "Success!" &lt;&lt; endl;<br>  else {<br>    cout &lt;&lt; "FAILURE..." &lt;&lt; endl;<br>    cout &lt;&lt; "   Expected: " &lt;&lt; expected &lt;&lt; endl;<br>    cout &lt;&lt; "   Returned: " &lt;&lt; returned &lt;&lt; endl;<br>    cout &lt;&lt; "   " &lt;&lt; args &lt;&lt; endl;<br>  }<br>}<br> <br>// Powered by CodeProcessor<br></td>