<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;vector&gt;<br>#include &lt;algorithm&gt;<br>using namespace std;<br> <br>struct BridgeCrossing {<br>  int tt[100];<br>  int tm[100];<br>  int n,ns;<br> <br>  int f(int s) {<br>    if(tm[s]!=-1) return tm[s];<br>    if((s&amp;(s-1))==0) {<br>      for(int i=0;i&lt;n;++i) if(s&amp;(1&lt;&lt;i)) tm[s]=tt[i];<br>    }<br>    else {<br>      int ttt = 1000000000;<br>      for(int i=0;i&lt;n;++i) if(s&amp;(1&lt;&lt;i))<br>      for(int j=i+1;j&lt;n;++j) if(s&amp;(1&lt;&lt;j)) {<br>        int t1 = max(tt[i],tt[j]);<br>  int s2 = s&amp;~(1&lt;&lt;i) &amp; ~(1&lt;&lt;j);<br>  if(s2==0) ttt = min(ttt, t1);<br>  else<br>  for(int k=0;k&lt;n;++k) if(!(s2&amp;(1&lt;&lt;k))) {<br>    int t2 = t1 + tt[k];<br>    t2 += f(s2|(1&lt;&lt;k));<br>    ttt = min(ttt, t2);<br>  }<br>      }<br>      tm[s] = ttt;<br>    }<br>    return tm[s];<br>  }<br> <br>  int minTime(vector&lt;int&gt; times) {<br>    n=times.size();<br>    ns = 1&lt;&lt;n;<br>    for(int i=0;i&lt;n;++i) tt[i]=times[i];<br>    for(int i=0;i&lt;ns;++i) tm[i] = -1;<br>    return f(ns-1);<br>  }<br>};<br></td>