<td class="problemText" colspan="8" valign="middle" align="left">
            /*<br> * backtrack without cutting heuristics - too simple, but only small input is possible..<br> */<br> <br>import java.util.Vector;<br> <br>public class BridgeCrossing<br>{<br>  class state {<br>    public state(int[] times) {<br>      left = new Vector();<br>      right = new Vector();<br>      for (int i = 0; i &lt; times.length; i++) {<br>        right.add(new Integer(times[i]));<br>      }<br>      ttime = 0;<br>      state = false;<br>    }<br>    public state(state prev) {<br>      left = new Vector(prev.left);<br>      right = new Vector(prev.right);<br>      ttime = prev.ttime;<br>      state = !prev.state;<br>    }<br>    Vector left; Vector right;<br>    int ttime; boolean state;<br>  }<br> <br>  public int bt(state st, int besttime) {<br>    if (st.right.size() == 0) {<br>      if (st.ttime &lt; besttime) return st.ttime; else return besttime;<br>    }<br>    if (st.state) {<br>      int best = besttime;<br>      for (int i = 0; i &lt; st.left.size(); i++) {<br>        state newst = new state(st);<br>        int t = ((Integer)newst.left.elementAt(i)).intValue();<br>        newst.left.remove(i);<br>        newst.right.add(new Integer(t));<br>        newst.ttime += t;<br>        t = bt(newst, best);<br>        if (t &lt; best) best = t;<br>      }<br>      return best;<br>    }<br>    else {<br>      int best = besttime;<br>      for (int i = 0; i &lt; st.right.size()-1; i++) {<br>      for (int j = i+1; j &lt; st.right.size(); j++) {<br>        state newst = new state(st);<br>        int t0 = ((Integer)newst.right.elementAt(i)).intValue();<br>        int t1 = ((Integer)newst.right.elementAt(j)).intValue();<br>        newst.right.remove(j);<br>        newst.right.remove(i);<br>        newst.left.add(new Integer(t0));<br>        newst.left.add(new Integer(t1));<br>        int t = t0 &gt; t1 ? t0 : t1;<br>        newst.ttime += t;<br>        t = bt(newst, best);<br>        if (t &lt; best) best = t;<br>      }<br>      }<br>      return best;<br>    }<br>  }<br> <br>  public int minTime(int[] times) {<br>    if (times.length == 1) return times[0];<br>    return bt(new state(times), 100000); // 100.000 is a real upper limit on 6 people with max 100 time units each :)<br>  }<br>}<br></td>