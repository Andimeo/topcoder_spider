<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;string&gt;<br>#include &lt;deque&gt;<br> <br>using namespace std;<br> <br>class Roundabout<br>{<br>  void add(string what, deque&lt;int&gt; &amp;ett, deque&lt;int&gt; &amp;tva)<br>  {<br>    int size = what.size();<br>    for (int x=0;x&lt;size;x++)<br>    {<br>      int val = 0;<br>      switch (what[x])<br>      {<br>        case 'E':<br>          val++;<br>        case 'S': val++;<br>        case 'W': val++;<br>        case 'N':<br>          tva.push_back(val);<br>          ett.push_back(x);<br>          //printf("%d %d\n", val, x);<br>      }<br>    }<br>  }<br>  void movein(char* rabout, int pos, deque&lt;int&gt; &amp;ett, deque&lt;int&gt; &amp;tva)<br>  {<br>    rabout[pos] = tva.front();<br>    ett.pop_front();<br>    tva.pop_front();<br>  }<br> <br>public:<br>  int clearUpTime(string north, string east, string south, string west)<br>  {<br>    char rabout[4] = {-1, -1, -1, -1};<br>    char rabout2[4] = {-1, -1, -1, -1};<br>    int time = 0;<br>    deque&lt;int&gt; q[4][2];<br> <br>    add(north, q[0][0], q[0][1]);<br>    add(west, q[1][0], q[1][1]);<br>    add(south, q[2][0], q[2][1]);<br>    add(east, q[3][0], q[3][1]);<br>    <br>    while ((q[0][0].empty() &amp;&amp; q[1][0].empty() &amp;&amp; q[2][0].empty() &amp;&amp; q[3][0].empty()) == false || rabout2[0]!=-1 || rabout2[1]!=-1 || rabout2[2]!=-1 || rabout2[3] != -1)<br>    {<br>      memcpy(rabout, rabout2, 4);<br>      int stuck = 0;<br>      bool empty[4];<br>      int fronttime[4];<br> <br>      for (int x=0;x&lt;4;x++)<br>      {<br>//        printf("%d ", rabout2[x]);<br>        if (rabout2[x]==x) rabout2[x] = -1;<br>        empty[x] = q[x][0].empty();<br>        fronttime[x] = q[x][0].front();<br>      }<br>//      printf("\n");<br> <br>      <br> <br>      for (int x=0;x&lt;4;x++)<br>        if (!empty[x] &amp;&amp; q[x][0].front()&lt;=time)<br>          if (rabout[(x+3) &amp; 3]==-1 &amp;&amp; (empty[(x+3) &amp; 3] || fronttime[(x +3) &amp; 3]&gt;time))<br>          {<br>            movein(rabout2, (x+3) &amp; 3, q[x][0], q[x][1]);<br>          }<br>          else<br>          stuck++;<br> <br>      if (stuck==4 &amp;&amp; rabout[3]==-1) movein(rabout2, 3, q[0][0], q[0][1]);<br>      <br>      int old = rabout2[3];<br>      rabout2[3] = rabout2[2];<br>      rabout2[2] = rabout2[1];<br>      rabout2[1] = rabout2[0];<br>      rabout2[0] = old;<br>      time++;<br>    }<br>    return time;<br>  }<br>};<br></td>