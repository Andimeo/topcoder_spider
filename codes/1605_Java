<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>public class Roundabout {<br>  String north;<br>  String west;<br>  String south;<br>  String east;<br>  String[] Q = {"", "", "", ""};<br>  String[] r = {"", "", "", ""};<br>  void putInQ(int t) {<br>    for (int dir = 0; dir &lt; 4; dir++) {<br>      if (dir == 0) {<br>        if (t &lt; north.length() &amp;&amp; north.charAt(t) != '-') {<br>          Q[dir] = Q[dir] + north.charAt(t);<br>        }<br>      }<br>      if (dir == 1) {<br>        if (t &lt; west.length() &amp;&amp; west.charAt(t) != '-') {<br>          Q[dir] = Q[dir] + west.charAt(t);<br>        }<br>      }<br>      if (dir == 2) {<br>        if (t &lt; south.length() &amp;&amp; south.charAt(t) != '-') {<br>          Q[dir] = Q[dir] + south.charAt(t);<br>        }<br>      }<br>      if (dir == 3) {<br>        if (t &lt; east.length() &amp;&amp; east.charAt(t) != '-') {<br>          Q[dir] = Q[dir] + east.charAt(t);<br>        }<br>      }<br>    }<br>  }<br>  int getMinWait() {<br>    while (north.length() &gt; 0 &amp;&amp; north.charAt(north.length() - 1) == '-') {<br>      north = north.substring(0, north.length() - 1);<br>    }<br>    while (west.length() &gt; 0 &amp;&amp; west.charAt(west.length() - 1) == '-') {<br>      west = west.substring(0, west.length() - 1);<br>    }<br>    while (south.length() &gt; 0 &amp;&amp; south.charAt(south.length() - 1) == '-') {<br>      south = south.substring(0, south.length() - 1);<br>    }<br>    while (east.length() &gt; 0 &amp;&amp; east.charAt(east.length() - 1) == '-') {<br>      east = east.substring(0, east.length() - 1);<br>    }<br>    int minwait = north.length();<br>    minwait = Math.max(minwait, west.length());<br>    minwait = Math.max(minwait, south.length());<br>    minwait = Math.max(minwait, east.length());<br>    return minwait;<br>  }<br>  void printState() {<br>    System.out.print("Q:");<br>    for (int i = 0; i &lt; 4; i++) {<br>      System.out.print((Q[i].length() &gt; 0 ? Q[i] : "-") + " ");<br>    }<br>    System.out.print("r:");<br>    for (int i = 0; i &lt; 4; i++) {<br>      System.out.print((r[i].length() &gt; 0 ? r[i] : "-"));<br>    }<br>    System.out.println();<br>  }<br>  public int clearUpTime(String north, String east, String south, String west) {<br>    int t = 0;<br>    this.north = north;<br>    this.west = west;<br>    this.south = south;<br>    this.east = east;<br>    int minwait = getMinWait();<br>    while (true) {<br>      putInQ(t);<br>      //printState();<br>      String[] nextr = {"", "", "", ""};<br>      String[] nextq = {"", "", "", ""};<br>      for (int i = 0; i &lt; 4; i++) {<br>        nextq[i] = Q[i];<br>      }<br>      if (Q[0].length() &gt; 0 &amp;&amp; Q[1].length() &gt; 0 &amp;&amp; Q[2].length() &gt; 0 &amp;&amp; Q[3].length() &gt; 0) {<br>        if (r[3].length() == 0) {<br>          nextr[0] = Q[0].substring(0, 1);<br>          nextq[0] = Q[0].substring(1);<br>        }<br>      } else {<br>        for (int dir = 0; dir &lt; 4; dir++) {<br>          if (Q[dir].length() &gt; 0) {<br>            int left = (dir + 3) % 4;<br>            if (Q[left].length() == 0 &amp;&amp; r[left].length() == 0) {<br>              nextr[dir] = Q[dir].substring(0, 1);<br>              nextq[dir] = Q[dir].substring(1);<br>            }<br>          }<br>        }<br>      }<br>      //remove cars<br>      for (int dir = 0; dir &lt; 4; dir++) {<br>        if (r[dir].length() &gt; 0) {<br>          if (r[dir].charAt(0) == 'N' &amp;&amp; dir == 0) {<br>            r[dir] = "";<br>          } else if (r[dir].charAt(0) == 'W' &amp;&amp; dir == 1) {<br>            r[dir] = "";<br>          } else if (r[dir].charAt(0) == 'S' &amp;&amp; dir == 2) {<br>            r[dir] = "";<br>          } else if (r[dir].charAt(0) == 'E' &amp;&amp; dir == 3) {<br>            r[dir] = "";<br>          }<br>        }<br>      }<br>      //rotate old cars<br>      for (int dir = 0; dir &lt; 4; dir++) {<br>        if (r[dir].length() &gt; 0) {<br>          nextr[(dir + 1) % 4] = r[dir];<br>        }<br>      }<br>      r = nextr;<br>      Q = nextq;<br>      boolean done = true;<br>      for (int i = 0; i &lt; 4; i++) {<br>        if (Q[i].length() &gt; 0) {<br>          done = false;<br>        }<br>        if (r[i].length() &gt; 0) {<br>          done = false;<br>        }<br>      }<br>      if (t &gt; 1000 || done &amp;&amp; t &gt;= minwait) {<br>        break;<br>      }<br>      t++;<br>    }<br>    return t == 0 ? 0 : t + 1;<br>  }<br>}<br></td>