<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;deque&gt;<br>#include &lt;queue&gt;<br>#include &lt;stack&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;iostream&gt;<br>#include &lt;cstring&gt;<br>#include &lt;climits&gt;<br>#include &lt;cmath&gt;<br><br>using namespace std;<br><br>class MissingLetters {<br>public:<br>  <br>  string getMissingLetters(string sentence) {<br>    string s = sentence;<br>    bool in[26];<br>    int i;<br>    for (i=0; i&lt;26; i++) in[i] = false;<br>    for (i=0; i&lt;s.length(); i++) {<br>      char c = s[i];<br>      if (c &gt;= 'A' &amp;&amp; c &lt;= 'Z') in[c - 'A'] = true;<br>      if (c &gt;= 'a' &amp;&amp; c &lt;= 'z') in[c - 'a'] = true;<br>    }<br><br>    string res;<br><br>    for (i=0; i&lt;26; i++) {<br>      if (!in[i]) res += (i + 'A');<br><br>    }<br><br><br>    return res;<br>  }<br>  vector&lt;string&gt; tokenize(string in, string tok) {<br>    string::iterator cp = in.begin();<br>    vector&lt;string&gt; res;<br>    while (cp != in.end()) {<br>      while (cp != in.end() &amp;&amp; count(tok.begin(), tok.end(), *cp)) cp++;<br>      string::iterator tmp = find_first_of(cp,in.end(), tok.begin(), tok.end());<br>      if (cp != in.end()) res.push_back(string(cp,tmp));<br>      cp = tmp;<br>    }<br>    return res;<br>  }<br><br>  <br><br>};<br><br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003]<br>// Powered by CodeProcessor<br></td>