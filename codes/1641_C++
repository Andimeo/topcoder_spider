<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;algorithm&gt;<br>#include &lt;cmath&gt;<br>#include &lt;iostream&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;sstream&gt;<br>#include &lt;string&gt;<br>#include &lt;vector&gt;<br>using namespace std;<br> <br>typedef long double ld;<br>typedef long long ll;<br>template &lt;class T&gt; T MIN(T a, T b) {return a &lt; b? a : b;}<br>template &lt;class T&gt; T MAX(T a, T b) {return b &lt; a? a : b;}<br>template &lt;class T&gt; T ABS(T a) {return MAX(a,-a);}<br> <br>string toString(ld d, int precision=-1) {ostringstream out; if (precision != -1) {out.precision(precision); out.setf(ios::fixed);} out &lt;&lt; d; return out.str();}<br>string toString(ll n) {ostringstream out; out &lt;&lt; n; return out.str();}<br>string toString(int n) {return toString( ll(n) );}<br>ll toInt(string s) {istringstream in(s); ll n; in &gt;&gt; n; return n;}<br>ld toDouble(string s) {istringstream in(s); ld d; in &gt;&gt; d; return d;}<br>int getNumWords(string s) {int n=0; string t; istringstream in(s); while (in &gt;&gt; t) n++; return n;}<br>string getWord(string s, int i) {string t; istringstream in(s); while (i &gt;= 0) {in &gt;&gt; t; i--;} return t;}<br>ll gcd(ll n, ll m) {return m==0? ABS(n) : gcd(m, n%m); }<br> <br>class SkewTree {<br>  public:<br>  int n;<br>  vector &lt;int&gt; probs;<br>  ll best[200][200];<br>  <br>  int getAccess(int i1, int i2) {<br>    ll total = 0;<br>    for (int i = i1; i &lt;= i2; i++) total += probs[i];<br>    return total;<br>  }<br>  <br>  ll getBestScore(int i1, int i2) {<br>    if (i1 &gt; i2) return 0;<br>    if (best[i1][i2] != -1) return best[i1][i2];<br>    <br>    ll val = -1;<br>    for (int root = i1; root &lt;= i2; root++) {<br>      ll thisVal = getBestScore(i1, root-1) + getBestScore(root+1, i2);<br>      if (val == -1 || thisVal &lt; val) val = thisVal;<br>    }<br>    val += getAccess(i1,i2);<br>    <br>    best[i1][i2] = val;<br>    return val;<br>  }<br>  <br>  int bestScore(vector &lt;int&gt; values, vector &lt;int&gt; _probs) {<br>    int i, j;<br>    <br>    probs = _probs;<br>    n = probs.size();    <br>    for (i = 0; i &lt; n; i++)<br>    for (j = i+1; j &lt; n; j++) {<br>      if (values[i] &gt; values[j]) {<br>        int tv = values[i]; values[i] = values[j]; values[j] = tv;<br>        int tp = probs[i]; probs[i] = probs[j]; probs[j] = tp;<br>      }<br>    }<br>    <br>    for (i = 0; i &lt; n; i++)<br>    for (j = 0; j &lt; n; j++)<br>    best[i][j] = -1;<br>    <br>    return getBestScore(0, n-1);<br>  }<br>};<br> <br>// Powered by PopsEdit<br></td>