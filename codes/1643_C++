<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;vector&gt;<br>#include &lt;sstream&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;cctype&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;queue&gt;<br>#include &lt;set&gt;<br>#include &lt;map&gt;<br>using namespace std;<br>typedef long long ll;<br>typedef vector&lt;int&gt; vi; typedef vector&lt;vi&gt; vvi;<br>typedef vector&lt;string&gt; vs; typedef vector&lt;vs&gt; vvs;<br>typedef istringstream iss; typedef ostringstream oss;<br>#define pq priority_queue<br>#define let(a,b) typeof(b) a(b)<br>#define all(a) a.begin(),a.end()<br>#define forall(a,b) for (let(a,b.begin());a!=b.end();a++)<br>#define forrall(a,b) for (let(a,b.rbegin());a!=b.rend();a++)<br>#define contains(a,b) (find(all(a),b)!=a.end())<br>template&lt;typename T&gt; string str(const T &amp;t){oss s;s&lt;&lt;t;return s.str();}<br><br>int parent[60];<br>void clear()<br>{<br>    memset(parent,0xff,sizeof(parent));<br>}<br>int find(int a)<br>{<br>    int p,t;<br>    for (p=a;parent[p]&gt;=0;p=parent[p]);<br>    while (a!=p)<br>    {<br>        t=parent[a];<br>        parent[a]=p;<br>        a=t;<br>    }<br>    return p;<br>}<br>int unionset(int a,int b)<br>{<br>    int t;<br>    a=find(a);<br>    b=find(b);<br>    if (a==b) return 0;<br>    t=parent[a]+parent[b];<br>    if (parent[a]&gt;parent[b])<br>    {<br>        parent[a]=b;<br>        parent[b]=t;<br>    }<br>    else<br>    {<br>        parent[b]=a;<br>        parent[a]=t;<br>    }<br>    return 1;<br>}<br><br>class PossibleOrders{<br>public:<br>long long howMany(int num, vector &lt;string&gt; facts)<br>{<br>ll ans,data[20][20];<br>clear();<br>for (int i=0;i&lt;facts.size();i++)<br>{<br>    ll a,b;<br>    char c;<br>    iss sin(facts[i]);<br>    sin&gt;&gt;a&gt;&gt;c&gt;&gt;b;<br>    if (unionset(a,b)) num--;<br>}<br>memset(data,0,sizeof(data));<br>data[1][1]=1;<br>for (int i=2;i&lt;=num;i++)<br>    for (int j=1;j&lt;=i;j++)<br>    {<br>        data[i][j]=data[i-1][j]*j+data[i-1][j-1]*j;<br>    }<br>ans=0;<br>for (int j=0;j&lt;=num;j++)<br>    ans+=data[num][j];<br>return ans;<br>}<br>};<br><br><br><br>// Powered by FileEdit<br></td>