<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>public class PossibleOrders {<br>  public long howMany(int num, String[] facts) {<br>    UnionFind uf = new UnionFind(num);<br>    for (int i = 0; i &lt; facts.length; i++) {<br>      StringTokenizer toks = new StringTokenizer(facts[i]," =");<br>      int x = Integer.parseInt(toks.nextToken());<br>      int y = Integer.parseInt(toks.nextToken());<br>      uf.union(x,y);<br>    }<br>    int n = uf.numRoots();<br>    //System.out.println(n);<br>    return orders(n);<br>  }<br><br>  long orders(int n) {<br>    if (n == 0) return 1;<br>    long total = 0;<br>    for (int i = 1; i &lt;= n; i++) {<br>      total += choose(n,i) * orders(n-i);<br>    }<br>    return total;<br>  }<br>  static long factorial(int n) { long p = 1; while (n &gt; 1) p *= n--; return p; }<br>static long choose(int n,int k){long num=1,den=1; while(k&gt;0){den*=k--;num*=n-k;} return num/den;} <br>  static class UnionFind {<br>    int[] table;<br>    UnionFind(int n) {<br>      table = new int[n];<br>      for (int i=0; i &lt; n; i++) table[i] = -1;<br>    }<br>    void union(int i,int j) {<br>      i = find(i);<br>      j = find(j);<br>      if (i == j) return;<br>      if (table[i] &lt; table[j]) { table[i] += table[j]; table[j] = i; }<br>      else { table[j] += table[i]; table[i] = j; }<br>    }<br>    int find(int i) {<br>      if (table[i] &lt; 0) return i;<br>      int root = find(table[i]);<br>      table[i] = root;<br>      return root;<br>    }<br>    int numRoots() {<br>      int roots = 0;<br>      for (int i = 0; i &lt; table.length; i++) if (table[i] &lt; 0) roots++;<br>      return roots;<br>    }<br>  } // end UnionFind<br><br><br>// boilerplate testing code follows...<br><br>    public final static void main(String[] args)<br>  {<br>    try {<br>      validateExample("1", new PossibleOrders().howMany(4,new String[] {"0=2","1=3"}), 3L, "howMany(4,new String[] {\"0=2\",\"1=3\"})");<br>      validateExample("2", new PossibleOrders().howMany(4,new String[] {}), 75L, "howMany(4,new String[] {})");<br>      validateExample("3", new PossibleOrders().howMany(3,new String[] {"1=1"}), 13L, "howMany(3,new String[] {\"1=1\"})");<br>      validateExample("4", new PossibleOrders().howMany(3,new String[] {"1=2","2=1"}), 3L, "howMany(3,new String[] {\"1=2\",\"2=1\"})");<br>      validateExample("5", new PossibleOrders().howMany(17,new String[] {}), 130370767029135901L, "howMany(17,new String[] {})");<br>    } catch (Exception e) {<br>      System.out.println(e);<br>      e.printStackTrace(System.out);<br>    }<br>  }<br><br>  private static void validateExample(String exampleNum, long returned, long expected, String methodInvocation) {<br>    print(exampleNum);<br>    print("  ");<br>    if (!eq(returned,expected)) {<br>      print("FAIL");<br>    } else {<br>      print("SUCCESS");<br>    }<br>    print(" ");  <br>    print(methodInvocation);<br>    print("\tGot:[");<br>    print(returned);<br>    print("]\t");<br>    print("Expected:[");<br>    print(expected);<br>    print("]");<br>    print("\n");<br>  }<br><br>  public static void print(boolean a) {<br>    System.out.print(a);<br>  }<br><br>  public static void print(long a) {<br>    System.out.print(a);<br>  }<br><br>  public static void print(int a) {<br>    System.out.print(a);<br>  }<br><br>  public static void print(char a) {<br>    System.out.print(a);<br>  }<br><br>  public static void print(String a) {<br>    System.out.print(a);<br>  }<br><br>  public static void print(int[] a) {<br>    if (a==null) {System.out.print("null"); return;} <br>    for (int i=0; i&lt;a.length; i++) System.out.print(a[i]+(i&lt;a.length-1?",":"")); <br>  }<br><br>  public static void print(int[][] a) {<br>    if (a==null) {System.out.print("null"); return;} <br>    for (int i=0; i&lt;a.length; i++) { print(a[i]); print("\n"); }<br>  }<br><br>  public static void print(String[] a) {<br>    if (a==null) {System.out.print("null"); return;} <br>    for (int i=0; i&lt;a.length; i++) System.out.print(a[i]+(i&lt;a.length-1?",":"")); <br>  }<br><br>  public static boolean eq(boolean a, boolean b) {<br>    return a==b;<br>  }<br><br>  public static boolean eq(long a, long b) {<br>    return a==b;<br>  }<br><br>  public static boolean eq(int a, int b) {<br>    return a==b;<br>  }<br><br>  public static boolean eq(char a, char b) {<br>    return a==b;<br>  }<br><br>  public static boolean eq(String a, String b) {<br>    return a.equals(b);<br>  }<br><br>  public static boolean eq(int[] a, int[] b) { return Arrays.equals(a,b); }<br>  public static boolean eq(String[] a, String[] b) { return Arrays.equals(a,b); }<br><br><br>  public static void print(double a) { System.out.print(a); }<br>  public static boolean eq(double a, double b) { return Math.abs(a-b) &lt; 0.000000001; }<br>}<br> <br>// Powered by CodeProcessor<br></td>