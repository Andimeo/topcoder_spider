<td class="problemText" colspan="8" valign="middle" align="left">
            #pragma warning( disable : 4786 )<br><br>#include &lt;vector&gt;<br>#include &lt;string&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;set&gt;<br>#include &lt;map&gt;<br>#include &lt;functional&gt;<br>#include &lt;deque&gt;<br>#include &lt;queue&gt;<br><br>using namespace std;<br><br>vector&lt; string &gt; tokenize( string in, string kar ) {<br>  string::iterator cp = in.begin();<br>  vector&lt; string &gt; oot;<br>  while( cp != in.end() ) {<br>    while( cp != in.end() &amp;&amp; count( kar.begin(), kar.end(), *cp ) )<br>      cp++;<br>    if( cp != in.end() )<br>      oot.push_back( string( cp, find_first_of( cp, in.end(), kar.begin(), kar.end() ) ) );<br>    cp = find_first_of( cp, in.end(), kar.begin(), kar.end() );<br>  };<br>  return oot;<br>};<br><br>vector&lt; int &gt; sti( const vector&lt; string &gt; &amp;foo ) {<br>  int i;<br>  vector&lt; int &gt; bar;<br>  for( i = 0; i &lt; foo.size(); i++ ) {<br>    bar.push_back( atoi( foo[ i ].c_str() ) );<br>  }<br>  return bar;<br>};<br><br>map&lt; int, int &gt; mepe;<br><br>class PenLift {<br>  public:<br>  int numTimes(vector &lt;string&gt; a, int b) {<br>    set&lt; int &gt; kords;<br>    int i;<br>    for( i = 0; i &lt; a.size(); i++ ) {<br>      vector&lt; int &gt; vk = sti( tokenize( a[ i ], " " ) );<br>      for( int j = 0; j &lt; 4; j++ )<br>        kords.insert( vk[ j ] );<br>    }<br>    int ct = 0;<br>    for( set&lt; int &gt;::iterator itr = kords.begin(); itr != kords.end(); itr++ ) {<br>//      printf( "link %d to %d\n", *itr, ct );<br>      mepe[ *itr ] = ct++;<br>    }<br>    vector&lt; vector&lt; int &gt; &gt; adj( 40000 );<br>    for( i = 0; i &lt; a.size(); i++ ) {<br>//      printf( "one\n" );<br>      vector&lt; int &gt; vk = sti( tokenize( a[ i ], " " ) );<br>      for( int j = 0; j &lt; 4; j++ )<br>        vk[ j ] = mepe[ vk[ j ] ];<br>      if( vk[ 0 ] == vk[ 2 ] ) {<br>        if( vk[ 3 ] &lt; vk[ 1 ] )<br>          swap( vk[ 3 ], vk[ 1 ] );<br>//        printf( "X %d, %d-%d\n", vk[ 0 ], vk[ 1 ], vk[ 3 ] );<br>        for( int i = vk[ 1 ]; i &lt; vk[ 3 ]; i++ ) {<br>          adj[ vk[ 0 ] * 200 + i ].push_back( vk[ 0 ] * 200 + i + 1 );<br>          adj[ vk[ 0 ] * 200 + i + 1 ].push_back( vk[ 0 ] * 200 + i );<br>        }<br>      } else {<br>        if( vk[ 2 ] &lt; vk[ 0 ] )<br>          swap( vk[ 2 ], vk[ 0 ] );<br>//        printf( "Y %d, %d-%d\n", vk[ 1 ], vk[ 0 ], vk[ 2 ] );<br>        for( int i = vk[ 0 ]; i &lt; vk[ 2 ]; i++ ) {<br>          adj[ i * 200 + vk[ 1 ] ].push_back( i * 200 + 200 + vk[ 1 ] );<br>          adj[ i * 200 + 200 + vk[ 1 ] ].push_back( i * 200 + vk[ 1 ] );<br>        }<br>      }<br>    }<br>    for( i = 0; i &lt; adj.size(); i++ ) {<br>      sort( adj[ i ].begin(), adj[ i ].end() );<br>      adj[ i ].erase( unique( adj[ i ].begin(), adj[ i ].end() ), adj[ i ].end() );<br>    };<br>    int pensi = -1;<br>    for( i = 0; i &lt; adj.size(); i++ ) {<br>      if( adj[ i ].size() ) {<br>        printf( "new loop\n" );<br>        int odds = 0;<br>        queue&lt; int &gt; q;<br>        q.push( i );<br>        while( q.size() ) {<br>          int tq = q.front();<br>          q.pop();<br>          if( adj[ tq ].size() % 2 )<br>            odds++;<br>          for( int j = 0; j &lt; adj[ tq ].size(); j++ )<br>            q.push( adj[ tq ][ j ] );<br>          adj[ tq ].clear();<br>        }<br>        printf( "%d odds\n", odds );<br>        if( odds == 0 )<br>          odds = 2;<br>        if( b % 2 == 0 )<br>          odds = 2;<br>        pensi += odds / 2;<br>      }<br>    }<br>    return pensi;<br>  }<br>};<br></td>