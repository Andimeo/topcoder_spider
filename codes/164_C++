<td class="problemText" colspan="8" valign="middle" align="left">
            #pragma warning(disable:4786)<br>#include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;algorithm&gt;<br>//#include &lt;functional&gt;<br>//#include &lt;iterator&gt;<br>#include &lt;sstream&gt;<br>#include &lt;iostream&gt;<br>#include &lt;cstdio&gt;<br>using namespace std;<br> <br>struct Class<br>{<br>  string dep;<br>  int num;<br>  string rep;<br>  Class(string s)<br>  {<br>    dep=s.substr(0, s.size()-3);<br>    num=atoi(s.substr(s.size()-3, 3).c_str());<br>    rep=s;<br>//    cout &lt;&lt; dep &lt;&lt; " " &lt;&lt; num &lt;&lt; endl;<br>  }<br>  bool operator==(const Class&amp; rhs)const<br>  {<br>    return rep==rhs.rep;<br>  }<br>  bool operator&lt;(const Class&amp; rhs)const<br>  {<br>    return num &lt; rhs.num || num == rhs.num &amp;&amp; dep &lt; rhs.dep;<br>  }<br>};<br> <br>class Prerequisites<br>{<br>  map&lt; Class, vector&lt;Class&gt; &gt; M;<br>  bool parse(vector&lt;string&gt;&amp; vec)<br>  {<br>    int i;<br>    for(i=0; i&lt;vec.size(); i++)<br>    {<br>      string s=vec[i];<br>      istringstream is(s);<br>      string c;<br>      is &gt;&gt; c;<br>      c=c.substr(0, c.size()-1);<br>//      cout &lt;&lt; c &lt;&lt; endl;<br>      Class C(c);<br>      vector&lt;Class&gt; P;<br>      string p;<br>      while(is &gt;&gt; p)<br>      {<br>        P.push_back(Class(p));<br>      }<br>      M[C]=P;<br>    }<br>    for(map&lt; Class, vector&lt;Class&gt; &gt;::const_iterator m=M.begin(); m!=M.end(); m++)<br>    {<br>      const vector&lt;Class&gt;&amp; P=m-&gt;second;<br>      for(int j=0; j&lt;P.size(); j++)<br>      {<br>        const Class&amp; p=P[j];<br>        if(M.find(p)==M.end()) return false;<br>      }<br>    }<br>    return true;<br>  }<br>public:<br>  vector&lt;string&gt; orderClasses(vector&lt;string&gt; vec)<br>  {<br>    if(!parse(vec)) return vector&lt;string&gt;();<br>    vector&lt;string&gt; ans;<br>    while(M.size() &gt; 0)<br>    {<br>      set&lt;Class&gt; can;<br>      for(map&lt; Class, vector&lt;Class&gt; &gt;::const_iterator m=M.begin(); m!=M.end(); m++)<br>      {<br>        const vector&lt;Class&gt;&amp; P=m-&gt;second;<br>        if(P.empty()) can.insert(m-&gt;first);<br>      }<br>      if(can.empty()) return vector&lt;string&gt;();<br>      const Class&amp; N=*min_element(can.begin(), can.end());<br>      ans.push_back(N.rep);<br>      M.erase(N);<br>      for(map&lt; Class, vector&lt;Class&gt; &gt;::iterator n=M.begin(); n!=M.end(); n++)<br>      {<br>        vector&lt;Class&gt;&amp; P=n-&gt;second;<br>        for(int j=0; j&lt;P.size(); j++)<br>        {<br>          const Class&amp; p=P[j];<br>          if(p==N) P.erase(P.begin()+j);<br>        }<br>      }<br>    }<br>    return ans;<br>  }<br>};<br></td>