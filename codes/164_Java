<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.Vector;<br>import java.util.Hashtable;<br>import java.util.StringTokenizer;<br> <br>public class Prerequisites<br>{<br>  public static class clas<br>  { public String dept;<br>    public int num;<br>    public String name;<br>    public Vector prere;<br>    public boolean taken;<br>    public clas(String s)<br>    { name=s;<br>      taken=false;<br>      prere=new Vector();<br>      int slen=s.length();<br>      for (int i=0; i&lt;slen; i+=1)<br>      { char c=s.charAt(i);<br>        if (c&gt;='0' &amp;&amp; c&lt;='9')<br>        { dept=s.substring(0,i);<br>          s=s.substring(i);<br>          try { num=Integer.parseInt(s); } catch (Exception ee) { num=0; }<br>          return; } } } }<br> <br>  public Vector classes;<br>  public Hashtable finder;<br> <br>  public String findfst()<br>  { int n=classes.size();<br> <br>    String frsts=null;<br>    int frstn=9999999;<br>    String ans=null;<br>    clas theone=null;<br>    for (int i=0; i&lt;n; i+=1)<br>    { clas c=(clas)classes.elementAt(i);<br>// System.out.println("looking at "+c.name+":"+c.dept+":"+c.num);<br>      if (c.taken) continue;<br>      if (c.prere.size()!=0) continue;<br>      String nm=c.name;<br>      if (frsts==null)<br>      { theone=c;<br>        frsts=c.dept;<br>        frstn=c.num;<br>        ans=nm;<br>        continue; }<br>      if (c.num&lt;frstn)<br>      { theone=c;<br>        frsts=c.dept;<br>        frstn=c.num;<br>        ans=nm;<br>        continue; }<br>      if (c.num&gt;frstn)<br>        continue;<br>      if (nm.compareTo(frsts)&lt;0)<br>      { theone=c;<br>        frsts=c.dept;<br>        frstn=c.num;<br>        ans=nm; } }<br>    if (theone!=null) theone.taken=true;<br>    return ans; }<br> <br>  public void killoff(String ded)<br>  { int n=classes.size();<br>    for (int i=0; i&lt;n; i+=1)<br>    { clas c=(clas)classes.elementAt(i);<br>      if (c.taken) continue;<br>      Vector req=c.prere;<br>      if (req.contains(ded))<br>        req.remove(ded); } }<br> <br>  public String[] orderClasses(String[] sch)<br>  { classes=new Vector();<br>    finder=new Hashtable();<br>    int schn=sch.length;<br>    for (int i=0; i&lt;schn; i+=1)<br>    { String dsc=sch[i];<br>      StringTokenizer st=new StringTokenizer(dsc, ": ");<br>      String frst=st.nextToken();<br>      clas it=new clas(frst);<br>      finder.put(frst, it);<br>      classes.add(it);<br>      while (st.hasMoreTokens())<br>      { String cnm=st.nextToken();<br>        it.prere.add(cnm); } }<br>    String[] ans=new String[schn];<br>    String[] bad={};<br>    for (int i=0; i&lt;schn; i+=1)<br>    { String a=findfst();<br>      if (a==null)<br>        return bad;<br>      ans[i]=a;<br>      killoff(a); }<br>    return ans; }<br> <br>/*<br>  public static void main(String[] args)<br>  { String[] test={"CSE121: CSE110",<br>"CSE110:",<br>"MATH122:"};<br>    Prerequisites p=new Prerequisites();<br>    String[] s=p.orderClasses(test);<br>    for (int i=0; i&lt;s.length; i+=1)<br>      System.out.println(""+i+": "+s[i]); }<br>*/<br>      <br>      }<br></td>