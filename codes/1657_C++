<td class="problemText" colspan="8" valign="middle" align="left">
            #line 4 "FaceFinder.cpp"<br>#include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;iostream&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;map&gt;<br>#include &lt;sstream&gt;<br>#include &lt;queue&gt;<br><br>using namespace std;<br><br>// START of code template<br><br>template&lt;class T&gt;<br>vector&lt;T&gt; split(string s, string tok, bool flag=false)<br>{<br>  s+=tok;<br>  int cur=0,i;<br>  vector&lt;T&gt; ans;<br>  while ((i=s.find(tok,cur))!=s.npos) {<br>    stringstream ss;<br>    ss &lt;&lt; string(&amp;s[cur],&amp;s[i]);<br>    T tmp;<br>    if ((ss &gt;&gt; tmp) || flag)<br>      ans.push_back(tmp);<br>    cur=i+tok.size();<br>  }<br>  return ans;<br>}<br><br>template&lt;class T&gt;<br>ostream &amp;operator&lt;&lt;(ostream &amp;os, vector&lt;T&gt; v)<br>{<br>  os &lt;&lt; "{";<br>  for(int i=0;i&lt;v.size();i++) {<br>    if (i) os &lt;&lt; ",";<br>    os &lt;&lt; v[i];<br>  }<br>  os &lt;&lt; "}";<br>  return os;<br>}<br><br>// END of code template<br><br>typedef int T;<br><br>struct TPoint {<br>  T x,y;<br>  TPoint(T a=0, T b=0) { x=a; y=b; }<br>  TPoint operator+(TPoint a) { return TPoint(x+a.x,y+a.y); }  <br>  TPoint operator-(TPoint a) { return TPoint(x-a.x,y-a.y); }<br>};<br><br>T det(TPoint a, TPoint b) { return a.x*b.y-a.y*b.x; }<br>T dot(TPoint a, TPoint b) { return a.x*a.y+b.x*b.y; }<br>T normsq(TPoint a) { return a.x*a.x+a.y*a.y; }<br><br>struct TLine { TPoint f,t; };<br><br>bool lsi(TLine a, TLine b, TPoint *res=0)<br>{<br>  TPoint ab=b.f-a.f,av=a.t-a.f,bv=b.t-b.f;<br>  T d=det(bv,av),fa=det(bv,ab),fb=det(av,ab);<br>  if (!d || fa&lt;=0 || fb&lt;=0 || fa&gt;=d || fb&gt;=d) return false;<br>  if (res) {<br>    res-&gt;x=fa*av.x/d+a.f.x;<br>    res-&gt;y=fa*av.y/d+a.f.y;<br>  }<br>  return true;<br>}<br><br>char m[420][420];<br><br>class FaceFinder {<br>public:<br>  <br>  void floodfill(int x, int y)<br>  {<br>    const int dx[4]={0,0,1,-1};<br>    const int dy[4]={1,-1,0,0};<br>    queue&lt; pair&lt;int,int&gt; &gt; q;<br>    q.push(make_pair(x,y));<br>    m[y][x]=1;<br>    while (!q.empty()) {<br>      pair&lt;int,int&gt; t=q.front();<br>      q.pop();<br>      for(int i=0;i&lt;4;i++) {<br>  x=t.first+dx[i];<br>  y=t.second+dy[i];<br>  if (x&gt;=0 &amp;&amp; y&gt;=0 &amp;&amp; x&lt;420 &amp;&amp; y&lt;420 &amp;&amp; !m[y][x]) {<br>    q.push(make_pair(x,y));<br>    m[y][x]=1;<br>  }<br>      }      <br>    }<br>  }<br><br><br>  int howMany(vector &lt;string&gt; lines) {<br>    int faces=0;<br>    //    map&lt; pair&lt;int,int&gt; &gt; vert;<br>    vector&lt;TLine&gt; lin;<br>    for(int i=0;i&lt;lines.size();i++) {<br>      vector&lt;int&gt; v=split&lt;int&gt;(lines[i]," ");<br>      TLine l;<br>      l.f.x=v[0]; l.f.y=v[1]; l.t.x=v[2]; l.t.y=v[3];<br>      lin.push_back(l);<br>    }<br>    /*<br>    for(int i=0;i&lt;lin.size();i++)<br>      for(int j=0;j&lt;lin.size();j++)<br>  if (i!=j) {<br>    TPoint p;<br>    if (lsi(lin[i],lin[j],&amp;p))<br>      vert.push_back(make_pair(p.x,p.y));<br>  }<br><br>    for(int i=0;i&lt;<br><br>    return faces;<br>    */<br>    memset(m,0,sizeof(m));<br>    for(int i=0;i&lt;lin.size();i++) {<br>      int x=lin[i].f.x*4,y=lin[i].f.y*4;<br>      int dx=lin[i].t.x-x/4,dy=lin[i].t.y-y/4;<br>      if (dx&gt;0) dx=1; if (dx&lt;0) dx=-1; if (dy&gt;0) dy=1; if (dy&lt;0) dy=-1;<br>      while (x!=lin[i].t.x*4 || y!=lin[i].t.y*4) {<br>  //  cout &lt;&lt; x &lt;&lt; "," &lt;&lt; y &lt;&lt; endl;<br>  m[y+5][x+5]=1;<br>  x+=dx; y+=dy;<br>      }<br>      m[y+5][x+5]=1;<br>    }<br>    for(int i=0;i&lt;50;i++) {<br>      for(int j=0;j&lt;50;j++)<br>  cout &lt;&lt; char(m[i][j]+'0');<br>      cout &lt;&lt; endl;<br>    }<br>    for(int i=0;i&lt;420;i++)<br>      for(int j=0;j&lt;420;j++)<br>  if (!m[i][j]) {<br>    faces++;<br>    floodfill(j,i);<br>  }<br>    return faces;<br>  }<br>};<br><br><br>// Powered by FileEdit<br></td>