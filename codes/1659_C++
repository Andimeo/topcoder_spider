<td class="problemText" colspan="8" valign="middle" align="left">
            #pragma warning( disable : 4786 )<br><br>#include &lt;vector&gt;<br>#include &lt;string&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;set&gt;<br>#include &lt;map&gt;<br>#include &lt;functional&gt;<br>#include &lt;deque&gt;<br><br>using namespace std;<br><br>vector&lt; string &gt; tokenize( string in, string kar ) {<br>  string::iterator cp = in.begin();<br>  vector&lt; string &gt; oot;<br>  while( cp != in.end() ) {<br>    while( cp != in.end() &amp;&amp; count( kar.begin(), kar.end(), *cp ) )<br>      cp++;<br>    if( cp != in.end() )<br>      oot.push_back( string( cp, find_first_of( cp, in.end(), kar.begin(), kar.end() ) ) );<br>    cp = find_first_of( cp, in.end(), kar.begin(), kar.end() );<br>  };<br>  return oot;<br>};<br><br>vector&lt; int &gt; sti( const vector&lt; string &gt; &amp;foo ) {<br>  int i;<br>  vector&lt; int &gt; bar;<br>  for( i = 0; i &lt; foo.size(); i++ ) {<br>    bar.push_back( atoi( foo[ i ].c_str() ) );<br>  }<br>  return bar;<br>};<br><br>long double ipow( int a, int b ) {<br>  long double t = 1;<br>  for( int i = 0; i &lt; b; i++ )<br>    t *= a;<br>  return t;<br>};<br><br>long double fact( int a ) {<br>  long double t = 1;<br>  for( int i = 1; i &lt;= a; i++ )<br>    t *= i;<br>  return t;<br>};<br><br>long double ncr( int a, int b ) {<br>  return fact( a ) / ( fact( b ) * fact( a - b ) ); };<br><br>long double makechance( int choi, int blan, bool sort, bool uniq ) {<br>  if( !sort &amp;&amp; !uniq ) {<br>    return ipow( choi, blan );<br>  } else if( !sort &amp;&amp; uniq ) {<br>    return ncr( choi, blan ) * fact( blan );<br>  } else if( sort &amp;&amp; !uniq ) {<br>    return ncr( choi - 1 + blan, blan );<br>  } else if( sort &amp;&amp; uniq ) {<br>    return ncr( choi, blan );<br>  }<br>};<br><br>class Lottery {<br>  public:<br>  vector &lt;string&gt; sortByOdds(vector &lt;string&gt; a) {<br>    vector&lt; pair&lt; long double, string &gt; &gt; ned;<br>    for( int i = 0; i &lt; a.size(); i++ ) {<br>      vector&lt; string &gt; toka = tokenize( a[ i ], ":" );<br>      vector&lt; string &gt; tokb = tokenize( toka[ 1 ], " " );<br>      vector&lt; int &gt; tokc = sti( tokb );<br>      ned.push_back( make_pair( makechance( tokc[ 0 ], tokc[ 1 ], tokb[ 2 ] == "T", tokb[ 3 ] == "T" ), toka[ 0 ] ) );<br>    }<br>    sort( ned.begin(), ned.end() );<br>    vector&lt; string &gt; oot;<br>    for( int i = 0; i &lt; ned.size(); i++ ) {<br>      printf( "%s is %lf\n", ned[ i ].second.c_str(), (double)ned[ i ].first );<br>      oot.push_back( ned[ i ].second );<br>    };<br>    return oot;<br>  }<br>};<br></td>