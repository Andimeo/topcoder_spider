<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;iostream&gt;<br>#include &lt;utility&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;vector&gt;<br>#include &lt;string&gt;<br>#include &lt;cstring&gt;<br>using namespace std;<br>typedef vector&lt;int&gt; VI; typedef vector&lt;VI&gt; VVI;<br>typedef vector&lt;string&gt; VS; typedef vector&lt;VS&gt; VVS;<br>typedef vector&lt;bool&gt; VB; typedef vector&lt;VB&gt; VVB;<br>typedef vector&lt;double&gt; VD; typedef vector&lt;VD&gt; VVD;<br>#define guard(X) for(bool X=1;X;X=0)<br>#define for_up(X, L) for(int X=0;X&lt;(L);X++)<br>#define for_down(X, L) for(int X=(L)-1;X&gt;=0;X--)<br>#define for_range(X, L, H) guard(X##_fi)for(typeof(H)X=(L);X!=(H);++X,X##_fi=0)<br>#define for_each(X, C) for_range(X,(C).begin(),(C).end())<br>#define for_tok(X,D,S) guard(X##_fi)for(char*for_tok__s1=strdup((S).c_str()),*for_tok__s3;for_tok__s1;free(for_tok__s1),for_tok__s1=0)for(char*X=strtok_r(for_tok__s1,(D),&amp;for_tok__s3);X;X=strtok_r(0,(D),&amp;for_tok__s3),X##_fi=0)<br>#define for_tok_ws(X,S) for_tok(X," \n\t",S)<br>#define for_bool(X) for(bool X=0,__g=1;__g;__g=X=!X)<br>#define let(X,V) guard(__g)for(typeof(V)X=V;__g;__g=0)<br> <br>VI r, d, q;<br>int n;<br> <br>int a[1100000];<br> <br>bool go(int x, int v) {<br>  if (x == n) return true;<br>  if (v == q.size()) return false;<br>  // try include<br>  if (a[q[v]]) {<br>    r[x] = q[v];<br>    int j;<br>    for (j = 0; j &lt; x; j++) {<br>      const int z = r[x] - r[j];<br>      if (a[z] == 0) break;<br>      --a[z];<br>    }<br>    if (j == x &amp;&amp; go(x+1, v+1)) return true;<br>    for (j--; j &gt;= 0; j--) {<br>      const int z = r[x] - r[j];<br>      ++a[z];<br>    }<br>  }<br>  return go(x, v+1);<br>}<br> <br>struct PointsOnAxis {<br> <br>vector &lt;int&gt; findPoints(vector &lt;int&gt; distances) {<br>  d = distances;<br>  sort(d.begin(), d.end());<br>  for (int i = 0; i &lt; d.size(); i++) {<br>    if (a[d[i]] == 0) q.push_back(d[i]);<br>    a[d[i]]++;<br>  }<br>  for (n = 2; n &lt;= 10; n++) {<br>    if (n * (n - 1) / 2 == d.size()) break;<br>  }<br>  r = VI(n);<br>  r[0] = 0;<br>  if (go(1, 0)) return r;<br>  return VI();<br>}<br> <br> <br>};<br> <br> <br>// vim:ts=4:sw=4<br></td>