<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br> <br>public class PointsOnAxis {<br>  int N;<br>  int[] ret;<br>  public int[] findPoints(int[] distances) {<br>    ret = null;<br>    int n = distances.length;<br>    N = 1;<br>    for (;;) {<br>      if (N*(N - 1)/2 == n) break;<br>      N++;<br>    }<br>    int[] a = new int[2];<br>    a[0] = 0;<br>    Arrays.sort(distances);<br>    a[1] = distances[n - 1];<br>    int[] d = new int[n - 1];<br>    System.arraycopy(distances, 0, d, 0, d.length);<br>    go(d, a);<br>    if (ret == null) return new int[0];<br>    return ret;<br>  }<br>  boolean better(int[] a, int[] b) {<br>    if (b == null) return true;<br>    for (int i = 0; i &lt; a.length; i++) {<br>      if (a[i] &lt; b[i]) return true;<br>      if (b[i] &lt; a[i]) return false;<br>    }<br>    return false;<br>  }<br>  void go(int[] d, int[] a) {<br>    if (d.length == 0) {<br>      int[] b = new int[a.length];<br>      System.arraycopy(a, 0, b, 0, a.length);<br>      Arrays.sort(b);<br>      if (better(b, ret)) {<br>        ret = b;<br>      }<br>      return;<br>    }<br>    int dis = d[d.length - 1];<br>    int newp = dis;<br>    int[] newa = new int[a.length + 1];<br>    System.arraycopy(a, 0, newa, 0, a.length);<br>    int[] newd = new int[d.length - 1];<br>    System.arraycopy(d, 0, newd, 0, d.length-1);<br>    newa[newa.length - 1] = newp;<br>    boolean ok = true;<br>    for (int i = 1; i &lt; a.length; i++) {<br>      int curDis = Math.abs(newp - a[i]);<br>      int idx = find(newd, curDis);<br>      if (idx == -1) {<br>        ok = false;<br>        break;<br>      }<br>      for (int j = idx; j &lt; newd.length - 1; j++) {<br>        newd[j] = newd[j+1];<br>      }<br>    }<br>    if (ok) {<br>      int n1 = a.length;<br>      int newdLength = d.length - n1;<br>      int[] newnewd = new int[newdLength];<br>      System.arraycopy(newd, 0, newnewd, 0, newdLength);<br>      Arrays.sort(newnewd);<br>      go(newnewd, newa);<br>    }<br>    <br>    newp = a[1] - dis;<br>    newa = new int[a.length + 1];<br>    System.arraycopy(a, 0, newa, 0, a.length);<br>    newd = new int[d.length - 1];<br>    System.arraycopy(d, 0, newd, 0, d.length-1);<br>    newa[newa.length - 1] = newp;<br>    ok = true;<br>    for (int i = 0; i &lt; a.length; i++) {<br>      if (i == 1) continue;<br>      int curDis = Math.abs(newp - a[i]);<br>      int idx = find(newd, curDis);<br>      if (idx == -1) {<br>        ok = false;<br>        break;<br>      }<br>      for (int j = idx; j &lt; newd.length - 1; j++) {<br>        newd[j] = newd[j+1];<br>      }<br>    }<br>    if (ok) {<br>      int n1 = a.length;<br>      int newdLength = d.length - n1;<br>      int[] newnewd = new int[newdLength];<br>      Arrays.sort(newnewd);<br>      System.arraycopy(newd, 0, newnewd, 0, newdLength);<br>      go(newnewd, newa);<br>    }    <br>  }<br>  <br>  int find(int[] a, int b) {<br>    for (int i = 0; i &lt; a.length; i++) {<br>      if (a[i] == b) return i;<br>    }<br>    return -1;<br>  }<br> <br>  void display(int[] a) {<br>    for (int i = 0; i &lt; a.length; i++) {<br>      System.out.print(a[i]);<br>      if (i != a.length - 1) {<br>        System.out.print('\t');<br>      }<br>    }<br>    System.out.println();<br>  }<br> <br>  void display(int[][] a) {<br>    System.out.println("---------------------------------------------------------");<br>    for (int i = 0; i &lt; a.length; i++) {<br>      display(a[i]);<br>    }<br>    System.out.println("---------------------------------------------------------");<br>  }<br> <br>  void display(boolean[] a) {<br>    for (int i = 0; i &lt; a.length; i++) {<br>      System.out.print(a[i]);<br>      if (i != a.length - 1) {<br>        System.out.print('\t');<br>      }<br>    }<br>    System.out.println();<br>  }<br> <br>  void display(boolean[][] a) {<br>    System.out.println("---------------------------------------------------------");<br>    for (int i = 0; i &lt; a.length; i++) {<br>      display(a[i]);<br>    }<br>    System.out.println("---------------------------------------------------------");<br>  }<br> <br>}<br> <br>// Powered by PopsEdit<br>// Powered by CodeProcessor<br></td>