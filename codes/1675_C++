<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;sstream&gt;<br>#include &lt;vector&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;string&gt;<br>#include &lt;iostream&gt;<br>#include &lt;fstream&gt;<br>#include &lt;iterator&gt;<br>using namespace std;<br> <br>ostream&amp; operator&lt;&lt;(ostream&amp; out, const vector&lt;string&gt;&amp; s)<br>{<br>  cout &lt;&lt; "\n{";<br>  copy(s.begin(), s.end(),ostream_iterator&lt;vector&lt;string&gt;::value_type&gt;(cout," "));<br>  cout &lt;&lt; "}\n";<br>     return out;<br>}<br> <br>ostream&amp; operator&lt;&lt;(ostream&amp; out, const vector&lt;int&gt;&amp; s)<br>{<br>  cout &lt;&lt; "\n{";<br>  copy(s.begin(), s.end(), ostream_iterator&lt;vector&lt;int&gt;::value_type&gt;(cout," "));<br>  cout &lt;&lt; "}\n";<br>  return out;<br>}<br> <br>vector&lt;string&gt; split (string s1, string tok)<br>{<br>  string temp1 = s1;<br>  int pos = 0;<br>  int size = tok.size();<br>  vector&lt;string&gt; final(0);<br>  final.clear();<br>  while (pos != -1)<br>  {<br>  <br>    pos = temp1.find (tok);<br>    if (temp1.substr(0,pos) != "")<br>      final.insert(final.end(),temp1.substr(0,pos));<br>    if (pos == -1) break;<br>    temp1 = temp1.substr(pos+size,temp1.size()-pos-1);<br>    //index++;<br>  }<br>  //final.resize(index);<br>  return final;<br>}<br> <br>class ExerciseMachine {<br>public:<br>int getPercentages(string time)<br> {<br>   vector&lt;string&gt; blah = split (time, ":");<br>   int hour = atoi(blah[0].c_str());<br>   int min = atoi(blah[1].c_str());<br>   int sec = atoi(blah[2].c_str());<br>   int totalsec = sec + min * 60 + hour * 3600;<br>   int final = 0;<br>   for (int n = 1; n &lt; 100;n++)<br>   {<br>     if (totalsec * n % 100 == 0) final++;<br>   }<br>   <br>   <br> <br>// BEGIN CUT HERE<br>    static bool s_FirstTime = true; if (s_FirstTime) { s_FirstTime = false; run_test(-1); }<br>// END CUT HERE<br>  return final;<br>}<br> <br>// BEGIN CUT HERE<br>  public:<br>  void run_test(int Case) { if ((Case == -1) || (Case == 0)) test_case_0(); if ((Case == -1) || (Case == 1)) test_case_1(); if ((Case == -1) || (Case == 2)) test_case_2(); if ((Case == -1) || (Case == 3)) test_case_3(); if ((Case == -1) || (Case == 4)) test_case_4(); }<br>  private:<br>  template &lt;typename T&gt; string print_array(const vector&lt;T&gt; &amp;V) { ostringstream os; os &lt;&lt; "{ "; for (typename vector&lt;T&gt;::const_iterator iter = V.begin(); iter != V.end(); ++iter) os &lt;&lt; '\"' &lt;&lt; *iter &lt;&lt; "\","; os &lt;&lt; " }"; return os.str(); }<br>  void verify_case(int Case, const int &amp;Expected, const int &amp;Received) { cerr &lt;&lt; "Test Case #" &lt;&lt; Case &lt;&lt; "..."; if (Expected == Received) cerr &lt;&lt; "PASSED" &lt;&lt; endl; else { cerr &lt;&lt; "FAILED" &lt;&lt; endl; cerr &lt;&lt; "\tExpected: \"" &lt;&lt; Expected &lt;&lt; '\"' &lt;&lt; endl; cerr &lt;&lt; "\tReceived: \"" &lt;&lt; Received &lt;&lt; '\"' &lt;&lt; endl; } }<br>  void test_case_0() { string Arg0 = "00:30:00"; int Arg1 = 99; verify_case(0, Arg1, getPercentages(Arg0)); }<br>  void test_case_1() { string Arg0 = "00:28:00"; int Arg1 = 19; verify_case(1, Arg1, getPercentages(Arg0)); }<br>  void test_case_2() { string Arg0 = "23:59:59"; int Arg1 = 0; verify_case(2, Arg1, getPercentages(Arg0)); }<br>  void test_case_3() { string Arg0 = "00:14:10"; int Arg1 = 49; verify_case(3, Arg1, getPercentages(Arg0)); }<br>  void test_case_4() { string Arg0 = "00:19:16"; int Arg1 = 3; verify_case(4, Arg1, getPercentages(Arg0)); }<br> <br>// END CUT HERE<br> <br>};<br> <br>// Powered by PopsEdit<br>// Powered by TZTester 1.01 [25-Feb-2003]<br>// Powered by CodeProcessor<br></td>