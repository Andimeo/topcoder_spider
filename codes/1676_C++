<td class="problemText" colspan="8" valign="middle" align="left">
            #pragma warning( disable : 4786 )<br><br>#include &lt;vector&gt;<br>#include &lt;string&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;set&gt;<br>#include &lt;map&gt;<br>#include &lt;functional&gt;<br>#include &lt;deque&gt;<br><br>using namespace std;<br><br>template&lt; class T &gt; class numerize {<br>public:<br>  map&lt; T, int &gt; refs;<br><br>  int operator[]( const T &amp;item ) {<br>    if( refs.count( item ) )<br>      return refs[ item ];<br>    int next = refs.size();<br>    refs[ item ] = next;<br>    return next;<br>  }<br>};<br><br>vector&lt; string &gt; tokenize( string in, string kar ) {<br>  string::iterator cp = in.begin();<br>  vector&lt; string &gt; oot;<br>  while( cp != in.end() ) {<br>    while( cp != in.end() &amp;&amp; count( kar.begin(), kar.end(), *cp ) )<br>      cp++;<br>    if( cp != in.end() )<br>      oot.push_back( string( cp, find_first_of( cp, in.end(), kar.begin(), kar.end() ) ) );<br>    cp = find_first_of( cp, in.end(), kar.begin(), kar.end() );<br>  };<br>  return oot;<br>};<br><br><br>numerize&lt; string &gt; nt;<br><br>int colz[ 26 ];<br><br>int pds[ 20 ][ 5 ];<br><br>int bst = 30;<br>int pdc;<br><br>void doit( int x, int c ) {<br>  if( x == pdc ) {<br>    for( int i = 0; i &lt; 25; i++ )<br>      if( colz[ i ] == 1 )<br>        return;<br>    bst = min( bst, c );<br>  } else {<br>    doit( x + 1, c );<br>    for( int i = 0; i &lt; 5; i++ )<br>      colz[ pds[ x ][ i ] ]--;<br>    doit( x + 1, c + 1 );<br>    for( int i = 0; i &lt; 5; i++ )<br>      colz[ pds[ x ][ i ] ]++;<br>  }<br>}<br><br>class StampPads {<br>  public:<br>  int bestCombo(vector &lt;string&gt; a, vector &lt;string&gt; b) {<br>    for( int i = 0; i &lt; b.size(); i++ )<br>      nt[ b[ i ] ];<br>    memset( colz, 0, sizeof( colz ) );<br>    for( int i = 0; i &lt; b.size(); i++ )<br>      colz[ i ] = 1;<br>    for( int i = 0; i &lt; a.size(); i++ ) {<br>      vector&lt; string &gt; tki = tokenize( a[ i ], " " );<br>      for( int j = 0; j &lt; 5; j++ ) {<br>        pds[ i ][ j ] = nt[ tki[ j ] ];<br>        if( pds[ i ][ j ] &gt;= b.size() )<br>          pds[ i ][ j ] = 25;<br>      }<br>    }<br>    pdc = a.size();<br>    doit( 0, 0 );<br>    if( bst == 30 )<br>      return -1;<br>    return bst;<br>  }<br>};<br><br><br><br>// Powered by FileEdit<br></td>