<td class="problemText" colspan="8" valign="middle" align="left">
            /*/*///*/*/ Powered by radedit!            /*/*/*/*/*/ ;<br>/*/*//*/*/  import java . util .           /*/*/*/*/*/ ;<br>/*/*//*/*/  import java . lang . reflect . /*/*/*/*/*/ ;<br>public class StampPads {<br>   boolean ddd = false ;<br>String[] s2sa(String s) {<br>  StringTokenizer t=new StringTokenizer(s.trim());<br>  String[]r=new String[t.countTokens()];<br>  int i=0;<br>  while(t.hasMoreTokens())try{<br>     r[i++]=t.nextToken();<br>  }catch(Exception e){};<br>  return r;<br>}<br>  int[] p ;<br>  int np, n ;<br>  int goal ;<br>  int best(int sofar, int at, int used) {<br>    if (sofar == goal) {<br>      return used ;<br>    }<br>    if (at &gt;= np) {<br>      return 1000 ;<br>    }<br>    return Math.min(<br>        best(sofar | p[at], at+1, used+1),<br>        best(sofar, at+1, used)) ;<br>  }<br>  public int bestCombo(String[] pads, String[] wishlist) {<br>    int i, j, k ;<br>    np = pads.length ;<br>    n = wishlist.length ;<br>    p = new int[pads.length] ;<br>    for (i=0; i&lt;pads.length; i++) {<br>      String[] f = s2sa(pads[i]) ;<br>      int w = 0 ;<br>      for (k=0; k&lt;f.length; k++) {<br>  for (j=0; j&lt;wishlist.length; j++) {<br>    if (wishlist[j].equals(f[k])) {<br>      w |= (1 &lt;&lt; j) ;<br>    }<br>  }<br>      }<br>      p[i] = w ;<br>    }<br>    goal = (1 &lt;&lt; n) - 1 ;<br>    int b = best(0, 0, 0) ;<br>    if (b &gt; 100) {<br>      return -1 ;<br>    }<br>    return b ;<br>  }<br>}<br></td>