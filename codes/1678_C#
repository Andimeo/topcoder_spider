<td class="problemText" colspan="8" valign="middle" align="left">
            using System; using System.Collections; public class ParkingLot {public int fastest(string[] lot_) {<br>lot = lot_;<br>X = lot[0].Length;<br>Y = lot.Length;<br> <br>int i,j;<br>for (j=0; j&lt;Y; j++) for (i=0; i&lt;X; i++)<br> {<br> if (lot[j][i] == 'Y') { startX = i; startY = j; }<br> if (lot[j][i] == 'E') { endX = i; endY = j; }<br> else if (lot[j][i] == 'C' || lot[j][i] == 'Y')<br>  {<br>  carX[numCars] = i; carY[numCars] = j;<br>  if (lot[j][i] == 'Y') me=numCars;<br>  numCars++;<br>  }<br> }<br> <br>for (int carIndex = 0; carIndex &lt;= numCars; carIndex++)<br> CalcDist(carIndex, false);<br> <br>CalcDist(51, true);<br> <br>for (int carIndex = 0; carIndex &lt;= numCars; carIndex++)<br> for (int x=0; x&lt;X; x++)<br>  for (int y=0; y&lt;Y; y++)<br>   if (dist[carIndex, x + y*50] &gt; 0 &amp;&amp; lot[y][x] == 'A')<br>   {<br>   // Console.WriteLine("{0}: x={1}, y={2}, dist={3}", carIndex, x, y, dist[carIndex, x+y*50]);<br>   int index = dist[carIndex, x + y*50]*9999 + x + y*50;<br>   ArrayList curCars = (ArrayList) targets[index];<br>   if (curCars == null) { curCars = new ArrayList(); targets[index] = curCars; }<br>   curCars.Add(carIndex);<br>   }<br> <br>foreach (ArrayList al in targets.Values) al.Sort();<br> <br>Hashtable parked = new Hashtable();<br>Hashtable used = new Hashtable();<br>int fastest = 999999;<br>for (int t=1; t &lt;= 2500; t++)<br> for (int y=0; y&lt;Y; y++)<br>  for (int x=0; x&lt;X; x++)<br>   if (lot[y][x] == 'A' &amp;&amp; !used.Contains(x + y*50))<br>   {<br>   int index = t*9999 + x + y*50;<br>   ArrayList curCars = (ArrayList) targets[index];<br>   if (curCars == null) continue;<br>   <br>   foreach (int carIndex in curCars)<br>    if (carIndex == me)<br>     {<br>     int walk = 2*dist[51, x + y*50];<br>     if (walk &gt; 0)<br>      {<br>      int cur = t + walk;<br>      fastest = Math.Min(fastest, cur);<br>      }<br>     }<br>    else if (!parked.Contains(carIndex))<br>     {<br>     parked[carIndex] = true;<br>     used[x + y*50] = true;<br>     break;<br>     }<br>   }<br> <br>if (fastest == 999999) return -1;<br>return fastest;<br>}<br> <br>void CalcDist(int carIndex, bool walking)<br>{<br>bool[,] seen = new bool[X,Y];<br>int[] xs = new int[2500];<br>int[] ys = new int[2500];<br>int toDo = 1;<br>int done = 0;<br>if (carIndex == 51)<br> {<br> xs[0] = endX;<br> ys[0] = endY;<br> }<br>else<br> {<br> xs[0] = carX[carIndex];<br> ys[0] = carY[carIndex];<br> }<br> <br>seen[xs[0],ys[0]] = true;<br>while (done &lt; toDo)<br> {<br> int x = xs[done];<br> int y = ys[done];<br> done++;<br> // Console.WriteLine("{0}: x={1}, y={2}", carIndex, x, y);<br> <br> for (int dir=0; dir&lt;4; dir++)<br>  {<br>  int x2 = x; int y2 = y;<br>  if (dir == 0) { if (x==0) continue; x2--; }<br>  if (dir == 1) { if (y==0) continue; y2--; }<br>  if (dir == 2) { if (x==X-1) continue; x2++; }<br>  if (dir == 3) { if (y==Y-1) continue; y2++; }<br> <br>  if (seen[x2,y2]) continue;<br>  seen[x2,y2] = true;<br>  char dest = lot[y2][x2];<br>  // Console.WriteLine("{0}:   x2={1}, y2={2}, dest={3}", carIndex, x2, y2, dest);<br>  if (dest == 'X') continue;<br>  if (dest == 'U' || dest == 'E') if (!walking) continue;<br> <br>  int spotIndex = x2 + y2*50;<br>  if (dist[carIndex, spotIndex] == 0)<br>   dist[carIndex, spotIndex] = dist[carIndex, x + y*50] + 1;<br>  else<br>   dist[carIndex, spotIndex] = Math.Min(dist[carIndex, spotIndex], dist[carIndex, x + y*50] + 1);<br> <br>  if (dest == 'A')<br>   {   <br>   // Console.WriteLine("{0}: {1}/{2} = {3}", carIndex, x2, y2, dist[carIndex,spotIndex]);<br>   if (!walking) continue;<br>   }<br>  <br>  xs[toDo] = x2;<br>  ys[toDo] = y2;<br>  toDo++;<br>  }<br> <br> }<br> <br>} // CalcDist<br> <br>string[] lot;<br>int X,Y;<br>int startX,startY,endX,endY;<br>int numCars = 0;<br>int[] carX = new int[51], carY = new int[51];<br>int[,] dist = new int[52,2500]; // how long it takes car x to get to loc y<br>Hashtable targets = new Hashtable(); // which cars can park at x in y<br>int me;<br>}<br></td>