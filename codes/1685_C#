<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections;<br> <br> <br>  public class Sets<br>  {<br>    public int[] Union (SortedList A, SortedList B) <br>    {<br>      SortedList R = new SortedList();<br>      foreach (int i in A.GetKeyList()) <br>      {<br>        R.Add (i, 1);<br>      }<br>      foreach (int i in B.GetKeyList()) <br>      {<br>        if (!R.ContainsKey (i)) R.Add (i, 1);<br>      }<br>      int [] r = new int[R.Count];<br>      int j = 0;<br>      foreach (int x in R.GetKeyList()) <br>      {  <br>        r[j++] = x;<br>      }<br>      return r;<br>    }<br> <br>    public int[] Intersection (SortedList A, SortedList B) <br>    {<br>      SortedList R = new SortedList();<br>      foreach (int i in A.GetKeyList()) <br>      {<br>        if (B.ContainsKey (i)) <br>        {<br>          R.Add (i, 1);<br>        }<br>      }<br>      int [] r = new int[R.Count];<br>      int j = 0;<br>      foreach (int x in R.GetKeyList()) <br>      {  <br>        r[j++] = x;<br>      }<br>      return r;<br>    }<br> <br>    public int[] SymDiff (SortedList A, SortedList B) <br>    {<br>      SortedList R = new SortedList();<br>      foreach (int i in A.GetKeyList()) <br>      {<br>        if (!B.ContainsKey (i)) <br>        {<br>          R.Add (i, 1);<br>        }<br>      }<br>      foreach (int i in B.GetKeyList()) <br>      {<br>        if (!A.ContainsKey (i)) <br>        {<br>          if (!R.ContainsKey (i)) R.Add (i, 1);<br>        }<br>      }<br>      int [] r = new int[R.Count];<br>      int j = 0;<br>      foreach (int x in R.GetKeyList()) <br>      {  <br>        r[j++] = x;<br>      }<br>      return r;<br>    }<br> <br>    public int[] operate(int[] a, int[]b, string operation)<br>    {<br>      SortedList A = new SortedList (a.Length);<br>      SortedList B = new SortedList (b.Length);<br>      foreach (int x in a) <br>      {<br>        A.Add (x, 1);<br>      }<br>      foreach (int x in b) <br>      {<br>        B.Add (x, 1);<br>      }<br>      if (operation == "UNION") return Union (A, B);<br>      if (operation == "INTERSECTION") return Intersection (A, B);<br>      if (operation == "SYMMETRIC DIFFERENCE") return SymDiff (A, B);<br>      return new int[0];<br>    }<br> <br>}<br></td>