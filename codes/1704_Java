<td class="problemText" colspan="8" valign="middle" align="left">
            // Oblok -- University of Utah<br><br>import java.util.*;<br><br>public class BinaryCode<br>{<br>    public String[] decode(String mm /*message*/)<br>    {<br>        int mmlen=mm.length();<br>        int c=0, count=0, i=0, j=0, k=0, l=0, x=0, y=0, z=0;<br>        char ch;<br>        String s; StringTokenizer st; Iterator it;<br>        String[] rv = new String[2];<br><br>        char v[] = charize(mm);<br><br>        rv[0] = "0";<br><br>        for (i = 1; i &lt; mmlen; i++)<br>        {<br>          if (v[i-1] == '0')<br>          {<br>            rv[0] += 0;<br>          }<br>          else if (v[i-1] == '1')<br>          {<br>            rv[0] += 1;<br>            v[i-1]--;v[i]--;if(i+1&lt;mmlen)v[i+1]--;<br>          }<br>          else<br>          {<br>            rv[0] = "NONE";<br>            break;<br>          }<br>        }<br>        if (v[mmlen-1] != '0')<br>          rv[0] = "NONE";<br><br>        rv[1] = "1";<br>        v = charize(mm);<br>        v[0]--;<br>        if (mmlen &gt; 1)<br>        v[1]--;<br><br>        for (i = 1; i &lt; mmlen; i++)<br>        {<br>          if (v[i-1] == '0')<br>          {<br>            rv[1] += 0;<br>          }<br>          else if (v[i-1] == '1')<br>          {<br>            rv[1] += 1;<br>            v[i-1]--;v[i]--;if(i+1&lt;mmlen)v[i+1]--;<br>          }<br>          else<br>          {<br>            rv[1] = "NONE";<br>            break;<br>          }<br>        }<br>        if (v[mmlen-1] != '0')<br>          rv[1] = "NONE";<br><br>        return rv;<br>    }<br><br>    static public void main (String[] args)<br>    {<br>        /*{<br>        BinaryCode tempObject = new BinaryCode ();<br>        String message = ;<br>        String[] result = tempObject.decode (message);<br><br>        System.out.println ("Expected: ");<br>        System.out.print ("Received: ");<br>        String sep = "{ "; for (int ac = 0; ac &lt; result.length; ac++)<br>        {System.out.print (sep + "\"" + result[ac] + "\""); sep = ",  ";}<br>        System.out.println (" }");<br>        }<br>        */<br>        {<br>        BinaryCode tempObject = new BinaryCode ();<br>        String message = "123210122";<br>        String[] result = tempObject.decode (message);<br><br>        System.out.println ("Expected: { \"011100011\",  \"NONE\" }");<br>        System.out.print ("Received: ");<br>        String sep = "{ "; for (int ac = 0; ac &lt; result.length; ac++)<br>        {System.out.print (sep + "\"" + result[ac] + "\""); sep = ",  ";}<br>        System.out.println (" }");<br>        }<br><br>        {<br>        BinaryCode tempObject = new BinaryCode ();<br>        String message = "11";<br>        String[] result = tempObject.decode (message);<br><br>        System.out.println ("Expected: { \"01\",  \"10\" }");<br>        System.out.print ("Received: ");<br>        String sep = "{ "; for (int ac = 0; ac &lt; result.length; ac++)<br>        {System.out.print (sep + "\"" + result[ac] + "\""); sep = ",  ";}<br>        System.out.println (" }");<br>        }<br><br>        {<br>        BinaryCode tempObject = new BinaryCode ();<br>        String message = "22111";<br>        String[] result = tempObject.decode (message);<br><br>        System.out.println ("Expected: { \"NONE\",  \"11001\" }");<br>        System.out.print ("Received: ");<br>        String sep = "{ "; for (int ac = 0; ac &lt; result.length; ac++)<br>        {System.out.print (sep + "\"" + result[ac] + "\""); sep = ",  ";}<br>        System.out.println (" }");<br>        }<br><br>        {<br>        BinaryCode tempObject = new BinaryCode ();<br>        String message = "123210120";<br>        String[] result = tempObject.decode (message);<br><br>        System.out.println ("Expected: { \"NONE\",  \"NONE\" }");<br>        System.out.print ("Received: ");<br>        String sep = "{ "; for (int ac = 0; ac &lt; result.length; ac++)<br>        {System.out.print (sep + "\"" + result[ac] + "\""); sep = ",  ";}<br>        System.out.println (" }");<br>        }<br><br>        {<br>        BinaryCode tempObject = new BinaryCode ();<br>        String message = "3";<br>        String[] result = tempObject.decode (message);<br><br>        System.out.println ("Expected: { \"NONE\",  \"NONE\" }");<br>        System.out.print ("Received: ");<br>        String sep = "{ "; for (int ac = 0; ac &lt; result.length; ac++)<br>        {System.out.print (sep + "\"" + result[ac] + "\""); sep = ",  ";}<br>        System.out.println (" }");<br>        }<br><br>        {<br>        BinaryCode tempObject = new BinaryCode ();<br>        String message = "12221112222221112221111111112221111";<br>        String[] result = tempObject.decode (message);<br><br>        System.out.println ("Expected: { \"01101001101101001101001001001101001\",  \"10110010110110010110010010010110010\" }");<br>        System.out.print ("Received: ");<br>        String sep = "{ "; for (int ac = 0; ac &lt; result.length; ac++)<br>        {System.out.print (sep + "\"" + result[ac] + "\""); sep = ",  ";}<br>        System.out.println (" }");<br>        }<br><br>        /*{<br>        BinaryCode tempObject = new BinaryCode ();<br>        String message = ;<br>        String[] result = tempObject.decode (message);<br><br>        System.out.println ("Expected: ");<br>        System.out.print ("Received: ");<br>        String sep = "{ "; for (int ac = 0; ac &lt; result.length; ac++)<br>        {System.out.print (sep + "\"" + result[ac] + "\""); sep = ",  ";}<br>        System.out.println (" }");<br>        }<br>        */<br>    }<br>    public String[] tokenize (String s)<br>    {<br>        // P. Jensen's (Oblok's) library code -- Copyright 2003.  Converts<br>        //   a string into an array of its delimited tokens.<br>        StringTokenizer st=new StringTokenizer(s," ");<br>        String[] rv=new String[st.countTokens()];<br>        for (int i=0;i&lt;rv.length;i++)rv[i]=st.nextToken();<br>        return rv;<br>    }<br><br>    public String[][] tokenize (String s[])<br>    {<br>        // P. Jensen's (Oblok's) library code -- Copyright 2003.  Converts<br>        //   a string array into arrays of its delimited tokens.<br>        String[][] rv = new String[s.length][];<br>        for (int j=0;j&lt;s.length;j++){<br>          StringTokenizer st=new StringTokenizer(s[j]," ");<br>          rv[j]=new String[st.countTokens()];<br>          for (int i=0;i&lt;rv[j].length;i++)rv[j][i]=st.nextToken();}<br>        return rv;<br>    }<br><br>    static public char[] charize (String s)<br>    {<br>        // P. Jensen's (Oblok's) library code -- Too simple to comment.<br>        return s.toCharArray();<br>    }<br><br>    static public char[][] charize (String[] s)<br>    {<br>        // P. Jensen's (Oblok's) library code -- Copyright 2003.  Converts<br>        //   a string array into arrays of its characters.<br>        char[][] rv = new char[s.length][];<br>        for (int i=0;i&lt;s.length;i++)<br>          rv[i]=s[i].toCharArray();<br>        return rv;<br>    }<br><br>    public int[] valueize (String s)<br>    {<br>        // P. Jensen's (Oblok's) library code -- Copyright 2003.  Converts<br>        //   the string tokens to an array of integers, replacing invalid<br>        //   values with MIN_VALUE.<br>        String[] t=tokenize(s);<br>        int[] rv=new int[t.length];<br>        for (int i=0;i&lt;t.length;i++)<br>          try{rv[i]=Integer.parseInt(t[i]);}catch(NumberFormatException e){rv[i]=Integer.MIN_VALUE;}<br>        return rv;<br>    }<br>    public int[][] valueize (String s[])<br>    {<br>        // P. Jensen's (Oblok's) library code -- Copyright 2003.  Converts<br>        //   the array of string tokens to arrays of integers, replacing invalid<br>        //   values with MIN_VALUE.<br>        int[][] rv=new int[s.length][];<br>        for (int i=0;i&lt;s.length;i++)<br>          rv[i]=valueize(s[i]);<br>        return rv;<br>    }<br>    public void print (String s){System.out.print(s);}<br>    public void println (String s){System.out.println(s);}<br>}<br></td>