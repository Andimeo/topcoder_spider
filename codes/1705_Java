<td class="problemText" colspan="8" valign="middle" align="left">
            /*/*///*/*/ Powered by radedit!            /*/*/*/*/*/ ;<br>/*/*//*/*/  import java . util .           /*/*/*/*/*/ ;<br>/*/*//*/*/  import java . lang . reflect . /*/*/*/*/*/ ;<br>public class MergeSort {<br>   boolean ddd = false ;<br>  int cmp = 0 ;<br>  List merge(List a, List b) {<br>    List r = new ArrayList() ;<br>    while (a.size() &gt; 0 &amp;&amp; b.size() &gt; 0) {<br>      cmp++ ;<br>      if (((Comparable)a.get(0)).compareTo(b.get(0)) &lt; 0) {<br>  r.add(a.get(0)) ;<br>  a.remove(0) ;<br>  continue ;<br>      }<br>      if (((Comparable)a.get(0)).compareTo(b.get(0)) &gt; 0) {<br>  r.add(b.get(0)) ;<br>  b.remove(0) ;<br>  continue ;<br>      }<br>      r.add(a.get(0)) ;<br>      r.add(b.get(0)) ;<br>      a.remove(0) ;<br>      b.remove(0) ;<br>    }<br>    r.addAll(a) ;<br>    r.addAll(b) ;<br>    return r ;<br>  }<br>  List mergeSort(List a) {<br>    int i ;<br>    if (a.size() &lt;= 1) {<br>      return a ;<br>    }<br>    List l1 = new ArrayList() ;<br>    List l2 = new ArrayList() ;<br>    for (i=0; i&lt;a.size(); i++) {<br>      if (i + i + 1 &lt; a.size()) {<br>  l1.add(a.get(i)) ;<br>      } else {<br>  l2.add(a.get(i)) ;<br>      }<br>    }<br>    l1 = mergeSort(l1) ;<br>    l2 = mergeSort(l2) ;<br>    return merge(l1, l2) ;<br>  }<br>  public int howManyComparisons(int[] numbers) {<br>    int i, j, k ;<br>    List r = new ArrayList() ;<br>    for (i=0; i&lt;numbers.length; i++) {<br>      r.add(new Integer(numbers[i])) ;<br>    }<br>    mergeSort(r) ;<br>    return cmp ;<br>  }<br>}<br></td>