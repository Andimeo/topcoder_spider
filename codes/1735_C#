<td class="problemText" colspan="8" valign="middle" align="left">
            // 'A' - 1<br>// '2' - 2<br>// '3' - 3<br>// '4' - 4<br>// '5' - 5<br>// '6' - 6<br>// '7' - 7<br>// '8' - 8<br>// '9' - 9<br>// 'T' - 10<br>// 'J' - 11<br>// 'Q' - 12<br>// 'K' - 13<br>using System;<br>using System.Collections;<br>public class CircleGame {<br>  public int cardsLeft(string deck) {<br>    SortedList m = new SortedList();<br>    m['A'] = 1; m['T'] = 10; m['J'] = 11; m['Q'] = 12;<br>    for (char c = '2'; c &lt;= '9'; ++c)<br>      m[c] = c - '0';<br>    char[] d = deck.ToCharArray();<br>    int pos = deck.IndexOf('K');<br>    while (pos != -1) {<br>      deck = deck.Remove(pos, 1);<br>      pos = deck.IndexOf('K');<br>    }<br>    bool done = true;<br>    while (done) {<br>      done = false;<br>      for (int i = 1; i &lt;= deck.Length; ++i) {<br>        char c1 = deck[i % deck.Length];<br>        char c2 = deck[i - 1];<br>        if ((int)m[c1] + (int)m[c2] == 13) {<br>          done = true;<br>          if (i == deck.Length) {<br>            deck = deck.Remove(i - 1, 1);<br>            deck = deck.Remove(0, 1);<br>          }<br>          else {<br>            deck = deck.Remove(i - 1, 2);<br>          }<br>          break;<br>        }<br>      }<br>    }<br>    return deck.Length;<br>  }<br>}<br><br><br>// Powered by FileEdit<br></td>