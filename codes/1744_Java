<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>public class MNS {<br>  HashSet hs=new HashSet();<br>  public int combos(int[] num) {<br>    int [] i=new int[9];<br>    boolean [] b=new boolean [9];<br>    go(i, b, num, 0);<br>    return hs.size();<br>  }<br>  <br>  void go(int [] cur, boolean [] taken, int [] num, int ind){<br>    if(ind==9){<br>      int i=cur[0]+cur[1]+cur[2];<br>      if(cur[3]+cur[4]+cur[5]==i &amp;&amp; cur[6]+cur[7]+cur[8]==i &amp;&amp; cur[0]+cur[3]+cur[6]==i &amp;&amp; cur[1]+cur[4]+cur[7]==i &amp;&amp; cur[2]+cur[5]+cur[8]==i){<br>        String s=""+cur[0]+" "+cur[1]+" "+cur[2]+" "+cur[3]+" "+cur[4]+" "+cur[5]+" "+cur[6]+" "+cur[7]+" "+cur[8];<br>        hs.add(s);<br>      }<br>    }<br>    for(int x=0; x&lt;taken.length; x++){<br>      if(taken[x]==false){<br>        cur[ind]=num[x];<br>        taken[x]=true;<br>        go(cur, taken, num, ind+1);<br>        taken[x]=false;<br>      }<br>    }<br>  }<br> <br> <br> <br>long gcd(long a, long b){<br>  if(b==0) return a;<br>  return gcd(b, a%b);<br>}<br>long lcm(long a, long b){<br>  return b/gcd(a, b)*a;<br>}<br> <br> <br>/*TESTING DONE HERE*/<br>  public final static void main(String[] args)<br>  {<br>    try {<br>      validateExample("1", new MNS().combos(new int[] {1,2,3,3,2,1,2,2,2}), 18, "combos(new int[] {1,2,3,3,2,1,2,2,2})");<br>      validateExample("2", new MNS().combos(new int[] {4,4,4,4,4,4,4,4,4}), 1, "combos(new int[] {4,4,4,4,4,4,4,4,4})");<br>      validateExample("3", new MNS().combos(new int[] {1,5,1,2,5,6,2,3,2}), 36, "combos(new int[] {1,5,1,2,5,6,2,3,2})");<br>      validateExample("4", new MNS().combos(new int[] {1,2,6,6,6,4,2,6,4}), 0, "combos(new int[] {1,2,6,6,6,4,2,6,4})");<br>    } catch (Exception e) {<br>      System.out.println(e);<br>      e.printStackTrace(System.out);<br>    }<br>  }<br> <br>  private static void validateExample(String exampleNum, int returned, int expected, String methodInvocation) {<br>    print(exampleNum);<br>    print("  ");<br>    if (!eq(returned,expected)) {<br>      print("FAIL");<br>    } else {<br>      print("SUCCESS");<br>    }<br>    print(" ");  <br>    print(methodInvocation);<br>    print("\tGot:[");<br>    print(returned);<br>    print("]\t");<br>    print("Expected:[");<br>    print(expected);<br>    print("]");<br>    print("\n");<br>  }<br> <br>  public static void print(boolean a) {<br>    System.out.print(a);<br>  }<br> <br>  public static void print(long a) {<br>    System.out.print(a);<br>  }<br> <br>  public static void print(int a) {<br>    System.out.print(a);<br>  }<br> <br>  public static void print(char a) {<br>    System.out.print(a);<br>  }<br> <br>  public static void print(String a) {<br>    System.out.print(a);<br>  }<br> <br>  public static void print(int[] a) {<br>    if (a==null) {System.out.print("null"); return;} <br>    for (int i=0; i&lt;a.length; i++) System.out.print(a[i]+(i&lt;a.length-1?",":"")); <br>  }<br> <br>  public static void print(int[][] a) {<br>    if (a==null) {System.out.print("null"); return;} <br>    for (int i=0; i&lt;a.length; i++) { print(a[i]); print("\n"); }<br>  }<br> <br>  public static void print(String[] a) {<br>    if (a==null) {System.out.print("null"); return;} <br>    for (int i=0; i&lt;a.length; i++) System.out.print(a[i]+(i&lt;a.length-1?",":"")); <br>  }<br> <br>  public static boolean eq(boolean a, boolean b) {<br>    return a==b;<br>  }<br> <br>  public static boolean eq(long a, long b) {<br>    return a==b;<br>  }<br> <br>  public static boolean eq(int a, int b) {<br>    return a==b;<br>  }<br> <br>  public static boolean eq(char a, char b) {<br>    return a==b;<br>  }<br> <br>  public static boolean eq(String a, String b) {<br>    return a.equals(b);<br>  }<br> <br>  public static boolean eq(int[] a, int[] b) { return Arrays.equals(a,b); }<br>  public static boolean eq(String[] a, String[] b) { return Arrays.equals(a,b); }<br> <br>}<br>// Powered by CodeProcessor<br></td>