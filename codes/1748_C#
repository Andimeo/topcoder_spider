<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections;<br> <br>public class node : IComparable<br>{<br>  public int key;<br>  public node left,right,parent;<br>  public bool red;<br> <br>  public bool isleft()<br>  {<br>    if (parent == null) return false;<br> <br>    return key &lt; parent.key;<br>  }<br> <br>  public int CompareTo(object x)<br>  {<br>    node y = (node)x;<br>    return key.CompareTo((object)y.key);<br>  }<br> <br>  public node other(int k)<br>  {<br>    if (k &lt; key) return right; <br>    return left;<br>  }<br> <br>  public node next(int k)<br>  {<br>    if (k &lt; key) return left;<br>    return right;<br>  }<br> <br>  public void setchild(node k)<br>  {<br>    if (k.key &lt; key)<br>      left = k; else<br>      right = k;<br> <br>    k.parent = this;<br>  }<br> <br>  public node(int key)<br>  {<br>    this.key = key;<br>    left = right = parent = null;<br>    red = true;<br>  }<br>}<br> <br>public class RedBlack<br>{<br>  node root = null;<br> <br>  public node twist(node n)<br>  {<br>    node x,y,z,t1,t2,t3,t4,r;<br> <br>    r = n.parent.parent.parent;<br> <br>    if (n.isleft())<br>    {<br>      if (n.parent.isleft())<br>      {<br>        x = n;<br>        y = n.parent;<br>        z = n.parent.parent;<br>        t1 = x.left;<br>        t2 = x.right;<br>        t3 = y.right;<br>        t4 = z.right;<br>      } <br>      else<br>      {<br>        x = n.parent.parent;<br>        y = n;<br>        z = n.parent;<br>        t1 = x.left;<br>        t2 = y.left;<br>        t3 = y.right;<br>        t4 = z.right;<br>      }<br>    } <br>    else<br>    {<br>      if (n.parent.isleft())<br>      {<br>        x = n.parent;<br>        y = n;<br>        z = n.parent.parent;<br>        t1 = x.left;<br>        t2 = y.left;<br>        t3 = y.right;<br>        t4 = z.right;<br>      } <br>      else<br>      {<br>        x = n.parent.parent;<br>        y = n.parent;<br>        z = n;<br>        t1 = x.left;<br>        t2 = y.left;<br>        t3 = z.left;<br>        t4 = z.right;<br>      }<br>    }<br> <br>    x.red = z.red = false;<br> <br>    x.left = t1;<br>    x.right = t2;<br>    z.left = t3;<br>    z.right = t4;<br>    if (t1 != null) t1.parent = x;<br>    if (t2 != null) t2.parent = x;<br>    if (t3 != null) t3.parent = z;<br>    if (t4 != null) t4.parent = z;<br> <br>    x.parent = z.parent = y;<br>    <br>    y.red = true;<br>    y.left = x;<br>    y.right = z;<br> <br>    y.parent = r;<br> <br>    if (r == null)<br>      root = y; else<br>      r.setchild(y);<br> <br>    root.red = false;<br>    return y;<br>  }<br> <br>  public void twist2(node n)<br>  {<br>    node r;<br>    node [] m = new node[3];<br>    node [] t = new node[4];<br> <br>    node x,y,z;<br> <br>    m[0] = n;<br>    m[1] = n.parent;<br>    m[2] = n.parent.parent;<br> <br>    r = n.parent.parent.parent;<br>    <br>    Array.Sort(m);<br> <br>    x = m[0];<br>    y = m[1];<br>    z = m[2];<br> <br>    t[0] = n.left;<br>    t[1] = n.right;<br>    t[2] = n.parent.other(n.key);<br>    t[3] = n.parent.parent.other(n.parent.key);<br> <br>    Array.Sort(t);<br> <br> <br>    x.red = z.red = false;<br> <br>    x.left = t[0];<br>    x.right = t[1];<br>    z.left = t[2];<br>    z.right = t[3];<br> <br>    x.parent = z.parent = y;<br>    <br>    y.red = true;<br>    y.left = x;<br>    y.right = y;<br> <br>    y.parent = r;<br> <br>    if (r == null)<br>      root = y; else<br>      r.setchild(y);<br>  }<br> <br>  public int insert(int k)<br>  {<br>    node i;<br>    node n = new node(k);<br>    int cnt;<br> <br>//    Console.Write("inserting "+k);<br>    if (root == null)<br>    {<br>//      Console.WriteLine();<br>      root = n;<br>      n.red = false;<br>      return 0;<br>    }<br> <br>    for(i = root; i.next(k) != null; i = i.next(k));<br> <br>    i.setchild(n);<br>    <br>    i = n;<br>    cnt = 0;<br>    while((i!=null) &amp;&amp; (i.red) &amp;&amp; (i.parent != null) &amp;&amp; (i.parent.red))<br>    {<br>      i = twist(i);<br>      cnt++;<br>    }<br>    root.red = false;<br> <br>//    Console.WriteLine(" twists: "+cnt);<br>    return cnt;<br> <br>  }<br> <br>  public int numTwists(int[] keys)<br>  {<br>    int cnt = 0;<br> <br>    foreach(int i in keys) cnt += insert(i);<br> <br>    return cnt;<br> <br>  }<br>}<br></td>