<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;iostream&gt;<br>#include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;functional&gt;<br>#include &lt;numeric&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cmath&gt;<br>#include &lt;queue&gt;<br>using namespace std;<br>typedef vector&lt;int&gt; VI;  typedef vector&lt;vector&lt;int&gt; &gt; VVI;<br>typedef vector&lt;string&gt; VS;  typedef vector&lt;vector&lt;string&gt; &gt; VVS;<br>typedef signed long long i64;  typedef unsigned long long u64;<br><br>struct node {<br>  node *par, *lc, *rc;<br>  int isred, val;<br>};<br><br>node *root;<br>int ret = 0;<br><br>void print(node *t) {<br>  if( !t ) return;<br>  cout &lt;&lt; '(';<br>  cout &lt;&lt; t-&gt;val;<br>  if( t-&gt;isred ) cout &lt;&lt; 'R';<br>  cout &lt;&lt; ' ';<br>  print(t-&gt;lc);<br>  cout &lt;&lt; ' ';<br>  print(t-&gt;rc);<br>  cout &lt;&lt; ')';<br>}<br><br>void balance(node *t) {<br>  if( t-&gt;par == 0 || t-&gt;par-&gt;par == 0 ) return;<br>  if( !t-&gt;isred || !t-&gt;par-&gt;isred ) return;<br>  node *gp = t-&gt;par-&gt;par-&gt;par;<br>  node *x, *y, *z, *t1, *t2, *t3, *t4;<br>  if( t-&gt;par-&gt;lc == t ) {<br>    if( t-&gt;par-&gt;par-&gt;lc == t-&gt;par ) {<br>      x = t;<br>      y = t-&gt;par;<br>      z = t-&gt;par-&gt;par;<br>      t1 = x-&gt;lc;<br>      t2 = x-&gt;rc;<br>      t3 = y-&gt;rc;<br>      t4 = z-&gt;rc;<br>    } else {<br>      y = t;<br>      z = t-&gt;par;<br>      x = t-&gt;par-&gt;par;<br>      t1 = x-&gt;lc;<br>      t2 = y-&gt;lc;<br>      t3 = y-&gt;rc;<br>      t4 = z-&gt;rc;<br>    }<br>  } else {<br>    if( t-&gt;par-&gt;par-&gt;lc == t-&gt;par ) {<br>      y = t;<br>      x = t-&gt;par;<br>      z = t-&gt;par-&gt;par;<br>      t1 = x-&gt;lc;<br>      t2 = y-&gt;lc;<br>      t3 = y-&gt;rc;<br>      t4 = z-&gt;rc;<br>    } else {<br>      z = t;<br>      y = t-&gt;par;<br>      x = t-&gt;par-&gt;par;<br>      t1 = x-&gt;lc;<br>      t2 = y-&gt;lc;<br>      t3 = z-&gt;lc;<br>      t4 = z-&gt;rc;<br>    }<br>  }<br>  if( gp &amp;&amp; gp-&gt;lc == t-&gt;par-&gt;par ) {<br>    gp-&gt;lc = y;<br>  } else if( gp &amp;&amp; gp-&gt;rc == t-&gt;par-&gt;par ) {<br>    gp-&gt;rc = y;<br>  } else if( !gp ) {<br>    root = y;<br>  }<br>  y-&gt;par = gp;<br>  x-&gt;par = y;<br>  z-&gt;par = y;<br>  if( t1 ) t1-&gt;par = x;<br>  if( t2 ) t2-&gt;par = x;<br>  if( t3 ) t3-&gt;par = z;<br>  if( t4 ) t4-&gt;par = z;<br>  y-&gt;lc = x;<br>  y-&gt;rc = z;<br>  x-&gt;lc = t1;<br>  x-&gt;rc = t2;<br>  z-&gt;lc = t3;<br>  z-&gt;rc = t4;<br>  ret++;<br>  y-&gt;isred = 1;<br>  x-&gt;isred = 0;<br>  z-&gt;isred = 0;<br>  balance(y);<br>}<br><br>void doit(node *t, int v) {<br>  if( v &lt; t-&gt;val ) {<br>    if( !t-&gt;lc ) {<br>      t-&gt;lc = new node;<br>      t-&gt;lc-&gt;isred = 1;<br>      t-&gt;lc-&gt;lc = t-&gt;lc-&gt;rc = 0;<br>      t-&gt;lc-&gt;par = t;<br>      t-&gt;lc-&gt;val = v;<br>      balance(t-&gt;lc);<br>    } else doit(t-&gt;lc, v);<br>  } else if( v &gt; t-&gt;val ) {<br>    if( !t-&gt;rc ) {<br>      t-&gt;rc = new node;<br>      t-&gt;rc-&gt;isred = 1;<br>      t-&gt;rc-&gt;lc = t-&gt;rc-&gt;rc = 0;<br>      t-&gt;rc-&gt;par = t;<br>      t-&gt;rc-&gt;val = v;<br>      balance(t-&gt;rc);<br>    } else doit(t-&gt;rc, v);<br>  }<br>}<br><br>class RedBlack {<br>public:<br>int numTwists(vector &lt;int&gt; a) {<br>  int i, j, k, x, y, z, n;<br><br>  root = new node;<br>  root-&gt;isred = 0;<br>  root-&gt;val = a[0];<br>  root-&gt;lc = root-&gt;rc = root-&gt;par = 0;<br>  for( i = 1; i &lt; a.size(); i++ ) {<br>    doit(root, a[i]);<br>    root-&gt;isred = 0;<br>    print(root);<br>    cout &lt;&lt; '\n';<br>  }<br>  return ret;<br>}<br>};<br></td>