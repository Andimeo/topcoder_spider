<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>public class RedBlack {<br>  static int RED=0;<br>  static int BLACK=1;<br>  static class Node {<br>    public int color = RED;<br>    public int val;<br>    public Node left = null;<br>    public Node right = null;<br>    public Node parent = null;<br>    public Node( int v ) { val=v;}<br>  }<br><br>static char[][] grid = new char[30][100];<br>  static int maxline = 0;<br>  static void printNode( Node n) {<br>    for (int i=0;i&lt;grid.length;i++)<br>      Arrays.fill(grid[i],' ');<br>    print(0,50,n);<br>    for (int i=0;i&lt;=maxline;i++)<br>      System.out.println(new String(grid[i]));<br>  }<br>  static void print( int line, int sp, Node n )<br>  {<br>    if (n == null) return;<br>    maxline = Math.max(line,maxline);<br>    grid[line][sp-1] = (char)((n.val/10) + '0');<br>    grid[line][sp] = (char)((n.val%10) + '0');<br>    grid[line][sp+1] = n.color == RED ? '*' : ' ';<br>    grid[line+1][sp-1] = '/';<br>    grid[line+1][sp+1] = '\\';<br>    print(line+2,sp-2,n.left);<br>    print(line+2,sp+2,n.right);<br>  }<br>  public int numTwists(int[] keys) {<br>          Node root = new Node(keys[0]);<br>          root.color = BLACK;<br>          int total = 0;<br>          for (int i=1;i&lt;keys.length;i++) {<br>            // Search<br>            Node cur = root;<br>            Node inserted = new Node(keys[i]);<br>            int v= keys[i];<br>            while (true) {<br>              if (v &lt; cur.val) {<br>                if (cur.left == null) {<br>                  inserted.parent = cur;<br>                  cur.left = inserted;<br>                  break;<br>                }<br>                cur = cur.left;<br>              }<br>              else {<br>                if (cur.right == null) {<br>                  inserted.parent = cur;<br>                  cur.right = inserted;<br>                  break;<br>                }<br>                cur = cur.right;<br>              }<br>            }<br>            // Twist<br>            cur = inserted;<br>            while (cur.parent != null &amp;&amp; cur.parent.parent != null) {<br>              if (cur.parent.color == BLACK)<br>                break;<br>              total++;<br>              Node T1,T2,T3,T4;<br>              Node x,y,z;<br>              if (cur.parent.val &lt; cur.parent.parent.val) {<br>                z = cur.parent.parent;<br>                if (cur.val &lt; cur.parent.val) {<br>                  x = cur;<br>                  y = cur.parent;<br>                  T1 = cur.left;<br>                  T2 = cur.right;<br>                  T3 = cur.parent.right;<br>                  T4 = cur.parent.parent.right;<br>                }<br>                else {<br>                  y= cur;<br>                  x = cur.parent;<br>                  T1 = cur.parent.left;<br>                  T2 = cur.left;<br>                  T3 = cur.right;<br>                  T4 = cur.parent.parent.right;<br>                }<br>              }<br>              else {<br>                x = cur.parent.parent;<br>                if (cur.val &lt; cur.parent.val) {<br>                  y  = cur;<br>                  z = cur.parent;<br>                  T1 = cur.parent.parent.left;<br>                  T2 = cur.left;<br>                  T3 = cur.right;<br>                  T4 = cur.parent.right;<br>                } else {<br>                  z  = cur;<br>                  y = cur.parent;<br>                  T1 = cur.parent.parent.left;<br>                  T2 = cur.parent.left;<br>                  T3 = cur.left;<br>                  T4 = cur.right;<br>                }<br>              }<br>              Node gp = cur.parent.parent;<br>              if (gp.parent == null)<br>                root = y;<br>              else if (gp.val &lt; gp.parent.val)<br>                gp.parent.left = y;<br>              else<br>                gp.parent.right = y;<br>              y.parent = gp.parent;<br>              y.left = x;<br>              y.right = z;<br>              x.parent = z.parent = y;<br>              x.left = T1;<br>              if (T1 != null) T1.parent = x;<br>              x.right = T2;<br>              if (T2 != null) T2.parent = x;<br>              z.left = T3;<br>              if (T3 != null) T3.parent = z;<br>              z.right = T4;<br>              if (T4 != null) T4.parent = z;<br>              x.color = BLACK;<br>              z.color = BLACK;<br>              cur = y;<br>            }<br>            root.color = BLACK;<br>           // System.out.println("After " + v + ":");<br>           // printNode(root);<br>          }<br>          return total;<br>  }<br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by CodeProcessor<br></td>