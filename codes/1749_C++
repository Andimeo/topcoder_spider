<td class="problemText" colspan="8" valign="middle" align="left">
            #line 2 "RoboCourier.cpp"<br><br>#include &lt;iostream&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;map&gt;<br>#include &lt;sstream&gt;<br>#include &lt;cmath&gt;<br><br>using namespace std;<br><br><br>const int dx[6]={0,1,1,0,-1,-1};<br>const int dy[6]={-1,-1,0,1,1,0};<br><br>vector&lt; pair&lt;int,int&gt; &gt; nodes;<br>vector&lt; pair&lt;int,int&gt; &gt; edges;<br>bool okdir[2600][6];<br>int newloc[2600][6];<br><br>class RoboCourier {<br>  public:<br>  <br>  int lookup(int x, int y)<br>  {<br>    for(int i=0;i&lt;nodes.size();i++)<br>      if (nodes[i].first==x &amp;&amp; nodes[i].second==y)<br>        return i;        <br>    nodes.push_back(make_pair(x,y));<br>    return nodes.size()-1;<br>  }<br>  <br>  int timeToDeliver(vector &lt;string&gt; path) {<br>    int x=0,y=0,dir=0,src,dest;<br>    string p="";<br>    for(int i=0;i&lt;path.size();i++) p+=path[i];<br>    nodes.clear();<br>    edges.clear();<br>    memset(okdir,0,sizeof(okdir));<br>    lookup(x,y);<br>    for(int i=0;i&lt;p.size();i++) {<br>      switch (p[i]) {<br>        case 'R' : dir=(dir+1)%6; break;<br>        case 'L' : dir=(dir+5)%6; break;<br>        case 'F' :        <br>          src=lookup(x,y);<br>          x+=dx[dir];<br>          y+=dy[dir];            <br>          dest=lookup(x,y);<br>          okdir[src][dir]=1;<br>          newloc[src][dir]=dest;<br>          okdir[dest][(dir+3)%6]=1;<br>          newloc[dest][(dir+3)%6]=src;<br>          break;<br>      }<br>    }<br>    dest=lookup(x,y);<br>    <br>    int n=nodes.size();<br>    /*<br>    for(int i=0;i&lt;n;i++) {<br>      printf("node %d  x=%d, y=%d  ",i,nodes[i].first,nodes[i].second);<br>      for(int j=0;j&lt;6;j++)<br>        if (okdir[i][j])<br>          printf("%d ",newloc[i][j]);<br>      printf("\n");<br>    }<br>    exit(0);<br>      */<br>    vector&lt;int&gt; vis(n*6,0);<br>    vector&lt;int&gt; dist(n*6,99999999);<br>    dist[0]=0;<br>    while (1) {<br>      int best=99999999,cur=-1;<br>      for(int i=0;i&lt;n*6;i++) {<br>        if (dist[i]&lt;best &amp;&amp; !vis[i]) {<br>          best=dist[i];<br>          cur=i;<br>        }<br>      }<br>      if (cur&lt;0) {<br>        cerr &lt;&lt; "Error!" &lt;&lt; endl;<br>        exit(-1);<br>      }<br>      vis[cur]=1;<br>      int m=cur/6,dir=cur%6;<br>      //printf("at node %d\n",m+1);<br>      if (m==dest) {<br>        //exit(0);<br>        return best;<br>      }<br>      if (dist[m*6+(dir+1)%6]&gt;best+3) dist[m*6+(dir+1)%6]=best+3;<br>      if (dist[m*6+(dir+5)%6]&gt;best+3) dist[m*6+(dir+5)%6]=best+3;<br>      int steps=0;<br>      while (okdir[m][dir]) {<br>        steps++;<br>        m=newloc[m][dir];<br>        int tm=steps==1?4:(8+(steps-2)*2);<br>        if (dist[m*6+dir]&gt;best+tm) dist[m*6+dir]=best+tm;      <br>        //cout &lt;&lt; m &lt;&lt; endl;<br>      }<br>    }    <br>  }<br>};<br></td>