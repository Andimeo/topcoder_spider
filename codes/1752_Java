<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>import java.math.*;<br>public class PermutationCounter {<br>  public long count(String n) {<br>    if (n.length() == 1) return 0;<br>    int[] counts = new int[10];<br>    for (int ii = 0; ii &lt; n.length(); ++ii) {<br>      counts[n.charAt(ii) - '0']++;<br>    }<br>    long sum = 0;<br>    for (int d = 0; d &lt; n.charAt(0) - '0'; ++d) {<br>      if (counts[d] == 0) continue;<br>      counts[d]--;<br>      sum += countAll(counts, n.length() - 1);<br>      counts[d]++;<br>    }<br>    sum += count(n.substring(1));<br>    return sum;<br>  }<br>  <br>  long countAll(int[] counts, int total) {<br>    BigInteger rr = BigInteger.valueOf(1);<br>    for (int i = 2; i &lt;= total; ++i) {<br>      rr = rr.multiply(BigInteger.valueOf(i));<br>    }<br>    BigInteger dd = BigInteger.valueOf(1);<br>    for (int i = 0; i &lt; counts.length; ++i) {<br>      for (int j = 2; j &lt;= counts[i]; ++j) {<br>        dd = dd.multiply(BigInteger.valueOf(j));<br>      }<br>    }<br>    return rr.divide(dd).longValue();<br>  }<br>  <br>  public final static void main(String[] args)<br>  {<br>    try {<br>      validateExample("1", new PermutationCounter().count("1020"), 7L, "count(\"1020\")");<br>      validateExample("2", new PermutationCounter().count("50000000000000"), 13L, "count(\"50000000000000\")");<br>      validateExample("3", new PermutationCounter().count("1030000040000"), 1414L, "count(\"1030000040000\")");<br>      validateExample("4", new PermutationCounter().count("1901712530271201432987123"), 141588146596382454L, "count(\"1901712530271201432987123\")");<br>    } catch (Exception e) {<br>      System.out.println(e);<br>      e.printStackTrace(System.out);<br>    }<br>  }<br> <br>  private static void validateExample(String exampleNum, long returned, long expected, String methodInvocation) {<br>    print(exampleNum);<br>    print("  ");<br>    if (!eq(returned,expected)) {<br>      print("FAIL");<br>    } else {<br>      print("SUCCESS");<br>    }<br>    print(" ");  <br>    print(methodInvocation);<br>    print("\tGot:[");<br>    print(returned);<br>    print("]\t");<br>    print("Expected:[");<br>    print(expected);<br>    print("]");<br>    print("\n");<br>  }<br> <br>  public static void print(boolean a) {<br>    System.out.print(a);<br>  }<br> <br>  public static void print(long a) {<br>    System.out.print(a);<br>  }<br> <br>  public static void print(int a) {<br>    System.out.print(a);<br>  }<br> <br>  public static void print(char a) {<br>    System.out.print(a);<br>  }<br> <br>  public static void print(String a) {<br>    System.out.print(a);<br>  }<br> <br>  public static void print(int[] a) {<br>    if (a==null) {System.out.print("null"); return;} <br>    for (int i=0; i&lt;a.length; i++) System.out.print(a[i]+(i&lt;a.length-1?",":"")); <br>  }<br> <br>  public static void print(int[][] a) {<br>    if (a==null) {System.out.print("null"); return;} <br>    for (int i=0; i&lt;a.length; i++) { print(a[i]); print("\n"); }<br>  }<br> <br>  public static void print(String[] a) {<br>    if (a==null) {System.out.print("null"); return;} <br>    for (int i=0; i&lt;a.length; i++) System.out.print(a[i]+(i&lt;a.length-1?",":"")); <br>  }<br> <br>  public static boolean eq(boolean a, boolean b) {<br>    return a==b;<br>  }<br> <br>  public static boolean eq(long a, long b) {<br>    return a==b;<br>  }<br> <br>  public static boolean eq(int a, int b) {<br>    return a==b;<br>  }<br> <br>  public static boolean eq(char a, char b) {<br>    return a==b;<br>  }<br> <br>  public static boolean eq(String a, String b) {<br>    return a.equals(b);<br>  }<br> <br>  public static boolean eq(int[] a, int[] b) { return Arrays.equals(a,b); }<br>  public static boolean eq(String[] a, String[] b) { return Arrays.equals(a,b); }<br> <br>}<br>// Powered by CodeProcessor<br></td>