<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>import java.math.*;<br>import java.text.*;<br>public class ContestScore {<br>    <br>    ////////////////////////////////////////////////////////<br>    /////////  Note: helper functions start here  //////////<br>    ////////////////////////////////////////////////////////<br>    <br>    void sout(int a) {<br>        if (!debug) return; System.out.println(a);<br>    }<br>    void sout(long a) {<br>        if (!debug) return; System.out.println(a);<br>    }<br>    void sout(char a) {<br>        if (!debug) return; System.out.println(a);<br>    }<br>    void sout(boolean a) {<br>        if (!debug) return; System.out.println(a);<br>    }<br>    void sout(Object a) {<br>        if (!debug) return; System.out.println(a);<br>    }<br>    void sout(String [] a) {<br>        if (!debug) return;<br>        System.out.println("Array size = " + a.length);<br>        System.out.print("[");<br>        for (int i = 0; i &lt; a.length; i ++) System.out.println(a[i] + ",");<br>        System.out.println("]");<br>    }<br>    void sout(int [] a) {<br>        if (!debug) return;<br>        System.out.println("Array size = " + a.length);<br>        System.out.print("[");<br>        for (int i = 0; i &lt; a.length; i ++) System.out.print(a[i] + ",");<br>        System.out.println("]");<br>    }<br>    void sout(long [] a) {<br>        if (!debug) return;<br>        System.out.println("Array size = " + a.length);<br>        System.out.print("[");<br>        for (int i = 0; i &lt; a.length; i ++) System.out.print(a[i] + ",");<br>        System.out.println("]");<br>    }<br>    void sout(char [] a) {<br>        if (!debug) return;<br>        System.out.println("Array size = " + a.length);<br>        System.out.print("[");<br>        for (int i = 0; i &lt; a.length; i ++) System.out.print(a[i] + ",");<br>        System.out.println("]");<br>    }<br>    void sout(boolean [] a) {<br>        if (!debug) return;<br>        System.out.println("Array size = " + a.length);<br>        System.out.print("[");<br>        for (int i = 0; i &lt; a.length; i ++) System.out.print(a[i] + ",");<br>        System.out.println("]");<br>    }<br>    <br>    <br>    Hashtable lookup = new Hashtable();<br>    int lookupIdx = 0;<br>    int indexOf(String in) {<br>        if (!lookup.containsKey(in)) {<br>            lookup.put(in, new Integer(lookupIdx));<br>            lookupIdx ++;<br>        }<br>        return ((Integer) lookup.get(in)).intValue();<br>    }<br>    <br>    ////////////////////////////////////////////////////////<br>    ///////////  Note: helper functions end here  //////////<br>    ////////////////////////////////////////////////////////<br>    <br>    <br>    boolean debug = false;<br>    <br>    Set set = new HashSet(), seta = new HashSet(), setb = new HashSet();<br>    ArrayList al = new ArrayList(), ala = new ArrayList(), alb = new ArrayList();<br>    Hashtable ht = new Hashtable(), hta = new Hashtable(), htb = new Hashtable();<br>    StringTokenizer tok, toka, tokb;<br>    StringBuffer buf = new StringBuffer();<br>    <br>    public String[] sortResults(String[] data) {<br>        <br>        int n = data.length;<br>        <br>        if (n == 0) return new String [0];<br>        <br>        tok = new StringTokenizer(data[0], " ");<br>        int item = tok.countTokens() - 1;<br>        int sc[][] = new int [n][item];<br>        String name [] = new String [n];<br>        <br>        for (int i = 0; i &lt; n; i ++) {<br>            tok = new StringTokenizer(data[i], " ");<br>            name[i] = tok.nextToken();<br>            for (int j = 0; j &lt; item; j ++) {<br>                String curr = tok.nextToken();<br>                int a = Integer.parseInt(curr.substring(0, 2)) * 10;<br>                a += curr.charAt(3) - '0';<br>                sc[i][j] = a;<br>            }<br>        }<br>        <br>        int rank[][] = new int [n][item];<br>        for (int i = 0; i &lt; item; i ++) {<br>            <br>            int [] alls = new int [n];<br>            for (int j = 0; j &lt; n; j ++) {<br>                alls[j] = -sc[j][i];<br>            }<br>            Arrays.sort(alls);<br>            <br>            for (int j = 0; j &lt; n; j ++) {<br>                for (int k = 0; k &lt; n; k ++) {<br>                    if (sc[j][i] == -alls[k]) {<br>                        rank[j][i] = k;<br>                        break;<br>                    }<br>                }<br>            }<br>            <br>        }<br>        <br>        String tag[] = new String [n];<br>        <br>        for (int i = 0; i &lt; n; i ++) {<br>            int r = 0;<br>            int sum = 0;<br>            for (int j = 0; j &lt; item; j ++) {<br>                r += rank[i][j] + 1;<br>                sum += sc[i][j];<br>            }<br>            <br>            tag[i] = fmt(r + "", 20, '0') + " " + fmt((1000 * 1000 - sum) + "", 20, '0') + " " + name[i];<br>            name[i] += " " + r + " " + (new DecimalFormat("0.0").format(sum / 10.0));<br>        }<br>        <br>        return tagsort(tag, name, ";");<br>    }<br>    <br>    // this is not the normal tagsort<br>    // sort input according to tag(weight)<br>    // make sure tag and delim are appropriate!<br>    String [] tagsort(String [] tag, String [] input, String delim) {<br>        if (tag.length != input.length) {<br>            System.out.println("Error: tag and input have different size.");<br>            return new String [0];<br>        }<br>        String [] together = new String [tag.length];<br>        for (int i = 0; i &lt; tag.length; i ++)<br>            together[i] = tag[i] + delim + input[i];<br>        Arrays.sort(together);<br>        for (int i = 0; i &lt; tag.length; i ++) {<br>            StringTokenizer tok = new StringTokenizer(together[i], delim);<br>            while(tok.hasMoreTokens())  together[i] = tok.nextToken();<br>        }<br>        return together;<br>    }<br>    <br>    // need modification when x can be negative<br>    String fmt(int x, int left) {<br>        String s = "0";<br>        while (s.length() &lt; left) s += s;<br>        s += x;<br>        return s.substring(s.length() - left);<br>    }<br>    String fmt(int x) {<br>        return fmt(x, 6);<br>    }<br>    // format input to length left with char filler<br>    String fmt(String input, int left, char filler) {<br>        String s = filler + "";<br>        while (s.length() &lt; left) s += s;<br>        s += input;<br>        return s.substring(s.length() - left);<br>    }<br>    <br>    <br>}<br> <br>// Powered by CodeProcessor<br></td>