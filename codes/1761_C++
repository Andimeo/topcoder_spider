<td class="problemText" colspan="8" valign="middle" align="left">
            //program framework generated with WishingBone's parser :)-<br> <br>//common header<br>#ifdef WIN32<br>#pragma warning(disable:4786)<br>#define for if (0); else for<br>#endif<br>#include &lt;iostream&gt;<br>#include &lt;iomanip&gt;<br>#include &lt;sstream&gt;<br>#include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;deque&gt;<br>#include &lt;set&gt;<br>#include &lt;map&gt;<br>#include &lt;bitset&gt;<br>#include &lt;valarray&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;functional&gt;<br>#include &lt;numeric&gt;<br>#include &lt;complex&gt;<br>#include &lt;utility&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cstring&gt;<br>#include &lt;cctype&gt;<br>#include &lt;cmath&gt;<br>using namespace std;<br> <br>//64 bit integer definition<br>#ifdef WIN32<br>#define in_routine(type,spec) \<br>istream&amp; operator&gt;&gt;(istream&amp; s,type &amp;d){char b[30];s&gt;&gt;b;sscanf(b,spec,&amp;d);return s;}<br>#define out_routine(type,spec) \<br>ostream&amp; operator&lt;&lt;(ostream&amp; s,type d){char b[30];sprintf(b,spec,d);s&lt;&lt;b;return s;}<br>typedef signed __int64 i64; in_routine(i64,"%I64d") out_routine(i64,"%I64d")<br>typedef unsigned __int64 u64; in_routine(u64,"%I64u") out_routine(u64,"%I64u")<br>#else<br>typedef signed long long i64;<br>typedef unsigned long long u64;<br>#endif<br> <br>//common routines<br>#ifdef WIN32<br>#define min(a,b) _cpp_min(a,b)<br>#define max(a,b) _cpp_max(a,b)<br>#endif<br>#define abs(a) ((a)&gt;0?(a):-(a))<br>#define s2d(s,d) istringstream(s)&gt;&gt;d<br>#define d2s(d,s) {ostringstream t;t&lt;&lt;d;s=t.str();}<br>typedef vector&lt;int&gt; VI;<br>typedef vector&lt;VI&gt; VVI;<br>typedef vector&lt;string&gt; VS;<br>typedef vector&lt;VS&gt; VVS;<br>template&lt;class T&gt;vector&lt;T&gt;split(const string&amp;s,T){vector&lt;T&gt; result;istringstream is(s);T a;while (is&gt;&gt;a) result.push_back(a);return result;}<br>inline VI split(const string&amp;s){return split(s,0);}<br>VVI split(const VS &amp;g){VVI ret;for(int i=0;i&lt;g.size();i++) ret.push_back(split(g[i]));return ret;}<br>string itoa(int n){char buf[100];sprintf(buf,"%d",n);return buf;}<br>int gcd(int a,int b){for(int c;b;c=a,a=b,b=c%b);return a;}<br>int lcm(int a,int b){return a/gcd(a,b)*b;}<br>template&lt;class T&gt;class Index{public:typedef map&lt;T,int&gt;Map;typedef Map::iterator Iter;Map MyMap;vector&lt;T&gt; ItemList;int insert(const T&amp;item){Iter it=MyMap.find(item);if(it==MyMap.end()){int n=MyMap.size();MyMap[item] = n;ItemList.push_back(item);return n;}else return it-&gt;second;}int find(const T&amp;item)const{Iter it=MyMap.find(item);if(it==MyMap.end())return -1;else return it-&gt;second;}int contain(const T&amp;item)const{return Find(item)&gt;=0;}int size(){return MyMap.size();}T &amp;item(int index){return ItemList[index];}int operator[](const T&amp;item){return insert(item);}T&amp;operator()(int index){return ItemList[index];}};<br>//output routine<br>ostream&amp; operator&lt;&lt;(ostream&amp; s,string d){<br>  s&lt;&lt;'\"'&lt;&lt;d.c_str()&lt;&lt;'\"';<br>  return s;<br>}<br>template &lt;class T&gt;<br>ostream&amp; operator&lt;&lt;(ostream&amp; s,vector&lt;T&gt; d){<br>  s&lt;&lt;"{";<br>  for (typename vector&lt;T&gt;::iterator i=d.begin();i!=d.end();i++)<br>    s&lt;&lt;(i!=d.begin()?",":"")&lt;&lt;*i;<br>  s&lt;&lt;"}";<br>  return s;<br>}<br> <br>//parsing routine<br>template &lt;class T&gt;<br>vector&lt;basic_string&lt;T&gt; &gt; parse(const basic_string&lt;T&gt; &amp;s,const basic_string&lt;T&gt; &amp;delim){<br>  vector&lt;basic_string&lt;T&gt; &gt; ret(0);<br>  for (int b,e=0;;ret.push_back(s.substr(b,e-b)))<br>    if ((b=s.find_first_not_of(delim,e))==(e=s.find_first_of(delim,b)))<br>      return ret;<br>}<br>vector&lt;int&gt; intparse(const string &amp;s,const string &amp;delim=" \t\n"){<br>  vector&lt;string&gt; tmp=parse(s,delim);<br>  vector&lt;int&gt; ret(0);<br>  for (vector&lt;string&gt;::iterator i=tmp.begin();i!=tmp.end();i++)<br>    {int t;s2d(*i,t);ret.push_back(t);}<br>  return ret;<br>}<br> <br>enum {<br>  UP, FRONT, RIGHT, LEFT, BACK, DOWN<br>};<br> <br>class AlphaDice{<br>public:<br>  void turn1(string &amp;s) {<br>    char t = s[UP];<br>    s[UP] = s[FRONT];<br>    s[FRONT] = s[DOWN];<br>    s[DOWN] = s[BACK];<br>    s[BACK] = t;<br>  }<br>  void turn2(string &amp;s) {<br>    char t = s[UP];<br>    s[UP] = s[LEFT];<br>    s[LEFT] = s[DOWN];<br>    s[DOWN] = s[RIGHT];<br>    s[RIGHT] = t;<br>  }<br>  void turn3(string &amp;s) {<br>    char t = s[FRONT];<br>    s[FRONT] = s[RIGHT];<br>    s[RIGHT] = s[BACK];<br>    s[BACK] = s[LEFT];<br>    s[LEFT] = t;<br>  }  <br>  int badData(vector&lt;string&gt; roll){<br>    set&lt;string&gt; p;<br>    p.insert("??????");<br>    for (int x = 0; x &lt; roll.size(); x++) {<br>      set&lt;string&gt; tt;<br>      for (set&lt;string&gt;::iterator it = p.begin(); it != p.end(); it++) {<br>        string s = *it;<br>        for (int i = 0; i &lt; 4; i++) {<br>          turn1(s);<br>          for (int j = 0; j &lt; 4; j++) {<br>            turn2(s);<br>            for (int k = 0; k &lt; 4; k++) {<br>              turn3(s);<br>              string t = s;<br>              int flag = 1;<br>              for (int l = 0; l &lt; 3; l++) {<br>                if (t[l] == '?') t[l] = roll[x][l];<br>                else if (t[l] != roll[x][l]) {<br>                  flag = 0;<br>                  break;<br>                }<br>              }<br>              if (!flag) continue;<br>              char c[256];<br>              memset(c, 0, sizeof(c));<br>              for (int l = 0; l &lt; 6; l++)<br>                if (t[l] != '?' &amp;&amp; c[t[l]]) {<br>                  flag = 0;<br>                  break;<br>                } else c[t[l]] = 1;<br>              if (flag)<br>                tt.insert(t);<br>            }<br>          }<br>        }<br>      }<br>      if (tt.empty()) return x;<br>      int ss = tt.size();<br>      p = tt;<br>    }<br>    return -1;<br>  }<br>};<br> <br> <br> <br> <br>#ifdef WIN32<br>int test0(){<br>  string _roll[]={"ABC","ZCB"};<br>  vector&lt;string&gt; roll(_roll+0,_roll+sizeof(_roll)/sizeof(string));<br>  int badData= -1;<br>  AlphaDice _AlphaDice;<br>  int ret=_AlphaDice.badData(roll);<br>  cout&lt;&lt;"--------------------test 0--------------------"&lt;&lt;endl;<br>  cout&lt;&lt;"roll = "&lt;&lt;roll&lt;&lt;endl;<br>  cout&lt;&lt;"expected to return "&lt;&lt;badData&lt;&lt;endl;<br>  cout&lt;&lt;"your method returns "&lt;&lt;ret&lt;&lt;endl;<br>  if (ret==badData)<br>    cout&lt;&lt;endl&lt;&lt;"Pass!"&lt;&lt;endl&lt;&lt;endl;<br>  else {<br>    cout&lt;&lt;endl&lt;&lt;"Fail!!!!!!!!!! aoao~~~~~~~~~~~~"&lt;&lt;endl&lt;&lt;endl;<br>    return 0;<br>  }<br>  return 1;<br>}<br> <br>int test1(){<br>  string _roll[]={"ABC","DEF","BCA","GHI","ABC"};<br>  vector&lt;string&gt; roll(_roll+0,_roll+sizeof(_roll)/sizeof(string));<br>  int badData= 3;<br>  AlphaDice _AlphaDice;<br>  int ret=_AlphaDice.badData(roll);<br>  cout&lt;&lt;"--------------------test 1--------------------"&lt;&lt;endl;<br>  cout&lt;&lt;"roll = "&lt;&lt;roll&lt;&lt;endl;<br>  cout&lt;&lt;"expected to return "&lt;&lt;badData&lt;&lt;endl;<br>  cout&lt;&lt;"your method returns "&lt;&lt;ret&lt;&lt;endl;<br>  if (ret==badData)<br>    cout&lt;&lt;endl&lt;&lt;"Pass!"&lt;&lt;endl&lt;&lt;endl;<br>  else {<br>    cout&lt;&lt;endl&lt;&lt;"Fail!!!!!!!!!! aoao~~~~~~~~~~~~"&lt;&lt;endl&lt;&lt;endl;<br>    return 0;<br>  }<br>  return 1;<br>}<br> <br>int test2(){<br>  string _roll[]={"ABA","CDE","CDE","CDE","CDE"};<br>  vector&lt;string&gt; roll(_roll+0,_roll+sizeof(_roll)/sizeof(string));<br>  int badData= 0;<br>  AlphaDice _AlphaDice;<br>  int ret=_AlphaDice.badData(roll);<br>  cout&lt;&lt;"--------------------test 2--------------------"&lt;&lt;endl;<br>  cout&lt;&lt;"roll = "&lt;&lt;roll&lt;&lt;endl;<br>  cout&lt;&lt;"expected to return "&lt;&lt;badData&lt;&lt;endl;<br>  cout&lt;&lt;"your method returns "&lt;&lt;ret&lt;&lt;endl;<br>  if (ret==badData)<br>    cout&lt;&lt;endl&lt;&lt;"Pass!"&lt;&lt;endl&lt;&lt;endl;<br>  else {<br>    cout&lt;&lt;endl&lt;&lt;"Fail!!!!!!!!!! aoao~~~~~~~~~~~~"&lt;&lt;endl&lt;&lt;endl;<br>    return 0;<br>  }<br>  return 1;<br>}<br> <br>int test3(){<br>  string _roll[]={"ABC","DEF","BCF"};<br>  vector&lt;string&gt; roll(_roll+0,_roll+sizeof(_roll)/sizeof(string));<br>  int badData= 2;<br>  AlphaDice _AlphaDice;<br>  int ret=_AlphaDice.badData(roll);<br>  cout&lt;&lt;"--------------------test 3--------------------"&lt;&lt;endl;<br>  cout&lt;&lt;"roll = "&lt;&lt;roll&lt;&lt;endl;<br>  cout&lt;&lt;"expected to return "&lt;&lt;badData&lt;&lt;endl;<br>  cout&lt;&lt;"your method returns "&lt;&lt;ret&lt;&lt;endl;<br>  if (ret==badData)<br>    cout&lt;&lt;endl&lt;&lt;"Pass!"&lt;&lt;endl&lt;&lt;endl;<br>  else {<br>    cout&lt;&lt;endl&lt;&lt;"Fail!!!!!!!!!! aoao~~~~~~~~~~~~"&lt;&lt;endl&lt;&lt;endl;<br>    return 0;<br>  }<br>  return 1;<br>}<br> <br>int main(){<br>  if (test0() &amp;&amp; test1() &amp;&amp; test2() &amp;&amp; test3()) cout&lt;&lt;"ALL PASSED!"&lt;&lt;endl;<br>  return 0;<br>}<br>#endif<br></td>