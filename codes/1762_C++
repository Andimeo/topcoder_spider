<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;iostream&gt;<br>#include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;functional&gt;<br>#include &lt;numeric&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cmath&gt;<br>#include &lt;queue&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>using namespace std;<br>typedef vector&lt;int&gt; VI;  typedef vector&lt;vector&lt;int&gt; &gt; VVI;<br>typedef vector&lt;string&gt; VS;  typedef vector&lt;vector&lt;string&gt; &gt; VVS;<br>typedef signed long long i64;  typedef unsigned long long u64;<br><br>map&lt;string, set&lt;int&gt; &gt; memo;<br><br>const set&lt;int&gt; &amp;doit(string s) {<br>  set&lt;int&gt; &amp;ret = memo[s];<br>  if( ret.size() ) return ret;<br>  if( s.size() == 1 ) {<br>    ret.insert(s[0]-'0');<br>    return ret;<br>  }<br>  int i, j, k, x, y, z, n, il, ir;<br>  char ch;<br>  for( i = 0; i &lt; s.size(); i++ ) {<br>    ch = s[i];<br>    if( ch != '+' &amp;&amp; ch != '-' &amp;&amp; ch != '*' &amp;&amp; ch != '/' ) continue;<br>    for( j = i-1, x = 0; j &gt;= 0 &amp;&amp; s[j] == '.'; j-- ) x++;<br>    il = j;<br>    y = 0;<br>    while( j &gt;= 0 ) {<br>      if( s[j] == '+' || s[j] == '-' || s[j] == '*' || s[j] == '/' ) {<br>        if( y &gt; x ) break;<br>      }<br>      if( s[j] == '.' ) y++; else y = 0;<br>      j--;<br>    }<br>    if( j &gt;= 0 ) continue;<br>    for( j = i+1, x = 0; j &lt; s.size() &amp;&amp; s[j] == '.'; j++ ) x++;<br>    ir = j;<br>    y = 0;<br>    while( j &lt; s.size() ) {<br>      if( s[j] == '+' || s[j] == '-' || s[j] == '*' || s[j] == '/' ) {<br>        if( y &gt; x ) break;<br>      }<br>      if( s[j] == '.' ) y++; else y = 0;<br>      j++;<br>    }<br>    if( j &lt; s.size() ) continue;<br>    const set&lt;int&gt; &amp;a = doit(s.substr(0, il+1));<br>    const set&lt;int&gt; &amp;b = doit(s.substr(ir));<br>    set&lt;int&gt;::const_iterator ai, bi;<br>    for( ai = a.begin(); ai != a.end(); ai++ )<br>    for( bi = b.begin(); bi != b.end(); bi++ ) {<br>      if( s[i] == '+' ) {<br>        i64 v = (i64)*ai + *bi;<br>        if( v &gt; 2000000000 || v &lt; -2000000000 ) continue;<br>        ret.insert(v);<br>      } else if( s[i] == '-' ) {<br>        i64 v = (i64)*ai - *bi;<br>        if( v &gt; 2000000000 || v &lt; -2000000000 ) continue;<br>        ret.insert(v);<br>      } else if( s[i] == '*' ) {<br>        i64 v = (i64)*ai * *bi;<br>        if( v &gt; 2000000000 || v &lt; -2000000000 ) continue;<br>        ret.insert(v);<br>      } else if( s[i] == '/' &amp;&amp; *bi != 0 ) {<br>        i64 v = (i64)*ai / *bi;<br>        if( v &gt; 2000000000 || v &lt; -2000000000 ) continue;<br>        ret.insert(v);<br>      }<br>    }<br>  }<br>  return ret;<br>}<br><br>class DotNotation {<br>public:<br>int countAmbiguity(string dotForm) {<br>  return doit(dotForm).size();<br>}<br>};<br></td>