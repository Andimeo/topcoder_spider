<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>public class DotNotation<br>{<br>HashMap h = new HashMap();<br>long low = -2000000000;<br>long high = 2000000000;<br> <br>public int countAmbiguity(String s)<br>{<br>   eval(s);<br>   return ((HashSet) h.get(s)).size();<br>}<br> <br>void eval(String s)<br>{<br>   if (h.get(s) != null) return;  // solved this subproblem already<br> <br>//   System.out.println("eval " + s);<br> <br>   HashSet hs = new HashSet();<br> <br>   // first, parse<br>   int len = s.length();<br>   char op[] = new char[len+2];<br>   int left[] = new int[len+2];<br>   int right[] = new int[len+2];<br>   int pos[] = new int[len+2];<br> <br>   int nops = 0;<br>   for (int i = 0; i &lt; len; i++)<br>      if ("+-*/".indexOf(s.charAt(i)) &gt;= 0) {<br>         op[nops] = s.charAt(i);<br>         pos[nops] = i;<br>         left[nops] = end_dots(s.substring(0, i));<br>         right[nops] = begin_dots(s.substring(i+1));<br>         nops++;<br>      }<br> <br>   if (nops == 0) {<br>      hs.add(Long.valueOf(s));<br>      h.put(s, hs);<br>      return;<br>   }<br> <br>   // find dominant operators<br>   for (int i = 0; i &lt; nops; i++) {<br>      int l = i - 1;<br>      while (l &gt;= 0 &amp;&amp; right[l] &lt;= left[i]) l--;<br>      int r = i + 1;<br>      while (r &lt; nops &amp;&amp; left[r] &lt;= right[i]) r++;<br>      <br>      // dominant?<br>      if (l == -1 &amp;&amp; r == nops) {<br>         String ls = s.substring(0, pos[i] - left[i]);<br>         String rs = s.substring(pos[i] + right[i] + 1);<br>         eval(ls);<br>         eval(rs);<br> <br>         // combine results<br>         for (Iterator x = ((HashSet) h.get(ls)).iterator(); x.hasNext(); ) {<br>            long lval = ((Long) x.next()).longValue();<br>            for (Iterator y = ((HashSet) h.get(rs)).iterator(); y.hasNext(); ) {<br>               long rval = ((Long) y.next()).longValue();<br>               if (op[i] == '/' &amp;&amp; rval == 0) continue;  // division by zero<br>               long res = 0;<br>               switch (op[i]) {<br>                  case '+': res = lval + rval; break;<br>                  case '-': res = lval - rval; break;<br>                  case '*': res = lval * rval; break;<br>                  case '/': res = lval / rval; break;<br>               }<br>               if (res &lt; low || res &gt; high) continue; // overflow<br>               hs.add(new Long(res));<br>            }<br>         }<br>      }<br>   }<br>   h.put(s, hs);<br>}<br> <br>int end_dots(String s)<br>{<br>   int len = s.length();<br>   int cnt = 0;<br>   for (int i = len - 1; i &gt;= 0; i--)<br>      if (s.charAt(i) == '.') cnt++; else break;<br>   return cnt;<br>}<br> <br>int begin_dots(String s)<br>{<br>   int len = s.length();<br>   int cnt = 0;<br>   for (int i = 0; i &lt; len; i++)<br>      if (s.charAt(i) == '.') cnt++; else break;<br>   return cnt;<br>}<br>}<br></td>