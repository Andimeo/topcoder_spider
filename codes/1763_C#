<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections;<br>public class ProblemWriting {<br>  public ProblemWriting()<br>  {<br><br>  }<br>  public string myCheckData(string dotForm) {<br>    if(dotForm.Length == 0 || dotForm.Length &gt; 25)<br>    {<br>      return "dotForm must contain between 1 and 25 characters, inclusive.";<br>    }<br><br>    int current_char = 0;<br>    bool bNeeds_char = true;<br>    bool bOperator = false;<br>    bool bDotsPre = false;<br>    bool bDotsPost = true;<br>    //first character must be a number<br>    do<br>    {<br>      if(bNeeds_char)<br>      {<br>        switch(dotForm.Substring(current_char,1))<br>        {<br>          case "0":<br>          case "1":<br>          case "2":<br>          case "3":<br>          case "4":<br>          case "5":<br>          case "6":<br>          case "7":<br>          case "8":<br>          case "9":<br>            bNeeds_char = false;<br>            bDotsPre = true;<br>            Console.WriteLine("NUMBER:" + current_char);<br><br>            break;<br><br>          default:<br>            return "dotForm is not in dot notation, check character " + current_char + ".";<br>        }<br>      }<br>      else if(bDotsPre)<br>      {<br>        if(dotForm.Substring(current_char,1) != ".")<br>        {<br>          switch(dotForm.Substring(current_char,1))<br>          {<br>            case "+":<br>            case "-":<br>            case "/":<br>            case "*":<br>              current_char--;<br>              bOperator = true;<br>              bDotsPre = false;<br>              Console.WriteLine("FOUNDOPERATOR:" + current_char);<br>              break;<br><br>            default:<br>              return "dotForm is not in dot notation, check character " + current_char + ".";<br>          }<br>        }<br>        else<br>        {<br>          Console.WriteLine("PREDOTS:" + current_char);<br>        }<br>      }<br>      else if(bOperator)<br>      {<br>        switch(dotForm.Substring(current_char,1))<br>        {<br>          case "+":<br>          case "-":<br>          case "/":<br>          case "*":<br>            bOperator = false;<br>            bDotsPost = true;<br>            Console.WriteLine("OPERATOR:" + current_char);<br>            break;<br><br>          default:<br>            return "dotForm is not in dot notation, check character " + current_char + ".";<br>        }<br>      }<br>      else if(bDotsPost)<br>      {<br>        if(dotForm.Substring(current_char,1) != ".")<br>        {<br>          switch(dotForm.Substring(current_char,1))<br>          {<br>            case "0":<br>            case "1":<br>            case "2":<br>            case "3":<br>            case "4":<br>            case "5":<br>            case "6":<br>            case "7":<br>            case "8":<br>            case "9":<br>              current_char--;<br>              bNeeds_char = true;<br>              bDotsPost = false;<br>              break;<br><br>            default:<br>              return "dotForm is not in dot notation, check character " + current_char + ".";<br>          }<br>        }<br>        else<br>        {<br>          Console.WriteLine("DOTSPOST:" + current_char);<br>        }<br>      }<br><br>      current_char++;<br>    } while(current_char &lt; dotForm.Length);<br><br>    if(bDotsPre)<br>    {<br>      switch(dotForm.Substring(dotForm.Length - 1,1))<br>      {<br>        case "0":<br>        case "1":<br>        case "2":<br>        case "3":<br>        case "4":<br>        case "5":<br>        case "6":<br>        case "7":<br>        case "8":<br>        case "9":<br>          return "";<br>          break;<br><br>        default:<br>          return "dotForm is not in dot notation, check character " + dotForm.Length + ".";<br>      }<br>    }<br>    else<br>    {<br>      return "dotForm is not in dot notation, check character " + dotForm.Length + ".";<br>    }<br>  }<br>}<br><br><br>// Powered by FileEdit<br></td>