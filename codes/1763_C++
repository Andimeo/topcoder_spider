<td class="problemText" colspan="8" valign="middle" align="left">
            // common includes<br>#include &lt;algorithm&gt;<br>#include &lt;vector&gt;<br>#include &lt;string&gt;<br>#include &lt;iostream&gt;<br>#include &lt;map&gt;<br>#include &lt;stdlib.h&gt;<br>#include &lt;stdio.h&gt;<br>#include &lt;ctype.h&gt;<br>using namespace std;<br><br>// common typedefs<br>typedef vector&lt;string&gt; VS;<br>typedef vector&lt;int&gt; VI;<br><br>typedef string::iterator SI;<br>typedef VS::iterator VSI;<br>typedef VI::iterator VII;<br><br>// Statements I wish existed<br>#define foreach(it, collection) for(typeof(collection.begin()) it = collection.begin(); it != collection.end(); it++)<br>#define rforeach(it, collection) for(typeof(collection.rbegin()) it = collection.rbegin(); it != collection.rend(); it++)<br>#define sortc(collection) sort(collection.begin(), collection.end());<br>#define rsortc(collection) sort(collection.rbegin(), collection.rend());<br><br>class ProblemWriting<br>{<br>public:<br>  bool isnum(char c)<br>  {<br>    return (c&gt;='0') &amp;&amp; (c&lt;='9');<br>  }<br><br>  bool isop(char c)<br>  {<br>    return (c=='+') || (c=='-') || (c=='*') || (c=='/');<br>  }<br><br>  string errat(int i)<br>  {<br>    char ch[1000];<br>    sprintf(ch, "dotForm is not in dot notation, check character %d.", i);<br>    return string(ch);<br>  }<br><br>  string myCheckData(string a)<br>  {<br>    if (a.size() &gt; 25)<br>      return string("dotForm must contain between 1 and 25 characters, inclusive.");<br><br>    if (!isnum(a[0]))<br>      return errat(0);<br><br>    bool numnext=true;<br><br>    for(int i=0; i&lt;a.size(); i++)<br>    {<br>      char ch = a[i];<br>      if (numnext &amp;&amp; isop(ch))<br>        return errat(i);<br>      if (!numnext &amp;&amp; isnum(ch))<br>        return errat(i);<br>      if (!isop(ch) &amp;&amp; !isnum(ch) &amp;&amp; ch!='.')<br>        return errat(i);<br>      if (isop(ch))<br>        numnext=true;<br>      if (isnum(ch))<br>        numnext=false;<br>    }<br><br>    if (!isnum(a[a.size()-1]))<br>      return errat(a.size());<br><br>    return string("");<br>  }<br>};<br><br><br><br>// Powered by FileEdit<br></td>