<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Text;<br>using System.Text.RegularExpressions;<br>using System.Collections;<br><br>public class QuiningTopCoder {<br>    public string testCode(string src) {<br>        int N = src.Length;<br>        int IP = 0;<br>        int D = 1;<br>        Stack st = new Stack();<br>        int X = 0;<br>        string s = "";<br>        while ( X &lt;= 80000 ) {<br>            int d = D;<br>            bool noinc = false;<br>            int A=0,B=0,x=0;<br>            switch( src[IP] ) {<br>                case '0':<br>                case '1':<br>                case '2':<br>                case '3':<br>                case '4':<br>                case '5':<br>                case '6':<br>                case '7':<br>                case '8':<br>                case '9':<br>                    st.Push(src[IP]-'0');<br>                    break;<br>                case '$':<br>                    if ( st.Count != 0 ) st.Pop();<br>                    break;<br>                case ':':<br>                    if (st.Count != 0 ) {<br>                        st.Push(st.Peek());<br>                    } else {<br>                        st.Push(0);<br>                        st.Push(0);<br>                    }<br>                    break;<br>                case 'W':<br>                    if ( st.Count != 0 ) A = (int)st.Pop();<br>                    if ( st.Count != 0 ) B = (int)st.Pop();<br>                    st.Push(A);<br>                    st.Push(B);<br>                    break;<br>                case ',':<br>                    if ( st.Count != 0 ) x = (int)st.Pop();<br>                    s += src[Math.Abs(x)%N];<br>                    break;<br>                case '+':<br>                    if ( st.Count != 0 ) A = (int)st.Pop();<br>                    if ( st.Count != 0 ) B = (int)st.Pop();<br>                    x = A+B;<br>                    if ( x &gt; 1000000000 || x &lt; -1000000000 ) {<br>                        return "OVERFLOW "+X;<br>                    }<br>                    st.Push(x);<br>                    break;<br>                case '-':<br>                    if ( st.Count != 0 ) A = (int)st.Pop();<br>                    if ( st.Count != 0 ) B = (int)st.Pop();<br>                    x = A-B;<br>                    if ( x &gt; 1000000000 || x &lt; -1000000000 ) {<br>                        return "OVERFLOW "+X;<br>                    }<br>                    st.Push(x);<br>                    break;<br>                case '#':<br>                    d &lt;&lt;= 1;<br>                    break;<br>                case 'R':<br>                    D *= -1;<br>                    d *= -1;<br>                    break;<br>                case 'S':<br>                    if ( st.Count != 0 ) A = (int)st.Pop();<br>                    if ( A &gt; 0 )<br>                        st.Push(1);<br>                    else<br>                        st.Push(-1);<br>                    break;<br>                case '_':<br>                    if ( st.Count != 0 ) A = (int)st.Pop();<br>                    d= D = A%N;<br>                    break;<br>                case 'J':<br>                    if ( st.Count != 0 ) A = (int)st.Pop();<br>                    IP = Math.Abs(A)%N;<br>                    noinc=true;<br>                    break;<br>                case '@':<br>                    return "BADEND "+X;<br>            }<br>            if ( !src.StartsWith(s))<br>                return "MISMATCH "+X;<br>            if ( src == s ) {<br>                return "QUINES "+X;<br>            }<br>            if(!noinc)<br>                IP =  (3*N+IP+d)%N;<br>            X++;<br>        }<br>        return "TIMEOUT";<br>    }<br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by CodeProcessor<br></td>