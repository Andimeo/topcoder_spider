<td class="problemText" colspan="8" valign="middle" align="left">
            /*/*///*/*/ Powered by radedit!            /*/*/*/*/*/ ;<br>/*/*//*/*/  import java . util .           /*/*/*/*/*/ ;<br>/*/*//*/*/  import java . lang . reflect . /*/*/*/*/*/ ;<br>public class QuiningTopCoder {<br>   boolean ddd = false ;<br>  int pp = 0 ;<br>  int st[] = new int[100000] ;<br>  int sp = 0 ;<br>  int cc = 0 ;<br>  void push(int i) throws Exception {<br>    if (i &lt; -1000000000 || i &gt; 1000000000) {<br>      throw new Exception("OVERFLOW " + cc) ;<br>    }<br>    st[sp++] = i ;<br>  }<br>  int pop() {<br>    if (sp &gt; 0) {<br>      return st[--sp] ;<br>    }<br>    return 0 ;<br>  }<br>  String src = "" ;<br>  int n = 0 ;<br>  void pr(int i) throws Exception {<br>    if (pp &lt; n) {<br>      if (src.charAt(pp) != src.charAt(i)) {<br>  throw new Exception("MISMATCH " + cc) ;<br>      }<br>      //            System.out.println("Print " + src.charAt(pp)) ;<br>      pp++ ;<br>      if (pp == n) {<br>  throw new Exception("QUINES " + cc) ;<br>      }<br>    }<br>  }<br>  public String testCode(String source) {<br>    int i, j, k ;<br>    int D = 1 ;<br>    int ip = 0 ;<br>    src = source ;<br>    try {<br>    n = source.length() ;<br>    boolean stopped = false ;<br>    while (!stopped) {<br>      boolean nodoinc = false ;<br>      boolean killd = false ;<br>      char c = source.charAt(ip) ;<br>      //            System.out.println("" + cc + " IP is " + ip + " d is " + D + " c is " + c) ;<br>      switch (c) {<br>      case '0': case '1': case '2': case '3': case '4': case '5':<br>      case '6': case '7': case '8': case '9':<br>  push(((int)c)-'0') ;<br>  break ;<br>      case '$': pop() ; break ;<br>      case ':': i = pop() ; push(i) ; push(i) ; break ;<br>      case 'W': i = pop() ; j = pop() ; push(i) ; push(j) ; break ;<br>      case ',': i = pop() ; pr(Math.abs(i) % n) ; break ;<br>      case '+': i = pop() ; j = pop() ; push(i+j) ; break ;<br>      case '-': i = pop() ; j = pop() ; push(i-j) ; break ;<br>      case '#': D *= 2 ; killd = true ; break ;<br>      case 'R': D *= -1 ; break ;<br>      case 'S': i = pop() ; if (i &gt; 0) push(1) ; else push(-1) ; break ;<br>      case '_': i = pop() ; D = (i) % n ; break ;<br>      case 'J': i = pop() ; ip = (Math.abs(i)) % n ; nodoinc = true ; break ;<br>      case '@': stopped = true ; break ;<br>      }<br>      if (!nodoinc) {<br>  ip = (3 * n + ip + D) % n ;<br>      }<br>      if (killd) {<br>  D /= 2 ;<br>      }<br>      if (stopped) {<br>  break ;<br>      }<br>      cc++ ;<br>      if (cc &gt; 80000) {<br>  throw new Exception("TIMEOUT") ;<br>      }<br>    }<br>    if (pp &lt; n) {<br>      throw new Exception("BADEND " + cc) ;<br>    }<br>    throw new Exception("QUINES " + cc) ;<br>    } catch (Exception e) {<br>      e.printStackTrace() ;<br>      return e.getMessage() ;<br>    }<br>  }<br>}<br></td>