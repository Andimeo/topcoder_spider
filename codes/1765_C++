<td class="problemText" colspan="8" valign="middle" align="left">
            // common includes<br>#include &lt;algorithm&gt;<br>#include &lt;vector&gt;<br>#include &lt;string&gt;<br>#include &lt;iostream&gt;<br>#include &lt;map&gt;<br>#include &lt;stdlib.h&gt;<br>#include &lt;stdio.h&gt;<br>#include &lt;ctype.h&gt;<br>using namespace std;<br><br>// common typedefs<br>typedef vector&lt;string&gt; VS;<br>typedef vector&lt;int&gt; VI;<br><br>typedef string::iterator SI;<br>typedef VS::iterator VSI;<br>typedef VI::iterator VII;<br><br>// Statements I wish existed<br>#define foreach(it, collection) for(typeof(collection.begin()) it = collection.begin(); it != collection.end(); it++)<br>#define rforeach(it, collection) for(typeof(collection.rbegin()) it = collection.rbegin(); it != collection.rend(); it++)<br>#define sortc(collection) sort(collection.begin(), collection.end());<br>#define rsortc(collection) sort(collection.rbegin(), collection.rend());<br><br>class FixedPointTheorem<br>{<br>public:<br>  double cycleRange(double R)<br>  {<br>    double cur=0.25;<br><br>    for(int i=0; i&lt;200000; i++)<br>      cur = R*cur*(1-cur);<br><br>    double min=9999999999.9;<br>    double max=-9999999999.9;<br><br>    for(int i=0; i&lt;1000; i++)<br>    {<br>      cur = R*cur*(1-cur);<br>      if (cur&gt;max) max=cur;<br>      if (cur&lt;min) min=cur;<br>    }<br>    return max-min;<br>  }<br>};<br><br><br><br>// Powered by FileEdit<br></td>