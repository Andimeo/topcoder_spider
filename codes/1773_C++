<td class="problemText" colspan="8" valign="middle" align="left">
            // #define DEBUG<br>#include &lt;iostream&gt;<br>#include &lt;vector&gt;<br>#include &lt;string&gt;<br>#include &lt;utility&gt;<br>#include &lt;sstream&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;climits&gt;<br>using namespace std;<br> <br>const int MAX = 25;<br>int graph[MAX][MAX];<br>bool visited[MAX];<br>int result[MAX];<br> <br>class PickTeam {<br>public:<br>    int maxVal;<br>    int total;<br>    int len;<br> <br>    void Search(int start, int size, int team[]) {<br>        if (size == total) {<br>            int curVal = 0;<br>            for (int i = 0; i &lt; total; ++i) {<br>                for (int j = i + 1; j &lt; total; ++j) {<br>                    curVal += graph[team[i]][team[j]];<br>                }<br>            }<br>            if (curVal &gt; maxVal) {<br>                memcpy(result, team, sizeof(result));<br>                maxVal = curVal;<br>            }<br>            return;<br>        }<br> <br>        int remain = len - start;<br>        if (remain + size &lt; total) return;<br> <br>        for (int i = start; i &lt; len; ++i) {<br>            if (!visited[i]) {<br>                visited[i] = true;<br>                team[size] = i;<br>                Search(i + 1, size + 1, team);<br>                visited[i] = false;<br>            }<br>        }<br>    }<br> <br>    vector&lt;string&gt; pickPeople(int teamSize, vector&lt;string&gt; people) {<br>        total = teamSize;<br>        len = people.size();<br>        vector&lt;string&gt; names(len);<br>        for (int i = 0; i &lt; len; ++i) {<br>            istringstream istr(people[i]);<br>            istr &gt;&gt; names[i];<br>            for (int j = 0; j &lt; len; ++j) {<br>                istr &gt;&gt; graph[i][j];<br>            }<br>        }<br>        //<br>        memset(visited, 0, sizeof(visited));<br>        int team[MAX];<br>        maxVal = INT_MIN;<br>        Search(0, 0, team);<br> <br>        vector&lt;string&gt; pp;<br>        for (int i = 0; i &lt; total; ++i) {<br>            pp.push_back(names[result[i]]);<br>        }<br>        sort(pp.begin(), pp.end());<br>        return pp;<br>    }<br>};<br></td>