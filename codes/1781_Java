<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>import java.math.*;<br>import java.text.*;<br>public class Table {<br>    ////////////////////////////////////////////////////////<br>    /////////  Note: helper functions start here  //////////<br>    ////////////////////////////////////////////////////////<br>    <br>    void sout(int a) {<br>        if (!debug) return; System.out.println(a);<br>    }<br>    void sout(long a) {<br>        if (!debug) return; System.out.println(a);<br>    }<br>    void sout(char a) {<br>        if (!debug) return; System.out.println(a);<br>    }<br>    void sout(boolean a) {<br>        if (!debug) return; System.out.println(a);<br>    }<br>    void sout(Object a) {<br>        if (!debug) return; System.out.println(a);<br>    }<br>    void sout(String [] a) {<br>        if (!debug) return;<br>        System.out.println("Array size = " + a.length);<br>        System.out.print("[");<br>        for (int i = 0; i &lt; a.length; i ++) System.out.println(a[i] + ",");<br>        System.out.println("]");<br>    }<br>    void sout(int [] a) {<br>        if (!debug) return;<br>        System.out.println("Array size = " + a.length);<br>        System.out.print("[");<br>        for (int i = 0; i &lt; a.length; i ++) System.out.print(a[i] + ",");<br>        System.out.println("]");<br>    }<br>    void sout(long [] a) {<br>        if (!debug) return;<br>        System.out.println("Array size = " + a.length);<br>        System.out.print("[");<br>        for (int i = 0; i &lt; a.length; i ++) System.out.print(a[i] + ",");<br>        System.out.println("]");<br>    }<br>    void sout(char [] a) {<br>        if (!debug) return;<br>        System.out.println("Array size = " + a.length);<br>        System.out.print("[");<br>        for (int i = 0; i &lt; a.length; i ++) System.out.print(a[i] + ",");<br>        System.out.println("]");<br>    }<br>    void sout(boolean [] a) {<br>        if (!debug) return;<br>        System.out.println("Array size = " + a.length);<br>        System.out.print("[");<br>        for (int i = 0; i &lt; a.length; i ++) System.out.print(a[i] + ",");<br>        System.out.println("]");<br>    }<br>    <br>    <br>    Hashtable lookup = new Hashtable();<br>    int lookupIdx = 0;<br>    int indexOf(String in) {<br>        if (!lookup.containsKey(in)) {<br>            lookup.put(in, new Integer(lookupIdx));<br>            lookupIdx ++;<br>        }<br>        return ((Integer) lookup.get(in)).intValue();<br>    }<br>    <br>    ////////////////////////////////////////////////////////<br>    ///////////  Note: helper functions end here  //////////<br>    ////////////////////////////////////////////////////////<br>    <br>    <br>    boolean debug = false;<br>    <br>    Set set = new HashSet(), seta = new HashSet(), setb = new HashSet();<br>    ArrayList al = new ArrayList(), ala = new ArrayList(), alb = new ArrayList();<br>    Hashtable ht = new Hashtable(), hta = new Hashtable(), htb = new Hashtable();<br>    StringTokenizer tok, toka, tokb;<br>    StringBuffer buf = new StringBuffer();<br>    <br>    public String[] layout(String[] tb) {<br>        int n = tb.length;<br>        <br>        int m = 0;<br>        for (int i = 1; i &lt; tb[0].length(); i += 7) {<br>            m += tb[0].charAt(i) - '0';<br>        }<br>        <br>        char c[][] = new char[n][m];<br>        for (int i = 0; i &lt; n; i ++) {<br>            Arrays.fill(c[i], '.');<br>        }<br>        <br>        for (int i = 0; i &lt; tb.length; i ++) {<br>            <br>            int pos = 0;<br>            for (int j = 0; j &lt; tb[i].length(); j += 7) {<br>                String now = tb[i].substring(j + 1, j + 6);<br>                <br>                // sout(i + " " + j + " " + now);<br>                <br>                int aa = now.charAt(0) - '0';<br>                int bb = now.charAt(2) - '0';<br>                char cc = now.charAt(4);<br>                <br>                <br>                while (c[i][pos] != '.') pos ++;<br>                for (int k = 0; k &lt; aa; k ++) {<br>                    for (int row = 0; row &lt; bb; row ++ ) {<br>                        c[row + i][pos + k] = cc;<br>                    }<br>                }<br>            }<br>        }<br>        <br>        String r [] = new String [n];<br>        for (int i = 0; i &lt; n; i ++) {<br>            r[i] = new String(c[i]);<br>        }<br>        return r;<br>    } // end of method layout<br>}<br> <br>// Powered by CodeProcessor<br></td>