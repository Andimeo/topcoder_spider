<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br><br>public class MazeImprovement <br>{<br><br>    class Node<br>    {<br>  int x;<br>  int y;<br>  boolean N,S,E,W;<br><br>  <br>  Node(int a, int b)<br>  {<br>      y = a;<br>      x = b;<br>      if (M[y].charAt(x) == '-') E = true;<br>      if (M[y].charAt(x) == '|') N = true;<br>      if (M[y].charAt(x) == 'L') {E = true; N = true;}<br>      //      System.out.println("x: " + x + " " + y + "  " + N + " " + S +<br>      //             " " + E + " " + W);<br>      //      if (y == 0 &amp;&amp; N) System.out.println("ERROR");<br>  }<br><br>  void fix()<br>  {<br>      <br>      if (x &lt; map[0].length - 1) map[y][x+1].W = E;<br>      if (y &gt; 0) map[y-1][x].S = N;<br>      <br>  }<br><br>  void realFix()<br>  {<br>      if (x &lt; map[0].length - 1) map[y][x+1].W = E;<br>      if (x &gt; 0) map[y][x-1].E = W;<br>      if (y &gt; 0) map[y-1][x].S = N;<br>      if (y &lt; map.length - 1) map[y+1][x].N = S;<br>  }<br><br>  boolean isDead()<br>  {<br>      return getCt() &lt; 2;<br>  }<br><br>  boolean isShort()<br>  {<br>      if (!isDead()) return false;<br>      Node n = null;<br>      if (N) n = map[y-1][x];<br>      if (S) n = map[y+1][x];<br>      if (E) n = map[y][x+1];<br>      if (W) n = map[y][x-1];<br>      if (!n.isInter()) return false;<br>      return true;<br>  }<br><br>  int getCt()<br>  {<br>      int ct = 0;<br>      if (N) ct++;<br>      if (S) ct++;<br>      if (E) ct++;<br>      if (W) ct++;<br>      return ct;<br>  }<br><br>  boolean isInter()<br>  {<br>      return getCt() &gt; 2;<br>  }<br><br>  void waste()<br>  {<br>      if (!isDead()) return;<br>      Node n = this;<br><br><br>      if (N) n = map[y-1][x];<br><br><br>      if (S) n = map[y+1][x];<br><br><br>      if (E) n = map[y][x+1];<br><br><br>      if (W) n = map[y][x-1];<br><br>      if (!n.isInter()) return;<br>      if (y &gt; 0 &amp;&amp; map[y-1][x].isShort())<br>    {<br>        N = true;<br>        S = false;<br>        E = false;<br>        W = false;<br>        realFix();<br>        return;<br>    }<br>      if (x &gt; 0 &amp;&amp; map[y][x-1].isShort())<br>    {<br>        N = false;<br>        S = false;<br>        E = false;<br>        W = true;<br>        realFix();<br>        return;<br>    }<br>      if (x &lt; map[0].length - 1 &amp;&amp; map[y][x+1].isShort())<br>    {<br>        N = false;<br>        S = false;<br>        E = true;<br>        W = false;<br>        realFix();<br>        return;<br>    }<br>      if (y &lt; map.length - 1 &amp;&amp; map[y+1][x].isShort())<br>    {<br>        N = false;<br>        S = true;<br>        E = false;<br>        W = false;<br>        realFix();<br>        return;<br>    }<br><br><br><br>      if (y &gt; 0 &amp;&amp; map[y-1][x].isDead())<br>    {<br>        N = true;<br>        S = false;<br>        E = false;<br>        W = false;<br>        realFix();<br>        return;<br>    }<br>      if (x &gt; 0 &amp;&amp; map[y][x-1].isDead())<br>    {<br>        N = false;<br>        S = false;<br>        E = false;<br>        W = true;<br>        realFix();<br>        return;<br>    }<br>      if (x &lt; map[0].length - 1 &amp;&amp; map[y][x+1].isDead())<br>    {<br>        N = false;<br>        S = false;<br>        E = true;<br>        W = false;<br>        realFix();<br>        return;<br>    }<br>      if (y &lt; map.length - 1 &amp;&amp; map[y+1][x].isDead())<br>    {<br>        N = false;<br>        S = true;<br>        E = false;<br>        W = false;<br>        realFix();<br>        return;<br>    }<br>      <br>  }<br><br>  char getChar()<br>  {<br>      if (N &amp;&amp; E) return 'L';<br>      if (N) return '|';<br>      if (E) return '-';<br>      return '.';<br>  }<br>    }<br><br>    String[] M;<br><br>    Node[][] map;<br><br>  public String[] improve(String[] maze) <br>  {<br>      M = maze;<br>      map = new Node[maze.length][maze[0].length()];<br>      for (int i = 0; i &lt; maze.length; i++)<br>    for (int j = 0; j &lt; maze[0].length(); j++)<br>        map[i][j] = new Node(i, j);<br>      for (int i = 0; i &lt; maze.length; i++)<br>    for (int j = 0; j &lt; maze[0].length(); j++)<br>        map[i][j].fix();<br><br>      //      if (maze.length &lt; 10) return maze;<br><br>      for (int i = 0; i &lt; map.length; i++)<br>    for (int j = 0; j &lt; map[0].length; j++)<br>        {<br>      map[i][j].waste();<br>        }<br>      String[] ret = new String[map.length];<br>      for (int i = 0; i &lt; map.length; i++)<br>    {<br>        char[] line = new char[map[0].length];<br>        for (int j = 0; j &lt; line.length; j++)<br>      line[j] = map[i][j].getChar();<br>        ret[i] = new String(line);<br>    }<br>      return ret;<br>  }<br><br>  int[][] DIRS = {{1,0}, {0,1}, {-1,0},{0,-1}};<br><br>  public static void main(String[] args) <br>  {<br>  MazeImprovement temp = new MazeImprovement();<br>//    System.out.println(temp.improve(String[] maze));<br>  }<br>}<br><br><br>// Powered by FileEdit<br></td>