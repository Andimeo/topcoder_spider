<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Text;<br>using System.Collections;<br>using System.Collections.Specialized;<br><br>public class SmartElevator<br>{<br>  public int timeWaiting( int[] arrivalTime, int[] startingFloor, int[] destinationFloor ) <br>  {<br>    int[] eg = new int[arrivalTime.Length*2];<br>    for( int i=0; i&lt;arrivalTime.Length; i++ )<br>    {<br>      eg[i] = i + 1;<br>      eg[i+arrivalTime.Length] = -(i+1);<br>    }<br>    Array.Sort( eg );<br>    int best = int.MaxValue;<br>    do<br>    {<br>      if( !isLegal( eg ) )<br>        continue;<br>      int t = 0;<br>      int f = 1;<br>      for( int i=0; i&lt;eg.Length; i++ )<br>      {<br>        if( eg[i] &gt; 0 )<br>        {<br>          t = Math.Max( t + Math.Abs( f - startingFloor[eg[i]-1] ), arrivalTime[eg[i]-1] );<br>          f = startingFloor[eg[i]-1];<br>        }<br>        else<br>        {<br>          t += Math.Abs( f - destinationFloor[-eg[i]-1] );<br>          f = destinationFloor[-eg[i]-1];<br>        }<br>      }<br>      if( t &lt; best )<br>        best = t;<br>    }while( NextPermutation( eg, 0, eg.Length ) );<br>    return best;<br>  }<br>  public bool isLegal( int[] d )<br>  {<br>    bool[] on = new bool[d.Length/2];<br>    for( int i=0; i&lt;d.Length; i++ )<br>    {<br>      if( d[i]&gt;0 )<br>      {<br>        on[d[i]-1] = true;<br>      }<br>      else if( !on[-d[i]-1] )<br>      {<br>        return false;<br>      }<br>    }<br>    return true;<br>  }<br>  static bool NextPermutation( int[] Data, int startIndex, int length )<br>  {<br>    int first = startIndex;<br>    int last = first + length;<br>    if( last-first &lt;= 1 )<br>      return false;<br>    else<br>    {<br>      int i = last-1;<br>      while(true)<br>      {<br>        int ii = i--;<br>        if( ((System.IComparable)Data[i]).CompareTo( Data[ii] ) &lt; 0 )<br>        {<br>          int j = last;<br>          while( !( ((System.IComparable)Data[i]).CompareTo( Data[--j] ) &lt; 0 ) );<br>          int temp = Data[i];<br>          Data[i] = Data[j];<br>          Data[j] = temp;<br>          Array.Reverse( Data, ii, last-ii );<br>          return true;<br>        }<br>        else if( i == 0 )<br>        {<br>          Array.Reverse( Data );<br>          return false;<br>        }<br>      }<br>    }<br>  }<br>}<br><br><br>// Powered by FileEdit<br>// Powered by CodeProcessor<br></td>