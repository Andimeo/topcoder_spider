<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>public class BaseMystery {<br>  <br>  public int[] getBase(String equation) {<br>    StringTokenizer tok = new StringTokenizer(equation,"+=");<br>    String a = tok.nextToken();<br>    String b = tok.nextToken();<br>    String c = tok.nextToken();<br>    List ret = new ArrayList();<br>    for (int base = 2; base &lt;= 20; base++) {<br>      try {<br>      int i=Integer.parseInt(a,base);<br>      int j=Integer.parseInt(b,base);<br>      int k=Integer.parseInt(c,base);<br>      if (i+j==k) ret.add(new Integer(base));<br>    } catch (Exception e) { // wonderful code<br>    }<br>    }<br>    int[] v = new int[ret.size()];<br>    for (int i=0; i&lt;v.length; i++) v[i] = ((Integer)ret.get(i)).intValue();<br>    return v;<br>  }<br>  public final static void main(String[] args)<br>  {<br>    try {<br>      validateExample("1", new BaseMystery().getBase("1+1=2"), new int[] { 3,  4,  5,  6,  7,  8,  9,  10,  11,  12,  13,  14,  15,  16,  17,  18,  19,  20 }, "getBase(\"1+1=2\")");<br>      validateExample("2", new BaseMystery().getBase("1+1=10"), new int[] { 2 }, "getBase(\"1+1=10\")");<br>      <br>      validateExample("3", new BaseMystery().getBase("1+1=3"), new int[] { }, "getBase(\"1+1=3\")");<br>      validateExample("4", new BaseMystery().getBase("ABCD+211=B000"), new int[] { 14 }, "getBase(\"ABCD+211=B000\")");<br>      validateExample("5", new BaseMystery().getBase("ABCD+322=B000"), new int[] { 15 }, "getBase(\"ABCD+322=B000\")");<br>      validateExample("6", new BaseMystery().getBase("1+0=1"), new int[] { 2,  3,  4,  5,  6,  7,  8,  9,  10,  11,  12,  13,  14,  15,  16,  17,  18,  19,  20 }, "getBase(\"1+0=1\")");<br>      validateExample("7", new BaseMystery().getBase("GHIJ+1111=HJ00"), new int[] { 20 }, "getBase(\"GHIJ+1111=HJ00\")");<br>      validateExample("8", new BaseMystery().getBase("1234+8765=9999"), new int[] { 10,  11,  12,  13,  14,  15,  16,  17,  18,  19,  20 }, "getBase(\"1234+8765=9999\")");<br>    } catch (Exception e) {<br>      System.out.println(e);<br>      e.printStackTrace(System.out);<br>    }<br>  }<br> <br>  private static void validateExample(String exampleNum, int[] returned, int[] expected, String methodInvocation) {<br>    print(exampleNum);<br>    print("  ");<br>    if (!eq(returned,expected)) {<br>      print("FAIL");<br>    } else {<br>      print("SUCCESS");<br>    }<br>    print(" ");  <br>    print(methodInvocation);<br>    print("\tGot:[");<br>    print(returned);<br>    print("]\t");<br>    print("Expected:[");<br>    print(expected);<br>    print("]");<br>    print("\n");<br>  }<br> <br>  public static void print(boolean a) {<br>    System.out.print(a);<br>  }<br> <br>  public static void print(long a) {<br>    System.out.print(a);<br>  }<br> <br>  public static void print(int a) {<br>    System.out.print(a);<br>  }<br> <br>  public static void print(char a) {<br>    System.out.print(a);<br>  }<br> <br>  public static void print(String a) {<br>    System.out.print(a);<br>  }<br> <br>  public static void print(int[] a) {<br>    if (a==null) {System.out.print("null"); return;} <br>    for (int i=0; i&lt;a.length; i++) System.out.print(a[i]+(i&lt;a.length-1?",":"")); <br>  }<br> <br>  public static void print(int[][] a) {<br>    if (a==null) {System.out.print("null"); return;} <br>    for (int i=0; i&lt;a.length; i++) { print(a[i]); print("\n"); }<br>  }<br> <br>  public static void print(String[] a) {<br>    if (a==null) {System.out.print("null"); return;} <br>    for (int i=0; i&lt;a.length; i++) System.out.print(a[i]+(i&lt;a.length-1?",":"")); <br>  }<br> <br>  public static boolean eq(boolean a, boolean b) {<br>    return a==b;<br>  }<br> <br>  public static boolean eq(long a, long b) {<br>    return a==b;<br>  }<br> <br>  public static boolean eq(int a, int b) {<br>    return a==b;<br>  }<br> <br>  public static boolean eq(char a, char b) {<br>    return a==b;<br>  }<br> <br>  public static boolean eq(String a, String b) {<br>    return a.equals(b);<br>  }<br> <br>  public static boolean eq(int[] a, int[] b) { return Arrays.equals(a,b); }<br>  public static boolean eq(String[] a, String[] b) { return Arrays.equals(a,b); }<br> <br>}<br>// RonProc v1.00b14 October 30, 2002<br> <br>// Powered by CodeProcessor<br></td>