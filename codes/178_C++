<td class="problemText" colspan="8" valign="middle" align="left">
            #pragma warning( disable : 4786 )<br>#pragma warning( disable : 4503 )<br> <br>#include &lt;vector&gt;<br>#include &lt;string&gt;<br>#include &lt;map&gt;<br>#include &lt;stdio.h&gt;<br> <br>using namespace std;<br> <br>class more {<br>public:<br>  bool operator()( double a, double b ) {<br>    return a &gt; b; };<br> <br>};<br> <br>class EndOfContest {<br> <br>  void breakApart( string in, string *name, double *score ) {<br>    const char *st = in.c_str();<br>    const char *nd = st;<br>    while( *nd != ':' )<br>      nd++;<br>    *name = string( st, nd );<br>    nd += 2;<br>    sscanf( nd, "%lf", score );<br>  };<br> <br> <br>public:<br>  vector&lt; string &gt; calcEarnings( vector&lt; string &gt; scores, vector&lt; int &gt; money ) {<br> <br>    multimap&lt; double, pair&lt; int, string &gt;, more &gt; dot;<br> <br>    int i;<br>    for( i = 0; i &lt; scores.size(); i++ ) {<br>      string nem;<br>      double scr;<br>      breakApart( scores[ i ], &amp;nem, &amp;scr );<br>      dot.insert( pair&lt; const double, pair&lt; int, string &gt; &gt;( scr, pair&lt; int, string &gt;( i, nem ) ) );<br>    };<br> <br>    int nard = scores.size() - money.size();<br>    int foo;<br>    for( foo = 0; foo &lt; nard; foo++ ) {<br>      money.push_back( 0 );<br>    };<br> <br>    vector&lt; string &gt; megaout( scores.size() );<br> <br>    //return megaout;<br> <br>    multimap&lt; double, pair&lt; int, string &gt;, more &gt;::iterator itr = dot.begin();<br>    vector&lt; int &gt;::iterator curplace = money.begin();<br>    int place = 1;<br>    while( itr != dot.end() ) {<br>      multimap&lt; double, pair&lt; int, string &gt;, more &gt;::iterator ned = itr;<br>      int len = 0;<br>      while( ned != dot.end() &amp;&amp; ned-&gt;first == itr-&gt;first ) {<br>        ned++;<br>        len++;<br>      }<br>      int casheach = 0;<br>      if( itr-&gt;first &gt; 0 ) {<br>        for( foo = 0; foo &lt; len; foo++ )<br>          casheach += *(curplace++);<br>        casheach /= len;<br>      }<br>      while( ned != itr ) {<br>        char boof[ 1000 ];<br>        sprintf( boof, "%s: %d, %d", itr-&gt;second.second.c_str(), place, casheach );<br>        megaout[ itr-&gt;second.first ] = boof;<br>        itr++;<br>      }<br>      place += len;<br>    };<br> <br>    return megaout;<br> <br>  };<br> <br>};<br></td>