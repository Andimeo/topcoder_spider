<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;sstream&gt;<br>#include &lt;queue&gt;<br>#include &lt;set&gt;<br>#include &lt;map&gt;<br>using namespace std;<br>typedef long long ll;<br>typedef vector&lt;int&gt; vi; typedef vector&lt;string&gt; vs;<br>typedef istringstream iss; typedef ostringstream oss;<br>#define let(a,b) typeof(b) a(b)<br>#define all(a) a.begin(),a.end()<br>#define forall(a,b) for (let(a,b.begin());a!=b.end();++a)<br>#define forrall(a,b) for (let(a,b.rbegin());a!=b.rend();++a)<br>#define contains(a,b) (find(all(a),b)!=a.end())<br>#define fi(n) for (int i=0;i&lt;(n);++i)<br>#define fj(n) for (int j=0;j&lt;(n);++j)<br>#define fk(n) for (int k=0;k&lt;(n);++k)<br>#define gsort(a,b) sort(a,b,greater&lt;typeof(*a)&gt;());<br>template&lt;typename T&gt; inline string str(const T &amp;t){oss s;s&lt;&lt;t;return s.str();}<br>template&lt;typename T&gt; inline ll Int(const T &amp;t){stringstream s;s&lt;&lt;t;ll r;s&gt;&gt;r;return r;}<br>template&lt;typename T&gt; inline double Double(const T &amp;t){stringstream s;s&lt;&lt;t;double r;s&gt;&gt;r;return r;}<br>template&lt;typename T&gt; inline int size(const T &amp;t) {return t.size();}<br>inline string tolower(string s){fi(size(s)) s[i]=tolower(s[i]);return s;}<br>inline string toupper(string s){fi(size(s)) s[i]=toupper(s[i]);return s;}<br>const double R=12800/2.;<br>const double pi=acos(-1.);<br>double abs(double a, double b, double c)<br>{<br>  return sqrt(a*a+b*b+c*c);<br>}<br>double dist(double x1, double y1, double z1, double x2, double y2, double z2)<br>{<br>  double area=abs(y1*z2-y2*z1,x1*z2-x2*z1,x1*y2-x2*y1),d=abs(x1-x2,y1-y2,z1-z2);<br>  if (fabs(d)&lt;1e-9) return 10000.;<br>  return area/d;<br>}<br>class Satellites{<br>public:<br>vector &lt;int&gt; detectable(vector &lt;string&gt; rockets, vector &lt;string&gt; satellites)<br>{<br>vector &lt;int&gt; ans;<br>double sx[100],sy[100],sz[100],sd[100];<br>int n=size(satellites);<br>fi(n)<br>{<br>  double thi=pi/180.*Double(satellites[i]);<br>  double pha=pi/180.*Double(satellites[i].substr(10));<br>  double r=Double(satellites[i].substr(20))+R;<br>  sx[i]=r*cos(thi)*cos(pha);<br>  sy[i]=r*cos(thi)*sin(pha);<br>  sz[i]=r*sin(thi);<br>  sd[i]=abs(sx[i],sy[i],sz[i]);<br>}<br>fi(size(rockets))<br>{<br>  double thi=pi/180*Double(rockets[i]),pha=pi/180*Double(rockets[i].substr(10)),r=R+400;<br>  double x=r*cos(thi)*cos(pha),y=r*cos(thi)*sin(pha),z=r*sin(thi);<br>  int c=0;<br>  double d1=abs(x,y,z);<br>  fj(n)<br>  {<br>    double d=dist(sx[j],sy[j],sz[j],x,y,z),l=abs(sx[j]-x,sy[j]-y,sz[j]-z);<br>    if (d&gt;=R || sqrt(d1*d1-d*d)+sqrt(sd[j]*sd[j]-d*d)&gt;l+1e-9) c++;<br>    if (c&gt;=3) break;<br>  }<br>  if (c&gt;=3) ans.push_back(i);<br>}<br>return ans;<br>}};<br><br><br><br>// Powered by FileEdit<br></td>