<td class="problemText" colspan="8" valign="middle" align="left">
            #pragma warning( disable : 4786 )<br><br>#include &lt;vector&gt;<br>#include &lt;string&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;set&gt;<br>#include &lt;map&gt;<br>#include &lt;functional&gt;<br>#include &lt;deque&gt;<br><br>using namespace std;<br><br>int dx[] = { 0, 0, 1, -1 };<br>int dy[] = { 1, -1, 0, 0 };<br><br>void fluud( vector&lt; string &gt; &amp;a, int x, int y ) {<br>//  printf( "%d, %d, %c\n", x, y, a[ y ][ x ] );<br>  if( x &lt; 0 || y &lt; 0 || y &gt;= a.size() || x &gt;= a[ y ].size() )<br>    return;<br>  if( a[ y ][ x ] != 'X' )<br>    return;<br>  a[ y ][ x ] = 'F';<br>  for( int k = 0; k &lt; 4; k++ )<br>    fluud( a, x + dx[ k ], y + dy[ k ] );<br>};<br><br>int mn( int x, int y ) {<br>  if( x &lt; y )<br>    return x;<br>  return y;<br>};<br><br>int mx( int x, int y ) {<br>  if( x &gt; y )<br>    return x;<br>  return y;<br>};<br><br>void extract( vector&lt; string &gt; &amp;a, vector&lt; vector&lt; char &gt; &gt; &amp;meb ) {<br>  meb.clear();<br>  int sx = 100;<br>  int sy = 100;<br>  int ex = -1;<br>  int ey = -1;<br>  for( int y = 0; y &lt; a.size(); y++ ) {<br>    for( int x = 0; x &lt; a[ y ].size(); x++ ) {<br>      if( a[ y ][ x ] == 'F' ) {<br>        sx = mn( sx, x );<br>        sy = mn( sy, y );<br>        ex = mx( ex, x );<br>        ey = mx( ey, y );<br>      }<br>    }<br>  }<br>  ex++;<br>  ey++;<br>  meb.resize( ey - sy, vector&lt; char &gt;( ex - sx, 0 ) );<br>  for( int ty = sy; ty != ey; ty++ ) {<br>    for( int tx = sx; tx != ex; tx++ ) {<br>      meb[ ty - sy ][ tx - sx ] = ( a[ ty ][ tx ] == 'F' );<br>      if( a[ ty ][ tx ] == 'F' )<br>        a[ ty ][ tx ] = '.';<br>    }<br>  }<br>};<br><br>vector&lt; vector&lt; char &gt; &gt; flep( vector&lt; vector&lt; char &gt; &gt; meb, int r ) {<br>  if( r &amp; 0x1 ) {<br>    vector&lt; vector&lt; char &gt; &gt; marb = meb;<br>    for( int y = 0; y &lt; meb.size(); y++ )<br>      for( int x = 0; x &lt; meb[ y ].size(); x++ )<br>        marb[ y ][ meb[ y ].size() - x - 1 ] = meb[ y ][ x ];<br>    meb = marb;<br>  };<br>  if( r &amp; 0x2 ) {<br>    vector&lt; vector&lt; char &gt; &gt; marb = meb;<br>    for( int y = 0; y &lt; meb.size(); y++ )<br>      for( int x = 0; x &lt; meb[ y ].size(); x++ )<br>        marb[ meb.size() - y - 1 ][ x ] = meb[ y ][ x ];<br>    meb = marb;<br>  };<br>  if( r &amp; 0x4 ) {<br>    vector&lt; vector&lt; char &gt; &gt; marb( meb[ 0 ].size(), vector&lt; char &gt;( meb.size(), 0 ) );<br>    for( int y = 0; y &lt; meb.size(); y++ )<br>      for( int x = 0; x &lt; meb[ y ].size(); x++ )<br>        marb[ x ][ y ] = meb[ y ][ x ];<br>    meb = marb;<br>  };<br>  return meb;<br>};<br><br>void flood( vector&lt; string &gt; a, multiset&lt; vector&lt; vector&lt; char &gt; &gt; &gt; &amp;meebas ) {<br>  for( int y = 0; y &lt; a.size(); y++ ) {<br>    for( int x = 0; x &lt; a[ y ].size(); x++ ) {<br>      if( a[ y ][ x ] == 'X' ) {<br>        //printf( "%d, %d, %c\n", x, y, a[ y ][ x ] );<br>        fluud( a, x, y );<br>        vector&lt; vector&lt; char &gt; &gt; meb;<br>        extract( a, meb );<br>        vector&lt; vector&lt; vector&lt; char &gt; &gt; &gt; mebpoti;<br>        for( int i = 0; i &lt; 8; i++ )<br>          mebpoti.push_back( flep( meb, i ) );<br>        sort( mebpoti.begin(), mebpoti.end() );<br>        meebas.insert( mebpoti[ 0 ] );<br>      }<br>    }<br>  }<br>};<br><br>class Amoebae {<br>  public:<br>  int cultureX(vector &lt;string&gt; a, vector &lt;string&gt; b) {<br>    multiset&lt; vector&lt; vector&lt; char &gt; &gt; &gt; meebas;<br>    multiset&lt; vector&lt; vector&lt; char &gt; &gt; &gt; meebbs;<br>    flood( a, meebas );<br>    flood( b, meebbs );<br>    multiset&lt; vector&lt; vector&lt; char &gt; &gt; &gt; meebls;<br>    for( multiset&lt; vector&lt; vector&lt; char &gt; &gt; &gt;::iterator itr = meebas.begin(); itr != meebas.end(); itr++ ) {<br>      if( meebbs.count( *itr ) )<br>        meebbs.erase( meebbs.find( *itr ) );<br>        else<br>        meebls.insert( *itr );<br>    }<br>    return meebbs.size() + meebls.size();<br>  }<br>};<br></td>