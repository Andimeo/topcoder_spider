<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>import java.math.*;<br>public class Amoebae {<br>  <br>  <br>  public int cultureX(String[] known, String[] candidate) {<br>    ArrayList kk = amo(known);<br>    ArrayList cc = amo(candidate);<br>    int ob = 0;<br>    int oa = 0;<br>    for (int i = 0; i &lt; cc.size(); ++i) {<br>      String vv = (String) cc.get(i);<br>      if (kk.remove(vv)) {<br>        continue;<br>      }<br>      oa++;<br>    }<br>    ob = kk.size();<br>    return oa + ob;<br>  }<br>  <br>  ArrayList amo(String[] aa) {<br>    char[][] dd = new char[aa.length][];<br>    for (int i = 0; i &lt; aa.length; ++i) {<br>      dd[i] = aa[i].toCharArray();<br>    }<br>    ArrayList rr = new ArrayList();<br>    for (int r = 0; r &lt; aa.length; ++r) {<br>      for (int c = 0; c &lt; dd[0].length; ++c) {<br>        if (dd[r][c] == 'X') rr.add(extract(dd, r, c));<br>      }<br>    }<br>    return rr;<br>  }<br>  <br>  int minr, maxr, minc, maxc;<br>  <br>  String extract(char[][] data, int r, int c) {<br>    char[][] image = new char[data.length][data[0].length];<br>    for (int i = 0; i &lt; image.length; ++i) {<br>      Arrays.fill(image[i], '.');<br>    }<br>    minr = r;<br>    maxr = r;<br>    minc = c;<br>    maxc = c;<br>    copy(data, r, c, image);<br>    <br>    String[] aa = new String[8];<br>    aa[0] = sub1(image, minr, maxr, 1, minc, maxc, 1);<br>    aa[1] = sub1(image, maxr, minr, -1, minc, maxc, 1);<br>    aa[2] = sub1(image, minr, maxr, 1, maxc, minc, -1);<br>    aa[3] = sub1(image, maxr, minr, -1, maxc, minc, -1);<br>    aa[4] = sub2(image, minr, maxr, 1, minc, maxc, 1);<br>    aa[5] = sub2(image, maxr, minr, -1, minc, maxc, 1);<br>    aa[6] = sub2(image, minr, maxr, 1, maxc, minc, -1);<br>    aa[7] = sub2(image, maxr, minr, -1, maxc, minc, -1);<br>    Arrays.sort(aa);<br>    return aa[0];<br>  }<br>  <br>  String sub1(char[][] src, int r1, int r2, int dr, int c1, int c2, int dc) {<br>    StringBuffer buf = new StringBuffer();<br>    for (int r = r1; r != r2 + dr; r += dr) {<br>      for (int c = c1; c != c2 + dc; c += dc) {<br>        buf.append(src[r][c]);<br>      }<br>      buf.append(' ');<br>    }<br>    return buf.toString();<br>  }<br>  <br>  String sub2(char[][] src, int r1, int r2, int dr, int c1, int c2, int dc) {<br>    StringBuffer buf = new StringBuffer();<br>    for (int c = c1; c != c2 + dc; c += dc) {<br>      for (int r = r1; r != r2 + dr; r += dr) {<br>        buf.append(src[r][c]);<br>      }<br>      buf.append(' ');<br>    }<br>    return buf.toString();<br>  }<br>  <br>  void copy(char[][] src, int r, int c, char[][] dst) {<br>    if (r &lt; 0 || r &gt;= src.length || c &lt; 0 || c &gt;= src[0].length) return;<br>    if (src[r][c] != 'X') return;<br>    minc = Math.min(minc, c);<br>    minr = Math.min(minr, r);<br>    maxc = Math.max(maxc, c);<br>    maxr = Math.max(maxr, r);<br>    dst[r][c] = 'X';<br>    src[r][c] = '.';<br>    copy(src, r - 1, c, dst);<br>    copy(src, r + 1, c, dst);<br>    copy(src, r, c - 1, dst);<br>    copy(src, r, c + 1, dst);<br>  }<br> <br>  static int pari(String str) { return Integer.parseInt(str); }<br>  static long parl(String str) { return Long.parseLong(str); }<br>  static double pard(String str) { return Double.parseDouble(str); }<br> <br>  static int[] pari(String[] a) {<br>    int len = a.length;<br>    if (len &gt; 0 &amp;&amp; a[len - 1].length() == 0) --len;<br>    int[] r = new int[len];<br>    for (int i = 0; i &lt; len; ++i) r[i] = pari(a[i]);<br>    return r;<br>  }<br> <br>  static Integer wri(int n) { return new Integer(n); }<br>  static Long wrl(long n) { return new Long(n); }<br>  static Double wrd(double n) { return new Double(n); }<br> <br>  static Integer[] wri(int[] a) {<br>    Integer[] r = new Integer[a.length];<br>    for (int i = 0; i &lt; r.length; ++i) r[i] = wri(a[i]);<br>    return r;<br>  }<br> <br>  static Long[] wrl(long[] a) {<br>    Long[] r = new Long[a.length];<br>    for (int i = 0; i &lt; r.length; ++i) r[i] = wrl(a[i]);<br>    return r;<br>  }<br> <br>  static Double[] wrd(double[] a) {<br>    Double[] r = new Double[a.length];<br>    for (int i = 0; i &lt; r.length; ++i) r[i] = wrd(a[i]);<br>    return r;<br>  }<br> <br>  static int[] sub(int[] a, int pos, int len) {<br>    int[] r = new int[len];<br>    System.arraycopy(a, pos, r, 0, len);<br>    return r;<br>  }<br> <br>  static int uni(Object o) {<br>    if (o instanceof Integer) return ((Integer) o).intValue();<br>    return pari(o.toString());<br>  }<br> <br>  static long unl(Object o) {<br>    if (o instanceof Long) return ((Long) o).longValue();<br>    return parl(o.toString());<br>  }<br> <br>  static double und(Object o) {<br>    if (o instanceof Double) return ((Double) o).doubleValue();<br>    return pard(o.toString());<br>  }<br>}<br> <br>// Powered by PopsEdit<br></td>