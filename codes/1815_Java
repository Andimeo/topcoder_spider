<td class="problemText" colspan="8" valign="middle" align="left">
            public class Cubism {<br>    public Cubism() {}<br> <br>    public int lines(String[] lattice, String color) {<br>        boolean[][][] cube = new boolean[4][4][4];<br>        for (int i = 0; i &lt; 4; ++i) {<br>            for (int j = 0; j &lt; 4; ++j) {<br>                for (int k = 0; k &lt; 4; ++k) {<br>                    cube[i][j][k] = (lattice[i].charAt(k + 4*j) == 'W');<br>                }<br>            }<br>        }<br>        boolean lookingFor = !color.equalsIgnoreCase("black");<br>        int count = 0;<br> <br>        for (int i = 0; i &lt; 4; ++i) {<br>            for (int j = 0; j &lt; 4; ++j) {<br>                if (lookingFor == cube[i][j][0] &amp;&amp;<br>                    lookingFor == cube[i][j][1] &amp;&amp;<br>                    lookingFor == cube[i][j][2] &amp;&amp;<br>                    lookingFor == cube[i][j][3]) {<br>                    count++;<br>                }<br>            }<br>        }<br>        for (int i = 0; i &lt; 4; ++i) {<br>            for (int k = 0; k &lt; 4; ++k) {<br>                if (lookingFor == cube[i][0][k] &amp;&amp;<br>                    lookingFor == cube[i][1][k] &amp;&amp;<br>                    lookingFor == cube[i][2][k] &amp;&amp;<br>                    lookingFor == cube[i][3][k]) {<br>                    count++;<br>                }<br>            }<br>        }<br>        for (int j = 0; j &lt; 4; ++j) {<br>            for (int k = 0; k &lt; 4; ++k) {<br>                if (lookingFor == cube[0][j][k] &amp;&amp;<br>                    lookingFor == cube[1][j][k] &amp;&amp;<br>                    lookingFor == cube[2][j][k] &amp;&amp;<br>                    lookingFor == cube[3][j][k]) {<br>                    count++;<br>                }<br>            }<br>        }<br> <br>        for (int i = 0; i &lt; 4; ++i) {<br>            if (lookingFor == cube[i][0][0] &amp;&amp;<br>                lookingFor == cube[i][1][1] &amp;&amp;<br>                lookingFor == cube[i][2][2] &amp;&amp;<br>                lookingFor == cube[i][3][3]) {<br>                count++;<br>            }<br>            if (lookingFor == cube[i][3][0] &amp;&amp;<br>                lookingFor == cube[i][2][1] &amp;&amp;<br>                lookingFor == cube[i][1][2] &amp;&amp;<br>                lookingFor == cube[i][0][3]) {<br>                count++;<br>            }<br>        }<br> <br>        for (int j = 0; j &lt; 4; ++j) {<br>            if (lookingFor == cube[0][j][0] &amp;&amp;<br>                lookingFor == cube[1][j][1] &amp;&amp;<br>                lookingFor == cube[2][j][2] &amp;&amp;<br>                lookingFor == cube[3][j][3]) {<br>                count++;<br>            }<br>            if (lookingFor == cube[3][j][0] &amp;&amp;<br>                lookingFor == cube[2][j][1] &amp;&amp;<br>                lookingFor == cube[1][j][2] &amp;&amp;<br>                lookingFor == cube[0][j][3]) {<br>                count++;<br>            }<br>        }<br> <br>        for (int k = 0; k &lt; 4; ++k) {<br>            if (lookingFor == cube[0][0][k] &amp;&amp;<br>                lookingFor == cube[1][1][k] &amp;&amp;<br>                lookingFor == cube[2][2][k] &amp;&amp;<br>                lookingFor == cube[3][3][k]) {<br>                count++;<br>            }<br>            if (lookingFor == cube[3][0][k] &amp;&amp;<br>                lookingFor == cube[2][1][k] &amp;&amp;<br>                lookingFor == cube[1][2][k] &amp;&amp;<br>                lookingFor == cube[0][3][k]) {<br>                count++;<br>            }<br>        }<br> <br>        if (lookingFor == cube[0][0][0] &amp;&amp;<br>            lookingFor == cube[1][1][1] &amp;&amp;<br>            lookingFor == cube[2][2][2] &amp;&amp;<br>            lookingFor == cube[3][3][3]) {<br>            count++;<br>        }<br> <br>        if (lookingFor == cube[0][0][3] &amp;&amp;<br>            lookingFor == cube[1][1][2] &amp;&amp;<br>            lookingFor == cube[2][2][1] &amp;&amp;<br>            lookingFor == cube[3][3][0]) {<br>            count++;<br>        }<br> <br>        if (lookingFor == cube[0][3][0] &amp;&amp;<br>            lookingFor == cube[1][2][1] &amp;&amp;<br>            lookingFor == cube[2][1][2] &amp;&amp;<br>            lookingFor == cube[3][0][3]) {<br>            count++;<br>        }<br> <br>        if (lookingFor == cube[3][0][0] &amp;&amp;<br>            lookingFor == cube[2][1][1] &amp;&amp;<br>            lookingFor == cube[1][2][2] &amp;&amp;<br>            lookingFor == cube[0][3][3]) {<br>            count++;<br>        }<br> <br>        return count;<br>    }<br>}<br></td>