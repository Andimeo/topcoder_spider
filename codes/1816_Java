<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>public class Logger {<br>  boolean yes(String test, String[]prec,String curr) {<br>    String tp;<br>    int tnum=0;<br>    StringTokenizer st = new StringTokenizer(test);<br>    tp = st.nextToken();<br>    if (st.hasMoreTokens()) tnum = Integer.parseInt(st.nextToken());<br> <br>    String cp;<br>    int cnum=0;<br>    st = new StringTokenizer(curr);<br>    cp = st.nextToken();<br>    if (st.hasMoreTokens()) cnum = Integer.parseInt(st.nextToken());<br>    <br>    int tidx=-1,cidx=-1;<br>    for (int i=0; i&lt;prec.length; i++) {<br>      if (prec[i].equalsIgnoreCase(tp)) tidx=i;<br>      if (prec[i].equalsIgnoreCase(cp)) cidx=i;<br>    }<br>    if (tidx&gt;cidx) return true;<br>    if (tidx&lt;cidx) return false;<br>    if (tnum&gt;=cnum) return true;<br>    return false;<br>  }<br>  public String[] log(String[] messages, String[] priorities, String[] precedence, String loggingPriority) {<br>    List ret = new ArrayList();<br>    for (int i=0; i&lt;messages.length; i++) {<br>      if (yes(priorities[i],precedence,loggingPriority)) ret.add(messages[i]);<br>    }<br>    return (String[])ret.toArray(new String[0]);<br>  }<br> <br>  static String justrun = null;<br>  public final static void main(String[] args)<br>  {<br>    try {<br>      validateExample("1", new Logger().log(new String[] {"in doit()...","n=9","n=13","x=-3","divide by 0",<br> "index out of bounds","n=-1","this shouldn't happen","bailing out"}, new String[] {"info 3","debug","debug","debug 3","error","ERROR 5","debug 2","critical","fatal 100"}, new String[] {"info","debug","exceptional","error","critical","fatal"}, "error 1"), new String[] { "index out of bounds",  "this shouldn't happen",  "bailing out" }, "log(new String[] {\"in doit()...\",\"n=9\",\"n=13\",\"x=-3\",\"divide by 0\", \"index out of bounds\",\"...)");<br>      validateExample("2", new Logger().log(new String[] {"in doit()...","n=9","n=13","x=-3","divide by 0",<br> "index out of bounds","n=-1","this shouldn't happen","bailing out"}, new String[] {"info 3","debug","debug","debug 3","error","ERROR 5","debug 2","critical","fatal 100"}, new String[] {"info","debug","exceptional","error","critical","fatal"}, "debug 2"), new String[] { "x=-3",  "divide by 0",  "index out of bounds",  "n=-1",  "this shouldn't happen",  "bailing out" }, "log(new String[] {\"in doit()...\",\"n=9\",\"n=13\",\"x=-3\",\"divide by 0\", \"index out of bounds\",\"...)");<br>      validateExample("3", new Logger().log(new String[] {"1","2","3",""}, new String[] {"A","b","C","d"}, new String[] {"a","b","c","D"}, "C"), new String[] { "3",  "" }, "log(new String[] {\"1\",\"2\",\"3\",\"\"}, new String[] {\"A\",\"b\",\"C\",\"d\"}, new String[] {\"a\",...)");<br>    } catch (Exception e) {<br>      System.out.println(e);<br>      e.printStackTrace(System.out);<br>    }<br>  }<br> <br>  private static void validateExample(String exampleNum, String[] returned, String[] expected, String methodInvocation) {<br>    if(justrun!=null &amp;&amp; !eq(justrun,exampleNum)) return;<br>    print(exampleNum);<br>    print("  ");<br>    print((eq(returned,expected)) ? "SUCCESS" : "FAIL");<br>    print(" ");  <br>    print(methodInvocation);<br>    print("\tGot:[");<br>    print(returned);<br>    print("]\tExpected:[");<br>    print(expected);<br>    print("]\n");<br>  }<br> <br>  public static void print(char a) {System.out.print(a);}<br>  public static void print(int a) {System.out.print(a);}<br>  public static void print(long a) {System.out.print(a);}<br>  public static void print(boolean a) {System.out.print(a);}<br>  public static void print(double a) {System.out.print(a);}<br>  public static void print(String a) {System.out.print(a);}<br>  public static void print(int[] a) {<br>    if (a==null) {System.out.print("null"); return;} <br>    for (int i=0; i&lt;a.length; i++) System.out.print(a[i]+(i&lt;a.length-1?",":"")); <br>  }<br> <br>  public static void print(int[][] a) {<br>    if (a==null) {System.out.print("null"); return;} <br>    for (int i=0; i&lt;a.length; i++) { print(a[i]); print("\n"); }<br>  }<br> <br>  public static void print(String[] a) {<br>    if (a==null) {System.out.print("null"); return;} <br>    for (int i=0; i&lt;a.length; i++) System.out.print(a[i]+(i&lt;a.length-1?",":"")); <br>  }<br> <br>  public static boolean eq(boolean a, boolean b) {return a==b;}<br>  public static boolean eq(long a, long b) {return a==b;}<br>  public static boolean eq(int a, int b) {return a==b;}<br>  public static boolean eq(char a, char b) {return a==b;}<br>  public static boolean eq(double a, double b) {return a==b;}<br>  public static boolean eq(String a, String b) {return a==b || (a!=null &amp;&amp; b!=null &amp;&amp; a.equals(b));}<br>  public static boolean eq(int[] a, int[] b) { return Arrays.equals(a,b); }<br>  public static boolean eq(String[] a, String[] b) { return Arrays.equals(a,b); }<br> <br>}<br> <br> <br>// RonProc v1.5 October 7, 2003<br> <br> <br> <br>// Powered by PopsEdit<br>// Powered by CodeProcessor<br></td>