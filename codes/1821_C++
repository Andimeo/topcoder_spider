<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;iostream&gt;<br>using namespace std;<br>#ifdef WIN32<br>typedef __int64 int64_t;<br>typedef unsigned __int64 uint64_t;<br>#else<br>typedef long long int64_t;<br>typedef unsigned long long uint64_t;<br>#endif<br><br>inline string token_extract(string&amp; s)<br>{<br>  while(s.length() &amp;&amp; s[0]==' ')<br>    s.erase(0, 1);<br>  if(!s.length())<br>    return "";<br>  int pos=s.find(' ');<br>  if(pos&lt;0)<br>  {<br>    string s_tmp=s;<br>    s="";<br>    return s_tmp;<br>  }<br>  string s1=s.substr(0, pos);<br>  s.erase(0, pos+1);<br>  return s1;<br>}<br>template &lt;class T&gt;<br>inline void parse_into_tokens(string&amp; s, T&amp; t)<br>{<br>  while(!s.empty())<br>    t.push_back(token_extract(s));<br>}<br><br><br>#ifdef WIN32<br>template &lt;class T&gt; const T&amp; max(const T&amp; t1, const T&amp; t2) { return (t1&gt;t2) ? t1 : t2; }<br>template &lt;class T&gt; const T&amp; min(const T&amp; t1, const T&amp; t2) { return (t1&lt;t2) ? t1 : t2; }<br>#endif<br><br>#define Fill(X, Y) fill(X ## .begin(), X ## .end(), Y)<br>#define Count(X, Y) count(X ## .begin(), X ## .end(), Y)<br>#define Find(X, Y) find(X ## .begin(), X ## .end(), Y)<br>#define Sort(X) sort(X ## .begin(), X ## .end())<br><br>class PowSum <br>{<br>  public:<br>  int getSum(int low, int high, int pow) <br>  {<br>    int sum=0;<br>    for(int i=low; i&lt;=high; i++)<br>    {<br>      int t=1;<br>      for(int j=1; j&lt;=pow; j++)<br>      {<br>        t*=i;<br>        sum+=t;<br>      }<br>    }<br>    return sum;<br>  }<br>  <br><br>};<br><br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003]<br>// Powered by CodeProcessor<br></td>