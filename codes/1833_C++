<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;iostream&gt;<br>#include &lt;vector&gt;<br>#include &lt;string&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;sstream&gt;<br><br>using namespace std;<br><br>template&lt;class T&gt;<br>vector&lt;T&gt; split(string s, string del, bool all)<br>{<br>  vector&lt;T&gt; ans;<br>  s+=del;<br>  int cur=0,i;<br>  while ((i=s.find(del,cur))!=s.npos) {<br>    stringstream ss(s.substr(cur,i-cur));<br>    T tmp;<br>    if ((ss&gt;&gt;  tmp) || all)<br>      ans.push_back(tmp);<br>    cur=i+del.size();<br>  }<br>  return ans;<br>}<br><br>vector&lt;string&gt; splitstr(string s, string del)<br>{<br>  vector&lt;string&gt; ans;<br>  s+=del;<br>  int cur=0,i;<br>  while ((i=s.find(del,cur))!=s.npos) {<br>    ans.push_back(s.substr(cur,i-cur));<br>    cur=i+del.size();<br>  }<br>  return ans;<br>}<br><br>int dp[1001][6001];<br>int vis[1001][6001];<br><br>class Equity {<br>public:<br>  int gmin,gmax,cookie;<br>  <br>  // least number of counts needed<br>  int go(int n, int k)<br>  {<br>    if (k&lt;0) return -1;<br>    if (n==0) return (k==0)?0:-1;<br>    if (vis[n][k]==cookie) {<br>      return dp[n][k];<br>    }<br>    vis[n][k]=cookie;<br>    int best=-1;<br>    for(int i=gmin;i&lt;=gmax;i++) {<br>      for(int half=0;half&lt;2;half++)<br>  for(int triple=0;triple&lt;3;triple++) {<br>    int wh=i-half*3-triple*2;<br>    if (wh&lt;0) continue;<br>    if (wh%6) continue;<br>    wh/=6;<br>    int cnt=wh+half+triple;<br>    int rec=go(n-1,k-(wh*6+half*3+triple*2));<br>    if (rec&gt;=0) {<br>      if (rec+cnt&lt;best || best&lt;0) {<br>        best=rec+cnt;<br>      }<br>    }<br>  }<br>    }<br>    return dp[n][k]=best;   <br>  }<br><br>  int minPieces(int n, int k) {<br>    int eq=0,best=-1;<br>    cookie=0;<br>    memset(vis,0,sizeof(vis));<br>    do {<br>      for(int min=0;min&lt;=k*6;min++) {<br>  cookie++;<br>  int max=min+eq;<br>  gmin=min; gmax=max;<br>  int b=go(n,k*6);<br>  if (b&lt;0) continue;<br>  if (best&lt;0 || b&lt;best) {<br>    best=b;  <br>    //    printf("min=%d, max=%d\n",gmin,gmax);<br>  }<br>      }<br>      if (best&gt;=0) {<br>  cout &lt;&lt; eq &lt;&lt; endl;<br>  return best;<br>      }<br>      eq++;<br>    } while (true);<br>  }<br>};<br><br><br><br>// Powered by FileEdit<br></td>