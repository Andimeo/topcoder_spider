<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;iostream&gt;<br>#include &lt;vector&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;string&gt;<br>#include &lt;sstream&gt;<br> <br>using namespace std;<br> <br>class Poetry<br>{<br>vector&lt;string&gt; tokenize(string s, char seperator) {   <br>    vector&lt;string&gt; ret; string r; int p1=0; int p2=0;<br>    while((p2=s.find(seperator,p1))!=string::npos) <br>    { r = string(s,p1,p2-p1); p1=p2+1; if(!r.empty()) ret.push_back(r); }<br>    r = string(s,p1,string::npos); if(!r.empty()) ret.push_back(r); return ret; }<br> <br>public:<br>string rhymeScheme(vector&lt;string&gt; poem)<br>{<br>string output;<br>vector&lt;string&gt; rhymes;<br>char letter = 'a';<br>for(vector&lt;string&gt;::iterator i=poem.begin();i!=poem.end();i++)<br>{<br>vector&lt;string&gt; tokens=tokenize((*i),' ');<br>if(tokens.empty()) { output+= " "; continue;}<br>string lastword = *(tokens.end()-1);<br>for(int a=0;a&lt;lastword.size();a++)<br> lastword[a]=tolower(lastword[a]);<br> <br>string pattern; bool vowels=false; <br>for(int a=lastword.size()-1;a&gt;=0;a--)<br>{<br>if(lastword.size()==1) { pattern = lastword; break; }<br>if(lastword[a]=='a' || lastword[a]=='e' || lastword[a]=='i' || lastword[a]=='o' || lastword[a]=='u'<br>  || lastword[a]=='y' &amp;&amp; (a != 0 &amp;&amp; a != lastword.size()-1))<br>  {<br>  vowels=true; <br>  } <br>else<br>{<br>if(vowels==true) break;<br>}<br>pattern+= lastword[a];<br>}<br> <br>cout &lt;&lt; pattern &lt;&lt; " " &lt;&lt; letter &lt;&lt; endl;<br>string curr_letter;<br> <br>if(rhymes.empty())<br>{<br>rhymes.push_back(pattern);<br>string h; h+=letter;<br>rhymes.push_back(h);<br>curr_letter+=letter;<br>if(letter!='z') letter++; else letter='A';<br>}<br>else<br>{<br>// check if in rhymes<br>bool rhymed=false;<br>for(vector&lt;string&gt;::iterator s=rhymes.begin();s!=rhymes.end();s+=2)<br>{<br>if((*s)==pattern) { curr_letter=(*(s+1)); rhymed=true; break; }<br>}<br>if(rhymed==false) { rhymes.push_back(pattern); string h; h+=letter; rhymes.push_back(h); curr_letter+=letter; <br>                    if(letter!='z') letter++; else letter='A'; }<br>}<br> <br>output+=curr_letter;<br> <br> <br> <br>}<br> <br>return output;<br>}<br>};<br></td>