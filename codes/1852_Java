<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>public class Polynomials {<br>  class Fun {<br>    int[] coeff = new int[10];<br>    Fun(String s)<br>    {<br>      StringTokenizer st = new StringTokenizer(s, "+");<br>      while (st.hasMoreTokens()) {<br>        String el = st.nextToken();<br>        StringTokenizer s2 = new StringTokenizer(el, "xy^");<br>        int a = Integer.parseInt(s2.nextToken());<br>        int p = 0;<br>        if (s2.hasMoreTokens())<br>          p= Integer.parseInt(s2.nextToken());<br>        add(p,a);<br>      }<br>    }<br>    void add( int p, int c) {<br>      coeff[p] += c;<br>    }<br>    long eval(int v)<br>    {<br>      long res = 0;<br>      long p = 1;<br>      for (int i=0;i&lt;10;i++) {<br>        res += coeff[i] * p;<br>        p *= v;<br>      }<br>      return res;<br>    }<br>  }<br>  public long integralPoints(int ymax, int xmax, String equation) {<br>    StringTokenizer st = new StringTokenizer(equation, "=");<br>    Fun f = new Fun(st.nextToken());<br>    Fun g = new Fun(st.nextToken());<br>    long res = 0;<br><br>    boolean fconst = f.eval(1) == f.eval(2);<br>    boolean gconst = g.eval(1) == g.eval(2);<br>    if (fconst &amp;&amp; gconst) {<br>      if (f.eval(1) == g.eval(1))<br>        return (long)(ymax+1) * (xmax+1);<br>      else<br>        return 0;<br>    }<br>    int y=0;<br>    int x=0;<br>    long yv=f.eval(y);<br>    long xv=g.eval(x);<br>    while (true) {<br>      if (yv == -1) {<br>        yv = f.eval(++y);<br>      }<br>      if (xv == -1) {<br>        xv = g.eval(++x);<br>      }<br>      if (x &gt; xmax || y &gt; ymax) return res;<br><br>      if (xv == yv) {<br>        res++;<br>        if (fconst)<br>          yv = -1;<br>        else<br>          xv = -1;<br>      }<br>      else if (xv &lt; yv)<br>        xv = -1;<br>      else<br>        yv = -1;<br>    }<br>  }<br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by CodeProcessor<br></td>