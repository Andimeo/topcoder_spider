<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections;<br>using System.Text.RegularExpressions;<br><br>public class NameCheck <br>{<br>  bool Check(string strx)<br>  {<br>    string str = strx.ToUpper();<br>    int len = str.Length;<br>    for(int i = 0; i &lt; len; ++i)<br>    {<br>      char ch = str[i];<br>      if('A' &gt; ch || ch &gt; 'Z')<br>        return false;<br>    }<br><br>    return true;<br>  }<br><br>  string Caps(string str)<br>  {<br>    string strOut = "";<br>    int len = str.Length;<br>    for(int i = 0; i &lt; len; ++i)<br>    {<br>      char ch = str[i];<br>      if(i == 0)<br>        ch = Char.ToUpper(ch);<br>      else<br>        ch = Char.ToLower(ch);<br><br>      strOut = strOut + Char.ToString(ch);<br>    }<br><br>    return strOut;<br>  }<br><br>  public string[] formatList(string[] namelist) <br>  {<br>    ArrayList s = new ArrayList();<br><br>    foreach(string name in namelist)<br>    {<br>      // no leading or trailing space<br>      if(name[0] == ' ' || name[name.Length - 1] == ' ')<br>        continue;<br><br>      // 2 or 3 parts<br>      string[] parts = JVSLib.TokStr(name);<br>      int numParts = parts.Length;<br>      if(numParts &lt; 2 || numParts &gt; 3)<br>        continue;<br><br>      bool[] partIsInitial = new bool[numParts];<br>      for(int p = 0; p &lt; numParts; ++p)<br>      {<br>        string part = parts[p];<br>        if(part.Length == 2 &amp;&amp; part[1] == '.')<br>          partIsInitial[p] = true;<br>      }<br><br>      // first is name or init, second is name or init, third is name<br>      if(numParts == 2 &amp;&amp; partIsInitial[1])<br>        continue;<br>      if(numParts == 3 &amp;&amp; partIsInitial[2])<br>        continue;<br><br>      // letters only &amp; name must have 2 or more letters<br>      bool illegal = false;<br>      for(int p = 0; p &lt; numParts; ++p)<br>      {<br>        string strCheck;<br>        if(partIsInitial[p])<br>          strCheck = parts[p].Substring(0,parts[p].Length - 1);<br>        else<br>          strCheck = parts[p];<br><br>        if(!Check(strCheck))<br>          illegal = true;<br>        else if(!partIsInitial[p])<br>        {<br>          if(strCheck.Length &lt; 2)<br>            illegal = true;<br>        }<br>      }<br><br>      if(illegal)<br>        continue;<br><br>      string nameOut = "";<br>      for(int p = 0; p &lt; numParts; ++p)<br>      {<br>        if(p &gt; 0)<br>          nameOut = nameOut + " ";<br><br>        nameOut += Caps(parts[p]);<br>      }<br><br>      s.Add(nameOut);<br>    }<br><br>    string[] ret = (string[])s.ToArray(typeof(string));<br>    return ret;  <br>  }<br>  <br>   <br><br>}<br><br><br>class JVSLib<br>{<br>  public static int IndexOfNotOneOf(string input,char[] delimiters)<br>  {<br>    return IndexOfNotOneOf(input,delimiters,0,input.Length);<br>  }<br>  public static int IndexOfNotOneOf(string input,char[] delimiters,int startIndex)<br>  {<br>    return IndexOfNotOneOf(input,delimiters,startIndex,input.Length - startIndex);<br>  }<br>  public static int IndexOfNotOneOf(string input,char[] delimiters,int startIndex,int count)<br>  {<br>    int index = startIndex;<br>    int finalIndex = startIndex + count;  // one past the last one we check<br>    for( ; ; )<br>    {<br>      if(index == finalIndex)<br>        return -1;<br>      else<br>      {<br>        bool isDelimiter = false;<br>        for(int i = 0; !isDelimiter &amp;&amp; (i &lt; delimiters.Length); ++i)<br>          if(delimiters[i] == input[index])<br>            isDelimiter = true;<br><br>        if(isDelimiter)<br>          ++index;<br>        else<br>          return index;<br>      }<br>    }<br>  }<br>  public static string[] TokStr(string input)<br>  {<br>    char[] delimiters = new char[]{' '};<br>    return TokStr(input,delimiters);<br>  }<br>  public static string[] TokStr(string input,char[] delimiters)<br>  {<br>    ArrayList a = new ArrayList();<br>    int offset = 0;<br>    for(bool breakOut = false; !breakOut; )<br>    {<br>      offset = IndexOfNotOneOf(input,delimiters,offset);<br>      if(offset &lt; 0)  <br>        breakOut = true;<br>      else<br>      {<br>        int newOffset = input.IndexOfAny(delimiters,offset);<br>        if(newOffset &lt; 0)<br>        {<br>          a.Add(input.Substring(offset));<br>          breakOut = true;<br>        }<br>        else<br>          a.Add(input.Substring(offset,newOffset - offset));<br>        offset = newOffset;<br>      }<br>    }<br><br>    string[] ret = (string[])a.ToArray(typeof(string));<br>    return ret;  <br>  }<br>  public static int[] TokInt(string input)<br>  {<br>    char[] delimiters = new char[]{' '};<br>    return TokInt(input,delimiters);<br>  }<br>  public static int[] TokInt(string input,char[] delimiters)<br>  {<br>    ArrayList a = new ArrayList();<br>    string[] stringList = TokStr(input,delimiters);<br>    foreach(string str in stringList)<br>      a.Add(int.Parse(str));<br>    int[] ret = (int[])a.ToArray(typeof(int));<br>    return ret;  <br>  }<br>  public static int[][] Tk2Int(string[] input)<br>  {<br>    char[] delimiters = new char[]{' '};<br>    return Tk2Int(input,delimiters);<br>  }<br>  public static int[][] Tk2Int(string[] input,char[] delimiters)<br>  {<br>    ArrayList a = new ArrayList();<br>    foreach(string str in input)<br>      a.Add(TokInt(str,delimiters));<br>    int[][] ret = (int[][])a.ToArray(typeof(int[]));<br>      return ret;  <br>  }<br>}<br><br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.10 [30-Nov-2003]<br>// Powered by CodeProcessor<br></td>