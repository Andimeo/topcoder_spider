<td class="problemText" colspan="8" valign="middle" align="left">
            Imports Microsoft.VisualBasic<br>Imports System.Math<br>Imports System<br>Imports System.Collections<br> <br>Public Class WhatSort<br>    Public Enum sortt<br>        NAW<br>        NWA<br>        ANW<br>        AWN<br>        WAN<br>        WNA<br>    End Enum<br> <br>    Private Structure p<br>        Implements IComparable<br> <br>        Dim name As String<br>        Dim age As Integer<br>        Dim wt As Integer<br> <br>        Public Function CompareTo(ByVal obj As Object) As Integer Implements System.IComparable.CompareTo<br>            'Return Math.Sign(Value - DirectCast(obj, HeapEntry).Value)<br>            Dim c1, c2, c3 As Integer<br>            Select Case tp<br>                Case sortt.ANW<br>                    c1 = Math.Sign(age - DirectCast(obj, p).age)<br>                    c2 = String.Compare(name, DirectCast(obj, p).name)<br>                    c3 = Math.Sign(-wt + DirectCast(obj, p).wt)<br>                Case sortt.AWN<br>                    c1 = Math.Sign(age - DirectCast(obj, p).age)<br>                    c3 = String.Compare(name, DirectCast(obj, p).name)<br>                    c2 = Math.Sign(-wt + DirectCast(obj, p).wt)<br>                Case sortt.NAW<br>                    c2 = Math.Sign(age - DirectCast(obj, p).age)<br>                    c1 = String.Compare(name, DirectCast(obj, p).name)<br>                    c3 = Math.Sign(-wt + DirectCast(obj, p).wt)<br>                Case sortt.NWA<br>                    c3 = Math.Sign(age - DirectCast(obj, p).age)<br>                    c1 = String.Compare(name, DirectCast(obj, p).name)<br>                    c2 = Math.Sign(-wt + DirectCast(obj, p).wt)<br>                Case sortt.WAN<br>                    c2 = Math.Sign(age - DirectCast(obj, p).age)<br>                    c3 = String.Compare(name, DirectCast(obj, p).name)<br>                    c1 = Math.Sign(-wt + DirectCast(obj, p).wt)<br>                Case sortt.WNA<br>                    c3 = Math.Sign(age - DirectCast(obj, p).age)<br>                    c2 = String.Compare(name, DirectCast(obj, p).name)<br>                    c1 = Math.Sign(-wt + DirectCast(obj, p).wt)<br>            End Select<br>            If c1 &lt;&gt; 0 Then<br>                Return c1<br>            Else<br>                If c2 &lt;&gt; 0 Then<br>                    Return c2<br>                Else<br>                    Return c3<br>                End If<br>            End If<br>        End Function<br>    End Structure<br> <br>    Public Shared tp As sortt<br> <br>    Public Function sortType(ByVal name As String(), ByVal age As Integer(), ByVal wt As Integer()) As String<br>        Dim pd(name.Length - 1) As p<br>        Dim a As Integer<br>        For a = 0 To name.Length - 1<br>            With pd(a)<br>                .name = name(a)<br>                .age = age(a)<br>                .wt = wt(a)<br>            End With<br>        Next<br>        Dim p1(pd.Length - 1) As p<br>        Dim p2(pd.Length - 1) As p<br>        Dim p3(pd.Length - 1) As p<br>        Dim p4(pd.Length - 1) As p<br>        Dim p5(pd.Length - 1) As p<br>        Dim p6(pd.Length - 1) As p<br>        Array.Copy(pd, p1, pd.Length)<br>        Array.Copy(pd, p2, pd.Length)<br>        Array.Copy(pd, p3, pd.Length)<br>        Array.Copy(pd, p4, pd.Length)<br>        Array.Copy(pd, p5, pd.Length)<br>        Array.Copy(pd, p6, pd.Length)<br>        tp = sortt.ANW<br>        Array.Sort(p1)<br>        tp = sortt.AWN<br>        Array.Sort(p2)<br>        tp = sortt.NAW<br>        Array.Sort(p3)<br>        tp = sortt.NWA<br>        Array.Sort(p4)<br>        tp = sortt.WAN<br>        Array.Sort(p5)<br>        tp = sortt.WNA<br>        Array.Sort(p6)<br>        Dim t1, t2, t3, t4, t5, t6 As Boolean<br>        t1 = True<br>        t2 = True<br>        t3 = True<br>        t4 = True<br>        t5 = True<br>        t6 = True<br>        For a = 0 To name.Length - 1<br>            If Not pd(a).Equals(p1(a)) Then t1 = False<br>            If Not pd(a).Equals(p2(a)) Then t2 = False<br>            If Not pd(a).Equals(p3(a)) Then t3 = False<br>            If Not pd(a).Equals(p4(a)) Then t4 = False<br>            If Not pd(a).Equals(p5(a)) Then t5 = False<br>            If Not pd(a).Equals(p6(a)) Then t6 = False<br>        Next<br>        Dim c As Integer<br>        Dim ret As String<br>        If t1 Then<br>            c += 1<br>            ret = "ANW"<br>        End If<br>        If t2 Then<br>            c += 1<br>            ret = "AWN"<br>        End If<br>        If t3 Then<br>            c += 1<br>            ret = "NAW"<br>        End If<br>        If t4 Then<br>            c += 1<br>            ret = "NWA"<br>        End If<br>        If t5 Then<br>            c += 1<br>            ret = "WAN"<br>        End If<br>        If t6 Then<br>            c += 1<br>            ret = "WNA"<br>        End If<br>        If c = 0 Then Return "NOT"<br>        If c &gt; 1 Then Return "IND"<br>        Return ret<br>    End Function<br>End Class<br></td>