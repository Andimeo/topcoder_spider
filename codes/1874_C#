<td class="problemText" colspan="8" valign="middle" align="left">
            using System; using System.Collections; public class DirectoryTree { public string[] display(string[] files) {<br>Array.Sort(files);<br>paths = files;<br>result.Add("ROOT");<br>F("/", "");<br>/*<br>String[] expected = new String[] { "ROOT",<br>  "+-a",<br>  "  +-a",<br>  "  | +-a",<br>  "  |   +-a",<br>  "  |     +-a",<br>  "  |     | +-a",<br>  "  |     |   +-a",<br>  "  |     +-b",<br>  "  |       +-a",<br>  "  |         +-a",<br>  "  +-b",<br>  "    +-a",<br>  "      +-a",<br>  "        +-a",<br>  "          +-a",<br>  "            +-a" };<br> <br>if (expected.Length != result.Count)<br> throw new Exception(String.Format("expected '{0}', got '{1}'", expected.Length, result.Count));<br> <br>for (int i=0; i&lt;expected.Length; i++)<br> if (!expected[i].Equals((String)result[i]))<br>  throw new Exception(String.Format("expected '{0}', got '{1}'", expected[i], result[i]));<br>*/<br>return (string[]) result.ToArray(typeof(string));<br>}<br> <br>void F(String dir, String prefix)<br>{<br>ArrayList children = new ArrayList();<br>foreach (String s in paths)<br> if (s.StartsWith(dir))<br>  {<br>  String name = s.Substring(dir.Length).Split(new char[]{'/'})[0];<br>  if (!children.Contains(name))<br>   children.Add(name);<br>  }<br> <br>children.Sort();<br>for (int i=0; i&lt;children.Count; i++)<br> {<br> String child = (String) children[i];<br> result.Add(prefix + "+-" + child);<br> if (i == children.Count-1)<br>   F(dir + child + "/", prefix + "  ");<br> else<br>   F(dir + child + "/", prefix + "| ");<br> }<br> <br>} // F<br> <br>string[] paths;<br>ArrayList result = new ArrayList();<br>}<br></td>