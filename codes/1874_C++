<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;iostream&gt;<br>#include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;functional&gt;<br>#include &lt;numeric&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cmath&gt;<br>#include &lt;queue&gt;<br>using namespace std;<br>typedef vector&lt;int&gt; VI;  typedef vector&lt;vector&lt;int&gt; &gt; VVI;<br>typedef vector&lt;string&gt; VS;  typedef vector&lt;vector&lt;string&gt; &gt; VVS;<br>typedef signed long long i64;  typedef unsigned long long u64;<br><br>VVS d;<br>VS dn;<br>VS ret;<br><br>int find(string s) {<br>  for( int i = 0; i &lt; dn.size(); i++ )<br>    if( dn[i] == s ) return i;<br>  dn.push_back(s);<br>  d.push_back(VS());<br>  return dn.size()-1;<br>}<br><br>void doit(string s, string pre) {<br>  int x = find(s), y;<br>  for( int i = 0; i &lt; d[x].size(); i++ ) {<br>    for( y = d[x][i].size()-1; d[x][i][y] != '/'; y-- );<br>    ret.push_back(pre+"+-"+d[x][i].substr(y+1));<br>    doit(d[x][i], pre+(i==d[x].size()-1 ? "  " : "| "));<br>  }<br>}<br><br>class DirectoryTree {<br>public:<br>vector &lt;string&gt; display(vector &lt;string&gt; a) {<br>  int i, j, k, x, y, z, n;<br><br>  string prev = "ROOT";<br>  for( i = 0; i &lt; a.size(); i++ ) {<br>    for( x = 0; x != a[i].size(); ) {<br>      y = a[i].find('/', x+1);<br>      if( y == -1 ) y = a[i].size();<br>      string s = a[i].substr(0, x), t = a[i].substr(0, y);<br>      d[find(s)].push_back(t);<br>      x = y;<br>    }<br>  }<br>  for( i = 0; i &lt; d.size(); i++ ) {<br>    sort(d[i].begin(), d[i].end());<br>    d[i].erase(unique(d[i].begin(), d[i].end()), d[i].end());<br>  }<br>  ret.push_back("ROOT");<br>  doit("", "");<br>  return ret;<br>}<br>};<br><br><br>// Powered by FileEdit<br></td>