<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;set&gt;<br>#include &lt;map&gt;<br>#include &lt;iostream&gt;<br>#include &lt;sstream&gt;<br>#include &lt;numeric&gt;<br>#include &lt;algorithm&gt;<br> <br>using namespace std;<br> <br>//Sets stuff<br>#define _in(c, x) (c.find(x) != c.end())<br> <br>//Constant stuff<br>const long double zero=0.000000000001;<br>const long double pi=3.14159265358979323846;<br> <br>//Floating point stuff<br>bool _equal(long double v1, long double v2) {return abs(v1-v2)&lt;zero;}<br>bool _less(long double v1, long double v2) {return v1-v2&lt;-zero;}<br> <br>//Math stuff<br>long long gcd(long long a,long long b);<br>long long lcm(long long a,long long b);<br> <br>long long fakt(int n);<br>long long vari(int n, int k);<br>long long komb(int n, int k);<br> <br>long double det2(<br>long double a1,long double a2,<br>long double b1,long double b2);<br> <br>long double det3(<br>long double a1,long double a2,long double a3,<br>long double b1,long double b2,long double b3,<br>long double c1,long double c2,long double c3);<br> <br>long double det4(<br>long double a1,long double a2,long double a3,long double a4,<br>long double b1,long double b2,long double b3,long double b4,<br>long double c1,long double c2,long double c3,long double c4,<br>long double d1,long double d2,long double d3,long double d4);<br> <br>//Calendar stuff<br>bool leap(long long x);<br>int nrdays(int year,int month);<br>string dayname(int day);<br>string monthname(int month);<br> <br>//Conversion stuff<br>int chr2int(char a) {return a-'0';}<br>string long2str(long long a);<br>long long str2long(string a);<br> <br>//Splitting stuff<br> <br>vector&lt;string&gt; split(string str,string delim);<br> <br>//Vector and set outputting stuff<br> <br>template &lt;class T&gt; ostream &amp;operator &lt;&lt;(ostream &amp;os, const vector&lt;T&gt; &amp;vec);<br>template &lt;class T&gt; ostream &amp;operator &lt;&lt;(ostream &amp;os, const set&lt;T&gt; &amp;st);<br> <br>//The real stuff<br>bool wordstart(string s,int w)<br>{<br>  return (w==0 || s[w]!=' ' &amp;&amp; s[w-1]==' ');<br>}<br>class Twain <br>{<br>  public:<br>  string getNewSpelling(int year, string phrase) <br>  {<br>// BEGIN CUT HERE<br>    static bool s_FirstTime = true; if (s_FirstTime) { s_FirstTime = false; run_test(-1); }<br>// END CUT HERE<br> <br>    string solution=phrase;<br>    if (solution.size()==0) return solution;<br>    for(int q=1;q&lt;=year;++q)<br>    {<br>      switch (q) <br>      {<br>        case 1:<br>        {<br>          for(int w=0;w&lt;solution.size();++w)<br>          if (wordstart(solution,w) &amp;&amp; solution[w]=='x') solution[w]='z';<br>          for(int w=0;w&lt;solution.size();++w)<br>          if (solution[w]=='x') solution.replace(w,1,"ks");<br>          break;<br>        }<br>        case 2:<br>        {<br>          for(int w=0;w&lt;solution.size();++w)<br>          if (solution[w]=='y') solution[w]='i';<br>          break;<br>        }<br>        case 3:<br>        {<br>          for(int w=0;w&lt;solution.size()-1;++w)<br>          if (solution[w]=='c' &amp;&amp; (solution[w+1]=='i' || solution[w+1]=='e')) solution[w]='s';<br>          break;<br>        }<br>        case 4:<br>        {<br>          bool cs=true;<br>          while (cs)<br>          {<br>            cs=false;<br>            for(int w=0;w&lt;solution.size()-1;++w)<br>            if (solution[w]=='c' &amp;&amp; solution[w+1]=='k') <br>            {<br>              solution.erase(w,1);<br>              cs=true;<br>            }<br>          }<br>          break;<br>        }<br>        case 5:<br>        {<br>          for(int w=0;w&lt;solution.size();++w)<br>            if (wordstart(solution,w) &amp;&amp; solution.substr(w,3)=="sch") solution.replace(w,3,"sk");<br>          for(int w=0;w&lt;solution.size();++w)<br>            if (solution.substr(w,3)=="chr") solution.replace(w,3,"kr");<br>          for(int w=0;w&lt;solution.size();++w)<br>            if (solution[w]=='c' &amp;&amp; (w==solution.size() || solution[w+1]!='h')) solution[w]='k';<br>          break;<br>        }<br>        case 6:<br>        {<br>          for(int w=0;w&lt;solution.size();++w)<br>            if (wordstart(solution,w) &amp;&amp; solution.substr(w,2)=="kn") solution.replace(w,2,"n");<br>          break;<br>        }<br>        case 7:<br>        {<br>          bool cs=true;<br>          while (cs)<br>          {<br>            cs=false;<br>            for(int w=0;w&lt;solution.size()-1;++w)<br>            if (solution[w]==solution[w+1] &amp;&amp; solution[w]!=' ' &amp;&amp; solution[w]!='a' <br>            &amp;&amp; solution[w]!='e' &amp;&amp; solution[w]!='i' &amp;&amp; solution[w]!='o' &amp;&amp; solution[w]!='u') <br>            {<br>              solution.erase(w,1);<br>              cs=true;<br>            }<br>          }<br>          break;<br>        }<br>      }<br>    }<br>    return solution;<br>  }<br>// BEGIN CUT HERE<br>  public:<br>  void run_test(int Case) { if ((Case == -1) || (Case == 0)) test_case_0(); if ((Case == -1) || (Case == 1)) test_case_1(); if ((Case == -1) || (Case == 2)) test_case_2(); if ((Case == -1) || (Case == 3)) test_case_3(); if ((Case == -1) || (Case == 4)) test_case_4(); if ((Case == -1) || (Case == 5)) test_case_5(); if ((Case == -1) || (Case == 6)) test_case_6(); }<br>  private:<br>  template &lt;typename T&gt; string print_array(const vector&lt;T&gt; &amp;V) { ostringstream os; os &lt;&lt; "{ "; for (typename vector&lt;T&gt;::const_iterator iter = V.begin(); iter != V.end(); ++iter) os &lt;&lt; '\"' &lt;&lt; *iter &lt;&lt; "\","; os &lt;&lt; " }"; return os.str(); }<br>  void verify_case(int Case, const string &amp;Expected, const string &amp;Received) { cerr &lt;&lt; "Test Case #" &lt;&lt; Case &lt;&lt; "..."; if (Expected == Received) cerr &lt;&lt; "PASSED" &lt;&lt; endl; else { cerr &lt;&lt; "FAILED" &lt;&lt; endl; cerr &lt;&lt; "\tExpected: \"" &lt;&lt; Expected &lt;&lt; '\"' &lt;&lt; endl; cerr &lt;&lt; "\tReceived: \"" &lt;&lt; Received &lt;&lt; '\"' &lt;&lt; endl; } }<br>  void test_case_0() { int Arg0 = 1; string Arg1 = "i fixed the chrome xerox by the cyclical church"; string Arg2 = "i fiksed the chrome zeroks by the cyclical church"; verify_case(0, Arg2, getNewSpelling(Arg0, Arg1)); }<br>  void test_case_1() { int Arg0 = 2; string Arg1 = "i fixed the chrome xerox by the cyclical church"; string Arg2 = "i fiksed the chrome zeroks bi the ciclical church"; verify_case(1, Arg2, getNewSpelling(Arg0, Arg1)); }<br>  void test_case_2() { int Arg0 = 0; string Arg1 = "this is unchanged"; string Arg2 = "this is unchanged"; verify_case(2, Arg2, getNewSpelling(Arg0, Arg1)); }<br>  void test_case_3() { int Arg0 = 7; string Arg1 = "sch kn x xschrx cknnchc cyck xxceci"; string Arg2 = "sk n z zskrks nchk sik zksesi"; verify_case(3, Arg2, getNewSpelling(Arg0, Arg1)); }<br>  void test_case_4() { int Arg0 = 7; string Arg1 = "  concoction   convalescence   cyclical   cello   "; string Arg2 = "  konkoktion   konvalesense   siklikal   selo   "; verify_case(4, Arg2, getNewSpelling(Arg0, Arg1)); }<br>  void test_case_5() { int Arg0 = 7; string Arg1 = ""; string Arg2 = ""; verify_case(5, Arg2, getNewSpelling(Arg0, Arg1)); }<br>  void test_case_6() { int Arg0 = 7; string Arg1 = "cck xzz aaaaa"; string Arg2 = "k z aaaaa"; verify_case(6, Arg2, getNewSpelling(Arg0, Arg1)); }<br> <br>// END CUT HERE<br> <br>};<br> <br>//Forwarded stuff<br> <br>long long gcd(long long a,long long b)<br>{<br>  long long m;<br>  while (b!=0)<br>  {<br>    m=a%b;<br>    a=b;<br>    b=m;<br>  }<br>  return a;<br>}<br>long long lcm(long long a,long long b)<br>{<br>  return a/gcd(a,b)*b;<br>}<br>bool leap(long long x)<br>{<br>  return (((x%4)==0) &amp;&amp; ((x%100)!=0) || ((x%400)==0));<br>}<br>int nrdays(int year,int month)<br>{<br>  switch (month) <br>  {<br>    case 1:return 31;<br>    case 2:if (leap(year)) return 29;<br>    else return 28;<br>    case 3:return 31;<br>    case 4:return 30;<br>    case 5:return 31;<br>    case 6:return 30;<br>    case 7:return 31;<br>    case 8:return 31;<br>    case 9:return 30;<br>    case 10:return 31;<br>    case 11:return 30;<br>    case 12:return 31;<br>    default:return -1;<br>  }<br>}<br>string monthname(int month)<br>{<br>  switch (month) <br>  {<br>    case 0:return "December";<br>    case 1:return "January";<br>    case 2:return "February";<br>    case 3:return "March";<br>    case 4:return "April";<br>    case 5:return "May";<br>    case 6:return "June";<br>    case 7:return "July";<br>    case 8:return "August";<br>    case 9:return "September";<br>    case 10:return "October";<br>    case 11:return "November";<br>    case 12:return "December";<br>    default:return "No";<br>  }<br>}<br>string dayname(int day)<br>{<br>  switch (day) <br>  {<br>    case 0:return "Sunday";<br>    case 1:return "Monday";<br>    case 2:return "Tuesday";<br>    case 3:return "Wednesday";<br>    case 4:return "Thursday";<br>    case 5:return "Friday";<br>    case 6:return "Saturday";<br>    case 7:return "Sunday";<br>    default:return "No";<br>  }<br>}<br>long long fakt(int n)<br>{<br>  return n==0?1:n*fakt(n-1);<br>}<br>long long vari(int n, int k)<br>{<br>  long long c=n-k+1;<br>  int q=n-k+2;<br>  while (q&lt;=n)<br>  {<br>    c*=q;<br>    ++q;<br>  }<br>  return c;<br>}<br>long long komb(int n, int k)<br>{<br>  return vari(n,k)/fakt(k);<br>}<br>long long str2long(string a) <br>{<br>   stringstream ss(a);<br>   long long answer;<br>   ss &gt;&gt; answer;<br>   return answer;<br>}<br>string long2str(long long a) {<br>   stringstream s;<br>   s &lt;&lt; a;<br>   return s.str();<br>}<br>vector&lt;string&gt; split(string str, string delim) <br>{<br>   vector&lt;string&gt; answer;<br>   string temp;<br>   for (int i=0; i &lt; str.length(); ++i) {<br>      bool isDelim=false;<br>      for (int j=0; j &lt; delim.length(); ++j)<br>         if (str[i] == delim[j]) isDelim = true;<br>      if (!isDelim) {<br>         temp += str[i];<br>         continue;<br>      }<br>      if (temp != "") answer.push_back(temp);<br>      temp = "";<br>   }<br>   if (temp != "") answer.push_back(temp);<br>   return answer;<br>}<br> <br>long double det2(<br>long double a1,long double a2,<br>long double b1,long double b2)<br>{<br>  return a1*b2-b1*a2;<br>}<br> <br>long double det3(<br>long double a1,long double a2,long double a3,<br>long double b1,long double b2,long double b3,<br>long double c1,long double c2,long double c3)<br>{<br>  return a1*b2*c3+a3*b1*c2+a2*b3*c1-c1*b2*a3-a2*b1*c3-a1*b3*c2;<br>}<br> <br>long double det4(<br>long double a1,long double a2,long double a3,long double a4,<br>long double b1,long double b2,long double b3,long double b4,<br>long double c1,long double c2,long double c3,long double c4,<br>long double d1,long double d2,long double d3,long double d4)<br>{<br>  return a1*det3(b2,b3,b4,c2,c3,c4,d2,d3,d4)-<br>  a2*det3(b1,b3,b4,c1,c3,c4,d1,d3,d4)+<br>  a3*det3(b1,b2,b4,c1,c2,c4,d1,d2,d4)-<br>  a4*det3(b1,b2,b3,c1,c2,c3,d1,d2,d3);<br>}<br> <br>template &lt;class T&gt; ostream &amp;operator &lt;&lt;(ostream &amp;os, const vector&lt;T&gt; &amp;vec) <br>{<br>   if (vec.empty()) return os&lt;&lt;"[]"&lt;&lt;endl;<br>   os&lt;&lt;'[';<br>   for (int i=0; i &lt; vec.size() - 1; ++i) os&lt;&lt;vec[i]&lt;&lt;',';<br>   return os&lt;&lt;vec[vec.size()-1]&lt;&lt;']'&lt;&lt;endl;<br>}<br> <br>template &lt;class T&gt; ostream &amp;operator &lt;&lt;(ostream &amp;os, const set&lt;T&gt; &amp;st) <br>{<br>   if (st.empty()) return os&lt;&lt;"{}"&lt;&lt;endl;<br>   os&lt;&lt;'{';<br>   for (set&lt;T&gt;::iterator i=st.begin();i!=st.end();++i) <br>   {<br>     if (*i==*st.rbegin()) os&lt;&lt;*i&lt;&lt;'}';<br>     else os&lt;&lt;*i&lt;&lt;',';<br>   }<br>   return os&lt;&lt;endl;<br>}<br> <br>// Powered by PopsEdit<br>// Powered by TZTester 1.01 [25-Feb-2003]<br>// Powered by CodeProcessor<br></td>