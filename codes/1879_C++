<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;iostream&gt;<br>#include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;functional&gt;<br>#include &lt;numeric&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cmath&gt;<br>#include &lt;queue&gt;<br>using namespace std;<br>typedef vector&lt;int&gt; VI;  typedef vector&lt;vector&lt;int&gt; &gt; VVI;<br>typedef vector&lt;string&gt; VS;  typedef vector&lt;vector&lt;string&gt; &gt; VVS;<br>typedef signed long long i64;  typedef unsigned long long u64;<br><br>vector&lt;string&gt; tokenize(string s, string ch) {<br>  vector&lt;string&gt; ret;<br>  for( int p = 0, p2; p &lt; s.size(); p = p2+1 ) {<br>    p2 = s.find_first_of(ch, p);<br>    if( p2 == -1 ) p2 = s.size();<br>    if( p2-p &gt; 0 ) ret.push_back( s.substr(p, p2-p) );<br>  }<br>  return ret;<br>}<br><br>vector&lt;int&gt; tokint(string s, string ch) {<br>  vector&lt;int&gt; ret;<br>  vector&lt;string&gt; p = tokenize(s, ch);<br>  for( int i = 0; i &lt; p.size(); i++ )<br>    ret.push_back( atoi(p[i].c_str()) );<br>  return ret;<br>}<br><br>vector&lt;vector&lt;int&gt; &gt; tokmat(vector&lt;string&gt; s, string ch) {<br>  vector&lt;vector&lt;int&gt; &gt; ret;<br>  for( int i = 0; i &lt; s.size(); i++ )<br>    ret.push_back( tokint(s[i], ch) );<br>  return ret;<br>}<br><br>VVI a;<br>VI dep;<br>int memo[121][1&lt;&lt;12][13];<br>int memo2[121][1&lt;&lt;12];<br>int ret = 500;<br><br>void doit2(int t, int b, int p, int pt);<br>void doit(int t, int b) {<br>//cout &lt;&lt; t &lt;&lt; ' ' &lt;&lt; b &lt;&lt; '\n';<br>  if( b == (1&lt;&lt;a.size())-1 ) {ret &lt;?= t; return;}<br>  if( memo2[t][b] ) return;<br>  memo2[t][b] = 1;<br>  for( int x = 0; x &lt; a.size(); x++ ) if(!(b&amp;(1&lt;&lt;x)) &amp;&amp; (b&amp;dep[x])==dep[x])<br>  for( int y = 0; y &lt; a.size(); y++ ) if(!(b&amp;(1&lt;&lt;y)) &amp;&amp; (b&amp;dep[y])==dep[y]) {<br>    if( x == y ) {<br>      doit(t+a[x][0], b|(1&lt;&lt;x));<br>    } else {<br>      if( a[x][0] &lt;= a[y][0] )<br>        doit2(t+a[x][0], b|(1&lt;&lt;x), y, a[x][0]);<br>      else<br>        doit2(t+a[y][0], b|(1&lt;&lt;y), x, a[y][0]);<br>    }<br>  }<br>}<br><br>void doit2(int t, int b, int p, int pt) {<br>//cout &lt;&lt; t &lt;&lt; ' ' &lt;&lt; b &lt;&lt; ' ' &lt;&lt; p &lt;&lt; ' ' &lt;&lt; pt &lt;&lt; '\n';<br>  if( pt == a[p][0] ) {doit(t, b|(1&lt;&lt;p)); return;}<br>  if( memo[t][b][p] &amp; (1&lt;&lt;pt) ) return;<br>  memo[t][b][p] |= (1&lt;&lt;pt);<br>  for( int x = 0; x &lt; a.size(); x++ ) if(!(b&amp;(1&lt;&lt;x)) &amp;&amp; (b&amp;dep[x])==dep[x]) {<br>    if( x == p ) {<br>      doit(t+a[x][0]-pt, b|(1&lt;&lt;x));<br>    } else {<br>      if( a[x][0] &lt;= a[p][0]-pt )<br>        doit2(t+a[x][0], b|(1&lt;&lt;x), p, pt+a[x][0]);<br>      else<br>        doit2(t+a[p][0]-pt, b|(1&lt;&lt;p), x, a[p][0]-pt);<br>    }<br>  }<br><br>}<br><br>class Scheduling {<br>public:<br>int fastest(vector &lt;string&gt; A) {<br>  a = tokmat(A, ":,");<br>  int i, j, k, x, y, z, n;<br><br>  for( i = 0; i &lt; a.size(); i++ ) {<br>    for( x = 0, j = 1; j &lt; a[i].size(); j++ )<br>      x |= (1&lt;&lt;a[i][j]);<br>    dep.push_back(x);<br>  }<br>  doit(0, 0);<br>  return ret;<br>}<br>};<br></td>