<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>public class Scheduling {<br>  int[][] before;<br>  int[] times;<br>  int mask;<br>  long startedT;<br>  int check = 10000;<br>  boolean bail;<br>  <br>  public int fastest(String[] dag) {<br>    startedT = System.currentTimeMillis();<br>    before = new int[dag.length][];<br>    times = new int[dag.length];<br>    for (int i = 0; i &lt; dag.length; ++i) {<br>      String[] aa = dag[i].split("[:,]");<br>      before[i] = new int[aa.length - 1];<br>      times[i] = Integer.parseInt(aa[0]);<br>      for (int j = 1; j &lt; aa.length; ++j) {<br>        before[i][j-1] = Integer.parseInt(aa[j]);<br>      }<br>    }<br>    mask = (1 &lt;&lt; dag.length) - 1;<br>    return time(0, 0, -1, -1);<br>  }<br>  <br>  Map cache = new HashMap();<br>  <br>  int time(int started, int finished, int parI, int parT) {<br>    String key = started + " " + finished + " " + parI + " " + parT;<br>    Integer oo = (Integer) cache.get(key);<br>    if (oo == null) {<br>      if (check-- == 0) {<br>        long now = System.currentTimeMillis();<br>        if (now - startedT &gt; 7000) {<br>          System.out.println("bailing after " + (now - startedT));<br>          bail = true;<br>        }<br>        check = 10000;<br>      }<br>      if (bail) return 1000;<br>      oo = new Integer(time2(started, finished, parI, parT));<br>      cache.put(key, oo);<br>    }<br>    return oo.intValue();<br>  }<br>  <br>  int time2(int started, int finished, int parI, int parT) {<br>    if (finished == mask) return 0;<br>    <br>    int best = Integer.MAX_VALUE;<br>    if (parI &gt;= 0) {<br>      LOOP: for (int i = 0; i &lt; before.length; ++i) {<br>        if (((started &gt;&gt; i) &amp; 1) != 0) continue;<br>        for (int j = before[i].length - 1; j &gt;= 0; --j) {<br>          if (((finished &gt;&gt; before[i][j]) &amp; 1) == 0) continue LOOP;<br>        }<br>        int j = i;<br>        int bit = 1 &lt;&lt; j;<br>        int finish = times[j];<br>        if (finish &lt; parT) {<br>          best = Math.min(best, finish + time(started | bit, finished | bit, parI, parT - finish));<br>        }<br>        else if (finish == parT) {<br>          best = Math.min(best, finish + time(started | bit, started | bit, -1, -1));<br>        }<br>        else {<br>          best = Math.min(best, parT + time(started | bit, started, j, finish - parT));<br>        }<br>      }<br>      <br>      // consider leaving CPU2 empty<br>      best = Math.min(best, parT + time(started, started, -1, -1));<br>    }<br>    else {<br>      LOOP: for (int i = 0; i &lt; before.length; ++i) {<br>        if (((started &gt;&gt; i) &amp; 1) != 0) continue;<br>        for (int j = before[i].length - 1; j &gt;= 0; --j) {<br>          if (((finished &gt;&gt; before[i][j]) &amp; 1) == 0) continue LOOP;<br>        }<br>        int j = i;<br>        int bit = 1 &lt;&lt; j;<br>        int finish = times[j];<br>        best = Math.min(best, time(started | bit, started, j, finish));        <br>      }<br>    }<br>    return best;<br>  }<br>    <br>  public final static void main(String[] args)<br>  {<br>    try {<br>      validateExample("1", new Scheduling().fastest(new String[] {"3:","2:","4:","7:0,1,2"}), 12, "fastest(new String[] {\"3:\",\"2:\",\"4:\",\"7:0,1,2\"})");<br>      validateExample("2", new Scheduling().fastest(new String[] {"9:","8:","6:","4:","7:","7:0,1,2,3,4","3:2,3"}), 24, "fastest(new String[] {\"9:\",\"8:\",\"6:\",\"4:\",\"7:\",\"7:0,1,2,3,4\",\"3:2,3\"})");<br>      validateExample("3", new Scheduling().fastest(new String[] { "10:", "5:", "5:1", "5:1", "5:2,3" }), 20, "fastest(new String[] { \"10:\", \"5:\", \"5:1\", \"5:1\", \"5:2,3\" })");<br>      validateExample("4", new Scheduling().fastest(new String[] {"1:","2:","4:","8:","6:","3:","7:","5:","9:","5:","10:","3:"}), 32, "fastest(new String[] {\"1:\",\"2:\",\"4:\",\"8:\",\"6:\",\"3:\",\"7:\",\"5:\",\"9:\",\"5:\",\"10:\",\"3:\"})");<br>    } catch (Exception e) {<br>      System.out.println(e);<br>      e.printStackTrace(System.out);<br>    }<br>  }<br> <br>  private static void validateExample(String exampleNum, int returned, int expected, String methodInvocation) {<br>    print(exampleNum);<br>    print("  ");<br>    if (!eq(returned,expected)) {<br>      print("FAIL");<br>    } else {<br>      print("SUCCESS");<br>    }<br>    print(" ");  <br>    print(methodInvocation);<br>    print("\tGot:[");<br>    print(returned);<br>    print("]\t");<br>    print("Expected:[");<br>    print(expected);<br>    print("]");<br>    print("\n");<br>  }<br> <br>  public static void print(boolean a) {<br>    System.out.print(a);<br>  }<br> <br>  public static void print(long a) {<br>    System.out.print(a);<br>  }<br> <br>  public static void print(int a) {<br>    System.out.print(a);<br>  }<br> <br>  public static void print(char a) {<br>    System.out.print(a);<br>  }<br> <br>  public static void print(String a) {<br>    System.out.print(a);<br>  }<br> <br>  public static void print(int[] a) {<br>    if (a==null) {System.out.print("null"); return;} <br>    for (int i=0; i&lt;a.length; i++) System.out.print(a[i]+(i&lt;a.length-1?",":"")); <br>  }<br> <br>  public static void print(int[][] a) {<br>    if (a==null) {System.out.print("null"); return;} <br>    for (int i=0; i&lt;a.length; i++) { print(a[i]); print("\n"); }<br>  }<br> <br>  public static void print(String[] a) {<br>    if (a==null) {System.out.print("null"); return;} <br>    for (int i=0; i&lt;a.length; i++) System.out.print(a[i]+(i&lt;a.length-1?",":"")); <br>  }<br> <br>  public static boolean eq(boolean a, boolean b) {<br>    return a==b;<br>  }<br> <br>  public static boolean eq(long a, long b) {<br>    return a==b;<br>  }<br> <br>  public static boolean eq(int a, int b) {<br>    return a==b;<br>  }<br> <br>  public static boolean eq(char a, char b) {<br>    return a==b;<br>  }<br> <br>  public static boolean eq(String a, String b) {<br>    return a.equals(b);<br>  }<br> <br>  public static boolean eq(int[] a, int[] b) { return Arrays.equals(a,b); }<br>  public static boolean eq(String[] a, String[] b) { return Arrays.equals(a,b); }<br> <br>}<br>// Powered by CodeProcessor<br></td>