<td class="problemText" colspan="8" valign="middle" align="left">
            //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^<br>//  Olorin.invoke(Dijkstra.spirit(), Hoare.spirit() );<br>//^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^<br>//<br>//  **  **  **<br>//  **  **  **<br>//  ** **  **<br>//  ****  **<br>//  ***  **<br>//  **  **<br>//  ** **<br>//  ****<br>//  **<br>//  **<br>//  **<br>//  ** Olorin's Black Book of Dirty Code(TM)<br>//^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^<br>#include &lt;iostream&gt;<br>#include &lt;cmath&gt;<br>#include &lt;climits&gt;<br>#include &lt;float.h&gt;<br>#include &lt;string&gt;<br>#include &lt;sstream&gt;<br>#include &lt;vector&gt;<br>#include &lt;algorithm&gt;<br>using namespace std;<br> <br>typedef long double      ld;<br>typedef long long      i64;<br>typedef vector&lt;int&gt;::iterator    vit;<br>typedef vector&lt;string&gt;::iterator  vis;<br> <br>const int  MAX     = 50;<br>const ld  EPSILON  = 0.000000000001;<br> <br>template&lt;class T&gt; T ABS(const T&amp; x)  { return (x&gt;0? x: -x); }<br> <br>bool ldEqual(ld a, ld b)  { return (ABS(a-b)&lt;EPSILON); }<br>bool ldLess(ld a, ld b)    { return (a-b&lt;-EPSILON); }<br> <br> <br>/*<br>N items =&gt; N*(N-1)/2 unordered pairs<br>LowestCommonMultiple (a, b): a/gcd(a, b)*b;<br>*/<br>//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++<br>//++  Main Class                                                     ++<br>//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++<br>class Workshop<br>{<br>public:<br>int pictureFrames(vector &lt;int&gt; in)<br>{<br>  int ins = in.size();<br>  int tot = 0;<br>  for(int a=0; a&lt;(ins-2); a++)<br>  for(int b=(a+1); b&lt;(ins-1); b++)<br>  for(int c=(b+1); c&lt;ins; c++)<br>  {<br>  if(Possible(in[a], in[b], in[c]))  tot++;<br>  }//FOR x3<br>  return tot;<br>}<br>//End<br> <br> <br>private:<br>//^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^<br> <br>bool Possible(int a, int b, int c)<br>{<br>  int ab = a+b;<br>  if(ab&lt;=c)  return false;<br>  int ac = a+c;<br>  if(ac&lt;=b)  return false;<br>  int bc = b+c;<br>  if(bc&lt;=a)  return false;<br>  return true;<br>}<br>//End Possible<br> <br> <br>//^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^<br>//  itos:<br>//^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^<br>string itos(int x)<br>{<br>  if(x==0)  return "0";<br>  bool negative=false;<br>  if(x&lt;0)<br>  { negative=true; x*=-1; }<br>  string t;<br>  while(true)<br>  {<br>    t+=(char)((x%10)+'0');<br>    if(x&lt;10)  break;<br>    x/=10;<br>  }//WEND<br>  string r;<br>  if(negative)  r+='-';<br>  for(int i=t.size()-1; i&gt;=0; i--)<br>    r+=t[i];<br>  return r;<br>}<br>//End itos<br>//^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^<br> <br>//^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^<br>//  inBase:<br>//  returns the string representation of the decimal x<br>//  converted to base B.<br>//^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^<br>string inBase(int x, int B)<br>{<br>  bool neg=false;<br>  if(x&lt;0)  { neg=true; x*=-1; }<br>  string t="";<br>  while(true)<br>  {<br>  int k = x%B;<br>  switch(k)<br>  {<br>  case 10:  t+="A";  break;<br>  case 11:  t+="B";  break;<br>  case 12:  t+="C";  break;<br>  case 13:  t+="D";  break;<br>  case 14:  t+="E";  break;<br>  case 15:  t+="F";  break;<br>  default:  t+=(char)(k+'0');  break;<br>  }//SWITCH<br>  if(x&lt;B)  break;<br>  x/=B;<br>  }//WEND<br>  string r="";<br>  if(neg) r+="-";<br> <br>  for(int i=t.size()-1; i&gt;=0; i--)  r+=t[i];<br>  return r;<br>}<br>//End inBase<br>//^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^<br> <br>//^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^<br>//  GCD:<br>//^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^<br>int GCD(int a, int b)<br>{<br>  int n;<br>  a= abs(a);<br>  b= abs(b);<br>  while(b)<br>  {<br>  n=b;<br>  b=a%b;<br>  a=n;<br>  }//WEND<br>  return a;<br>}<br>//End GCD<br>//^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^<br> <br>string itobs(int x, int w)<br>{<br>  string t;<br>  while(true)<br>  {<br>  if(x==0) { t+="0"; break; }<br>  if(x==1) { t+="1"; break; }<br> <br>  t+=(char)((x%2)+'0');<br>  x/=2;<br>  }//WEND<br>  string r;<br>  for(int i=t.size()-1; i&gt;=0; i--)<br>  r+=t[i];<br>  int diff=(w-r.size());<br>  if(diff&gt;0)<br>  {<br>  string f;<br>  for(int j=0; j&lt;diff; j++)<br>    f+='0';<br>  f+=r;<br>  r=f;<br>  }//IF<br>  return r;<br>}<br>//*********************************************<br>//End itobs<br>//*********************************************<br> <br>int bstoi(string in)<br>{<br>  int r=0;<br>  int p = 0;<br>  for(int i=in.size()-1; i&gt;=0; i--)<br>  {<br>  if(in[i]=='1') r+=(int)( pow(2.0, p) );<br>  p++;<br>  }//FOR<br>  return r;<br>}<br>//*********************************************<br>//End bstoi<br>//*********************************************<br> <br> <br>};<br>//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++<br>//++  End Main Class                                                 ++<br>//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++<br> <br>//^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^<br>//  EOF<br>//  "There is poetry in overloading"<br>//  Olorin.finalize();<br>//^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^<br></td>