<td class="problemText" colspan="8" valign="middle" align="left">
            using namespace std;<br><br>#include &lt;stdlib.h&gt;<br>#include &lt;stdio.h&gt;<br>#include &lt;iostream&gt;<br>#include &lt;string&gt;<br>#include &lt;string.h&gt;<br>#include &lt;sstream&gt;<br>#include &lt;ctype.h&gt;<br>#include &lt;math.h&gt;<br>#include &lt;vector&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;queue&gt;<br>#include &lt;set&gt;<br>#include &lt;map&gt;<br><br>#define VI vector &lt;int&gt;<br>#define VVI vector &lt; vector &lt;int&gt; &gt;<br>#define VS vector &lt;string&gt;<br>#define LL long long<br>#define ISS istringstream<br>#define VLL vector &lt;LL&gt;<br>#define VVLL vector &lt;VLL &gt;<br><br>const int dx[8] = { 1, 1, 0,-1,-1,-1, 0, 1 };<br>const int dy[8] = { 0, 1, 1, 1, 0,-1,-1,-1 };<br><br>struct edge { int fr,to,len; };<br><br>int operator &lt; (edge a, edge b) {<br><br>  if (a.fr != b.fr) return a.fr&lt;b.fr;<br>  if (a.to != b.to) return a.to&lt;b.to;<br>  return a.len&lt;b.len;<br>}<br><br>string tostring (int a) {<br><br>  char s[20];<br>  sprintf (s,"%i",a);<br>  return s;<br>}<br><br>class BitmapToGraph {<br>  public:<br>  vector &lt;string&gt; parse(vector &lt;string&gt; b2) {<br><br>    int x,y,d,i,N=0;<br><br>    VS b (b2.size()+2, string(b2[0].size()+2, '.'));<br><br>    for (y=0; y&lt;b2.size(); y++) b[y+1]="."+b2[y]+".";<br><br>    int Y=b.size(), X=b[0].size();<br>    <br>    VVI num(Y, VI(X,-1));<br>    for (y=0; y&lt;Y; y++)<br>      for (x=0; x&lt;X; x++)<br>        if (b[y][x] == 'N') num[y][x] = N++;<br><br>    vector &lt;edge&gt; e;    <br>    <br>    for (y=0; y&lt;Y; y++)<br>      for (x=0; x&lt;X; x++)<br>        if (b[y][x] == 'N')<br>          for (d=0; d&lt;8; d++) {<br>            int nd=d, len=0;<br>            int nx=x+dx[d], ny=y+dy[d];<br><br>            if (b[ny][nx] == 'E') {<br>              <br>              while (b[ny][nx] != 'N') {<br>                if (b[ny+dy[nd]][nx+dx[nd]] != '.') {<br>                  nx=nx+dx[nd]; ny=ny+dy[nd];<br>                }<br>                else {<br>                  if (b[ny+dy[(nd+1)%8]][nx+dx[(nd+1)%8]] != '.') {<br>                    nd=(nd+1)%8;<br>                    nx=nx+dx[nd]; ny=ny+dy[nd];<br>                  }<br>                  else if (b[ny+dy[(nd+7)%8]][nx+dx[(nd+7)%8]] != '.') {<br>                    nd=(nd+7)%8;<br>                    nx=nx+dx[nd]; ny=ny+dy[nd];<br>                  }<br>                  else <br>                    return VS(1,"ERROR");<br>                }<br>                len++;<br>              }<br><br>              e.push_back ( (edge) { num[y][x] , num[ny][nx], len } );<br>            }<br>          }<br><br>  <br>    sort (e.begin(), e.end());<br>    VS res(N,"");<br>    <br>    for (i=0; i&lt;e.size(); i++) {<br>      if (res[e[i].fr] != "") res[e[i].fr] += ",";<br>      res[e[i].fr] += tostring(e[i].to) + ":" + tostring(e[i].len);<br><br>      if (e[i].fr == e[i].to) i++;<br>    }<br>    <br>    return res;    <br><br>  }<br>};<br><br><br>// Powered by FileEdit<br></td>