<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>public class BitmapToGraph {<br>  <br>  int[] dx = {-1, -1, -1, 0, 1, 1, 1, 0};<br>  int[] dy = {-1, 0, 1, 1, 1, 0, -1, -1};<br>  int m, n;<br>  String[] s;<br>  <br>  public char safelookup(int x, int y) {<br>    if (x &lt; 0 || y &lt; 0 || x &gt;= m || y &gt;= n) return ' '; else return s[x].charAt(y);<br>  }<br>  <br>  public String[] parse(String[] bitmap) {<br>    s = bitmap;<br>    int[][] lookup = new int[bitmap.length][bitmap[0].length()];<br>    n = bitmap[0].length();<br>    m = bitmap.length;<br>    int nodes=0;<br>    for (int i=0; i&lt;m; i++) for (int j=0; j&lt;n; j++) <br>    if (bitmap[i].charAt(j) == 'N') lookup[i][j] = nodes++;<br>    String[] result = new String[nodes];<br>    nodes = 0;<br>    for (int i=0; i&lt;m; i++) for (int j=0; j&lt;n; j++) <br>    if (bitmap[i].charAt(j) == 'N') {<br>      result[nodes] = "";<br>      TreeSet edges = new TreeSet();<br>      for (int d0 = 0; d0 &lt; 8; d0++)<br>      if (safelookup(i+dx[d0], j+dy[d0])=='E')<br>      {<br>        int d = d0;<br>        int px = i+dx[d];<br>        int py = j+dy[d];<br>        int count = 1;<br>        int r=0;<br>        boolean boo = true;<br>        while (boo)<br>        {<br>          if (safelookup(px+dx[d], py+dy[d])=='E')<br>          { px += dx[d]; py += dy[d]; count++; }<br>          else if (safelookup(px+dx[d], py+dy[d])=='N')<br>          { px += dx[d]; py += dy[d]; boo=false;}<br>          else if (safelookup(px+dx[(d+1)%8], py+dy[(d+1)%8])=='E')<br>          { d = (d+1)%8; px += dx[d]; py += dy[d]; count++; }<br>          else if (safelookup(px+dx[(d+7)%8], py+dy[(d+7)%8])=='E')<br>          { d = (d+7)%8; px += dx[d]; py += dy[d]; count++; }<br>          else if (safelookup(px+dx[(d+1)%8], py+dy[(d+1)%8])=='N')<br>          { d = (d+1)%8; px += dx[d]; py += dy[d]; boo=false; }<br>          else if (safelookup(px+dx[(d+7)%8], py+dy[(d+7)%8])=='N')<br>          { d = (d+7)%8; px += dx[d]; py += dy[d]; boo=false; }<br>          else return new String[0];<br>        }<br>        edges.add(new Integer(lookup[px][py]*80000 + count*8+d0));<br> <br>      }<br>      Iterator q = edges.iterator();<br>      boolean blah = false;<br>      while (q.hasNext())<br>      {<br>        int z = ((Integer)q.next()).intValue(); <br>        int index = z/80000;<br>        int lengt = (z%80000)/8;<br>        if (index==nodes) q.next();<br>        if (blah) result[nodes] += ',';<br>        result[nodes] += index+":"+lengt;<br>        blah = true;<br>      }<br>      nodes++;<br>      <br>    }<br>    return result;<br>  }<br>}<br> <br>// Powered by PopsEdit<br></td>