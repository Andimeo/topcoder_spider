<td class="problemText" colspan="8" valign="middle" align="left">
            using System; using System.Collections; public class AvoidRoads {<br>public long numWays(int X, int Y, string[] bad) {<br>long[,] res = new long[X+1,Y+1];<br>int N=bad.Length;<br>int[,] b = new int[N,4];<br>for (int i=0; i&lt;N; i++)<br> {<br> string[] ss = bad[i].Split();<br> b[i,0] = Convert.ToInt32(ss[0]);<br> b[i,1] = Convert.ToInt32(ss[1]);<br> b[i,2] = Convert.ToInt32(ss[2]);<br> b[i,3] = Convert.ToInt32(ss[3]);<br> }<br> <br>for (int y=Y; y&gt;=0; y--) for (int x=X; x&gt;=0; x--)<br> if (x==X&amp;&amp;y==Y) res[x,y]=1;<br> else<br>  {<br>  if (x&lt;X &amp;&amp; OK(x,y,x+1,y,N,b)) res[x,y] += res[x+1,y];<br>  if (y&lt;Y &amp;&amp; OK(x,y,x,y+1,N,b)) res[x,y] += res[x,y+1];<br>  }<br> <br>return res[0,0];<br>}<br> <br>bool OK(int x, int y, int a, int b, int N, int[,] B)<br>{<br>for (int i=0; i&lt;N; i++)<br> {<br> if (x==B[i,0] &amp;&amp; y==B[i,1] &amp;&amp; a==B[i,2] &amp;&amp; b==B[i,3]) return false;<br> if (a==B[i,0] &amp;&amp; b==B[i,1] &amp;&amp; x==B[i,2] &amp;&amp; y==B[i,3]) return false;<br> }<br>return true;<br>}<br> <br>int[] IA(ArrayList a) { return (int[]) a.ToArray(typeof(int)); }<br>string[] SA(ArrayList a) { return (string[]) a.ToArray(typeof(string)); }<br> <br>ArrayList AR { get { return new ArrayList(); }}<br>Hashtable MAP { get { return new Hashtable(); }}<br> <br>long GCD(long x, long y) { while (y != 0) {long t=x; x=y; y=t%y;} return x; <br>}<br> <br>int Flood(char[,] g, int sx, int sy, char expect, char fill, int[] xs, int[] <br>ys)<br>{<br>int X = g.GetLength(0), Y=g.GetLength(1), todo=1;<br>xs[0]=sx; ys[0]=sy; g[sx,sy]=fill;<br>for (int done=0; done&lt;todo; done++) for (int dir=0; dir&lt;4; dir++)<br> {<br> int x = xs[done]+dxy[dir], y=ys[done]+dxy[dir+1];<br> if (x&gt;=0 &amp;&amp; y&gt;=0 &amp;&amp; x&lt;X &amp;&amp; y&lt;Y &amp;&amp; g[x,y]==expect)<br>  { g[x,y]=fill; xs[todo]=x; ys[todo++]=y; }<br> }<br>return todo;<br>}<br> <br>int[] dxy = new int[9]{1,0,-1,0,1,1,-1,-1,1};<br> <br>bool NextPerm(int[] x)<br>{<br>int N=x.Length;<br>for (int i=N-2; i&gt;=0; i--)<br> if (x[i] &lt; x[i+1])<br>  {<br>  Array.Reverse(x, i+1, N-i-1);<br>  for (int j=i+1; ; j++)<br>   if (x[j] &gt; x[i]) { int t=x[i]; x[i]=x[j]; x[j]=t; return true; }<br>  }<br>return false;<br>}<br> <br>int Compare(IEnumerable a, IEnumerable b)<br>{<br>IEnumerator A = a.GetEnumerator(); IEnumerator B = b.GetEnumerator();<br>while (true)<br> {<br> int del = (A.MoveNext() ? 100 : 0) - (B.MoveNext() ? 99 : 0);<br> if (del != 1) return del;<br> del = ((IComparable)A.Current).CompareTo(B.Current);<br> if (del != 0) return del;<br> }<br>}<br> <br>char[,] ToCharArray(string[] s)<br>{<br>if (s.Length == 0) return new char[0,0];<br>int X = s[0].Length, Y=s.Length;<br>char[,] g = new char[X,Y];<br>for (int x=0; x&lt;X; x++) for (int y=0; y&lt;Y; y++) g[x,y] = s[y][x];<br>return g;<br>}<br> <br>static void WR(Object f, params Object[] p) { Console.Write(f.ToString(), <br>p); }<br>static void WL(Object f, params Object[] p) { <br>Console.WriteLine(f.ToString(), p); }<br>static void WL() { WL(""); }<br>static void WS(params Object[] a) { foreach (Object x in a) <br>WR(x.ToString()+" "); }<br>static void WS(Array a, int X) { for (int x=0; x&lt;X; x++) WS(a.GetValue(x)); <br>WL(); }<br>static void WS(Array a, int X, int Y) { for (int y=0; y&lt;Y; y++) {for (int <br>x=0; x&lt;X; x++) WS(a.GetValue(x,y)); WL();} }<br> <br>static void Match(String lbl, Object x, Object y) { if (!x.Equals(y)) throw <br>new Exception(String.Format("{0}: expected [{1}], got [{2}]", lbl, x, y)); }<br>static void Match(ICollection A, ICollection B)<br>{<br>Match("Count", A.Count, B.Count);<br>int i=0; ArrayList bb = new ArrayList(B);<br>foreach (Object x in A) { Match(i.ToString(), x, bb[i]); i++; }<br>}<br> <br>}<br></td>