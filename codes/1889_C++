<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;algorithm&gt;<br>using namespace std;<br> <br>vector&lt; string &gt; tokenize( string a, string b ) {<br>  const char *q = a.c_str();<br>  while( count( b.begin(), b.end(), *q ) ) {<br>    q++;<br>  }<br>  vector&lt; string &gt; oot;<br>  while( *q ) {<br>    const char *e = q;<br>    while( *e &amp;&amp; !count( b.begin(), b.end(), *e ) ) {<br>      e++;<br>    }<br>    oot.push_back( string( q, e ) );<br>    q = e;<br>    while( count( b.begin(), b.end(), *q ) ) {<br>      q++;<br>    }<br>  }<br>  return oot;<br>}<br> <br>vector&lt; int &gt; sti( const vector&lt; string &gt; &amp;a ) {<br>  vector&lt; int &gt; oot;<br>  for( int i = 0; i &lt; a.size(); i++ ) {<br>    oot.push_back( atoi( a[ i ].c_str() ) );<br>  }<br>  return oot;<br>}<br> <br>int gcd( int a, int b ) {<br>  if( !b ) return a;<br>  return gcd( b, a % b );<br>}<br> <br>int ncr[ 51 ][ 51 ];<br> <br>void ncrg() {<br>  memset( ncr, 0, sizeof( ncr ) );<br>  for( int i = 0; i &lt; 51; i++ ) {<br>    ncr[ i ][ 0 ] = 1;<br>  }<br>  for( int i = 1; i &lt; 51; i++ ) {<br>    for( int j = 1; j &lt; 51; j++ ) {<br>      int targ = ncr[ i - 1 ][ j ] + ncr[ i - 1 ][ j - 1 ];<br>      if( ncr[ i - 1 ][ j ] == -1 || targ &lt; ncr[ i - 1 ][ j ] ) {<br>        ncr[ i ][ j ] = -1;<br>      } else {<br>        ncr[ i ][ j ] = targ;<br>      }<br>    }<br>  }<br>};<br> <br>struct tt { };<br>tt zz;<br> <br>tt &amp;operator,( tt &amp;x, tt &amp;y ) {<br>  printf( "\n" );<br>  y=y;<br>  return x;<br>}<br> <br>tt &amp;operator,( tt &amp;x, const string &amp;y ) {<br>  printf( "\"%s\"", y.c_str() );<br>  return x;<br>}<br> <br>tt &amp;operator,( tt &amp;x, int y ) {<br>  printf( "%d", y );<br>  return x;<br>}<br> <br>tt &amp;operator,( tt &amp;x, double y ) {<br>  printf( "%lf", y );<br>  return x;<br>}<br> <br>template&lt; typename q, typename z &gt;<br>tt &amp;operator,( tt &amp;x, const pair&lt; q, z &gt; &amp;y ) {<br>  printf( "( " );<br>  x,y.first;<br>  printf( ", " );<br>  x,y.second;<br>  printf( " )" );<br>  return x;<br>}<br> <br>template&lt; typename q &gt;<br>tt &amp;operator,( tt &amp;x, const vector&lt; q &gt; &amp;y ) {<br>  printf( "{ " );<br>  for( int i = 0; i &lt; y.size(); i++ ) {<br>    if( i ) {<br>      printf( ", " );<br>    }<br>    x,y[ i ];<br>  }    <br>  printf( " }" );<br>  return x;<br>}<br> <br>/*<br>template&lt; typename q &gt;<br>tt &amp;operator,( tt &amp;x, const set&lt; q &gt; &amp;y ) {<br>  printf( "{ " );<br>  for( set&lt; q &gt;::const_iterator itr = y.begin(); itr != y.end(); itr++ ) {<br>    if( itr != y.begin() ) {<br>      printf( ", " );<br>    }<br>    x,*itr;<br>  }    <br>  printf( " }" );<br>  return x;<br>}<br> <br>template&lt; typename q, typename z &gt;<br>tt &amp;operator,( tt &amp;x, const map&lt; q, z &gt; &amp;y ) {<br>  printf( "{ " );<br>  for( map&lt; q, z &gt;::const_iterator itr = y.begin(); itr != y.end(); itr++ ) {<br>    if( itr != y.begin() ) {<br>      printf( ", " );<br>    }<br>    x,*itr;<br>  }    <br>  printf( " }" );<br>  return x;<br>}<br>*/<br> <br>typedef long long i64;<br> <br>i64 ans[ 102 ][ 102 ];<br> <br>int dx[] = { 1, 0 };<br>int dy[] = { 0, 1 };<br> <br>class AvoidRoads {<br>  public:<br>  long long numWays(int width, int height, vector &lt;string&gt; bad) {<br>    ans[ 0 ][ 0 ] = 1;<br>    set&lt; pair&lt; pair&lt; int, int &gt;, pair&lt; int, int &gt; &gt; &gt; nt;<br>    for( int i = 0; i &lt; bad.size(); i++ ) {<br>      vector&lt; int &gt; st = sti( tokenize( bad[ i ], " " ) );<br>      nt.insert( make_pair( make_pair( st[ 0 ], st[ 1 ] ), make_pair( st[ 2 ], st[ 3 ] ) ) );<br>      nt.insert( make_pair( make_pair( st[ 2 ], st[ 3 ] ), make_pair( st[ 0 ], st[ 1 ] ) ) );<br>    }<br>    for( int x = 0; x &lt;= width; x++ ) {<br>      for( int y = 0; y &lt;= height; y++ ) {<br>        for( int k = 0; k &lt; 2; k++ ) {<br>          int tx = x + dx[ k ];<br>          int ty = y + dy[ k ];<br>          if( !nt.count( make_pair( make_pair( x, y ), make_pair( tx, ty ) ) ) ) {<br>            ans[ tx ][ ty ] += ans[ x ][ y ];<br>          }<br>        }<br>      }<br>    }<br>    return ans[ width ][ height ];<br>  }<br>};<br> <br>// Powered by PopsEdit<br></td>