<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>public class WaterPressure {<br>  public int howLong(String[] layout) {<br>    char[][] dd = new char[layout.length][];<br>    char[][] prev = new char[layout.length][];<br>    for (int i = 0; i &lt; dd.length; ++i) {<br>      dd[i] = layout[i].toCharArray();<br>      prev[i] = layout[i].toCharArray();<br>    }<br>    int water = 0;<br>    int vol = 1;<br>    for (int time = 0; ; ++time) {<br>      ++water;<br>      <br>      for (int i = 0; i &lt; dd.length; ++i) {<br>        System.arraycopy(dd[i], 0, prev[i], 0, dd[0].length);<br>      }<br>      <br>      boolean done = true;<br>      boolean change = false;<br>      int pres = water / vol;<br>      for (int r = 0; r &lt; prev.length; ++r) {<br>        for (int c = 0; c &lt; prev[0].length; ++c) {<br>          if (prev[r][c] == '.') continue;<br>          if (prev[r][c] == 'X') continue;<br>          <br>          boolean okay = false;<br>          if (r &gt; 0 &amp;&amp; prev[r-1][c] == '.') okay = true;<br>          else if (r &lt; prev.length - 1 &amp;&amp; prev[r+1][c] == '.') okay = true;<br>          else if (c &gt; 0 &amp;&amp; prev[r][c-1] == '.') okay = true;<br>          else if (c &lt; prev[0].length - 1 &amp;&amp; prev[r][c+1] == '.') okay = true;<br>          if (!okay) {<br>            done = false;<br>            continue;<br>          }<br>          <br>          int str = prev[r][c] - '0';<br>          if (str &gt; pres) {<br>            done = false;<br>            continue;<br>          }<br>          <br>          dd[r][c] = '.';<br>          ++vol;<br>          change = true;<br>        }<br>      }<br>      if (done) return time;<br>      if (!change &amp;&amp; pres &gt;= 9) return -1;<br>    }<br>  }<br>  public final static void main(String[] args)<br>  {<br>    try {<br>      validateExample("1", new WaterPressure().howLong(new String[] { ".0", "0X"}), 0, "howLong(new String[] { \".0\", \"0X\"})");<br>      validateExample("2", new WaterPressure().howLong(new String[] { ".0", "00"}), 1, "howLong(new String[] { \".0\", \"00\"})");<br>      validateExample("3", new WaterPressure().howLong(new String[] { ".5", "44"}), 14, "howLong(new String[] { \".5\", \"44\"})");<br>      validateExample("4", new WaterPressure().howLong(new String[] {".23456789"}), 71, "howLong(new String[] {\".23456789\"})");<br>      validateExample("5", new WaterPressure().howLong(new String[] { ".X0", "X00"}), -1, "howLong(new String[] { \".X0\", \"X00\"})");<br>      validateExample("6", new WaterPressure().howLong(new String[] { ".85773817518159249980260123498780838839X6384717463", "242194445126058X5X93973323184X3X2747X842171X286218", "598X67822897X5X61920060240170X31256497102692827551", "54X36408X2548801X136636X63X9233X5949346X2274580162", "5108021354X77X4477509918743895XXX159760734682X9115", "50675439X0922X79916947371X01901217614357X0397201X3", "27186118593416001273104X29X76977141883369859598888", "80914X110594111X436841522027X668157791200228638293", "940105447111X78X25011577574123524X04XXX51614492051", "8804363635177X8246382862576X601870X74X139993345821", "X48877009143171494700XX3X16138573259477742520850X9", "1612588394913980186365912312794180464979928X986475", "595353627322252222412X883094875X522435782213598237", "17391130462739808923430X258255508957X4539278411137", "161196X087X1959308152303433460329X6588920868810551", "5X05897317154867X286045721X246725361349XX31742455X", "X6356984801056259X735653998127X568670314628X485224", "9320088X74859675156365X779X1X326767X79844419358X2X", "501055497X39933X951356690965X4X0844917186293X57985", "33413302X1903266448066612423X8038586XX5638903X7517", "2976X251488X07X87464805678010167X32X54795816434863", "18X8XX869283086X940798825X85739462998X3X3834428505", "2555044879X7309586526260751345349591446476X7010X13", "3233684019X20X770513442033X6950060849326X814045XX1", "7378853595549545X9334157X55988471X21X3295375894550", "7X9037779323X31807337002826035684828290777975X01X4", "88X7X979X7X39506209854X7415XX8999X2253016X25035787", "7683015X17268X16694392X6X101441658747937X198485622", "1624X697868860600X030X577356X121482831384673XX7334", "4662712538X13X4168850436576272047034855X5933218977", "363X88X712383950892X775895613479X5287X01182X614158", "0944515500373672425X6066X2108X3247524582717066X178", "637664873632165059897471275828595X6527260271X84X40", "305512X0X86260235207058X57705027964497905850617962", "935138076111582XX0369X62229X178X921961753325422758", "9987594X029815548549X858304X3181752985X5927X716348", "631347X74X23510X703201850X965X8803X5794257X7X32012", "597X2244071123X41X44196191328874040522673675346X00", "9501X65935X9375252X55199X261467XXX8118871789524X62", "732087503876417410X23X95740041509X58104X7543083124", "175978X56605686460653815X08585X89XX137855313405573", "51593131735080324921X2253417397314274XX231X5293926", "XX778362173333574X333953005142250501X79X21757X1264", "57350X7252505123850942501148X63526X106805090642546", "2331X884X085X068X18X612328531670865X09525594XX98X6", "6935X60327121102150643X49857600X77316813X362130791", "331X29776535751774789772426596X1961969905180339X10", "358X6622772195016X79558982X1024678439091439835013X", "305362575995391477X2744272460098891730534152558XX1", "28318306546365480X775289935065X4X48610794894231736"}), 18566, "howLong(new String[] { \".85773817518159249980260123498780838839X6384717463\", \"242194445126058X5X93973323184X3X2747X842171X286218\", \"598X67822897X5X61920060240170X31256497102692827551\", \"54X36408X2548801X136636X63X9233X5949346X2274580162\", \"5108021354X77X4477509918743895XXX159760734682X9115\", \"50675439X0922X79916947371X01901217614357X0397201X3\", \"27186118593416001273104X29X76977141883369859598888\", \"80914X110594111X436841522027X668157791200228638293\", \"940105447111X78X25011577574123524X04XXX51614492051\", \"8804363635177X8246382862576X601870X74X139993345821\", \"X48877009143171494700XX3X16138573259477742520850X9\", \"1612588394913980186365912312794180464979928X986475\", \"595353627322252222412X883094875X522435782213598237\", \"17391130462739808923430X258255508957X4539278411137\", \"161196X087X1959308152303433460329X6588920868810551\", \"5X05897317154867X286045721X246725361349XX31742455X\", \"X6356984801056259X735653998127X568670314628X485224\", \"9320088X74859675156365X779X1X326767X79844419358X2X\", \"501055497X39933X951356690965X4X0844917186293X57985\", \"33413302X1903266448066612423X8038586XX5638903X7517\", \"2976X251488X07X87464805678010167X32X54795816434863\", \"18X8XX869283086X940798825X85739462998X3X3834428505\", \"2555044879X7309586526260751345349591446476X7010X13\", \"3233684019X20X770513442033X6950060849326X814045XX1\", \"7378853595549545X9334157X55988471X21X3295375894550\", \"7X9037779323X31807337002826035684828290777975X01X4\", \"88X7X979X7X39506209854X7415XX8999X2253016X25035787\", \"7683015X17268X16694392X6X101441658747937X198485622\", \"1624X697868860600X030X577356X121482831384673XX7334\", \"4662712538X13X4168850436576272047034855X5933218977\", \"363X88X712383950892X775895613479X5287X01182X614158\", \"0944515500373672425X6066X2108X3247524582717066X178\", \"637664873632165059897471275828595X6527260271X84X40\", \"305512X0X86260235207058X57705027964497905850617962\", \"935138076111582XX0369X62229X178X921961753325422758\", \"9987594X029815548549X858304X3181752985X5927X716348\", \"631347X74X23510X703201850X965X8803X5794257X7X32012\", \"597X2244071123X41X44196191328874040522673675346X00\", \"9501X65935X9375252X55199X261467XXX8118871789524X62\", \"732087503876417410X23X95740041509X58104X7543083124\", \"175978X56605686460653815X08585X89XX137855313405573\", \"51593131735080324921X2253417397314274XX231X5293926\", \"XX778362173333574X333953005142250501X79X21757X1264\", \"57350X7252505123850942501148X63526X106805090642546\", \"2331X884X085X068X18X612328531670865X09525594XX98X6\", \"6935X60327121102150643X49857600X77316813X362130791\", \"331X29776535751774789772426596X1961969905180339X10\", \"358X6622772195016X79558982X1024678439091439835013X\", \"305362575995391477X2744272460098891730534152558XX1\", \"28318306546365480X775289935065X4X48610794894231736\"})");<br>    } catch (Exception e) {<br>      System.out.println(e);<br>      e.printStackTrace(System.out);<br>    }<br>  }<br> <br>  private static void validateExample(String exampleNum, int returned, int expected, String methodInvocation) {<br>    print(exampleNum);<br>    print("  ");<br>    if (!eq(returned,expected)) {<br>      print("FAIL");<br>    } else {<br>      print("SUCCESS");<br>    }<br>    print(" ");  <br>    print(methodInvocation);<br>    print("\tGot:[");<br>    print(returned);<br>    print("]\t");<br>    print("Expected:[");<br>    print(expected);<br>    print("]");<br>    print("\n");<br>  }<br> <br>  public static void print(boolean a) {<br>    System.out.print(a);<br>  }<br> <br>  public static void print(long a) {<br>    System.out.print(a);<br>  }<br> <br>  public static void print(int a) {<br>    System.out.print(a);<br>  }<br> <br>  public static void print(char a) {<br>    System.out.print(a);<br>  }<br> <br>  public static void print(String a) {<br>    System.out.print(a);<br>  }<br> <br>  public static void print(int[] a) {<br>    if (a==null) {System.out.print("null"); return;} <br>    for (int i=0; i&lt;a.length; i++) System.out.print(a[i]+(i&lt;a.length-1?",":"")); <br>  }<br> <br>  public static void print(int[][] a) {<br>    if (a==null) {System.out.print("null"); return;} <br>    for (int i=0; i&lt;a.length; i++) { print(a[i]); print("\n"); }<br>  }<br> <br>  public static void print(String[] a) {<br>    if (a==null) {System.out.print("null"); return;} <br>    for (int i=0; i&lt;a.length; i++) System.out.print(a[i]+(i&lt;a.length-1?",":"")); <br>  }<br> <br>  public static boolean eq(boolean a, boolean b) {<br>    return a==b;<br>  }<br> <br>  public static boolean eq(long a, long b) {<br>    return a==b;<br>  }<br> <br>  public static boolean eq(int a, int b) {<br>    return a==b;<br>  }<br> <br>  public static boolean eq(char a, char b) {<br>    return a==b;<br>  }<br> <br>  public static boolean eq(String a, String b) {<br>    return a.equals(b);<br>  }<br> <br>  public static boolean eq(int[] a, int[] b) { return Arrays.equals(a,b); }<br>  public static boolean eq(String[] a, String[] b) { return Arrays.equals(a,b); }<br> <br>}<br>// Powered by CodeProcessor<br></td>