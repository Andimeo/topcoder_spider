<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>public class Animation {<br>  public String[] animate(int speed, String init) {<br>    int[] pp = new int[init.length()];<br>    int[] dd = new int[init.length()];<br>    int nn = 0;<br>    String end = "";<br>    for (int i = 0; i &lt; init.length(); ++i) {<br>      end += '.';<br>      char c = init.charAt(i);<br>      if (c == 'R') {<br>        pp[nn] = i;<br>        dd[nn] = speed;<br>        ++nn;<br>      }<br>      if (c == 'L') {<br>        pp[nn] = i;<br>        dd[nn] = -speed;<br>        ++nn;<br>      }<br>    }<br>    <br>    ArrayList aa = new ArrayList();<br>    while (true) {<br>      char[] cc = new char[init.length()];<br>      Arrays.fill(cc, '.');<br>      for (int i = 0; i &lt; nn; ++i) {<br>        if (pp[i] &gt;= 0 &amp;&amp; pp[i] &lt; init.length()) cc[pp[i]] = 'X';<br>        pp[i] += dd[i];<br>      }<br>      String s = new String(cc);<br>      aa.add(s);<br>      if (s.equals(end)) break;<br>    }<br>    return (String[]) aa.toArray(new String[0]);<br>  }<br>  public final static void main(String[] args)<br>  {<br>    try {<br>      validateExample("1", new Animation().animate(2,"..R...."), new String[] { "..X....",  "....X..",  "......X",  "......." }, "animate(2,\"..R....\")");<br>      validateExample("2", new Animation().animate(3,"RR..LRL"), new String[] { "XX..XXX",  ".X.XX..",  "X.....X",  "......." }, "animate(3,\"RR..LRL\")");<br>      validateExample("3", new Animation().animate(2,"LRLR.LRLR"), new String[] { "XXXX.XXXX",  "X..X.X..X",  ".X.X.X.X.",  ".X.....X.",  "........." }, "animate(2,\"LRLR.LRLR\")");<br>      validateExample("4", new Animation().animate(10,"RLRLRLRLRL"), new String[] { "XXXXXXXXXX",  ".........." }, "animate(10,\"RLRLRLRLRL\")");<br>      validateExample("5", new Animation().animate(1,"..."), new String[] { "..." }, "animate(1,\"...\")");<br>      validateExample("6", new Animation().animate(1,"LRRL.LR.LRR.R.LRRL."), new String[] { "XXXX.XX.XXX.X.XXXX.",  "..XXX..X..XX.X..XX.",  ".X.XX.X.X..XX.XX.XX",  "X.X.XX...X.XXXXX..X",  ".X..XXX...X..XX.X..",  "X..X..XX.X.XX.XX.X.",  "..X....XX..XX..XX.X",  ".X.....XXXX..X..XX.",  "X.....X..XX...X..XX",  ".....X..X.XX...X..X",  "....X..X...XX...X..",  "...X..X.....XX...X.",  "..X..X.......XX...X",  ".X..X.........XX...",  "X..X...........XX..",  "..X.............XX.",  ".X...............XX",  "X.................X",  "..................." }, "animate(1,\"LRRL.LR.LRR.R.LRRL.\")");<br>    } catch (Exception e) {<br>      System.out.println(e);<br>      e.printStackTrace(System.out);<br>    }<br>  }<br> <br>  private static void validateExample(String exampleNum, String[] returned, String[] expected, String methodInvocation) {<br>    print(exampleNum);<br>    print("  ");<br>    if (!eq(returned,expected)) {<br>      print("FAIL");<br>    } else {<br>      print("SUCCESS");<br>    }<br>    print(" ");  <br>    print(methodInvocation);<br>    print("\tGot:[");<br>    print(returned);<br>    print("]\t");<br>    print("Expected:[");<br>    print(expected);<br>    print("]");<br>    print("\n");<br>  }<br> <br>  public static void print(boolean a) {<br>    System.out.print(a);<br>  }<br> <br>  public static void print(long a) {<br>    System.out.print(a);<br>  }<br> <br>  public static void print(int a) {<br>    System.out.print(a);<br>  }<br> <br>  public static void print(char a) {<br>    System.out.print(a);<br>  }<br> <br>  public static void print(String a) {<br>    System.out.print(a);<br>  }<br> <br>  public static void print(int[] a) {<br>    if (a==null) {System.out.print("null"); return;} <br>    for (int i=0; i&lt;a.length; i++) System.out.print(a[i]+(i&lt;a.length-1?",":"")); <br>  }<br> <br>  public static void print(int[][] a) {<br>    if (a==null) {System.out.print("null"); return;} <br>    for (int i=0; i&lt;a.length; i++) { print(a[i]); print("\n"); }<br>  }<br> <br>  public static void print(String[] a) {<br>    if (a==null) {System.out.print("null"); return;} <br>    for (int i=0; i&lt;a.length; i++) System.out.print(a[i]+(i&lt;a.length-1?",":"")); <br>  }<br> <br>  public static boolean eq(boolean a, boolean b) {<br>    return a==b;<br>  }<br> <br>  public static boolean eq(long a, long b) {<br>    return a==b;<br>  }<br> <br>  public static boolean eq(int a, int b) {<br>    return a==b;<br>  }<br> <br>  public static boolean eq(char a, char b) {<br>    return a==b;<br>  }<br> <br>  public static boolean eq(String a, String b) {<br>    return a.equals(b);<br>  }<br> <br>  public static boolean eq(int[] a, int[] b) { return Arrays.equals(a,b); }<br>  public static boolean eq(String[] a, String[] b) { return Arrays.equals(a,b); }<br> <br>}<br>// Powered by CodeProcessor<br></td>