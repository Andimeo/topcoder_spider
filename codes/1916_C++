<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;math.h&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;iostream&gt;<br>#include &lt;sstream&gt;<br>#include &lt;locale&gt;<br>using namespace std;<br>#ifdef WIN32<br>typedef __int64 int64_t;<br>typedef unsigned __int64 uint64_t;<br>#else<br>typedef long long int64_t;<br>typedef unsigned long long uint64_t;<br>#endif<br>typedef vector&lt;int&gt; VI; typedef vector&lt;string&gt; VS;<br>typedef vector&lt;int&gt;::iterator IVI; typedef vector&lt;string&gt;::iterator IVS;<br>#ifdef WIN32<br>ostream&amp; operator&lt;&lt;(ostream&amp; o, int64_t val)<br>{<br>  o&lt;&lt;(int) (val / 1000000000000);<br>  val %= 1000000000000;<br>  o&lt;&lt;(int) (val / 1000000);<br>  val %= 1000000;<br>  o&lt;&lt;(int) val;<br>}<br>#endif<br>inline string token_extract(string&amp; s, char delimiter=' ')<br>{<br>  while(s.length() &amp;&amp; s[0]==delimiter)<br>    s.erase(0, 1);<br>  if(!s.length())<br>    return "";<br>  int pos=s.find(delimiter);<br>  if(pos&lt;0)<br>  {<br>    string s_tmp=s;<br>    s="";<br>    return s_tmp;<br>  }<br>  string s1=s.substr(0, pos);<br>  s.erase(0, pos+1);<br>  return s1;<br>}<br>template &lt;class T&gt;<br>inline void parse_into_tokens(string&amp; s, T&amp; t)<br>{<br>  while(!s.empty())<br>    t.push_back(token_extract(s));<br>}<br><br><br>#ifdef WIN32<br>template &lt;class T&gt; const T&amp; max(const T&amp; t1, const T&amp; t2) { return (t1&gt;t2) ? t1 : t2; }<br>template &lt;class T&gt; const T&amp; min(const T&amp; t1, const T&amp; t2) { return (t1&lt;t2) ? t1 : t2; }<br>#endif<br><br>#define feach(X, Y) for(X = Y .begin(); X != Y .end(); X ++)<br>#define fsize(X, Y) for(X=0; X &lt; Y .size(); X ++)<br>#define fi(X) for(i=0; i&lt;X; i++)<br>#define fj(X) for(j=0; j&lt;X; j++)<br>#define fk(X) for(k=0; k&lt;X; k++)<br><br>#define Fill(X, Y) fill(X .begin(), X .end(), Y)<br>#define Count(X, Y) count(X .begin(), X .end(), Y)<br>#define Find(X, Y) find(X .begin(), X .end(), Y)<br>#define Sort(X) sort(X .begin(), X .end())<br>inline void Tolower(string&amp; X) { for(int __t=0; __t&lt;X .length(); __t++) X [__t] = tolower( X [__t] ); }<br>inline void Toupper(string&amp; X) { for(int __t=0; __t&lt;X .length(); __t++) X [__t] = toupper( X [__t] ); }<br><br>class Carbon14 <br>{<br>  public:<br>  vector &lt;int&gt; dateRange(int concentration, int err) <br>  {<br>    int lt=concentration-err;<br>    int ht=concentration+err;<br>    VI v;<br>    v.push_back((int) floor(-8267 * log(ht/10000.)));<br>    v.push_back((int) ceil(-8267 * log(lt/10000.)));<br>    return v;<br>  }<br>  <br><br>};<br><br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003]<br>// Powered by CodeProcessor<br></td>