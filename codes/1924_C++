<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;vector&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;string&gt;<br>#include &lt;stdio.h&gt;<br>#include &lt;sstream&gt;<br>#include &lt;iostream&gt;<br> <br>using namespace std;<br> <br>// basic typedefs <br>typedef vector&lt;int&gt;    vi;<br>typedef vector&lt;vi&gt;    vvi;<br>typedef vector&lt;string&gt; vs;<br>typedef vector&lt;vs&gt;    vvs;<br>typedef string        str;<br>typedef double        dbl;<br>typedef long long      ll;<br>typedef istringstream ist;<br>typedef ostringstream ost;<br> <br>// basic abbreviations<br>#define mp(a,b) make_pair(a,b)<br>#define sz size()<br>#define vp(v,a) v.push_back(a)<br> <br>// basic loop macro<br>#define rep(var,n)    for(int var=0;var&lt;((int)n);var++)<br>#define foreach(it,s) for(__typeof(s)::iterator it=s.begin(); it!=s.end(); it++)<br>#define ri(n) rep(i,n)<br>#define rj(n) rep(j,n)<br>#define rk(n) rep(k,n)<br> <br>class TerribleEncryption {<br>public:<br>  string decrypt(string, vector &lt;int&gt;, vector &lt;int&gt;);<br>};<br> <br>string TerribleEncryption::decrypt(string pool, vector &lt;int&gt; data, vector &lt;int&gt; keys) {<br>  str ret(data.sz,' ');<br>  <br>  ri(data.sz) {<br>    int k=1;<br>    for(k=1; k&lt;keys[i]; k++)  if ((data[i]*k)%keys[i] == 1)<br>      break;<br>      <br>    int j = k % (pool.sz);<br>    ret[i] = pool[j];<br>  }<br>  <br>  return ret;<br>}<br> <br> <br>//Powered by [KawigiEdit]<br></td>