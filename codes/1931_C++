<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;iostream&gt;<br>#include &lt;vector&gt;<br>#include &lt;sstream&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;cctype&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;queue&gt;<br>#include &lt;set&gt;<br>#include &lt;map&gt;<br><br>using namespace std;<br><br>const double pi=acos(-1.);<br>const int move[][2]={{0,1},{1,0},{0,-1},{-1,0}};<br>const int move8[][2]={{0,1},{1,1},{1,0},{1,-1},{0,-1},{-1,-1},{-1,0},{-1,1}};<br><br>typedef long long ll;<br>typedef vector&lt;int&gt; vi; typedef vector&lt;vi&gt; vvi;<br>typedef vector&lt;string&gt; vs; typedef vector&lt;vs&gt; vvs;<br>typedef istringstream iss; typedef ostringstream oss;<br><br>#define all(a) a.begin(),a.end()<br>#define let(a,b) typeof(b) a(b)<br>#define forall(a,b) for (let(a,b.begin());a!=b.end()!;++a)<br>#define forrall(a,b) for (let(a,b.rbegin());a!=b.rend()!;++a)<br>#define fi(n) for (int i=0;i&lt;(n);++i)<br>#define fj(n) for (int j=0;j&lt;(n);++j)<br>#define fk(n) for (int k=0;k&lt;(n);++k)<br><br>template&lt;typename T&gt; string str(const T &amp;a) {oss s;s&lt;&lt;a;return s.str();}<br>template&lt;typename T&gt; ll Int(const T &amp;a) {stringstream s;s&lt;&lt;a;ll r;s&gt;&gt;r;return r;}<br>template&lt;typename T&gt; double Double(const T &amp;a) {stringstream s;s&lt;&lt;a;double r;s&gt;&gt;r;return r;}<br><br>#define D(x) cout&lt;&lt;#x&lt;&lt;endl;x;<br>#define P(x) cout&lt;&lt;#x" is: "&lt;&lt;(x)&lt;&lt;endl;<br>#define Pn(x) cout&lt;&lt;#x" is: "&lt;&lt;(x)&lt;&lt;" ";<br><br>template&lt;typename T&gt;<br>void dump(const T &amp;a, int n, const char *d=" ")<br>{<br>  cout&lt;&lt;"dump size is: "&lt;&lt;n&lt;&lt;endl;<br>  fi(n)<br>  {<br>    if (i) cout&lt;&lt;d;<br>    cout&lt;&lt;a[i];<br>  }<br>  cout&lt;&lt;endl;<br>}<br><br>template&lt;typename T&gt;<br>void dump(const T&amp;a, int n,int m, const char *d=" ")<br>{<br>  cout&lt;&lt;"dump size is: "&lt;&lt;n&lt;&lt;"*"&lt;&lt;m&lt;&lt;endl;<br>  fi(n)<br>  {<br>    fj(m)<br>    {<br>      if (j) cout&lt;&lt;d;<br>      cout&lt;&lt;a[i][j];<br>    }<br>    cout&lt;&lt;endl;<br>  }<br>}<br><br>vs stok(const string &amp;s, const char *d=" \t\n")<br>{<br>  vs r;<br>  char buffer[s.size()+10];<br>  strcpy(buffer,s.c_str());<br>  for (char *p=strtok(buffer,d);p;p=strtok(0,d))<br>    r.push_back(p);<br>  return r;<br>}<br><br>map&lt;string,int&gt; nmap;<br>vs ntable;<br>int lookup(const string &amp;s)<br>{<br>  int &amp;r=nmap[s];<br>  if (!r)<br>  {<br>    r=nmap.size();<br>    ntable.push_back(s);<br>  }<br>  return r-1;<br>}<br>int n,m;<br>int data[400][400],got[400];<br>int match1[400],match2[400];<br>int bmatch(int which)<br>{<br>  for (int j=0;j&lt;m;j++)<br>  {<br>    if (got[j] || data[which][j]==1) continue;<br>    got[j]=1;<br>    if (match2[j]&lt;0 || bmatch(match2[j]))<br>    {<br>      match2[j]=which;<br>      match1[which]=j;<br>      return 1;<br>    }<br>  }<br>  return 0;<br>}<br>class RookAttack {<br>public:<br>int howMany(int rows, int cols, vector &lt;string&gt; cutouts) {<br>//main<br>int ans=0;<br>memset(data,0,sizeof(data));<br>fi(cutouts.size())<br>{<br>  iss sin(cutouts[i]);<br>  int x,y;<br>  char c;<br>  sin&gt;&gt;x&gt;&gt;y;<br>  data[x][y]=1;<br>  while (sin&gt;&gt;c&gt;&gt;x&gt;&gt;y)<br>    data[x][y]=1;<br>}<br>n=rows;<br>m=cols;<br>memset(match1,-1,sizeof(match1));<br>memset(match2,-1,sizeof(match2));<br>fi(rows)<br>{<br>  memset(got,0,sizeof(got));<br>  if (bmatch(i)) ans++;<br>}<br>return ans;    <br>}};<br><br><br>// Powered by FileEdit<br></td>