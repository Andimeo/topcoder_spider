<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>public class WhichData {<br>  public int[] bestVariance(int[] sampleData, int varNum, int varDen) {<br>    int[] work = new int[17];<br>    int[] best = new int[17];<br>    int bestLen = 0;<br>    double bestD = Double.MAX_VALUE;<br>    double goal = varNum / (double) varDen;<br>    for (int bits = 1; bits &lt; (1 &lt;&lt; sampleData.length); ++bits) {<br>      int count = 0;<br>      double sum = 0;<br>      for (int i = 0; i &lt; sampleData.length; ++i) {<br>        if (((bits &gt;&gt; i) &amp; 1) == 0) continue;<br>        ++count;<br>        sum += sampleData[i];<br>      }      <br>      double mean = sum / count;<br>      double varsum = 0;<br>      for (int i = 0; i &lt; sampleData.length; ++i) {<br>        if (((bits &gt;&gt; i) &amp; 1) == 0) continue;<br>        double d = sampleData[i] - mean;<br>        varsum += d * d;<br>      }<br>      double vv = varsum / count;<br>      double dd = Math.abs(vv - goal);<br>      if (dd &gt; bestD + 1e-9) continue;<br>      <br>      int w = 0;<br>      Arrays.fill(work, Integer.MAX_VALUE);<br>      for (int i = 0; i &lt; sampleData.length; ++i) {<br>        if (((bits &gt;&gt; i) &amp; 1) == 0) continue;<br>        work[w++] = sampleData[i];<br>      }<br>      Arrays.sort(work);<br>      work[w] = Integer.MIN_VALUE;<br>      if (Math.abs(dd - bestD) &lt; 1e-9) {<br>        boolean better = true;<br>        for (int i = 0; i &lt; 17; ++i) {<br>          int a = best[i];<br>          int b = work[i];<br>          if (b &lt; a) {<br>            break;<br>          }<br>          if (b &gt; a) {<br>            better = false;<br>            break;<br>          }<br>          if (b == Integer.MIN_VALUE) break;<br>        }<br>        if (!better) continue;<br>      }<br>      <br>      int[] aa = best;<br>      best = work;<br>      work = aa;<br>      bestD = dd;<br>      bestLen = count;<br>    }<br>    int[] rr = new int[bestLen];<br>    System.arraycopy(best, 0, rr, 0, bestLen);<br>    return rr;<br>  }<br>  public final static void main(String[] args)<br>  {<br>    try {<br>      validateExample("1", new WhichData().bestVariance(new int[] {1,2,3,4,5,6,7,8},40,20), new int[] { 1,  2,  3,  4,  5 }, "bestVariance(new int[] {1,2,3,4,5,6,7,8},40,20)");<br>      validateExample("2", new WhichData().bestVariance(new int[] {1,2,3,4,5,6,7,8},6,1), new int[] { 1,  2,  4,  5,  8 }, "bestVariance(new int[] {1,2,3,4,5,6,7,8},6,1)");<br>      validateExample("3", new WhichData().bestVariance(new int[] {-10000,10000,-9999,9999,-9998,9000},10000,1), new int[] { -10000,  -9998 }, "bestVariance(new int[] {-10000,10000,-9999,9999,-9998,9000},10000,1)");<br>      validateExample("4", new WhichData().bestVariance(new int[] {-10000,10000,-9999,9999,-9998,9998,1,1,2,2},9999,10000), new int[] { -10000,  -9998 }, "bestVariance(new int[] {-10000,10000,-9999,9999,-9998,9998,1,1,2,2},9999,10000)");<br>      validateExample("5", new WhichData().bestVariance(new int[] {500,500,500,500,500,500,500,580,  100,100,100,100,100,100,100,180},700,1), new int[] { 100,  100,  100,  100,  100,  100,  100,  180 }, "bestVariance(new int[] {500,500,500,500,500,500,500,580,  100,100,100,100,100,100,100,180},700,1)");<br>      validateExample("6", new WhichData().bestVariance(new int[] {10,10,10,10,10,10},0,9999), new int[] { 10 }, "bestVariance(new int[] {10,10,10,10,10,10},0,9999)");<br>      validateExample("7", new WhichData().bestVariance(new int[] {2,5,8,15,-14,0,-2,3,0,-10,-3,-9,6,-13,4,-1},5787,170), new int[] { -14,  -10,  -3,  -1,  0,  0,  2,  3,  4,  5 }, "bestVariance(new int[] {2,5,8,15,-14,0,-2,3,0,-10,-3,-9,6,-13,4,-1},5787,170)");<br>      validateExample("8", new WhichData().bestVariance(new int[] {-14,-3,-1,10,-5,0,13,6,11,9,5,6,3,-2,0,2},5061,225), new int[] { -5,  -3,  -2,  -1,  0,  2,  5,  6,  6,  11 }, "bestVariance(new int[] {-14,-3,-1,10,-5,0,13,6,11,9,5,6,3,-2,0,2},5061,225)");<br>      validateExample("9", new WhichData().bestVariance(new int[] {0,-13,15,5,5,-7,-6,-7,-8,4,-12,-13,14,9,-3,-1},9262,197), new int[] { -13,  -13,  -12,  -7,  -7,  -6,  -3,  4,  5,  5 }, "bestVariance(new int[] {0,-13,15,5,5,-7,-6,-7,-8,4,-12,-13,14,9,-3,-1},9262,197)");<br>    } catch (Exception e) {<br>      System.out.println(e);<br>      e.printStackTrace(System.out);<br>    }<br>  }<br> <br>  private static void validateExample(String exampleNum, int[] returned, int[] expected, String methodInvocation) {<br>    print(exampleNum);<br>    print("  ");<br>    if (!eq(returned,expected)) {<br>      print("FAIL");<br>    } else {<br>      print("SUCCESS");<br>    }<br>    print(" ");  <br>    print(methodInvocation);<br>    print("\tGot:[");<br>    print(returned);<br>    print("]\t");<br>    print("Expected:[");<br>    print(expected);<br>    print("]");<br>    print("\n");<br>  }<br> <br>  public static void print(boolean a) {<br>    System.out.print(a);<br>  }<br> <br>  public static void print(long a) {<br>    System.out.print(a);<br>  }<br> <br>  public static void print(int a) {<br>    System.out.print(a);<br>  }<br> <br>  public static void print(char a) {<br>    System.out.print(a);<br>  }<br> <br>  public static void print(String a) {<br>    System.out.print(a);<br>  }<br> <br>  public static void print(int[] a) {<br>    if (a==null) {System.out.print("null"); return;} <br>    for (int i=0; i&lt;a.length; i++) System.out.print(a[i]+(i&lt;a.length-1?",":"")); <br>  }<br> <br>  public static void print(int[][] a) {<br>    if (a==null) {System.out.print("null"); return;} <br>    for (int i=0; i&lt;a.length; i++) { print(a[i]); print("\n"); }<br>  }<br> <br>  public static void print(String[] a) {<br>    if (a==null) {System.out.print("null"); return;} <br>    for (int i=0; i&lt;a.length; i++) System.out.print(a[i]+(i&lt;a.length-1?",":"")); <br>  }<br> <br>  public static boolean eq(boolean a, boolean b) {<br>    return a==b;<br>  }<br> <br>  public static boolean eq(long a, long b) {<br>    return a==b;<br>  }<br> <br>  public static boolean eq(int a, int b) {<br>    return a==b;<br>  }<br> <br>  public static boolean eq(char a, char b) {<br>    return a==b;<br>  }<br> <br>  public static boolean eq(String a, String b) {<br>    return a.equals(b);<br>  }<br> <br>  public static boolean eq(int[] a, int[] b) { return Arrays.equals(a,b); }<br>  public static boolean eq(String[] a, String[] b) { return Arrays.equals(a,b); }<br> <br>}<br>// Powered by CodeProcessor<br></td>