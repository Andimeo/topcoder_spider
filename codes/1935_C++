<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;iostream&gt;<br>#include &lt;sstream&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cstring&gt;<br>#include &lt;cctype&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;map&gt;<br>#include &lt;numeric&gt;<br>#include &lt;iterator&gt;<br> <br>using namespace std;<br>typedef long long LL;<br>typedef vector&lt;string&gt; Vs;<br>typedef vector&lt;int&gt; Vi;<br>typedef vector&lt;bool&gt; Vb;<br>typedef vector&lt;long long&gt; Vll;<br>#define forUp(x,y) for(int x=0;x&lt;(y);x++)<br>#define forUp2(x,l,h) for(int x=(l);x&lt;(h);x++)<br>#define forDown(x,y) for(int x=(y)-1;x&gt;=0;x--)<br>#define forEach(X, C) for (int __s=1;__s;) for(typeof(C) &amp;__seq=(C);__s;__s=0) for(typeof((C).begin()) __X=(__seq).begin(); __X!=(__seq).end();__X++) for (int __t=1;__t;) for (typeof(*(C).begin()) &amp;X=*__X; __t; __t=0) <br> <br>template&lt;class T&gt; string toString(T t) {<br>  ostringstream o; o &lt;&lt; t; return o.str();<br>}<br> <br>template&lt;class T&gt; void fromString(string s, T&amp; t) {<br>  istringstream i(s); i &gt;&gt; t;<br>}<br> <br>template&lt;class T&gt; void fromStrings(Vs ss, vector&lt;T&gt;&amp; t) {<br>  int n=ss.size(); t=vector&lt;T&gt;(n); forUp(i,n) fromString(ss[i],t[i]);<br>}<br> <br>vector&lt;string&gt; tokenize(string s, char* delims) {<br>  char buf[s.length()+1]; strcpy(buf, s.c_str());<br>  vector&lt;string&gt; v;<br>  for (char* tok=strtok(buf, delims); tok; tok=strtok(0, delims))<br>    v.push_back(tok);<br>  return v;<br>}<br> <br> <br>class RoomSummary {<br>public:<br> <br> <br>  vector &lt;string&gt; generate(vector &lt;string&gt; problems, vector &lt;string&gt; handles, vector &lt;string&gt; submissions, vector &lt;string&gt; challenges, vector &lt;string&gt; failed) {<br>    map&lt;string,double&gt; p[3],c;<br> <br>    forEach(sub,submissions) {<br>      Vs toks=tokenize(sub, " ");<br>      forUp(i,3)<br>        if (problems[i] == toks[1]) {<br>          double d;<br>          fromString(toks[2], d);<br>          p[i][toks[0]] = d;<br>        }<br>    }<br> <br>    forEach(chall,challenges) {<br>      Vs toks=tokenize(chall, " ");<br>      if (toks[3] == "unsuccessful")<br>        c[toks[0]] -= 50;<br>      else {<br>        c[toks[0]] += 50;<br>        forUp(i,3)<br>          if (problems[i] == toks[2]) {<br>            p[i][toks[1]] = 0;<br>          }<br>      }<br>    }<br> <br>    forEach(fail,failed) {<br>      Vs toks=tokenize(fail, " ");<br>      forUp(i,3)<br>        if (problems[i] == toks[1]) {<br>          p[i][toks[0]] = 0;<br>        }<br>    }<br> <br>    vector&lt;pair&lt;double, string&gt; &gt; l;<br>    forEach(handle, handles)<br>      l.push_back(make_pair(-(p[0][handle]+p[1][handle]+p[2][handle]+c[handle]), handle));<br> <br>    sort(l.begin(), l.end());<br> <br>    Vs res;<br>    forEach(a,l) {<br>      char buf[128];<br>      sprintf(buf, "%s %.2f", a.second.c_str(), -a.first); <br>      res.push_back(buf);<br>    }<br> <br>    return res;<br>  }<br>};<br> <br> <br> <br> <br> <br> <br> <br> <br> <br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003]<br>// Powered by CodeProcessor<br></td>