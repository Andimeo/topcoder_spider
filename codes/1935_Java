<td class="problemText" colspan="8" valign="middle" align="left">
            import java.text.DecimalFormat;<br>import java.util.HashMap;<br>import java.util.Map;<br>import java.util.StringTokenizer;<br>import java.util.Iterator;<br>import java.util.Comparator;<br>import java.util.Arrays;<br> <br>public class RoomSummary {<br>    public static final DecimalFormat df = new DecimalFormat("0.00");<br>  public String[] generate(String[] problems, String[] handles, String[] submissions, String[] challenges, String[] failed) {<br>        Map coders = new HashMap();<br>        for (int i = 0; i &lt; handles.length; i++) {<br>            coders.put(handles[i], new HashMap());<br>        }<br>        for (int i = 0; i &lt; submissions.length; i++) {<br>            StringTokenizer st = new StringTokenizer(submissions[i], " ");<br>            String coder = st.nextToken();<br>            String prob = st.nextToken();<br>            double score = Double.parseDouble(st.nextToken());<br>            Map m = (Map) coders.get(coder);<br>            m.put(prob, new Double(score));<br>        }<br>        for (int i = 0; i &lt; challenges.length; i++) {<br>            StringTokenizer st = new StringTokenizer(challenges[i], " ");<br>            String coder1 = st.nextToken();<br>            String coder2 = st.nextToken();<br>            String prob = st.nextToken();<br>            String result = st.nextToken();<br>            Map m1 = (Map) coders.get(coder1);<br>            Map m2 = (Map) coders.get(coder2);<br>            if ("unsuccessful".equals(result)) {<br>                update(m1, "challenge", -50.0);<br>            } else {<br>                update(m1, "challenge", 50.0);<br>                m2.remove(prob);<br>            }<br>        }<br>        for (int i = 0; i &lt; failed.length; i++) {<br>            StringTokenizer st = new StringTokenizer(failed[i], " ");<br>            String coder = st.nextToken();<br>            String prob = st.nextToken();<br>            Map m = (Map) coders.get(coder);<br>            m.remove(prob);<br>        }<br> <br>        CoderScore[] results = new CoderScore[handles.length];<br>        int index = 0;<br>        Iterator i = coders.keySet().iterator();<br>        while (i.hasNext()) {<br>            String coder = (String) i.next();<br>            Map m = (Map) coders.get(coder);<br>            double totalScore = 0.0;<br>            Iterator i2 = m.keySet().iterator();<br>            while (i2.hasNext()) {<br>                totalScore += ((Double) m.get(i2.next())).doubleValue();<br>            }<br>            CoderScore temp = new CoderScore();<br>            temp.coder = coder;<br>            temp.score = totalScore;<br>            results[index++] = temp;<br>        }<br> <br>        Arrays.sort(results, new Comparator() {<br>            public int compare(Object o, Object o1) {<br>                CoderScore cs1 = (CoderScore) o;<br>                CoderScore cs2 = (CoderScore) o1;<br>                double diff = cs1.score - cs2.score;<br>                if (diff &gt; 0) {<br>                    return -1;<br>                } else if (diff &lt; 0) {<br>                    return 1;<br>                } else {<br>                    return cs1.coder.compareTo(cs2.coder);<br>                }<br>            }<br> <br>        });<br> <br>        String[] strings = new String[results.length];<br>        for (int j = 0; j &lt; results.length; j++) {<br>            strings[j] = results[j].coder + " " + df.format(results[j].score);<br>        }<br>        return strings;<br>  }<br> <br>    private static class CoderScore {<br>        private String coder;<br>        private double score;<br>    }<br> <br>    private void update(Map m, String key, double delta) {<br>        Double val = (Double) m.get(key);<br>        if (val == null) {<br>            m.put(key, new Double(delta));<br>        } else {<br>            m.put(key, new Double(delta + val.doubleValue()));<br>        }<br>    }<br>}<br></td>