<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Text;<br>using System.Text.RegularExpressions;<br>using System.Collections;<br><br>public class CongruenceLock {<br>    int[] best = new int[100000];<br>    class Pos {<br>        public Pos( int S, int T ) {<br>            s=S;t=T;<br>        }<br>        public int s,t;<br>    }<br>    public int minPushes(int s, int f, int[] bb) {<br>        for ( int i = 0 ; i != best.Length; best[i++] = int.MaxValue );<br>        Queue q = new Queue();<br>        q.Enqueue(new Pos( s, 0 ) );<br>        best[s] = 0;<br>        while( q.Count != 0 ) {<br>            Pos p = (Pos)q.Dequeue();<br>            foreach( int x in bb ) {<br>                int nx = (x+p.s)%100000;<br>                if ( best[nx] &gt; p.t+1 ) {<br>                    best[nx] = p.t+1;<br>                    q.Enqueue( new Pos( nx, p.t+1 ) );<br>                }<br>            }<br>        }<br>        return best[f]==int.MaxValue ? -1 : best[f];<br>    }<br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by CodeProcessor<br></td>