<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>public class UndergroundVault {<br>  int n;<br>  boolean G[][];<br>  int[][] adj;<br>  int[] count;<br>  boolean[] reach;<br>  int dfs;<br>  boolean[] used;<br>  void visit(int i) {<br>    if (reach[i] || used[i]) return;<br>    reach[i] = true;<br>    dfs++;<br>    for (int j = 0; j &lt; count[i]; j++)<br>      visit(adj[i][j]);<br>  }<br>  public int[] sealOrder(String[] rooms) {<br>    n = rooms.length;<br>    G = new boolean[n][n];<br>    adj = new int[n][n];<br>    used = new boolean[n];<br>    count = new int[n];<br>    //for (int i = 0; i &lt; n; i++) Arrays.fill(adj[i],-1);<br>    for (int i = 0; i &lt; n; i++) {<br>      if (rooms[i].length() == 0) continue;<br>      String[] s = rooms[i].split(",");<br>      for (int j = 0; j &lt; s.length; j++) {<br>        int x = Integer.parseInt(s[j]);<br>        G[i][x] = true;<br>        adj[i][count[i]++] = x;<br>      }<br>    }<br>    int[] result = new int[n];<br>    int rescount = 0;<br>    for (int r = n; r &gt; 0; r--) {<br>      for (int x = 0; x &lt; n; x++) {<br>        if (used[x]) continue;<br>        reach = new boolean[n];<br>        dfs = 0;<br>        used[x] = true;<br>        visit(0);<br>        if (dfs == r-1) {<br>          result[rescount++] = x;<br>          break;<br>        }<br>        used[x] = false;<br>      }<br>    }<br>    return result;<br>  }<br> <br>}<br><br><br>// Powered by FileEdit<br>// Powered by CodeProcessor<br></td>