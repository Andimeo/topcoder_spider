<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Text;<br>using System.Collections;<br><br>public class ResistorCombinations {<br><br>  int n;<br>  double [] r;<br><br>  double [][] memo;<br>  bool [] used;<br><br><br>  double [] sol(int mask)<br>  {<br>    int i,j,k;<br><br><br>    if (used[mask])<br>      return memo[mask];<br><br>    if (mask == 0)<br>    {<br>      double [] sol = new double[] {0};<br>      memo[0] = sol;<br>      used[0] = true;<br>      return sol;<br>    }<br><br>    ArrayList l = new ArrayList();<br><br>    for(i=0; i&lt;n; i++)<br>      if (((1&lt;&lt;i) &amp; mask )!= 0)<br>        if (!l.Contains(r[i]))<br>          l.Add(r[i]);<br><br>    for(i=1; i&lt;(1&lt;&lt;n); i++)<br>    {<br>      int a = i &amp; mask;<br>      int b = (~i) &amp; mask;<br><br>      if (a==mask || b==mask) continue;<br><br><br><br>      double [] sa = sol(a);<br>      double [] sb = sol(b);<br><br>      foreach(double x in sa) if (!l.Contains(x)) l.Add(x);<br>      foreach(double x in sb) if (!l.Contains(x)) l.Add(x);<br><br>      foreach(double da in sa)<br>        foreach(double db in sb)<br>        {<br>          if (!l.Contains(da+db))<br>            l.Add(da+db);<br><br>          if ((da &gt; 1e-9)  &amp;&amp;  (db &gt; 1e-9))<br>          {<br>            double p = 1/(1/da + 1/db);<br><br>            if (!l.Contains(p))<br>              l.Add(p);<br>          }<br>        }<br><br><br>    }<br>    used[mask] = true;<br>    memo[mask] = (double[] )l.ToArray(typeof(double));<br>    return memo[mask];<br>  }<br><br>  public double closestValue(string[] resistances, double target) {<br>    <br>    n = resistances.Length;<br>    r = new double[n];<br>    used = new bool[1&lt;&lt;n];<br>    memo = new double[1&lt;&lt;n][];<br><br><br>    for(int i =0; i&lt;n; i++)<br>      r[i] = double.Parse(resistances[i]);<br><br>    double[] ss = sol((1&lt;&lt;n)-1);<br><br>    double bet = r[0];<br><br><br>    foreach(double d in ss)<br>    {<br><br>      if ((d &gt; 1e-9) &amp;&amp; (Math.Abs(bet-target)&gt;Math.Abs(d-target)))<br>        bet = d;    <br>    }<br><br>    return bet;<br>  }<br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by TZTester for c# [12-oct-2003]<br>// Powered by CodeProcessor<br></td>