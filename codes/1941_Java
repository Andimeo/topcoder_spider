<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>public class ResistorCombinations {<br>  double[] res;<br>  double[][] possible = new double[32][];<br>  <br>  public double closestValue(String[] resistances, double target) {<br>    res = new double[resistances.length];<br>    for (int i = 0; i &lt; res.length; ++i) {<br>      res[i] = Double.parseDouble(resistances[i]);<br>    }<br>    double best = -1;<br>    for (int bits = 1; bits &lt; (1 &lt;&lt; res.length); ++bits) {<br>      double[] a = f(bits);<br>      for (int i = 0; i &lt; a.length; ++i) {<br>        if (best &lt; 0 || Math.abs(a[i] - target) &lt; Math.abs(best - target)) {<br>          best = a[i];<br>        }<br>      }<br>    }<br>    return best;<br>  }<br>  <br>  double[] f(int bits) {<br>    if (possible[bits] != null) return possible[bits];<br>    <br>    if ((bits &amp; (bits - 1)) == 0) {<br>      for (int i = 0; i &lt; 5; ++i) {<br>        if (((bits &gt;&gt; i) &amp; 1) == 1) {<br>          return possible[bits] = new double[]{ res[i] };<br>        }<br>      }<br>      return null;<br>    }<br>    ArrayList rr = new ArrayList();<br>    for (int i = 1; i &lt; bits; ++i) {<br>      if ((bits &amp; i) != i) continue;<br>      double[] a = f(bits &amp; ~i);<br>      double[] b = f(bits &amp; i);<br>      double[] r = new double[2 * a.length * b.length];<br>      int d = 0;<br>      for (int ii = 0; ii &lt; a.length; ++ii) {<br>        for (int jj = 0; jj &lt; b.length; ++jj) {<br>          r[d++] = a[ii] + b[jj];<br>          r[d++] = 1 / (1 / a[ii] + 1 / b[jj]);<br>        }<br>      }<br>      Arrays.sort(r);<br>      rr.add(new Double(r[0]));<br>      for (int s = 1; s &lt; r.length; ++s) {<br>        if (r[s] - r[s-1] &gt; 1e-10) {<br>          rr.add(new Double(r[s]));<br>        }<br>      }<br>    }<br>    double[] r = new double[rr.size()];<br>    for (int i = 0; i &lt; r.length; ++i) {<br>      r[i] = ((Double) rr.get(i)).doubleValue();<br>    }<br>    rr.clear();<br>    Arrays.sort(r);<br>    rr.add(new Double(r[0]));<br>    for (int s = 1; s &lt; r.length; ++s) {<br>      if (r[s] - r[s-1] &gt; 1e-10) {<br>        rr.add(new Double(r[s]));<br>      }<br>    }<br>    r = new double[rr.size()];<br>    for (int i = 0; i &lt; r.length; ++i) {<br>      r[i] = ((Double) rr.get(i)).doubleValue();<br>    }<br>    return possible[bits] = r;  <br>  }<br>  <br>//  public final static void main(String[] args)<br>//  {<br>//    try {<br>////      validateExample("1", new ResistorCombinations().closestValue(), RETURN, "closestValue()");<br>////      validateExample("2", new ResistorCombinations().closestValue(), RETURN, "closestValue()");<br>////      validateExample("3", new ResistorCombinations().closestValue(), RETURN, "closestValue()");<br>////      validateExample("4", new ResistorCombinations().closestValue(), RETURN, "closestValue()");<br>////      validateExample("5", new ResistorCombinations().closestValue(), RETURN, "closestValue()");<br>//    } catch (Exception e) {<br>//      System.out.println(e);<br>//      e.printStackTrace(System.out);<br>//    }<br>//  }<br>//<br>//  private static void validateExample(String exampleNum, double returned, double expected, String methodInvocation) {<br>//    print(exampleNum);<br>//    print("  ");<br>//    if (!eq(returned,expected)) {<br>//      print("FAIL");<br>//    } else {<br>//      print("SUCCESS");<br>//    }<br>//    print(" ");  <br>//    print(methodInvocation);<br>//    print("\tGot:[");<br>//    print(returned);<br>//    print("]\t");<br>//    print("Expected:[");<br>//    print(expected);<br>//    print("]");<br>//    print("\n");<br>//  }<br>//<br>//  public static void print(boolean a) {<br>//    System.out.print(a);<br>//  }<br>//<br>//  public static void print(long a) {<br>//    System.out.print(a);<br>//  }<br>//<br>//  public static void print(int a) {<br>//    System.out.print(a);<br>//  }<br>//<br>//  public static void print(char a) {<br>//    System.out.print(a);<br>//  }<br>//<br>//  public static void print(String a) {<br>//    System.out.print(a);<br>//  }<br>//<br>//  public static void print(int[] a) {<br>//    if (a==null) {System.out.print("null"); return;} <br>//    for (int i=0; i&lt;a.length; i++) System.out.print(a[i]+(i&lt;a.length-1?",":"")); <br>//  }<br>//<br>//  public static void print(int[][] a) {<br>//    if (a==null) {System.out.print("null"); return;} <br>//    for (int i=0; i&lt;a.length; i++) { print(a[i]); print("\n"); }<br>//  }<br>//<br>//  public static void print(String[] a) {<br>//    if (a==null) {System.out.print("null"); return;} <br>//    for (int i=0; i&lt;a.length; i++) System.out.print(a[i]+(i&lt;a.length-1?",":"")); <br>//  }<br>//<br>//  public static boolean eq(boolean a, boolean b) {<br>//    return a==b;<br>//  }<br>//<br>//  public static boolean eq(long a, long b) {<br>//    return a==b;<br>//  }<br>//<br>//  public static boolean eq(int a, int b) {<br>//    return a==b;<br>//  }<br>//<br>//  public static boolean eq(char a, char b) {<br>//    return a==b;<br>//  }<br>//<br>//  public static boolean eq(String a, String b) {<br>//    return a.equals(b);<br>//  }<br>//<br>//  public static boolean eq(int[] a, int[] b) { return Arrays.equals(a,b); }<br>//  public static boolean eq(String[] a, String[] b) { return Arrays.equals(a,b); }<br>//<br>}<br>// Powered by CodeProcessor<br></td>