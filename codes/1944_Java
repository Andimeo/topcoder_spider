<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>public class RPG {<br>    public int[] dieRolls(String[] dice) {<br>        int min=0, max=0, avg=0;<br>        int total = 0;<br>        for (int i=0; i&lt;dice.length; i++)  {<br>            String[] p = dice[i].split("d");<br>            int q = Integer.parseInt(p[0]);<br>            int f = Integer.parseInt(p[1]);<br>            min += q;<br>            max+= f*q;<br>            for (int j=1; j&lt;=f; j++)  {<br>                total += j*q;<br>            }<br>        }<br>        return new int[]{min,max, (min+max)/2};<br>    }<br>    <br>    <br>    // -- Begin Cutting Here of the Main Method $&amp;%*@# --<br>    public static void main(String[] a) {<br>        new RPG().runTestCase(0);<br>        new RPG().runTestCase(1);<br>        new RPG().runTestCase(2);<br>        new RPG().runTestCase(3);<br>    }<br>    <br>    public void runTestCase(int nbr) {<br>        switch(nbr) {<br>            case 0 : {<br>                checkOutput(dieRolls(new String[] {"3d6"}), new int[] { 3,  18,  10 }, 0); break;<br>            }<br>            case 1 : {<br>                checkOutput(dieRolls(new String[] {"3d4","1d6"}), new int[] { 4,  18,  11 }, 1); break;<br>            }<br>            case 2 : {<br>                checkOutput(dieRolls(new String[] {"6d5","10d10","10d20"}), new int[] { 26,  330,  178 }, 2); break;<br>            }<br>            case 3 : {<br>                checkOutput(dieRolls(new String[] {"1d2","2d2","4d2","6d2","8d2"}), new int[] { 21,  42,  31 }, 3); break;<br>            }<br>        }<br>    }<br>    final void checkOutput(int mine, int them, int nbr) {<br>        boolean success = (mine==them);<br>        StringBuffer out = new StringBuffer();<br>        out.append("Example ");<br>        out.append((nbr+1));<br>        out.append(" - ");<br>        out.append(success ? "success" : "failure   ");<br>        if(!success) {<br>            out.append("Got: ");<br>            out.append(mine);<br>            out.append(", Expected: ");<br>            out.append(them);<br>        }<br>        System.out.println(out);<br>    }<br>    final void checkOutput(long mine, long them, int nbr) {<br>        boolean success = (mine==them);<br>        StringBuffer out = new StringBuffer();<br>        out.append("Example ");<br>        out.append((nbr+1));<br>        out.append(" - ");<br>        out.append(success ? "success" : "failure   ");<br>        if(!success) {<br>            out.append("Got: ");<br>            out.append(mine);<br>            out.append(", Expected: ");<br>            out.append(them);<br>        }<br>        System.out.println(out);<br>    }<br>    final void checkOutput(double mine, double them, int nbr) {<br>        boolean success = (mine==them);<br>        StringBuffer out = new StringBuffer();<br>        out.append("Example ");<br>        out.append((nbr+1));<br>        out.append(" - ");<br>        out.append(success ? "success" : "failure   ");<br>        if(!success) {<br>            out.append("Got: ");<br>            out.append(mine);<br>            out.append(", Expected: ");<br>            out.append(them);<br>        }<br>        System.out.println(out);<br>    }<br>    final void checkOutput(char mine, char them, int nbr) {<br>        boolean success = (mine==them);<br>        StringBuffer out = new StringBuffer();<br>        out.append("Example ");<br>        out.append((nbr+1));<br>        out.append(" - ");<br>        out.append(success ? "success" : "failure   ");<br>        if(!success) {<br>            out.append("Got: ");<br>            out.append("'");<br>            out.append(mine);<br>            out.append("'");<br>            out.append(", Expected: ");<br>            out.append("'");<br>            out.append(them);<br>            out.append("'");<br>        }<br>        System.out.println(out);<br>    }<br>    final void checkOutput(String mine, String them, int nbr) {<br>        boolean success = (mine.equals(them));<br>        StringBuffer out = new StringBuffer();<br>        out.append("Example ");<br>        out.append((nbr+1));<br>        out.append(" - ");<br>        out.append(success ? "success" : "failure   ");<br>        if(!success) {<br>            out.append("Got: ");<br>            out.append("\"");<br>            out.append(mine);<br>            out.append("\"");<br>            out.append(", Expected: ");<br>            out.append("\"");<br>            out.append(them);<br>            out.append("\"");<br>        }<br>        System.out.println(out);<br>    }<br>    final void checkOutput(long[] mine, long[] them, int nbr) {<br>        boolean success = (Arrays.equals(mine, them));<br>        StringBuffer out = new StringBuffer();<br>        out.append("Example ");<br>        out.append((nbr+1));<br>        out.append(" - ");<br>        out.append(success ? "success" : "failure   ");<br>        if(!success) {<br>            out.append("Got: ");<br>            out.append("{");<br>            for(int x=0;x&lt;mine.length;x++) {<br>                out.append(mine[x]);<br>                if(x&lt;mine.length-1) out.append(", ");<br>            }<br>            out.append("}");<br>            out.append(", Expected: ");<br>            out.append("{");<br>            for(int x=0;x&lt;them.length;x++) {<br>                out.append(them[x]);<br>                if(x&lt;them.length-1) out.append(", ");<br>            }<br>            out.append("}");<br>        }<br>        System.out.println(out);<br>    }<br>    final void checkOutput(char[] mine, char[] them, int nbr) {<br>        boolean success = (Arrays.equals(mine, them));<br>        StringBuffer out = new StringBuffer();<br>        out.append("Example ");<br>        out.append((nbr+1));<br>        out.append(" - ");<br>        out.append(success ? "success" : "failure   ");<br>        if(!success) {<br>            out.append("Got: ");<br>            out.append("{");<br>            for(int x=0;x&lt;mine.length;x++) {<br>                out.append(mine[x]);<br>                if(x&lt;mine.length-1) out.append(", ");<br>            }<br>            out.append("}");<br>            out.append(", Expected: ");<br>            out.append("{");<br>            for(int x=0;x&lt;them.length;x++) {<br>                out.append(them[x]);<br>                if(x&lt;them.length-1) out.append(", ");<br>            }<br>            out.append("}");<br>        }<br>        System.out.println(out);<br>    }<br>    final void checkOutput(double[] mine, double[] them, int nbr) {<br>        boolean success = (Arrays.equals(mine, them));<br>        StringBuffer out = new StringBuffer();<br>        out.append("Example ");<br>        out.append((nbr+1));<br>        out.append(" - ");<br>        out.append(success ? "success" : "failure   ");<br>        if(!success) {<br>            out.append("Got: ");<br>            out.append("{");<br>            for(int x=0;x&lt;mine.length;x++) {<br>                out.append(mine[x]);<br>                if(x&lt;mine.length-1) out.append(", ");<br>            }<br>            out.append("}");<br>            out.append(", Expected: ");<br>            out.append("{");<br>            for(int x=0;x&lt;them.length;x++) {<br>                out.append(them[x]);<br>                if(x&lt;them.length-1) out.append(", ");<br>            }<br>            out.append("}");<br>        }<br>        System.out.println(out);<br>    }<br>    final void checkOutput(int[] mine, int[] them, int nbr) {<br>        boolean success = (Arrays.equals(mine, them));<br>        StringBuffer out = new StringBuffer();<br>        out.append("Example ");<br>        out.append((nbr+1));<br>        out.append(" - ");<br>        out.append(success ? "success" : "failure   ");<br>        if(!success) {<br>            out.append("Got: ");<br>            out.append("{");<br>            for(int x=0;x&lt;mine.length;x++) {<br>                out.append(mine[x]);<br>                if(x&lt;mine.length-1) out.append(", ");<br>            }<br>            out.append("}");<br>            out.append(", Expected: ");<br>            out.append("{");<br>            for(int x=0;x&lt;them.length;x++) {<br>                out.append(them[x]);<br>                if(x&lt;them.length-1) out.append(", ");<br>            }<br>            out.append("}");<br>        }<br>        System.out.println(out);<br>    }<br>    final void checkOutput(String[] mine, String[] them, int nbr) {<br>        boolean success = (Arrays.equals(mine, them));<br>        StringBuffer out = new StringBuffer();<br>        out.append("Example ");<br>        out.append((nbr+1));<br>        out.append(" - ");<br>        out.append(success ? "success" : "failure   ");<br>        if(!success) {<br>            out.append("Got: ");<br>            out.append("{");<br>            for(int x=0;x&lt;mine.length;x++) {<br>                out.append(mine[x]);<br>                if(x&lt;mine.length-1) out.append(", ");<br>            }<br>            out.append("}");<br>            out.append(", Expected: ");<br>            out.append("{");<br>            for(int x=0;x&lt;them.length;x++) {<br>                out.append(them[x]);<br>                if(x&lt;them.length-1) out.append(", ");<br>            }<br>            out.append("}");<br>        }<br>        System.out.println(out);<br>    }<br>    <br>    // -- End Cutting Here of the Main Method $&amp;%*@# --<br>    <br>}<br><br><br>// Powered by FileEdit<br>// Powered by CodeProcessor<br></td>