<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;math.h&gt;<br>#include &lt;queue&gt;<br>#include &lt;vector&gt;<br>#include &lt;string&gt;<br>#include &lt;iostream&gt;<br>using namespace std;<br> <br>typedef vector&lt;int&gt; VI;<br>typedef vector&lt;string&gt; VS;<br>typedef vector&lt;unsigned&gt; VU;<br>typedef long long LL;<br>typedef unsigned UI;<br>typedef unsigned long long UL;<br>#define FU(var, lo, hi)  for (unsigned var = (lo); var &lt; (hi); ++var)<br>#define FI(var, lo, hi)  for (int var = (lo); var &lt; (hi); ++var)<br>#define DISP(var) cerr &lt;&lt; "var: " &lt;&lt; var &lt;&lt; endl;<br>int mdays[13] = {0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};<br>int primes100[] = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53,<br>       59, 61, 67, 71, 73, 79, 83, 89, 97};<br>long long pow2[] = {1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096,<br>        8192, 16384, 32768, 65536};<br>vector&lt;string&gt; split(string food, string separators=" \t") {<br>  bool active = false;  int begin = -1;  vector&lt;string&gt; ret;<br>  for (size_t i = 0; i &lt; food.size(); ++i)<br>    if (active) {<br>      if (strchr(separators.c_str(), food[i]) != NULL)<br>  { ret.push_back(food.substr(begin, i-begin));  active = false; }<br>    }<br>    else if (strchr(separators.c_str(), food[i]) == NULL)<br>      { begin = i;  active = true; }<br>  if (active)  ret.push_back(food.substr(begin));<br>  return ret;<br>}<br>string toString(int d) { char ret[30];  sprintf(ret, "%d", d);  return ret; }<br>int toInt(string str) { int ret;  sscanf(str.c_str(), "%d", &amp;ret);  return ret; }<br> <br> <br>class PQit {<br>public:<br>  int d;<br>  int t;<br>  int x, y;<br>  bool operator&lt;(const PQit &amp;b) const {<br>    return t+d &gt; b.t+b.d;<br>  }<br>};<br> <br> <br>class AlgoHill {<br>public:<br>  int dist(int x1, int y1, int x2, int y2) {<br>    return abs(x1-x2) + abs(y1-y2);<br>  }<br> <br>  int delt(char h1) {<br>    if (h1 == 0)<br>      return 2;<br>    if (h1 &gt; 0)<br>      return 1;<br>    if (h1 &lt; 0)<br>      return 3;<br>  }<br> <br>  int astar(vector&lt;string&gt; hill, int sx, int sy, int gx, int gy) {<br>    priority_queue&lt;PQit&gt; pq;<br>    bool hit[60][60];<br>    FU (i, 0, 60)<br>      FU (j, 0, 60)      hit[i][j] = false;<br> <br>    PQit p, pp;<br>    int stopVal = 100000;<br>    p.x = sx;<br>    p.y = sy;<br>    p.t = 0;<br>    p.d = dist(p.x, p.y, gx, gy);<br>    pq.push(p);<br>    int count = 0;<br>    int X=hill[0].size(), Y=hill.size();<br>    while (!pq.empty()) {<br>      p = pq.top();  pq.pop();<br>      if (p.t+p.d &gt; stopVal) break;<br>      if (hit[p.y][p.x]) continue;<br>      hit[p.y][p.x] = true;<br>      count++;<br>      if (p.x == gx &amp;&amp; p.y == gy)<br>  stopVal = p.t+p.d;<br>      if (p.x &gt; 0) {<br>  pp.x = p.x-1;<br>  pp.y = p.y;<br>  pp.t = p.t + delt(hill[p.y][p.x] - hill[pp.y][pp.x]);<br>  pp.d = dist(pp.x, pp.y, gx, gy);<br>  pq.push(pp);<br>      }<br>      if (p.x+1 &lt; X) {<br>  pp.x = p.x+1;<br>  pp.y = p.y;<br>  pp.t = p.t + delt(hill[p.y][p.x] - hill[pp.y][pp.x]);<br>  pp.d = dist(pp.x, pp.y, gx, gy);<br>  pq.push(pp);<br>      }<br>      if (p.y &gt; 0) {<br>  pp.x = p.x;<br>  pp.y = p.y-1;<br>  pp.t = p.t + delt(hill[p.y][p.x] - hill[pp.y][pp.x]);<br>  pp.d = dist(pp.x, pp.y, gx, gy);<br>  pq.push(pp);<br>      }<br>      if (p.y+1 &lt; Y) {<br>  pp.x = p.x;<br>  pp.y = p.y+1;<br>  pp.t = p.t + delt(hill[p.y][p.x] - hill[pp.y][pp.x]);<br>  pp.d = dist(pp.x, pp.y, gx, gy);<br>  pq.push(pp);<br>      }<br>    }<br>    return count;<br>  }<br>};<br> <br> <br>// #include "cppio.h"<br>// #include &lt;sys/time.h&gt;<br>// #include &lt;unistd.h&gt;<br> <br>// int main(void) {<br>//   struct timeval tv1, tv2;<br>//   struct timezone tz;<br>//   CppInput i("AlgoHill.in", "Siiiii");<br>  <br>//   while (i.read()) {<br>//     cout &lt;&lt; "CPPIO: inputs:" &lt;&lt; endl;<br>//     cout &lt;&lt; "       " + o.print(i.stringArrays[0]) &lt;&lt; endl;<br>//     cout &lt;&lt; "       " + o.print(i.ints[0]) &lt;&lt; endl;<br>//     cout &lt;&lt; "       " + o.print(i.ints[1]) &lt;&lt; endl;<br>//     cout &lt;&lt; "       " + o.print(i.ints[2]) &lt;&lt; endl;<br>//     cout &lt;&lt; "       " + o.print(i.ints[3]) &lt;&lt; endl;<br>//     cout &lt;&lt; "CPPIO: complete." &lt;&lt; endl;<br>//     AlgoHill x;<br>//     gettimeofday(&amp;tv1, &amp;tz);<br>//     int ret = x.astar(i.stringArrays[0], i.ints[0], i.ints[1], i.ints[2], i.ints[3]);<br>//     gettimeofday(&amp;tv2, &amp;tz);<br>    <br>//     cout &lt;&lt; "ans: " &lt;&lt; o.print(i.ints[4]) &lt;&lt; endl;<br>//     cout &lt;&lt; "ret: " &lt;&lt; o.print(ret) &lt;&lt; endl;<br>//     cout &lt;&lt; "execution time: " &lt;&lt; tv2.tv_sec - tv1.tv_sec + 1e-6*(tv2.tv_usec - tv1.tv_usec) &lt;&lt; " sec." &lt;&lt; endl;<br>    <br>//     if (i.gotOutputCheck)<br>//       if (i.ints[4] == ret)<br>//         cout &lt;&lt; "answer checks OK!" &lt;&lt; endl;<br>//       else {<br>//         cout &lt;&lt; "answer INCORRECT INCORRECT INCORRECT INCORRECT INCORRECT INCORRECT INCORRECT!" &lt;&lt; endl;<br>//        for (int k = 0; k &lt; 5; ++k)  { cout &lt;&lt; '\a';  cout.flush();  usleep(200000); }<br>//       }<br>//     cout &lt;&lt; "=================================================" &lt;&lt; endl;<br>//   }<br>//   return 0;<br>// }<br> <br> <br>// Powered by FileEdit<br></td>