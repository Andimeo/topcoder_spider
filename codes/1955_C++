<td class="problemText" colspan="8" valign="middle" align="left">
            #include "vector"<br>#include "string"<br>#include "algorithm"<br>using namespace std;<br> <br>class Centipede {<br>public:<br>  vector &lt;string&gt; simulate(vector &lt;string&gt; screenLayout, int timeUnits);<br>};<br> <br>vector &lt;string&gt; Centipede::simulate(vector &lt;string&gt; screenLayout, int timeUnits)<br>{<br>  vector &lt;int&gt; x(10);<br>  vector &lt;int&gt; y(10);<br>  int i, dir = 1, steps = 0;<br>  <br>  for (i = 0; i &lt; 10; i++) {<br>    x[i] = 10 - i;<br>    y[i] = 0;<br>  }<br> <br>  while (y[9] &lt; screenLayout.size()) {<br>    for (i = 9; i &gt; 0; i--) {<br>      x[i] = x[i - 1];<br>      y[i] = y[i - 1];<br>    }<br>    if (y[0] != screenLayout.size()) {<br>      if (screenLayout[y[0]][x[0] + dir] == ' ') {<br>        x[0] += dir;<br>      } else {<br>        if (y[0] &lt; screenLayout.size() - 1) {<br>          dir = -dir;<br>          if (screenLayout[y[0] + 1][x[0]] == ' ') {<br>            y[0]++;<br>          }<br>        } else {<br>          y[0]++;<br>        }<br>      }<br>    }<br>    steps++;<br>  }<br> <br>  timeUnits %= steps;<br>  dir = 1;<br>  steps = 0;<br>  for (i = 0; i &lt; 10; i++) {<br>    x[i] = 10 - i;<br>    y[i] = 0;<br>  }<br> <br>  while (steps &lt; timeUnits) {<br>    for (i = 9; i &gt; 0; i--) {<br>      x[i] = x[i - 1];<br>      y[i] = y[i - 1];<br>    }<br>    if (y[0] != screenLayout.size()) {<br>      if (screenLayout[y[0]][x[0] + dir] == ' ') {<br>        x[0] += dir;<br>      } else {<br>        if (y[0] &lt; screenLayout.size() - 1) {<br>          dir = -dir;<br>          if (screenLayout[y[0] + 1][x[0]] == ' ') {<br>            y[0]++;<br>          }<br>        } else {<br>          y[0]++;<br>        }<br>      }<br>    }<br>    steps++;<br>  }<br> <br>  for (i = 0; i &lt; 10; i++)<br>    if (y[i] &lt; screenLayout.size())<br>      screenLayout[y[i]][x[i]] = 'x';<br>  return screenLayout;<br>}<br></td>