<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections;<br>using System.Text;<br>using System.Text.RegularExpressions;<br>using System.Collections.Specialized;<br><br>public class GoldMine {<br>  public GoldMine () {  }<br>  <br>  int[,] mine;<br>  int getScore(int curMine, int people)<br>  {<br>    int score = 0;<br>    for (int i = 0; i &lt;= people; i++)<br>    {<br>      score += (50 * i - 20*(people-i)) * mine[curMine, i];<br>    }<br>    for (int i = people+1; i &lt;= 6; i++)<br>    {<br>      score += 60 * people * mine[curMine, i];<br>    }<br>    return score;<br>    }<br>  public void check()<br>  {<br>    int score = 0;<br>    int[] my = new int[] { <br>      0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 1 };<br>    for (int i = 0; i &lt; my.Length; i++)<br>    {<br>      score += getScore(i, my[i]);<br>    }<br>    Console.WriteLine("My: {0}", score);<br>    int[] tc = new int[] {<br>      0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6<br>    };<br>    score = 0;<br>    for (int i = 0; i &lt; my.Length; i++)<br>    {<br>      score += getScore(i,tc[i]);<br>    }<br>    Console.WriteLine("TC: {0}", score);<br><br><br>  }<br><br>  public int [] getAllocation(string[] mines, int miners)<br>  {<br>    mine = new int[mines.Length, 7];<br>    for (int i = 0; i &lt; mines.Length; i++)<br>    {<br>      String[] items = mines[i].Split(new char[] { ',' });<br>      for (int ii = 0; ii &lt; items.Length; ii++)<br>      {<br>        mine[i, ii] = Int32.Parse(items[ii]);<br>      }<br>    }<br>//    check();<br>    int[] ret = new int[mines.Length];<br><br>    while (miners &gt; 0)<br>    {<br>      miners--;<br>      int best = -1;<br>      int profit = Int32.MinValue;<br>      for(int i=0;i&lt;ret.Length;i++) <br>        if (ret[i] &lt; 6)<br>        {<br>          int cur_profit = getScore(i, ret[i] + 1) - getScore(i, ret[i]);<br>          if (cur_profit &gt; profit)<br>          {<br>            best = i;<br>            profit = cur_profit;<br>          }<br>        }<br>      ret[best]++;<br>    }<br>    int p = 0;<br>    for (int i = 0; i &lt; ret.Length; i++)<br>    {<br>      int s = getScore(i, ret[i]);<br>      Console.WriteLine("Profit[{0}] =  {1}", i, s);<br>      p += s;<br>    }<br>    Console.WriteLine("Total Profit: {0}", p);<br>    return ret;<br>  }<br><br><br>}<br><br><br>// Powered by FileEdit<br></td>