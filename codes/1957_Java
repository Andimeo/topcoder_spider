<td class="problemText" colspan="8" valign="middle" align="left">
            // Oblok -- University of Utah<br><br>import java.util.*;<br><br>public class GoldMine<br>{<br>    public int[] getAllocation(String[] mm /*mines*/, int m2 /*miners*/)<br>    {<br>        int mmlen=mm.length;<br>        int c=0, count=0, i=0, j=0, k=0, l=0, x=0, y=0, z=0;<br>        char ch;<br>        String s; StringTokenizer st; Iterator it;<br>        int[] rv = new int[mmlen];<br><br>        int[][] pb;<br>        pb = new int[mmlen][7];<br><br>        int[][] v;<br>        v = new int[mmlen][7];<br><br>        for (i = 0; i &lt; mmlen; i++)<br>        {<br>          st = new StringTokenizer(mm[i], " ,");<br>          for (j = 0; j &lt; 7; j++)<br>            pb[i][j] = Integer.parseInt("1"+st.nextToken())-1000;<br>        }<br><br>        for (i = 0; i &lt; mmlen; i++)<br>          for (j = 0; j &lt; 7; j++)<br>            for (k = 0; k &lt; 7; k++)<br>            {<br>              if (j &lt; k) {v[i][j] += z = pb[i][k] * j * 60;}// println ("mine " + i + " workers " + j + " ore " + k + " profit " + z);}<br>              else if (j == k) {v[i][j] += z = pb[i][k] * j * 50;}//println ("mine " + i + " workers " + j + " ore " + k + " profit " + z);}<br>              else {v[i][j] += z = pb[i][k] * (k * 50 + (k-j) * 20);}//println ("mine " + i + " workers " + j + " ore " + k + " profit " + z);}<br>            }<br><br>         /*for (i = 0; i &lt; mmlen; i++)<br>         {<br>           for (j = 0; j &lt; 6; j++)<br>             print (" " + v[i][j]);<br>           println ("");<br>         }*/<br><br>        for (i = 0; i &lt; m2; i++)<br>        {<br>          int bestIncrease = -9999999;<br>          int bestMine = 0;<br><br>          for (j = 0; j &lt; mmlen; j++)<br>          {<br>            if (rv[j] == 6) continue;<br>            int increase = v[j][rv[j]+1] - v[j][rv[j]];<br>            if (increase &gt; bestIncrease)<br>            {<br>              bestIncrease = increase;<br>              bestMine = j;<br>            }<br>          }<br>          rv[bestMine]++;<br>        }<br><br>        return rv;<br>    }<br><br>    static public void main (String[] args)<br>    {<br>        /*{<br>        GoldMine tempObject = new GoldMine ();<br>        String[] mines = ;<br>        int miners = ;<br>        int[] result = tempObject.getAllocation (mines, miners);<br><br>        System.out.println ("Expected: ");<br>        System.out.print ("Received: ");<br>        String sep = "{ "; for (int ac = 0; ac &lt; result.length; ac++)<br>        {System.out.print (sep + result[ac]); sep = ",  ";}<br>        System.out.println (" }");<br>        }<br>        */<br>        {<br>        GoldMine tempObject = new GoldMine ();<br>        String[] mines = { "000, 030, 030, 040, 000, 000, 000",<br>  "020, 020, 020, 010, 010, 010, 010" };<br>        int miners = 4;<br>        int[] result = tempObject.getAllocation (mines, miners);<br><br>        System.out.println ("Expected: { 2,  2 }");<br>        System.out.print ("Received: ");<br>        String sep = "{ "; for (int ac = 0; ac &lt; result.length; ac++)<br>        {System.out.print (sep + result[ac]); sep = ",  ";}<br>        System.out.println (" }");<br>        }<br><br>        {<br>        GoldMine tempObject = new GoldMine ();<br>        String[] mines = { "100, 000, 000, 000, 000, 000, 000",<br>  "100, 000, 000, 000, 000, 000, 000",<br>  "100, 000, 000, 000, 000, 000, 000",<br>  "100, 000, 000, 000, 000, 000, 000",<br>  "100, 000, 000, 000, 000, 000, 000" };<br>        int miners = 8;<br>        int[] result = tempObject.getAllocation (mines, miners);<br><br>        System.out.println ("Expected: { 6,  2,  0,  0,  0 }");<br>        System.out.print ("Received: ");<br>        String sep = "{ "; for (int ac = 0; ac &lt; result.length; ac++)<br>        {System.out.print (sep + result[ac]); sep = ",  ";}<br>        System.out.println (" }");<br>        }<br><br>        {<br>        GoldMine tempObject = new GoldMine ();<br>        String[] mines = { "050, 000, 000, 000, 000, 050, 000",<br>  "050, 000, 000, 000, 000, 050, 000",<br>  "050, 000, 000, 000, 000, 050, 000",<br>  "050, 000, 000, 000, 000, 050, 000",<br>  "050, 000, 000, 000, 000, 050, 000",<br>  "050, 000, 000, 000, 000, 050, 000",<br>  "050, 000, 000, 000, 000, 050, 000",<br>  "050, 000, 000, 000, 000, 050, 000",<br>  "050, 000, 000, 000, 000, 050, 000",<br>  "050, 000, 000, 000, 000, 050, 000" };<br>        int miners = 30;<br>        int[] result = tempObject.getAllocation (mines, miners);<br><br>        System.out.println ("Expected: { 4,  4,  4,  4,  4,  4,  4,  2,  0,  0 }");<br>        System.out.print ("Received: ");<br>        String sep = "{ "; for (int ac = 0; ac &lt; result.length; ac++)<br>        {System.out.print (sep + result[ac]); sep = ",  ";}<br>        System.out.println (" }");<br>        }<br><br>        {<br>        GoldMine tempObject = new GoldMine ();<br>        String[] mines = { "026, 012, 005, 013, 038, 002, 004",<br>  "026, 012, 005, 013, 038, 002, 004",<br>  "026, 012, 005, 013, 038, 002, 004",<br>  "026, 012, 005, 013, 038, 002, 004",<br>  "026, 012, 005, 013, 038, 002, 004",<br>  "026, 012, 005, 013, 038, 002, 004",<br>  "026, 012, 005, 013, 038, 002, 004",<br>  "026, 012, 005, 013, 038, 002, 004",<br>  "026, 012, 005, 013, 038, 002, 004",<br>  "026, 012, 005, 013, 038, 002, 004",<br>  "026, 012, 005, 013, 038, 002, 004",<br>  "026, 012, 005, 013, 038, 002, 004",<br>  "026, 012, 005, 013, 038, 002, 004",<br>  "026, 012, 005, 013, 038, 002, 004",<br>  "026, 012, 005, 013, 038, 002, 004",<br>  "026, 012, 005, 013, 038, 002, 004",<br>  "026, 012, 005, 013, 038, 002, 004",<br>  "026, 012, 005, 013, 038, 002, 004",<br>  "026, 012, 005, 013, 038, 002, 004",<br>  "026, 012, 005, 013, 038, 002, 004",<br>  "026, 012, 005, 013, 038, 002, 004",<br>  "026, 012, 005, 013, 038, 002, 004",<br>  "026, 012, 005, 013, 038, 002, 004",<br>  "026, 012, 005, 013, 038, 002, 004",<br>  "026, 012, 005, 013, 038, 002, 004",<br>  "026, 012, 005, 013, 038, 002, 004",<br>  "026, 012, 005, 013, 038, 002, 004",<br>  "026, 012, 005, 013, 038, 002, 004",<br>  "026, 012, 005, 013, 038, 002, 004",<br>  "026, 012, 005, 013, 038, 002, 004",<br>  "026, 012, 005, 013, 038, 002, 004",<br>  "026, 012, 005, 013, 038, 002, 004",<br>  "026, 012, 005, 013, 038, 002, 004",<br>  "026, 012, 005, 013, 038, 002, 004",<br>  "026, 012, 005, 013, 038, 002, 004",<br>  "026, 012, 005, 013, 038, 002, 004",<br>  "026, 012, 005, 013, 038, 002, 004",<br>  "026, 012, 005, 013, 038, 002, 004",<br>  "026, 012, 005, 013, 038, 002, 004",<br>  "026, 012, 005, 013, 038, 002, 004",<br>  "026, 012, 005, 013, 038, 002, 004",<br>  "026, 012, 005, 013, 038, 002, 004",<br>  "026, 012, 005, 013, 038, 002, 004",<br>  "026, 012, 005, 013, 038, 002, 004",<br>  "026, 012, 005, 013, 038, 002, 004",<br>  "026, 012, 005, 013, 038, 002, 004",<br>  "026, 012, 005, 013, 038, 002, 004",<br>  "026, 012, 005, 013, 038, 002, 004",<br>  "026, 012, 005, 013, 038, 002, 004",<br>  "026, 012, 005, 013, 038, 002, 004" };<br>        int miners = 56;<br>        int[] result = tempObject.getAllocation (mines, miners);<br><br>        System.out.println ("Expected: { 2,  2,  2,  2,  2,  2,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1 }");<br>        System.out.print ("Received: ");<br>        String sep = "{ "; for (int ac = 0; ac &lt; result.length; ac++)<br>        {System.out.print (sep + result[ac]); sep = ",  ";}<br>        System.out.println (" }");<br>        }<br><br>        {<br>        GoldMine tempObject = new GoldMine ();<br>        String[] mines = { "100, 000, 000, 000, 000, 000, 000",<br>  "090, 010, 000, 000, 000, 000, 000",<br>  "080, 020, 000, 000, 000, 000, 000",<br>  "075, 025, 000, 000, 000, 000, 000",<br>  "050, 050, 000, 000, 000, 000, 000",<br>  "025, 075, 000, 000, 000, 000, 000",<br>  "020, 080, 000, 000, 000, 000, 000",<br>  "010, 090, 000, 000, 000, 000, 000",<br>  "000, 100, 000, 000, 000, 000, 000",<br>  "000, 090, 010, 000, 000, 000, 000",<br>  "000, 080, 020, 000, 000, 000, 000",<br>  "000, 075, 025, 000, 000, 000, 000",<br>  "000, 050, 050, 000, 000, 000, 000",<br>  "000, 025, 075, 000, 000, 000, 000",<br>  "000, 020, 080, 000, 000, 000, 000",<br>  "000, 010, 090, 000, 000, 000, 000",<br>  "000, 000, 100, 000, 000, 000, 000",<br>  "000, 000, 090, 010, 000, 000, 000",<br>  "000, 000, 080, 020, 000, 000, 000",<br>  "000, 000, 075, 025, 000, 000, 000",<br>  "000, 000, 050, 050, 000, 000, 000",<br>  "000, 000, 025, 075, 000, 000, 000",<br>  "000, 000, 020, 080, 000, 000, 000",<br>  "000, 000, 010, 090, 000, 000, 000",<br>  "000, 000, 000, 100, 000, 000, 000",<br>  "000, 000, 000, 100, 000, 000, 000",<br>  "000, 000, 000, 090, 010, 000, 000",<br>  "000, 000, 000, 080, 020, 000, 000",<br>  "000, 000, 000, 075, 025, 000, 000",<br>  "000, 000, 000, 050, 050, 000, 000",<br>  "000, 000, 000, 025, 075, 000, 000",<br>  "000, 000, 000, 020, 080, 000, 000",<br>  "000, 000, 000, 010, 090, 000, 000",<br>  "000, 000, 000, 000, 100, 000, 000",<br>  "000, 000, 000, 000, 090, 010, 000",<br>  "000, 000, 000, 000, 080, 020, 000",<br>  "000, 000, 000, 000, 075, 025, 000",<br>  "000, 000, 000, 000, 050, 050, 000",<br>  "000, 000, 000, 000, 025, 075, 000",<br>  "000, 000, 000, 000, 020, 080, 000",<br>  "000, 000, 000, 000, 010, 090, 000",<br>  "000, 000, 000, 000, 000, 100, 000",<br>  "000, 000, 000, 000, 000, 090, 010",<br>  "000, 000, 000, 000, 000, 080, 020",<br>  "000, 000, 000, 000, 000, 075, 025",<br>  "000, 000, 000, 000, 000, 050, 050",<br>  "000, 000, 000, 000, 000, 025, 075",<br>  "000, 000, 000, 000, 000, 020, 080",<br>  "000, 000, 000, 000, 000, 010, 090",<br>  "000, 000, 000, 000, 000, 000, 100" };<br>        int miners = 150;<br>        int[] result = tempObject.getAllocation (mines, miners);<br><br>        System.out.println ("Expected: { 0,  0,  0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  2,  2,  2,  2,  2,  2,  2,  2,  3,  3,  3,  3,  3,  3,  3,  3,  3,  4,  4,  4,  4,  4,  4,  4,  4,  4,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  6,  6 }");<br>        System.out.print ("Received: ");<br>        String sep = "{ "; for (int ac = 0; ac &lt; result.length; ac++)<br>        {System.out.print (sep + result[ac]); sep = ",  ";}<br>        System.out.println (" }");<br>        }<br><br>        /*{<br>        GoldMine tempObject = new GoldMine ();<br>        String[] mines = ;<br>        int miners = ;<br>        int[] result = tempObject.getAllocation (mines, miners);<br><br>        System.out.println ("Expected: ");<br>        System.out.print ("Received: ");<br>        String sep = "{ "; for (int ac = 0; ac &lt; result.length; ac++)<br>        {System.out.print (sep + result[ac]); sep = ",  ";}<br>        System.out.println (" }");<br>        }<br>        */<br>    }<br>    public String[] tokenize (String s)<br>    {<br>        // P. Jensen's (Oblok's) library code -- Copyright 2003.  Converts<br>        //   a string into an array of its delimited tokens.<br>        StringTokenizer st=new StringTokenizer(s," ");<br>        String[] rv=new String[st.countTokens()];<br>        for (int i=0;i&lt;rv.length;i++)rv[i]=st.nextToken();<br>        return rv;<br>    }<br><br>    public String[][] tokenize (String s[])<br>    {<br>        // P. Jensen's (Oblok's) library code -- Copyright 2003.  Converts<br>        //   a string array into arrays of its delimited tokens.<br>        String[][] rv = new String[s.length][];<br>        for (int j=0;j&lt;s.length;j++){<br>          StringTokenizer st=new StringTokenizer(s[j]," ");<br>          rv[j]=new String[st.countTokens()];<br>          for (int i=0;i&lt;rv[j].length;i++)rv[j][i]=st.nextToken();}<br>        return rv;<br>    }<br><br>    static public char[] charize (String s)<br>    {<br>        // P. Jensen's (Oblok's) library code -- Too simple to comment.<br>        return s.toCharArray();<br>    }<br><br>    static public char[][] charize (String[] s)<br>    {<br>        // P. Jensen's (Oblok's) library code -- Copyright 2003.  Converts<br>        //   a string array into arrays of its characters.<br>        char[][] rv = new char[s.length][];<br>        for (int i=0;i&lt;s.length;i++)<br>          rv[i]=s[i].toCharArray();<br>        return rv;<br>    }<br><br>    public int[] valueize (String s)<br>    {<br>        // P. Jensen's (Oblok's) library code -- Copyright 2003.  Converts<br>        //   the string tokens to an array of integers, replacing invalid<br>        //   values with MIN_VALUE.<br>        String[] t=tokenize(s);<br>        int[] rv=new int[t.length];<br>        for (int i=0;i&lt;t.length;i++)<br>          try{rv[i]=Integer.parseInt(t[i]);}catch(NumberFormatException e){rv[i]=Integer.MIN_VALUE;}<br>        return rv;<br>    }<br>    public int[][] valueize (String s[])<br>    {<br>        // P. Jensen's (Oblok's) library code -- Copyright 2003.  Converts<br>        //   the array of string tokens to arrays of integers, replacing invalid<br>        //   values with MIN_VALUE.<br>        int[][] rv=new int[s.length][];<br>        for (int i=0;i&lt;s.length;i++)<br>          rv[i]=valueize(s[i]);<br>        return rv;<br>    }<br>    public void print (String s){System.out.print(s);}<br>    public void println (String s){System.out.println(s);}<br>}<br></td>