<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;iostream&gt;<br>#include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;functional&gt;<br>#include &lt;numeric&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cmath&gt;<br>#include &lt;queue&gt;<br>using namespace std;<br>typedef vector&lt;int&gt; VI;  typedef vector&lt;vector&lt;int&gt; &gt; VVI;<br>typedef vector&lt;string&gt; VS;  typedef vector&lt;vector&lt;string&gt; &gt; VVS;<br>typedef signed long long i64;  typedef unsigned long long u64;<br><br>class TreasureHunt {<br>public:<br>vector &lt;int&gt; findTreasure(vector &lt;string&gt; a, vector &lt;string&gt; b) {<br>  int i, j, k, x, y, z, n, tx, ty, best = 1000000000, cx, cy;<br>  vector &lt;int&gt; ret;<br>  string s;<br>  for( i = 0; i &lt; a.size(); i++ ) a[i] = "." + a[i] + ".";<br>  for( i = 0; i &lt; a[0].size(); i++ ) s += '.';<br>  a.insert(a.begin(), s);<br>  a.insert(a.end(), s);<br>  for( y = 0; y &lt; a.size(); y++ )<br>  for( x = 0; x &lt; a[y].size(); x++ )<br>    if( a[y][x] == 'X' ) {ty = y; tx = x;}<br>  for( y = 0; y &lt; a.size(); y++ )<br>  for( x = 0; x &lt; a[y].size(); x++ ) if( a[y][x] != '.' )<br>    if( a[y][x-1] == '.' || a[y][x+1] == '.' ||<br>      a[y-1][x] == '.' || a[y+1][x] == '.' ) {<br>      cx = x; cy = y;<br>      for( i = 0; i &lt; b.size(); i++ ) {<br>        int dx=0, dy=0;<br>        if( b[i][0] == 'W' ) dx = -1;<br>        if( b[i][0] == 'E' ) dx = 1;<br>        if( b[i][0] == 'N' ) dy = -1;<br>        if( b[i][0] == 'S' ) dy = 1;<br>        for( j = atoi(b[i].c_str()+2); j &gt; 0; j-- ) {<br>          cy += dy; cx += dx;<br>          if( a[cy][cx] == '.' ) goto fail;<br>        }<br>      }<br>      z = (cx-tx)*(cx-tx)+(cy-ty)*(cy-ty);<br>      if( z &lt; best ) {<br>        best = z;<br>        ret = VI(2);<br>        ret[0] = cx-1;<br>        ret[1] = cy-1;<br>      }<br>fail:    ;<br>    }<br>  return ret;<br>}<br>};<br><br><br>// Powered by FileEdit<br></td>