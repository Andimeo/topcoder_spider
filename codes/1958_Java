<td class="problemText" colspan="8" valign="middle" align="left">
            /*/*///*/*/ Powered by radedit!            /*/*/*/*/*/ ;<br>/*/*//*/*/  import java . util .           /*/*/*/*/*/ ;<br>/*/*//*/*/  import java . lang . reflect . /*/*/*/*/*/ ;<br>public class TreasureHunt {<br>   boolean ddd = false ;<br>/*sa2caab */<br>char[][] sa2caa(String[] s, char b) {<br>  char[][] r = new char[s.length+2][] ;<br>  for (int i=0; i&lt;s.length; i++) {<br>    r[i+1] = (b + s[i] + b).toCharArray() ;<br>  }<br>  r[0] = new char[s[0].length()+2] ;<br>  r[1+s.length] = new char[s[0].length()+2] ;<br>  for (int i=0; i&lt;s[0].length()+2; i++) {<br>    r[0][i] = r[1+s.length][i] = b ;<br>  }<br>  return r ;<br>}<br>  int dx[] = { 0, 0, 1, -1 } ;<br>  int dy[] = { -1, 1, 0, 0 } ;<br>  public int[] findTreasure(String[] island, String[] instructions) {<br>    int i, j, k ;<br>    char[][] b = sa2caa(island, '.') ;<br>    int tx=0, ty=0 ;<br>    for (int y=1; y+1&lt;b.length; y++) {<br>      for (int x=1; x+1&lt;b[0].length; x++) {<br>  if (b[y][x] == 'X') {<br>    tx = x ;<br>    ty = y ;<br>  }<br>      }<br>    }<br>    int bestdist = 1000000000 ;<br>    int[] r = new int[0] ;<br>    for (int y=1; y+1&lt;b.length; y++) {<br>      for (int x=1; x+1&lt;b[0].length; x++) {<br>  int xx = x ;<br>  int yy = y ;<br>  if (b[yy][xx] == '.') {<br>    continue ;<br>  }<br>  boolean beach = false ;<br>  for (i=0; i&lt;4; i++) {<br>    if (b[yy+dy[i]][xx+dx[i]] == '.') {<br>      beach = true ;<br>    }<br>  }<br>  if (!beach) {<br>    continue ;<br>  }<br>  try {<br>  for (i=0; i&lt;instructions.length; i++) {<br>    String s = instructions[i] ;<br>    int len = Integer.parseInt(s.substring(2)) ;<br>    int dir = "NSEW".indexOf(s.charAt(0)) ;<br>    for (j=0; j&lt;=len; j++) {<br>      int xxx = xx + j * dx[dir] ;<br>      int yyy = yy + j * dy[dir] ;<br>      if (b[yyy][xxx] == '.') {<br>        throw new Exception() ;<br>      }<br>    }<br>    xx = xx + len * dx[dir] ;<br>    yy = yy + len * dy[dir] ;<br>  }<br>  int t = (xx - tx) * (xx - tx) + (yy - ty) * (yy - ty) ;<br>  if (t &lt; bestdist) {<br>    bestdist = t ;<br>    r = new int[2] ;<br>    r[0] = xx - 1 ;<br>    r[1] = yy - 1 ;<br>  }<br>  } catch (Exception e) {}<br>      }<br>    }<br>      return r ;<br>  }<br> <br>  static void pp(Object o) { System.out.println(o) ; }<br>}<br></td>