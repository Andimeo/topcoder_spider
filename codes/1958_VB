<td class="problemText" colspan="8" valign="middle" align="left">
            Imports Microsoft.VisualBasic<br>Imports System.Math<br>Imports System<br>Imports System.Collections<br>Imports System.Text<br> <br>Public Class TreasureHunt<br>    Dim map(,) As Char<br>    Dim wid, hei As Integer<br> <br>    Private Structure instruct<br>        Dim dx As Integer<br>        Dim dy As Integer<br>        Dim d As Integer<br>    End Structure<br> <br>    Public Function findTreasure(ByVal island As String(), ByVal instructions As String()) As Integer()<br>        Dim x, y, a, b As Integer<br>        Dim got As Boolean<br>        Dim bx, by, cx, cy, tx, ty As Integer<br>        Dim dist As Double<br> <br>        wid = island(0).Length<br>        hei = island.Length<br>        ReDim map(wid - 1, hei - 1)<br> <br>        For y = 0 To hei - 1<br>            For x = 0 To wid - 1<br>                map(x, y) = island(y).Chars(x)<br>                If map(x, y) = "X" Then<br>                    tx = x<br>                    ty = y<br>                End If<br>            Next<br>        Next<br> <br>        Dim ins(instructions.Length - 1) As instruct<br>        For a = 0 To instructions.Length - 1<br>            ins(a).d = CInt(CStr(instructions(a).Chars(2)))<br>            Select Case instructions(a).Chars(0)<br>                Case "N"<br>                    ins(a).dx = 0<br>                    ins(a).dy = -1<br>                Case "E"<br>                    ins(a).dx = 1<br>                    ins(a).dy = 0<br>                Case "W"<br>                    ins(a).dx = -1<br>                    ins(a).dy = 0<br>                Case "S"<br>                    ins(a).dx = 0<br>                    ins(a).dy = 1<br>            End Select<br>        Next<br> <br>        For y = 0 To hei - 1<br>            For x = 0 To wid - 1<br>                cx = x<br>                cy = y<br>                If map(cx, cy) = "X" OrElse map(cx, cy) = "O" Then<br>                    If cx = 0 OrElse cx = wid - 1 OrElse cy = 0 OrElse cy = hei - 1 OrElse map(cx - 1, cy) = "." OrElse map(cx + 1, cy) = "." OrElse map(cx, cy - 1) = "." OrElse map(cx, cy + 1) = "." Then<br>                        For a = 0 To ins.Length - 1<br>                            For b = 1 To ins(a).d<br>                                cx += ins(a).dx<br>                                cy += ins(a).dy<br>                                If Not valid(cx, cy) Then GoTo CONT<br>                            Next<br>                        Next<br>                        Dim d As Double = Sqrt((tx - cx) * (tx - cx) + (ty - cy) * (ty - cy))<br>                        If got = False OrElse d &lt; dist Then<br>                            dist = d<br>                            got = True<br>                            bx = cx<br>                            by = cy<br>                        End If<br>                    End If<br>                End If<br>CONT:<br>            Next<br>        Next<br>        If got Then<br>            Return New Integer() {bx, by}<br>        Else<br>            Return New Integer() {}<br>        End If<br>    End Function<br> <br>    Private Function valid(ByVal x As Integer, ByVal y As Integer) As Boolean<br>        If x &lt; 0 OrElse x &gt;= wid OrElse y &lt; 0 OrElse y &gt;= hei Then Return False<br>        If map(x, y) = "X" OrElse map(x, y) = "O" Then Return True<br>        Return False<br>    End Function<br>End Class<br></td>