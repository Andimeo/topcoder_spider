<td class="problemText" colspan="8" valign="middle" align="left">
            //program framework generated with WishingBone's parser :)-<br> <br>//common header<br>#ifdef WIN32<br>#  pragma warning(disable:4786)<br>#  define for if (0); else for<br>#endif<br>#include &lt;iostream&gt;<br>#include &lt;sstream&gt;<br>#include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;deque&gt;<br>#include &lt;set&gt;<br>#include &lt;map&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;utility&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cstring&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdlib&gt;<br> <br>using namespace std;<br> <br>//64 bit integer definition<br>#ifdef WIN32<br>#define in_routine(type,spec) \<br>istream&amp; operator&gt;&gt;(istream&amp; s,type &amp;d){char b[30];s&gt;&gt;b;sscanf(b,spec,&amp;d);return s;}<br>#define out_routine(type,spec) \<br>ostream&amp; operator&lt;&lt;(ostream&amp; s,type d){char b[30];sprintf(b,spec,d);s&lt;&lt;b;return s;}<br>typedef signed __int64 i64; in_routine(i64,"%I64d") out_routine(i64,"%I64d")<br>typedef unsigned __int64 u64; in_routine(u64,"%I64u") out_routine(u64,"%I64u")<br>#else<br>typedef signed long long i64;<br>typedef unsigned long long u64;<br>#endif<br> <br>//common routines<br>#ifdef WIN32<br>#define min(a,b) _cpp_min(a,b)<br>#define max(a,b) _cpp_max(a,b)<br>#endif<br>#define abs(a) ((a)&gt;0?(a):-(a))<br>#define s2d(s,d) {istringstream(s)&gt;&gt;d;}<br>#define d2s(d,s) {ostringstream t;t&lt;&lt;d;s=t.str();}<br>int gcd(int a,int b){for(int c;b;c=a,a=b,b=c%b);return a;}<br>int lcm(int a,int b){return a/gcd(a,b)*b;}<br> <br>//remove routine<br>template &lt;class T&gt;<br>void remove(vector&lt;T&gt;&amp; v,const T&amp;e){<br>  v.resize(remove(v.begin(),v.end(),e)-v.begin());<br>}<br>template &lt;class T&gt;<br>vector&lt;T&gt; remove_copy(vector&lt;T&gt;&amp; v,const T&amp;e){<br>  vector&lt;T&gt; result;<br>  remove_copy(v.begin(),v.end(),back_inserter(result),e);<br>  return result;<br>}<br> <br>//output routine<br>ostream&amp; operator&lt;&lt;(ostream&amp; s,string d){<br>  s&lt;&lt;'\"'&lt;&lt;d.c_str()&lt;&lt;'\"';<br>  return s;<br>}<br>template &lt;class T&gt;<br>ostream&amp; operator&lt;&lt;(ostream&amp; s,vector&lt;T&gt; d){<br>  s&lt;&lt;"{";<br>  for (typename vector&lt;T&gt;::iterator i=d.begin();i!=d.end();i++)<br>    s&lt;&lt;(i!=d.begin()?",":"")&lt;&lt;*i;<br>  s&lt;&lt;"}";<br>  return s;<br>}<br> <br>//parsing routine<br>template &lt;class T&gt;<br>vector&lt;basic_string&lt;T&gt; &gt; parse(const basic_string&lt;T&gt; &amp;s,const basic_string&lt;T&gt; &amp;delim){<br>  vector&lt;basic_string&lt;T&gt; &gt; ret(0);<br>  for (int b,e=0;;ret.push_back(s.substr(b,e-b)))<br>    if ((b=s.find_first_not_of(delim,e))==(e=s.find_first_of(delim,b)))<br>      return ret;<br>}<br>vector&lt;int&gt; intparse(const string &amp;s,const string &amp;delim=" \t\n"){<br>  vector&lt;string&gt; tmp=parse(s,delim);<br>  vector&lt;int&gt; ret(0);<br>  int t;<br>  for (vector&lt;string&gt;::iterator i=tmp.begin();i!=tmp.end();i++)<br>    sscanf(i-&gt;c_str(),"%d",&amp;t),ret.push_back(t);<br>  return ret;<br>}<br> <br>//name mapper<br>class mapper{<br>public:<br>  map&lt;string,int&gt; m;<br>  vector&lt;string&gt; v;<br>  void reset(){<br>    v.clear();<br>    m.clear();<br>  }<br>  int size(){<br>    return v.size();<br>  }<br>  int get(const string str){<br>    if (m.find(str)==m.end()){<br>      m[str]=v.size();<br>      v.push_back(str);<br>    }<br>    return m[str];<br>  }<br>  string get(int i){<br>    return v[i];<br>  }<br>  vector&lt;int&gt; get(const vector&lt;string&gt;&amp; strs){<br>    vector&lt;int&gt; ret;<br>    ret.reserve(strs.size()+2);<br>    for(int i=0;i&lt;strs.size();i++)<br>      ret.push_back(get(strs[i]));<br>    return ret;<br>  }<br>  vector&lt;string&gt; get(const vector&lt;int&gt;&amp; is){<br>    vector&lt;string&gt; ret;<br>    ret.reserve(is.size()+2);<br>    for(int i=0;i&lt;is.size();i++)<br>      ret.push_back(get(is[i]));<br>    return ret;<br>  }<br>};<br> <br>class point {<br>public:<br>  double x, y;<br>  point() {<br>  }<br>  point(double x, double y) : x(x), y(y) {<br>  }<br>  point operator-(point p) {<br>    return point(x - p.x, y - p.y);<br>  }<br>  double operator*(point p) {<br>    return x * p.y - y * p.x;<br>  }<br>};<br> <br>#define eps 1e-8<br>#define zero(x) (((x)&gt;0?(x):-(x))&lt;eps)<br> <br>double xmult(point p1,point p2,point p0){<br>  return (p1.x-p0.x)*(p2.y-p0.y)-(p2.x-p0.x)*(p1.y-p0.y);<br>}<br> <br>point p1,p2;<br>int graham_cp(const void* a,const void* b){<br>  double ret=xmult(*((point*)a),*((point*)b),p1);<br>  return zero(ret)?(xmult(*((point*)a),*((point*)b),p2)&gt;0?1:-1):(ret&gt;0?1:-1);<br>}<br>void _graham(int n,point* p,int&amp; s,point* ch){<br>  int i,k=0;<br>  for (p1=p2=p[0],i=1;i&lt;n;p2.x+=p[i].x,p2.y+=p[i].y,i++)<br>    if (p1.y-p[i].y&gt;eps||(zero(p1.y-p[i].y)&amp;&amp;p1.x&gt;p[i].x))<br>      p1=p[k=i];<br>  p2.x/=n,p2.y/=n;<br>  p[k]=p[0],p[0]=p1;<br>  qsort(p+1,n-1,sizeof(point),graham_cp);<br>  for (ch[0]=p[0],ch[1]=p[1],ch[2]=p[2],s=i=3;i&lt;n;ch[s++]=p[i++])<br>    for (;s&gt;2&amp;&amp;xmult(ch[s-2],p[i],ch[s-1])&lt;-eps;s--);<br>}<br> <br>int graham(int n,point* p,point* convex,int maxsize=1,int dir=1){<br>  point* temp=new point[n];<br>  int s,i;<br>  _graham(n,p,s,temp);<br>  for (convex[0]=temp[0],n=1,i=(dir?1:(s-1));dir?(i&lt;s):i;i+=(dir?1:-1))<br>    if (maxsize||!zero(xmult(temp[i-1],temp[i],temp[(i+1)%s])))<br>      convex[n++]=temp[i];<br>  delete []temp;<br>  return n;<br>}<br> <br>double area(point a, point b, point c) {<br>  return fabs((a - c) * (b - c)) / 2;<br>}<br> <br>class ElectronicScarecrows{<br>public:<br>  int n;<br>  int m;<br>  point ch[100], p[100];<br>  double dp() {<br>    double mat[100][100];<br>    double ret = 0;<br>    for (int i = 1; i &lt; n; ++i) {<br>      for (int j = 0; j &lt;= m; ++j) {<br>      mat[i][j] = 0;<br>      if (j &gt; 0) {<br>        for (int k = 1; k &lt; i; ++k) {<br>          double t = mat[k][j - 1] + area(p[0], p[k], p[i]);<br>          if (t &gt; mat[i][j]) mat[i][j] = t;<br>        }<br>      }<br>      if (mat[i][j] &gt; ret) ret = mat[i][j];<br>      }<br>    }<br>    return ret;<br>  }<br>  double calc() {<br>    double ret = 0;<br>    for (int i = 0; i &lt; n; ++i) {<br>      for (int j = 0; j &lt; n; ++j) p[(i + j) % n] = ch[j];<br>      double t = dp();<br>      if (t &gt; ret) ret = t;<br>    }<br>    return ret;<br>  }<br>  double largestArea(vector&lt;int&gt; x,vector&lt;int&gt; y,int mm){<br>    n = x.size();<br>    point p[100];<br>    for (int i = 0; i &lt; n; ++i) p[i] = point(x[i], y[i]);<br>    n = graham(n, p, ch, 0);<br>    mm -= 2;<br>    if (mm &gt; n) mm = n;<br>    m = mm;<br>    return calc();<br>  }<br>};<br></td>