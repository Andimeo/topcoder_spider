<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>public class ImmutableTrees {<br>  class Node {<br>    boolean notGarbage;<br>    int element;<br>    Node leftChild;<br>    Node rightChild;<br>    <br>    public Node(int element) {<br>      this.element = element; notGarbage = false;<br>      leftChild = null; rightChild = null;<br>    }<br>    <br>    public Node(Node other) {<br>      element = other.element; notGarbage = false;<br>      leftChild = other.leftChild; rightChild = other.rightChild;<br>    }<br>    <br>    public void markNotGarbage() {<br>      if (notGarbage) return;<br>      notGarbage = true;<br>      ct++;<br>      if (leftChild != null) leftChild.markNotGarbage();<br>      if (rightChild != null) rightChild.markNotGarbage();<br>    }<br>  }<br>  <br>  class Tree {<br>    Node root;<br>    <br>    public Tree(int oldTree, int valToInsert) {<br>      if (oldTree == -1) {<br>        root = new Node(valToInsert);  <br>        return;<br>      }<br>      <br>      Tree old = trees[oldTree];<br>      root = new Node(old.root);<br>      doit(root, valToInsert);<br>    }<br>    <br>    public void doit(Node n, int valToInsert) {<br>      if (n.element &gt; valToInsert) {<br>        if (n.leftChild == null) {<br>          n.leftChild = new Node(valToInsert);  <br>        }<br>        else {<br>          Node node = new Node(n.leftChild);<br>          n.leftChild = node;<br>          doit(node, valToInsert);<br>        }<br>        return;<br>      }<br>      <br>      if (n.rightChild == null) {<br>        n.rightChild = new Node(valToInsert);  <br>      }<br>      else {<br>        Node node = new Node(n.rightChild);<br>        n.rightChild = node;<br>        doit(node, valToInsert);<br>      }<br>    }<br>    <br>    public void markNotGarbage() {<br>      root.markNotGarbage();  <br>    }<br>  }<br>  <br>  Tree trees[];<br>  int ct=0;<br>  <br>  public int numNodes(int[] v, int[] t, int[] garbage) {<br>    trees = new Tree[t.length];<br>    for (int i=0; i&lt;v.length; i++) {<br>      trees[i] = new Tree(t[i], v[i]);  <br>    }<br>    HashSet garbageSet = new HashSet();<br>    for (int i=0; i&lt;garbage.length; i++) {<br>      garbageSet.add(new Integer(garbage[i]));<br>    }<br>    for (int i=0; i&lt;v.length; i++) {<br>      if (garbageSet.contains(new Integer(i))) continue;<br>      trees[i].markNotGarbage();<br>    }<br>    return ct;<br>  }<br>}<br> <br>// Powered by PopsEdit<br></td>