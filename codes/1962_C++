<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;iostream&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cctype&gt;<br>#include &lt;numeric&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;iterator&gt;<br>#include &lt;functional&gt;<br>#include &lt;sstream&gt;<br> <br>#define ALL(C) (C).begin(), (C).end()<br>#define forIt(I, C) for ( typeof((C).begin()) I=(C).begin(); I!=(C).end(); ++I)<br>#define forN(I, C) for (int I=0; I&lt;(C); ++(I) )<br>#define forEach(I, C) forN(I, int((C).size()))<br> <br>using namespace std;<br> <br>typedef vector&lt;string&gt; VS;  <br>typedef vector&lt;vector&lt;string&gt; &gt; VVS;<br>typedef vector&lt;int&gt; VI;<br>typedef vector&lt;vector&lt;int&gt; &gt; VVI;<br> <br>typedef string::iterator SIT;<br>typedef vector&lt;string&gt;::iterator VSIT;<br>typedef vector&lt;int&gt;::iterator VIIT;<br> <br>class PassingGrade {<br>  public:<br>  <br>  int pointsNeeded(vector &lt;int&gt; pointsEarned, vector &lt;int&gt; pointsPossible, int finalExam) <br>  {<br>    int ret=0;<br>    int totalpoints = accumulate(pointsPossible.begin(), pointsPossible.end(), 0) + finalExam;<br>    int totalpe = accumulate(pointsEarned.begin(), pointsEarned.end(), 0);<br>    for (int i=0; i&lt;=finalExam; ++i) {<br>      if (((float)totalpe / (float)totalpoints)*100 &gt;= 65.0) return ret;<br>      ++totalpe;<br>      ++ret;<br>    }<br>    <br>    return -1;<br>  }<br>};<br> <br>// Powered by PopsEdit<br></td>