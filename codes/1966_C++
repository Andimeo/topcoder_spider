<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;map&gt; // find lower_bound count<br>#include &lt;set&gt; // insert<br>#include &lt;vector&gt;<br>#include &lt;string&gt;<br>#include &lt;cassert&gt; // assert<br>#include &lt;cctype&gt; // toupper tolower isupper isalpha isalnum isdigit<br>#include &lt;iostream&gt;<br>#include &lt;sstream&gt;<br>#include &lt;algorithm&gt; // next_permutation<br>#include &lt;functional&gt; // accumulate<br>#include &lt;numeric&gt;<br>using namespace std;<br><br>#define ALL(C) (C).begin(),(C).end()<br>#define forN(I,N) for(int I=0; I&lt;(N); ++I)<br>#define SZ(C) int((C).size())<br>#define forEach(I,C) forN(I,SZ(C))<br>#define forEach2(I,J,C) forEach(I,C)forEach(J,(C)[I])<br>#define IT(C) typeof((C).begin())<br>#define forIter(I,C) for(IT(C)I((C).begin());I!=(C).end();++I)<br>#define TRx(V) (cout&lt;&lt;__FILE__":"&lt;&lt;__LINE__&lt;&lt;": "#V" = "&lt;&lt;(V)&lt;&lt;endl)<br>#define TR(V) TRx(V)<br>typedef long long L; typedef unsigned long long UL; typedef stringstream SS;<br>typedef vector&lt;int&gt; VI; typedef vector&lt;VI&gt; VVI; typedef vector&lt;string&gt; VS;<br><br>string CC[] = {<br>  "",<br>  "",<br>  "abc",<br>  "def",<br>  "ghi",<br>  "jkl",<br>  "mno",<br>  "pqrs",<br>  "tuv",<br>  "wxyz"<br>};<br><br>struct T9Input<br>{<br>  map&lt;char, char &gt; dd;<br>  T9Input()<br>  {<br>    forN ( d, 10 ) {<br>      forEach ( i, CC[d] ) {<br>        dd[CC[d][i]] = char(d+'0');<br>      }<br>    }<br>  }<br>  set&lt;string&gt; ww;<br>  string conv(const string&amp; w)<br>  {<br>    string r;<br>    forEach ( i, w ) {<br>      r += dd[w[i]];<br>    }<br>    return r;<br>  }<br>  string word(const string&amp; w)<br>  {<br>    string d = conv(w);<br>    string r = d;<br>    forIter ( i, ww ) {<br>      if ( *i == w ) break;<br>      string d1 = conv(*i);<br>      if ( d1 == d ) {<br>        r += '0';<br>      }<br>    }<br>    return r;<br>  }<br>  vector &lt;string&gt; getKeypresses(vector &lt;string&gt; messages)<br>  {<br>    forEach ( i, messages ) {<br>      SS in(messages[i]);<br>      string w;<br>      while ( in &gt;&gt; w ) {<br>        ww.insert(w);<br>      }<br>    }<br>    vector &lt;string&gt; ret;<br>    forEach ( i, messages ) {<br>      string m = messages[i];<br>      string w;<br>      string r;<br>      forEach ( j, m ) {<br>        if ( m[j] == ' ' ) {<br>          r += word(w);<br>          w.erase();<br>          r += '#';<br>        }<br>        else {<br>          w += m[j];<br>        }<br>      }<br>      r += word(w);<br>      ret.push_back(r);<br>    }<br>    return ret;<br>  }<br>};<br><br><br>// Powered by FileEdit<br></td>