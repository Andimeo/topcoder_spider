<td class="problemText" colspan="8" valign="middle" align="left">
            using System; using System.Collections; using System.Text; public class BadClock {<br>public double nextAgreement(string trueTime, string skew, int hgain) {<br>double X = Parse(trueTime) / 3600.0;<br>double Y = Parse(skew) / 3600.0;<br>double r1 = 1;<br>double r2 = 1 + hgain/3600.0;<br>double dx = (Y-X) % 12.0;<br>while (dx &lt; 0) dx += 12.0;<br>double dr = r2-r1;<br>if (dx == 0) return 0;<br>if (dr &gt; 0)<br> return (12-dx)/dr;<br>else<br> return dx/-dr;<br> <br>}<br> <br>double Parse(string s)<br>{<br>String[] ss = s.Split(':');<br>int h = Convert.ToInt32(ss[0]);<br>int m = Convert.ToInt32(ss[1]);<br>int sec = Convert.ToInt32(ss[2]);<br>if (h == 12) h = 0;<br>return h*3600 + m*60 + sec;<br>}<br> <br>static int BC(int x) { int tot = 0; while (x &gt; 0) { tot += (x&amp;1); x &gt;&gt;= 1; } return tot; }<br>static long[,] ch = new long[51,51];<br>Object foo = new Initer();<br>class Initer { public Initer() {<br>for (int i=0; i&lt;=50; i++) ch[i,0] = 1;<br> for (int i=1; i&lt;=50; i++)<br>  for (int j=1; j&lt;=i; j++)<br>   ch[i,j] = ch[i-1,j-1] + ch[i-1,j];<br>}}<br> <br>static bool NextPerm(int[] a)<br>{<br>int N = a.Length;<br>for (int i=N-2; i&gt;=0; i--)<br> if (a[i] &lt; a[i+1])<br>  {<br>  Array.Reverse(a, i+1, N-i-1);<br>  for (int j=i+1; j&lt;N; j++)<br>   if (a[i] &lt; a[j])<br>    { int t = a[i]; a[i] = a[j]; a[j] = t; return true; }<br>  }<br>return false;<br>}<br> <br>static int Compare(IEnumerable a, IEnumerable b)<br>{<br>IEnumerator aa = a.GetEnumerator();<br>IEnumerator bb = b.GetEnumerator();<br>while (true)<br> {<br> if (aa.MoveNext())<br>  if (bb.MoveNext())<br>   {<br>   int temp = ((IComparable)aa.Current).CompareTo((IComparable)bb.Current);<br>   if (temp != 0) return temp;<br>   }<br>  else<br>   return 1; // a is longer, hence "larger"<br> else<br>  if (bb.MoveNext())<br>   return -1; // a is shorter, hence "smaller"<br>  else<br>   break;<br> }<br> <br>return 0;<br>}<br> <br>static void WR(Object x, params object[] p) { Console.Write(x.ToString(), p); }<br>static void WL(Object x, params object[] p) { Console.WriteLine(x.ToString(), p); }<br>static void WL() { WL(""); }<br>static void WS(params Object[] c) { foreach (Object x in c) WR(x.ToString() + " "); }<br>static void WS(Array ar, int X) { for (int x=0; x&lt;X; x++) WS(ar.GetValue(x)); WL(); }<br>static void WS(Array ar, int X, int Y) { for (int y=0; y&lt;Y; y++) { for (int x=0; x&lt;X; x++) WS(ar.GetValue(x,y)); WL(); }}<br>void MATCH(String lbl, Object x, Object y)<br> { if (!x.Equals(y)) throw new Exception(lbl + String.Format(" expected [{0}], got [{1}]", x, y)); }<br>void MATCH(ICollection x, ICollection y) {<br> MATCH("count", x.Count, y.Count);<br> int i=0; ArrayList ay = new ArrayList(y);<br> foreach (Object ox in x) { MATCH(i.ToString(), ox, ay[i]); i++; }<br>}}<br></td>