<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;iostream&gt;<br>#include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;functional&gt;<br>#include &lt;numeric&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cmath&gt;<br>#include &lt;queue&gt;<br>using namespace std;<br>#define foreach(i,c) for(typeof((c).begin()) i=(c).begin(); i!=(c).end(); i++)<br>typedef vector&lt;int&gt; VI;  typedef vector&lt;vector&lt;int&gt; &gt; VVI;<br>typedef vector&lt;string&gt; VS;  typedef vector&lt;vector&lt;string&gt; &gt; VVS;<br>typedef signed long long i64;  typedef unsigned long long u64;<br><br>vector&lt;string&gt; tokenize(string s, string ch) {<br>  vector&lt;string&gt; ret;<br>  for( int p = 0, p2; p &lt; s.size(); p = p2+1 ) {<br>    p2 = s.find_first_of(ch, p);<br>    if( p2 == -1 ) p2 = s.size();<br>    if( p2-p &gt; 0 ) ret.push_back( s.substr(p, p2-p) );<br>  }<br>  return ret;<br>}<br><br>vector&lt;int&gt; tokint(string s, string ch) {<br>  vector&lt;int&gt; ret;<br>  vector&lt;string&gt; p = tokenize(s, ch);<br>  for( int i = 0; i &lt; p.size(); i++ )<br>    ret.push_back( atoi(p[i].c_str()) );<br>  return ret;<br>}<br><br>class BadClock {<br>public:<br>double nextAgreement(string trueTime, string skewTime, int hourlyGain) {<br>  int i, j, k, x, y, z, n;<br>  double ret;<br><br>  VI t = tokint(trueTime, ":");<br>  x = t[0]*3600 + t[1]*60 + t[2];<br>  t = tokint(skewTime, ":");<br>  y = t[0]*3600 + t[1]*60 + t[2];<br>  y = x-y;<br>  if( hourlyGain &lt; 0 ) {y = -y; hourlyGain = -hourlyGain;}<br>  while( y &lt; 0 ) y += 60*12*60;<br>  while( y &gt;= 12*60*60 ) y -= 12*60*60;<br>  return y/(double)hourlyGain;<br>}<br>};<br><br><br>// Powered by FileEdit<br></td>