<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>import java.math.*;<br>public class BadClock {<br>  public double nextAgreement(String trueTime, String skewTime, int hourlyGain) {<br>    int[] tt = pari(trueTime.split(":"));<br>    double t = tt[0] * 3600 + tt[1] * 60 + tt[2];<br>    int[] ss = pari(skewTime.split(":"));<br>    double s = ss[0] * 3600 + ss[1] * 60 + ss[2];<br>    <br>    if (hourlyGain &gt; 0) {<br>      if (s &gt; t) s -= 12 * 3600;<br>    }<br>    else {<br>      if (s &lt; t) s += 12 * 3600;<br>    }<br>    return (t - s) / hourlyGain;<br>  }<br> <br>  static int pari(String str) { return Integer.parseInt(str); }<br>  static long parl(String str) { return Long.parseLong(str); }<br>  static double pard(String str) { return Double.parseDouble(str); }<br> <br>  static int[] pari(String[] a) {<br>    int len = a.length;<br>    if (len &gt; 0 &amp;&amp; a[len - 1].length() == 0) --len;<br>    int[] r = new int[len];<br>    for (int i = 0; i &lt; len; ++i) r[i] = pari(a[i]);<br>    return r;<br>  }<br> <br>  static Integer wri(int n) { return new Integer(n); }<br>  static Long wrl(long n) { return new Long(n); }<br>  static Double wrd(double n) { return new Double(n); }<br> <br>  static Integer[] wri(int[] a) {<br>    Integer[] r = new Integer[a.length];<br>    for (int i = 0; i &lt; r.length; ++i) r[i] = wri(a[i]);<br>    return r;<br>  }<br> <br>  static Long[] wrl(long[] a) {<br>    Long[] r = new Long[a.length];<br>    for (int i = 0; i &lt; r.length; ++i) r[i] = wrl(a[i]);<br>    return r;<br>  }<br> <br>  static Double[] wrd(double[] a) {<br>    Double[] r = new Double[a.length];<br>    for (int i = 0; i &lt; r.length; ++i) r[i] = wrd(a[i]);<br>    return r;<br>  }<br> <br>  static int[] sub(int[] a, int pos, int len) {<br>    int[] r = new int[len];<br>    System.arraycopy(a, pos, r, 0, len);<br>    return r;<br>  }<br> <br>  static int uni(Object o) {<br>    if (o instanceof Integer) return ((Integer) o).intValue();<br>    return pari(o.toString());<br>  }<br> <br>  static long unl(Object o) {<br>    if (o instanceof Long) return ((Long) o).longValue();<br>    return parl(o.toString());<br>  }<br> <br>  static double und(Object o) {<br>    if (o instanceof Double) return ((Double) o).doubleValue();<br>    return pard(o.toString());<br>  }<br>}<br> <br>// Powered by PopsEdit<br></td>