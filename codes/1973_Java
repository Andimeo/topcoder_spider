<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br><br>public class Removal <br>{<br>  class Interval implements Comparable<br>  {<br>    long a, b;<br>    long shift;<br>    Interval(long x, long y){a = x; b = y; shift = 0;}<br><br>    public int compareTo(Object arg0)<br>    {<br>      if(arg0 instanceof Interval)<br>      {<br>        long a0 = ((Interval)arg0).a;<br>        if(a &gt; a0) return 1;<br>        if(a &lt; a0) return -1;<br>      }<br>      return 0;<br>    }<br>    public String toString()<br>    {<br>      return "(" + a + ", " + b + ")";<br>    }<br>  }<br>  <br>  class Sequence<br>  {<br>    Interval pieces[];<br>  }<br>  <br>  public int finalPos(int n, int k, String[] remove)<br>  {<br>    long totalRemoved = 0;<br>    Interval ar[] = new Interval[remove.length];<br>    for(int i = 0; i &lt; ar.length; i++)<br>    {<br>      String a[] = remove[i].split("-");<br>      ar[i] = new Interval(Long.parseLong(a[0]), Long.parseLong(a[1]));<br>      totalRemoved += ar[i].b - ar[i].a + 1;<br>    }<br>    <br>    if(n - totalRemoved &lt; k) return -1;<br>    <br>    Sequence s = new Sequence();<br>    s.pieces = new Interval[1];<br>    s.pieces[0] = new Interval(1, n);<br>    <br>    for(int i = 0; i &lt; ar.length; i++)<br>    {<br>      long removeStart = ar[i].a;<br>      long removeEnd = ar[i].b;<br>      <br>      Vector resultingIntervals = new Vector();<br>      for(int j = 0; j &lt; s.pieces.length; j++)<br>      {<br>        Interval inter = s.pieces[j];<br>        long intervalStart = inter.a;<br>        long intervalEnd = inter.b;<br>        long intervalShift = inter.shift;<br>        if(intervalStart &gt; removeEnd || intervalEnd &lt; removeStart)<br>        {<br>          resultingIntervals.add(inter);<br>        }<br>        else<br>        {<br>          if(intervalStart &lt; removeStart &amp;&amp; intervalEnd &gt; removeEnd)<br>          {<br>            // Split in two.<br>            Interval i1 = new Interval(intervalStart, removeStart - 1);<br>            Interval i2 = new Interval(removeEnd + 1, intervalEnd);<br>            i1.shift = intervalShift;<br>            i2.shift = intervalShift;<br>            resultingIntervals.add(i1);<br>            resultingIntervals.add(i2);<br>          }<br>          else if(intervalStart &gt;= removeStart &amp;&amp; intervalEnd &lt;= removeEnd) continue;<br>          else if(intervalStart &lt; removeStart &amp;&amp; intervalEnd &lt;= removeEnd)<br>          {<br>            Interval i1 = new Interval(intervalStart, removeStart - 1);<br>            i1.shift = intervalShift;<br>            resultingIntervals.add(i1);<br>          }<br>          else if(intervalStart &gt;= removeStart &amp;&amp; intervalEnd &gt; removeEnd)<br>          {<br>            Interval i1 = new Interval(removeEnd + 1, intervalEnd);<br>            i1.shift = intervalShift;<br>            resultingIntervals.add(i1);<br>          }<br>        }<br>      }<br>      s.pieces = (Interval[])resultingIntervals.toArray(new Interval[resultingIntervals.size()]);<br>      Arrays.sort(s.pieces);<br>      <br>      long prev = 1;<br>      for(int j = 0; j &lt; s.pieces.length; j++)<br>      {<br>        long len = s.pieces[j].b - s.pieces[j].a;<br>        s.pieces[j].shift += s.pieces[j].a - prev; <br>        s.pieces[j].a = prev;<br>        s.pieces[j].b = prev + len;<br>        prev = s.pieces[j].b + 1;<br>      }<br>    }<br>    <br>    int piece = 0;<br>    while(k &gt; 0)<br>    {<br>      if(piece &gt;= s.pieces.length) return -1;<br>      long len = s.pieces[piece].b - s.pieces[piece].a + 1;<br>      k -= len;<br>      piece++;<br>    }<br>    piece--;<br>    long len = s.pieces[piece].b - s.pieces[piece].a;<br>    k += len;<br>    long begin = s.pieces[piece].a;<br>    long shift = s.pieces[piece].shift;<br>    return (int)(begin + k + shift);<br>  }<br><br>  <br>// -- Begin Cutting Here of the Main Method $&amp;%*@# --<br>  public static void main(String[] a) {<br>    new Removal().runTestCase(0);<br>    new Removal().runTestCase(1);<br>    new Removal().runTestCase(2);<br>    new Removal().runTestCase(3);<br>  }<br><br>  public void runTestCase(int nbr) {<br>    switch(nbr) {<br>      case 0 : {<br>        checkOutput(finalPos(8, 3, new String[] {"3-4","4-5"}), 5, 0); break;<br>      }<br>      case 1 : {<br>        checkOutput(finalPos(100, 13, new String[] {"19-50","19-50","19-19"}), 13, 1); break;<br>      }<br>      case 2 : {<br>        checkOutput(finalPos(100, 39, new String[] {"19-50","19-50","19-19"}), -1, 2); break;<br>      }<br>      case 3 : {<br>        checkOutput(finalPos(8, 3, new String[] {"3-4","4-6"}), 5, 0); break;<br>      }<br>    }<br>  }<br>  final void checkOutput(int mine, int them, int nbr) {<br>    boolean success = (mine==them);<br>    StringBuffer out = new StringBuffer();<br>    out.append("Example ");<br>    out.append((nbr+1));<br>    out.append(" - ");<br>    out.append(success ? "success" : "failure   ");<br>    if(!success) {<br>      out.append("Got: ");<br>      out.append(mine);<br>      out.append(", Expected: ");<br>      out.append(them);<br>    }<br>    System.out.println(out);<br>  }<br>  final void checkOutput(long mine, long them, int nbr) {<br>    boolean success = (mine==them);<br>    StringBuffer out = new StringBuffer();<br>    out.append("Example ");<br>    out.append((nbr+1));<br>    out.append(" - ");<br>    out.append(success ? "success" : "failure   ");<br>    if(!success) {<br>      out.append("Got: ");<br>      out.append(mine);<br>      out.append(", Expected: ");<br>      out.append(them);<br>    }<br>    System.out.println(out);<br>  }<br>  final void checkOutput(double mine, double them, int nbr) {<br>    boolean success = (mine==them);<br>    StringBuffer out = new StringBuffer();<br>    out.append("Example ");<br>    out.append((nbr+1));<br>    out.append(" - ");<br>    out.append(success ? "success" : "failure   ");<br>    if(!success) {<br>      out.append("Got: ");<br>      out.append(mine);<br>      out.append(", Expected: ");<br>      out.append(them);<br>    }<br>    System.out.println(out);<br>  }<br>  final void checkOutput(char mine, char them, int nbr) {<br>    boolean success = (mine==them);<br>    StringBuffer out = new StringBuffer();<br>    out.append("Example ");<br>    out.append((nbr+1));<br>    out.append(" - ");<br>    out.append(success ? "success" : "failure   ");<br>    if(!success) {<br>      out.append("Got: ");<br>      out.append("'");<br>      out.append(mine);<br>      out.append("'");<br>      out.append(", Expected: ");<br>      out.append("'");<br>      out.append(them);<br>      out.append("'");<br>    }<br>    System.out.println(out);<br>  }<br>  final void checkOutput(String mine, String them, int nbr) {<br>    boolean success = (mine.equals(them));<br>    StringBuffer out = new StringBuffer();<br>    out.append("Example ");<br>    out.append((nbr+1));<br>    out.append(" - ");<br>    out.append(success ? "success" : "failure   ");<br>    if(!success) {<br>      out.append("Got: ");<br>      out.append("\"");<br>      out.append(mine);<br>      out.append("\"");<br>      out.append(", Expected: ");<br>      out.append("\"");<br>      out.append(them);<br>      out.append("\"");<br>    }<br>    System.out.println(out);<br>  }<br>  final void checkOutput(long[] mine, long[] them, int nbr) {<br>    boolean success = (Arrays.equals(mine, them));<br>    StringBuffer out = new StringBuffer();<br>    out.append("Example ");<br>    out.append((nbr+1));<br>    out.append(" - ");<br>    out.append(success ? "success" : "failure   ");<br>    if(!success) {<br>      out.append("Got: ");<br>      out.append("{");<br>      for(int x=0;x&lt;mine.length;x++) {<br>        out.append(mine[x]);<br>        if(x&lt;mine.length-1) out.append(", ");<br>      }<br>      out.append("}");<br>      out.append(", Expected: ");<br>      out.append("{");<br>      for(int x=0;x&lt;them.length;x++) {<br>        out.append(them[x]);<br>        if(x&lt;them.length-1) out.append(", ");<br>      }<br>      out.append("}");<br>    }<br>    System.out.println(out);<br>  }<br>  final void checkOutput(char[] mine, char[] them, int nbr) {<br>    boolean success = (Arrays.equals(mine, them));<br>    StringBuffer out = new StringBuffer();<br>    out.append("Example ");<br>    out.append((nbr+1));<br>    out.append(" - ");<br>    out.append(success ? "success" : "failure   ");<br>    if(!success) {<br>      out.append("Got: ");<br>      out.append("{");<br>      for(int x=0;x&lt;mine.length;x++) {<br>        out.append(mine[x]);<br>        if(x&lt;mine.length-1) out.append(", ");<br>      }<br>      out.append("}");<br>      out.append(", Expected: ");<br>      out.append("{");<br>      for(int x=0;x&lt;them.length;x++) {<br>        out.append(them[x]);<br>        if(x&lt;them.length-1) out.append(", ");<br>      }<br>      out.append("}");<br>    }<br>    System.out.println(out);<br>  }<br>  final void checkOutput(double[] mine, double[] them, int nbr) {<br>    boolean success = (Arrays.equals(mine, them));<br>    StringBuffer out = new StringBuffer();<br>    out.append("Example ");<br>    out.append((nbr+1));<br>    out.append(" - ");<br>    out.append(success ? "success" : "failure   ");<br>    if(!success) {<br>      out.append("Got: ");<br>      out.append("{");<br>      for(int x=0;x&lt;mine.length;x++) {<br>        out.append(mine[x]);<br>        if(x&lt;mine.length-1) out.append(", ");<br>      }<br>      out.append("}");<br>      out.append(", Expected: ");<br>      out.append("{");<br>      for(int x=0;x&lt;them.length;x++) {<br>        out.append(them[x]);<br>        if(x&lt;them.length-1) out.append(", ");<br>      }<br>      out.append("}");<br>    }<br>    System.out.println(out);<br>  }<br>  final void checkOutput(int[] mine, int[] them, int nbr) {<br>    boolean success = (Arrays.equals(mine, them));<br>    StringBuffer out = new StringBuffer();<br>    out.append("Example ");<br>    out.append((nbr+1));<br>    out.append(" - ");<br>    out.append(success ? "success" : "failure   ");<br>    if(!success) {<br>      out.append("Got: ");<br>      out.append("{");<br>      for(int x=0;x&lt;mine.length;x++) {<br>        out.append(mine[x]);<br>        if(x&lt;mine.length-1) out.append(", ");<br>      }<br>      out.append("}");<br>      out.append(", Expected: ");<br>      out.append("{");<br>      for(int x=0;x&lt;them.length;x++) {<br>        out.append(them[x]);<br>        if(x&lt;them.length-1) out.append(", ");<br>      }<br>      out.append("}");<br>    }<br>    System.out.println(out);<br>  }<br>  final void checkOutput(String[] mine, String[] them, int nbr) {<br>    boolean success = (Arrays.equals(mine, them));<br>    StringBuffer out = new StringBuffer();<br>    out.append("Example ");<br>    out.append((nbr+1));<br>    out.append(" - ");<br>    out.append(success ? "success" : "failure   ");<br>    if(!success) {<br>      out.append("Got: ");<br>      out.append("{");<br>      for(int x=0;x&lt;mine.length;x++) {<br>        out.append(mine[x]);<br>        if(x&lt;mine.length-1) out.append(", ");<br>      }<br>      out.append("}");<br>      out.append(", Expected: ");<br>      out.append("{");<br>      for(int x=0;x&lt;them.length;x++) {<br>        out.append(them[x]);<br>        if(x&lt;them.length-1) out.append(", ");<br>      }<br>      out.append("}");<br>    }<br>    System.out.println(out);<br>  }<br><br>// -- End Cutting Here of the Main Method $&amp;%*@# --<br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by CodeProcessor<br></td>