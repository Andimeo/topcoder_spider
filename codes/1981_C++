<td class="problemText" colspan="8" valign="middle" align="left">
            // another fine solution by misof<br>#include &lt;algorithm&gt;<br> <br>#include &lt;iostream&gt;<br>#include &lt;sstream&gt;<br>#include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;queue&gt;<br>#include &lt;set&gt;<br>#include &lt;map&gt;<br> <br>#include &lt;cstdio&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cctype&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cassert&gt;<br>using namespace std;<br> <br>#define REP(i,n) for(int i=0;i&lt;(n);++i)<br>#define FOR(i,a,b) for(int i=(a);i&lt;=(b);++i)<br>#define CLEAR(t) memset((t),0,sizeof(t))<br> <br>/////////////////// CODE WRITTEN DURING THE COMPETITION FOLLOWS ////////////////////////////////<br> <br>#define VALUE(x) ( (x) &gt;&gt; 2 )<br>#define SUIT(x) ( (x) &amp; 3 )<br> <br>int counts[64]; <br>long long N;<br>long long all;<br>long long pocty[16];<br>int mam=0;<br>int sel[8];<br>long long curposs = 1;<br> <br>void evalhand() {<br>  int typ = 0;<br> <br>  int vals[14];<br>  REP(i,13) vals[i]=0;<br>  REP(i,5) vals[ VALUE( sel[i] ) ]++;<br>  <br>  REP(i,13) if (vals[i]==2) typ++;<br>  REP(i,13) if (vals[i]==3) typ=3;<br>  REP(i,13) if (vals[i]==4) typ=4;<br>  if (typ==3) REP(i,13) if (vals[i]==2) typ=5;<br> <br>  int su[4];<br>  REP(i,4) su[i]=0;<br>  REP(i,5) su[ SUIT( sel[i] ) ]++;<br>  REP(i,4) if (su[i]==5) typ=6;<br> <br>  int isstraight = 1; <br>  int A[8];<br>  REP(i,5) A[i] = VALUE( sel[i] );<br>  REP(i,5) FOR(j,i+1,4) if (A[i] &gt; A[j]) swap(A[i],A[j]);<br>  FOR(i,1,4) if (A[i] != A[0]+i) { isstraight=0; break; }<br> <br>  if (!isstraight) {<br>    // este eso na zaciatok<br>    isstraight = 1;<br>    REP(i,5) A[i] = VALUE( sel[i] );<br>    REP(i,5) if (A[i] == 12) A[i]=-1;<br>    REP(i,5) FOR(j,i+1,4) if (A[i] &gt; A[j]) swap(A[i],A[j]);<br>    FOR(i,1,4) if (A[i] != A[0]+i) { isstraight=0; break; }<br>  }<br> <br>  if (isstraight) { <br>    if (typ==6) typ=8; else typ=7; <br>    if (typ==8) {<br>      if (vals[8] &amp;&amp; vals[12]) typ=9;<br>    }<br>  }<br>  REP(i,13) if (vals[i]==5) typ=10;<br> <br>  pocty[typ] += curposs;<br>}<br> <br>void skus(int kde, int kelo) {<br>  long long poss = 1;<br>  REP(i,kelo) poss *= counts[kde]-i;<br>  REP(i,kelo) poss /= i+1;<br> <br>  curposs *= poss;<br>  REP(i,kelo) sel[mam+i] = kde;<br>  mam += kelo;<br> <br>  if (mam == 5) {<br>    evalhand();<br>  } else {<br>    int nkde = kde;<br>    nkde++;<br>    while (counts[nkde]==0) { nkde++; if (nkde&gt;=52) break; }<br>    if (counts[nkde]) {<br>      int nkelo = min( counts[nkde], 5-mam );<br>      FOR(i,0,nkelo) skus(nkde,i);<br>    }<br>  }<br>  <br>  mam -= kelo;<br>  curposs /= poss;<br>}<br> <br>class PokerDeck {<br>public:<br>  vector &lt;string&gt; getRanking(vector &lt;string&gt; decks) {<br>    CLEAR(counts);<br>    CLEAR(pocty);<br>    N=0;<br>    <br>    REP(i,int(decks.size())) {<br>      string T;<br>      stringstream SS(decks[i]);<br>      while (SS &gt;&gt; T) {<br>        string S = T;<br>        if (T[0]=='J') S = string("11") + T[1];<br>        if (T[0]=='Q') S = string("12") + T[1];<br>        if (T[0]=='K') S = string("13") + T[1];<br>        if (T[0]=='A') S = string("14") + T[1];<br>        int x; char c; sscanf(S.c_str(),"%d%c",&amp;x,&amp;c);<br>        int type = x-2; <br>        int color;<br>        if (c=='C') color = 0;<br>        if (c=='D') color = 1;<br>        if (c=='H') color = 2;<br>        if (c=='S') color = 3;<br>        counts[ 4*type + color ]++;<br>        N++;<br>      }<br>    }<br>    all = N * (N-1) * (N-2) * (N-3) * (N-4);<br> <br>    int kde=0; while (!counts[kde]) kde++;<br>    int kelo = counts[kde]; kelo &lt;?= 5;<br>    FOR(i,0,kelo) skus(kde,i);<br> <br>    FOR(i,0,10) cout &lt;&lt; pocty[i] &lt;&lt; endl;<br> <br>    vector&lt;string&gt; names;<br>    names.push_back("NOTHING");<br>    names.push_back("ONE PAIR");<br>    names.push_back("TWO PAIR");<br>    names.push_back("THREE OF A KIND");<br>    names.push_back("FOUR OF A KIND");<br>    names.push_back("FULL HOUSE");<br>    names.push_back("FLUSH");<br>    names.push_back("STRAIGHT");<br>    names.push_back("STRAIGHT FLUSH");<br>    names.push_back("ROYAL FLUSH");<br>    names.push_back("FIVE OF A KIND");<br> <br>    vector &lt;string&gt; res;<br>    map&lt;string, long long&gt; M;<br>    REP(i,11) if (pocty[i]) res.push_back( names[i] );<br>    REP(i,11) M[names[i]] = pocty[i];<br> <br>    int xx = res.size();<br>    REP(i,xx) FOR(j,i+1,xx-1) {<br>      int z=0;<br>      if (M[res[i]] &gt; M[ res[j] ] ) z=1;<br>      if (M[res[i]] == M[ res[j] ] ) if ( res[i] &gt; res[j]) z=1;<br>      if (z) swap( res[i], res[j] );<br>    }<br>    <br>    return res;<br>  }<br> <br> <br>};<br>// Unused code automatically removed, but the UCR still sucks<br> <br> <br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003]<br>// Powered by CodeProcessor<br></td>