<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;algorithm&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cmath&gt;<br>#include &lt;iostream&gt;<br>#include &lt;sstream&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;vector&gt;<br>#include &lt;string&gt;<br>#include &lt;cctype&gt;<br>using namespace std;<br><br>#define REP(i,n) for(int i=0;i&lt;(n);++i)<br>#define FOR(i,a,b) for(int i=(a);i&lt;=(b);++i)<br>#define FORD(i,a,b) for(int i=(a);i&gt;=(b);--i)<br>#define FOREACH(i,c) for(__typeof((c).begin()) i=(c).begin();i!=(c).end();++i)<br><br>typedef long long LL; typedef vector&lt;int&gt; VI; typedef vector&lt;string&gt; VS;<br>const int INF = 1000000000;<br>template&lt;class T&gt; inline int size(const T&amp;c) { return c.size(); }<br><br>string i2s(int x) {<br>  char buf[20];<br>  sprintf(buf,"%d",x);<br>  return buf;<br>}<br><br>struct Box {<br>  int a[3];<br>};<br><br>const int MAXN = 50000;<br><br>int n;<br>Box boxes[MAXN];<br>int f[MAXN+1];<br>int m[MAXN+1];<br><br>inline bool operator&lt;(const Box&amp;a,const Box&amp;b) {<br>  return LL(a.a[0]) + LL(a.a[1]) + LL(a.a[2]) &lt; LL(b.a[0]) + LL(b.a[1]) + LL(b.a[2]);<br>/*  REP(i,3) {<br>    if(a.a[i] &lt; b.a[i]) return true;<br>    if(a.a[i] &gt; b.a[i]) return false;<br>  }<br>  return false; */<br>}<br><br>inline bool operator==(const Box&amp;a,const Box&amp;b) {<br>  REP(i,3) if(a.a[i]!=b.a[i]) return false;<br>  return true;<br>}<br><br>inline bool smaller(const Box&amp;a,const Box&amp;b) {<br>  return a.a[0] &lt; b.a[0] &amp;&amp; a.a[1]&lt;b.a[1] &amp;&amp; a.a[2]&lt;b.a[2];<br>}<br><br>int calc(int x) {<br>  int r=1;<br>  FORD(i,x-1,0) {<br>    if(r &gt;= 1+m[i+1]) break;<br>    if(r&lt;1+f[i+1] &amp;&amp; smaller(boxes[i],boxes[x])) r = 1+f[i+1];<br>  }<br>  return r;<br>}<br><br>struct Nestable {<br>  // MAIN<br>  int maxCount(int a, int p, int n) {<br>    int l=1;<br>    REP(i,n) {<br>      REP(j,3){<br>        l = (l*a)%p;<br>        boxes[i].a[j] = l;<br>      }<br>      sort(boxes[i].a,boxes[i].a+3);<br>    }<br>    sort(boxes,boxes+n);<br>    n = unique(boxes,boxes+n)-boxes;<br>    f[0] = 0; m[0] = 0;<br>    FOR(i,1,n) {<br>      f[i] = calc(i-1);<br>      m[i] = max(m[i-1],f[i]);<br>    }<br>    return m[n];<br>  }<br>};<br><br><br><br>// Powered by FileEdit<br></td>