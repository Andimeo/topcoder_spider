<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br><br>/** <br> * @author Roman Elizarov<br> */<br>public class ScheduleStrength {<br><br>  static class SS implements Comparable&lt;SS&gt; {<br>    String team;<br>    int p;<br>    int q;<br><br>    public SS(String team, int p, int q) {<br>      this.team = team;<br>      this.p = p;<br>      this.q = q;<br>    }<br><br>    public int compareTo(SS ss) {<br>      int d = ss.p * q - p * ss.q;<br>      if (d != 0)<br>        return d;<br>      return team.compareTo(ss.team);<br>    }<br>  }<br><br>  public String[] calculate(String[] teams, String[] results) {<br>    int n = teams.length;<br>    ArrayList&lt;SS&gt; a = new ArrayList&lt;SS&gt;();<br>    for (int i = 0; i &lt; n; i++) {<br>            int p = 0;<br>      int q = 0;<br>      for (int j = 0; j &lt; n; j++)<br>        if (results[i].charAt(j) != '-') {<br>          for (int k = 0; k &lt; n; k++)<br>            if (k != i &amp;&amp; k != j) {<br>              switch (results[j].charAt(k)) {<br>              case 'W':<br>                p++;<br>                q++;<br>                break;<br>              case 'L':<br>                q++;<br>              }<br>            }<br>        }<br>      a.add(new SS(teams[i], p, q));<br>    }<br>    Collections.sort(a);<br>    String[] res = new String[n];<br>    for (int i = 0; i &lt; n; i++) {<br>      res[i] = a.get(i).team;<br>    }<br>    return res;<br>  }<br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by RETester [based on ExampleBuilder]<br>// Powered by CodeProcessor<br></td>