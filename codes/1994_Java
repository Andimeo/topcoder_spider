<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>import java.math.*;<br>public class PipePath {<br>  int[] from = new int[2500];<br>  int[] to = new int[2500];<br>  double[] cost = new double[2500];<br>  double[] cap = new double[2500];<br>  int n;<br>  <br>  public double capCost(String[] caps, String[] costs, int source, int sink) {<br>    double[] tt = new double[50];<br>    for (int i = 0; i &lt; caps.length; ++i) {<br>      String[] a = caps[i].split(" ");<br>      String[] b = costs[i].split(" ");<br>      for (int j = 0; j &lt; a.length; ++j) {<br>        if (a[j].length() == 0) continue;<br>        int k = pari(a[j].split(",")[0]);<br>        from[n] = i;<br>        to[n] = k;<br>        cap[n] = pard(a[j].split(",")[1]);<br>        cost[n] = pard(b[j].split(",")[1]);<br>        ++n;<br>      }<br>    }<br>        <br>    double best = 0.0;<br>    for (int ii = 0; ii &lt; n; ++ii) {<br>      double cc = cap[ii];<br>      int m = costs.length;<br>      double[] dist = new double[m];<br>      Arrays.fill(dist, -1);<br>      dist[source] = 0;<br>      boolean change = true;<br>      while (change) {<br>        change = false;<br>        for (int i = 0; i &lt; n; ++i) {<br>          if (cap[i] &lt; cc) continue;<br>          if (dist[from[i]] &lt; 0) continue;<br>          double x = dist[from[i]] + cost[i];<br>          if (dist[to[i]] &lt; 0 || x &lt; dist[to[i]] - 1e-19) {<br>            change = true;<br>            dist[to[i]] = x;<br>          }<br>        }<br>      }<br>      if (dist[sink] &lt; 0) continue;<br>      <br>      double cost = dist[sink];<br>      best = Math.max(best, cc / cost);<br>    }<br>    return best;<br>  }<br>  static Integer wri(int v) { return new Integer(v); }<br>  static Integer[] wri(int[] a) {<br>    Integer[] r = new Integer[a.length];<br>    for (int i = 0; i &lt; a.length; ++i) r[i] = wri(a[i]);<br>    return r;<br>  }<br>  static int uwi(Object v) { return ((Integer) v).intValue(); }<br>  static int pari(String v) { return new Integer(v).intValue(); }<br>  static int[] pari(String[] v) {<br>    int len = v.length;<br>    if (len &gt; 0 &amp;&amp; v[len-1].length() == 0) --len;<br>    int[] a = new int[len];<br>    for (int i = 0; i &lt; len; ++i) a[i] = pari(v[i]);<br>    return a;<br>  }<br>  <br>  static Double wrd(double v) { return new Double(v); }<br>  static Double[] wrd(double[] a) {<br>    Double[] r = new Double[a.length];<br>    for (int i = 0; i &lt; a.length; ++i) r[i] = wrd(a[i]);<br>    return r;<br>  }<br>  static double uwd(Object v) { return ((Double) v).doubleValue(); }<br>  static double pard(String v) { return new Double(v).doubleValue(); }<br>  static double[] pard(String[] v) {<br>    int len = v.length;<br>    if (len &gt; 0 &amp;&amp; v[len-1].length() == 0) --len;<br>    double[] a = new double[len];<br>    for (int i = 0; i &lt; len; ++i) a[i] = pard(v[i]);<br>    return a;<br>  }<br>  <br>  static long gcd(int a, int b) {<br>    while (true) {      <br>      if (a == 0) return b;<br>      int c = b % a;<br>      b = a;<br>      a = c;<br>    }<br>  }<br> <br>  static long[][] choose;<br>  static long choose(int n, int r) {<br>    if (r &lt; 0 || r &gt; n) return 0;<br>    if (r == 0 || r == n) return 1;<br>    if (choose == null) {<br>      choose = new long[51][51];<br>    }<br>    long c = choose[n][r];<br>    if (c == 0) {<br>      c = choose[n][r] = choose(n-1, r-1) + choose(n-1, r);<br>    }<br>    return c;<br>  }<br> <br>  <br>  static BigInteger bigi(long v) { return BigInteger.valueOf(v); }<br>  <br>  static boolean nextPerm(int[] a) {<br>    for (int i = a.length - 2; i &gt;= 0; --i) {<br>      if (a[i] &gt;= a[i+1]) continue;<br>      int j = a.length - 1;<br>      while (a[j] &lt;= a[i]) --j;<br>      swap(a, i, j);<br>      rev(a, i + 1, a.length - (i + 1));<br>      return true;<br>    }<br>    rev(a, 0, a.length);<br>    return false;<br>  }<br>  <br>  static int[] sub(int[] a, int pos, int len) {<br>    int[] r = new int[len];<br>    System.arraycopy(a, 0, r, pos, len);<br>    return r;<br>  }<br>  static void swap(int[] a, int i, int j) {<br>    int t = a[i];<br>    a[i] = a[j];<br>    a[j] = t;<br>  }<br>  static void rev(int[] a, int pos, int len) {<br>    while (len &gt; 1) {<br>      swap(a, pos, pos + len - 1);<br>      len -= 2;<br>      ++pos;<br>    }<br>  }  <br>}<br> <br>// Powered by PopsEdit<br></td>