<td class="problemText" colspan="8" valign="middle" align="left">
            // FilterC#<br><br><br>using System;<br>using System.Collections;<br><br>public class BadParser {<br><br>  string s;<br>  string[] bt;<br><br>  string istr="+-*/";<br>  void go(int v)<br>  {<br>    string bb=bt[v];<br>    if(istr.IndexOf(bb[0])==-1)<br>    {<br>      s+=bb;<br>    }<br>    else<br>    {<br>      string[] tk=bb.Split(' ');<br>      int ln=INT(tk[1]);<br>      int rn=INT(tk[2]);<br>      go(ln);<br>      s+=tk[0];<br>      go(rn);<br>    }<br>  }<br><br>  int pos;<br>  int eval()<br>  {<br>    int r1=term();<br>    while(s[pos]=='+'||s[pos]=='-')<br>    {<br>      bool plus=s[pos]=='+';<br>      pos++;<br>      int r2=term();<br>      if(plus) r1+=r2;<br>      else r1-=r2;<br>    }<br><br>    return r1;<br>  }<br><br>  int term()<br>  {<br>    int r1=atom();<br>    while(s[pos]=='*'||s[pos]=='/')<br>    {<br>      bool mult=s[pos]=='*';<br>      pos++;<br>      int r2=atom();<br>      if(mult) r1*=r2;<br>      else r1/=r2;<br>    }<br><br>    return r1;<br>  }<br><br>  int atom()<br>  {<br>    if(!Char.IsNumber(s[pos])) Console.WriteLine("Big Error");<br>    int st=pos;<br>    while(Char.IsNumber(s[pos])) pos++;<br>    return INT(s.Substring(st,pos-st));<br>  }<br><br>  public int evaluate(string[] badTree) <br>  {<br>    bt=badTree;<br>    s="";<br>    go(0);<br>    pos=0;<br>    s+=".";<br><br>    return eval();<br>  }<br><br><br>  private static ArrayList BitCount(int n){ ArrayList r = new ArrayList(); int idx=0; while(n &gt; 0) { if((n&amp;1)==1) r.Add(idx); n &gt;&gt;= 1; idx++;} return r; }<br>  private static int Gcd(int a, int b) { while(b!=0) {int t=a; a=b; b=t%b;} return a;}<br>  private static int Lcm(int a, int b) { return a*b/Gcd(a,b); }<br>  private static char[] CA(ArrayList ar) { return (char []) ar.ToArray(typeof(char)); }<br>  private static int[] IA(ArrayList ar) { return (int []) ar.ToArray(typeof(int)); }<br>  private static long[] LA(ArrayList ar) { return (long []) ar.ToArray(typeof(long)); }<br>  private static double[] DA(ArrayList ar) { return (double []) ar.ToArray(typeof(double)); }<br>  private static string[] SA(ArrayList ar) { return (string[]) ar.ToArray(typeof(string)); }<br>  private static int INT(Object x) { return Int32.Parse(x.ToString()); }<br>  private static long LNG(Object x) { return Int64.Parse(x.ToString()); }<br>  private static double DBL(Object x) { return Double.Parse(x.ToString()); }<br>  private static int MinI(IEnumerable a) { int m = Int32.MaxValue; foreach (int x in a) m = Math.Min(m, x); return m; }<br>  private static long MinL(IEnumerable a) { long  m = Int64.MaxValue;  foreach (long x in a) m = Math.Min(m, x); return m; }<br>  private static double MinD(IEnumerable a) { double m = Double.MaxValue; foreach (double x in a) m = Math.Min(m, x); return m; }<br>  private static string MinS(IEnumerable a) { string m = null; foreach (string x in a) m = (m == null || m.CompareTo(x)&gt;0) ? x : m; return m; } <br>  private static int MaxI(IEnumerable a) { int m = Int32.MinValue;  foreach (int x in a) m = Math.Max(m, x); return m; }<br>  private static long MaxL(IEnumerable a) { long   m = Int64.MinValue;   foreach (long x in a) m = Math.Max(m, x); return m; }<br>  private static double MaxD(IEnumerable a) { double m = Double.MinValue; foreach (double x in a) m = Math.Max(m, x); return m; }<br>  private static string MaxS(IEnumerable a) { string m = null; foreach (string x in a) m = (m == null || m.CompareTo(x)&lt;0) ? x : m; return m; } <br>  private static int SumI(IEnumerable a) { int m = 0;  foreach (int x in a) m += x; return m; }<br>  private static long SumL(IEnumerable a) { long m = 0;  foreach (long x in a) m += x; return m; }<br>  private static double SumD(IEnumerable a) { double m = 0;  foreach (double x in a) m += x; return m; }<br>  private static string SumS(IEnumerable a) { string m = ""; foreach (string x in a) m += x; return m; }<br>  private static int MinI(params int[] a) { int m = Int32.MaxValue; foreach (int x in a) m = Math.Min(m, x); return m; }<br>  private static long MinL(params long[] a) { long  m = Int64.MaxValue;  foreach (long x in a) m = Math.Min(m, x); return m; }<br>  private static double MinD(params double[] a) { double m = Double.MaxValue; foreach (double x in a) m = Math.Min(m, x); return m; }<br>  private static string MinS(params string[] a) { string m = null; foreach (string x in a) m = (m == null || m.CompareTo(x)&gt;0) ? x : m; return m; } <br>  private static int MaxI(params int[] a) { int m = Int32.MinValue;  foreach (int x in a) m = Math.Max(m, x); return m; }<br>  private static long MaxL(params long[] a) { long   m = Int64.MinValue;   foreach (long x in a) m = Math.Max(m, x); return m; }<br>  private static double MaxD(params double[] a) { double m = Double.MinValue; foreach (double x in a) m = Math.Max(m, x); return m; }<br>  private static string MaxS(params string[] a) { string m = null; foreach (string x in a) m = (m == null || m.CompareTo(x)&lt;0) ? x : m; return m; } <br>  private static int SumI(params int[] a) { int m = 0;  foreach (int x in a) m += x; return m; }<br>  private static long SumL(params long[] a) { long m = 0;  foreach (long x in a) m += x; return m; }<br>  private static double SumD(params double[] a) { double m = 0;  foreach (double x in a) m += x; return m; }<br>  private static string SumS(params string[] a) { string m = ""; foreach (string x in a) m += x; return m; }<br>  private static string SReverse(string s) { char[] ca=s.ToCharArray(); Array.Reverse(ca); return new string(ca); }<br>    public class SComparer:IComparer <br>   { <br>     public int Compare(object x, object y) <br>        { <br>      string sx=(string)x; <br>      string sy=(string)y; <br>      return String.CompareOrdinal(sx,sy); <br>    } <br>   } <br>}<br><br><br>// Powered by FileEdit<br>// Powered by CodeProcessor<br></td>