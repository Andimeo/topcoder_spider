<td class="problemText" colspan="8" valign="middle" align="left">
            '' Powered by Rolf!<br>Imports Microsoft.VisualBasic<br>Imports System<br>Imports System.Collections<br>Imports System.Text<br><br>Public Class BadParser<br>    Class Leaf<br>        Public op As String<br>        Public value As Integer<br>        Public l1 As Leaf<br>        Public id1 As Integer = -1<br>        Public id2 As Integer = -1<br>        Public l2 As Leaf<br>        Sub New(ByVal str As String)<br>            Dim strs() As String<br>            strs = Split(str)<br>            If strs.Length = 1 Then<br>                value = CInt(strs(0))<br>            Else<br>                op = strs(0)<br>                id1 = CInt(strs(1))<br>                id2 = CInt(strs(2))<br>            End If<br>        End Sub<br>        Function eval() As Integer<br>            If op &lt;&gt; "" Then<br>                Select Case op<br>                    Case "*"<br>                        Return l1.eval * l2.eval<br>                    Case "/"<br>                        Return l1.eval \ l2.eval<br>                    Case "+"<br>                        Return l1.eval + l2.eval<br>                    Case "-"<br>                        Return l1.eval - l2.eval<br>                    Case Else<br>                        Stop<br>                End Select<br>            Else<br>                Return value<br>            End If<br>        End Function<br>        Sub New()<br><br>        End Sub<br><br>    End Class<br>    Sub walk(ByVal l As Leaf, ByRef exp As String)<br>        If l.id1 &gt;= 0 Then<br>            walk(l.l1, exp)<br>        End If<br>        If l.op &lt;&gt; "" Then<br>            exp &amp;= " " &amp; l.op<br>        Else<br>            exp &amp;= " " &amp; l.value.ToString<br>        End If<br>        If l.id2 &gt;= 0 Then<br>            walk(l.l2, exp)<br>        End If<br>    End Sub<br>    Public Function evaluate(ByVal badTree As String()) As Integer<br>        Dim result As Integer<br>        Dim leafs As New ArrayList<br><br>        Dim i, k As Integer<br><br>        For i = 0 To UBound(badTree)<br>            leafs.Add(New Leaf(badTree(i)))<br>        Next<br>        Dim l As Leaf<br>        For Each l In leafs<br>            If l.op &lt;&gt; "" Then<br>                If l.id1 &gt;= 0 Then<br>                    l.l1 = CType(leafs(l.id1), Leaf)<br>                End If<br>                If l.id2 &gt;= 0 Then<br>                    l.l2 = CType(leafs(l.id2), Leaf)<br>                End If<br>            End If<br>        Next<br><br>        Dim exp As String = ""<br>        walk(CType(leafs(0), Leaf), exp)<br><br>        exp = exp.Replace("  ", " ")<br>        exp = exp.Trim<br><br>        Dim ok() As String<br>        ok = Split(exp &amp; " ?", " ")<br><br>        Dim main As Leaf<br>        main = p1(ok, 0)<br><br>        Return main.eval<br><br>        Return result<br>    End Function<br>    Function p1(ByVal s() As String, ByRef current As Integer) As Leaf<br>        Dim l As Leaf<br>        l = p2(s, current)<br>        While s(current) = "+" OrElse s(current) = "-"<br>            Dim r As Leaf<br>            Dim op As String = s(current)<br>            current += 1<br>            r = p2(s, current)<br>            Dim n As New Leaf<br>            n.l1 = l<br>            n.l2 = r<br>            n.op = op<br>            l = n<br>        End While<br>        Return l<br>    End Function<br>    Function p2(ByVal s() As String, ByRef current As Integer) As Leaf<br>        Dim l As Leaf<br>        l = p3(s, current)<br>        While s(current) = "*" OrElse s(current) = "/"<br>            Dim r As Leaf<br>            Dim op As String = s(current)<br>            current += 1<br>            r = p3(s, current)<br>            Dim n As New Leaf<br>            n.l1 = l<br>            n.l2 = r<br>            n.op = op<br>            l = n<br>        End While<br>        Return l<br>    End Function<br>    Function p3(ByVal s() As String, ByRef current As Integer) As Leaf<br>        If s(current) = "+" OrElse s(current) = "-" OrElse s(current) = "*" OrElse s(current) = "/" Then<br>            Stop<br>        Else<br>            current += 1<br>            Return New Leaf(s(current - 1))<br>        End If<br>    End Function<br>End Class<br><br>Module MainModule<br>    Sub Main()<br>        Dim Errors As Boolean = False<br>        Dim Answer, DesiredAnswer As Integer<br>        Dim Obj As BadParser<br>        Dim Time As DateTime<br>        Obj = New BadParser()<br>        Time = DateTime.Now<br>        Answer = Obj.evaluate(New String() {"+ 1 2", "5", "- 3 4", "2", "- 5 6", "3", "* 7 8", "4", "2"})<br>        Console.WriteLine("Time: " &amp; (DateTime.Now.Subtract(Time)).TotalSeconds &amp; " seconds")<br>        DesiredAnswer = -4<br>        Console.WriteLine("Your Answer:")<br>        Console.WriteLine("  " &amp; Answer)<br>        Console.WriteLine("Desired Answer:")<br>        Console.WriteLine("  " &amp; DesiredAnswer)<br>        If Answer = DesiredAnswer Then<br>            Console.WriteLine("Match :-)")<br>        Else<br>            Console.WriteLine("DOESN'T MATCH!!!!")<br>            Errors = True<br>        End If<br>        Console.WriteLine()<br>        Obj = New BadParser()<br>        Time = DateTime.Now<br>        Answer = Obj.evaluate(New String() {"- 1 2", "5", "- 3 4", "2", "- 5 6", "3", "* 7 8", "4", "2"})<br>        Console.WriteLine("Time: " &amp; (DateTime.Now.Subtract(Time)).TotalSeconds &amp; " seconds")<br>        DesiredAnswer = -8<br>        Console.WriteLine("Your Answer:")<br>        Console.WriteLine("  " &amp; Answer)<br>        Console.WriteLine("Desired Answer:")<br>        Console.WriteLine("  " &amp; DesiredAnswer)<br>        If Answer = DesiredAnswer Then<br>            Console.WriteLine("Match :-)")<br>        Else<br>            Console.WriteLine("DOESN'T MATCH!!!!")<br>            Errors = True<br>        End If<br>        Console.WriteLine()<br>        Obj = New BadParser()<br>        Time = DateTime.Now<br>        Answer = Obj.evaluate(New String() {"* 1 2", "5", "- 3 4", "2", "- 5 6", "3", "* 7 8", "4", "2"})<br>        Console.WriteLine("Time: " &amp; (DateTime.Now.Subtract(Time)).TotalSeconds &amp; " seconds")<br>        DesiredAnswer = -1<br>        Console.WriteLine("Your Answer:")<br>        Console.WriteLine("  " &amp; Answer)<br>        Console.WriteLine("Desired Answer:")<br>        Console.WriteLine("  " &amp; DesiredAnswer)<br>        If Answer = DesiredAnswer Then<br>            Console.WriteLine("Match :-)")<br>        Else<br>            Console.WriteLine("DOESN'T MATCH!!!!")<br>            Errors = True<br>        End If<br>        Console.WriteLine()<br>        Obj = New BadParser()<br>        Time = DateTime.Now<br>        Answer = Obj.evaluate(New String() {"99"})<br>        Console.WriteLine("Time: " &amp; (DateTime.Now.Subtract(Time)).TotalSeconds &amp; " seconds")<br>        DesiredAnswer = 99<br>        Console.WriteLine("Your Answer:")<br>        Console.WriteLine("  " &amp; Answer)<br>        Console.WriteLine("Desired Answer:")<br>        Console.WriteLine("  " &amp; DesiredAnswer)<br>        If Answer = DesiredAnswer Then<br>            Console.WriteLine("Match :-)")<br>        Else<br>            Console.WriteLine("DOESN'T MATCH!!!!")<br>            Errors = True<br>        End If<br>        Console.WriteLine()<br><br>        If Errors Then<br>            Console.WriteLine("Some of the test cases had errors :-(")<br>        Else<br>            Console.WriteLine("You're a stud (at least on the test data)! :-D ")<br>        End If<br>    End Sub<br>End Module<br><br>'Powered by [KawigiEdit]<br><br><br>'' Powered by FileEdit<br></td>