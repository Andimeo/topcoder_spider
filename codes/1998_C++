<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;iostream&gt;<br>#include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;functional&gt;<br>#include &lt;numeric&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cmath&gt;<br>#include &lt;queue&gt;<br>using namespace std;<br>typedef vector&lt;int&gt; VI;  typedef vector&lt;vector&lt;int&gt; &gt; VVI;<br>typedef vector&lt;string&gt; VS;  typedef vector&lt;vector&lt;string&gt; &gt; VVS;<br>typedef signed long long i64;  typedef unsigned long long u64;<br><br>string a, b, c;<br>int memo[100][100][100];<br>int doit(int ap, int bp, int cp) {<br>  if( ap == a.size() &amp;&amp; bp == b.size() &amp;&amp; cp == c.size() ) return 0;<br>  int &amp;ret = memo[ap][bp][cp];<br>  if( ret ) return ret;<br>  ret = 1000000;<br>  if( ap &lt; a.size() )<br>    ret &lt;?= 1 + doit(ap+1, bp+(bp&lt;b.size() &amp;&amp; b[bp]==a[ap]),<br>                 cp+(cp&lt;c.size() &amp;&amp; c[cp]==a[ap]));<br>  if( bp &lt; b.size() )<br>    ret &lt;?= 1 + doit(ap+(ap&lt;a.size() &amp;&amp; a[ap]==b[bp]), bp+1,<br>                 cp+(cp&lt;c.size() &amp;&amp; c[cp]==b[bp]));<br>  if( cp &lt; c.size() )<br>    ret &lt;?= 1 + doit(ap+(ap&lt;a.size() &amp;&amp; a[ap]==c[cp]),<br>                 bp+(bp&lt;b.size() &amp;&amp; b[bp]==c[cp]), cp+1);<br>  return ret;<br>}<br><br>class Find3Cheaters {<br>public:<br>int shortest(string A, string B, string C) {<br>  a = A; b = B; c = C;<br>  return doit(0, 0, 0);<br>}<br>};<br><br><br>// Powered by FileEdit<br></td>