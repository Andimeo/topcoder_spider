<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections;<br>using System.Collections.Specialized;<br>using System.Text;<br>using System.Text.RegularExpressions;<br> <br>public class PipePuzzle<br>{<br>  char[,] grid;<br>  int best=0, nx=0, ny=0;<br>  int[,] used;<br>  <br>  void record(int i) {<br>    if (i &gt; best)<br>      best=i;<br>  }<br>  <br>  void doit(int l, int i, int j, int x, int y) {<br>    int[,] save = new int[nx,ny];<br>    for (int a=0; a&lt;nx; ++a)<br>      for (int b=0; b&lt;ny; ++b)<br>        save[a,b] = used[a,b];<br>    while (true) {<br>      i += x;<br>      j += y;<br>      if (i&lt;0 || i&gt;=nx || j&lt;0 || j&gt;= ny || used[i,j]==1) {<br>        break;<br>      }<br>      ++l;<br>      if (grid[i,j] == '|' || grid[i,j] == '-') {<br>        if (y==0) {<br>          used[i,j] = 1;<br>        } else {<br>          used[i,j] = 1;<br>        }<br>      } else if (grid[i,j] == '+') {<br>      } else if (grid[i,j] == 'L') {<br>        if (y==0) {<br>          used[i,j]=1;<br>          doit(l, i, j, 0, 1);<br>          doit(l, i, j, 0, -1);<br>          break;<br>        } else {<br>          used[i,j]=1;<br>          doit(l, i, j, 1, 0);<br>          doit(l, i, j, -1, 0);<br>          break;<br>        }<br>      }<br>    }<br>    record(l);<br>    for (int a=0; a&lt;nx; ++a)<br>      for (int b=0; b&lt;ny; ++b)<br>        used[a,b] = save[a,b];<br>  }<br>  <br>  public int longest(string[] pipes)<br>  {<br>    nx = pipes.Length;<br>    ny = pipes[0].Length;<br>    grid = new char[nx,ny];<br>    used = new int[nx,ny];<br>    int si=0,sj=0;<br>    <br>    for (int i=0; i&lt;nx; ++i)<br>      for (int j=0; j&lt;ny; ++j) {<br>        grid[i,j] = pipes[i][j];<br>        <br>        if (grid[i,j] != '+' &amp;&amp; grid[i,j] != 'L' &amp;&amp; grid[i,j] != '|' &amp;&amp; grid[i,j] != '-') {<br>          si=i;<br>          sj=j;<br>        }<br>      }<br>    used[si,sj] = 1;<br>    if (grid[si,sj] == 'N')<br>      doit(0,si,sj,-1,0);<br>    else if (grid[si,sj] == 'S')<br>      doit(0,si,sj,1,0);<br>    else if (grid[si,sj] == 'E')<br>      doit(0,si,sj,0,1);<br>    else if (grid[si,sj] == 'W')<br>      doit(0,si,sj,0,-1);<br>    return best;<br>  }<br>  <br>  #region Testing<br>  #endregion<br>}<br> <br>//Powered by [KawigiEdit]<br></td>