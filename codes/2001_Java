<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br><br>public class PipePuzzle {<br>    public char[][] maze;<br>    public int ylen;<br>    public int xlen;<br>    public int res = 0;<br>        public int longest(String[] pipes) {<br>            ylen = pipes.length;<br>            xlen = pipes[0].length();<br><br>            maze = new char[ylen][];<br>            for (int y = 0; y &lt; ylen; y++) {<br>                maze[y] = pipes[y].toCharArray();<br>            }<br><br>            for (int y = 0; y &lt; ylen; y++) {<br>                for (int x = 0; x&lt; xlen; x++) {<br>                    if ('N' == maze[y][x]) {<br>                        trace(x, y-1, 'S', 0);<br>                    } else if ('S' == maze[y][x]) {<br>                        trace(x, y+1, 'N', 0);<br>                    } else if ('W' == maze[y][x]) {<br>                        trace(x-1, y, 'E', 0);<br>                    } else if ('E' == maze[y][x]) {<br>                        trace(x+1, y, 'W', 0);<br>                    }<br>                }<br>            }<br><br>            return res;<br>        }<br><br>    void bidResult(int bid) {<br>        if (bid &gt; res)<br>            res = bid;<br>    }<br><br>    void trace(int x, int y, char entry, int curres) {<br>        if ((x &lt; 0) || (y &lt; 0) || (x &gt;= xlen) || (y &gt;= ylen)) {<br>            bidResult(curres);<br>            return;<br>        }<br>        if ('S' == entry) {<br>            if ('+' == maze[y][x]) {<br>                trace(x, y-1, 'S', curres+1);<br>            }<br>            if ('-' == maze[y][x]) {<br>                maze[y][x] = '#';<br>                trace(x, y-1, 'S', curres+1);<br>                maze[y][x] = '-';<br>            }<br>            if ('L' == maze[y][x]) {<br>                maze[y][x] = '#';<br>                trace(x-1, y, 'E', curres+1);<br>                trace(x+1, y, 'W', curres+1);<br>                maze[y][x] = 'L';<br>            }<br>            bidResult(curres);<br>        }<br><br>        // ===========]<br>        if ('N' == entry) {<br>            if ('+' == maze[y][x]) {<br>                trace(x, y+1, 'N', curres+1);<br>            }<br>            if ('-' == maze[y][x]) {<br>                maze[y][x] = '#';<br>                trace(x, y+1, 'N', curres+1);<br>                maze[y][x] = '-';<br>            }<br>            if ('L' == maze[y][x]) {<br>                maze[y][x] = '#';<br>                trace(x-1, y, 'E', curres+1);<br>                trace(x+1, y, 'W', curres+1);<br>                maze[y][x] = 'L';<br>            }<br>            bidResult(curres);<br>        }<br><br>        // ===========]<br>        if ('W' == entry) {<br>            if ('+' == maze[y][x]) {<br>                trace(x+1, y, 'W', curres+1);<br>            }<br>            if ('-' == maze[y][x]) {<br>                maze[y][x] = '#';<br>                trace(x+1, y, 'W', curres+1);<br>                maze[y][x] = '-';<br>            }<br>            if ('L' == maze[y][x]) {<br>                maze[y][x] = '#';<br>                trace(x, y-1, 'S', curres+1);<br>                trace(x, y+1, 'N', curres+1);<br>                maze[y][x] = 'L';<br>            }<br>            bidResult(curres);<br>        }<br><br>        // ===========]<br>        if ('E' == entry) {<br>            if ('+' == maze[y][x]) {<br>                trace(x-1, y, 'E', curres+1);<br>            }<br>            if ('-' == maze[y][x]) {<br>                maze[y][x] = '#';<br>                trace(x-1, y, 'E', curres+1);<br>                maze[y][x] = '-';<br>            }<br>            if ('L' == maze[y][x]) {<br>                maze[y][x] = '#';<br>                trace(x, y-1, 'S', curres+1);<br>                trace(x, y+1, 'N', curres+1);<br>                maze[y][x] = 'L';<br>            }<br>            bidResult(curres);<br>        }<br><br>    }<br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by RETester [based on ExampleBuilder]<br>// Powered by CodeProcessor<br></td>