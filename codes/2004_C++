<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;algorithm&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cmath&gt;<br>#include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;cctype&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;iostream&gt;<br>#include &lt;sstream&gt;<br>using namespace std;<br><br>#define REP(i,n) for(int i=0;i&lt;(n);++i)<br>#define FOR(i,a,b) for(int i=(a);i&lt;=(b);++i)<br>#define FORD(i,a,b) for(int i=(a);i&gt;=(b);--i)<br>#define FOREACH(it,c) for(__typeof((c).begin()) it=(c).begin();it!=(c).end();++it)<br><br>template&lt;class T&gt; inline int size(const T&amp;c) { return c.size(); }<br>typedef long long LL; typedef vector&lt;int&gt; VI; typedef vector&lt;string&gt; VS;<br>const int INF = 1000000000;<br><br>const int MAXN =1000;<br><br>int n;<br>char let[MAXN];<br>int ptr[MAXN];<br>bool vis[MAXN];<br><br>char calc(int x) {<br>  if(let[x]!='?') vis[x]=true;<br>  if(vis[x]) return let[x];<br>  vis[x]=true;<br>  let[x]=  calc(ptr[x]);<br>  return let[x];<br>}<br><br>struct RepeatedSubstrings {<br>  // MAIN<br>  string decompress(string compressed) {<br>    compressed+='#';<br>    n = 0;<br>    int d=0;<br>    for(;;) {<br>      if(compressed[d]=='#') break;<br>      if(compressed[d]=='&amp;') {<br>        int a=0;<br>        ++d;<br>        while(isdigit(compressed[d])) { a=10*a+compressed[d]-'0'; ++d; }<br>        ++d;<br>        int b=0;<br>        while(isdigit(compressed[d])) { b=10*b+compressed[d]-'0'; ++d; }<br>        FOR(i,a,b) { let[n]='?'; ptr[n]=i; ++n; }<br>      }<br>      else {<br>        let[n]=compressed[d];<br>        ++n; ++d;<br>      }<br>    }<br>    REP(i,n) vis[i]=false;<br>    REP(i,n) calc(i);<br>    string res;<br>    REP(i,n) res+=let[i];<br>    return res;<br>  }<br>};<br><br><br><br>// Powered by FileEdit<br></td>