<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br><br>public class RepeatedSubstrings <br>{<br>    int[][] R = new int[300][3];<br>    int rct = 0;<br><br>  public String decompress(String compressed) <br>  {<br>      int len = 0;<br>      int pos = 0;<br>      char[] W = new char[300];<br>      for (int i = 0; i &lt; compressed.length(); i++)<br>    {<br>        if (let(compressed.charAt(i)))<br>      {<br>          W[pos++] = compressed.charAt(i);<br>          continue;<br>      }<br>        int h = compressed.indexOf('-', i);<br>        System.out.println("p = " + i + " h = " + h);<br>        //        if (h &gt; 4) return "";<br>        int low = Integer.parseInt(compressed.substring(i+1, h));<br>        int j = h+1;<br>        for (j = h+1; j &lt; compressed.length(); j++)<br>      {<br>          if (!num(compressed.charAt(j))) break;<br>      }<br>        System.out.println("low = " + low + " j = " + j + " H = " + h);<br>        //        if (h+1 == j) return "";<br>        int high = Integer.parseInt(compressed.substring(h+1, j));<br>        System.out.println("hi = " + high);<br>        i = j-1;<br>        R[rct][0] = low;<br>        R[rct][1] = high;<br>        R[rct][2] = pos;<br>        System.out.println("pos = " + pos);<br>        for (int k = low; k &lt;= high; k++)<br>      W[pos++] = '?';<br>        rct++;<br>    }<br><br>      boolean done = false;<br>      while (!done)<br>    {<br>        done = true;<br>        outer: for (int i = 0; i &lt; rct; i++)<br>      {<br>          //          for (int j = R[i][0]; j &lt;= R[i][1];  j++)<br>          //        if (W[j] == '?') continue outer;<br>          //          done = false;<br>          for (int j = R[i][0]; j &lt;= R[i][1];  j++)<br>        {<br>            int index = R[i][2] + j - R[i][0];<br>            /*<br>            System.out.println("j = " + j + " ind = " +<br>             index + " " + W[index] + " "<br>             + W[j]);<br>            */<br>            if (W[index] != '?') continue;<br>            if (W[j] == '?') continue;<br>            W[index] = W[j];<br>            done = false;<br>        }<br>      }<br>    }<br><br>      String ret = new String(W);<br>      return ret.substring(0, pos);<br>  }<br><br>    boolean num(char l)<br>    {<br>  if (l &gt;= '0' &amp;&amp; l &lt;= '9') return true;<br>  return false;<br>    }<br><br>    boolean let(char l)<br>    {<br>  if (l &gt;= 'A' &amp;&amp; l &lt;= 'Z') return true;<br>  if (l == ' ') return true;<br>  return false;<br>    }<br><br>  int[][] DIRS = {{1,0}, {0,1}, {-1,0},{0,-1}};<br><br>  public static void main(String[] args) <br>  {<br>  RepeatedSubstrings temp = new RepeatedSubstrings();<br>//    System.out.println(temp.decompress(String compressed));<br>  }<br>}<br><br><br>// Powered by FileEdit<br></td>