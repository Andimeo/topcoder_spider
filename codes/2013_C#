<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Text;<br>using System.Collections;<br><br>public class Deranged {<br>  int n;<br>  bool[,] used;<br>  long[,] memo;<br>  int [] nums;<br><br>  int [] v;<br><br><br><br><br>  long calc(int index, int mask)<br>  {<br>    if (index &gt;= n) return 1;<br><br>    if (used[index, mask]) return memo[index,mask];<br><br>    long cnt = 0;<br><br>    for(int j,i = 0; i&lt;n; i++)<br>    {<br>      if (((1&lt;&lt;i) &amp; mask) != 0)<br>        continue;<br>      if (nums[i] == nums[index]) continue;<br><br>      for(j = 0; j&lt;i; j++)<br>      {<br>        if (((1&lt;&lt;j) &amp; mask) != 0)<br>          continue;<br><br>        if (nums[i] == nums[j])<br>          break;<br><br>      }<br><br>      if (i!=j) continue;<br><br>      cnt += calc(index+1, mask | (1&lt;&lt;i));      <br>    }<br>    used[index,mask] = true;<br>    memo[index,mask] = cnt;<br>    return cnt;<br>  }<br><br>  public long numDerangements(int[] nums) {<br>    n = nums.Length;<br><br>    used = new bool[n, 1&lt;&lt;n];<br>    memo = new long[n, 1&lt;&lt;n];<br>    this.nums = nums;<br>    v = new int[n];<br><br><br><br>    <br><br>    return calc(0,0);<br>  }<br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by TZTester for c# [12-oct-2003]<br>// Powered by CodeProcessor<br></td>