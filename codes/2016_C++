<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;algorithm&gt;<br>#include &lt;cassert&gt;<br>#include &lt;cctype&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cstring&gt;<br>#include &lt;functional&gt;<br>#include &lt;iostream&gt;<br>#include &lt;iomanip&gt;<br>#include &lt;limits&gt;<br>#include &lt;list&gt;<br>#include &lt;map&gt;<br>#include &lt;numeric&gt;<br>#include &lt;queue&gt;<br>#include &lt;set&gt;<br>#include &lt;sstream&gt;<br>#include &lt;stack&gt;<br>#include &lt;string&gt;<br>#include &lt;utility&gt;<br>#include &lt;vector&gt;<br><br>#define VAR(i,e) __typeof(e) i = (e)<br>#define FOREACH(i,C) for (VAR(i, (C).begin()); i != (C).end(); ++i)<br>#define FOR(i,n) for (int i = 0; i &lt; (int)(n); ++i)<br><br>#define ALL(C) (C).begin(), (C).end()<br>#define MIN(C) *min_element(ALL(C))<br>#define MAX(C) *max_element(ALL(C))<br>#define SUM(C) accumulate(ALL(C), 0)<br><br>#define INF numeric_limits&lt;int&gt;::max()<br>#define MINF numeric_limits&lt;int&gt;::min()<br><br>using namespace std;<br><br>class Rounder{ <br>public: <br>int round(int n, int b) <br>{<br>  int t = n / b;<br>  if((t + 1) * b - n &lt;= n - t * b)++t;<br>  return t * b;<br>} <br><br> <br>}; <br><br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003]<br>// Powered by CodeProcessor<br></td>