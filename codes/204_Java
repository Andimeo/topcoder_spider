<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>public class Checkers<br>{<br>void o(String s) {System.out.println(s);}<br>char[][] grid = new char[8][8];<br>int[][] dist = new int[8][8];<br>boolean[][] jumped = new boolean[8][8];<br> <br>public int compute(String startpos, String[] pieces)<br>{<br>   for (int r = 0; r &lt; 8; r++) for (int c = 0; c &lt; 8; c++) grid[r][c] = '.';<br>   for (int r = 0; r &lt; 8; r++) for (int c = 0; c &lt; 8; c++) dist[r][c] = 1000;<br>   for (int i = 0; i &lt; pieces.length; i++)<br>      set(pieces[i]);<br> <br>   StringTokenizer st = new StringTokenizer(startpos, ",");<br>   int sc = Integer.parseInt(st.nextToken());<br>   int sr = Integer.parseInt(st.nextToken());<br>   dist[sr][sc] = 0;<br> <br>   for (int r = sr; r &lt; 8; r++)<br>      for (int c = 0; c &lt; 8; c++) {<br>         if (dist[r][c] &gt;= 1000) continue;<br>//         o(r + "," + c);<br>         // try  move<br>         if (check(r+1, c-1, '.')) dist[r+1][c-1] = Math.min(dist[r+1][c-1], dist[r][c]+1);<br>         if (check(r+1, c+1, '.')) dist[r+1][c+1] = Math.min(dist[r+1][c+1], dist[r][c]+1);<br>         // try jump<br>         if (check(r+1, c-1, 'B') &amp;&amp; check(r+2, c-2, '.')) {<br>            dist[r+2][c-2] = Math.min(dist[r+2][c-2], jumped[r][c] ? dist[r][c] : (dist[r][c] + 1));<br>            jumped[r+2][c-2] = true;<br>         }<br>         if (check(r+1, c+1, 'B') &amp;&amp; check(r+2, c+2, '.')) {<br>            dist[r+2][c+2] = Math.min(dist[r+2][c+2], jumped[r][c] ? dist[r][c] : (dist[r][c] + 1));<br>            jumped[r+2][c+2] = true;<br>         }<br>      }<br> <br>   int best = 1000;<br>   for (int c = 0; c &lt; 8; c++)<br>      best = Math.min(best, dist[7][c]);<br>   if (best == 1000) return -1;<br>   return best;<br>}<br> <br>void set(String s)<br>{<br>   StringTokenizer st = new StringTokenizer(s, ",");<br>   int x = Integer.parseInt(st.nextToken());<br>   int y = Integer.parseInt(st.nextToken());<br>   grid[y][x] = 'B';<br>}<br> <br>boolean check(int r, int c, char ch)<br>{<br>   if (r &gt;= 0 &amp;&amp; r &lt; 8 &amp;&amp; c &gt;= 0 &amp;&amp; c &lt; 8)<br>      return grid[r][c] == ch;<br>   else<br>      return false;<br>}<br>}<br></td>