<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Text;<br>using System.Text.RegularExpressions;<br>using System.Collections;<br><br>public class DNAMultiMatcher {<br>    int[,] lo1 = new int[2501,2501];<br>    int[,] lo2 = new int[2501,2501];<br>    int lmx( int[,] lo, int n, string a, string b ) {<br>        int res = 0;<br>        for ( int i = 0; i != b.Length ; i++ ) {<br>            res = Math.Max( res, lm( lo, n, i, a, b ) );<br>        }<br>        return res;<br>    }<br>    int lm( int[,] lo, int n, int m, string a, string b ) {<br>        if ( lo[n,m] == -1 ) {<br>            int res = 0;<br>            if ( n == a.Length || m == b.Length ) {<br>                res = 0;<br>            } else if ( a[n] == b[m] ) {<br>                res = 1 + lm( lo, n+1, m+1, a, b);<br>            } else {<br>                res = 0;<br>            }<br>            lo[n,m] = res;<br>        }<br>        return lo[n,m];<br>    }<br>    string make( string[] ss ) {<br>        string res= "";<br>        foreach ( string s in ss ) res += s;<br>        return res;<br>    }<br>    public int longestMatch(string[] S1, string[] S2, string[] S3) {<br>        for ( int i = 0; i != 2501 ; i++ ) {<br>            for ( int j = 0; j != 2501 ; j++ ) {<br>                lo1[i,j] = lo2[i,j] = -1;<br>            }<br>        }<br>        int res=0;<br>        string s1=make(S1),s2=make(S2),s3=make(S3);<br>        for ( int i = 0 ; i != s1.Length ; i++ ) {<br>            res = Math.Max( res, Math.Min( lmx( lo1, i, s1, s2), lmx( lo2, i, s1, s3 ) ) );<br>        }<br>        return res;<br>    }<br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by CodeProcessor<br></td>