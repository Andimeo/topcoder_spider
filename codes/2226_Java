<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>public class LongPipes {<br>    public int fewestWelds(String[] s, String d) {<br>        int n=s.length;<br>        long[] l=new long[s.length];<br>        int i=0;<br>        long X;<br>        for (i=0;i&lt;n;i++) {<br>            l[i]=(long)Math.floor(Double.parseDouble(s[i])*1000+0.1);<br>        }<br>        Map m = new HashMap(1 &lt;&lt; 20);<br>        X = (long)Math.floor(Double.parseDouble(d)*1000+0.1);<br>        int j;<br>        int numb;<br>        long sum;<br>        for (i=0;i&lt;1&lt;&lt;(n/2);i++) {<br>            numb=0;<br>            sum=0;<br>            for (j=0;j&lt;n/2;j++) {<br>                if ((i&amp;(1&lt;&lt;j))!=0) {<br>                    numb++;<br>                    sum+=l[j];<br>                }<br>            }<br>            if (m.get(new Long(sum))==null||<br>                    ((Integer)m.get(new Long(sum))).intValue()&gt;numb) {<br>                m.remove(new Long(sum));<br>                m.put(new Long(sum),new Integer(numb));<br>            }<br>        }<br>        <br>        int bestsol=0;<br>        <br>        for (i=0;i&lt;1&lt;&lt;(n-n/2);i++) {<br>            numb=0;<br>            sum=0;<br>            for (j=0;j&lt;(n-n/2);j++) {<br>                if ((i&amp;(1&lt;&lt;j))!=0) {<br>                    numb++;<br>                    sum+=l[j+n/2];<br>                }<br>            }<br>            if (m.get(new Long(X-sum))!=null) {<br>                int xx = ((Integer)m.get(new Long(X-sum))).intValue();<br>                if (bestsol == 0 || bestsol&gt;xx+numb) {<br>                    bestsol=xx+numb;<br>                }<br>            }<br>        }<br>        return bestsol-1;<br>    }<br>    public final static void main(String[] args)<br>    {<br>        try {<br>            validateExample("1", new LongPipes().fewestWelds(new String[] {"1.000","2.000","4.000","8.000","16.000","32.000","64.000","128.000",  "256.000","512.000","1024.000","2048.000","4096.000","8192.000",  "16384.000","32768.000","65536.000"},"65535.000"), 15, "fewestWelds(new String[] {\"1.000\",\"2.000\",\"4.000\",\"8.000\",\"16.000\",\"32.000\",\"64.000\",\"128.000\",  \"256.000\",\"512.000\",\"1024.000\",\"2048.000\",\"4096.000\",\"8192.000\",  \"16384.000\",\"32768.000\",\"65536.000\"},\"65535.000\")");<br>            validateExample("2", new LongPipes().fewestWelds(new String[] {"0.001","0.002","0.004","0.008","0.016","0.032","0.064","0.128","0.256",  "0.512","1.024","2.048","4.096","8.192","16.384","32.768","65.536",  "131.072","262.144","524.288","1048.576","2097.152","4194.304","8388.608",  "16777.216","33554.432","67108.864","134217.728","268435.456","536870.912",  "1073741.824","2147483.648","4294967.296","8589934.592","17179869.184",   "34359738.368","68719476.736","137438953.472"},"233333333.555"), 17, "fewestWelds(new String[] {\"0.001\",\"0.002\",\"0.004\",\"0.008\",\"0.016\",\"0.032\",\"0.064\",\"0.128\",\"0.256\",  \"0.512\",\"1.024\",\"2.048\",\"4.096\",\"8.192\",\"16.384\",\"32.768\",\"65.536\",  \"131.072\",\"262.144\",\"524.288\",\"1048.576\",\"2097.152\",\"4194.304\",\"8388.608\",  \"16777.216\",\"33554.432\",\"67108.864\",\"134217.728\",\"268435.456\",\"536870.912\",  \"1073741.824\",\"2147483.648\",\"4294967.296\",\"8589934.592\",\"17179869.184\",   \"34359738.368\",\"68719476.736\",\"137438953.472\"},\"233333333.555\")");<br>            validateExample("3", new LongPipes().fewestWelds(new String[] {"1000000000.000","1000000000.000","1000000000.000","1000000000.000",  "1000000000.000","1000000000.000","1000000000.000","1000000000.000",  "1000000000.000","1000000000.000","1000000000.000","1000000000.000",  "1000000000.000","1000000000.000","1000000000.000","1000000000.000",  "1000000000.000","1000000000.000","1000000000.000","1000000000.000",  "1000000000.000","1000000000.000","1000000000.000","1000000000.000",  "1000000000.000","1000000000.000","1000000000.000","1000000000.000",  "1000000000.000","1000000000.000","1000000000.000","1000000000.000",  "1000000000.000","1000000000.000","1000000000.000","1000000000.000",  "1000000000.000","1000000000.000"},"38000000000.000"), 37, "fewestWelds(new String[] {\"1000000000.000\",\"1000000000.000\",\"1000000000.000\",\"1000000000.000\",  \"1000000000.000\",\"1000000000.000\",\"1000000000.000\",\"1000000000.000\",  \"1000000000.000\",\"1000000000.000\",\"1000000000.000\",\"1000000000.000\",  \"1000000000.000\",\"1000000000.000\",\"1000000000.000\",\"1000000000.000\",  \"1000000000.000\",\"1000000000.000\",\"1000000000.000\",\"1000000000.000\",  \"1000000000.000\",\"1000000000.000\",\"1000000000.000\",\"1000000000.000\",  \"1000000000.000\",\"1000000000.000\",\"1000000000.000\",\"1000000000.000\",  \"1000000000.000\",\"1000000000.000\",\"1000000000.000\",\"1000000000.000\",  \"1000000000.000\",\"1000000000.000\",\"1000000000.000\",\"1000000000.000\",  \"1000000000.000\",\"1000000000.000\"},\"38000000000.000\")");<br>            validateExample("4", new LongPipes().fewestWelds(new String[] {"0.002","0.002","0.004","0.008","0.016","0.032","0.064","0.128","0.256",  "0.512","1.024","2.048","4.096","8.192","16.384","32.768","65.536",  "131.072","262.144","524.288","1048.576","2097.152","4194.304","8388.608",  "16777.216","33554.432","67108.864","134217.728","268435.456","536870.912",  "1073741.824","2147483.648","4294967.296","8589934.592","17179869.184",   "34359738.368","68719476.736","137438953.472"},"1000000000.001"), -1, "fewestWelds(new String[] {\"0.002\",\"0.002\",\"0.004\",\"0.008\",\"0.016\",\"0.032\",\"0.064\",\"0.128\",\"0.256\",  \"0.512\",\"1.024\",\"2.048\",\"4.096\",\"8.192\",\"16.384\",\"32.768\",\"65.536\",  \"131.072\",\"262.144\",\"524.288\",\"1048.576\",\"2097.152\",\"4194.304\",\"8388.608\",  \"16777.216\",\"33554.432\",\"67108.864\",\"134217.728\",\"268435.456\",\"536870.912\",  \"1073741.824\",\"2147483.648\",\"4294967.296\",\"8589934.592\",\"17179869.184\",   \"34359738.368\",\"68719476.736\",\"137438953.472\"},\"1000000000.001\")");<br>        } catch (Exception e) {<br>            System.out.println(e);<br>            e.printStackTrace(System.out);<br>        }<br>    }<br><br>    private static void validateExample(String exampleNum, int returned, int expected, String methodInvocation) {<br>        print(exampleNum);<br>        print("  ");<br>        if (!eq(returned,expected)) {<br>            print("FAIL");<br>        } else {<br>            print("SUCCESS");<br>        }<br>        print(" ");<br>        print(methodInvocation);<br>        print("\tGot:[");<br>        print(returned);<br>        print("]\t");<br>        print("Expected:[");<br>        print(expected);<br>        print("]");<br>        print("\n");<br>    }<br><br>    public static void print(boolean a) {<br>        System.out.print(a);<br>    }<br><br>    public static void print(long a) {<br>        System.out.print(a);<br>    }<br><br>    public static void print(int a) {<br>        System.out.print(a);<br>    }<br><br>    public static void print(char a) {<br>        System.out.print(a);<br>    }<br><br>    public static void print(String a) {<br>        System.out.print(a);<br>    }<br><br>    public static void print(int[] a) {<br>        if (a==null) {System.out.print("null"); return;}<br>        for (int i=0; i&lt;a.length; i++) System.out.print(a[i]+(i&lt;a.length-1?",":""));<br>    }<br><br>    public static void print(int[][] a) {<br>        if (a==null) {System.out.print("null"); return;}<br>        for (int i=0; i&lt;a.length; i++) { print(a[i]); print("\n"); }<br>    }<br><br>    public static void print(String[] a) {<br>        if (a==null) {System.out.print("null"); return;}<br>        for (int i=0; i&lt;a.length; i++) System.out.print(a[i]+(i&lt;a.length-1?",":""));<br>    }<br><br>    public static boolean eq(boolean a, boolean b) {<br>        return a==b;<br>    }<br><br>    public static boolean eq(long a, long b) {<br>        return a==b;<br>    }<br><br>    public static boolean eq(int a, int b) {<br>        return a==b;<br>    }<br><br>    public static boolean eq(char a, char b) {<br>        return a==b;<br>    }<br><br>    public static boolean eq(String a, String b) {<br>        return a.equals(b);<br>    }<br><br>    public static boolean eq(int[] a, int[] b) { return Arrays.equals(a,b); }<br>    public static boolean eq(String[] a, String[] b) { return Arrays.equals(a,b); }<br><br>                              public static void print(double a) {<br>            System.out.print(a);<br>     }<br><br>     public static boolean eq(double a, double b) {<br>          return Math.abs(a-b)&lt;1e-15;<br>      }<br>}<br> <br>// Powered by CodeProcessor<br></td>