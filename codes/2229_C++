<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;algorithm&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cctype&gt;<br>#include &lt;cmath&gt;<br>#include &lt;iostream&gt;<br>#include &lt;sstream&gt;<br>#include &lt;string&gt;<br>#include &lt;utility&gt;<br>#include &lt;vector&gt;<br>using namespace std;<br>#define VAR(a,b) typeof(b) a=(b)<br>#define REP(i,n) for(int _n=n, i=0;i&lt;_n;++i)<br>#define FOR(i,a,b) for(int i=(a),_b=(b);i&lt;=_b;++i)<br>#define FORD(i,a,b) for(int i=(a),_b=(b);i&gt;=_b;--i)<br>#define FOREACH(it,c) for(VAR(it,(c).begin());it!=(c).end();++it)<br>#define ALL(f,w) ({ bool _ok=true; f _ok=_ok &amp;&amp; (w); _ok; })<br>#define EXISTS(f,w) (!ALL(f,!(w)))<br>typedef long long LL;<br>const int INF = 1000000000;<br>typedef vector&lt;int&gt; VI;<br>template&lt;class T&gt; inline int size(const T&amp;c) { return c.size(); }<br>template&lt;class T&gt; inline vector&lt;T&gt; makeV(const T&amp;x) { return vector&lt;T&gt;(1,x); }<br>template&lt;class T&gt; inline vector&lt;T&gt; makeV(const T&amp;x,const T&amp;y) {<br>  vector&lt;T&gt; v(2); v[0] = x; v[1] = y; return v;<br>}<br>template&lt;class T&gt; inline vector&lt;T&gt; makeV(const T&amp;x,const T&amp;y,const T&amp;z) {<br>  vector&lt;T&gt; v(3); v[0] = x; v[1] = y; v[2]=z; return v;<br>}<br>template&lt;class A,class B&gt; inline bool contains(const A&amp;a, const B&amp;b) {<br>  return find(a.begin(),a.end(),b)!=a.end();<br>}<br>template&lt;class T&gt; string i2s(T x) { ostringstream o; o&lt;&lt;x; return o.str(); }<br>vector&lt;string&gt; split(string s,string del=" ") {<br>  s+=del[0];<br>  string w;<br>  vector&lt;string&gt; res;<br>  FOREACH(it,s) {<br>    if(!contains(del,*it)) w+=*it;<br>    else if(w!="") { res.push_back(w); w=""; }<br>  }<br>  return res;<br>}<br> <br>///////////////////////////////////////////////////////////////////<br> <br>bool match(string a, string b) {<br>  FOREACH(it,a) *it = tolower(*it);<br>  FOREACH(it,b) *it = tolower(*it);<br>  int pa = 0, pb = 0;<br>  while(pa &lt; size(a) &amp;&amp; pb &lt; size(b)) {<br>    char c = b[pb];<br>    int ilea = 0;<br>    while(pa &lt; size(a) &amp;&amp; a[pa]==c) { ++ilea; ++pa; }<br>    int ileb = 0;<br>    while(pb &lt; size(b) &amp;&amp; b[pb]==c) { ++ileb; ++pb; }<br>    if(ilea &lt; ileb) return false;<br>  }<br>  return pa==size(a) &amp;&amp; pb==size(b);<br>}<br> <br>struct SpamDetector {<br>  // MAIN<br>  int countKeywords(string subjectLine, vector &lt;string&gt; keywords) {<br>    vector&lt;string&gt; v = split(subjectLine);<br>    int res = 0;<br>    FOREACH(it,v) if(EXISTS(FOREACH(jt,keywords),match(*it,*jt))) ++res;<br>    return res;<br>  }<br> <br> <br>  <br>///////////////////////////////////////////////////////////////////<br> <br> <br> <br> <br>};<br> <br> <br> <br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003]<br>// Powered by CodeProcessor<br></td>