<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;iostream&gt;<br>#include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;functional&gt;<br>#include &lt;numeric&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cmath&gt;<br>#include &lt;queue&gt;<br>#include &lt;map&gt;<br>using namespace std;<br>typedef vector&lt;int&gt; VI;  typedef vector&lt;vector&lt;int&gt; &gt; VVI;<br>typedef vector&lt;string&gt; VS;  typedef vector&lt;vector&lt;string&gt; &gt; VVS;<br>typedef signed long long i64;  typedef unsigned long long u64;<br><br>vector&lt;string&gt; tokenize(string s, string ch) {<br>  vector&lt;string&gt; ret;<br>  for( int p = 0, p2; p &lt; s.size(); p = p2+1 ) {<br>    p2 = s.find_first_of(ch, p);<br>    if( p2 == -1 ) p2 = s.size();<br>    if( p2-p &gt; 0 ) ret.push_back( s.substr(p, p2-p) );<br>  }<br>  return ret;<br>}<br><br>void doit(string s, int mul, map&lt;int, int&gt; &amp;m) {<br>  VS t = tokenize(s, " ");<br>  for( int i = 0; i &lt; t.size(); i++ ) {<br>    int x = atoi(t[i].c_str()), y;<br>    if( t[i].find('-') != -1 )<br>      y = atoi(t[i].c_str()+t[i].find('-')+1) + 1;<br>    else<br>      y = x + 1;<br>    m[x] += mul;<br>    m[y] -= mul;<br>  }<br>}<br><br>class RangeGame {<br>public:<br>vector &lt;int&gt; bestDoors(vector &lt;string&gt; a, vector &lt;string&gt; b) {<br>  int i, j, k, x, y, z, n;<br>  vector &lt;int&gt; ret;<br><br>  map&lt;int, int&gt; p;<br>  map&lt;int, int&gt;::iterator it;<br>  for( i = 0; i &lt; a.size(); i++ ) doit(a[i], 1, p);<br>  for( i = 0; i &lt;= b.size(); i++ ) {<br>    int z = -1, x = 0;<br>    for( it = p.begin(); it != p.end(); it++ ) {<br>      x += it-&gt;second;<br>      if( x &gt; z ) {y = it-&gt;first; z = x;}<br>    }<br>    ret.push_back(y);<br>    if( i == b.size() ) break;<br>    for( j = 0; j &lt; a.size(); j++ ) {<br>      map&lt;int, int&gt; m;<br>      doit(a[j], 1, m);<br>      doit(b[i], 1, m);<br>      x = 0;<br>      for( it = m.begin(); it != m.end(); it++ ) {<br>        x += it-&gt;second;<br>        if( x &gt; 1 ) break;<br>      }<br>      if( it != m.end() ) {<br>        doit(a[j], -1, p);<br>        a.erase(a.begin()+j--);<br>      }<br>    }<br>  }<br>  return ret;<br>}<br>};<br><br><br>// Powered by FileEdit<br></td>