<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections;<br> <br>public class ProbabilityTree<br>{<br>  private double[] prob;<br>  private double[][] baseProb;<br>  private int[] parents;<br>  private double fillProb( int node )<br>  {<br>    if( prob[node] &gt;= 0 )<br>      return prob[node];<br>    else<br>    {<br>      double parentProb = fillProb( parents[node] );<br>      prob[node] = parentProb * baseProb[node][0] + (1 - parentProb)* baseProb[node][1];<br>      return prob[node];<br>    }<br>  }<br>  public int[] getOdds(string[] tree, int _lowerBound, int _upperBound)<br>  {<br>    double lowerBound = (double)_lowerBound/100;<br>    double upperBound = (double)_upperBound/100;<br> <br>    prob = new double[tree.Length];<br>    for( int i=0; i&lt;prob.Length; i++ )<br>      prob[i] = -1;<br>    baseProb = new double[tree.Length][];<br>    parents = new int[tree.Length];<br>    prob[0] = double.Parse(tree[0])/100;<br>    int numInRange = ( prob[0] &gt; lowerBound &amp;&amp; prob[0] &lt; upperBound )?1:0;<br>    for( int i=1; i&lt;tree.Length; i++ )<br>    {<br>      string[] tokens = tree[i].Split( ' ' );<br>      int parent = int.Parse( tokens[0] );<br>      double prob1 = double.Parse( tokens[1] )/100;<br>      double prob2 = double.Parse( tokens[2] )/100;<br>      baseProb[i] = new double[]{ prob1, prob2 };<br>      parents[i] = parent;<br>      //prob[i] = prob1 * prob[parent] + prob2 * ( 1 - prob[parent] );<br>      //if( prob[i] &gt; lowerBound &amp;&amp; prob[i] &lt; upperBound )<br>      //  numInRange ++;<br>    }<br>    ArrayList res = new ArrayList();<br>    for( int i=0; i&lt;tree.Length; i++ )<br>    {<br>      double p = fillProb( i );<br>      if( p &gt; lowerBound &amp;&amp; p &lt; upperBound )<br>        res.Add( i );<br>    }<br>    int[] ret = new int[res.Count];<br>    res.CopyTo( ret );<br>    return ret;<br>    /*int reti = 0;<br>    for( int i=0; i&lt;tree.Length; i++ )<br>    {<br>      if( prob[i] &gt; lowerBound &amp;&amp; prob[i] &lt; upperBound )<br>        ret[reti++] = i;<br>    }<br>    return ret;*/<br>  }<br>}<br></td>