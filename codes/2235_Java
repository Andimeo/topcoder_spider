<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>import java.util.regex.*;<br>import java.text.*;<br>import java.math.*;<br> <br>public class FanFailure {<br>  private static final boolean DEBUG = false;<br> <br>  public int[] getRange(int[] capacities, int minCooling) {<br>    Arrays.sort( capacities );<br>    int size = 0;<br>    int remaining = 0;<br>    int remaining2 = 0;<br>    for (int i = 0; i &lt; capacities.length; i++) {<br>      remaining += capacities[i];<br>    }<br>    remaining2 = remaining;<br>    while (remaining &gt;= minCooling &amp;&amp; size &lt; capacities.length) {<br>      remaining -= capacities[ size++ ];<br>    }<br>    <br>    int size2 = capacities.length - 1;<br>    while (remaining2 &gt;= minCooling &amp;&amp; size2 &gt;= 0) {<br>      remaining2 -= capacities[size2--];<br>    }<br>    size2 = capacities.length - 1 - size2;<br>    int[] ans = { size - 1, size2 - 1};<br>    return ans;<br>  }<br> <br>  /** begin cut - don't modify this line*/<br>  public static void main(String[] a) {<br>    new FanFailure().runTestCase(0);<br>    new FanFailure().runTestCase(1);<br>    new FanFailure().runTestCase(2);<br>    new FanFailure().runTestCase(3);<br>  }<br> <br>  public void runTestCase(int nbr) {<br>    switch(nbr) {<br>      case 0 : {<br>        checkOutput(getRange(new int[] {1,2,3}, 2), new int[] { 2,  1 }, 0); break;<br>      }<br>      case 1 : {<br>        checkOutput(getRange(new int[] {8,5,6,7}, 22), new int[] { 0,  0 }, 1); break;<br>      }<br>      case 2 : {<br>        checkOutput(getRange(new int[] {676, 11, 223, 413, 823, 122, 547, 187, 28}, 1000), new int[] { 7,  2 }, 2); break;<br>      }<br>      case 3 : {<br>        checkOutput(getRange(new int[] {955, 96, 161, 259, 642, 242, 772, 369, 311, 785,  92, 991, 620, 394, 128, 774, 973, 94, 681, 771,  916, 373, 523, 100, 220, 993, 472, 798, 132, 361,  33, 362, 573, 624, 722, 520, 451, 231, 37, 921,  408, 170, 303, 559, 866, 412, 339, 757, 822, 192}, 3619), new int[] { 46,  30 }, 3); break;<br>      }<br>    }<br>  }<br>  final void checkOutput(int mine, int them, int nbr) {<br>    boolean success = (mine==them);<br>    StringBuffer out = new StringBuffer();<br>    out.append("Example ");<br>    out.append((nbr+1));<br>    out.append(" - ");<br>    out.append(success ? "success" : "failure   ");<br>    if(!success) {<br>      out.append("Got: ");<br>      out.append(mine);<br>      out.append(", Expected: ");<br>      out.append(them);<br>    }<br>    System.out.println(out);<br>  }<br>  final void checkOutput(long mine, long them, int nbr) {<br>    boolean success = (mine==them);<br>    StringBuffer out = new StringBuffer();<br>    out.append("Example ");<br>    out.append((nbr+1));<br>    out.append(" - ");<br>    out.append(success ? "success" : "failure   ");<br>    if(!success) {<br>      out.append("Got: ");<br>      out.append(mine);<br>      out.append(", Expected: ");<br>      out.append(them);<br>    }<br>    System.out.println(out);<br>  }<br>  final void checkOutput(double mine, double them, int nbr) {<br>    boolean success = doubleCompare(mine, them);<br>    StringBuffer out = new StringBuffer();<br>    out.append("Example ");<br>    out.append((nbr+1));<br>    out.append(" - ");<br>    out.append(success ? "success" : "failure   ");<br>    if(!success) {<br>      out.append("Got: ");<br>      out.append(mine);<br>      out.append(", Expected: ");<br>      out.append(them);<br>    }<br>    System.out.println(out);<br>  }<br>  private static boolean doubleCompare(double expected, double result){<br>    double MAX_DOUBLE_ERROR = 1E-9;<br>    if(Double.isNaN(expected)){<br>      return Double.isNaN(result);<br>    }else if(Double.isInfinite(expected)){<br>      if(expected &gt; 0){<br>        return result &gt; 0 &amp;&amp; Double.isInfinite(result);<br>      }else{<br>        return result &lt; 0 &amp;&amp; Double.isInfinite(result);<br>      }<br>    }else if(Double.isNaN(result) || Double.isInfinite(result)){<br>      return false;<br>    }else if(Math.abs(result - expected) &lt; MAX_DOUBLE_ERROR){<br>      return true;<br>    }else{<br>      double min = Math.min(expected * (1.0 - MAX_DOUBLE_ERROR),<br>        expected * (1.0 + MAX_DOUBLE_ERROR));<br>      double max = Math.max(expected * (1.0 - MAX_DOUBLE_ERROR),<br>          expected * (1.0 + MAX_DOUBLE_ERROR));<br>      return result &gt; min &amp;&amp; result &lt; max;<br>    }<br>  }<br>  final void checkOutput(char mine, char them, int nbr) {<br>    boolean success = (mine==them);<br>    StringBuffer out = new StringBuffer();<br>    out.append("Example ");<br>    out.append((nbr+1));<br>    out.append(" - ");<br>    out.append(success ? "success" : "failure   ");<br>    if(!success) {<br>      out.append("Got: ");<br>      out.append("'");<br>      out.append(mine);<br>      out.append("'");<br>      out.append(", Expected: ");<br>      out.append("'");<br>      out.append(them);<br>      out.append("'");<br>    }<br>    System.out.println(out);<br>  }<br>  final void checkOutput(String mine, String them, int nbr) {<br>    boolean success = (mine.equals(them));<br>    StringBuffer out = new StringBuffer();<br>    out.append("Example ");<br>    out.append((nbr+1));<br>    out.append(" - ");<br>    out.append(success ? "success" : "failure   ");<br>    if(!success) {<br>      out.append("Got: ");<br>      out.append("\"");<br>      out.append(mine);<br>      out.append("\"");<br>      out.append(", Expected: ");<br>      out.append("\"");<br>      out.append(them);<br>      out.append("\"");<br>    }<br>    System.out.println(out);<br>  }<br>  final void checkOutput(long[] mine, long[] them, int nbr) {<br>    boolean success = (Arrays.equals(mine, them));<br>    StringBuffer out = new StringBuffer();<br>    out.append("Example ");<br>    out.append((nbr+1));<br>    out.append(" - ");<br>    out.append(success ? "success" : "failure   ");<br>    if(!success) {<br>      out.append("Got: ");<br>      out.append("{");<br>      for(int x=0;x&lt;mine.length;x++) {<br>        out.append(mine[x]);<br>        if(x&lt;mine.length-1) out.append(", ");<br>      }<br>      out.append("}");<br>      out.append(", Expected: ");<br>      out.append("{");<br>      for(int x=0;x&lt;them.length;x++) {<br>        out.append(them[x]);<br>        if(x&lt;them.length-1) out.append(", ");<br>      }<br>      out.append("}");<br>    }<br>    System.out.println(out);<br>  }<br>  final void checkOutput(char[] mine, char[] them, int nbr) {<br>    boolean success = (Arrays.equals(mine, them));<br>    StringBuffer out = new StringBuffer();<br>    out.append("Example ");<br>    out.append((nbr+1));<br>    out.append(" - ");<br>    out.append(success ? "success" : "failure   ");<br>    if(!success) {<br>      out.append("Got: ");<br>      out.append("{");<br>      for(int x=0;x&lt;mine.length;x++) {<br>        out.append(mine[x]);<br>        if(x&lt;mine.length-1) out.append(", ");<br>      }<br>      out.append("}");<br>      out.append(", Expected: ");<br>      out.append("{");<br>      for(int x=0;x&lt;them.length;x++) {<br>        out.append(them[x]);<br>        if(x&lt;them.length-1) out.append(", ");<br>      }<br>      out.append("}");<br>    }<br>    System.out.println(out);<br>  }<br>  final void checkOutput(double[] mine, double[] them, int nbr) {<br>    boolean success = (Arrays.equals(mine, them));<br>    StringBuffer out = new StringBuffer();<br>    out.append("Example ");<br>    out.append((nbr+1));<br>    out.append(" - ");<br>    out.append(success ? "success" : "failure   ");<br>    if(!success) {<br>      out.append("Got: ");<br>      out.append("{");<br>      for(int x=0;x&lt;mine.length;x++) {<br>        out.append(mine[x]);<br>        if(x&lt;mine.length-1) out.append(", ");<br>      }<br>      out.append("}");<br>      out.append(", Expected: ");<br>      out.append("{");<br>      for(int x=0;x&lt;them.length;x++) {<br>        out.append(them[x]);<br>        if(x&lt;them.length-1) out.append(", ");<br>      }<br>      out.append("}");<br>    }<br>    System.out.println(out);<br>  }<br>  final void checkOutput(int[] mine, int[] them, int nbr) {<br>    boolean success = (Arrays.equals(mine, them));<br>    StringBuffer out = new StringBuffer();<br>    out.append("Example ");<br>    out.append((nbr+1));<br>    out.append(" - ");<br>    out.append(success ? "success" : "failure   ");<br>    if(!success) {<br>      out.append("Got: ");<br>      out.append("{");<br>      for(int x=0;x&lt;mine.length;x++) {<br>        out.append(mine[x]);<br>        if(x&lt;mine.length-1) out.append(", ");<br>      }<br>      out.append("}");<br>      out.append(", Expected: ");<br>      out.append("{");<br>      for(int x=0;x&lt;them.length;x++) {<br>        out.append(them[x]);<br>        if(x&lt;them.length-1) out.append(", ");<br>      }<br>      out.append("}");<br>    }<br>    System.out.println(out);<br>  }<br>  final void checkOutput(String[] mine, String[] them, int nbr) {<br>    boolean success = (Arrays.equals(mine, them));<br>    StringBuffer out = new StringBuffer();<br>    out.append("Example ");<br>    out.append((nbr+1));<br>    out.append(" - ");<br>    out.append(success ? "success" : "failure   ");<br>    if(!success) {<br>      out.append("Got: ");<br>      out.append("{");<br>      for(int x=0;x&lt;mine.length;x++) {<br>        out.append(mine[x]);<br>        if(x&lt;mine.length-1) out.append(", ");<br>      }<br>      out.append("}");<br>      out.append(", Expected: ");<br>      out.append("{");<br>      for(int x=0;x&lt;them.length;x++) {<br>        out.append(them[x]);<br>        if(x&lt;them.length-1) out.append(", ");<br>      }<br>      out.append("}");<br>    }<br>    System.out.println(out);<br>  }<br> <br>/** end cut - don't modify this line*/<br>  <br>}<br> <br>// Powered by PopsEdit<br>// Powered by CodeProcessor<br></td>