<td class="problemText" colspan="8" valign="middle" align="left">
            /*/*///*/*/ Powered by radedit!            /*/*/*/*/*/ ;<br>/*/*//*/*/  import java . util .           /*/*/*/*/*/ ;<br>/*/*//*/*/  import java . lang . reflect . /*/*/*/*/*/ ;<br>public class BinaryQuipu {<br>   boolean ddd = false ;<br>  int max = 10000 ;<br>  int leftright[][] = new int[max][2] ;<br>  int alloc = 1 ;<br>  HashMap h = new HashMap() ;<br>  int canon(int src, int i) {<br>    if (i == -1) {<br>      return -1 ;<br>    }<br>    int left = canon(0, leftright[i][0]) ;<br>    int right = canon(1, leftright[i][1]) ;<br>    String key = "" + src + "," + left + "," + right ;<br>    Integer t = (Integer)(h.get(key)) ;<br>    if (t != null) {<br>      return t.intValue() ;<br>    }<br>    h.put(key, new Integer(alloc)) ;<br>    leftright[alloc][0] = left ;<br>    leftright[alloc][1] = right ;<br>    return alloc++ ;<br>  }<br>  public int fewestKnots(String[] inventory) {<br>    int i, j, k ;<br>    for (i=0; i&lt;max; i++) {<br>      leftright[i][0] = leftright[i][1] = -1 ;<br>    }<br>    for (i=0; i&lt;inventory.length; i++) {<br>      String s = inventory[i] ;<br>      int at = 0 ;<br>      for (j=0; j&lt;s.length(); j++) {<br>  int lr = (s.charAt(j) == 's' ? 1 : 0) ;<br>  if (leftright[at][lr] &lt; 0) {<br>    leftright[at][lr] = alloc ;<br>    at = alloc ;<br>    alloc++ ;<br>  } else {<br>    at = leftright[at][lr] ;<br>  }<br>      }<br>    }<br>    int t = alloc ;<br>    canon(2, 0) ;<br>    return alloc - t ;<br>  }<br> <br>  static void pp(Object o) { System.out.println(o) ; }<br>}<br></td>