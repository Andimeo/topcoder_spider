<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>import java.math.*;<br>import java.text.*;<br>public class Books {<br>   boolean debug = false;<br>   <br>   Set set = new HashSet(), seta = new HashSet(), setb = new HashSet();<br>   ArrayList al = new ArrayList(), ala = new ArrayList(), alb = new ArrayList();<br>   Hashtable ht = new Hashtable(), hta = new Hashtable(), htb = new Hashtable();<br>   StringTokenizer tok, toka, tokb;<br>   StringBuffer buf = new StringBuffer();<br>   <br>   final double PI = Math.PI, E = Math.E;<br>   int MAX = 1000 * 1000 * 1000, nil = -1;<br>   <br>   public int sortMoves(String[] aa) {<br>      String bb[] = copy(aa);<br>      Arrays.sort(bb);<br>      int n = aa.length;<br>      <br>      int mm [][] = new int [n][n];<br>      for (int i = 0; i &lt; n; i ++) {<br>         for (int j = 0; j &lt; n; j ++) {<br>            <br>            if (aa[i].equals(bb[j])) {<br>               mm[i][j] = ((i &gt; 0 &amp;&amp; j &gt; 0) ? mm[i - 1][j - 1] : 0) + 1;<br>            }<br>            else {<br>               mm[i][j] = Math.max( (i &gt; 0) ? mm[i - 1][j] : 0, (j &gt; 0) ? mm[i][j - 1] : 0);<br>            }<br>         }<br>      }<br>      <br>      return n - mm[n - 1][n - 1];<br>   } // end of method sortMoves<br>   <br>   <br>   ////////////////////////////////////////////////////////<br>   /////////  Note: helper functions start here  //////////<br>   ////////////////////////////////////////////////////////<br>   <br>   void sout(int a) {<br>      if (!debug) return; System.out.println(a);<br>   }<br>   void sout(long a) {<br>      if (!debug) return; System.out.println(a);<br>   }<br>   void sout(char a) {<br>      if (!debug) return; System.out.println(a);<br>   }<br>   void sout(boolean a) {<br>      if (!debug) return; System.out.println(a);<br>   }<br>   void sout(double a) {<br>      if (!debug) return; System.out.println(a);<br>   }<br>   void sout(Object a) {<br>      if (!debug) return; System.out.println(a);<br>   }<br>   void sout(String [] a) {<br>      if (!debug) return;<br>      System.out.println("Array size = " + a.length);<br>      System.out.print("[");<br>      for (int i = 0; i &lt; a.length; i ++) System.out.println(a[i] + ",");<br>      System.out.println("]");<br>   }<br>   void sout(int [] a) {<br>      if (!debug) return;<br>      System.out.println("Array size = " + a.length);<br>      System.out.print("[");<br>      for (int i = 0; i &lt; a.length; i ++) System.out.print(a[i] + ",");<br>      System.out.println("]");<br>   }<br>   void sout(long [] a) {<br>      if (!debug) return;<br>      System.out.println("Array size = " + a.length);<br>      System.out.print("[");<br>      for (int i = 0; i &lt; a.length; i ++) System.out.print(a[i] + ",");<br>      System.out.println("]");<br>   }<br>   void sout(char [] a) {<br>      if (!debug) return;<br>      System.out.println("Array size = " + a.length);<br>      System.out.print("[");<br>      for (int i = 0; i &lt; a.length; i ++) System.out.print(a[i] + ",");<br>      System.out.println("]");<br>   }<br>   void sout(boolean [] a) {<br>      if (!debug) return;<br>      System.out.println("Array size = " + a.length);<br>      System.out.print("[");<br>      for (int i = 0; i &lt; a.length; i ++) System.out.print(a[i] + ",");<br>      System.out.println("]");<br>   }<br>   void sout(double [] a) {<br>      if (!debug) return;<br>      System.out.println("Array size = " + a.length);<br>      System.out.print("[");<br>      for (int i = 0; i &lt; a.length; i ++) System.out.print(a[i] + ",");<br>      System.out.println("]");<br>   }<br>   void sout(int [][] a) {<br>      if (!debug) return;<br>      System.out.println("Array size = " + a.length);<br>      System.out.print("[");<br>      for (int i = 0; i &lt; a.length; i ++) sout(a[i]);<br>      System.out.println("]");<br>   }<br>   // crop to size<br>   int [] crop(int [] in, int toSize) {<br>      int [] a = new int[toSize]; System.arraycopy(in, 0, a, 0, toSize); return a;<br>   }<br>   long [] crop(long [] in, int toSize) {<br>      long [] a = new long[toSize]; System.arraycopy(in, 0, a, 0, toSize); return a;<br>   }<br>   String [] crop(String [] in, int toSize) {<br>      String [] a = new String [toSize]; System.arraycopy(in, 0, a, 0, toSize); return a;<br>   }<br>   // copy array<br>   int [] copy(int [] in) { return crop(in, in.length); }<br>   long [] copy(long [] in) { return crop(in, in.length); }<br>   String [] copy(String [] in) { return crop(in, in.length); }<br>   // reverse array<br>   int [] reverse(int [] in) {<br>      int [] res = new int [in.length];<br>      for (int i = 0; i &lt; in.length; i ++ ) res[i] = in[in.length - 1 - i];<br>      return res;<br>   }<br>   long [] reverse(long [] in) {<br>      long [] res = new long [in.length];<br>      for (int i = 0; i &lt; in.length; i ++ ) res[i] = in[in.length - 1 - i];<br>      return res;<br>   }<br>   String [] reverse(String [] in) {<br>      String [] res = new String [in.length];<br>      for (int i = 0; i &lt; in.length; i ++ ) res[i] = in[in.length - 1 - i];<br>      return res;<br>   }<br>   <br>   Hashtable lookup = new Hashtable();<br>   int lookupIdx = 0;<br>   int indexOf(String in) {<br>      if (!lookup.containsKey(in)) {<br>         lookup.put(in, new Integer(lookupIdx));<br>         lookupIdx ++;<br>      }<br>      return ((Integer) lookup.get(in)).intValue();<br>   }<br>   <br>   ////////////////////////////////////////////////////////<br>   ///////////  Note: helper functions end here  //////////<br>   ////////////////////////////////////////////////////////<br>}<br> <br>// Powered by CodeProcessor<br></td>