<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;iostream&gt;<br>#include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;functional&gt;<br>#include &lt;numeric&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cmath&gt;<br>#include &lt;queue&gt;<br> <br> <br>using namespace std;<br> <br>int maxi=22;<br> <br>class SelfCatalogue<br>{<br>public:<br>int a[10];<br>int d[10];<br>int remain;<br>int can;<br>int low[100];<br>int high[100];<br> <br>void search(int x)<br>{<br>  int i,b;<br>  int d1[10];<br>  if (x==10)<br>  {<br>    memset(d1,0,sizeof(d1));<br>    for (i=0;i&lt;10;i++)<br>      if (d[i]!=0)<br>      {<br>        d1[i]++;<br>        d1[low[d[i]]]++;<br>        if (high[d[i]]!=0) d1[high[d[i]]]++;<br>      }<br>    b=1;<br>    for (i=0;i&lt;10;i++)<br>      if (d1[i]!=d[i])<br>      {<br>        b=0;break;<br>      }<br>    if (b==1) can=1;<br>    return;<br>  }<br>  if (a[x]!=-1)<br>  {<br>    d[x]=a[x];<br>    search(x+1);<br>    if (can==1) return;<br>  }<br>  else<br>  {<br>    for (i=0;i&lt;=remain;i++)<br>    {<br>      d[x]=i;<br>      remain-=i;<br>      search(x+1);<br>      if (can==1) return;<br>      remain+=i;<br>    }<br>  }<br>}<br> <br>vector &lt;int&gt; construct(vector &lt;int&gt; counts)<br>{<br>  int i;<br>  vector&lt;int&gt; ans;<br>  for (i=0;i&lt;100;i++)<br>  {<br>    low[i]=i%10;<br>    high[i]=i/10;<br>  }<br>  remain=maxi;<br>  for (i=0;i&lt;10;i++)<br>  {<br>    a[i]=counts[i];<br>    if (a[i]!=-1) remain-=a[i];<br>  }<br>  can=0;<br>  search(0);<br>  ans.clear();<br>  if (can==1)<br>  {<br>    for (i=0;i&lt;10;i++)<br>      ans.push_back(d[i]);<br>  }<br>  return ans;<br>}<br>};<br></td>