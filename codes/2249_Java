<td class="problemText" colspan="8" valign="middle" align="left">
            /*<br> * Matching.java<br> * prepared by mlcastle for the TopCoder competition.<br> */<br> <br>import java.util.*;<br> <br>public class Matching {<br>    private static final String[][] foo = new String[][] {<br>  { "CIRCLE", "SQUIGGLE", "DIAMOND" },<br>  { "RED", "BLUE", "GREEN" },<br>  { "SOLID", "STRIPED", "EMPTY" },<br>  { "ONE", "TWO", "THREE" }<br>    };<br> <br>    public String[] findMatch(String[] first, String[] second) {<br>  String[] result = new String[4];<br>  for (int i = 0; i &lt; 4; ++i) {<br>      if (first[i].equals(second[i])) {<br>    result[i] = first[i];<br>      } else {<br>    if (!first[i].equals(foo[i][0]) &amp;&amp; !second[i].equals(foo[i][0]))<br>        result[i] = foo[i][0];<br>    else if (!first[i].equals(foo[i][1]) &amp;&amp; !second[i].equals(foo[i][1]))<br>        result[i] = foo[i][1];<br>    else<br>        result[i] = foo[i][2];<br>      }<br>  }<br>  return result;<br>    }<br> <br>    public static void main(String[] args) {<br>  Matching temp = new Matching();<br>  // any test cases go here.<br>  // out.println(temp.findMatch(...));<br>    }<br> <br>    // ------------------------------------------<br>    // library routines<br>    // ------------------------------------------<br> <br>    private static int max(int a, int b) { return (a &gt; b) ? a : b; }<br>    private static long max(long a, long b) { return (a &gt; b) ? a : b; }<br>    private static int min(int a, int b) { return (a &lt; b) ? a : b; }<br>    private static long min(long a, long b) { return (a &lt; b) ? a : b; }<br>    private static int max(int[] as) {<br>  int max = Integer.MIN_VALUE;<br>  for (int i=0; i &lt; as.length; ++i)<br>      if (as[i] &gt; max)<br>    max = as[i];<br>  return max;<br>    }<br>    private static int min(int[] as) {<br>  int min = Integer.MAX_VALUE;<br>  for (int i=0; i &lt; as.length; ++i)<br>      if (as[i] &lt; min)<br>    min = as[i];<br>  return min;<br>    }<br>    private static int atoi(String a) { return Integer.parseInt(a); }<br>    private static int atoi(String a, int radix) { return Integer.parseInt(a, radix); }<br>    private static String[] split(String str) { return (String[])(splitL(str).toArray(new String[0])); }<br>    private static String[] split(String str, String delim) { return (String[])(splitL(str, delim).toArray(new String[0])); }<br>    private static List splitL(String str) { return splitL(str, " \t\n\r\f"); }<br>    private static List splitL(String str, String delim) {<br>   StringTokenizer tok = new StringTokenizer(str, delim);<br>  List l = new ArrayList();<br>  while(tok.hasMoreTokens())<br>      l.add(tok.nextToken());<br>  return l;<br>    }<br>    private static String join(String glue, Object[] arr) {<br>  StringBuffer buf = new StringBuffer();<br>  for (int i = 0; i &lt; arr.length; ++i) {<br>      buf.append(arr[i]);<br>      if ((i+1) != arr.length)<br>    buf.append(glue);<br>  }<br>  return buf.toString();<br>    }<br>    private static String join(String glue, List lst) { return join(glue, lst.toArray()); }<br>    private static Integer box(int n) { return new Integer(n); }<br>    private static Long box(long n) { return new Long(n); }<br>    private static Double box(double n) { return new Double(n); }<br>    private static Integer[] box(int[] a) {<br>  Integer[] r = new Integer[a.length];<br>  for (int i = 0; i &lt; a.length; ++i) {<br>      r[i] = box(a[i]);<br>  }<br>  return r;<br>    }<br> <br>    private static int unbox(Object o) { Number n = (Number)o; return n.intValue(); }<br>    private static long unboxl(Object o) { Number n = (Number)o; return n.longValue(); }<br>    private static double unboxd(Object o) { Number n = (Number)o; return n.doubleValue(); }<br>    private static int[] unbox(Object[] a) {<br>  int[] r =new int[a.length];<br>  for (int i = 0; i &lt; a.length; ++i) {<br>      r[i] = unbox(a[i]);<br>  }<br>  return r;<br>    }<br> <br>    private static void printa(Object[] a) { out.println("{" + join(",", a) + "}"); }<br>    private static void printa(int[] a) { printa(box(a)); }<br> <br>    private static boolean next_permutation(int[] a, int first, int last) {<br>  if (first == last) return false;<br>  if ((first + 1) == last) return false;<br>  int i = last - 1;<br>  while(true) {<br>      int ii = i; --i;<br>      if (a[i] &lt; a[ii]) {<br>    int j = last; while (!(a[i] &lt; a[--j]));<br>    int tmp = a[i]; a[i] = a[j]; a[j] = tmp;<br>    reverse(a, ii, last); return true;<br>      }<br>      if (i == first) {<br>    reverse(a, first, last); return false;<br>      }<br>  }<br>    }<br>    private static boolean next_permutation(int[] a) { return next_permutation(a, 0, a.length); }<br>    private static void reverse(int[] a, int first, int last) {<br>  last--;<br>  while (first &lt; last) {<br>      int tmp = a[first]; a[first] = a[last];<br>      a[last] = tmp; first++; last--;<br>  }<br>    }<br>    private static void reverse(int[] a) { reverse(a, 0, a.length); }<br> <br>    private static final java.io.PrintStream out = System.out;<br>    private static final java.io.PrintStream err = System.err;<br>}<br> <br> <br>// Powered by FileEdit<br></td>