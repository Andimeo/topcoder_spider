<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;cmath&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cstring&gt;<br>#include &lt;iostream&gt;<br>#include &lt;string&gt;<br>#include &lt;vector&gt;<br><br>using namespace std;<br><br>// #include &lt;algorithm&gt;<br>// #include &lt;iterator&gt;<br>// #include &lt;map&gt;<br>// #include &lt;queue&gt;<br>// #include &lt;set&gt;<br><br>class RaceCalculator<br>{<br>  public:<br>  int bestRace (vector &lt;int&gt; distances, vector &lt;int&gt; times)<br>  {<br>    int i,j,k,m,n,o;<br>    char *p,*q,*r;<br><br>    double bad[64];<br>    int best;<br><br>    for (i = 0; i &lt; distances.size (); i++)<br>    {<br>      bad[i] = -1000000;<br><br>      for (j = 0; j &lt; distances.size (); j++)<br>      for (k = j+1; k &lt; distances.size (); k++)<br>      {<br>        if (j == i || k == i)<br>          continue;<br><br>        double D = distances[i];<br>        double T1 = times[j];<br>        double T2 = times[k];<br>        double D1 = distances[j];<br>        double D2 = distances[k];<br>        double expectedTime = T1*exp(log(T2/T1)*log(D1/D)/log(D1/D2));<br>        double badness = (times[i] - expectedTime) / expectedTime;<br><br>        if (badness &gt; bad[i])<br>          bad[i] = badness;<br>      }<br>    }<br><br>    best = 0;<br><br>    for (i = 1; i &lt; distances.size (); i++)<br>      if (bad[i] &lt; bad[best])<br>        best = i;<br><br>    return best;<br>  }<br><br><br><br>};<br><br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003]<br>// Powered by CodeProcessor<br></td>