<td class="problemText" colspan="8" valign="middle" align="left">
            Imports Microsoft.VisualBasic<br>Imports System.Math<br>Imports System<br>Imports System.Collections<br>Imports System.Text<br> <br>Public Class RaceCalculator<br>    Public Function bestRace(ByVal distances As Integer(), ByVal times As Integer()) As Integer<br>        Dim N As Integer = distances.Length<br>        Dim badness(N - 1) As Double<br>        Dim a, b, c As Integer<br>        For a = 0 To N - 1<br>            badness(a) = Double.NegativeInfinity<br>        Next<br>        For a = 0 To N - 1<br>            For b = 0 To N - 1<br>                If a &lt;&gt; b Then<br>                    Dim d1 As Integer = distances(a)<br>                    Dim d2 As Integer = distances(b)<br>                    Dim t1 As Integer = times(a)<br>                    Dim t2 As Integer = times(b)<br>                    If d1 &gt; d2 Then<br>                        Dim tmp As Integer<br>                        tmp = d1<br>                        d1 = d2<br>                        d2 = tmp<br>                        tmp = t1<br>                        t1 = t2<br>                        t2 = tmp<br>                    End If<br>                    For c = 0 To N - 1<br>                        If c &lt;&gt; a AndAlso c &lt;&gt; b Then<br>                            Dim expected As Double = t1 * Exp(Log(t2 / t1) * Log(d1 / distances(c)) / Log(d1 / d2))<br>                            badness(c) = Max(badness(c), (times(c) - expected) / expected)<br>                        End If<br>                    Next<br>                End If<br>            Next<br>        Next<br> <br>        Dim lowest As Double = badness(0)<br>        Dim best As Integer = 0<br>        For a = 1 To N - 1<br>            If badness(a) &lt; lowest Then<br>                lowest = badness(a)<br>                best = a<br>            End If<br>        Next<br>        Return best<br>    End Function<br>End Class<br></td>