<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections;<br>public class RGBColor {<br>public int[] getComplement(int[] rgb) {<br>  if ( Math.Abs(2*rgb[0]-255)&lt;33 &amp;&amp; Math.Abs(2*rgb[1]-255)&lt;33 &amp;&amp; Math.Abs(2*rgb[2]-255)&lt;33) <br>  {<br>    for (int i=0; i&lt;3; i++){<br>      if (rgb[i] &lt; 128) rgb[i]+=128;<br>      else rgb[i]-=128;<br>    }<br>  }<br>  else<br>    for (int i=0; i&lt;3; i++)<br>    rgb[i]=255-rgb[i];<br>    <br>  return rgb;<br>}<br> <br> <br> <br> <br> <br> <br> <br> <br> <br>// the following helper functions are in large part copied from other top coders, most noteably snewman<br>static char[,] charify(string[] s){<br>  char[,] x = new char[s[0].Length,s.Length];<br>  for(int i=0; i&lt;s.Length; i++)<br>  for(int j=0; j&lt;s[0].Length; j++)<br>    x[j,i]=s[i][j];<br>  return x;  <br>}<br>static ArrayList AR{get{return new ArrayList();}}<br>static Hashtable HT{get{return new Hashtable();}}<br>static int[] IA(ArrayList al){return(int[])al.ToArray(typeof(int));}<br>static string[] SA(ArrayList al){return(string[])al.ToArray(typeof(string));}<br>static double triA(double a, double b, double c){double x=(a+b+c)/2;return Math.Sqrt(x*(x-a)*(x-b)*(x-c));}<br>int minI(IEnumerable a){int m=int.MaxValue; foreach (int x in a)m=Math.Min(m,x);return m;}<br>long minL(IEnumerable a){long m=long.MaxValue; foreach (long x in a)m=Math.Min(m,x);return m;}<br>double minD(IEnumerable a){double m=double.MaxValue; foreach (double x in a)m=Math.Min(m,x);return m;}<br>string minS(IEnumerable a){string m=null; foreach (string x in a)m=(m==null || m.CompareTo(x)&gt;0)?x:m;return m;}<br>IEnumerable minE(IEnumerable a){IEnumerable m=null; foreach (IEnumerable x in a)m=(m==null || Compare(m,x)&gt;0)?x:m;return m;}<br>int maxI(IEnumerable a){int m=int.MinValue; foreach (int x in a)m=Math.Max(m,x);return m;}<br>long maxL(IEnumerable a){long m=long.MinValue; foreach (long x in a)m=Math.Max(m,x);return m;}<br>double maxD(IEnumerable a){double m=double.MinValue; foreach (double x in a)m=Math.Max(m,x);return m;}<br>string maxS(IEnumerable a){string m=null; foreach (string x in a)m=(m==null || m.CompareTo(x)&lt;0)?x:m;return m;}<br>IEnumerable maxE(IEnumerable a){IEnumerable m=null; foreach (IEnumerable x in a)m=(m==null || Compare(m,x)&lt;0)?x:m;return m;}<br>static int Compare(IEnumerable a, IEnumerable b){<br>IEnumerator aa=a.GetEnumerator(), bb=b.GetEnumerator();<br>while(true){<br>int del = (aa.MoveNext()?2:0)-(bb.MoveNext()?1:0);<br>if (del!=1)return del;<br>del=((IComparable)aa.Current).CompareTo((IComparable)bb.Current);<br>if (del!=0) return del;<br>}}<br>int sumI(IEnumerable a){int m=0;foreach(int x in a)m+=x;return m;}<br>long sumL(IEnumerable a){long m=0;foreach(long x in a)m+=x;return m;}<br>double sumD(IEnumerable a){double m=0;foreach(double x in a)m+=x;return m;}<br>string sumS(IEnumerable a){string m="";foreach(string x in a)m+=x;return m;}<br>}<br> <br>// Powered by PopsEdit<br>// Powered by CodeProcessor<br></td>