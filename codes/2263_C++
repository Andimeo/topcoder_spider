<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;set&gt;<br>#include &lt;map&gt;<br>#include &lt;queue&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;iostream&gt;<br>#include &lt;sstream&gt;<br>using namespace std;<br><br>typedef vector&lt;string&gt; VS;<br>typedef vector&lt;string&gt;::iterator VSt;<br>typedef vector&lt;int&gt; VI;<br>typedef vector&lt;int&gt;::iterator VIt;<br><br>class WaterLevel {<br>  public:<br>  double netAmt(int evapNormal, int evapFlood, vector &lt;int&gt; rain) {<br>    double q = 0.0;<br>    for (int i = 0; i &lt; rain.size(); ++i)<br>    {<br>      int r = rain[i];<br>      double t = 0.0;<br>      bool bFlood = q &gt; 0;<br>      for (int j = 0; j &lt; 3 &amp;&amp; t &lt; 1.0; ++j) // stages<br>      {<br>        if (bFlood)<br>        {<br>          if (evapFlood &gt; r)<br>          {<br>            double rt = q/(evapFlood - r);<br>            double nt = min (1.0, t + rt);<br>            double dt = nt - t;<br>            q -= dt*(evapFlood - r);<br>            t += dt;<br>            bFlood = !bFlood;<br>          }<br>          else<br>          {<br>            q += (1.0-t)*(r-evapFlood);<br>            break;<br>          }<br>        }<br>        else<br>        {<br>          if (evapNormal &lt; r)<br>          {<br>            double rt = -q/(r - evapNormal);<br>            double nt = min (1.0, t + rt);<br>            double dt = nt - t;<br>            q += dt*(r - evapNormal);<br>            t += dt;<br>            bFlood = !bFlood;<br>          }<br>          else<br>          {<br>            q -= (1.0-t)*(evapNormal - r);<br>            break;<br>          }<br>        }<br>      }<br>    }<br>    return q;<br>  }<br><br>};<br><br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003]<br>// Powered by CodeProcessor<br></td>