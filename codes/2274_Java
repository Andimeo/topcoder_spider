<td class="problemText" colspan="8" valign="middle" align="left">
            /* imp &lt;cg-&gt; */ <br>/*&lt;-cg-&gt;*/import java.awt.*;<br>/*&lt;-cg-&gt;*/import java.util.*;<br>/*&lt;-cg-&gt;*/import java.math.*;<br>/*&lt;-cg-&gt;*/import java.util.regex.*;<br> <br>/*&lt;-cg-&gt;*/  // &lt;-cg&gt;<br>public class BombMan {<br>    static final int BIG = 0x70000000;<br>/* aref int &lt;cg-&gt; */ <br>    /*&lt;-cg-&gt;*/static int aget(int[] a, int o, int def) {<br>  /*&lt;-cg-&gt;*/return (o&lt;0 || o&gt;=a.length) ? def : a[o]; }<br>    /*&lt;-cg-&gt;*/static int aget(int[][] a, int o, int o2, int def) {<br>  /*&lt;-cg-&gt;*/return (o&lt;0 || o&gt;=a.length) ? def : aget(a[o], o2, def); }<br>    /*&lt;-cg-&gt;*/static int aget(int[][][] a, int o, int o2, int o3, int def) {<br>  /*&lt;-cg-&gt;*/return (o&lt;0 || o&gt;=a.length) ? def : aget(a[o], o2, o3, def); }<br>    /*&lt;-cg-&gt;*/static int aget(int[][][][] a, int o, int o2, int o3, int o4, int def) {<br>  /*&lt;-cg-&gt;*/return (o&lt;0 || o&gt;=a.length) ? def : aget(a[o], o2, o3, o4, def); }<br>    /*&lt;-cg-&gt;*/static int aget(int[][][][][] a, int o, int o2, int o3, int o4, int o5, int def) {<br>  /*&lt;-cg-&gt;*/return (o&lt;0 || o&gt;=a.length) ? def : aget(a[o], o2, o3, o4, o5,  def); }<br>    /*&lt;-cg-&gt;*/static boolean aput(int[] a, int o, int def) {<br>  /*&lt;-cg-&gt;*/if (o&lt;0 || o&gt;=a.length) return false; a[o] = def; return true; }<br>    /*&lt;-cg-&gt;*/static boolean aput(int[][] a, int o, int o2, int def) {<br>  /*&lt;-cg-&gt;*/return (o&lt;0 || o&gt;=a.length) ? false : aput(a[o], o2, def); }<br>    /*&lt;-cg-&gt;*/static boolean aput(int[][][] a, int o, int o2, int o3, int def) {<br>  /*&lt;-cg-&gt;*/return (o&lt;0 || o&gt;=a.length) ? false : aput(a[o], o2, o3, def); }<br>    /*&lt;-cg-&gt;*/static boolean aput(int[][][][] a, int o, int o2, int o3, int o4, int def) {<br>  /*&lt;-cg-&gt;*/return (o&lt;0 || o&gt;=a.length) ? false : aput(a[o], o2, o3, o4, def); }<br>    /*&lt;-cg-&gt;*/static boolean aput(int[][][][][] a, int o, int o2, int o3, int o4, int o5, int def) {<br>  /*&lt;-cg-&gt;*/return (o&lt;0 || o&gt;=a.length) ? false : aput(a[o], o2, o3, o4, o5, def); }<br>    /*&lt;-cg-&gt;*/  // &lt;-cg&gt;<br> <br>/* aget char &lt;cg-&gt; */ <br>    /*&lt;-cg-&gt;*/static char aget(char[] a, int o, char def) {<br>  /*&lt;-cg-&gt;*/return (o&lt;0 || o&gt;=a.length) ? def : a[o]; }<br>    /*&lt;-cg-&gt;*/static char aget(char[][] a, int o, int o2, char def) {<br>  /*&lt;-cg-&gt;*/return (o&lt;0 || o&gt;=a.length) ? def : aget(a[o], o2, def); }<br>    /*&lt;-cg-&gt;*/static char aget(char[][][] a, int o, int o2, int o3, char def) {<br>  /*&lt;-cg-&gt;*/return (o&lt;0 || o&gt;=a.length) ? def : aget(a[o], o2, o3, def); }<br>    /*&lt;-cg-&gt;*/static char aget(char[][][][] a, int o, int o2, int o3, int o4, char def) {<br>  /*&lt;-cg-&gt;*/return (o&lt;0 || o&gt;=a.length) ? def : aget(a[o], o2, o3, o4, def); }<br>    /*&lt;-cg-&gt;*/static char aget(char[][][][][] a, int o, int o2, int o3, int o4, int o5, char def) {<br>  /*&lt;-cg-&gt;*/return (o&lt;0 || o&gt;=a.length) ? def : aget(a[o], o2, o3, o4, o5,  def); }<br>    /*&lt;-cg-&gt;*/static boolean aput(char[] a, int o, char def) {<br>  /*&lt;-cg-&gt;*/if (o&lt;0 || o&gt;=a.length) return false; a[o] = def; return true; }<br>    /*&lt;-cg-&gt;*/static boolean aput(char[][] a, int o, int o2, char def) {<br>  /*&lt;-cg-&gt;*/return (o&lt;0 || o&gt;=a.length) ? false : aput(a[o], o2, def); }<br>    /*&lt;-cg-&gt;*/static boolean aput(char[][][] a, int o, int o2, int o3, char def) {<br>  /*&lt;-cg-&gt;*/return (o&lt;0 || o&gt;=a.length) ? false : aput(a[o], o2, o3, def); }<br>    /*&lt;-cg-&gt;*/static boolean aput(char[][][][] a, int o, int o2, int o3, int o4, char def) {<br>  /*&lt;-cg-&gt;*/return (o&lt;0 || o&gt;=a.length) ? false : aput(a[o], o2, o3, o4, def); }<br>    /*&lt;-cg-&gt;*/static boolean aput(char[][][][][] a, int o, int o2, int o3, int o4, int o5, char def) {<br>  /*&lt;-cg-&gt;*/return (o&lt;0 || o&gt;=a.length) ? false : aput(a[o], o2, o3, o4, o5, def); }<br>    /*&lt;-cg-&gt;*/  // &lt;-cg&gt;<br> <br>    char M[][];<br>public int shortestPath(String[] maze, int bombs) {<br>    M = str2c(maze);<br>    int dist[][] = new int[M.length][M[0].length];<br>    int ex=0,ey=0;<br>    /* on M y &lt;cg&gt; */ for(int y = 0; y &lt; M.length; y++) { <br>  /* on M[0] x &lt;cg&gt; */ for(int x = 0; x &lt; M[0].length; x++) { <br>      dist[y][x] = BIG;<br>      if(M[y][x]=='B') { M[y][x]='.'; dist[y][x] = 0; }<br>      if(M[y][x]=='E') { M[y][x]='.'; ex=x; ey=y; }<br>  }<br>    }<br>    while(true) {<br>  while(true) {<br>      boolean f = true;<br>      /* on M y &lt;cg&gt; */ for(int y = 0; y &lt; M.length; y++) { <br>    /* on M[0] x &lt;cg&gt; */ for(int x = 0; x &lt; M[0].length; x++) { <br>        int c = dist[y][x]+1;<br>        if(c&gt;BIG) continue;<br>        /* n4 :: if(aget(M,y.0,x.1,'X')=='.' &amp;&amp; c&lt;dist[y.0][x.1]) { dist[y.0][x.1]=c; f=false; } &lt;cg-&gt; */ <br>         /*&lt;-cg-&gt;*/if(aget(M,y-1,x,'X')=='.' &amp;&amp; c&lt;dist[y-1][x]) { dist[y-1][x]=c; f=false; }<br>         /*&lt;-cg-&gt;*/if(aget(M,y+1,x,'X')=='.' &amp;&amp; c&lt;dist[y+1][x]) { dist[y+1][x]=c; f=false; }<br>         /*&lt;-cg-&gt;*/if(aget(M,y,x-1,'X')=='.' &amp;&amp; c&lt;dist[y][x-1]) { dist[y][x-1]=c; f=false; }<br>         /*&lt;-cg-&gt;*/if(aget(M,y,x+1,'X')=='.' &amp;&amp; c&lt;dist[y][x+1]) { dist[y][x+1]=c; f=false; }  // &lt;-cg&gt;<br>    }<br>      }<br>      if(f) break;<br>  }<br>  if(bombs==0) break;<br>  bombs--;<br>  int ny[][] = new int[M.length][M[0].length];<br>  /* on M y &lt;cg&gt; */ for(int y = 0; y &lt; M.length; y++) { <br>      /* on M[0] x &lt;cg&gt; */ for(int x = 0; x &lt; M[0].length; x++) { <br>    int d = dist[y][x];<br>    ny[y][x] = d;<br>    if(M[y][x]!='#') continue;<br>    /* n4 :: if(aget(dist,y.0,x.1,BIG)+3 &lt; d) d=dist[y.0][x.1]+3; &lt;cg-&gt; */ <br>     /*&lt;-cg-&gt;*/if(aget(dist,y-1,x,BIG)+3 &lt; d) d=dist[y-1][x]+3;<br>     /*&lt;-cg-&gt;*/if(aget(dist,y+1,x,BIG)+3 &lt; d) d=dist[y+1][x]+3;<br>     /*&lt;-cg-&gt;*/if(aget(dist,y,x-1,BIG)+3 &lt; d) d=dist[y][x-1]+3;<br>     /*&lt;-cg-&gt;*/if(aget(dist,y,x+1,BIG)+3 &lt; d) d=dist[y][x+1]+3;  // &lt;-cg&gt;<br>    ny[y][x] = d;<br>      }<br>  }<br>  dist = ny;<br>  //  Debug.dump(dist);<br>    }<br>    int d = dist[ey][ex];<br>    if(d&gt;=BIG) return -1;<br>    return d;<br>}<br>/* std &lt;cg-&gt; */ <br>    /*&lt;-cg-&gt;*/static char[] str2c(String s) { return s.toCharArray(); }<br>    /*&lt;-cg-&gt;*/static String c2str(char[] c) { return new String(c); }<br>    /*&lt;-cg-&gt;*/static char[][] str2c(String[] s) { <br>  /*&lt;-cg-&gt;*/char a[][] = new char[s.length][];<br>  /*&lt;-cg-&gt;*/for(int i=a.length;i--&gt;0;) a[i] = s[i].toCharArray();<br>  /*&lt;-cg-&gt;*/return a;<br>    /*&lt;-cg-&gt;*/}<br>    /*&lt;-cg-&gt;*/static String[] c2str(char[][] s) {<br>  /*&lt;-cg-&gt;*/String a[] = new String[s.length];<br>  /*&lt;-cg-&gt;*/for(int i=a.length;i--&gt;0;) a[i] = c2str(s[i]);<br>  /*&lt;-cg-&gt;*/return a;<br>    /*&lt;-cg-&gt;*/}<br>    /*&lt;-cg-&gt;*/static int s2i(String s) { try { return Integer.parseInt(s); } catch(Exception e) { return -1; } }<br>    /*&lt;-cg-&gt;*/static int[] s2i(String[] s) { <br>  /*&lt;-cg-&gt;*/int[] n = new int[s.length]; <br>  /*&lt;-cg-&gt;*/for(int i=n.length;i--&gt;0;) n[i] = s2i(s[i]);<br>  /*&lt;-cg-&gt;*/return n;<br>    /*&lt;-cg-&gt;*/}<br>    /*&lt;-cg-&gt;*/static int[][] s2i(String[][] s) { <br>  /*&lt;-cg-&gt;*/int[][] n = new int[s.length][]; <br>  /*&lt;-cg-&gt;*/for(int i=n.length;i--&gt;0;) n[i] = s2i(s[i]);<br>  /*&lt;-cg-&gt;*/return n;<br>    /*&lt;-cg-&gt;*/}<br>    /*&lt;-cg-&gt;*/static long s2l(String s) { try { return Long.parseLong(s); } catch(Exception e) { return -1; } }<br>    /*&lt;-cg-&gt;*/static long[] s2l(String[] s) { <br>  /*&lt;-cg-&gt;*/long[] n = new long[s.length]; <br>  /*&lt;-cg-&gt;*/for(int i=n.length;i--&gt;0;) n[i] = s2l(s[i]);<br>  /*&lt;-cg-&gt;*/return n;<br>    /*&lt;-cg-&gt;*/}<br>    /*&lt;-cg-&gt;*/static long[][] s2l(String[][] s) { <br>  /*&lt;-cg-&gt;*/long[][] n = new long[s.length][]; <br>  /*&lt;-cg-&gt;*/for(int i=n.length;i--&gt;0;) n[i] = s2l(s[i]);<br>  /*&lt;-cg-&gt;*/return n;<br>    /*&lt;-cg-&gt;*/}<br>    /*&lt;-cg-&gt;*/static BigInteger big(long i) { return BigInteger.valueOf(i); }<br>    /*&lt;-cg-&gt;*/static int b2i(BigInteger b) { return b.intValue(); }<br>    /*&lt;-cg-&gt;*/static long b2l(BigInteger b) { return b.longValue(); }<br>    /*&lt;-cg-&gt;*/static Hashtable _rex = new Hashtable();<br>    /*&lt;-cg-&gt;*/static Pattern comp_(String s) {<br>  /*&lt;-cg-&gt;*/Object o; if(null==(o=_rex.get(s))) _rex.put(s,o=Pattern.compile(s)); <br>  /*&lt;-cg-&gt;*/return (Pattern)o; }<br>    /*&lt;-cg-&gt;*/static String match1(String s, String p) {<br>  /*&lt;-cg-&gt;*/Matcher m = comp_(p).matcher(s); if(!m.find()) return null;<br>  /*&lt;-cg-&gt;*/return m.group();<br>    /*&lt;-cg-&gt;*/}<br>    /*&lt;-cg-&gt;*/static String[] matchN(String s, String p) {<br>  /*&lt;-cg-&gt;*/ArrayList l=  new ArrayList();<br>  /*&lt;-cg-&gt;*/Matcher m = comp_(p).matcher(s); <br>  /*&lt;-cg-&gt;*/while(m.find()) l.add(m.group());<br>  /*&lt;-cg-&gt;*/return (String[])l.toArray(new String[0]);<br>    /*&lt;-cg-&gt;*/}<br>    /*&lt;-cg-&gt;*/static String[] groups(Matcher m) { <br>  /*&lt;-cg-&gt;*/String s[] = new String[m.groupCount()+1];<br>  /*&lt;-cg-&gt;*/for(int i=s.length;i--&gt;0;) s[i] = m.group(i);<br>  /*&lt;-cg-&gt;*/return s;<br>    /*&lt;-cg-&gt;*/}<br>    /*&lt;-cg-&gt;*/static String[] matchP(String s, String p) {<br>  /*&lt;-cg-&gt;*/Matcher m = comp_(p).matcher(s); if(!m.find()) return null;<br>  /*&lt;-cg-&gt;*/return groups(m);<br>    /*&lt;-cg-&gt;*/}<br>    /*&lt;-cg-&gt;*/static String[][] matchNP(String s, String p) {<br>  /*&lt;-cg-&gt;*/ArrayList l=  new ArrayList();<br>  /*&lt;-cg-&gt;*/Matcher m = comp_(p).matcher(s); <br>  /*&lt;-cg-&gt;*/while(m.find()) l.add(groups(m));<br>  /*&lt;-cg-&gt;*/return (String[][])l.toArray(new String[0][]);<br>    /*&lt;-cg-&gt;*/}<br>    /*&lt;-cg-&gt;*/  // &lt;-cg&gt;<br>}<br></td>