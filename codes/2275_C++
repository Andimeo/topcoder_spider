<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;stdlib.h&gt;<br>#include &lt;math.h&gt;<br>#include &lt;sstream&gt;<br>#include &lt;iostream&gt;<br>#include &lt;map&gt;<br>#include &lt;queue&gt;<br>#include &lt;set&gt;<br>#include &lt;string&gt;<br>#include &lt;vector&gt;<br>using namespace std;<br>typedef long long lint;<br>typedef vector&lt;int&gt; VI;<br>typedef vector&lt;VI&gt; VVI;<br>typedef vector&lt;string&gt; VS;<br>typedef vector&lt;VS&gt; VVS;<br>#define forn(i,n) for(int i=0;i&lt;(n);i++)<br>#define forv(i,v) for(int i=0;i&lt;(v).size();i++)<br>#define foru(i,a,b) for(int i=(a);i&lt;=(b);i++)<br>#define ford(i,a,b) for(int i=(a);i&gt;=(b);i--)<br>struct przz{};przz zz;<br>template&lt;class T&gt; przz operator,(przz a,T b){<br>  cout&lt;&lt;" "&lt;&lt;b;return a;<br>}<br>template&lt;class T&gt; T&amp; operator&lt;&lt;(T&amp; a,przz b){<br>  a&lt;&lt;endl;b=b;return a;<br>}<br>template&lt;class T&gt; T&amp; operator&lt;&lt;(T&amp; a,VI b){<br>  a&lt;&lt;"[";<br>  forv(i,b)a&lt;&lt;b[i]&lt;&lt;",";<br>  a&lt;&lt;"]";  <br>  return a;<br>}<br>template&lt;class T&gt; T&amp; operator&lt;&lt;(T&amp; a,VS b){<br>  a&lt;&lt;endl;<br>  forv(i,b)a&lt;&lt;b[i]&lt;&lt;endl;<br>  a&lt;&lt;endl;<br>  return a;<br>}<br>string itos(int x){<br>  char b[32];<br>  sprintf(b,"%d",x);<br>  return string(b);<br>}<br>int stoi(const string&amp; s){<br>  int r;<br>  sscanf(s.c_str(),"%d",&amp;r);<br>  return r;<br>}<br>VS stovs(string s,string t=" "){<br>  VS res;<br>  for(int p=0;;){<br>    p=s.find_first_not_of(t,p);<br>    if (p&lt;0) return res;<br>    int p2=s.find_first_of(t,p);<br>    res.push_back(s.substr(p,p2-p));<br>    if (p2&lt;0) return res;<br>    p=p2;<br>  }<br>}<br>VI vstovi(const VS&amp; v){<br>  VI res;<br>  forv(i,v)res.push_back(atoi(v[i].c_str()));<br>  return res;<br>}<br>VI stovi(string s,string t=" "){<br>  return vstovi(stovs(s,t));<br>}<br> <br>bool testCol(VS&amp; s,int c){<br>  forv(i,s)if(s[i][c]!=' ') return false;<br>  return true;<br>}<br> <br>class TextColumns {<br>  public:<br>  vector &lt;string&gt; formatText(vector &lt;string&gt; tx) {<br>    int n=tx[0].size();<br>    VI vv;<br>    vv.push_back(0);<br>    int p=0;<br>    while(p&lt;n){<br>      while(p&lt;n&amp;&amp;testCol(tx,p)) p++;<br>      if (p&gt;=n) break;<br>      while(p&lt;n&amp;&amp;!testCol(tx,p)) p++;<br>      if (p+3&lt;=n&amp;&amp;testCol(tx,p)&amp;&amp;testCol(tx,p+1)&amp;&amp;testCol(tx,p+2)){<br>        vv.push_back(p);<br>      }<br>    }<br>    vv.push_back(n);<br>    VS res;<br>    string cc="";<br>    forn(i,vv.size()-1){<br>      bool w=false;<br>      bool wl=false;<br>      forv(j,tx){<br>        VS vc=stovs(tx[j].substr(vv[i],vv[i+1]-vv[i]));<br>        if (!vc.size()) {<br>          wl=false;<br>          continue;<br>        }        <br>        if (w&amp;&amp;!wl){<br>          if (cc!="") res.push_back(cc);<br>          cc="";<br>        }<br>        w=true;<br>        wl=true;<br>        forv(k,vc){<br>          if (cc!="") cc+=" ";<br>          cc+=vc[k];<br>        }<br>      }<br>    }<br>    if (cc!="") res.push_back(cc);<br>    return res;<br>  }<br>};<br> <br>// Powered by PopsEdit<br></td>