<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>public class Ambigram {<br>  String word;<br>  String pairs="HHIIMWNNOOSSWMXXZZ"; //order of alphabeticalness<br>  <br>  public String ambiword(String wd) {<br>    word=wd;<br>    cache=new pairstr[word.length()][word.length()];<br>    <br>    mincost(0,word.length()-1);<br>    <br>    //System.out.println(cache[5][word.length()-1-5]);<br>    //System.out.println(cache[0][word.length()-1]);<br>    if(cache[0][word.length()-1].str.equals("")) return "H";<br>    return cache[0][word.length()-1].str;<br>  }<br>  <br>  public pairstr mincost(int left, int right){<br>    if(cache[left][right]!=null) return cache[left][right];<br>    if(left&gt;right){<br>      return cache[left][right]=new pairstr(0,0,"");<br>    }<br>    if(left==right){<br>      int leastcost=Integer.MAX_VALUE;<br>      String beststring="";<br>      for(int i=0; i&lt;pairs.length(); i+=2){<br>        if(pairs.charAt(i)!=pairs.charAt(i+1)) continue;<br>        int cost=changeto(pairs.charAt(i),word.charAt(left));<br>        if(cost&lt;leastcost){<br>          leastcost=cost;<br>          beststring=pairs.charAt(i)+"";<br>        }<br>      }<br>      int cost=deletecost(word.charAt(left));<br>      if(cost&lt;leastcost){ leastcost=cost; beststring=""; }<br>      return cache[left][right]=new pairstr(leastcost,0,beststring);<br>    }<br>    <br>    pairstr best=new pairstr(Integer.MAX_VALUE,Integer.MAX_VALUE,"ZZZZZZZZZZZZ");<br>    pairstr delleft=new pairstr(mincost(left+1,right));<br>    delleft.b++;<br>    delleft.a+=deletecost(word.charAt(left));<br>    pairstr delright=new pairstr(mincost(left,right-1));<br>    delright.b++;<br>    delright.a+=deletecost(word.charAt(right));<br>    if(delleft.compareTo(best)&lt;0) best=delleft;<br>    if(delright.compareTo(best)&lt;0) best=delright;<br>    <br>    for(int i=0; i&lt;pairs.length(); i+=2){<br>      int cost=changeto(pairs.charAt(i),word.charAt(left))+changeto(pairs.charAt(i+1),word.charAt(right));<br>      pairstr thischange=new pairstr(mincost(left+1,right-1));<br>      thischange.a+=cost; thischange.str=pairs.charAt(i)+thischange.str+pairs.charAt(i+1);<br>      if(thischange.compareTo(best)&lt;0) best=thischange;<br>    }<br>    <br>    return cache[left][right]=best;<br>    <br>  }<br>  <br>  int changeto(char a, char b){<br>    return Math.abs(a-b);<br>  }<br>  int deletecost(char b){<br>    int a=b-'A'+1;<br>    return Math.min(a,27-a);  <br>  }<br>  <br>  pairstr[][] cache;<br>  <br>  class pairstr implements Comparable{<br>    int a; int b; String str;<br>    public pairstr(int a, int b, String str){<br>      this.a=a; this.b=b; this.str=str;<br>    }<br>    public pairstr(pairstr p){<br>      this.a=p.a; this.b=p.b; this.str=p.str;<br>    }<br>    public int compareTo(Object o){<br>      pairstr p=(pairstr)o;<br>      if(a&lt;p.a) return -1;<br>      if(a&gt;p.a) return 1;<br>      if(b&lt;p.b) return -1;<br>      if(b&gt;p.b) return 1;<br>      return str.compareTo(p.str);<br>    }<br>    public String toString(){<br>      return a+" "+b+" "+str;<br>    }<br>  }<br>}<br> <br>// Powered by PopsEdit<br></td>