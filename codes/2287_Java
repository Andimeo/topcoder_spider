<td class="problemText" colspan="8" valign="middle" align="left">
            /*/*///*/*/ Powered by radedit!            /*/*/*/*/*/ ;<br>/*/*//*/*/  import java . util .           /*/*/*/*/*/ ;<br>/*/*//*/*/  import java . lang . reflect . /*/*/*/*/*/ ;<br>public class RandomFA {<br>   boolean ddd = false ;<br>String[] s2sa(String s) {<br>  StringTokenizer t=new StringTokenizer(s.trim());<br>  String[]r=new String[t.countTokens()];<br>  int i=0;<br>  while(t.hasMoreTokens())try{<br>     r[i++]=t.nextToken();<br>  }catch(Exception e){};<br>  return r;<br>}<br>String[] s2sa2(String s) {<br>  StringTokenizer t=new StringTokenizer(s.trim(), ":");<br>  String[]r=new String[t.countTokens()];<br>  int i=0;<br>  while(t.hasMoreTokens())try{<br>     r[i++]=t.nextToken();<br>  }catch(Exception e){};<br>  return r;<br>}<br>  <br>  double[][] parsemat(String[] rules) {<br>    int n = rules.length + 1 ;<br>    double m[][] = new double[n][n] ;<br>    for (int i=0; i&lt;rules.length; i++) {<br>      String[] f = s2sa(rules[i]) ;<br>      int sum = 0 ;<br>      for (int j=0; j&lt;f.length; j++) {<br>  String[] f2 = s2sa2(f[j]) ;<br>  int vv = Integer.parseInt(f2[1]) ;<br>  m[i][Integer.parseInt(f2[0])] = vv ;<br>  sum += vv ;<br>      }<br>      m[i][n-1] = 100 - sum ;<br>    }<br>    m[n-1][n-1] = 100 ;<br>    return m ;<br>  }<br>  public double getProbability(String[] rulesa, String[] rulesb, String[] rulesc, int finalState, int maxLength) {<br>    double mat[][][] = new double[3][][] ;<br>    double div = 1 ;<br>    double finalsum = 0 ;<br>    mat[0] = parsemat(rulesa) ;<br>    mat[1] = parsemat(rulesb) ;<br>    mat[2] = parsemat(rulesc) ;<br>    int n = rulesa.length + 1 ;<br>    double prob[] = new double[n] ;<br>    double sumprob[] = new double[n] ;<br>    prob[0] = 100 ;<br>    for (int i=0; i&lt;=maxLength; i++) {<br>      finalsum += div ;<br>      for (int j=0; j&lt;n; j++) {<br>  sumprob[j] += prob[j] * div / 100 ;<br>  //  System.out.println(sumprob[j]) ;<br>      }<br>      double newprob[] = new double[n] ;<br>      for (int j=0; j&lt;3; j++) {<br>  for (int k=0; k&lt;n; k++) {<br>    for (int ii=0; ii&lt;n; ii++) {<br>      newprob[ii] += prob[k] * mat[j][k][ii] / 300 ;<br>    }<br>  }<br>      }<br>      div *= 3 ;<br>      prob = newprob ;<br>    }<br>    if (finalState == 999) {<br>      return sumprob[n-1] / finalsum ;<br>    }<br>    return sumprob[finalState] / finalsum ;<br>  }<br> <br>  static void pp(Object o) { System.out.println(o) ; }<br>}<br></td>