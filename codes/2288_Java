<td class="problemText" colspan="8" valign="middle" align="left">
            /*/*///*/*/ Powered by radedit!            /*/*/*/*/*/ ;<br>/*/*//*/*/  import java . util .           /*/*/*/*/*/ ;<br>/*/*//*/*/  import java . lang . reflect . /*/*/*/*/*/ ;<br>public class KiloManX {<br>   boolean ddd = false ;<br>int[] s2ia(String s) {<br>  int[]r=new int[s.length()] ;<br>  for (int i=0; i&lt;s.length(); i++) {<br>    r[i] = s.charAt(i) - '0' ;<br>  }<br>  return r;<br>}<br>  public int leastShots(String[] damageChart, int[] bossHealth) {<br>    int i, j, k ;<br>    int n = damageChart.length ;<br>    int[][] dc = new int[n][] ;<br>    int[] cost = new int[1&lt;&lt;n] ;<br>    for (i=0; i&lt;n; i++) {<br>      dc[i] = s2ia(damageChart[i]) ;<br>    }<br>    for (i=1; i&lt;1&lt;&lt;n; i++) {<br>      cost[i] = 65536 * 30000 ;<br>      for (j=0; j&lt;n; j++) {<br>  int pre = i - (1 &lt;&lt; j) ;<br>  if ((i &amp; (1 &lt;&lt; j)) != 0) {<br>    cost[i] = Math.min(cost[i], cost[pre]+bossHealth[j]) ;<br>    for (k=0; k&lt;n; k++) {<br>      if ((i &amp; (1 &lt;&lt; k)) != 0 &amp;&amp; k != j &amp;&amp; dc[k][j] &gt; 0) {<br>        cost[i] = Math.min(cost[i],<br>         cost[pre] + (bossHealth[j] + dc[k][j]-1) / dc[k][j]) ;<br>      }<br>    }<br>  }<br>      }<br>    }<br>    return cost[(1&lt;&lt;n)-1] ;<br>  }<br> <br>  static void pp(Object o) { System.out.println(o) ; }<br>}<br></td>