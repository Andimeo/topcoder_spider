<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>import java.util.regex.*;<br>import java.math.*;<br>import java.io.*;<br>import java.text.*;<br><br>public class Solid {<br>  static final double inf = Double.MAX_VALUE / 11;<br>  int kvad(int a) {return a*a;}<br>  double kvad(double a) {return a*a;}<br>  int gcd(int a, int b) {int c;while (a!=0) {c = a;a = b%a;b = c;}return b;}<br>  private HashMap memo = new HashMap();<br>  static final int antInd = 4;<br>  <br>  <br>  String[] map;<br>  int X,Y;<br>  int h(int x, int y) {<br>    if (x&lt;0 || y&lt;0 || x&gt;=X || y&gt;=Y) return 0;<br>    return Integer.parseInt(map[x].charAt(y)+"");<br>      }<br>      <br>      <br>  int area(int x, int y) {<br>      int denne = h(x,y);<br>      if (denne==0) return 0;<br>      int svar = 2;<br>      for (int dx=-1; dx&lt;=1; ++dx) {<br>    for (int dy=-1; dy&lt;=1; ++dy) {<br>        if ((dx==0 &amp;&amp; dy==0)||dx*dy!=0) continue;<br>        int alt = h(x+dx,y+dy);<br>        if (alt&lt;denne) {<br>      svar += denne-alt;<br>        }<br>    }<br>      }<br>      return svar;<br>  }<br>      <br>  public int surfaceArea(String[] solid) {<br>    long startTime=0;<br>    if (measureTime) startTime = System.currentTimeMillis();<br><br>      map = solid;<br>    X = solid.length;<br>    Y = solid[0].length();<br>    int svar = 0;<br>    for (int i=0; i&lt;X; ++i) {<br>        for (int j=0; j&lt;Y; ++j) {<br>      svar += area(i,j);<br>        }<br>    }<br>    <br>    if (measureTime) ut.println("Time consumption " + (System.currentTimeMillis()-startTime) + " ms.");<br>    return svar;<br>  }<br><br><br>  public class Index implements Comparable {<br>    static final int ant = antInd;<br>    static final int sha = 32/(ant+1);<br>    int[] ind;<br>    public Index(int[] ind) {<br>      this.ind = ind;<br>    }<br>    public boolean equals(Object o) {<br>      Index oo = (Index)o;<br>      for (int i=0; i&lt;ant; ++i) {<br>        if (ind[i]!=oo.ind[i]) return false;<br>      }<br>      return true;<br>    }<br>    public int hashCode() {<br>      int akk1=1, akk2=1;<br>      for (int i=0; i&lt;ant; ++i) {<br>        akk1 ^= ind[i]&lt;&lt;(sha*(i+1));<br>        akk2 ^= ind[i];<br>      }<br>      return akk1^akk2;<br>    }<br>    public boolean negative() {<br>      for (int i=0; i&lt;ant; ++i) {<br>        if (ind[i]&lt;0) return true;<br>      }<br>      return false;<br>    }<br>    public int compareTo(Object o) {<br>      if (o==null) return -1;<br>      Index oo = (Index)o;<br>      for (int i=0; i&lt;ant; ++i) {<br>        if (ind[i]&lt;oo.ind[i]) return -1;<br>        if (ind[i]&gt;oo.ind[i]) return  1;<br>      }<br>      return 0;<br>    }<br>    public String toString() {<br>      StringBuffer sb = new StringBuffer("(");<br>      for (int i=0; i&lt;ant; ++i) sb.append(ind[i]+" ");<br>      sb.append(") ");<br>      return new String(sb);<br>    }<br>  }<br><br>  void printMemo(Index grense) {<br>    if (!debug) return;<br>    int[] ind = new int[antInd];<br>    Index key = new Index(ind);<br>    ind[0]=-1;<br>    for (int i=1; i&lt;antInd; ++i) {<br>      ind[i]=grense.ind[i];<br>    }<br>    ytre: while (true) {<br>      int ch = antInd-1;<br>      while (ind[ch]==grense.ind[ch]) {<br>        ind[ch] = 0;<br>        --ch;<br>        if (ch&lt;0) break ytre;<br>      }<br>      ++ind[ch];<br>      int dim = antInd-1-ch;<br>      if (dim&gt;=1) ut.println();<br>      if (dim&gt;=2) {<br>        StringBuffer sb = new StringBuffer(" memo(");<br>        for (int i=0; i&lt;antInd-2; ++i) {<br>          sb.append(ind[i]+",");<br>        }<br>        sb.append("X,X):");<br>        ut.println(sb);<br>      }<br>      if (dim&gt;=2 &amp;&amp; indexes) {<br>        print("");<br>        header(grense.ind[antInd-1]+1);<br>      }<br>      if (dim&gt;=1 &amp;&amp; indexes) {<br>        print(""+ind[antInd-2]);<br>      }<br>      print(memo.get(key));<br>    }<br>    println("");<br>  }<br><br>  static void print(Object o) {<br>    print(o+"");<br>  }<br>  static void println(Object o) {<br>    println(o+"");<br>  }<br>  static void print(String s) {<br>    if (!debug) return;<br>    int l = s.length();<br>    if (l&gt;=tabsize) l = tabsize-1;<br>    ut.print(space.substring(l,tabsize) + s);<br>  }<br>  static void println(String s) {<br>    if (!debug) return;<br>    print(s);<br>    ut.println();<br>  }<br>  static void header(int n) {<br>    if (!debug) return;<br>    for (int i=0; i&lt;n; ++i) {<br>      print(""+i);<br>    }<br>    ut.println();<br>  }<br>  static void print(double d) {<br>    if (!debug) return;<br>    if (d&gt;=inf) {<br>      print("inf");<br>      return;<br>    }<br>    DecimalFormat DF;<br>    if (Math.abs(d)&lt;0.00000001 || d&gt;=0.01 &amp;&amp; d&lt;100000) {<br>      DF = new DecimalFormat("####0.00");<br>    } else {<br>      DF = new DecimalFormat("0.##E0");<br>    }<br>    print(DF.format(d));<br>  }<br>  static void print(boolean[] V) {<br>    if (!debug) return;<br>    for (int i=0; i&lt;V.length; ++i) {<br>      ut.print(V[i]?'1':'0');<br>    }<br>    ut.println();<br>  }<br>  static void print(char[] V) {<br>    if (!debug) return;<br>    for (int i=0; i&lt;V.length; ++i) {<br>      ut.print(V[i]);<br>    }<br>    ut.println();<br>  }<br>  static void print(int[] V) {<br>    if (!debug) return;<br>    for (int i=0; i&lt;V.length; ++i) {<br>      print(""+V[i]);<br>    }<br>    ut.println();<br>  }<br>  static void print(long[] V) {<br>    if (!debug) return;<br>    for (int i=0; i&lt;V.length; ++i) {<br>      print(""+V[i]);<br>    }<br>    ut.println();<br>  }<br>  static void print(double[] V) {<br>    if (!debug) return;<br>    for (int i=0; i&lt;V.length; ++i) {<br>      print(V[i]);<br>    }<br>    ut.println();<br>  }<br>  static void print(Object[] V) {<br>    if (!debug) return;<br>    for (int i=0; i&lt;V.length; ++i) {<br>      print(""+V[i]);<br>    }<br>    ut.println();<br>  }<br>  static void print(boolean[][] M) {<br>    if (!debug) return;<br>    for (int i=0; i&lt;M.length; ++i) {<br>      print(M[i]);<br>    }<br>    ut.println();<br>  }<br>  static void print(char[][] M) {<br>    if (!debug) return;<br>    for (int i=0; i&lt;M.length; ++i) {<br>      print(M[i]);<br>    }<br>    ut.println();<br>  }<br>  static void print(int[][] M) {<br>    if (!debug || M.length==0) return;<br>    if (indexes) {<br>      print("");<br>      header(M[0].length);<br>    }<br>    for (int i=0; i&lt;M.length; ++i) {<br>      if (indexes) {<br>        print(""+i);<br>      }<br>      print(M[i]);<br>    }<br>    ut.println();<br>  }<br>  static void print(long[][] M) {<br>    if (!debug || M.length==0) return;<br>    if (indexes) {<br>      print("");<br>      header(M[0].length);<br>    }<br>    for (int i=0; i&lt;M.length; ++i) {<br>      if (indexes) {<br>        print(""+i);<br>      }<br>      print(M[i]);<br>    }<br>    ut.println();<br>  }<br>  static void print(double[][] M) {<br>    if (!debug || M.length==0) return;<br>    if (indexes) {<br>      print("");<br>      header(M[0].length);<br>    }<br>    for (int i=0; i&lt;M.length; ++i) {<br>      if (indexes) {<br>        print(""+i);<br>      }<br>      print(M[i]);<br>    }<br>    ut.println();<br>  }<br>  static void print(Object[][] M) {<br>    if (!debug || M.length==0) return;<br>    if (indexes) {<br>      print("");<br>      header(M[0].length);<br>    }<br>    for (int i=0; i&lt;M.length; ++i) {<br>      if (indexes) {<br>        print(""+i);<br>      }<br>      print(M[i]);<br>    }<br>    ut.println();<br>  }<br>  static void print(Object[][][] M) {<br>    if (!debug) return;<br>    for (int i=0; i&lt;M.length; ++i) {<br>      println("("+i+",X,X):");<br>      print(M[i]);<br>    }<br>  }<br>  static void print(Object[][][][] M) {<br>    if (!debug) return;<br>    for (int i=0; i&lt;M.length; ++i) {<br>      for (int j=0; j&lt;M[i].length; ++j) {<br>        println("("+i+","+j+",X,X):");<br>        print(M[i][j]);<br>      }<br>    }<br>  }<br><br>  Index getInd(int a, int b) {if (antInd!=2) throw new Error(); return new Index(new int[]{a,b});}<br>  Index getInd(int a, int b, int c) {if (antInd!=3) throw new Error(); return new Index(new int[]{a,b,c});}<br>  Index getInd(int a, int b, int c, int d) {if (antInd!=4) throw new Error(); return new Index(new int[]{a,b,c,d});}<br><br>/*<br>  X get() {<br>    Index ind = getInd();<br>    if (ind.negative()) return 0;<br>    Long val = (Long)memo.get(ind);<br>    if (val!=null) return val.XValue();<br>    X svar = 0;<br><br>    memo.put(ind,new X(svar));<br>    return svar;<br>  }<br>*/<br><br>  static final PrintStream ut = System.out;<br>  static final String space = "                    ";<br>  static final int tabsize = 9; // 1 for ikke tabulasjon, 9 for flytverdier, 17 for longs<br>  static final boolean indexes = true;<br>  static final boolean debug = true;<br>  static final boolean measureTime = false;<br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by CodeProcessor<br></td>