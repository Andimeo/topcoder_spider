<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>import java.util.regex.*;<br>import java.text.*;<br>import java.math.*;<br> <br>public class Display {<br>  public String[] transform(int[] x, int[] y) {<br>    int[] min = {Integer.MAX_VALUE, Integer.MAX_VALUE};<br>    int[] max = {Integer.MIN_VALUE, Integer.MIN_VALUE};<br>    for (int i = 0; i &lt; x.length; i++) {<br>      if (x[i] &lt; min[0]) {<br>        min[0] = x[i];<br>      }<br>      if (y[i] &lt; min[1]) {<br>        min[1] = y[i];<br>      }<br>      if (x[i] &gt; max[0]) {<br>        max[0] = x[i];<br>      }<br>      if (y[i] &gt; max[1]) {<br>        max[1] = y[i];<br>      }<br>    }<br>    max[0] -= min[0];<br>    max[1] -= min[1];<br>    String[] s = new String[ x.length ];<br>    for (int i = 0; i &lt; x.length; i++) {<br>      x[i] = (int)Math.round( (double)(x[i] - min[0]) * 1000.0 / (double)max[0] );<br>      y[i] = (int)Math.round( (double)(y[i] - min[1]) * 1000.0 / (double)max[1] );<br>      s[i] = x[i] + " " + y[i];<br>    }<br>    return s;<br>  }<br> <br>  /** begin cut - don't modify this line*/<br>  public static void main(String[] a) {<br>    new Display().runTestCase(0);<br>    new Display().runTestCase(1);<br>    new Display().runTestCase(2);<br>    new Display().runTestCase(3);<br>    new Display().runTestCase(4);<br>  }<br> <br>  public void runTestCase(int nbr) {<br>    switch(nbr) {<br>      case 0 : {<br>        checkOutput(transform(new int[] {-100, 0, 50, 100}, new int[] {-100, 0, 50, 100}), new String[] { "0 0",  "500 500",  "750 750",  "1000 1000" }, 0); break;<br>      }<br>      case 1 : {<br>        checkOutput(transform(new int[] {0,2000,1}, new int[] {0,2001,1}), new String[] { "0 0",  "1000 1000",  "1 0" }, 1); break;<br>      }<br>      case 2 : {<br>        checkOutput(transform(new int[] {-1000000000,1000000000,500000,499999}, new int[] {-1000000000,1000000000,500000,499999}), new String[] { "0 0",  "1000 1000",  "500 500",  "500 500" }, 2); break;<br>      }<br>      case 3 : {<br>        checkOutput(transform(new int[] {-53,652,-6132,673,74,-473,373,736363,234,234,234}, new int[] {-6464,36464,-43,373,363,-37633,2022,-644,2520,2520,2520}), new String[] { "8 421",  "9 1000",  "0 507",  "9 513",  "8 513",  "8 0",  "9 535",  "1000 499",  "9 542",  "9 542",  "9 542" }, 3); break;<br>      }<br>      case 4 : {<br>        checkOutput(transform(new int[] {0,1001,2000}, new int[] {0,999,2000}), new String[] { "0 0",  "501 500",  "1000 1000" }, 4); break;<br>      }<br>    }<br>  }<br>  final void checkOutput(int mine, int them, int nbr) {<br>    boolean success = (mine==them);<br>    StringBuffer out = new StringBuffer();<br>    out.append("Example ");<br>    out.append((nbr+1));<br>    out.append(" - ");<br>    out.append(success ? "success" : "failure   ");<br>    if(!success) {<br>      out.append("Got: ");<br>      out.append(mine);<br>      out.append(", Expected: ");<br>      out.append(them);<br>    }<br>    System.out.println(out);<br>  }<br>  final void checkOutput(long mine, long them, int nbr) {<br>    boolean success = (mine==them);<br>    StringBuffer out = new StringBuffer();<br>    out.append("Example ");<br>    out.append((nbr+1));<br>    out.append(" - ");<br>    out.append(success ? "success" : "failure   ");<br>    if(!success) {<br>      out.append("Got: ");<br>      out.append(mine);<br>      out.append(", Expected: ");<br>      out.append(them);<br>    }<br>    System.out.println(out);<br>  }<br>  final void checkOutput(double mine, double them, int nbr) {<br>    boolean success = doubleCompare(mine, them);<br>    StringBuffer out = new StringBuffer();<br>    out.append("Example ");<br>    out.append((nbr+1));<br>    out.append(" - ");<br>    out.append(success ? "success" : "failure   ");<br>    if(!success) {<br>      out.append("Got: ");<br>      out.append(mine);<br>      out.append(", Expected: ");<br>      out.append(them);<br>    }<br>    System.out.println(out);<br>  }<br>  private static boolean doubleCompare(double expected, double result){<br>    double MAX_DOUBLE_ERROR = 1E-9;<br>    if(Double.isNaN(expected)){<br>      return Double.isNaN(result);<br>    }else if(Double.isInfinite(expected)){<br>      if(expected &gt; 0){<br>        return result &gt; 0 &amp;&amp; Double.isInfinite(result);<br>      }else{<br>        return result &lt; 0 &amp;&amp; Double.isInfinite(result);<br>      }<br>    }else if(Double.isNaN(result) || Double.isInfinite(result)){<br>      return false;<br>    }else if(Math.abs(result - expected) &lt; MAX_DOUBLE_ERROR){<br>      return true;<br>    }else{<br>      double min = Math.min(expected * (1.0 - MAX_DOUBLE_ERROR),<br>        expected * (1.0 + MAX_DOUBLE_ERROR));<br>      double max = Math.max(expected * (1.0 - MAX_DOUBLE_ERROR),<br>          expected * (1.0 + MAX_DOUBLE_ERROR));<br>      return result &gt; min &amp;&amp; result &lt; max;<br>    }<br>  }<br>  final void checkOutput(char mine, char them, int nbr) {<br>    boolean success = (mine==them);<br>    StringBuffer out = new StringBuffer();<br>    out.append("Example ");<br>    out.append((nbr+1));<br>    out.append(" - ");<br>    out.append(success ? "success" : "failure   ");<br>    if(!success) {<br>      out.append("Got: ");<br>      out.append("'");<br>      out.append(mine);<br>      out.append("'");<br>      out.append(", Expected: ");<br>      out.append("'");<br>      out.append(them);<br>      out.append("'");<br>    }<br>    System.out.println(out);<br>  }<br>  final void checkOutput(String mine, String them, int nbr) {<br>    boolean success = (mine.equals(them));<br>    StringBuffer out = new StringBuffer();<br>    out.append("Example ");<br>    out.append((nbr+1));<br>    out.append(" - ");<br>    out.append(success ? "success" : "failure   ");<br>    if(!success) {<br>      out.append("Got: ");<br>      out.append("\"");<br>      out.append(mine);<br>      out.append("\"");<br>      out.append(", Expected: ");<br>      out.append("\"");<br>      out.append(them);<br>      out.append("\"");<br>    }<br>    System.out.println(out);<br>  }<br>  final void checkOutput(long[] mine, long[] them, int nbr) {<br>    boolean success = (Arrays.equals(mine, them));<br>    StringBuffer out = new StringBuffer();<br>    out.append("Example ");<br>    out.append((nbr+1));<br>    out.append(" - ");<br>    out.append(success ? "success" : "failure   ");<br>    if(!success) {<br>      out.append("Got: ");<br>      out.append("{");<br>      for(int x=0;x&lt;mine.length;x++) {<br>        out.append(mine[x]);<br>        if(x&lt;mine.length-1) out.append(", ");<br>      }<br>      out.append("}");<br>      out.append(", Expected: ");<br>      out.append("{");<br>      for(int x=0;x&lt;them.length;x++) {<br>        out.append(them[x]);<br>        if(x&lt;them.length-1) out.append(", ");<br>      }<br>      out.append("}");<br>    }<br>    System.out.println(out);<br>  }<br>  final void checkOutput(char[] mine, char[] them, int nbr) {<br>    boolean success = (Arrays.equals(mine, them));<br>    StringBuffer out = new StringBuffer();<br>    out.append("Example ");<br>    out.append((nbr+1));<br>    out.append(" - ");<br>    out.append(success ? "success" : "failure   ");<br>    if(!success) {<br>      out.append("Got: ");<br>      out.append("{");<br>      for(int x=0;x&lt;mine.length;x++) {<br>        out.append(mine[x]);<br>        if(x&lt;mine.length-1) out.append(", ");<br>      }<br>      out.append("}");<br>      out.append(", Expected: ");<br>      out.append("{");<br>      for(int x=0;x&lt;them.length;x++) {<br>        out.append(them[x]);<br>        if(x&lt;them.length-1) out.append(", ");<br>      }<br>      out.append("}");<br>    }<br>    System.out.println(out);<br>  }<br>  final void checkOutput(double[] mine, double[] them, int nbr) {<br>    boolean success = (Arrays.equals(mine, them));<br>    StringBuffer out = new StringBuffer();<br>    out.append("Example ");<br>    out.append((nbr+1));<br>    out.append(" - ");<br>    out.append(success ? "success" : "failure   ");<br>    if(!success) {<br>      out.append("Got: ");<br>      out.append("{");<br>      for(int x=0;x&lt;mine.length;x++) {<br>        out.append(mine[x]);<br>        if(x&lt;mine.length-1) out.append(", ");<br>      }<br>      out.append("}");<br>      out.append(", Expected: ");<br>      out.append("{");<br>      for(int x=0;x&lt;them.length;x++) {<br>        out.append(them[x]);<br>        if(x&lt;them.length-1) out.append(", ");<br>      }<br>      out.append("}");<br>    }<br>    System.out.println(out);<br>  }<br>  final void checkOutput(int[] mine, int[] them, int nbr) {<br>    boolean success = (Arrays.equals(mine, them));<br>    StringBuffer out = new StringBuffer();<br>    out.append("Example ");<br>    out.append((nbr+1));<br>    out.append(" - ");<br>    out.append(success ? "success" : "failure   ");<br>    if(!success) {<br>      out.append("Got: ");<br>      out.append("{");<br>      for(int x=0;x&lt;mine.length;x++) {<br>        out.append(mine[x]);<br>        if(x&lt;mine.length-1) out.append(", ");<br>      }<br>      out.append("}");<br>      out.append(", Expected: ");<br>      out.append("{");<br>      for(int x=0;x&lt;them.length;x++) {<br>        out.append(them[x]);<br>        if(x&lt;them.length-1) out.append(", ");<br>      }<br>      out.append("}");<br>    }<br>    System.out.println(out);<br>  }<br>  final void checkOutput(String[] mine, String[] them, int nbr) {<br>    boolean success = (Arrays.equals(mine, them));<br>    StringBuffer out = new StringBuffer();<br>    out.append("Example ");<br>    out.append((nbr+1));<br>    out.append(" - ");<br>    out.append(success ? "success" : "failure   ");<br>    if(!success) {<br>      out.append("Got: ");<br>      out.append("{");<br>      for(int x=0;x&lt;mine.length;x++) {<br>        out.append(mine[x]);<br>        if(x&lt;mine.length-1) out.append(", ");<br>      }<br>      out.append("}");<br>      out.append(", Expected: ");<br>      out.append("{");<br>      for(int x=0;x&lt;them.length;x++) {<br>        out.append(them[x]);<br>        if(x&lt;them.length-1) out.append(", ");<br>      }<br>      out.append("}");<br>    }<br>    System.out.println(out);<br>  }<br> <br>/** end cut - don't modify this line*/<br>  <br>}<br> <br>// Powered by PopsEdit<br>// Powered by CodeProcessor<br></td>