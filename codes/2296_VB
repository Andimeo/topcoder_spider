<td class="problemText" colspan="8" valign="middle" align="left">
            Imports Microsoft.VisualBasic<br>Imports System.Math<br>Imports System<br>Imports System.Collections<br>Imports System.Text<br> <br>Public Class AWordGame<br>    Private list As New SortedList<br>    Private cache(3000) As Integer<br>    Private cachew(3000) As String<br>    Private word(3000) As String<br>    Private map(3000) As ArrayList<br>    Private fin(3000) As Boolean<br>    Private NOCACHE As Integer = -1000000<br> <br>    Public Function outcome(ByVal wordList As String()) As String<br>        Dim seed, id, previd As Integer<br>        seed = 1<br>        Dim a, b, c As Integer<br>        map(0) = New ArrayList<br>        cache(0) = NOCACHE<br>        For a = 0 To wordList.Length - 1<br>            Dim s() As String = wordList(a).Split(" "c)<br>            For c = 0 To s.Length - 1<br>                previd = 0<br>                For b = 1 To s(c).Length<br>                    Dim str As String = s(c).Substring(0, b)<br>                    If list.ContainsKey(str) = False Then<br>                        id = seed<br>                        list(s(c).Substring(0, b)) = id<br>                        word(id) = str<br>                        cache(id) = NOCACHE<br>                        map(id) = New ArrayList<br>                        seed += 1<br>                    Else<br>                        id = list(str)<br>                    End If<br>                    If Not map(previd).Contains(id) Then map(previd).Add(id)<br>                    previd = id<br>                Next<br>                fin(id) = True<br>            Next<br>        Next<br>        Dim ret As String<br>        doit(0, ret)<br>        Return ret<br>    End Function<br> <br>    Private Function doit(ByVal id As Integer, ByRef wrd As String) As Integer<br>        If cache(id) &lt;&gt; NOCACHE Then<br>            wrd = cachew(id)<br>            Return cache(id)<br>        End If<br>        Dim ret As Integer<br> <br>        If fin(id) Then<br>            ret = 1<br>            wrd = word(id)<br>        Else<br>            Dim a As Integer<br>            Dim best As Integer = NOCACHE<br>            Dim bestw As String<br>            For a = 0 To map(id).Count - 1<br>                Dim s As String<br>                Dim v As Integer = -doit(map(id)(a), s)<br>                If v &lt; 0 Then<br>                    v -= 1<br>                Else<br>                    v += 1<br>                End If<br>                If best = NOCACHE OrElse (best &lt; 0 AndAlso v &gt; 0) OrElse (best &lt; 0 AndAlso v &lt; best) OrElse (v &gt; 0 AndAlso v &lt; best) OrElse (best = v AndAlso String.CompareOrdinal(word(map(id)(a)), bestw) &lt; 0) Then<br>                    best = v<br>                    bestw = word(map(id)(a))<br>                    wrd = s<br>                End If<br>            Next<br>            ret = best<br>        End If<br> <br>        cachew(id) = wrd<br>        cache(id) = ret<br>        Return ret<br>    End Function<br>End Class<br></td>