<td class="problemText" colspan="8" valign="middle" align="left">
            /*/*///*/*/ Powered by radedit!            /*/*/*/*/*/ ;<br>/*/*//*/*/  import java . util .           /*/*/*/*/*/ ;<br>/*/*//*/*/  import java . lang . reflect . /*/*/*/*/*/ ;<br>public class BagOfDevouring {<br>   boolean ddd = false ;<br>  public double expectedYield(int[] values, int[] weights) {<br>    int i, j, k ;<br>    int n = values.length ;<br>    int m = 1 &lt;&lt; n ;<br>    double v[] = new double[m] ;<br>    for (i=1; i&lt;m; i++) {<br>      //      System.out.println("At " + i)  ;<br>      double max = 0.0 ;<br>      for (j=0; j&lt;n; j++) if (0 != (i &amp; (1 &lt;&lt; j))) { // take this one first; get its value<br>  //  System.out.println("Looking at taking " + j) ;<br>  double tw = 100.0 ;<br>  double totalp = 0.0 ;<br>  double totalv = 0.0 ;<br>  for (k=0; k&lt;n; k++) if (0 != (i &amp; (1 &lt;&lt; k)) &amp;&amp; j != k) {<br>    tw += weights[k] ;<br>  }<br>  for (k=0; k&lt;n; k++) if (0 != (i &amp; (1 &lt;&lt; k)) &amp;&amp; j != k) {<br>    double p = weights[k] / tw ;<br>    totalp += p ;<br>    totalv += p * v[i - (1&lt;&lt;j) - (1&lt;&lt;k)] ;<br>  }<br>  //  System.out.println("TTP is " + totalp) ;<br>  totalv += (1 - totalp) * (v[i-(1&lt;&lt;j)]) + values[j] ;<br>  if (totalv &gt; max) {<br>    max = totalv ;<br>  }<br>      }<br>      v[i] = max ;<br>      //      System.out.println("Val " + i + " is " + v[i]) ;<br>    }<br>    return v[m-1] ;<br>  }<br> <br>  static void pp(Object o) { System.out.println(o) ; }<br>}<br></td>