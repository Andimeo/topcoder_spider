<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Text;<br>using System.Collections;<br> <br>public class DinkyFish<br>{<br>/***********************************************************************************************************/<br>/************************************* Code starts here ****************************************************/<br> <br>  int myCode(int vol, int male, int fem)<br>  {<br>    int count = 0;<br>    if (2 * vol &lt; male + fem) return count;<br>    while (2 * vol &gt;= male + fem)<br>    {<br>      count++;<br>      int pairs = Math.Min(male, fem);<br>      male += pairs;<br>      fem += pairs;<br>    }<br>    return count;<br>  }<br> <br>/************************************* Code ends here ******************************************************/<br>/***********************************************************************************************************/<br> <br>  public int monthsUntilCrowded(int tankVolume, int maleNum, int femaleNum) <br>  {<br>    main();<br>    return myCode(tankVolume, maleNum, femaleNum);<br>  }<br>  <br>    static bool fmain=false;<br>  public void main()<br>  {<br>    if (fmain) return;<br>    fmain=true;<br>    try {<br>      validateExample("1", new DinkyFish().monthsUntilCrowded(10,4,6), 2, "monthsUntilCrowded(10,4,6)");<br>      validateExample("2", new DinkyFish().monthsUntilCrowded(100,4,6), 5, "monthsUntilCrowded(100,4,6)");<br>      validateExample("3", new DinkyFish().monthsUntilCrowded(5,6,4), 1, "monthsUntilCrowded(5,6,4)");<br>      validateExample("4", new DinkyFish().monthsUntilCrowded(4,6,4), 0, "monthsUntilCrowded(4,6,4)");<br>      validateExample("5", new DinkyFish().monthsUntilCrowded(1000000,3,2), 19, "monthsUntilCrowded(1000000,3,2)");<br>      validateExample("6", new DinkyFish().monthsUntilCrowded(431131,764,249), 11, "monthsUntilCrowded(431131,764,249)");<br>    } catch (Exception e) {<br>      Console.WriteLine(e.Message);<br>      Console.WriteLine(e.StackTrace);<br>      Console.WriteLine(e.Source);<br>    }<br>  }<br> <br>  private static void validateExample(string exampleNum, int returned, int expected, string methodInvocation) {<br>    print(exampleNum);<br>    print("  ");<br>    if (!eq(returned,expected)) {<br>      print("FAIL");<br>    } else {<br>      print("SUCCESS");<br>    }<br>    print(" ");  <br>    print(methodInvocation);<br>    print("\tGot:[");<br>    print(returned);<br>    print("]\t");<br>    print("Expected:[");<br>    print(expected);<br>    print("]");<br>    print("\n");<br>  }<br> <br>  public static void print(object a) {<br>    Console.Write(a);<br>  }<br> <br>  public static void print(object[] a) {<br>    if (a==null) {Console.Write("null"); return;} <br>    for (int i=0; i&lt;a.Length; i++) Console.Write(a[i]+(i&lt;a.Length-1?",":""));<br>  }<br> <br>  public static Boolean eq(object a, object b) {<br>    return a.Equals(b);<br>  }<br> <br>  public static Boolean eq(object[] a, object[] b) {<br>    if (a==null &amp;&amp; b==null) return true;<br>    if (a==null || b==null) return false;<br>    if (a.Length!=b.Length) return false;<br>    for (int i=0; i&lt;a.Length; i++) if (a[i]!=b[i]) return false;<br>    return true;<br>  }<br> <br> <br>}<br>// Powered by CodeProcessor<br></td>