<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections;<br>using System.Text.RegularExpressions;<br><br>public class LunchScheduler <br>{<br>  public static bool NextPermutation(int[] arr)<br>  {<br>    int i = arr.Length;<br>    if(i == 0 || i == 1) return false;<br>    --i;<br>    for( ; ; ) <br>    {<br>      int j = i--;<br>      if(arr[i] &lt; arr[j]) <br>      {<br>        int k = arr.Length;<br>        while(!(arr[i] &lt; arr[--k]))<br>          ;<br>        int tmp = arr[k]; arr[k] = arr[i]; arr[i] = tmp;<br>        Array.Reverse(arr,j,arr.Length - j);<br>        return true;<br>      }<br>      if(i == 0) <br>      {<br>        Array.Reverse(arr);<br>        return false;<br>      }<br>    }<br>  } <br>  public int getOverlap(string[] M) <br>  {<br>    int numPeep = M.Length;<br>    int[] arrivalOrder = new int[numPeep];<br>    for(int i = 0; i &lt; numPeep; ++i)<br>      arrivalOrder[i] = i;<br>    int ret = int.MaxValue;<br><br>    int[,] inCafe = new int[numPeep,numPeep];  // 0 = no, 1 = yes, 2 = could be<br>    for(bool bBreakOut = false; !bBreakOut; )<br>    {<br>      for(int i = 0; i &lt; numPeep; ++i)<br>        for(int j = 0; j &lt; numPeep; ++j)<br>          inCafe[i,j] = 0;<br><br>      for(int time = 0; time &lt; numPeep; ++time)<br>      {<br>        // next one arrives<br>        int arrivingPerson = arrivalOrder[time];<br>        inCafe[time,arrivingPerson] = 1;<br><br>        // everyone yes or "could be" from previous time now "could be"<br>        if(time &gt; 0)<br>        {<br>          int prevTime = time - 1;<br>          for(int i = 0; i &lt; numPeep; ++i)<br>          {<br>            if(inCafe[prevTime,i] &gt; 0)<br>              inCafe[time,i] = 2;<br>          }<br>        }<br><br>        // now look at previous arrivers<br>        for(int j = 0; j &lt; time; ++j)<br>        {<br>          int prevArriver = arrivalOrder[j];<br><br>          // must this prevArriver and the new arrival be simultaneous?<br>          if(M[arrivingPerson][prevArriver] == '1')<br>          {<br>            // if prevArriver has any "could be" before this, change to 1<br>            for(int t = 0; t &lt; time; ++t)<br>              if(inCafe[t,prevArriver] == 2)<br>                inCafe[t,prevArriver] = 1;<br><br>            inCafe[time,prevArriver] = 1;<br>          }<br>        }<br>      }<br><br>      // now look for time with most 1's in column<br>      int most = int.MinValue;<br>      for(int t = 0; t &lt; numPeep; ++t)<br>      {<br>        int count = 0;<br>        for(int p = 0; p &lt; numPeep; ++p)<br>        {<br>          if(inCafe[t,p] == 1)<br>            ++count;<br>        }<br>        if(count &gt; most)<br>          most = count;<br>      }<br><br>      if(most &lt; ret)<br>        ret = most;<br><br>      if(!NextPermutation(arrivalOrder))<br>        bBreakOut = true;<br>    }<br><br>    return ret;  <br>  }<br>}<br><br><br><br>// Powered by FileEdit<br>// Powered by TZTester [Jay_Slupesky modified] [25-Jan-2004]<br>// Powered by CodeProcessor<br></td>