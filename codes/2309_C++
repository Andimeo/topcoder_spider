<td class="problemText" colspan="8" valign="middle" align="left">
            using namespace std;<br>#include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;stdio.h&gt;<br>#include &lt;stdlib.h&gt;<br>#include &lt;string.h&gt;<br>#include &lt;ctype.h&gt;<br>#include &lt;stack&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;queue&gt;<br>#include &lt;iostream&gt;<br>#include &lt;sstream&gt;<br>typedef long long I64;<br>typedef vector&lt;int&gt; VI;<br>typedef vector&lt;string&gt; VS;<br>typedef vector&lt;I64&gt; VI64;<br>typedef unsigned uint;<br>typedef const char cchar;<br>typedef pair&lt;int,int&gt; pii;<br>#define FOR(i,n) for(int i=0;i&lt;(n);i++)<br>#define FORR(i,a,b) for(int i=(a);i&lt;=(b);i++)<br>#define VAR(a,b) __typeof(b) a=b<br>#define FORIT(it,c) for(VAR(it,(c).begin());it!=(c).end();it++)<br>#define ALL(x) (x).begin(),(x).end()<br>#define UNIQ(x) (x).erase(unique(ALL(x)),(x).end())<br> <br>struct LunchSchedulerImpl {<br>    vector &lt;string&gt; M;<br>    LunchSchedulerImpl(vector &lt;string&gt; _M) {<br>        M = _M;<br>    }<br> <br>    int getOverlap() {<br>        VI ev;<br>        int n = M.size();<br>        FOR(i,n) { ev.push_back(i); }<br>        sort(ALL(ev));<br>        int best = n;<br>        do {<br>            int most = 0;<br>            int here = 0;<br>            int needed[10];<br>            memset(needed,0,sizeof(needed));<br>            FOR(i,n) FOR(j,n) {<br>                if(M[i][j] == '1')<br>                    needed[i] |= (1&lt;&lt;j);<br>            }<br>            FOR(i,n) {<br>                int arr = ev[i];<br>                int np = 1;<br>                needed[arr] &amp;= ~here;<br>                if(here) {<br>                    FOR(j,n) if(here &amp; (1&lt;&lt;j)) {<br>                        np++;<br>                        needed[j] &amp;= ~(1&lt;&lt;arr);<br>                        if(!needed[j])<br>                            here &amp;= ~(1&lt;&lt;j);<br>                    }<br>                }<br>                if(needed[arr])<br>                    here |= (1&lt;&lt;arr);<br>                most &gt;?= np;<br>            }<br>            best &lt;?= most;<br>        } while(next_permutation(ALL(ev)));<br> <br>        return best;<br>    };<br>};<br> <br> <br>struct LunchScheduler {<br>    int getOverlap(vector &lt;string&gt; M) {<br>        LunchSchedulerImpl impl(M);<br>        return impl.getOverlap();<br>    }<br> <br>};<br> <br> <br> <br> <br>// Powered by FileEdit<br>// Powered by CodeProcessor<br></td>