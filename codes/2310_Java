<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br> <br>public class RSABreaker{<br> <br>    private static final int gcd(int a, int b) {<br>        if ( a &gt; b ) return gcd(b, a);<br> <br>        int c;<br>        while ( a != 0 ) {<br>            c = b % a;<br>            b = a;<br>            a = c;<br>        }<br> <br>        return b;<br>    }<br> <br>    private int extended_euclid(int a, int b) {<br>        int q, r, x1, x2, y1, y2;<br>        int x, y, d;<br> <br>        if ( b == 0 ) {<br>            d = a;<br>            x = 1;<br>            y = 0;<br>            return x;<br>        }<br>        x2 = 1;<br>        x1 = 0;<br>        y2 = 0;<br>        y1 = 1;<br>        while ( b &gt; 0 ) {<br>            q = a/b;<br>            r = a - q * b;<br>            x = x2 - q * x1;<br>            y = y2 - q * y1;<br>            a = b;<br>            b = r;<br>            x2 = x1;<br>            x1 = x;<br>            y2 = y1;<br>            y1 = y;<br>        }<br>        d = a;<br>        x = x2;<br>        y = y2;<br> <br>        System.out.println(x);<br>        System.out.println(y);<br>        if ( d == 1 ) return x;<br>        return 0;<br>    }<br> <br>    private int raise(int data, int exp, int modulus) {<br>        int ret = 1;<br>        <br>        for ( int i = 0; i &lt; exp; ++i ) {<br>            ret *= data;<br>            ret  = ret % modulus;<br>        }<br> <br>        return ret;<br>    }<br>    <br>    public int decrypt(int e, int n, int b){<br>        int res;<br>        int m = 1;<br> <br>        for ( int i = 2; i &lt; n; ++i )<br>            if ( gcd(i, n) == 1 ) ++m;<br>        int d = extended_euclid(e, m);<br>        while ( d &lt; 0 ) d += m;<br>        System.out.println("m = " + m + ", d = " + d);<br>        res = raise(b, d, n);<br>        return res;<br>    }<br>    <br>    private boolean test0(){<br>        int e = 3;<br>        int n = 10;<br>        int b = 3;<br>        int res = decrypt(e, n, b);<br>        <br>        int tRes = 7;<br>        System.out.println("My Result = " + res);<br>        System.out.println("Given Result = " + tRes);<br>        <br>        return res == tRes;<br>    }<br>    <br>    private boolean test1(){<br>        int e = 17;<br>        int n = 33;<br>        int b = 4;<br>        int res = decrypt(e, n, b);<br>        <br>        int tRes = 31;<br>        System.out.println("My Result = " + res);<br>        System.out.println("Given Result = " + tRes);<br>        <br>        return res == tRes;<br>    }<br>    <br>    private boolean test2(){<br>        int e = 1;<br>        int n = 42;<br>        int b = 17;<br>        int res = decrypt(e, n, b);<br>        <br>        int tRes = 17;<br>        System.out.println("My Result = " + res);<br>        System.out.println("Given Result = " + tRes);<br>        <br>        return res == tRes;<br>    }<br>    <br>    private boolean test3(){<br>        int e = 5;<br>        int n = 997;<br>        int b = 7;<br>        int res = decrypt(e, n, b);<br>        <br>        int tRes = 523;<br>        System.out.println("My Result = " + res);<br>        System.out.println("Given Result = " + tRes);<br>        <br>        return res == tRes;<br>    }<br>    <br>    public static void main(String[] args){<br>        boolean result;<br>        RSABreaker temp = new RSABreaker();<br>        <br>        result = temp.test0();<br>        if (!result) { System.out.println("failed test" + 0); System.exit(1); }<br>        result = temp.test1();<br>        if (!result) { System.out.println("failed test" + 1); System.exit(1); }<br>        result = temp.test2();<br>        if (!result) { System.out.println("failed test" + 2); System.exit(1); }<br>        result = temp.test3();<br>        if (!result) { System.out.println("failed test" + 3); System.exit(1); }<br>        <br>    }<br>    <br>}<br></td>