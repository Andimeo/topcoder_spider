<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br><br>public class Reppity {<br>  public int longestRep(String input) {<br>    int max = 0;<br>    char[] x = input.toCharArray();<br>    for (int i = 0; i &lt; x.length - 1; i++) {<br>      for (int j = i+1; j &lt; x.length; j++) {<br>        String inp = input.substring(i, j);<br>        if (input.indexOf(inp, j) &gt;= 0) {<br>          if (inp.length() &gt; max) {<br>            max = inp.length();<br>          }<br>        }<br>      }<br>    }<br>    return max;<br>  }<br><br>  ////////////////////////////////////////////////////////////////////////////////////////////////<br><br>  public final static void main(String[] args)<br>  {<br>    try {<br>      validateExample("1", new Reppity().longestRep("AB"), 5, "longestRep(\"ABCDEXXXYYYZZZABCDEZZZYYYXXX\")");<br>      validateExample("1", new Reppity().longestRep("ABCDEXXXYYYZZZABCDEZZZYYYXXX"), 5, "longestRep(\"ABCDEXXXYYYZZZABCDEZZZYYYXXX\")");<br>      validateExample("2", new Reppity().longestRep("abcdabcdabcdabCD"), 6, "longestRep(\"abcdabcdabcdabCD\")");<br>      validateExample("3", new Reppity().longestRep("abcdefghijklmnopqrstuvwxyabcdefghijklmnopqrstuvwxy"), 25, "longestRep(\"abcdefghijklmnopqrstuvwxyabcdefghijklmnopqrstuvwxy\")");<br>      validateExample("4", new Reppity().longestRep("againANDagainANDagainANDagainANDagainANDagain"), 21, "longestRep(\"againANDagainANDagainANDagainANDagainANDagain\")");<br>      validateExample("5", new Reppity().longestRep("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWX"), 0, "longestRep(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWX\")");<br>    } catch (Exception e) {<br>      System.out.println(e);<br>      e.printStackTrace(System.out);<br>    }<br>  }<br><br>  private static void validateExample(String exampleNum, int returned, int expected, String methodInvocation) {<br>    print(exampleNum);<br>    print("  ");<br>    if (!eq(returned,expected)) {<br>      print("FAIL");<br>    } else {<br>      print("SUCCESS");<br>    }<br>    print(" ");<br>    print(methodInvocation);<br>    print("\tGot:[");<br>    print(returned);<br>    print("]\t");<br>    print("Expected:[");<br>    print(expected);<br>    print("]");<br>    print("\n");<br>  }<br><br>  public static void print(boolean a) {<br>    System.out.print(a);<br>  }<br><br>  public static void print(long a) {<br>    System.out.print(a);<br>  }<br><br>  public static void print(int a) {<br>    System.out.print(a);<br>  }<br><br>  public static void print(char a) {<br>    System.out.print(a);<br>  }<br><br>  public static void print(String a) {<br>    System.out.print(a);<br>  }<br><br>  public static void print(int[] a) {<br>    if (a==null) {System.out.print("null"); return;}<br>    for (int i=0; i&lt;a.length; i++) System.out.print(a[i]+(i&lt;a.length-1?",":""));<br>  }<br><br>  public static void print(int[][] a) {<br>    if (a==null) {System.out.print("null"); return;}<br>    for (int i=0; i&lt;a.length; i++) { print(a[i]); print("\n"); }<br>  }<br><br>  public static void print(String[] a) {<br>    if (a==null) {System.out.print("null"); return;}<br>    for (int i=0; i&lt;a.length; i++) System.out.print(a[i]+(i&lt;a.length-1?",":""));<br>  }<br><br>  public static boolean eq(boolean a, boolean b) {<br>    return a==b;<br>  }<br><br>  public static boolean eq(long a, long b) {<br>    return a==b;<br>  }<br><br>  public static boolean eq(int a, int b) {<br>    return a==b;<br>  }<br><br>  public static boolean eq(char a, char b) {<br>    return a==b;<br>  }<br><br>  public static boolean eq(String a, String b) {<br>    return a.equals(b);<br>  }<br><br>  public static boolean eq(int[] a, int[] b) { return Arrays.equals(a,b); }<br>  public static boolean eq(String[] a, String[] b) { return Arrays.equals(a,b); }<br><br>}<br> <br>// Powered by CodeProcessor<br></td>