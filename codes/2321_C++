<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;vector&gt;<br>#include &lt;cstring&gt;<br>using namespace std;<br><br>#define INF 999999999<br>#define MIN(a, b) ((a) &lt; (b) ? (a) : (b))<br><br>int seen[16], A[4][4], best = INF, poz[16], s[16];<br>vector&lt;int&gt; T;<br><br>class QuickTableau<br>{<br>private:<br>  void update(void)<br>  {<br>    int i, j, nr, nod, rez = 0;<br><br>    for (i = 0; i &lt; 4; i++)<br>      for (j = 0; j &lt; 4; j++)<br>        poz[A[i][j]] = i * 4 + j;<br><br>    memset(s, 0, sizeof(s));<br>    for (i = 0; i &lt; 16; i++)<br>      if (!s[i])<br>      {<br>        nod = i;<br>        nr = 0;<br>        while (!s[nod])<br>        {<br>          s[nod] = 1;<br>          nr++;<br>          nod = poz[T[nod]];<br>        }<br>        rez += nr - 1;<br>      }<br><br>    best = MIN(best, rez);<br>  }<br><br>  void back(int l, int c)<br>  {<br>    int i;<br><br>    if (c == 4)<br>      l++, c = 0;<br>    if (l == 4)<br>      update();<br>    else<br>    {<br>      for (i = 0; i &lt; 16; i++)<br>        if (!seen[i])<br>        {<br>          if ((c &amp;&amp; i &lt; A[l][c - 1]) || (l &amp;&amp; i &lt; A[l - 1][c]))<br>            continue;<br>          A[l][c] = i;<br>          seen[i] = 1;<br>          back(l, c + 1);<br>          seen[i] = 0;<br>        }<br>    }<br>  }<br>public:<br>  int numSwaps(vector &lt;int&gt; table)<br>  {<br>    int i;<br><br>    for (i = 0; i &lt; 16; i++)<br>      table[i]--;<br>    T = table;<br><br>    back(0, 0);<br><br>    return best;<br>  }<br>} Z;<br></td>