<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;iostream&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;set&gt;<br>#include &lt;map&gt;<br>#include &lt;queue&gt;<br>#include &lt;stack&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cctype&gt;<br>#include &lt;sstream&gt;<br> <br>using namespace std;<br> <br> <br>class BorelSets<br>{<br>  int n;<br>  <br>  int to_set (string s)<br>  {<br>    int sol=0;<br>    istringstream in(s);<br>    int tmp;<br>    while (in &gt;&gt; tmp) sol|=1 &lt;&lt; (tmp-1);<br>    return sol;<br>  }<br>  <br>  public:<br>  int howMany(int a, vector &lt;string&gt; b) <br>  {<br>    n=a;<br>    set&lt;int&gt; all;<br>    for (int i=0; i&lt;b.size(); i++) all.insert(to_set(b[i]));<br>    set&lt;int&gt; tmp;<br>    while (all.size()!=tmp.size())<br>    {<br>      tmp=all;<br>      for (set&lt;int&gt;::iterator i=tmp.begin(); i!=tmp.end(); i++) all.insert((*i)^((1&lt;&lt;n)-1));<br>      for (set&lt;int&gt;::iterator i=tmp.begin(); i!=tmp.end(); i++)<br>      for (set&lt;int&gt;::iterator j=tmp.begin(); j!=tmp.end(); j++) all.insert((*i)|(*j));<br>    }<br>    return all.size();<br>  }<br>};<br> <br>// Powered by PopsEdit<br></td>