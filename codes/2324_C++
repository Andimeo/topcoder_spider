<td class="problemText" colspan="8" valign="middle" align="left">
            /* ############################ PRELIMINARIES ############################ */<br> <br>using namespace std;<br> <br>#include &lt;stdlib.h&gt;<br>#include &lt;stdio.h&gt;<br>#include &lt;math.h&gt;<br>#include &lt;ctype.h&gt;<br>#include &lt;string.h&gt;<br>#include &lt;string&gt;<br>#include &lt;sstream&gt;<br>#include &lt;iostream&gt;<br>#include &lt;vector&gt;<br>#include &lt;queue&gt;<br>#include &lt;stack&gt;<br>#include &lt;set&gt;<br>#include &lt;map&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;functional&gt;<br> <br>#define PB push_back<br>#define SZ size()<br>#define ALL(x) ((x).begin()),((x).end())<br>#define REP(var, hi) for (int var=0; var&lt;(hi); var++)<br>#define REPD(var, hi) for (int var=((hi)-1); var&gt;=0; var--)<br>#define FOR(var, lo, hi) for (int var=(lo); var&lt;(hi); var++)<br>#define FORD(var, lo, hi) for (int var=((hi)-1); var&gt;=(lo); var--)<br>#define FORALL(it, x) for(__typeof((x).begin()) it=(x).begin(); it!=(x).end(); it++)<br> <br>typedef vector &lt;int&gt; VI;<br>typedef vector &lt;VI&gt; VVI;<br>typedef vector &lt;VVI&gt; VVVI;<br>typedef vector &lt;VVVI&gt; VVVVI;<br>typedef long long LL;<br>typedef vector &lt;LL&gt; VLL;<br>typedef vector &lt;VLL&gt; VVLL;<br>typedef vector &lt;string&gt; VS;<br>typedef vector &lt;VS&gt; VVS;<br>typedef vector &lt;double&gt; VD;<br>typedef vector &lt;VD&gt; VVD;<br>typedef istringstream ISS;<br>typedef ostringstream OSS;<br> <br>template &lt;class T1, class T2&gt; T1 cast (T2 x);<br>template &lt;class T&gt; vector&lt;T&gt; cut (string s, string sep);<br>template &lt;class T&gt; vector&lt;vector&lt;T&gt; &gt; cut (vector&lt;string&gt; vs, string sep);<br> <br>/* ############################ THE REAL CODE ############################ */<br> <br>class MoneyRun {<br>  public:<br>  int getMost(vector &lt;string&gt; grid) {<br>    int Y=grid.SZ, X=grid[0].SZ;<br>    <br>    VVVVI  best(Y,VVVI(X,VVI(Y,VI(X,0))));<br>    best[0][0][0][0]=grid[0][0]-'0';<br>    <br>    REP(x1,X) REP(y1,Y) REP(x2,X) REP(y2,Y) {<br>      int extra = grid[y1][x1]-'0';<br>      if (x1!=x2 || y1!=y2) extra += grid[y2][x2]-'0';<br>      <br>      if (x1&gt;0 &amp;&amp; x2&gt;0) best[y1][x1][y2][x2] &gt;?= best[y1][x1-1][y2][x2-1]+extra;<br>      if (x1&gt;0 &amp;&amp; y2&gt;0) best[y1][x1][y2][x2] &gt;?= best[y1][x1-1][y2-1][x2]+extra;<br>      if (y1&gt;0 &amp;&amp; x2&gt;0) best[y1][x1][y2][x2] &gt;?= best[y1-1][x1][y2][x2-1]+extra;<br>      if (y1&gt;0 &amp;&amp; y2&gt;0) best[y1][x1][y2][x2] &gt;?= best[y1-1][x1][y2-1][x2]+extra;<br>    }<br>    <br>    return best[Y-1][X-1][Y-1][X-1];<br>  }<br>};<br> <br>/* ########################### PREWRITTEN CODE ########################### */<br> <br>template &lt;class T1, class T2&gt;<br>T1 cast (T2 x) {<br>  T1 y;<br>  ostringstream oss; oss &lt;&lt; x;<br>  istringstream iss(oss.str()); iss &gt;&gt; y;<br>  return y;<br>}<br> <br>template &lt;class T&gt;<br>vector&lt;T&gt; cut (string s, string sep) {<br>  vector&lt;T&gt; res;<br>  for (int i=0; i&lt;s.size(); i++) {<br>    string sub = "";<br>    while (i&lt;s.size() &amp;&amp; sep.find(s[i])==string::npos) sub+=s[i++];<br>    if (sub != "") res.push_back (cast&lt;T&gt;(sub));<br>  }<br>  return res;<br>}<br> <br>template &lt;class T&gt;<br>vector&lt;vector&lt;T&gt; &gt; cut (vector&lt;string&gt; vs, string sep) {<br>  vector&lt;vector&lt;T&gt; &gt; res;<br>  for (int i=0; i&lt;vs.size(); i++) res.push_back (cut&lt;T&gt;(vs[i], sep));<br>  return res;<br>}<br> <br>/* ############################### THE END ################################ */<br> <br> <br>// Powered by PopsEdit<br></td>