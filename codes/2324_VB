<td class="problemText" colspan="8" valign="middle" align="left">
            Imports Microsoft.VisualBasic<br>Imports System.Math<br>Imports System<br>Imports System.Collections<br>Imports System.Text<br> <br>Public Class MoneyRun<br>    Public Structure State<br>        Dim x1 As Integer<br>        Dim y1 As Integer<br>        Dim x2 As Integer<br>        Dim y2 As Integer<br> <br>        Public Sub New(ByVal hash As Integer)<br>            x1 = hash \ 10<br>            hash = (hash - x1) \ 10<br>            y1 = hash \ 10<br>            hash = (hash - y1) \ 10<br>            x2 = hash \ 10<br>            hash = (hash - x2) \ 10<br>            y2 = hash<br>        End Sub<br> <br>        Public Sub New(ByVal x1 As Integer, ByVal y1 As Integer, ByVal x2 As Integer, ByVal y2 As Integer)<br>            Me.x1 = x1<br>            Me.y1 = y1<br>            Me.x2 = x2<br>            Me.y2 = y2<br>        End Sub<br> <br>        Public ReadOnly Property Hash()<br>            Get<br>                Return y2 * 1000 + x2 * 100 + y1 * 10 + x1<br>            End Get<br>        End Property<br>    End Structure<br> <br>    Public cache(10000) As Integer<br>    Public grid(,) As Integer<br>    Public wid, hei As Integer<br> <br>    Public Function getMost(ByVal grid As String()) As Integer<br>        Dim x, y As Integer<br>        wid = grid(0).Length<br>        hei = grid.Length<br>        ReDim Me.grid(wid - 1, hei - 1)<br>        For x = 0 To wid - 1<br>            For y = 0 To hei - 1<br>                Me.grid(x, y) = CStr(grid(y).Chars(x))<br>            Next<br>        Next<br>        Return getMost(New State(0, 0, 0, 0))<br>    End Function<br> <br>    Public Function getMost(ByVal s As State) As Integer<br>        Dim dx() As Integer = New Integer() {1, 0}<br>        Dim dy() As Integer = New Integer() {0, 1}<br> <br>        If cache(s.Hash) &gt; 0 Then Return cache(s.Hash)<br> <br>        Dim a, b As Integer<br>        Dim mx As Integer = 0<br>        For a = 0 To 1<br>            For b = 0 To 1<br>                Dim s2 As State = New State(s.x1 + dx(a), s.y1 + dy(a), s.x2 + dx(b), s.y2 + dy(b))<br>                If s2.x1 &gt;= 0 AndAlso s2.x1 &lt; wid AndAlso s2.y1 &gt;= 0 AndAlso s2.y1 &lt; hei AndAlso s2.x2 &gt;= 0 AndAlso s2.x2 &lt; wid AndAlso s2.y2 &gt;= 0 AndAlso s2.y2 &lt; hei Then<br>                    mx = Max(mx, getMost(s2))<br>                End If<br>            Next<br>        Next<br>        If s.x1 = s.x2 AndAlso s.y1 = s.y2 Then<br>            mx = mx + grid(s.x1, s.y1)<br>        Else<br>            mx = mx + grid(s.x1, s.y1) + grid(s.x2, s.y2)<br>        End If<br>        cache(s.Hash) = mx<br>        Return mx<br>    End Function<br>End Class<br></td>