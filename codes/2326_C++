<td class="problemText" colspan="8" valign="middle" align="left">
            #line 153 "ImageCompress.cpp"<br> <br>#include &lt;algorithm&gt;<br>#include &lt;climits&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cstring&gt;<br>#include &lt;iostream&gt;<br>#include &lt;string&gt;<br>#include &lt;queue&gt;<br>#include &lt;sstream&gt;<br>#include &lt;map&gt;<br>//#include &lt;set&gt;<br>//#include &lt;stack&gt;<br> <br>using namespace std;<br> <br>typedef long long i64; typedef unsigned long long u64;<br>typedef vector&lt;string&gt; VS; typedef vector&lt;int&gt; VI;<br>typedef vector&lt;VS&gt; VVS; typedef vector&lt;VI&gt; VVI;<br>typedef pair&lt;int,int&gt; PII; typedef vector&lt;PII&gt; VPII;<br> <br>#define ALL(x) (x).begin(),(x).end()<br>#define SORT(x) sort((x).begin(),(x).end())<br>#define UNIQUE(x) (x).erase(unique((x).begin(),(x).end()),(x).end())<br> <br>#define FU(i,N) for( int i = 0; i &lt; (N); ++i )<br>#define fu(i,N) for( int i = 0; i &lt; (N); ++i )<br>#define fd(i,N) for( int i = (N)-1; i &gt;= 0; --i )<br>#define fr(i,S,E) for( typeof(E) i = (S); i != (E); ++i )<br>#define foreach(i,S) fr(i,(S).begin(),(S).end())<br>#define pb push_back<br> <br>int m, n;<br>map&lt;VS,string&gt; mem;<br> <br>string go( VS im );<br> <br>string doc( VS&amp; im )<br>{<br>    VS even(im.size()), odd(im.size());<br>    fu(i,im.size()) fu(j,im[i].size()) {<br>        if( j&amp;1 ) odd[i] += im[i][j];<br>        else even[i] += im[i][j];<br>    }<br>    return go(even) + go(odd);<br>}<br> <br>string dol( VS&amp; im )<br>{<br>    VS left, right;<br>    int k = (im[0].size()+1)/2;<br>    fu(i,im.size()) {<br>        left.pb(im[i].substr(0,k));<br>        right.pb(im[i].substr(k));<br>    }<br>    return go(left) + go(right);<br>}<br> <br>string dor( VS&amp; im ) <br>{<br>    VS even, odd;<br>    fu(i,im.size()) {<br>        if( i&amp;1 ) odd.push_back(im[i]);<br>        else even.push_back(im[i]);<br>    }<br>    return go(even) + go(odd);<br>}<br> <br>string dou( VS&amp; im )<br>{<br>    VS up, down;<br>    int k = (im.size()+1)/2;<br>    fu(i,k) up.pb(im[i]);<br>    for( int i = k; i &lt; im.size(); i++ ) down.pb(im[i]);<br>    return go(up) + go(down);<br>}<br> <br>string go( VS im )<br>{<br>    if( mem.count(im) ) return mem[im];<br>    string&amp; r = mem[im], s;<br> <br>    char ch = im[0][0];<br>    fu(i,im.size()) fu(j,im[i].size()) if( im[i][j] != ch ) goto cont;<br>    return r = string(1,ch);<br> <br>cont:;<br> <br>    if( im[0].size() &gt; 1 ) {<br>        s = "C" + doc(im);<br>        if( r.empty() || s.size() &lt; r.size() ) r=s;<br>        s = "L" + dol(im);<br>        if( r.empty() || s.size() &lt; r.size() ) r=s;<br>    }<br>    if( im.size() &gt; 1 ) {<br>        s = "R" + dor(im);<br>        if( r.empty() || s.size() &lt; r.size() ) r=s;<br>        s = "U" + dou(im);<br>        if( r.empty() || s.size() &lt; r.size() ) r=s;<br>    }<br>    return r;<br>}<br> <br>struct ImageCompress {<br>string compress( vector &lt;string&gt; image )<br>{<br>    mem.clear();<br>    return go(image);<br>}<br> <br>};<br> <br>// Powered by diesel<br></td>