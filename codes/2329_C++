<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;string&gt;<br>#include &lt;iostream&gt;<br>#include &lt;vector&gt;<br>#include &lt;stdio.h&gt;<br>#include &lt;stdlib.h&gt;<br>#include &lt;math.h&gt;<br><br>#ifdef WIN32<br>typedef __int64 int64;<br>typedef unsigned __int64 uint64;<br>#else<br>typedef long long int64;<br>typedef unsigned long long uint64;<br>#endif<br>using namespace std;<br><br>class CuboidJoin {<br>  public:<br>  long long totalVolume(vector &lt;int&gt; cuboids) ;<br>};<br><br>int N;<br>long long V;<br>int X1[10], Y1[10], Z1[10], X2[10], Y2[10], Z2[10];<br><br>void bagamarfa(int x)<br>{<br>  int x1, y1, z1, x2, y2, z2, i;<br>  long long s = -1;<br>  x1 = y1 = z1 = -5000;<br>  x2 = y2 = z2 = 5000;<br>  for (i = 0; i &lt; N; i++)<br>  if (x &amp; (1 &lt;&lt; i))<br>  {<br>    if (x1 &lt; X1[i]) x1 = X1[i];<br>    if (y1 &lt; Y1[i]) y1 = Y1[i];<br>    if (z1 &lt; Z1[i]) z1 = Z1[i];<br>    if (x2 &gt; X2[i]) x2 = X2[i];<br>    if (y2 &gt; Y2[i]) y2 = Y2[i];<br>    if (z2 &gt; Z2[i]) z2 = Z2[i];<br>    if (x1 &gt;= x2 || y1 &gt;= y2 || z1 &gt;= z2) return;<br>    s = -s;<br>  }<br>  V += s * (long long) (x2-x1) * (long long) (y2-y1) * (long long) (z2-z1);<br>}<br><br>long long CuboidJoin::totalVolume(vector &lt;int&gt; cuboids) <br>{<br>  int i;<br>  N = cuboids.size() / 6;<br>  for (i = 0; i &lt; N; i++)<br>  {<br>    X1[i] = cuboids[6*i + 0];<br>    Y1[i] = cuboids[6*i + 1];<br>    Z1[i] = cuboids[6*i + 2];<br>    X2[i] = cuboids[6*i + 3];<br>    Y2[i] = cuboids[6*i + 4];<br>    Z2[i] = cuboids[6*i + 5];<br>  }<br>  for (i = 1; i &lt; (1 &lt;&lt; N); i++)<br>    bagamarfa(i);<br>  return V;<br>}<br><br>#ifdef WIN32<br>int main()<br>{<br>    CuboidJoin test;<br>  vector&lt;int&gt; x;<br>  x.push_back(0); x.push_back(0); x.push_back(0); x.push_back(2); x.push_back(2); x.push_back(2);<br>  x.push_back(1); x.push_back(1); x.push_back(1); x.push_back(3); x.push_back(3); x.push_back(3);<br>  x.push_back(1); x.push_back(1); x.push_back(1); x.push_back(2); x.push_back(2); x.push_back(2);<br>  x.push_back(1); x.push_back(1); x.push_back(0); x.push_back(2); x.push_back(2); x.push_back(10);<br>  printf("%lld\n", test.totalVolume(x));<br>    return 0;<br>}<br>#endif<br><br><br>// Powered by FileEdit<br></td>