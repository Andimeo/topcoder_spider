<td class="problemText" colspan="8" valign="middle" align="left">
            #line 2 "BridgeSort.cpp"<br>#include &lt;iostream&gt;<br>#include &lt;sstream&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cctype&gt;<br>#include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;cmath&gt;<br>using namespace std; <br><br>#ifdef __GNUC__<br>typedef long long LL; <br>typedef signed long long i64;  typedef unsigned long long u64; <br>//#define int64 long long<br>#else /* MSVC, say */<br>typedef __int64 i64;<br>#endif<br><br><br>#define abs(a) ((a)&gt;0?(a):(-a))<br>#define max(a,b) ((a)&gt;(b)?(a):(b))<br>#define min(a,b) ((a)&lt;(b)?(a):(b))<br><br>#define REP(i,c) for(  i=0;i&lt;(int) (c).size();++i) <br>#define REP2(i,j,c) for(  i=0;i&lt;(int)(c).size();++i)  for(j=0;j&lt;(c)[i].size();++j)<br>#define FOR(i,a,b) for(  i=(a);i&lt;=(b);++i) <br>#define FORD(i,a,b) for(  i=(a);i&gt;=(b);--i) <br>#define FOREACH(i,c,type) for(type::iterator i=(c).begin();i!=(c).end();++i) <br><br>//#define FOREACH(i,c) for(typeof((c).begin()) i=(c).begin();i!=(c).end();++i) <br>string toupper ( string s) {for (int i1=0; i1&lt;=(int) s.length(); ++i1) s[i1]=toupper(s[i1]); return s; }<br>int gcd(int a, int b) {return b==0?a:gcd(b,a % b);}<br>const int INF = 1000000000; <br>template&lt;class T&gt; inline int size(const T&amp;c) { return c.size(); } <br>template&lt;class T&gt; <br>string str( T x) {ostringstream oss;oss &lt;&lt; x;return oss.str();}<br>template&lt;typename T1&gt; <br>void prn(T1 const&amp; coll) {typename T1::const_iterator pos;typename T1::const_iterator end(coll.end());cout&lt;&lt;"{";<br>  for(pos=coll.begin();pos!=end;++pos) cout&lt;&lt;*pos&lt;&lt;","; cout&lt;&lt;"}"&lt;&lt;endl;}<br>template&lt;typename T1&gt; <br>void prnd(T1 const&amp; coll) {typename T1::const_iterator pos;typename T1::const_iterator end(coll.end());<br>  for(pos=coll.begin();pos!=end;++pos) print(*pos);}<br>char buf[1000]; <br>string i2s(int x) { sprintf(buf,"%d",x);  return buf; } <br>int str2int(string &amp;i){ int s;sscanf(i.c_str(),"%d", &amp;s); return s;} <br>vector&lt;string&gt; tokenize(string s, string ch) { vector&lt;string&gt; ret; <br>   for(int p=0,p2;p&lt;s.size(); p=p2+1) {p2=s.find_first_of(ch, p); if(p2==-1) p2=s.size();if(p2-p &gt; 0 ) ret.push_back(s.substr(p,p2-p));}    return ret;} <br><br>typedef vector&lt;int&gt; VI;  typedef vector&lt;vector&lt;int&gt; &gt; VVI; <br>typedef vector&lt;string&gt; VS;  typedef vector&lt;vector&lt;string&gt; &gt; VVS; <br>typedef set&lt;int&gt; SI;  typedef set&lt;string&gt; SS; <br>typedef map&lt;string,int&gt; MSI;  typedef map&lt;string,string&gt; MSS; <br>typedef pair&lt;int,int&gt; PII; typedef pair&lt;string,int&gt; PSI; typedef pair&lt;string,string&gt; PSS;  typedef pair&lt;int,string&gt; PIS;<br>typedef istringstream ISS;<br><br>#define BE(a) (a).begin(),(a).end()<br>#define UNION(a,b,c,type)  set_union(BE(a),BE(b),insert_iterator&lt;type &gt;((c),(c).begin()))<br>#define INTERSECT(a,b,c,type) set_intersection(BE(a),BE(b),insert_iterator&lt;type  &gt;((c),(c).begin()))<br>#define DIFFER(a,b,c,type) set_difference(BE(a),BE(b),insert_iterator&lt;type  &gt;((c),(c).begin()))<br>#define LESS(type,function) bool function(const type &amp;a,const type &amp;b)<br><br>LESS(string,lh){<br>  string s1="CDHS";<br>  string s2="23456789TJQKA";<br>  int x1,x2,y1,y2;<br>  x1=s1.find_first_of(a[0]);<br>  x2=s1.find_first_of(b[0]);<br>  if (x1!=x2) return x1&lt;x2;<br><br>  y1=s2.find_first_of(a[1]);<br>  y2=s2.find_first_of(b[1]);<br>  return y1&lt;y2;<br>}<br>class BridgeSort {<br>  public:<br>  string sortedHand(string a) {<br>  int i,j,k;<br>  int n=a.length()/2;<br>  VS vs;<br>  FOR(i,1,n){<br>    vs.push_back(a.substr(0,2));<br>    a=a.substr(2);<br>  }<br>  sort(BE(vs),lh);<br>  string ret="";<br>  REP(i,vs)ret+=vs[i];<br>  return ret;<br><br>  }<br>  <br> <br>};<br><br><br>    <br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003]<br>// Powered by CodeProcessor<br></td>