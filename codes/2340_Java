<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>public class ClapLight {<br>  public int threshold(int[] background) {<br>    outer:<br>    for(int i = 0; i &lt;= 1001; i++){<br>      int lows = 0;<br>      int suc = 0;<br>      for(int j = 0; j &lt; background.length; j++){<br>        if(background[j] &lt; i){<br>          lows++;<br>          if(suc==3) continue outer;<br>          else suc = 1;<br>        }else{<br>          if(suc!=0)suc++;<br>        }<br>      }<br>      if(lows &gt; background.length/2) return i;<br>    }<br>    return -1;<br>  }<br> <br>/** begin cut - don't modify this line*/<br>  public static void main(String[] a) {<br>    new ClapLight().runTestCase(0);<br>    new ClapLight().runTestCase(1);<br>    new ClapLight().runTestCase(2);<br>    new ClapLight().runTestCase(3);<br>  }<br> <br>  public void runTestCase(int nbr) {<br>    switch(nbr) {<br>      case 0 : {<br>        checkOutput(threshold(new int[] {6,6,6,6,6}), 7, 0); break;<br>      }<br>      case 1 : {<br>        checkOutput(threshold(new int[] { 5,8,7,6,12,8,4,3,2,6 } ), 9, 1); break;<br>      }<br>      case 2 : {<br>        checkOutput(threshold(new int[] {8,8,8,1,1,1,1,1,1,1,1,1,1,1,2,1}), 2, 2); break;<br>      }<br>      case 3 : {<br>        checkOutput(threshold(new int[] {921,1,5,900,8,813,3,3,3,3,3,3,3,813,813}), 4, 3); break;<br>      }<br>    }<br>  }<br>  final void checkOutput(int mine, int them, int nbr) {<br>    boolean success = (mine==them);<br>    StringBuffer out = new StringBuffer();<br>    out.append("Example ");<br>    out.append((nbr+1));<br>    out.append(" - ");<br>    out.append(success ? "success" : "failure   ");<br>    if(!success) {<br>      out.append("Got: ");<br>      out.append(mine);<br>      out.append(", Expected: ");<br>      out.append(them);<br>    }<br>    System.out.println(out);<br>  }<br>  final void checkOutput(long mine, long them, int nbr) {<br>    boolean success = (mine==them);<br>    StringBuffer out = new StringBuffer();<br>    out.append("Example ");<br>    out.append((nbr+1));<br>    out.append(" - ");<br>    out.append(success ? "success" : "failure   ");<br>    if(!success) {<br>      out.append("Got: ");<br>      out.append(mine);<br>      out.append(", Expected: ");<br>      out.append(them);<br>    }<br>    System.out.println(out);<br>  }<br>  final void checkOutput(double mine, double them, int nbr) {<br>    boolean success = doubleCompare(mine, them);<br>    StringBuffer out = new StringBuffer();<br>    out.append("Example ");<br>    out.append((nbr+1));<br>    out.append(" - ");<br>    out.append(success ? "success" : "failure   ");<br>    if(!success) {<br>      out.append("Got: ");<br>      out.append(mine);<br>      out.append(", Expected: ");<br>      out.append(them);<br>    }<br>    System.out.println(out);<br>  }<br>  private static boolean doubleCompare(double expected, double result){<br>    double MAX_DOUBLE_ERROR = 1E-9;<br>    if(Double.isNaN(expected)){<br>      return Double.isNaN(result);<br>    }else if(Double.isInfinite(expected)){<br>      if(expected &gt; 0){<br>        return result &gt; 0 &amp;&amp; Double.isInfinite(result);<br>      }else{<br>        return result &lt; 0 &amp;&amp; Double.isInfinite(result);<br>      }<br>    }else if(Double.isNaN(result) || Double.isInfinite(result)){<br>      return false;<br>    }else if(Math.abs(result - expected) &lt; MAX_DOUBLE_ERROR){<br>      return true;<br>    }else{<br>      double min = Math.min(expected * (1.0 - MAX_DOUBLE_ERROR),<br>        expected * (1.0 + MAX_DOUBLE_ERROR));<br>      double max = Math.max(expected * (1.0 - MAX_DOUBLE_ERROR),<br>          expected * (1.0 + MAX_DOUBLE_ERROR));<br>      return result &gt; min &amp;&amp; result &lt; max;<br>    }<br>  }<br>  final void checkOutput(char mine, char them, int nbr) {<br>    boolean success = (mine==them);<br>    StringBuffer out = new StringBuffer();<br>    out.append("Example ");<br>    out.append((nbr+1));<br>    out.append(" - ");<br>    out.append(success ? "success" : "failure   ");<br>    if(!success) {<br>      out.append("Got: ");<br>      out.append("'");<br>      out.append(mine);<br>      out.append("'");<br>      out.append(", Expected: ");<br>      out.append("'");<br>      out.append(them);<br>      out.append("'");<br>    }<br>    System.out.println(out);<br>  }<br>  final void checkOutput(String mine, String them, int nbr) {<br>    boolean success = (mine.equals(them));<br>    StringBuffer out = new StringBuffer();<br>    out.append("Example ");<br>    out.append((nbr+1));<br>    out.append(" - ");<br>    out.append(success ? "success" : "failure   ");<br>    if(!success) {<br>      out.append("Got: ");<br>      out.append("\"");<br>      out.append(mine);<br>      out.append("\"");<br>      out.append(", Expected: ");<br>      out.append("\"");<br>      out.append(them);<br>      out.append("\"");<br>    }<br>    System.out.println(out);<br>  }<br>  final void checkOutput(long[] mine, long[] them, int nbr) {<br>    boolean success = (Arrays.equals(mine, them));<br>    StringBuffer out = new StringBuffer();<br>    out.append("Example ");<br>    out.append((nbr+1));<br>    out.append(" - ");<br>    out.append(success ? "success" : "failure   ");<br>    if(!success) {<br>      out.append("Got: ");<br>      out.append("{");<br>      for(int x=0;x&lt;mine.length;x++) {<br>        out.append(mine[x]);<br>        if(x&lt;mine.length-1) out.append(", ");<br>      }<br>      out.append("}");<br>      out.append(", Expected: ");<br>      out.append("{");<br>      for(int x=0;x&lt;them.length;x++) {<br>        out.append(them[x]);<br>        if(x&lt;them.length-1) out.append(", ");<br>      }<br>      out.append("}");<br>    }<br>    System.out.println(out);<br>  }<br>  final void checkOutput(char[] mine, char[] them, int nbr) {<br>    boolean success = (Arrays.equals(mine, them));<br>    StringBuffer out = new StringBuffer();<br>    out.append("Example ");<br>    out.append((nbr+1));<br>    out.append(" - ");<br>    out.append(success ? "success" : "failure   ");<br>    if(!success) {<br>      out.append("Got: ");<br>      out.append("{");<br>      for(int x=0;x&lt;mine.length;x++) {<br>        out.append(mine[x]);<br>        if(x&lt;mine.length-1) out.append(", ");<br>      }<br>      out.append("}");<br>      out.append(", Expected: ");<br>      out.append("{");<br>      for(int x=0;x&lt;them.length;x++) {<br>        out.append(them[x]);<br>        if(x&lt;them.length-1) out.append(", ");<br>      }<br>      out.append("}");<br>    }<br>    System.out.println(out);<br>  }<br>  final void checkOutput(double[] mine, double[] them, int nbr) {<br>    boolean success = (Arrays.equals(mine, them));<br>    StringBuffer out = new StringBuffer();<br>    out.append("Example ");<br>    out.append((nbr+1));<br>    out.append(" - ");<br>    out.append(success ? "success" : "failure   ");<br>    if(!success) {<br>      out.append("Got: ");<br>      out.append("{");<br>      for(int x=0;x&lt;mine.length;x++) {<br>        out.append(mine[x]);<br>        if(x&lt;mine.length-1) out.append(", ");<br>      }<br>      out.append("}");<br>      out.append(", Expected: ");<br>      out.append("{");<br>      for(int x=0;x&lt;them.length;x++) {<br>        out.append(them[x]);<br>        if(x&lt;them.length-1) out.append(", ");<br>      }<br>      out.append("}");<br>    }<br>    System.out.println(out);<br>  }<br>  final void checkOutput(int[] mine, int[] them, int nbr) {<br>    boolean success = (Arrays.equals(mine, them));<br>    StringBuffer out = new StringBuffer();<br>    out.append("Example ");<br>    out.append((nbr+1));<br>    out.append(" - ");<br>    out.append(success ? "success" : "failure   ");<br>    if(!success) {<br>      out.append("Got: ");<br>      out.append("{");<br>      for(int x=0;x&lt;mine.length;x++) {<br>        out.append(mine[x]);<br>        if(x&lt;mine.length-1) out.append(", ");<br>      }<br>      out.append("}");<br>      out.append(", Expected: ");<br>      out.append("{");<br>      for(int x=0;x&lt;them.length;x++) {<br>        out.append(them[x]);<br>        if(x&lt;them.length-1) out.append(", ");<br>      }<br>      out.append("}");<br>    }<br>    System.out.println(out);<br>  }<br>  final void checkOutput(String[] mine, String[] them, int nbr) {<br>    boolean success = (Arrays.equals(mine, them));<br>    StringBuffer out = new StringBuffer();<br>    out.append("Example ");<br>    out.append((nbr+1));<br>    out.append(" - ");<br>    out.append(success ? "success" : "failure   ");<br>    if(!success) {<br>      out.append("Got: ");<br>      out.append("{");<br>      for(int x=0;x&lt;mine.length;x++) {<br>        out.append(mine[x]);<br>        if(x&lt;mine.length-1) out.append(", ");<br>      }<br>      out.append("}");<br>      out.append(", Expected: ");<br>      out.append("{");<br>      for(int x=0;x&lt;them.length;x++) {<br>        out.append(them[x]);<br>        if(x&lt;them.length-1) out.append(", ");<br>      }<br>      out.append("}");<br>    }<br>    System.out.println(out);<br>  }<br> <br>/** end cut - don't modify this line*/<br>}<br> <br>// Powered by PopsEdit<br>// Powered by CodeProcessor<br></td>