<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>public class TeamBuilder {<br>  public int[] specialLocations(String[] paths) {<br>    int[] ret = {0, 0};<br>    boolean[][] floydRocks = new boolean[paths.length][paths.length];<br>    for( int x = 0; x &lt; floydRocks.length; x++ )<br>    for( int y = 0; y &lt; floydRocks.length; y++ )<br>    if( x == y || paths[x].charAt(y) == '1' ) floydRocks[x][y] = true;<br>    <br>    // actually, this is a Warshall, not a floyd-Warshall<br>    for( int t=0; t &lt; floydRocks.length; t++ )<br>      for( int s = 0; s &lt; floydRocks.length; s++ )<br>        for( int e = 0; e &lt; floydRocks.length; e++ )<br>          floydRocks[s][e] = floydRocks[s][e] || ( floydRocks[s][t] &amp;&amp; floydRocks[t][e] );<br>          <br>    // find ones that connect all<br>    for( int i = 0; i &lt; floydRocks.length; i++ ){<br>      boolean good = true;<br>      for( int j = 0; j &lt; floydRocks.length &amp;&amp; good ; j++ ) if( !floydRocks[i][j] ) good = false;<br>      if( good ) ret[0]++;  <br>    }<br>    for( int i = 0; i &lt; floydRocks.length; i++ ){<br>      boolean good = true;<br>      for( int j = 0; j &lt; floydRocks.length &amp;&amp; good; j++ ) if ( !floydRocks[j][i] ) good = false;<br>      if( good ) ret[1]++;<br>    }<br>    <br>    return ret;<br>  }<br>}<br> <br>// Powered by PopsEdit<br></td>