<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections;<br>public class Partial {<br>  class Term : IComparable{<br>    public int c = 1;<br>    public int[] pow = new int[3];<br>    public override string ToString(){<br>      string r = "";<br>      if(pow[0] + pow[1] + pow[2] == 0)<br>        return ""+c;<br>      else if(c == 0)<br>        return "0";<br>      else if(c != 1)<br>        r += c + "*";<br>      for(int i = 0; i &lt; 3; i++)<br>        if(pow[i] != 0){<br>          r += (char)('x'+i);<br>          if(pow[i] != 1)<br>            r += "^" + pow[i];<br>          r += "*";<br>        }<br>      return r.Substring(0, r.Length - 1);<br>    }<br>    public int rank{get{<br>      return (pow[0]+pow[1]+pow[2])*1000+pow[0]*100+pow[1]*10+pow[2];<br>    }}<br>    public int type{get{<br>      return pow[0]*100+pow[1]*10+pow[2];<br>    }}<br>    public int CompareTo(object o){<br>      return -(rank - ((Term)o).rank);<br>    }<br>  }<br>  public string derivative(string expr, string vars) {<br>    string[] terms = expr.Split('+');<br>    int i, j, k = 0;<br>    for(i = 0; i &lt; terms.Length; i++)<br>      terms[i] = terms[i].Trim();<br><br>    Term[] tr = new Term[terms.Length];<br><br>    int n = 0;<br>    foreach(string t in terms){<br>      Term z = new Term();<br>      for(i = 0; i &lt; t.Length; i++){<br>        j = -1;<br>        if(t[i] == 'x')    j = 0;<br>        else if(t[i] == 'y')  j = 1;<br>        else if(t[i] == 'z')  j = 2;<br>        if(j == -1)<br>          try{<br>            k = 1;<br>            for(;;++k)<br>              z.c = int.Parse(t.Substring(i, k));<br>          }catch{i += k - 1;}<br>        else{<br>          i++;<br>          int p = 1;<br>          if(i &lt; t.Length &amp;&amp; t[i] == '^'){<br>            ++i;<br>            try{<br>              k = 1;<br>              for(;;++k)<br>                p = int.Parse(t.Substring(i, k));<br>            }catch{i += k - 1;}<br>          }<br>          z.pow[j] = p;<br>        }<br>      }<br>      tr[n++] = z;<br>    }<br><br>    for(i = 0; i &lt; vars.Length; i++)<br>      der(tr, vars[i] - 'x');<br><br><br><br><br>    Array.Sort(tr);<br><br>    ArrayList ts = new ArrayList();<br><br>    k = 0;<br>    for(i = 1; i &lt; tr.Length; i++)<br>    {<br>      if(tr[k].type == tr[i].type)<br>        tr[k].c += tr[i].c;<br>      else{<br>        ts.Add(tr[k]);<br>        k = i;<br>      }<br>    }<br>    ts.Add(tr[k]);<br><br><br>    string r = "";<br>    foreach(Term t in ts){<br>      if(t.c == 0)<br>        continue;<br>      r += t + " + ";<br>    }<br><br>    if(r == "")<br>      return "0";<br><br>    return r.Substring(0, r.Length - 3);<br>  }<br><br>  void der(Term[] tr, int var){<br>    for(int i = 0; i &lt; tr.Length; i++)<br>      if(tr[i].pow[var] == 0)<br>        tr[i].c = 0;<br>      else<br>        tr[i].c *= tr[i].pow[var]--;<br>  }<br>}<br><br><br>// Powered by FileEdit<br></td>