<td class="problemText" colspan="8" valign="middle" align="left">
            Imports Microsoft.VisualBasic<br>Imports System.Math<br>Imports System<br>Imports System.Collections<br>Imports System.Text<br> <br>Public Class Partial<br>    Public Class Term<br>        Implements IComparable<br> <br>        Public Num As Integer<br>        Public PowX As Integer<br>        Public PowY As Integer<br>        Public PowZ As Integer<br> <br>        Public Sub New()<br> <br>        End Sub<br> <br>        Public Sub New(ByVal term As String)<br>            Dim s() As String = term.Split("*"c)<br>            Dim ss As String<br>            For Each ss In s<br>                Select Case ss.Chars(0)<br>                    Case "x"c<br>                        If ss.Length &gt; 1 Then<br>                            PowX = CStr(ss.Chars(2))<br>                        Else<br>                            PowX = 1<br>                        End If<br>                    Case "y"c<br>                        If ss.Length &gt; 1 Then<br>                            PowY = CStr(ss.Chars(2))<br>                        Else<br>                            PowY = 1<br>                        End If<br>                    Case "z"c<br>                        If ss.Length &gt; 1 Then<br>                            PowZ = CStr(ss.Chars(2))<br>                        Else<br>                            PowZ = 1<br>                        End If<br>                    Case Else<br>                        Num = CStr(ss)<br>                End Select<br>            Next<br>            If PowX + PowY + PowZ &gt; 0 Then<br>                If Num = 0 Then Num = 1<br>            End If<br>        End Sub<br> <br>        Public Sub Derivate(ByVal c As Char)<br>            Select Case c<br>                Case "x"c<br>                    Num *= PowX<br>                    PowX -= 1<br>                Case "y"c<br>                    Num *= PowY<br>                    PowY -= 1<br>                Case "z"c<br>                    Num *= PowZ<br>                    PowZ -= 1<br>            End Select<br>            If Num = 0 Then<br>                PowX = 0<br>                PowY = 0<br>                PowZ = 0<br>            End If<br>        End Sub<br> <br>        Public Shared Function EqualPower(ByVal t1 As Term, ByVal t2 As Term) As Boolean<br>            Return t1.PowX = t2.PowX AndAlso t1.PowY = t2.PowY AndAlso t1.PowZ = t2.PowZ<br>        End Function<br> <br>        Public Function CompareTo(ByVal obj As Object) As Integer Implements System.IComparable.CompareTo<br>            Dim it As Term = obj<br>            If Me.PowX = it.PowX AndAlso Me.PowY = it.PowY AndAlso Me.PowZ = it.PowZ Then<br>                Return 0<br>            ElseIf Me.PowX + Me.PowY + Me.PowZ &lt;&gt; it.PowX + it.PowY + it.PowZ Then<br>                Return -(Me.PowX + Me.PowY + Me.PowZ - (it.PowX + it.PowY + it.PowZ))<br>            ElseIf Me.PowX &lt;&gt; it.PowX Then<br>                Return -(Me.PowX - it.PowX)<br>            ElseIf Me.PowY &lt;&gt; it.PowY Then<br>                Return -(Me.PowY - it.PowY)<br>            Else<br>                Return 0<br>            End If<br>        End Function<br> <br>        Public Overrides Function ToString() As String<br>            If PowX = 0 AndAlso PowY = 0 AndAlso PowZ = 0 Then<br>                Return Num<br>            Else<br>                Dim ret As New ArrayList<br>                If Num &gt; 1 Then ret.Add(CStr(Num))<br>                If PowX = 1 Then<br>                    ret.Add("x")<br>                ElseIf PowX &gt; 1 Then<br>                    ret.Add("x^" &amp; PowX)<br>                End If<br>                If PowY = 1 Then<br>                    ret.Add("y")<br>                ElseIf PowY &gt; 1 Then<br>                    ret.Add("y^" &amp; PowY)<br>                End If<br>                If PowZ = 1 Then<br>                    ret.Add("z")<br>                ElseIf PowZ &gt; 1 Then<br>                    ret.Add("z^" &amp; PowZ)<br>                End If<br>                Return String.Join("*"c, ret.ToArray(GetType(String)))<br>            End If<br>        End Function<br>    End Class<br> <br>    Public Function derivative(ByVal expr As String, ByVal vars As String) As String<br>        expr = expr.Replace(" + ", " ")<br>        Dim s() As String = expr.Split(" "c)<br>        Dim terms As New ArrayList<br>        Dim t As Term<br>        Dim a As Integer<br>        For a = 0 To s.Length - 1<br>            terms.Add(New Term(s(a)))<br>        Next<br>        terms.Sort()<br>        Dim b As Integer<br>        Dim curt As New Term<br>        Dim newterms As New ArrayList<br>        For b = 0 To terms.Count - 1<br>            t = terms(b)<br>            If Term.EqualPower(t, curt) Then<br>                curt.Num += t.Num<br>            Else<br>                If curt.Num &gt; 0 Then newterms.Add(curt)<br>                curt = t<br>            End If<br>        Next<br>        If curt.Num &gt; 0 Then newterms.Add(curt)<br>        terms = newterms<br>        For a = 0 To vars.Length - 1<br>            For Each t In terms<br>                t.Derivate(vars.Chars(a))<br>            Next<br>            terms.Sort()<br>            curt = New Term<br>            newterms = New ArrayList<br>            For b = 0 To terms.Count - 1<br>                t = terms(b)<br>                If Term.EqualPower(t, curt) Then<br>                    curt.Num += t.Num<br>                Else<br>                    If curt.Num &gt; 0 Then newterms.Add(curt)<br>                    curt = t<br>                End If<br>            Next<br>            If curt.Num &gt; 0 Then newterms.Add(curt)<br>            terms = newterms<br>        Next<br>        If terms.Count = 0 Then<br>            Return "0"<br>        Else<br>            Dim ret(terms.Count - 1) As String<br>            For a = 0 To terms.Count - 1<br>                ret(a) = terms(a).ToString<br>            Next<br>            Return String.Join(" + ", ret)<br>        End If<br>    End Function<br>End Class<br></td>