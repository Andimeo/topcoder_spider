<td class="problemText" colspan="8" valign="middle" align="left">
            #line 2 "RecursiveGraph.cpp"<br>#include &lt;string&gt;<br>#include &lt;iostream&gt;<br>#include &lt;vector&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;sstream&gt;<br>#include &lt;cstdio&gt;<br> <br>using namespace std;<br> <br>#define INF 2000000000<br>#define K 40<br> <br>class RecursiveGraph {<br>    public:<br> <br>    long long g[K][100][100];<br>  <br>    void init() {<br>  for( int i=0; i&lt;K; i++)<br>      for( int j=0; j&lt;100; j++)<br>    for( int k=0; k&lt;100; k++) {<br>        g[i][j][k] = INF;<br>    }<br>    }<br>  <br>    int shortestPath(vector &lt;string&gt; edges, char start, char end) {<br>        init();<br> <br>  for( int i=0; i&lt;(int)edges.size(); i++) {<br>      stringstream ss( edges[i]);<br>      string a, b;<br>      int w;<br>      ss &gt;&gt; a &gt;&gt; b &gt;&gt; w;<br> <br>      int an = a[0]-'A';<br>      if( a.size()==2)<br>    an += (a[1]-'0')*10;<br> <br>      int bn = b[0]-'A';<br>      if( b.size()==2)<br>    bn += (b[1]-'0')*10;<br> <br>      g[0][an][bn] = w;<br>      g[0][bn][an] = w;<br>  }<br> <br>  for( int a=1; a&lt;K; a++) {<br>      for( int i=0; i&lt;100; i++)<br>    for( int j=0; j&lt;100; j++) {<br>      if( g[a-1][i][j]!=INF)<br>          g[a][i][j] = g[a-1][i][j]/2;<br>        }<br>  }<br> <br>  for( int i=K-1; i&gt;=0; i--) {<br> <br>      for( int n=0; n&lt;100; n++)<br>    for( int a=0; a&lt;100; a++)<br>        for( int b=0; b&lt;100; b++) {<br>      g[i][a][b] = min( g[i][a][b], g[i][a][n]+g[i][n][b]);<br>        }<br> <br>      if( i==0)<br>    break;<br> <br>      for( int a=0; a&lt;10; a++)<br>    for( int b=0; b&lt;10; b++) <br>        for( int k=10; k&lt;100; k+=10) {<br>      g[i-1][a + k][b + k] = g[i][a][b];<br>        }<br>  }<br> <br>  int result = g[0][ start-'A'][ end-'A'];<br>  if( result&gt;=INF)<br>      return -1;<br>  else<br>      return result;<br>    }<br> <br>    <br> <br>};<br> <br> <br> <br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003]<br>// Powered by CodeProcessor<br></td>