<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;algorithm&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cmath&gt;<br>#include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;cctype&gt;<br>#include &lt;iostream&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;sstream&gt;<br>using namespace std;<br><br>#define REP(i,n) for(int i=0;i&lt;(n);++i)<br>#define FOR(i,a,b) for(int i=(a);i&lt;=(b);++i)<br>#define FORD(i,a,b) for(int i=(a);i&gt;=(b);--i)<br>#define FOREACH(it,c) for(typeof((c).begin()) it=(c).begin();it!=(c).end();++it)<br>typedef long long LL;<br>typedef vector&lt;int&gt; VI;<br>const int INF = 1000000000;<br>template&lt;class T&gt; inline int size(const T&amp;c) { return c.size(); }<br><br>//////////////////////////////////////////////////////////////////////<br><br>vector&lt;string&gt; sentence;<br>vector&lt;string&gt; articles,nouns,adjectives,verbs,adverbs,prepositions;<br><br>string cache[100][15];<br><br>vector&lt;string&gt; parse(string s) {<br>  s+=' ';<br>  string w;<br>  vector&lt;string&gt; res;<br>  FOREACH(it,s) {<br>    char c = *it;<br>    if(c==' ') { if(w!="") res.push_back(w); w=""; }<br>    else { w+=c; }<br>  }<br>  return res;<br>}<br><br>inline bool matches(string a,string b) {<br>  if(size(a)!=size(b)) return false;<br>  REP(i,size(a)) if(a[i]!=b[i] &amp;&amp; b[i]!='?') return false;<br>  return true;<br>}<br><br>string get(vector&lt;string&gt; &amp;v, int p) {<br>  string s = sentence[p];<br>  string res = "I";<br>  FOREACH(it,v) if(matches(*it,s)) {<br>    if(res=="I" || res==*it) res=*it; else res = "D";<br>  }<br>  return res;<br>}<br><br>string join(string a,string b) {<br>  if(a=="I" || b=="I") return "I";<br>  if(a=="D" || b=="D") return "D";<br>  if(b=="") return a;<br>  return a+" " + b;<br>}<br><br>string either(string a,string b) {<br>  if(a=="D" || b=="D") return "D";<br>  if(a=="I") return b;<br>  if(b=="I") return a;<br>  if(a==b) return a;<br>  return "D";<br>}<br><br>string calc(int,int);<br><br>string calc2(int p,int s) {<br>  if(s==9) {<br>    if(p==size(sentence)) return "";<br>    else return "I";<br>  }<br>  if(p==size(sentence)) return "I";<br>  if(s==0) {<br>    return join(get(articles,p),calc(p+1,1));<br>  }<br>  if(s==1) {<br>    return either(join(get(adjectives,p),calc(p+1,1)),calc(p,2));<br>  }<br>  if(s==2) {<br>    return join(get(nouns,p),calc(p+1,3));<br>  }<br>  if(s==3) {<br>    return join(get(verbs,p),calc(p+1,4));<br>  }<br>  if(s==4) {<br>    return either(join(get(adverbs,p),calc(p+1,4)),calc(p,5));<br>  }<br>  if(s==5) {<br>    return either(join(get(prepositions,p),calc(p+1,6)),calc(p,6));<br>  }<br>  if(s==6) {<br>    return join(get(articles,p),calc(p+1,7));<br>  }<br>  if(s==7) {<br>    return either(join(get(adjectives,p),calc(p+1,7)),calc(p,8));<br>  }<br>  if(s==8) {<br>    return join(get(nouns,p),calc(p+1,9));<br>  }<br>  return "?";<br>}<br><br>string calc(int p,int s) {<br>  if(cache[p][s]=="?") cache[p][s]=calc2(p,s);<br>  return cache[p][s];<br>}<br><br>struct RecoverWords {<br>  // MAIN<br>  string recover(string _sentence, vector &lt;string&gt; _nouns, vector &lt;string&gt; _adjectives, vector &lt;string&gt; _verbs, vector &lt;string&gt; _adverbs, vector &lt;string&gt; _prepositions) {<br>    sentence = parse(_sentence);<br>    nouns = _nouns; adjectives = _adjectives;  verbs=_verbs; adverbs=_adverbs;<br>    prepositions = _prepositions;<br>    articles.push_back("a"); articles.push_back("the");<br>    <br>    REP(i,100) REP(j,15) cache[i][j] = "?";<br>    string res = calc(0,0);<br>    if(res=="D" || res=="I") res="";<br>    return res;<br>  }<br>};<br><br><br><br>// Powered by FileEdit<br></td>