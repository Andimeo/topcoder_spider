<td class="problemText" colspan="8" valign="middle" align="left">
            /*/*///*/*/ Powered by radedit!            /*/*/*/*/*/ ;<br>/*/*//*/*/  import java . util .           /*/*/*/*/*/ ;<br>/*/*//*/*/  import java . lang . reflect . /*/*/*/*/*/ ;<br>public class EulerianRace {<br>   boolean ddd = false ;<br>  public int[] planRoute(String[] bridges) {<br>    int i, j, k ;<br>    int n = bridges.length ;<br>    boolean d[][] = new boolean[n][n] ;<br>    int bc = 0 ;<br>    for (i=0; i&lt;n; i++) {<br>      for (j=0; j&lt;n; j++) {<br>  if (bridges[i].charAt(j) == '1') {<br>    d[i][j] = true ;<br>    bc++ ;<br>  }<br>      }<br>    }<br>    bc /= 2 ;<br>    String route = "" + (char)0 ;<br>    while (bc &gt; 0) {<br>      for (i=0; i&lt;route.length(); i++) {<br>  boolean added = false ;<br>  int f = route.charAt(i) ;<br>  for (j=0; j&lt;n; j++) {<br>    if (d[f][j]) {<br>      added = true ;<br>      String ins = "" + (char)j ;<br>      d[f][j] = d[j][f] = false ;<br>      bc-- ;<br>      while (j != f) {<br>        for (k=0; k&lt;n; k++) {<br>    if (d[j][k]) {<br>      ins = ins + (char)k ;<br>      d[j][k] = d[k][j] = false ;<br>      bc-- ;<br>      //      System.out.println("Stepping j " + j + " k " + k) ;<br>      j = k ;<br>      break ;<br>    }<br>        }<br>      }<br>      route = route.substring(0, i+1) + ins + route.substring(i+1) ;<br>      //      System.out.println("Got route added " + ins + " -&gt; " + route) ;<br>      break ;<br>    }<br>  }<br>  if (added) {<br>    break ;<br>  }<br>      }<br>    }<br>      int[] r = new int[route.length()] ;<br>      for (i=0; i&lt;route.length(); i++) {<br>  r[i] = route.charAt(i) ;<br>      }<br>      return r ;<br>  }<br>  static void pp(Object o) { System.out.println(o) ; }<br>}<br></td>