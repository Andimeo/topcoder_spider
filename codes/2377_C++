<td class="problemText" colspan="8" valign="middle" align="left">
            // Oblok -- University of Utah<br><br>import java.util.*;<br><br>public class TandemRepeats<br>{<br>    public int maxLength(String dd /*dna*/, int kk /*k*/)<br>    {<br>        int ddlen=dd.length();<br>        int c=0, count=0, i=0, j=0, k=0, l=0, x=0, y=0, z=0;<br>        char ch;<br>        String s; StringTokenizer st; Iterator it;<br>        int rv = 0;<br><br>        for (i = 1; i &lt; 50; i++)<br>          for (j = 0; j &lt;= ddlen - 2 * i; j++)<br>          {<br>            c = 0;<br>            for (k = 0; k &lt; i; k++)<br>              if (dd.charAt (j+k) != dd.charAt (j+i+k))<br>                  c++;<br>            if (c &lt;= kk)<br>              rv = i;<br>          }<br><br>        return rv;<br>    }<br><br>    static public void main (String[] args)<br>    {<br>        /*{<br>        TandemRepeats tempObject = new TandemRepeats ();<br>        String dna = ;<br>        int k = ;<br>        int result = tempObject.maxLength (dna, k);<br><br>        System.out.println ("Expected: ");<br>        System.out.print ("Received: ");<br>        System.out.println ("" + result);<br>        }<br>        */<br>        {<br>        TandemRepeats tempObject = new TandemRepeats ();<br>        String dna = "GATCATCA";<br>        int k = 0;<br>        int result = tempObject.maxLength (dna, k);<br><br>        System.out.println ("Expected: 3");<br>        System.out.print ("Received: ");<br>        System.out.println ("" + result);<br>        }<br><br>        {<br>        TandemRepeats tempObject = new TandemRepeats ();<br>        String dna = "GATCATGA";<br>        int k = 1;<br>        int result = tempObject.maxLength (dna, k);<br><br>        System.out.println ("Expected: 3");<br>        System.out.print ("Received: ");<br>        System.out.println ("" + result);<br>        }<br><br>        {<br>        TandemRepeats tempObject = new TandemRepeats ();<br>        String dna = "GATCATGA";<br>        int k = 0;<br>        int result = tempObject.maxLength (dna, k);<br><br>        System.out.println ("Expected: 0");<br>        System.out.print ("Received: ");<br>        System.out.println ("" + result);<br>        }<br><br>        {<br>        TandemRepeats tempObject = new TandemRepeats ();<br>        String dna = "AGAGAAAGAA";<br>        int k = 3;<br>        int result = tempObject.maxLength (dna, k);<br><br>        System.out.println ("Expected: 5");<br>        System.out.print ("Received: ");<br>        System.out.println ("" + result);<br>        }<br><br>        {<br>        TandemRepeats tempObject = new TandemRepeats ();<br>        String dna = "ATTAGCATTGCACACCTTGAGGACTTAGACAAACCTAGTACACAGGTGTA";<br>        int k = 5;<br>        int result = tempObject.maxLength (dna, k);<br><br>        System.out.println ("Expected: 11");<br>        System.out.print ("Received: ");<br>        System.out.println ("" + result);<br>        }<br><br>        /*{<br>        TandemRepeats tempObject = new TandemRepeats ();<br>        String dna = ;<br>        int k = ;<br>        int result = tempObject.maxLength (dna, k);<br><br>        System.out.println ("Expected: ");<br>        System.out.print ("Received: ");<br>        System.out.println ("" + result);<br>        }<br>        */<br>    }<br>    public String[] tokenize (String s)<br>    {<br>        // P. Jensen's (Oblok's) library code -- Copyright 2003.  Converts<br>        //   a string into an array of its delimited tokens.<br>        StringTokenizer st=new StringTokenizer(s," ");<br>        String[] rv=new String[st.countTokens()];<br>        for (int i=0;i&lt;rv.length;i++)rv[i]=st.nextToken();<br>        return rv;<br>    }<br><br>    public String[][] tokenize (String s[])<br>    {<br>        // P. Jensen's (Oblok's) library code -- Copyright 2003.  Converts<br>        //   a string array into arrays of its delimited tokens.<br>        String[][] rv = new String[s.length][];<br>        for (int j=0;j&lt;s.length;j++){<br>          StringTokenizer st=new StringTokenizer(s[j]," ");<br>          rv[j]=new String[st.countTokens()];<br>          for (int i=0;i&lt;rv[j].length;i++)rv[j][i]=st.nextToken();}<br>        return rv;<br>    }<br><br>    static public char[] charize (String s)<br>    {<br>        // P. Jensen's (Oblok's) library code -- Too simple to comment.<br>        return s.toCharArray();<br>    }<br><br>    static public char[][] charize (String[] s)<br>    {<br>        // P. Jensen's (Oblok's) library code -- Copyright 2003.  Converts<br>        //   a string array into arrays of its characters.<br>        char[][] rv = new char[s.length][];<br>        for (int i=0;i&lt;s.length;i++)<br>          rv[i]=s[i].toCharArray();<br>        return rv;<br>    }<br><br>    public int[] valueize (String s)<br>    {<br>        // P. Jensen's (Oblok's) library code -- Copyright 2003.  Converts<br>        //   the string tokens to an array of integers, replacing invalid<br>        //   values with MIN_VALUE.<br>        String[] t=tokenize(s);<br>        int[] rv=new int[t.length];<br>        for (int i=0;i&lt;t.length;i++)<br>          try{rv[i]=Integer.parseInt(t[i]);}catch(NumberFormatException e){rv[i]=Integer.MIN_VALUE;}<br>        return rv;<br>    }<br>    public int[][] valueize (String s[])<br>    {<br>        // P. Jensen's (Oblok's) library code -- Copyright 2003.  Converts<br>        //   the array of string tokens to arrays of integers, replacing invalid<br>        //   values with MIN_VALUE.<br>        int[][] rv=new int[s.length][];<br>        for (int i=0;i&lt;s.length;i++)<br>          rv[i]=valueize(s[i]);<br>        return rv;<br>    }<br>    public void print (String s){System.out.print(s);}<br>    public void println (String s){System.out.println(s);}<br>}<br></td>