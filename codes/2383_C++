<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;iostream&gt;<br>#include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;functional&gt;<br>#include &lt;numeric&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cmath&gt;<br>#include &lt;queue&gt;<br>#include &lt;map&gt;<br>using namespace std;<br>typedef vector&lt;int&gt; VI;  typedef vector&lt;vector&lt;int&gt; &gt; VVI;<br>typedef vector&lt;string&gt; VS;  typedef vector&lt;vector&lt;string&gt; &gt; VVS;<br>typedef signed long long i64;  typedef unsigned long long u64;<br><br>map&lt;i64, int&gt; seen;<br>int sz;<br>i64 goal;<br>i64 bp, np;<br>int doit(i64 s) {<br>  if( s == goal || !s ) return 0;<br>  int &amp;ret = seen[s];<br>  if( ret ) return ret;<br>  ret = -1;<br>  s = (s&lt;&lt;1) + (s&gt;&gt;(sz-1));<br>  int ret1 = doit(s&amp;bp);<br>  if( ret1 == -1 ) return -1;<br>  int ret2 = doit(s&amp;np);<br>  if( ret2 == -1 ) return -1;<br>  return ret = (ret1 &gt;? ret2) + 1;<br>}<br><br>class SimpleIO {<br>public:<br>int worstCase(string pattern, int targetState) {<br>  sz = pattern.size();<br>  int i, j, k, x, y, z, n;<br>  for( i = 0; i &lt; pattern.size(); i++ )<br>    if( pattern[i] == 'B' )<br>      bp += (1ll&lt;&lt;i);<br>    else<br>      np += (1ll&lt;&lt;i);<br>  goal = (1ll&lt;&lt;targetState);<br>  return doit((1ll&lt;&lt;pattern.size())-1);<br>}<br>};<br><br><br>// Powered by FileEdit<br></td>