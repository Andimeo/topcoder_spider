<td class="problemText" colspan="8" valign="middle" align="left">
            Imports Microsoft.VisualBasic<br>Imports System.Math<br>Imports System<br>Imports System.Collections<br>Imports System.Text<br> <br>Public Class SimpleIO<br>    Public Function worstCase(ByVal pattern As String, ByVal targetState As Integer) As Integer<br>        Dim N As Integer = pattern.Length<br>        Dim longest(N - 1) As Integer<br>        Dim a, b, c As Integer<br>        For a = 0 To N - 1<br>            For b = 0 To N - 1<br>                If longest(b) = a Then<br>                    If pattern.Chars((b - a + N) Mod N) = pattern.Chars((targetState - a + N) Mod N) Then<br>                        longest(b) += 1<br>                    End If<br>                End If<br>            Next<br>        Next<br>        c = 0<br>        For a = 0 To N - 1<br>            If longest(a) = N Then c += 1<br>        Next<br>        If c &gt; 1 Then Return -1<br>        Dim worst As Integer = 0<br>        For c = 0 To N - 1<br>            Array.Clear(longest, 0, N)<br>            For a = 1 To N<br>                Dim h As Integer = 0<br>                For b = 0 To N - 1<br>                    If longest(b) = a - 1 Then<br>                        If pattern.Chars((b + a) Mod N) = pattern.Chars((c + a) Mod N) Then<br>                            longest(b) += 1<br>                            h += 1<br>                        End If<br>                    End If<br>                Next<br>                If h = 1 Then Exit For<br>            Next<br>            b = (c + a) Mod N<br>            If b &lt;= targetState Then<br>                worst = Max(worst, a + targetState - b)<br>            Else<br>                worst = Max(worst, a + targetState + N - b)<br>            End If<br>        Next<br>        Return worst<br>    End Function<br>End Class<br></td>