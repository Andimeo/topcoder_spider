<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections;<br><br>public class DiskScheduler<br> {<br>  private int min;<br>  private int[] disk;<br><br>  private int right(int position, ref int newPosition)<br>  {<br>    for (int j = position; j &lt; 100; j++)<br>    {<br>      if (disk[j] == 1)<br>      {<br>        newPosition = j;<br>        return j - position;        <br>      }<br>    }<br>    for (int j = 0; j &lt; position; j++)<br>    {<br>      if (disk[j] == 1)<br>      {<br>        newPosition = j;<br>        return 100 + j - position;        <br>      }<br>    }    <br>    return 0;<br>  }<br><br>  private int left(int position, ref int newPosition)<br>  {    <br>    for (int j = position; j &gt;= 0; j--)<br>    {<br>      if (disk[j] == 1)<br>      {<br>        newPosition = j;<br>        return position - j;        <br>      }<br>    }<br>    for (int j = 99; j &gt; position; j--)<br>    {<br>      if (disk[j] == 1)<br>      {<br>        newPosition = j;<br>        return 100 - j + position;        <br>      }<br>    }<br>    return 0;<br>  }<br><br>  private void step(int position, int current)<br>  {<br>    if (current &gt; 100)<br>      return;<br><br>    int newPosition = 0;<br>        int length = left(position, ref newPosition);<br>    if (length == 0)<br>    {<br>      if (current &lt; min)<br>        min = current;<br>    }<br>    else<br>    {<br>            disk[newPosition] = 0;<br>      step(newPosition,current+length);<br>      disk[newPosition] = 1;<br>    }<br><br>    length = right(position, ref newPosition);<br>    if (length == 0)<br>    {<br>      if (current &lt; min)<br>        min = current;<br>    }<br>    else<br>    {<br>      disk[newPosition] = 0;<br>      step(newPosition,current+length);<br>      disk[newPosition] = 1;<br>    }<br>  }<br><br>  public int optimize(int start, int[] sectors)<br>  {<br>        disk = new int[100];<br>    for (int i = 0; i &lt; 100; i++)<br>      disk[i] = 0;<br><br>    for (int i = 0; i &lt; sectors.Length; i++)<br>      disk[sectors[i]-1] = 1;<br>        <br>    min = 100;<br>    step(start-1,0);<br><br>    return min;<br>  }<br>}<br><br><br>// Powered by FileEdit<br></td>