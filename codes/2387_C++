<td class="problemText" colspan="8" valign="middle" align="left">
            #line 5 "DiskScheduler.cpp"<br><br>#include &lt;algorithm&gt;<br>#include &lt;vector&gt;<br>#include &lt;list&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;string&gt;<br>#include &lt;utility&gt;<br>#include &lt;stdio.h&gt;<br>#include &lt;iostream&gt;<br>#include &lt;sstream&gt;<br>#include &lt;math.h&gt;<br><br>#ifdef _MSC_VER<br>typedef _int64 int64;<br>#else<br>typedef long long int64;<br>#endif<br><br>using namespace std;<br><br>typedef vector&lt;int&gt; VI;     typedef vector&lt;VI&gt; VVI;<br>typedef vector&lt;string&gt; VS;  typedef vector&lt;VS&gt; VVS;<br>typedef vector&lt;double&gt; VD;<br>typedef pair&lt;int, int&gt; PII;<br>typedef pair&lt;double, double&gt; PDD;<br><br>const double Eps = 1E-10;<br><br>#define ALL(cont) (cont).begin(), (cont).end()<br>#define FORV(vector, var) for (int var = 0; var &lt; (int) (vector).size(); ++var)<br>#define REP(var, n) for (int var = 0; var &lt; (n); ++i)<br>#define pb push_back<br><br>template&lt;class T&gt; T gcd(T a, T b) { while (b) { a%=b; swap(a, b); } return a; }<br><br>const string LALPHA = "abcdefghijklmnopqrstuvwxyz";<br>const string UALPHA = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";<br>const string DIGITS = "0123456789";<br>const string DELIM = " \t\n\r";<br><br>enum AddPatt { NOTPATT = 1, PATT = 3, BOTH = 2 };<br>// splits s into substrings each of which consists solely from chars from patt or<br>//  not from patt and returns those as indicated by add.<br>VS split(const string&amp; s, const string&amp; patt = DELIM, AddPatt add = NOTPATT) {<br>  VS res;<br>  if (s.length() == 0)<br>    return res;<br>  bool inpatt = patt.find(s[0]) != patt.npos;<br>  size_t st = 0;<br>  for (size_t i = 1; i &lt; s.length(); ++i) {<br>    if ((patt.find(s[i]) != patt.npos) != inpatt) {<br>      if ((inpatt &amp;&amp; add &gt;= 2) || (!inpatt &amp;&amp; add &lt;= 2))<br>        res.push_back(s.substr(st, i-st));<br>      inpatt = !inpatt;<br>      st = i;<br>    }<br>  }<br>  if ((inpatt &amp;&amp; add &gt;= 2) || (!inpatt &amp;&amp; add &lt;= 2))<br>    res.push_back(s.substr(st));<br>  return res;<br>}<br><br>string tolower(string s) {<br>  string res; FORV(s, i) res += tolower(s[i]); return res;<br>}<br><br>////////////////////////////////////////////////////////////////////////////////////////<br><br>class DiskScheduler {<br>  public:<br>    VI d;<br><br>    int sweep(int pos, int incr, int num) {<br>      int cnt = 0;<br>      while (num) {<br>        if (d[pos] == 1)<br>          --num;<br>        pos += incr;<br>        ++cnt;<br>      }<br>      return cnt;<br>    }<br><br>  int optimize(int start, vector &lt;int&gt; sectors) {<br>    d.resize(400);<br>    FORV(d, i) d[i] = 0;<br>    FORV(sectors, i) {<br>      d[sectors[i]] = 1;<br>      d[sectors[i] + 100] = 1;<br>      d[sectors[i] + 200] = 1;<br>    }<br>    <br>    int res = sweep(start + 100, 1, sectors.size());<br>    res = min(res, sweep(start + 100, -1, sectors.size()));<br>    REP(i, 100) {<br>      int cnt = 0;<br>      for (int j = 0; j &lt;= i; ++j) {<br>        if (d[start+100+j] == 1)<br>          ++cnt;<br>      }<br>      res = min(res, 2*i + sweep(start+100, -1, sectors.size() - cnt));<br><br>      cnt = 0;<br>      for (int j = 0; j &lt;= i; ++j) {<br>        if (d[start+100-j] == 1)<br>          ++cnt;<br>      }<br>      res = min(res, 2*i + sweep(start+100, 1, sectors.size() - cnt));<br>    }<br><br>    return res - 1;<br>  }<br><br>  <br><br>};<br><br> <br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003]<br>// Powered by CodeProcessor<br></td>