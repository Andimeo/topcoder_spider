<td class="problemText" colspan="8" valign="middle" align="left">
            // FilterC#<br><br><br>using System;<br>using System.Collections;<br><br>public class OddsAndEvens {<br><br>  public string find(string[] sums, string[] products) <br>  {<br>    int nso=0;<br>    int nmo=0;<br>    int N=sums.Length;<br>    foreach(string ss in sums)<br>      if(ss=="ODD") nso++;<br>    foreach(string ss in products)<br>      if(ss=="ODD") nmo++;<br><br>    int n=0;<br>    for(n=1;n*(n-1)&lt;2*N;n++);<br><br>    int no=0;<br>    for(;no&lt;=n;no++)<br>    {<br>      if((n-no)*no==nso&amp;&amp;no*(no-1)==2*nmo) break;<br>    }<br><br>    if(no&gt;n) return "IMPOSSIBLE";<br>    return string.Format("EVEN {0} ODD {1}",n-no,no);<br>  }<br><br><br>  private static ArrayList BitCount(int n){ ArrayList r = new ArrayList(); int idx=0; while(n &gt; 0) { if((n&amp;1)==1) r.Add(idx); n &gt;&gt;= 1; idx++;} return r; }<br>  private static int Gcd(int a, int b) { while(b!=0) {int t=a; a=b; b=t%b;} return a;}<br>  private static int Lcm(int a, int b) { return a*b/Gcd(a,b); }<br>  private static char[] CA(ArrayList ar) { return (char []) ar.ToArray(typeof(char)); }<br>  private static int[] IA(ArrayList ar) { return (int []) ar.ToArray(typeof(int)); }<br>  private static long[] LA(ArrayList ar) { return (long []) ar.ToArray(typeof(long)); }<br>  private static double[] DA(ArrayList ar) { return (double []) ar.ToArray(typeof(double)); }<br>  private static string[] SA(ArrayList ar) { return (string[]) ar.ToArray(typeof(string)); }<br>  private static int INT(Object x) { return Int32.Parse(x.ToString()); }<br>  private static long LNG(Object x) { return Int64.Parse(x.ToString()); }<br>  private static double DBL(Object x) { return Double.Parse(x.ToString()); }<br>  private static int MinI(IEnumerable a) { int m = Int32.MaxValue; foreach (int x in a) m = Math.Min(m, x); return m; }<br>  private static long MinL(IEnumerable a) { long  m = Int64.MaxValue;  foreach (long x in a) m = Math.Min(m, x); return m; }<br>  private static double MinD(IEnumerable a) { double m = Double.MaxValue; foreach (double x in a) m = Math.Min(m, x); return m; }<br>  private static string MinS(IEnumerable a) { string m = null; foreach (string x in a) m = (m == null || m.CompareTo(x)&gt;0) ? x : m; return m; } <br>  private static int MaxI(IEnumerable a) { int m = Int32.MinValue;  foreach (int x in a) m = Math.Max(m, x); return m; }<br>  private static long MaxL(IEnumerable a) { long   m = Int64.MinValue;   foreach (long x in a) m = Math.Max(m, x); return m; }<br>  private static double MaxD(IEnumerable a) { double m = Double.MinValue; foreach (double x in a) m = Math.Max(m, x); return m; }<br>  private static string MaxS(IEnumerable a) { string m = null; foreach (string x in a) m = (m == null || m.CompareTo(x)&lt;0) ? x : m; return m; } <br>  private static int SumI(IEnumerable a) { int m = 0;  foreach (int x in a) m += x; return m; }<br>  private static long SumL(IEnumerable a) { long m = 0;  foreach (long x in a) m += x; return m; }<br>  private static double SumD(IEnumerable a) { double m = 0;  foreach (double x in a) m += x; return m; }<br>  private static string SumS(IEnumerable a) { string m = ""; foreach (string x in a) m += x; return m; }<br>  private static int MinI(params int[] a) { int m = Int32.MaxValue; foreach (int x in a) m = Math.Min(m, x); return m; }<br>  private static long MinL(params long[] a) { long  m = Int64.MaxValue;  foreach (long x in a) m = Math.Min(m, x); return m; }<br>  private static double MinD(params double[] a) { double m = Double.MaxValue; foreach (double x in a) m = Math.Min(m, x); return m; }<br>  private static string MinS(params string[] a) { string m = null; foreach (string x in a) m = (m == null || m.CompareTo(x)&gt;0) ? x : m; return m; } <br>  private static int MaxI(params int[] a) { int m = Int32.MinValue;  foreach (int x in a) m = Math.Max(m, x); return m; }<br>  private static long MaxL(params long[] a) { long   m = Int64.MinValue;   foreach (long x in a) m = Math.Max(m, x); return m; }<br>  private static double MaxD(params double[] a) { double m = Double.MinValue; foreach (double x in a) m = Math.Max(m, x); return m; }<br>  private static string MaxS(params string[] a) { string m = null; foreach (string x in a) m = (m == null || m.CompareTo(x)&lt;0) ? x : m; return m; } <br>  private static int SumI(params int[] a) { int m = 0;  foreach (int x in a) m += x; return m; }<br>  private static long SumL(params long[] a) { long m = 0;  foreach (long x in a) m += x; return m; }<br>  private static double SumD(params double[] a) { double m = 0;  foreach (double x in a) m += x; return m; }<br>  private static string SumS(params string[] a) { string m = ""; foreach (string x in a) m += x; return m; }<br>  private static int[] dr={-1,0,1,0};<br>  private static int[] dc={0,1,0,-1};<br>    public class SComparer:IComparer <br>   { <br>     public int Compare(object x, object y) <br>        { <br>      string sx=(string)x; <br>      string sy=(string)y; <br>      return String.CompareOrdinal(sx,sy); <br>    } <br>   } <br>}<br><br><br>// Powered by FileEdit<br>// Powered by CodeProcessor<br></td>