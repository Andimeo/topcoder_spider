<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;vector&gt;<br>#include &lt;string&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;numeric&gt;<br>#include &lt;iostream&gt;<br>#include &lt;cctype&gt;<br> <br>using namespace std;<br> <br>vector&lt; string &gt; tokenize( const string &amp;in, const string &amp;tok ) {<br>  const char *dt = in.c_str();<br>  vector&lt; string &gt; ret;<br>  while( *dt ) {<br>    while( count( tok.begin(), tok.end(), *dt ) ) dt++;<br>    const char *nd = dt;<br>    while( *nd &amp;&amp; !count( tok.begin(), tok.end(), *nd ) ) nd++;<br>    if( dt != nd )<br>      ret.push_back( string( dt, nd ) );<br>    dt = nd;<br>  }<br>  return ret;<br>}<br> <br>vector&lt; int &gt; sti( const vector&lt; string &gt; &amp;it ) {<br>  vector&lt; int &gt; ret;<br>  for( int i = 0; i &lt; it.size(); i++ )<br>    ret.push_back( atoi( it[ i ].c_str() ) );<br>  return ret;<br>}<br> <br>class zzz {<br>} zz;<br> <br>zzz operator,( zzz x, zzz y ) {<br>  x = y;<br>  cout &lt;&lt; endl;<br>  return x;<br>};<br> <br>zzz operator,( zzz x, int y ) {<br>  cout &lt;&lt; y &lt;&lt; " ";<br>  return x;<br>};<br> <br>zzz operator,( zzz x, double y ) {<br>  cout &lt;&lt; y &lt;&lt; " ";<br>  return x;<br>};<br> <br>zzz operator,( zzz x, const string &amp;y ) {<br>  cout &lt;&lt; "\"" &lt;&lt; y &lt;&lt; "\"" &lt;&lt; " ";<br>  return x;<br>};<br> <br>template&lt; typename T, typename U &gt;<br>zzz operator,( zzz x, const pair&lt; T, U &gt; &amp;y ) {<br>  cout &lt;&lt; "[ ";<br>  x,y.first;<br>  cout &lt;&lt; ", ";<br>  x,y.second;<br>  cout &lt;&lt; "] ";<br>  return x;<br>};<br> <br>template&lt; typename T &gt;<br>zzz operator,( zzz x, const vector&lt; T &gt; &amp;y ) {<br>  cout &lt;&lt; "{ ";<br>  for( int i = 0; i &lt; y.size(); i++ ) {<br>    x,y[ i ];<br>    cout &lt;&lt; ", ";<br>  }<br>  cout &lt;&lt; "} ";<br>  return x;<br>};<br>/*<br>template&lt; typename T &gt;<br>zzz operator,( zzz x, const set&lt; T &gt; &amp;y ) {<br>  cout &lt;&lt; "{ ";<br>  for( set&lt; T &gt;::const_iterator itr = y.begin(); itr != y.end(); itr++ ) {<br>    x,*itr;<br>    cout &lt;&lt; ", ";<br>  }<br>  cout &lt;&lt; "} ";<br>  return x;<br>};<br> <br>template&lt; typename T, typename U &gt;<br>zzz operator,( zzz x, const map&lt; T, U &gt; &amp;y ) {<br>  cout &lt;&lt; "{ ";<br>  for( map&lt; T, U &gt;::const_iterator itr = y.begin(); itr != y.end(); itr++ ) {<br>    x,*itr;<br>    cout &lt;&lt; ", ";<br>  }<br>  cout &lt;&lt; "} ";<br>  return x;<br>};<br>*/<br> <br>#define gcd __gcd<br> <br> <br>string tlw( string in ) {<br>  string oot;<br>  for( int i = 0; i &lt; in.size(); i++ ) oot += tolower( in[ i ] );<br>  return oot;<br>}<br> <br> <br>class AutoFix {<br>  public:<br>  string fix(string sentence, vector &lt;int&gt; times, vector &lt;string&gt; dictionary) {<br>    string oot;<br>    set&lt; string &gt; dict( dictionary.begin(), dictionary.end() );<br>    for( int i = 0; i &lt; sentence.size(); i++ ) {<br>      if( sentence[ i ] != ' ' ) oot += sentence[ i ];<br>      else if( times[ i + 1 ] - times[ i ] &gt; 20 ) oot += sentence[ i ];<br>      else {<br>        bool swap = true;<br>        vector&lt; string &gt; taka = tokenize( oot, " " );<br>        string tak = taka[ taka.size() - 1 ];<br>        vector&lt; string &gt; toka = tokenize( sentence.c_str() + i, " " );<br>        string tok = toka[ 0 ];<br>        if( dict.count( tlw( tak ) ) &amp;&amp; dict.count( tlw( tok ) ) ) {<br>          swap = false;<br>        } else {<br>          string taka = tak + tok[ 0 ];<br>          string toka = tok;<br>          toka.erase( toka.begin() );<br>          if( !dict.count( tlw( taka ) ) || !dict.count( tlw( toka ) ) ) swap = false;<br>        }<br>        if( swap ) {<br>          oot += sentence[ i + 1 ];<br>          oot += sentence[ i ];<br>          i++;<br>        } else {<br>          oot += sentence[ i ];<br>        }<br>      }<br>    }<br>    return oot;  <br>  }<br>};<br> <br>// Powered by PopsEdit<br></td>