<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections;<br><br><br>public class CutoffRounder {<br>  public int round(string num, string cutoff) {<br>    double n = double.Parse(num);<br>    double c = double.Parse(cutoff.Split('.')[1]) / 10000;<br>    if(n - ((int) n) &gt; c)<br>      return ((int)n) + 1;<br>    else<br>      return ((int)n);<br>  }<br><br>  <br><br><br><br>  public class Util <br>  {<br>    static int TestNum = 0;<br><br>    public static int gcd(int a,int b) <br>    {<br>      if (b==0) return a;<br>      return gcd(b,a%b);<br>    }<br><br>    public static bool AreEqual(object a, object b)<br>    {<br>      <br>      if(! (a is Array &amp;&amp; b is Array))<br>      {<br>        if(!a.Equals(b))<br>          Console.WriteLine("Test " + TestNum + " failed.  Expected: " + a.ToString() + "\nRecieved: " + b.ToString());<br>        TestNum++;<br>        return a.Equals(b);<br>      }<br><br>      Array x = (Array) a;<br>      Array y = (Array) b;<br><br>      if(x.Length != y.Length)<br>      {<br>        Console.WriteLine("Test Failed: Arrays not the same length");<br>        TestNum++;<br>        return false;<br>      }<br>      for(int i = 0; i &lt; x.Length; i++)<br>        if(! x.GetValue(i).Equals(y.GetValue(i)))<br>        {<br>          Console.WriteLine("Test " + TestNum + " failed.  Expected: " + x.ToString() + "\nRecieved: " + y.ToString());<br>          TestNum++;<br>          return false;<br>        }<br>      return true;<br>    }<br>  }<br><br>  public class IntArrayList : ArrayList<br>  {<br>    public IntArrayList() : base() {}  <br>    public IntArrayList(int[] arr) : base(arr)  {}<br>    public IntArrayList(int num) : base(num) {}<br>    public void AddRange(int[] arr)<br>    { base.AddRange(arr); }<br>    public new int this[int index]<br>    {  get { return (int) base[index]; }<br>      set { base[index] = value; } }<br>    public new int[] ToArray()<br>    { return (int[]) base.ToArray(typeof(int)); }<br>  }<br><br>  public class StringArrayList : ArrayList<br>  {  public StringArrayList() : base() {}  <br>    public StringArrayList(string[] arr) : base(arr)  {}<br>    public StringArrayList(int num) : base(num) {}<br>    public void AddRange(string[] arr)<br>    { base.AddRange(arr); }<br>    public new string this[int index]  {<br>      get {  return (string) base[index];}<br>      set { base[index] = value;} }<br>    public new string[] ToArray()  <br>    { return (string[]) base.ToArray(typeof(string)); }<br>  }<br>}<br><br><br>// Powered by FileEdit<br>// Powered by CodeProcessor<br></td>