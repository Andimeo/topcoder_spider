<td class="problemText" colspan="8" valign="middle" align="left">
            #line 2 "PuckShot.cpp"<br><br>#include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;ctype.h&gt;<br>#include &lt;math.h&gt;<br>#include &lt;iostream&gt;<br>#include &lt;set&gt;<br><br>using namespace std;<br>typedef long long ll; typedef long double ld;<br>typedef vector&lt;int&gt; VI; typedef vector&lt;string&gt; VS; typedef string S;<br><br>#define LS &lt;<br>#define FOR(k,start,end) for(typeof(start) k=(start); k LS (end); ++k)<br><br>#define WIDE 3000<br>#define HIGH 1733<br>#define GOAL 183<br><br>#include &lt;complex&gt;<br>typedef complex&lt;long double&gt; cld;<br>typedef complex&lt;long long&gt; cll;<br><br>template &lt;class T&gt; T operator | (complex&lt;T&gt; x, complex&lt;T&gt; y) {<br>  return (x*conj(y)).real();<br>  }<br><br>template &lt;class T&gt; T operator ^ (complex&lt;T&gt; x, complex&lt;T&gt; y) {<br>  return (x*conj(y)).imag();<br>  }<br><br>class PuckShot {<br>  public:<br>  double caromAngle(int pC, vector &lt;int&gt; xCoords, vector &lt;int&gt; yCoords) {<br>    vector&lt;cld&gt; enemy;<br>    int n = xCoords.size();<br>    FOR(k,0,n) {<br>      enemy . push_back( cld(xCoords[k]-pC,yCoords[k]) );<br>      enemy . push_back( cld(WIDE+WIDE-xCoords[k]-pC,yCoords[k]) );<br>      }<br>    ld pos = WIDE*1.5 - GOAL*0.5 - pC;<br><br>    n *= 2;<br>    again:<br>//  printf("pos = %Lf\n", pos);<br>    FOR(k,0,n) {<br>      ld x = pos * (enemy[k].imag() / 1733);<br>//    printf("%d (%Lf, %Lf): miss by %Lf\n",<br>//      k, enemy[k].real(), enemy[k].imag(), x - enemy[k].real());<br>      if(x &lt; enemy[k].real() - 25) continue;<br>      if(x &gt; enemy[k].real() + 24.9999995) continue;<br>      // enemy[k].real() + 25 = pos * (1733 / i)<br>//    printf("Pushed by %d\n", k);<br>      pos = (enemy[k].real() + 25) * (1733 / enemy[k].imag());<br>      goto again;<br>      }<br><br>    if(pos &gt; WIDE*1.5 + GOAL*0.5 - pC) return -1;<br>    return atan(HIGH / pos) * 180 / M_PI;<br>    }<br>  <br> <br>  };<br><br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003]<br>// Powered by CodeProcessor<br></td>