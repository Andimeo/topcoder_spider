<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>public class PuckShot {<br>  public double caromAngle(int puckCoord, int[] xCoords, int[] yCoords) {<br>    int cnt = xCoords.length;<br>    double[] seg0 = new double[2*cnt];<br>    double[] seg1 = new double[2*cnt];<br>    <br>    double X = 6000 - puckCoord;<br>    <br>    for (int i = 0; i &lt; cnt; i++) {<br>      double dx, dy, y;<br>      <br>      y = 1733;<br>      dx = X - (xCoords[i] - 25);<br>      dy = yCoords[i];<br>      <br>      seg0[i*2] = X - (dx * y) / dy;<br>      <br>      dx = X - (xCoords[i] + 25);    <br>      <br>      seg1[i*2] = X - (dx * y) / dy;      <br>      <br>      // mirrored<br>      dx = X - (6000-(xCoords[i] - 25));<br>      seg1[i*2+1] = X - (dx * y) / dy;<br>      dx = X - (6000-(xCoords[i] + 25));<br>      seg0[i*2+1] = X - (dx * y) / dy;      <br>    }<br>    <br>    // order segments by seg1 desc<br>    for (int i = 0; i &lt; seg1.length - 1; i++) {<br>      for (int j = i+1; j &lt; seg1.length; j++) {<br>        if (seg1[i] &lt; seg1[j]) {<br>          double t;<br>          t = seg1[i]; seg1[i] = seg1[j]; seg1[j] = t;<br>          t = seg0[i]; seg0[i] = seg0[j]; seg0[j] = t;<br>        }<br>      }<br>    }<br>      <br>    // check maximal X beetween 1500+91.5 : 1500+91.5<br>    double checker = 1500+91.5;<br>    int idx = 0;<br>    boolean found = false;<br>    while (!found &amp;&amp; (idx &lt; 2*cnt) &amp;&amp; (checker &gt;= 1500-91.5)) {<br>      if (seg0[idx] &gt; checker) {<br>        idx++;<br>      }<br>      else<br>      if (checker &gt; seg1[idx]) found=true;<br>      else {<br>        checker = seg0[idx];<br>        idx++;<br>      }<br>    }<br>      <br>    if (found || checker &gt;= 1500-91.5) {<br>      double arc = Math.atan(1733.0/(X-checker));<br>      return 180.0*arc/Math.PI;<br>    }<br>    else {<br>      return -1.0;<br>    }<br>  }<br>}<br> <br>// Powered by PopsEdit<br></td>