<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections;<br>using System.Text;<br>public class NCMultiplication {<br>//     int[] target;<br>//     int[] best;<br>//     long bestSize;<br>//     long[] tens;<br>//     long num1;<br>    public long findFactors(int[] digits) {<br>//         initTens();<br>//         int[] num1 = new int[digits.Length];<br>//         int[] num2 = new int[digits.Length];<br><br>//         for(int i=0;i&lt;10;i++) {<br>//             go1(i,1);<br>//         }<br>        long result = -1;<br>        long foo = toLong(digits);<br>        Console.WriteLine(foo);<br>        long big =<br>            ((long)Math.Sqrt(foo))+1;<br>        for(long i=1;i&lt;big;i++) {<br>            if (foo % i == 0) {<br>                <br>                long j = foo / i;<br>                //Console.WriteLine(i+","+j);<br>                int[] ints = mult(i,j);<br>//                 for(int k=0;k&lt;ints.Length;k++)<br>//                     Console.WriteLine(ints[k]);<br>                if (equal(ints, digits)) {<br>                    result = j;<br>                }<br>            }<br>            <br>                <br>        }<br>        return result;<br>    }<br><br>//     void initTens() {<br>//         tens = new long[20];<br>//         tens[0] = 1;<br>//         for(int i=1;i&lt;21;i++) {<br>//             tens[i]=10*tens[i-1];<br>//         }<br>//     }<br>    <br>//     void go1(int num, int len) {<br>//         if (!works(num,len)) return;<br>//         for(int i=0;i&lt;len;i++) {<br>//             int temp = num+tens[len]*i;<br>//             go1(temp, len+1);<br>//         }<br>//         int[] prod = mult(num1, num2);<br>//         if (prod.Length&gt;target.Length) return;<br>//         if (<br>//         if (len!=0) for (int i = prod.Length-1; i &gt; prod.Length-2*len; i--) {<br>//             //if (prod[i] == 0)<br>//             if (prod[i] != target[i]) return;<br>//         }<br>//         len++;<br>//         for(int i=0;i&lt;10;i++) {<br>//             for(int j=0;j&lt;10;j++) {<br>//                 int temp1 = tens[len]*i+num1;<br>//                 int temp2 = tens[len]*j+num2;<br>//                 if (prod[prod.Length+1-2*len]+i*j == target[prod.Length+1-2*len])<br>//                 go(temp1,temp2,len);<br>//             }<br>//         }<br>//     }<br>    <br>//     bool works(int num, int len) {<br>//         mult = new <br>//     }<br>    <br>    int[] mult(long a, long b) {<br>        string ass = ""+a;<br>        string bs = ""+b;<br>        int[] result = new int[ass.Length + bs.Length-1];<br>        int[] aa = new int[ass.Length];<br>        int[] ba = new int[bs.Length];<br>        for(int i=0;i&lt;ass.Length;i++) {<br>            for(int j=0;j&lt;bs.Length;j++) {<br>                result[i+j] += Convert.ToInt32(""+ass[i])*Convert.ToInt32(""+bs[j]);<br>            }<br>        }<br>        return result;<br>    }<br><br>    bool equal(int[] a, int[] b) {<br>        if (a.Length != b.Length) return false;<br><br>        for(int i=0;i&lt;a.Length;i++)<br>            if (a[i]!=b[i])<br>                return false;<br><br>        return true;<br>                              <br>    }<br>    <br>    long toLong(int[] foo) {<br>        int len = foo.Length;<br>        long result = 0;<br>        long pow = 1;<br>        for(int i=0;i&lt;len;i++) {<br>            result += pow*foo[len-i-1];<br>            pow *= 10;<br>        }<br>        return result;<br>    }<br>   public static void Main(string[] args) {}<br>}<br><br><br>// Powered by FileEdit<br></td>