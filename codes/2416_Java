<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>public class NCMultiplication {<br> <br>  <br>  public long findFactors(int[] digits) {<br>    long num = 0; long factor = 1;<br>    for(int i = digits.length-1; i&gt;=0 ; i--){<br>      num+= digits[i]* factor;<br>      factor*=10;<br>    }//p(num + "\n");<br>    long min = Long.MAX_VALUE;<br>    long ret = -1;<br>    for(long i = 1 ; i*i&lt;=num ; i++){<br>      if( num % i != 0) continue;<br>      long a = num / i , b = i;<br>      String A= a+"",B=i+"";<br>      int test[] = new int[digits.length];boolean flag = true;<br>      Arrays.fill(test,0);<br>      for(int n = 0 ; n &lt; A.length() ; n++)<br>      for(int m = 0 ; m &lt; B.length() ; m++){<br>        int c = (A.charAt(n) -'0') * (int)(B.charAt(m)-'0');<br>        if(n+m &gt;= test.length) {flag = false; break;}<br>        test[ n+m ] += c;<br>      }if(a==36){ p(test);p("\n");}<br>      for(int j = 0 ; j &lt; digits.length ; j++){<br>        if(test[j]!=digits[j])flag = false;<br>      }<br>      if(flag) ret = a;<br>    }<br>    return ret;<br>    <br>    <br>  }<br>  <br>  <br> <br> <br>  void p(Object o){<br>    System.out.print(o);<br>  }<br>  <br>  void p(int[] arr){<br>    for(int i = 0 ; i &lt; arr.length ; i++)<br>      System.out.print(arr[i]+"   ");<br>  }<br> <br>  void p(int[][] arr , int w){<br>    for(int i = 0 ; i &lt; arr.length ; i++){<br>    for(int j = 0 ; j &lt; arr[0].length ; j++){<br>      String s = arr[i][j] + "";<br>      while(s.length()&lt;w) s= s + " ";<br>      p(s);<br>    }<br>    p("\n");<br>    }<br>  }<br>  <br>  int sum(int[] a){<br>    int ret = 0 ;<br>    for(int i = 0 ; i &lt; a.length ; i++)ret+= a[i];<br>    return ret;<br>  }<br>    <br>  int max(int[] a){<br>    int x = 0 ;<br>    for(int i = 0 ; i &lt; a.length ;i++)<br>    if(a[i]&gt;a[x]) x = i;<br>    return x;<br>  }<br>  int min(int[] a){<br>    int x = 0 ;<br>    for(int i = 0 ; i &lt; a.length ;i++)<br>    if(a[i]&lt;a[x]) x= i;<br>    return x;<br>  }<br>  boolean eq(String a , String b){    <br>    return a.equals(b);<br>  }<br>  <br>  int parseInt(String s){<br>    return Integer.parseInt(s);<br>  }<br> <br>  int min(int a , int b){<br>    return Math.min(a,b);<br>  }<br> <br>  double min (double a , double b ){<br>    return Math.min(a,b);<br>  }<br> <br>  int max(int a , int b){<br>    return Math.max(a,b);<br>  }<br>  double max(double a , double b ) {<br>    return Math.max(a,b);<br>  }<br> <br>  void copy(int a[] , int b[]){<br>    for(int i = 0 ; i &lt; min(a.length,b.length);i++)<br>    b[i] = a[i];<br>  }<br> <br>  void copy(Object a[] , Object b[]){<br>    for(int i = 0 ; i &lt; min(a.length ,b.length);i++)<br>    b[i]=a[i];<br>  }<br>  void swap(int i , int j , int arr[]){<br>    int tmp = arr[i];<br>    arr[i] = arr[j];<br>    arr[j] = tmp;<br>  }<br>  void swap(int i , int j , Object arr[]){<br>    Object tmp = arr[i];<br>    arr[i] = arr[j];<br>    arr[j] = tmp;<br>  }<br>  <br>  int[][] fill2(int x , int y , int a){<br>    int ret[][] = new int[x][y];<br>    for(int i = 0 ; i &lt; x ; i++)<br>      Arrays.fill(ret[i],a);<br>    return ret;<br>  }<br>  <br>  int[] fill(int size , int a){<br>    int ret[] = new int[size];<br>    Arrays.fill(ret,a);<br>    return ret;<br>  }<br>  <br>  int toInt(String s){<br>    return Integer.parseInt(s);<br>  }<br>  <br>  boolean out(int size , int x){<br>    return ( x&lt;0 || x &gt;= size);<br>  }<br>  static int MI = Integer.MAX_VALUE;<br>  <br>}<br> <br>class Tok extends StringTokenizer {<br>  public Tok(String s){<br>    super(s);<br>  }<br>  public Tok(String s, String de){<br>    super(s,de);<br>  }<br>  public Tok(String s , String de , boolean a){<br>    super(s,de,a);<br>  }<br>  public String next(){<br>    return nextToken();<br>  }<br>  public boolean more(){<br>    return hasMoreTokens();<br>  }<br>  public int count(){<br>    return countTokens();<br>  }<br>  public String[] toArray(){<br>    String ret [] = new String[count()];<br>    for(int i = 0 ; i &lt; ret.length ; i++) ret[i] = next();<br>    return ret;<br>  }<br>  <br>  public int[] toIntArray(){<br>    int ret[] = new int[count()];<br>    for(int i = 0 ; i &lt; ret.length ; i++)<br>      ret[i] = nextInt();<br>    return ret;<br>  }<br> <br>  <br>  public int nextInt(){<br>    return Integer.parseInt(next());<br>  }<br>}<br>    <br> <br>// Powered by PopsEdit<br>// Powered by CodeProcessor<br></td>