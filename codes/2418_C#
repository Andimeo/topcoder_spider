<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections;<br>using System.Text;<br><br><br>public class PolynomialMultiplier <br>{<br>  public struct term : IComparable<br>  {<br>    public int coeff;<br>    public int exp;<br>    public term(int e, int c)<br>    {<br>      coeff = c;<br>      exp = e;<br>    }<br><br>    public term multiply(term t)<br>    {<br>      return new term(this.exp + t.exp, this.coeff * t.coeff);<br>    }<br>    <br>    public term add(term t)<br>    {<br>      if(t.exp != exp) Console.WriteLine("t.exp != exp"); //uh oh!<br>      return new term(this.exp, this.coeff + t.coeff);<br>    }<br>    #region IComparable Members<br><br>    public int CompareTo(object obj)<br>    {<br>      term t = (term) obj;<br>      return t.exp - this.exp;<br>    }<br><br>    #endregion<br><br>    public override string ToString()<br>    {<br>      if(exp == 0)<br>        return coeff.ToString();<br>      if(exp == 1)<br>      {<br>        if(coeff == 1)<br>          return "x";<br>        else<br>          return coeff.ToString() + "*x";<br>      }<br>      else<br>      {<br>        if(coeff == 1)<br>          return "x^" + exp;<br>        else<br>          return coeff + "*x^" + exp;<br>      }<br>    }<br>  }<br><br>  public string product(string f1, string f2) <br>  {<br>    ArrayList a = parse(f1);<br>    ArrayList b = parse(f2);<br><br>    ArrayList ret = new ArrayList();<br><br>    for(int i=0; i&lt;a.Count; i++)<br>    {<br>      for(int j=0; j&lt;b.Count; j++)<br>      {<br>        ret.Add(((term)a[i]).multiply((term)b[j]));<br>      }<br>    }  <br>    <br>    for(int i=0; i&lt;ret.Count; i++)<br>    {<br>      for(int j=i+1; j&lt;ret.Count; j++)<br>      {<br>        if(((term)ret[i]).exp == ((term)ret[j]).exp)<br>        {<br>          ret[i] = ((term)ret[i]).add((term)ret[j]);<br>          ret.RemoveAt(j);<br>          j--;<br>        }<br>      }<br>    }<br>    //does this work?<br><br>    ret.Sort();<br>    <br>    StringBuilder r = new StringBuilder();<br>    r.Append(((term)ret[0]).ToString());<br>    for(int i=1; i&lt;ret.Count; i++)<br>    {<br>      r.Append(" + ");<br>      r.Append(((term)ret[i]).ToString());<br>    }<br>    return r.ToString();<br>  }<br><br>  public ArrayList parse(string f)<br>  {<br>    ArrayList ret = new ArrayList();<br>    string[] t = f.Split('+');<br>    for(int i=0; i&lt;t.Length; i++)<br>    {<br>      t[i] = t[i].Trim();<br>    }<br><br>    for(int i=0; i&lt;t.Length; i++)<br>    {<br>      if(t[i].IndexOf("x") == -1)<br>      {<br>        ret.Add(new term(0, int.Parse(t[i])));<br>      }<br>      else if(t[i].IndexOf("^") == -1)<br>      {<br>        int coeff;<br>        if(t[i][0] == 'x') coeff = 1;<br>        else coeff = int.Parse(t[i].Split('x')[0].Replace("*", ""));<br>        ret.Add(new term(1, coeff));<br>      }<br>      else<br>      {<br>        int coeff;<br>        if(t[i][0] == 'x') coeff = 1;<br>        else coeff = int.Parse(t[i].Split('x')[0].Replace("*", ""));<br>        int exp = int.Parse(t[i].Split('^')[1]);<br>        ret.Add(new term(exp, coeff));<br>      }<br>    }<br>    return ret;<br>  }<br><br>  <br>  <br><br><br>  public class Util <br>  {<br>    static int TestNum = 0;<br><br>    public static int gcd(int a,int b) <br>    {<br>      if (b==0) return a;<br>      return gcd(b,a%b);<br>    }<br><br>    public static bool AreEqual(object a, object b)<br>    {<br>      <br>      if(! (a is Array &amp;&amp; b is Array))<br>      {<br>        if(!a.Equals(b))<br>          Console.WriteLine("Test " + TestNum + " failed.  Expected: " + a.ToString() + "\nRecieved: " + b.ToString());<br>        TestNum++;<br>        return a.Equals(b);<br>      }<br><br>      Array x = (Array) a;<br>      Array y = (Array) b;<br><br>      if(x.Length != y.Length)<br>      {<br>        Console.WriteLine("Test Failed: Arrays not the same length");<br>        TestNum++;<br>        return false;<br>      }<br>      for(int i = 0; i &lt; x.Length; i++)<br>        if(! x.GetValue(i).Equals(y.GetValue(i)))<br>        {<br>          Console.WriteLine("Test " + TestNum + " failed.  Expected: " + x.ToString() + "\nRecieved: " + y.ToString());<br>          TestNum++;<br>          return false;<br>        }<br>      return true;<br>    }<br>  }<br><br>  public class IntArrayList : ArrayList<br>  {<br>    public IntArrayList() : base() {}  <br>    public IntArrayList(int[] arr) : base(arr)  {}<br>    public IntArrayList(int num) : base(num) {}<br>    public void AddRange(int[] arr)<br>    { base.AddRange(arr); }<br>    public new int this[int index]<br>    {<br>        get { return (int) base[index]; }<br>      set { base[index] = value; } <br>    }<br>    public new int[] ToArray()<br>    { return (int[]) base.ToArray(typeof(int)); }<br>  }<br><br>  public class StringArrayList : ArrayList<br>  {<br>      public StringArrayList() : base() {}  <br>    public StringArrayList(string[] arr) : base(arr)  {}<br>    public StringArrayList(int num) : base(num) {}<br>    public void AddRange(string[] arr)<br>    { base.AddRange(arr); }<br>    public new string this[int index]  <br>    {<br>      get {  return (string) base[index];}<br>      set { base[index] = value;} <br>    }<br>    public new string[] ToArray()  <br>    { return (string[]) base.ToArray(typeof(string)); }<br>  }<br>}<br><br><br>// Powered by FileEdit<br>// Powered by CodeProcessor<br></td>