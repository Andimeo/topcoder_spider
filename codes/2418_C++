<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;queue&gt;<br>#include &lt;set&gt;<br>#include &lt;map&gt;<br>#include &lt;stdio.h&gt;<br>#include &lt;stdlib.h&gt;<br>#include &lt;string.h&gt;<br>#include &lt;math.h&gt;<br>#include &lt;ctype.h&gt;<br>#include &lt;setjmp.h&gt;<br>using namespace std;<br>class PolynomialMultiplier {<br> public:<br>  int poly[64], poly2[64];<br>  int result[64];<br>  void prs(char*foo,int*poly) {<br>   char *bar;<br>   for (bar = strtok(foo, " "); bar; bar = strtok(NULL, " ")) {<br>    if (!strcmp(bar, "+")) continue;<br>    switch(strlen(bar)) {<br>     case 1:<br>      if (isdigit(bar[0])) poly[0]+=bar[0]-'0';<br>      else poly[1]++;<br>      break;<br>     case 3:<br>      if (bar[1] == '^') poly[bar[2]-'0']++;<br>      else poly[1] += bar[0]-'0';<br>      break;<br>     case 5:<br>      poly[bar[4]-'0'] += bar[0]-'0';<br>    }<br>   }<br>  }<br>  string product(string f1, string f2) {<br>   char foo[512];<br>   int i, j;<br>   char buf[512];<br>   memset(poly,0,sizeof(poly));<br>   memset(poly2,0,sizeof(poly2));<br>   strcpy(foo,f1.c_str());<br>   prs(foo,poly);<br>   strcpy(foo,f2.c_str());<br>   prs(foo,poly2);<br>   memset(result,0,sizeof(result));<br>   for (i = 0; i &lt; 16; i++)<br>    for (j = 0; j &lt; 16; j++)<br>     result[i+j] += poly[i]*poly2[j];<br>   memset(foo,0,sizeof(foo));<br>   for (i = 32; i &gt;= 0; i--) {<br>    if (!result[i]) continue;<br>    if (result[i] &gt; 1 &amp;&amp; i &gt; 1) sprintf(buf, "%i*x^%i", result[i], i);<br>    if (result[i] &gt; 1 &amp;&amp; i == 1) sprintf(buf, "%i*x", result[i]);<br>    if (result[i] &amp;&amp; i == 0) sprintf(buf, "%i", result[i]);<br>    if (result[i] == 1 &amp;&amp; i &gt; 1) sprintf(buf, "x^%i", i);<br>    if (result[i] == 1 &amp;&amp; i == 1) sprintf(buf, "x");<br>    if (foo[0]) strcat(foo, " + ");<br>    strcat(foo, buf);<br>   }<br>   return string(foo);<br>    <br>  }<br>};<br> <br>// Powered by PopsEdit<br></td>