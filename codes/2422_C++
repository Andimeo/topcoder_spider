<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;sstream&gt;<br>#include &lt;iostream&gt;<br>#include &lt;algorithm&gt;<br> <br>using namespace std;<br> <br>class ThirtyOne {<br>  <br>  int toNumber (string c)<br>  {<br>    if (c == "A") return 11;<br>    if (c == "K") return 10;<br>    if (c == "Q") return 10;<br>    if (c == "J") return 10;<br>    if (c == "10") return 10;<br>    if (c == "9") return 9;<br>    if (c == "8") return 8;<br>    if (c == "7") return 7;<br>    if (c == "6") return 6;<br>    if (c == "5") return 5;<br>    if (c == "4") return 4;<br>    if (c == "3") return 3;<br>    if (c == "2") return 2;<br>    return -31;<br>  }<br>  <br>  double getValue (string hand)<br>  {<br>    string card [3];<br>    int nums [3];<br>    vector&lt;double&gt; vals;<br>    vals.push_back (0);<br>    <br>    stringstream ss;<br>    ss &lt;&lt; hand;<br>    ss &gt;&gt; card[0] &gt;&gt; card[1] &gt;&gt; card[2];<br>    nums[0] = toNumber(card[0]);<br>    nums[1] = toNumber(card[1]);<br>    nums[2] = toNumber(card[2]);<br>    <br>    int i, j;<br>    for (i = 0; i &lt; 3; ++i)<br>    {<br>      int l = vals.size();<br>      for (j = 0; j &lt; l; ++j)<br>      {<br>        if (nums[i] != 11) vals[j] += nums[i];<br>        else <br>        {<br>          vals.push_back (vals[j] + 1);<br>          vals[j] += 11;<br>        }<br>      }<br>    }<br>    if (card[0] == card[1] &amp;&amp; card[0] == card[2]) vals.push_back (30.5);    <br>    <br>    double max = 0.0;<br>    for (i = 0; i &lt; vals.size(); ++i)<br>      if (vals[i] &gt; max &amp;&amp; vals[i] &lt;= 31.0) max = vals[i];<br>    return max;<br>  }<br>  <br>  public:<br>  int findWinner(vector &lt;string&gt; hands) {<br>    int i;<br>    vector&lt;double&gt; ret;<br>    for (i = 0; i &lt; hands.size(); ++i) ret.push_back (getValue(hands[i]));<br>    <br>    int maxi = 0;<br>    for (i = 1; i &lt; ret.size(); ++i)<br>      if (ret[i] &gt; ret[maxi]) maxi = i;<br>    return maxi;<br>  }<br>};<br> <br>// Powered by PopsEdit<br></td>