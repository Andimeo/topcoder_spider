<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections;<br><br>public class EigenVector {<br><br>    int[] multiply(int[,] A, int[] X)<br>    {<br>        //Console.WriteLine("{0}", A.GetLength(0));<br>        int[] Y = new int[A.GetLength(0)];<br>        for (int i = 0; i &lt; A.GetLength(0); i++)<br>        {<br>            Y[i] = 0;<br>            for (int j = 0; j &lt; A.GetLength(1); j++)<br>            { Y[i] = Y[i] + A[i, j] * X[j]; }<br><br>        }<br>        return Y;<br>    }<br><br>    public bool isValid(int[] X, int[] LX)<br>    {<br>        int nonZero = -1;<br>        for (int i = 0; i &lt; X.Length; i++) <br>            if (X[i] != 0)<br>            {<br>                nonZero = i;<br>                if (LX[i] == 0) return false;<br>            }<br>        if (nonZero == -1) return false;<br>        for (int i = 0; i &lt; X.Length; i++)<br>        {<br>            if(X[i]*LX[nonZero] != X[nonZero] *LX[i]) return false;<br>        }<br>        return true;<br>    }<br><br>    public int[] findEigenVector(string[] AS)<br>    {<br>        int[,] A = new int[AS.Length, AS.Length];<br><br>        for (int i = 0; i &lt; +AS.Length; i++)<br>        {<br>            string[] values = AS[i].Split(new char[] { ' ' });<br>            for (int ii = 0; ii &lt; values.Length; ii++)<br>            {<br>                A[i, ii] = Int32.Parse(values[ii]);<br>            }<br>        }<br>        switch (AS.Length)<br>        {<br>            case 2:<br>                return solve2(A);<br>            case 3:<br>                return solve3(A);<br>            case 4:<br>                return solve4(A);<br>            case 5:<br>                return solve5(A);<br>        }<br>        return null; <br>    }<br><br>    bool check(int[] cur, int[,] A)<br>    {<br>        int[] n = multiply(A, cur);<br>        if (isValid(cur, n)) return true;<br>        return false;<br>    }<br><br>    int getStartBound(int[] cur, int pos)<br>    {<br>        int sum = 0;<br>        for (int i = 0; i &lt; pos; i++)<br>        {<br>            sum += Math.Abs(cur[i]);<br>        }<br>        if (sum &gt; 0) return -9 + sum;<br>        return 0;<br>    }<br><br>    int getEndBound(int[] cur, int pos)<br>    {<br>        int sum = 0;<br>        for (int i = 0; i &lt; pos; i++)<br>        {<br>            sum += Math.Abs(cur[i]);<br>        }<br>        return 9 - sum;<br>    }<br><br>    int[] solve2(int[,] A)<br>    {<br>        int[] cur = new int[2];<br>        for (cur[0] = 0; cur[0] &lt;= 9; cur[0]++)<br>        {<br>            int start1 = getStartBound(cur, 1);<br>            int end1 = getEndBound(cur, 1);<br>            for (cur[1] = start1; cur[1] &lt;= end1; cur[1]++)<br>            {<br>                if (check(cur, A)) return cur;<br>            }<br>        }<br>        return null;<br>    }<br><br>    int[] solve3(int[,] A)<br>    {<br>        int[] cur = new int[3];<br>        for (cur[0] = 0; cur[0] &lt;= 9; cur[0]++)<br>        {<br>            int start1 = getStartBound(cur, 1);<br>            int end1 = getEndBound(cur, 1);<br>            for (cur[1] = start1; cur[1] &lt;= end1; cur[1]++)<br>            {<br>                int start2 = getStartBound(cur, 2);<br>                int end2 = getEndBound(cur, 2);<br>                for (cur[2] = start2; cur[2] &lt;= end2; cur[2]++)<br>                    if (check(cur, A)) return cur;<br>            }<br>        }<br>        return null;<br>    }<br><br>    int[] solve4(int[,] A)<br>    {<br>        int[] cur = new int[4];<br>        for (cur[0] = 0; cur[0] &lt;= 9; cur[0]++)<br>        {<br>            int start1 = getStartBound(cur, 1);<br>            int end1 = getEndBound(cur, 1);<br>            for (cur[1] = start1; cur[1] &lt;= end1; cur[1]++)<br>            {<br>                int start2 = getStartBound(cur, 2);<br>                int end2 = getEndBound(cur, 2);<br>                for (cur[2] = start2; cur[2] &lt;= end2; cur[2]++)<br>                {<br>                    int start3 = getStartBound(cur, 3);<br>                    int end3 = getEndBound(cur, 3);<br>                    for (cur[3] = start3; cur[3] &lt;= end3; cur[3]++)<br>                        if (check(cur, A)) return cur;<br>                }<br>            }<br>        }<br>        return null;<br>    }<br><br>    int[] solve5(int[,] A)<br>    {<br>        int[] cur = new int[5];<br>        for (cur[0] = 0; cur[0] &lt;= 9; cur[0]++)<br>        {<br>            int start1 = getStartBound(cur, 1);<br>            int end1 = getEndBound(cur, 1);<br>            for (cur[1] = start1; cur[1] &lt;= end1; cur[1]++)<br>            {<br>                int start2 = getStartBound(cur, 2);<br>                int end2 = getEndBound(cur, 2);<br>                for (cur[2] = start2; cur[2] &lt;= end2; cur[2]++)<br>                {<br>                    int start3 = getStartBound(cur, 3);<br>                    int end3 = getEndBound(cur, 3);<br>                    for (cur[3] = start3; cur[3] &lt;= end3; cur[3]++)<br>                    {<br>                        int start4 = getStartBound(cur, 4);<br>                        int end4 = getEndBound(cur, 4);<br>                        for (cur[4] = start4; cur[4] &lt;= end4; cur[4]++)<br>                            if (check(cur, A)) return cur;<br>                    }<br>                }<br>            }<br>        }<br>        return null;<br>    }<br>}<br><br><br>// Powered by FileEdit<br></td>