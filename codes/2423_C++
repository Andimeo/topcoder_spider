<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;iostream&gt;<br>#include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;functional&gt;<br>#include &lt;numeric&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cmath&gt;<br>#include &lt;queue&gt;<br>using namespace std;<br>#define foreach(i,c) for(typeof((c).begin()) i=(c).begin(); i!=(c).end(); i++)<br>typedef vector&lt;int&gt; VI;  typedef vector&lt;vector&lt;int&gt; &gt; VVI;<br>typedef vector&lt;string&gt; VS;  typedef vector&lt;vector&lt;string&gt; &gt; VVS;<br>typedef signed long long i64;  typedef unsigned long long u64;<br><br>vector&lt;string&gt; tokenize(string s, string ch) {<br>  vector&lt;string&gt; ret;<br>  for( int p = 0, p2; p &lt; s.size(); p = p2+1 ) {<br>    p2 = s.find_first_of(ch, p);<br>    if( p2 == -1 ) p2 = s.size();<br>    if( p2-p &gt; 0 ) ret.push_back( s.substr(p, p2-p) );<br>  }<br>  return ret;<br>}<br><br>vector&lt;int&gt; tokint(string s, string ch) {<br>  vector&lt;int&gt; ret;<br>  vector&lt;string&gt; p = tokenize(s, ch);<br>  for( int i = 0; i &lt; p.size(); i++ )<br>    ret.push_back( atoi(p[i].c_str()) );<br>  return ret;<br>}<br><br>vector&lt;vector&lt;int&gt; &gt; tokmat(vector&lt;string&gt; s, string ch) {<br>  vector&lt;vector&lt;int&gt; &gt; ret;<br>  for( int i = 0; i &lt; s.size(); i++ )<br>    ret.push_back( tokint(s[i], ch) );<br>  return ret;<br>}<br><br>VVI A;<br>VI v;<br>int doit(int L, int n, int first) {<br>  if( n == A.size() ) {<br>    int totn = 0, totd = 0;<br>    for( int j = 0; j &lt; A.size(); j++ ) {<br>      int tot = 0;<br>      for( int i = 0; i &lt; A.size(); i++ ) tot += A[j][i]*v[i];<br>      if( !v[j] &amp;&amp; tot ) return 0;<br>      if( v[j] &amp;&amp; !tot ) return 0;<br>      if( !v[j] &amp;&amp; !tot ) continue;<br>      if( totd == 0 ) {totn = v[j]; totd = tot;}<br>      if( tot*totn != totd*v[j] ) return 0;<br>    }<br>    return 1;<br>  }<br>  if( n == A.size()-1 ) {<br>    if( !first ) {<br>      v[n] = -L;<br>      if( doit(0, n+1, 0) ) return 1;<br>    }<br>    v[n] = L;<br>    if( doit(0, n+1, 0) ) return 1;<br>    return 0;<br>  }<br>  int s = -L, e = L;<br>  if( first ) s = 0;<br>  for( v[n] = s; v[n] &lt;= e; v[n]++ )<br>    if( doit(L-abs(v[n]), n+1, first &amp;&amp; !v[n]) ) return 1;<br>  return 0;<br>}<br><br>class EigenVector {<br>public:<br>vector &lt;int&gt; findEigenVector(vector &lt;string&gt; a) {<br>  A = tokmat(a, " ");<br>  v = VI(A.size(), 0);<br>  int i, j, k, x, y, z, n;<br><br>  for( n = 1; n &lt;= 9; n++ )<br>    if( doit(n, 0, 1) ) break;<br>  return v;<br>}<br>};<br></td>