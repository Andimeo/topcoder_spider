<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;algorithm&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cmath&gt;<br>#include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;cctype&gt;<br>#include &lt;iostream&gt;<br>#include &lt;sstream&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;set&gt;<br>using namespace std;<br><br>#define REP(i,n) for(int i=0;i&lt;(n);++i)<br>#define FOR(i,a,b) for(int i=(a);i&lt;=(b);++i)<br>#define FORD(i,a,b) for(int i=(a);i&gt;=(b);--i)<br>#define FOREACH(it,c) for(typeof((c).begin()) it=(c).begin();it!=(c).end();++it)<br><br>const int INF = 1000000000;<br>typedef long long LL;<br>typedef vector&lt;int&gt; VI;<br>template&lt;class T&gt; inline int size(const T&amp;c) { return c.size(); }<br>string i2s(int x) {<br>  char buf[20];<br>  sprintf(buf,"%d",x);<br>  return buf;<br>}<br><br>////////////////////////////////////////////////////////////<br>struct Coin {<br>  int v,a,b;<br>};<br><br>vector&lt;Coin&gt; coins;<br>vector&lt;set&lt;int&gt; &gt; poss;<br><br><br>struct CoinWeight {<br>  // MAIN<br>  int possibleValues(int weight, vector &lt;string&gt; cc) {<br>    poss.resize(weight+1);<br>    coins.resize(size(cc));<br>    REP(i,size(cc)) {<br>      istringstream is(cc[i]);<br>      is &gt;&gt; coins[i].v &gt;&gt; coins[i].a &gt;&gt; coins[i].b;<br>    }<br>    poss[0].insert(0);<br>    FOR(w,1,weight) {<br>      FOREACH(it,coins) FOR(wc,it-&gt;a,it-&gt;b) {<br>        if(wc&lt;=w) {<br>          set&lt;int&gt; &amp;ss = poss[w-wc];<br>          set&lt;int&gt; &amp;ss2 = poss[w];<br>          FOREACH(it2,ss) ss2.insert(*it2 + it-&gt;v);<br>        }<br>      }<br>    }<br>    return size(poss[weight]);<br>  }<br>};<br><br><br><br>// Powered by FileEdit<br></td>