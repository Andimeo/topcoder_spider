<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;iostream&gt;<br>#include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;functional&gt;<br>#include &lt;numeric&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cmath&gt;<br>#include &lt;queue&gt;<br>using namespace std;<br>typedef vector&lt;int&gt; VI;  typedef vector&lt;vector&lt;int&gt; &gt; VVI;<br>typedef vector&lt;string&gt; VS;  typedef vector&lt;vector&lt;string&gt; &gt; VVS;<br>typedef signed long long i64;  typedef unsigned long long u64;<br><br>VI px(1), py(1);<br>int d[21][21];<br>int seen[50][50];<br><br>VS g;<br>int carry;<br>int best[21][6][6][6][6][6];<br><br>class WaterBot {<br>public:<br>int minTime(vector &lt;string&gt; a, int b) {<br>  carry = b;<br>  g = a;<br>  int i, j, k, x, y, z, n;<br>  int ret;<br>  VI p;<br><br>  for( y = 0; y &lt; g.size(); y++ )<br>  for( x = 0; x &lt; g[0].size(); x++ ) {<br>    if( g[y][x] == 'R' ) {<br>      px[0] = x; py[0] = y;<br>      g[y][x] = '.';<br>    } else if( isdigit(g[y][x]) ) {<br>      z = g[y][x]-'0';<br>      g[y][x] = p.size()+'0';<br>      p.push_back(z);<br>    }<br>  }<br>  while( p.size() &lt; 4 ) p.push_back(0);<br>  for( y = 0; y &lt; g.size(); y++ )<br>  for( x = 0; x &lt; g[0].size(); x++ ) {<br>    if( g[y][x] != '.' ) continue;<br>    if( x &gt; 0 &amp;&amp; g[y][x-1] != '.' ||<br>      y &gt; 0 &amp;&amp; g[y-1][x] != '.' ||<br>      x &lt; g[0].size()-1 &amp;&amp; g[y][x+1] != '.' ||<br>      y &lt; g.size()-1 &amp;&amp; g[y+1][x] != '.' ) {<br>      px.push_back(x);<br>      py.push_back(y);<br>    }<br>  }<br>  for( i = 0; i &lt; px.size(); i++ )<br>  for( j = 0; j &lt; px.size(); j++ ) {<br>    d[i][j] = 1000000;<br>    memset(seen, 0, sizeof(seen));<br>    vector&lt;pair&lt;int, int&gt; &gt; q;<br>    q.push_back(make_pair(px[i], py[i]));<br>    seen[py[i]][px[i]] = 1;<br>    n = 0;<br>    while( !q.empty() ) {<br>      vector&lt;pair&lt;int, int&gt; &gt; q2;<br>      while( !q.empty() ) {<br>        x = q.back().first; y = q.back().second; q.pop_back();<br>        if( x == px[j] &amp;&amp; y == py[j] ) {d[i][j] = n; goto done;}<br>        for( int dx = -1; dx &lt;= 1; dx++ )<br>        for( int dy = -1; dy &lt;= 1; dy++ )<br>          if( abs(dx)+abs(dy) == 1 )<br>            if( x+dx &gt;= 0 &amp;&amp; y+dy &gt;= 0 &amp;&amp;<br>              x+dx &lt; g[0].size() &amp;&amp; y+dy &lt; g.size() &amp;&amp;<br>              !seen[y+dy][x+dx] &amp;&amp;<br>              g[y+dy][x+dx] == '.' ) {<br>              q2.push_back(make_pair(x+dx, y+dy));<br>              seen[y+dy][x+dx] = 1;<br>            }<br>      }<br>      q = q2;<br>      q2.clear();<br>      n++;<br>    }<br>done:  ;<br>  }<br>  memset(best, 100, sizeof(best));<br>  p.insert(p.begin(), 0);<br>  p.push_back(0);<br>  p.push_back(0);<br>  priority_queue&lt;VI&gt; q;<br>  q.push(p);<br>  best[p[5]][p[6]][p[1]][p[2]][p[3]][p[4]] = 0;<br>  while( !q.empty() ) {<br>    p = q.top(); q.pop();<br>    if( -p[0] &gt; best[p[5]][p[6]][p[1]][p[2]][p[3]][p[4]] ) continue;<br>    if( p[1]+p[2]+p[3]+p[4] == 0 ) return -p[0];<br>    for( i = 1; i &lt; px.size(); i++ )<br>    if( d[p[5]][i] &gt; 0 &amp;&amp; d[p[5]][i] &lt; 1000000 ) {<br>      VI p2 = p;<br>      p2[5] = i;<br>      p2[0] -= d[p[5]][i];<br>      if( -p2[0] &lt; best[p2[5]][p2[6]][p2[1]][p2[2]][p2[3]][p2[4]] ) {<br>        q.push(p2);<br>        best[p2[5]][p2[6]][p2[1]][p2[2]][p2[3]][p2[4]] = -p2[0];<br>      }<br>    }<br>    x = px[p[5]]; y = py[p[5]];<br>//cout &lt;&lt; -p[0] &lt;&lt; ' ' &lt;&lt; p[1] &lt;&lt; ' ' &lt;&lt; p[2] &lt;&lt; ' ' &lt;&lt; p[3] &lt;&lt; ' ' &lt;&lt; p[4] &lt;&lt; ' ' &lt;&lt; '(' &lt;&lt; x &lt;&lt; ',' &lt;&lt; y &lt;&lt; ')' &lt;&lt; ' ' &lt;&lt; p[6] &lt;&lt; '\n';<br>    for( int dx = -1; dx &lt;= 1; dx++ )<br>    for( int dy = -1; dy &lt;= 1; dy++ ) if( abs(dx)+abs(dy) == 1 ) {<br>      if( x+dx &lt; 0 || x+dx &gt;= g[0].size() ||<br>        y+dy &lt; 0 || y+dy &gt;= g.size() ) continue;<br>      if( g[y+dy][x+dx] == 'W' ) {<br>        if( p[6] == carry ) continue;<br>        VI p2 = p;<br>        p2[6]++;<br>        p2[0]--;<br>        if( -p2[0] &lt; best[p2[5]][p2[6]][p2[1]][p2[2]][p2[3]][p2[4]] ) {<br>          q.push(p2);<br>          best[p2[5]][p2[6]][p2[1]][p2[2]][p2[3]][p2[4]] = -p2[0];<br>        }<br>      } else if( isdigit(g[y+dy][x+dx]) ) {<br>        z = g[y+dy][x+dx]-'0';<br>        if( !p[z+1] ) continue;<br>        if( !p[6] ) continue;<br>        VI p2 = p;<br>        p2[6]--;<br>        p2[z+1]--;<br>        p2[0]--;<br>        if( -p2[0] &lt; best[p2[5]][p2[6]][p2[1]][p2[2]][p2[3]][p2[4]] ) {<br>          q.push(p2);<br>          best[p2[5]][p2[6]][p2[1]][p2[2]][p2[3]][p2[4]] = -p2[0];<br>        }<br>      }<br>    }<br>  }<br>  return -1;<br>}<br>};<br></td>