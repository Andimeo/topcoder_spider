<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;queue&gt;<br>#include &lt;set&gt;<br>#include &lt;map&gt;<br>#include &lt;sstream&gt;<br>#include &lt;iostream&gt;<br>#include &lt;utility&gt;<br>#include &lt;stdio.h&gt;<br>#include &lt;stdlib.h&gt;<br>#include &lt;string.h&gt;<br>#include &lt;math.h&gt;<br>#include &lt;setjmp.h&gt;<br>#include &lt;ctype.h&gt;<br> <br>#define ll long long<br>#define ld long double<br>#define EPS 1e-9<br>using namespace std;<br>int yes[16][16];<br> <br>class GeneralChess {<br> public:<br> vector &lt;string&gt; attackPositions(vector &lt;string&gt; pieces) {<br>  <br>// BEGIN CUT HERE<br>    static bool s_FirstTime = true; if (s_FirstTime) { s_FirstTime = false; run_test(-1); }<br>// END CUT HERE<br> <br>  int i, j, k;<br>  int x, y, x0, y0;<br>  memset(yes, 1, sizeof(yes));<br>  sscanf(pieces[0].c_str(), "%i,%i", &amp;x0, &amp;y0); x0 -= 4; y0 -= 4;<br>  for (i = 0; i &lt; pieces.size(); i++) {<br>   sscanf(pieces[i].c_str(), "%i,%i", &amp;j, &amp;k); j-=x0; k-=y0;<br>   for (x = 0; x &lt; 8; x++)<br>    for (y = 0; y &lt; 8; y++)<br>     if (abs(x-j) &amp;&amp; abs(y-k) &amp;&amp; (abs(x-j) + abs(y-k) == 3)); else yes[x][y] = 0;<br>  }<br>  vector&lt;string&gt; vs;<br>  for (i = 0; i &lt; 8; i++)<br>   for (j = 0; j &lt; 8; j++)<br>    if (yes[i][j]) {<br>     char bla[64];<br>     sprintf(bla, "%i,%i", i+x0, j+y0);<br>     vs.push_back(string(bla));<br>    }<br>  return vs;<br> }<br> <br>// BEGIN CUT HERE<br>  public:<br>  void run_test(int Case) { if ((Case == -1) || (Case == 0)) test_case_0(); if ((Case == -1) || (Case == 1)) test_case_1(); if ((Case == -1) || (Case == 2)) test_case_2(); if ((Case == -1) || (Case == 3)) test_case_3(); }<br>  private:<br>  template &lt;typename T&gt; string print_array(const vector&lt;T&gt; &amp;V) { ostringstream os; os &lt;&lt; "{ "; for (typename vector&lt;T&gt;::const_iterator iter = V.begin(); iter != V.end(); ++iter) os &lt;&lt; '\"' &lt;&lt; *iter &lt;&lt; "\","; os &lt;&lt; " }"; return os.str(); }<br>  void verify_case(int Case, const vector &lt;string&gt; &amp;Expected, const vector &lt;string&gt; &amp;Received) { cerr &lt;&lt; "Test Case #" &lt;&lt; Case &lt;&lt; "..."; if (Expected == Received) cerr &lt;&lt; "PASSED" &lt;&lt; endl; else { cerr &lt;&lt; "FAILED" &lt;&lt; endl; cerr &lt;&lt; "\tExpected: " &lt;&lt; print_array(Expected) &lt;&lt; endl; cerr &lt;&lt; "\tReceived: " &lt;&lt; print_array(Received) &lt;&lt; endl; } }<br>  void test_case_0() { string Arr0[] = {"0,0"}; vector &lt;string&gt; Arg0(Arr0, Arr0 + (sizeof(Arr0) / sizeof(Arr0[0]))); string Arr1[] = { "-2,-1",  "-2,1",  "-1,-2",  "-1,2",  "1,-2",  "1,2",  "2,-1",  "2,1" }; vector &lt;string&gt; Arg1(Arr1, Arr1 + (sizeof(Arr1) / sizeof(Arr1[0]))); verify_case(0, Arg1, attackPositions(Arg0)); }<br>  void test_case_1() { string Arr0[] = {"2,1", "-1,-2"}; vector &lt;string&gt; Arg0(Arr0, Arr0 + (sizeof(Arr0) / sizeof(Arr0[0]))); string Arr1[] = { "0,0",  "1,-1" }; vector &lt;string&gt; Arg1(Arr1, Arr1 + (sizeof(Arr1) / sizeof(Arr1[0]))); verify_case(1, Arg1, attackPositions(Arg0)); }<br>  void test_case_2() { string Arr0[] = {"0,0", "2,1"}; vector &lt;string&gt; Arg0(Arr0, Arr0 + (sizeof(Arr0) / sizeof(Arr0[0]))); string Arr1[] = { }; vector &lt;string&gt; Arg1(Arr1, Arr1 + (sizeof(Arr1) / sizeof(Arr1[0]))); verify_case(2, Arg1, attackPositions(Arg0)); }<br>  void test_case_3() { string Arr0[] = {"-1000,1000", "-999,999", "-999,997"}; vector &lt;string&gt; Arg0(Arr0, Arr0 + (sizeof(Arr0) / sizeof(Arr0[0]))); string Arr1[] = { "-1001,998" }; vector &lt;string&gt; Arg1(Arr1, Arr1 + (sizeof(Arr1) / sizeof(Arr1[0]))); verify_case(3, Arg1, attackPositions(Arg0)); }<br> <br>// END CUT HERE<br> <br>};<br> <br>// Powered by PopsEdit<br>// Powered by TZTester 1.01 [25-Feb-2003]<br>// Powered by CodeProcessor<br></td>