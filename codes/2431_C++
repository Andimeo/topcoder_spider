<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;sstream&gt;<br>#include &lt;iostream&gt;<br>#include &lt;utility&gt;<br>#include &lt;stdio.h&gt;<br>#include &lt;stdlib.h&gt;<br>#include &lt;string.h&gt;<br>#include &lt;math.h&gt;<br>#include &lt;setjmp.h&gt;<br>#include &lt;ctype.h&gt;<br> <br>#define ll long long<br>#define ld long double<br>#define EPS 1e-9<br>using namespace std;<br> <br>class Paths {<br> public:<br> int secondBest(vector &lt;string&gt; graph, int from, int to) {<br>  <br>// BEGIN CUT HERE<br>    static bool s_FirstTime = true; if (s_FirstTime) { s_FirstTime = false; run_test(-1); }<br>// END CUT HERE<br> <br>  int best[64][2];<br>  memset(best, 1, sizeof(best));<br>  int i, j, k;<br>  int n = graph.size();<br>  best[from][0] = 0;<br>  int adj[64][64];<br>  for (i=0;i&lt;n;i++)<br>   for (j=0;j&lt;n;j++)<br>    adj[i][j] = graph[i][j] != 'X' ? graph[i][j] - '0' : 0x1010101;<br>  for (i = 0; i &lt; n*2; i++)<br>   for (j = 0; j &lt; n; j++)<br>    for (k = 0; k &lt; n; k++) {<br>     if (best[j][0] + adj[j][k] &lt; best[k][0]) {<br>      best[k][1] = best[k][0];<br>      best[k][0] = best[j][0] + adj[j][k];<br>     }<br>     else if (best[j][0] + adj[j][k] &lt; best[k][1] &amp;&amp; best[j][0] + adj[j][k] &gt; best[k][0]) {<br>      best[k][1] = best[j][0] + adj[j][k];<br>     }<br>     if (best[j][1] + adj[j][k] &lt; best[k][1] &amp;&amp; best[j][1] + adj[j][k] &gt; best[k][0])<br>      best[k][1] = best[j][1] + adj[j][k];<br>    }<br>  return best[to][1] &lt; 0x100000 ? best[to][1] : -1;<br>     <br> }<br> <br>// BEGIN CUT HERE<br>  public:<br>  void run_test(int Case) { if ((Case == -1) || (Case == 0)) test_case_0(); if ((Case == -1) || (Case == 1)) test_case_1(); if ((Case == -1) || (Case == 2)) test_case_2(); if ((Case == -1) || (Case == 3)) test_case_3(); if ((Case == -1) || (Case == 4)) test_case_4(); if ((Case == -1) || (Case == 5)) test_case_5(); }<br>  private:<br>  template &lt;typename T&gt; string print_array(const vector&lt;T&gt; &amp;V) { ostringstream os; os &lt;&lt; "{ "; for (typename vector&lt;T&gt;::const_iterator iter = V.begin(); iter != V.end(); ++iter) os &lt;&lt; '\"' &lt;&lt; *iter &lt;&lt; "\","; os &lt;&lt; " }"; return os.str(); }<br>  void verify_case(int Case, const int &amp;Expected, const int &amp;Received) { cerr &lt;&lt; "Test Case #" &lt;&lt; Case &lt;&lt; "..."; if (Expected == Received) cerr &lt;&lt; "PASSED" &lt;&lt; endl; else { cerr &lt;&lt; "FAILED" &lt;&lt; endl; cerr &lt;&lt; "\tExpected: \"" &lt;&lt; Expected &lt;&lt; '\"' &lt;&lt; endl; cerr &lt;&lt; "\tReceived: \"" &lt;&lt; Received &lt;&lt; '\"' &lt;&lt; endl; } }<br>  void test_case_0() { string Arr0[] = {"01111",<br> "10111",<br> "11011",<br> "11101",<br> "11110"}; vector &lt;string&gt; Arg0(Arr0, Arr0 + (sizeof(Arr0) / sizeof(Arr0[0]))); int Arg1 = 0; int Arg2 = 0; int Arg3 = 2; verify_case(0, Arg3, secondBest(Arg0, Arg1, Arg2)); }<br>  void test_case_1() { string Arr0[] = {"1"}; vector &lt;string&gt; Arg0(Arr0, Arr0 + (sizeof(Arr0) / sizeof(Arr0[0]))); int Arg1 = 0; int Arg2 = 0; int Arg3 = 1; verify_case(1, Arg3, secondBest(Arg0, Arg1, Arg2)); }<br>  void test_case_2() { string Arr0[] = {"X1119",<br> "1X119",<br> "11X19",<br> "111X1",<br> "9111X"}; vector &lt;string&gt; Arg0(Arr0, Arr0 + (sizeof(Arr0) / sizeof(Arr0[0]))); int Arg1 = 0; int Arg2 = 4; int Arg3 = 3; verify_case(2, Arg3, secondBest(Arg0, Arg1, Arg2)); }<br>  void test_case_3() { string Arr0[] = {"X1110",<br> "1X111",<br> "11111",<br> "111X1",<br> "0111X"}; vector &lt;string&gt; Arg0(Arr0, Arr0 + (sizeof(Arr0) / sizeof(Arr0[0]))); int Arg1 = 0; int Arg2 = 4; int Arg3 = 2; verify_case(3, Arg3, secondBest(Arg0, Arg1, Arg2)); }<br>  void test_case_4() { string Arr0[] = {"X9XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",<br> "XX9XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",<br> "X9X9XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",<br> "X99X9XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",<br> "X999X9XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",<br> "X9999X9XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",<br> "X99999X9XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",<br> "X999999X9XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",<br> "X9999999X9XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",<br> "X99999999X9XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",<br> "X999999999X9XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",<br> "X9999999999X9XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",<br> "X99999999999X9XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",<br> "X999999999999X9XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",<br> "X9999999999999X9XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",<br> "X99999999999999X9XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",<br> "X999999999999999X9XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",<br> "X9999999999999999X9XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",<br> "X99999999999999999X9XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",<br> "X999999999999999999X9XXXXXXXXXXXXXXXXXXXXXXXXXXXXX",<br> "X9999999999999999999X9XXXXXXXXXXXXXXXXXXXXXXXXXXXX",<br> "X99999999999999999999X9XXXXXXXXXXXXXXXXXXXXXXXXXXX",<br> "X999999999999999999999X9XXXXXXXXXXXXXXXXXXXXXXXXXX",<br> "X9999999999999999999999X9XXXXXXXXXXXXXXXXXXXXXXXXX",<br> "X99999999999999999999999X9XXXXXXXXXXXXXXXXXXXXXXXX",<br> "X999999999999999999999999X9XXXXXXXXXXXXXXXXXXXXXXX",<br> "X9999999999999999999999999X9XXXXXXXXXXXXXXXXXXXXXX",<br> "X99999999999999999999999999X9XXXXXXXXXXXXXXXXXXXXX",<br> "X999999999999999999999999999X9XXXXXXXXXXXXXXXXXXXX",<br> "X9999999999999999999999999999X9XXXXXXXXXXXXXXXXXXX",<br> "X99999999999999999999999999999X9XXXXXXXXXXXXXXXXXX",<br> "X999999999999999999999999999999X9XXXXXXXXXXXXXXXXX",<br> "X9999999999999999999999999999999X9XXXXXXXXXXXXXXXX",<br> "X99999999999999999999999999999999X9XXXXXXXXXXXXXXX",<br> "X999999999999999999999999999999999X9XXXXXXXXXXXXXX",<br> "X9999999999999999999999999999999999X9XXXXXXXXXXXXX",<br> "X99999999999999999999999999999999999X9XXXXXXXXXXXX",<br> "X999999999999999999999999999999999999X9XXXXXXXXXXX",<br> "X9999999999999999999999999999999999999X9XXXXXXXXXX",<br> "X99999999999999999999999999999999999999X9XXXXXXXXX",<br> "X999999999999999999999999999999999999999X9XXXXXXXX",<br> "X9999999999999999999999999999999999999999X9XXXXXXX",<br> "X99999999999999999999999999999999999999999X9XXXXXX",<br> "X999999999999999999999999999999999999999999X9XXXXX",<br> "X9999999999999999999999999999999999999999999X9XXXX",<br> "X99999999999999999999999999999999999999999999X9XXX",<br> "X999999999999999999999999999999999999999999999X9XX",<br> "X9999999999999999999999999999999999999999999999X9X",<br> "X99999999999999999999999999999999999999999999999X9",<br> "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"}; vector &lt;string&gt; Arg0(Arr0, Arr0 + (sizeof(Arr0) / sizeof(Arr0[0]))); int Arg1 = 0; int Arg2 = 49; int Arg3 = 459; verify_case(4, Arg3, secondBest(Arg0, Arg1, Arg2)); }<br>  void test_case_5() { string Arr0[] = {"X"}; vector &lt;string&gt; Arg0(Arr0, Arr0 + (sizeof(Arr0) / sizeof(Arr0[0]))); int Arg1 = 0; int Arg2 = 0; int Arg3 = -1; verify_case(5, Arg3, secondBest(Arg0, Arg1, Arg2)); }<br> <br>// END CUT HERE<br> <br>};<br> <br>// Powered by PopsEdit<br>// Powered by TZTester 1.01 [25-Feb-2003]<br>// Powered by CodeProcessor<br></td>