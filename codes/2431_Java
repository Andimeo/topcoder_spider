<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>class Pair implements Comparable{<br>  int x, y;<br>  Pair(int xx, int yy){x = xx; y = yy;}<br>  public int hashCode(){<br>    return x*17+y;<br>  }<br>  public boolean equals(Object o){<br>    Pair p = (Pair)o;<br>    return p.x == x &amp;&amp; p.y == y;<br>  }<br>  <br>  public int compareTo(Object o){<br>    Pair p = (Pair)o;<br>    if(p.x != x) return x - p.x;<br>    return y - p.y;<br>  }<br>}<br> <br>public class Paths {<br>  public int secondBest(String[] graph, int from, int to) {<br>    int INF = 10000;<br>    int len = graph.length;<br>    int[] best = new int[len];<br>    Arrays.fill(best, INF);<br>    int[] second = new int[len];<br>    Arrays.fill(second, INF);<br>    best[from] = 0;<br>    LinkedList que = new LinkedList();<br>    que.add(new Pair(from,0));<br>    while(que.size()&gt;0){<br>      Pair p = (Pair)que.removeFirst();<br>      int pos = p.x;<br>      int cost = p.y;<br>      for(int i = 0; i &lt; len; i++){<br>        if(graph[pos].charAt(i)=='X')continue;<br>        int c = graph[pos].charAt(i)-'0'+cost;<br>        if(c &lt; best[i]){<br>          second[i] = best[i];<br>          best[i] = c;<br>          que.add(new Pair(i,c));<br>        }else if(c != best[i] &amp;&amp; c &lt; second[i]){<br>          second[i] = c;<br>          que.add(new Pair(i,c));<br>        }<br>      }<br>    }<br>    return second[to]==INF?-1:second[to];<br>  }<br> <br> <br>// ##################### NO POINT LOOKING BELOW, TESTCODE ONLY ####################<br> <br> <br>/** begin cut - don't modify this line*/<br>  public static void main(String[] a) {<br>    new Paths().runTestCase(0);<br>    new Paths().runTestCase(1);<br>    new Paths().runTestCase(2);<br>    new Paths().runTestCase(3);<br>    new Paths().runTestCase(4);<br>    new Paths().runTestCase(5);<br>  }<br> <br>  public void runTestCase(int nbr) {<br>    switch(nbr) {<br>      case 0 : {<br>        checkOutput(secondBest(new String[] {"01111",  "10111",  "11011",  "11101",  "11110"}, 0, 0), 2, 0); break;<br>      }<br>      case 1 : {<br>        checkOutput(secondBest(new String[] {"1"}, 0, 0), 1, 1); break;<br>      }<br>      case 2 : {<br>        checkOutput(secondBest(new String[] {"X1119",  "1X119",  "11X19",  "111X1",  "9111X"}, 0, 4), 3, 2); break;<br>      }<br>      case 3 : {<br>        checkOutput(secondBest(new String[] {"X1110",  "1X111",  "11111",  "111X1",  "0111X"}, 0, 4), 2, 3); break;<br>      }<br>      case 4 : {<br>        checkOutput(secondBest(new String[] {"X9XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",  "XX9XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",  "X9X9XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",  "X99X9XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",  "X999X9XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",  "X9999X9XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",  "X99999X9XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",  "X999999X9XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",  "X9999999X9XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",  "X99999999X9XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",  "X999999999X9XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",  "X9999999999X9XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",  "X99999999999X9XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",  "X999999999999X9XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",  "X9999999999999X9XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",  "X99999999999999X9XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",  "X999999999999999X9XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",  "X9999999999999999X9XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",  "X99999999999999999X9XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",  "X999999999999999999X9XXXXXXXXXXXXXXXXXXXXXXXXXXXXX",  "X9999999999999999999X9XXXXXXXXXXXXXXXXXXXXXXXXXXXX",  "X99999999999999999999X9XXXXXXXXXXXXXXXXXXXXXXXXXXX",  "X999999999999999999999X9XXXXXXXXXXXXXXXXXXXXXXXXXX",  "X9999999999999999999999X9XXXXXXXXXXXXXXXXXXXXXXXXX",  "X99999999999999999999999X9XXXXXXXXXXXXXXXXXXXXXXXX",  "X999999999999999999999999X9XXXXXXXXXXXXXXXXXXXXXXX",  "X9999999999999999999999999X9XXXXXXXXXXXXXXXXXXXXXX",  "X99999999999999999999999999X9XXXXXXXXXXXXXXXXXXXXX",  "X999999999999999999999999999X9XXXXXXXXXXXXXXXXXXXX",  "X9999999999999999999999999999X9XXXXXXXXXXXXXXXXXXX",  "X99999999999999999999999999999X9XXXXXXXXXXXXXXXXXX",  "X999999999999999999999999999999X9XXXXXXXXXXXXXXXXX",  "X9999999999999999999999999999999X9XXXXXXXXXXXXXXXX",  "X99999999999999999999999999999999X9XXXXXXXXXXXXXXX",  "X999999999999999999999999999999999X9XXXXXXXXXXXXXX",  "X9999999999999999999999999999999999X9XXXXXXXXXXXXX",  "X99999999999999999999999999999999999X9XXXXXXXXXXXX",  "X999999999999999999999999999999999999X9XXXXXXXXXXX",  "X9999999999999999999999999999999999999X9XXXXXXXXXX",  "X99999999999999999999999999999999999999X9XXXXXXXXX",  "X999999999999999999999999999999999999999X9XXXXXXXX",  "X9999999999999999999999999999999999999999X9XXXXXXX",  "X99999999999999999999999999999999999999999X9XXXXXX",  "X999999999999999999999999999999999999999999X9XXXXX",  "X9999999999999999999999999999999999999999999X9XXXX",  "X99999999999999999999999999999999999999999999X9XXX",  "X999999999999999999999999999999999999999999999X9XX",  "X9999999999999999999999999999999999999999999999X9X",  "X99999999999999999999999999999999999999999999999X9",  "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"}, 0, 49), 459, 4); break;<br>      }<br>      case 5 : {<br>        checkOutput(secondBest(new String[] {"X"}, 0, 0), -1, 5); break;<br>      }<br>    }<br>  }<br>  final void checkOutput(int mine, int them, int nbr) {<br>    boolean success = (mine==them);<br>    StringBuffer out = new StringBuffer();<br>    out.append("Example ");<br>    out.append((nbr+1));<br>    out.append(" - ");<br>    out.append(success ? "success" : "failure   ");<br>    if(!success) {<br>      out.append("Got: ");<br>      out.append(mine);<br>      out.append(", Expected: ");<br>      out.append(them);<br>    }<br>    System.out.println(out);<br>  }<br>  final void checkOutput(long mine, long them, int nbr) {<br>    boolean success = (mine==them);<br>    StringBuffer out = new StringBuffer();<br>    out.append("Example ");<br>    out.append((nbr+1));<br>    out.append(" - ");<br>    out.append(success ? "success" : "failure   ");<br>    if(!success) {<br>      out.append("Got: ");<br>      out.append(mine);<br>      out.append(", Expected: ");<br>      out.append(them);<br>    }<br>    System.out.println(out);<br>  }<br>  final void checkOutput(double mine, double them, int nbr) {<br>    boolean success = doubleCompare(mine, them);<br>    StringBuffer out = new StringBuffer();<br>    out.append("Example ");<br>    out.append((nbr+1));<br>    out.append(" - ");<br>    out.append(success ? "success" : "failure   ");<br>    if(!success) {<br>      out.append("Got: ");<br>      out.append(mine);<br>      out.append(", Expected: ");<br>      out.append(them);<br>    }<br>    System.out.println(out);<br>  }<br>  private static boolean doubleCompare(double expected, double result){<br>    double MAX_DOUBLE_ERROR = 1E-9;<br>    if(Double.isNaN(expected)){<br>      return Double.isNaN(result);<br>    }else if(Double.isInfinite(expected)){<br>      if(expected &gt; 0){<br>        return result &gt; 0 &amp;&amp; Double.isInfinite(result);<br>      }else{<br>        return result &lt; 0 &amp;&amp; Double.isInfinite(result);<br>      }<br>    }else if(Double.isNaN(result) || Double.isInfinite(result)){<br>      return false;<br>    }else if(Math.abs(result - expected) &lt; MAX_DOUBLE_ERROR){<br>      return true;<br>    }else{<br>      double min = Math.min(expected * (1.0 - MAX_DOUBLE_ERROR),<br>        expected * (1.0 + MAX_DOUBLE_ERROR));<br>      double max = Math.max(expected * (1.0 - MAX_DOUBLE_ERROR),<br>          expected * (1.0 + MAX_DOUBLE_ERROR));<br>      return result &gt; min &amp;&amp; result &lt; max;<br>    }<br>  }<br>  final void checkOutput(char mine, char them, int nbr) {<br>    boolean success = (mine==them);<br>    StringBuffer out = new StringBuffer();<br>    out.append("Example ");<br>    out.append((nbr+1));<br>    out.append(" - ");<br>    out.append(success ? "success" : "failure   ");<br>    if(!success) {<br>      out.append("Got: ");<br>      out.append("'");<br>      out.append(mine);<br>      out.append("'");<br>      out.append(", Expected: ");<br>      out.append("'");<br>      out.append(them);<br>      out.append("'");<br>    }<br>    System.out.println(out);<br>  }<br>  final void checkOutput(String mine, String them, int nbr) {<br>    boolean success = (mine.equals(them));<br>    StringBuffer out = new StringBuffer();<br>    out.append("Example ");<br>    out.append((nbr+1));<br>    out.append(" - ");<br>    out.append(success ? "success" : "failure   ");<br>    if(!success) {<br>      out.append("Got: ");<br>      out.append("\"");<br>      out.append(mine);<br>      out.append("\"");<br>      out.append(", Expected: ");<br>      out.append("\"");<br>      out.append(them);<br>      out.append("\"");<br>    }<br>    System.out.println(out);<br>  }<br>  final void checkOutput(long[] mine, long[] them, int nbr) {<br>    boolean success = (Arrays.equals(mine, them));<br>    StringBuffer out = new StringBuffer();<br>    out.append("Example ");<br>    out.append((nbr+1));<br>    out.append(" - ");<br>    out.append(success ? "success" : "failure   ");<br>    if(!success) {<br>      out.append("Got: ");<br>      out.append("{");<br>      for(int x=0;x&lt;mine.length;x++) {<br>        out.append(mine[x]);<br>        if(x&lt;mine.length-1) out.append(", ");<br>      }<br>      out.append("}");<br>      out.append(", Expected: ");<br>      out.append("{");<br>      for(int x=0;x&lt;them.length;x++) {<br>        out.append(them[x]);<br>        if(x&lt;them.length-1) out.append(", ");<br>      }<br>      out.append("}");<br>    }<br>    System.out.println(out);<br>  }<br>  final void checkOutput(char[] mine, char[] them, int nbr) {<br>    boolean success = (Arrays.equals(mine, them));<br>    StringBuffer out = new StringBuffer();<br>    out.append("Example ");<br>    out.append((nbr+1));<br>    out.append(" - ");<br>    out.append(success ? "success" : "failure   ");<br>    if(!success) {<br>      out.append("Got: ");<br>      out.append("{");<br>      for(int x=0;x&lt;mine.length;x++) {<br>        out.append(mine[x]);<br>        if(x&lt;mine.length-1) out.append(", ");<br>      }<br>      out.append("}");<br>      out.append(", Expected: ");<br>      out.append("{");<br>      for(int x=0;x&lt;them.length;x++) {<br>        out.append(them[x]);<br>        if(x&lt;them.length-1) out.append(", ");<br>      }<br>      out.append("}");<br>    }<br>    System.out.println(out);<br>  }<br>  final void checkOutput(double[] mine, double[] them, int nbr) {<br>    boolean success = (Arrays.equals(mine, them));<br>    StringBuffer out = new StringBuffer();<br>    out.append("Example ");<br>    out.append((nbr+1));<br>    out.append(" - ");<br>    out.append(success ? "success" : "failure   ");<br>    if(!success) {<br>      out.append("Got: ");<br>      out.append("{");<br>      for(int x=0;x&lt;mine.length;x++) {<br>        out.append(mine[x]);<br>        if(x&lt;mine.length-1) out.append(", ");<br>      }<br>      out.append("}");<br>      out.append(", Expected: ");<br>      out.append("{");<br>      for(int x=0;x&lt;them.length;x++) {<br>        out.append(them[x]);<br>        if(x&lt;them.length-1) out.append(", ");<br>      }<br>      out.append("}");<br>    }<br>    System.out.println(out);<br>  }<br>  final void checkOutput(int[] mine, int[] them, int nbr) {<br>    boolean success = (Arrays.equals(mine, them));<br>    StringBuffer out = new StringBuffer();<br>    out.append("Example ");<br>    out.append((nbr+1));<br>    out.append(" - ");<br>    out.append(success ? "success" : "failure   ");<br>    if(!success) {<br>      out.append("Got: ");<br>      out.append("{");<br>      for(int x=0;x&lt;mine.length;x++) {<br>        out.append(mine[x]);<br>        if(x&lt;mine.length-1) out.append(", ");<br>      }<br>      out.append("}");<br>      out.append(", Expected: ");<br>      out.append("{");<br>      for(int x=0;x&lt;them.length;x++) {<br>        out.append(them[x]);<br>        if(x&lt;them.length-1) out.append(", ");<br>      }<br>      out.append("}");<br>    }<br>    System.out.println(out);<br>  }<br>  final void checkOutput(String[] mine, String[] them, int nbr) {<br>    boolean success = (Arrays.equals(mine, them));<br>    StringBuffer out = new StringBuffer();<br>    out.append("Example ");<br>    out.append((nbr+1));<br>    out.append(" - ");<br>    out.append(success ? "success" : "failure   ");<br>    if(!success) {<br>      out.append("Got: ");<br>      out.append("{");<br>      for(int x=0;x&lt;mine.length;x++) {<br>        out.append(mine[x]);<br>        if(x&lt;mine.length-1) out.append(", ");<br>      }<br>      out.append("}");<br>      out.append(", Expected: ");<br>      out.append("{");<br>      for(int x=0;x&lt;them.length;x++) {<br>        out.append(them[x]);<br>        if(x&lt;them.length-1) out.append(", ");<br>      }<br>      out.append("}");<br>    }<br>    System.out.println(out);<br>  }<br> <br>/** end cut - don't modify this line*/<br>}<br> <br>// Powered by PopsEdit<br>// Powered by CodeProcessor<br></td>