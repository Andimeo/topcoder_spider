<td class="problemText" colspan="8" valign="middle" align="left">
            using namespace std;<br>#include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;stdio.h&gt;<br>#include &lt;string.h&gt;<br>#include &lt;stdlib.h&gt;<br>#include &lt;ctype.h&gt;<br>#include &lt;math.h&gt;<br><br>typedef signed long long s64;<br><br>const int MAXN = 64;<br>const s64 TOTAL_VOL = 101 * 101 * 101 * 101 * 101 * 101 * 101 * 101;<br>struct partit<br>{<br>    int mn[8], mx[8];    // [,)<br>};<br>int nobj;<br>int np;<br>partit p[64];<br><br>void parse_partition( const char *s, partit *q )<br>{<br>    for (int i = 0; i &lt; nobj; i++) {<br>  q-&gt;mn[i] = 0;<br>  q-&gt;mx[i] = 101;<br>    }<br>    const char *t = s;<br>    while (t) {<br>  char let[4], rel[4];<br>  int x;<br>  sscanf( t, " %[a-z]%[&lt;=&gt;]%d", let, rel, &amp;x );<br>  int i = let[0] - 'a';<br>  if (!strcmp( rel, "=" )) {<br>      q-&gt;mn[i] &gt;?= x;<br>      q-&gt;mx[i] &lt;?= x+1;<br>  } else if (!strcmp( rel, "&lt;" )) {<br>      q-&gt;mx[i] &lt;?= x;<br>  } else if (!strcmp( rel, "&gt;" )) {<br>      q-&gt;mn[i] &gt;?= x+1;<br>  } else if (!strcmp( rel, "&lt;=" )) {<br>      q-&gt;mx[i] &lt;?= x+1;<br>  } else if (!strcmp( rel, "&gt;=" )) {<br>      q-&gt;mn[i] &gt;?= x;<br>  }<br>  t = strchr( t+1, ' ' );<br>    }<br>}<br><br>void print_partition( partit q )<br>{<br>    for (int i =0 ; i &lt; nobj; i++)<br>  printf( "[%d, %d) x ", q.mn[i], q.mx[i] );<br>    printf( "\n" );<br>}<br><br>s64 volume( partit q )<br>{<br>    s64 v = 1;<br>    for (int i = 0; i &lt; nobj; i++)<br>  v *= q.mx[i] - q.mn[i];<br>    return v;<br>}<br><br>int isect( partit q, partit r )<br>{<br>    for (int i = 0; i &lt; nobj; i++)<br>  if (q.mx[i] &lt;= r.mn[i] || r.mx[i] &lt;= q.mn[i])<br>      return 0;<br>    return 1;<br>}<br><br>class TablePartitions {<br>    public:<br>    string validate(int n, vector &lt;string&gt; partitions) {<br>  nobj = n;<br>  np = partitions.size();<br>  for (int i = 0; i &lt; partitions.size(); i++) {<br>      parse_partition( partitions[i].c_str(), &amp;p[i] );<br>      print_partition( p[i] );<br>  }<br>  s64 total_vol = 0;  // 101^8 = whatever<br>  s64 target_vol = 1;<br>  for (int i = 0; i &lt; nobj; i++)<br>      target_vol *= 101;<br>  for (int i = 0; i &lt; np; i++) {<br>      s64 vol = volume( p[i] );<br>      if (vol == 0)<br>    return "EMPTY";<br>      total_vol += vol;<br>  }<br>  for (int i = 0; i &lt; np; i++)<br>      for (int j = 0; j &lt; i; j++)<br>    if (isect( p[i], p[j] ))<br>        return "OVERLAP";<br>  if (total_vol != target_vol)<br>      return "INCOMPLETE";<br>  return "OK";<br>    }<br>};<br><br><br><br>// Powered by FileEdit<br></td>