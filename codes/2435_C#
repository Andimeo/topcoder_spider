<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Text;<br>using System.Text.RegularExpressions;<br>using System.Collections;<br>using System.Collections.Specialized;<br><br>public class OmahaLow {<br>    class C: IComparer<br>    {<br>        int IComparer.Compare(object x, object y)<br>        {<br>            return -OmahaLow.value((char)x).CompareTo(OmahaLow.value((char)y));<br>        }<br>    }<br><br>    public OmahaLow() {<br>       // Have some fun<br>    }<br><br>    public static int value(char c)<br>    {<br>        if(c&gt;='1' &amp;&amp; c&lt;='9') return c-'1'+1;<br>        switch (c)<br>        {<br>            case 'T': return 10;<br>            case 'J': return 11;<br>            case 'Q': return 12;<br>            case 'K': return 13;<br>        }<br>        return -1;<br>    }<br><br>    string compare(char[] n, string best)<br>    {<br>        char[] sort = new char[5];<br>        Array.Copy(n, sort, n.Length);<br>        Array.Sort(sort, new C());<br>        for (int i = 0; i &lt; n.Length; i++)<br>        {<br>            if (value(sort[i]) &gt; 8) return best;<br>        }<br><br>        if(best.Length==0) return new string(sort);<br>        for (int i = 0; i &lt; n.Length; i++)<br>        {<br>            if (value(sort[i]) &gt; value(best[i])) return best;<br>        }<br>        return new string(sort);<br>    }<br>    public string low(string sharedCards, string playersCards)<br>    {<br>        string ret = "";<br>        char[] n = new char[5];<br>        char[] sort = new char[5];<br>        foreach (char a in sharedCards)<br>        {<br>            n[0] = a;<br>            foreach (char b in sharedCards)<br>                if (b != a)<br>                {<br>                    n[1] = b;<br>                    foreach (char c in sharedCards)<br><br>                        if (c != a &amp;&amp; c != b)<br>                        {<br>                            n[2] = c;<br>                            foreach (char d in playersCards)<br>                                if (d != c &amp;&amp; d != b &amp;&amp; d != a)<br>                                {<br>                                    n[3] = d;<br>                                    foreach (char e in playersCards)<br>                                        if (e != c &amp;&amp; e != b &amp;&amp; e != a &amp;&amp; e!=d)<br>                                        {<br>                                            n[4] = e;<br>                                        ret = compare(n, ret);<br>                                    }<br>                                }<br>                        }<br>                }<br>        }<br>        return ret;<br><br>    }<br><br><br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by CodeProcessor<br></td>