<td class="problemText" colspan="8" valign="middle" align="left">
            Imports Microsoft.VisualBasic<br>Imports System.Math<br>Imports System<br>Imports System.Collections<br>Imports System.Text<br> <br>Public Class OmahaLow<br>    Private cards As String = "123456789TJQK"<br> <br>    Private Structure Pack<br>        Implements IComparable<br> <br>        Dim Hand() As Integer<br> <br>        Public Function CompareTo(ByVal obj As Object) As Integer Implements System.IComparable.CompareTo<br>            Dim it As Pack = obj<br>            Dim a As Integer<br>            For a = 4 To 0 Step -1<br>                If Me.Hand(a) &lt;&gt; it.Hand(a) Then<br>                    Return -(it.Hand(a) - Me.Hand(a))<br>                End If<br>            Next<br>            Return 0<br>        End Function<br>    End Structure<br> <br>    Public Function low(ByVal sharedCards As String, ByVal playersCards As String) As String<br>        Dim share As New ArrayList<br>        Dim player As New ArrayList<br>        Dim a, i As Integer<br>        For a = 0 To sharedCards.Length - 1<br>            i = cards.IndexOf(sharedCards.Chars(a))<br>            If i &lt;= 7 AndAlso Not share.Contains(i) Then share.Add(i)<br>        Next<br>        For a = 0 To playersCards.Length - 1<br>            i = cards.IndexOf(playersCards.Chars(a))<br>            If i &lt;= 7 AndAlso Not player.Contains(i) Then player.Add(i)<br>        Next<br>        If player.Count &lt; 2 OrElse share.Count &lt; 3 Then Return ""<br>        Dim p1, p2, s1, s2, s3 As Integer<br>        Dim arr(4) As Integer<br>        Dim pool As New ArrayList<br>        Dim ret As New ArrayList<br>        For p1 = 0 To player.Count - 1<br>            For p2 = p1 + 1 To player.Count - 1<br>                For s1 = 0 To share.Count - 1<br>                    For s2 = s1 + 1 To share.Count - 1<br>                        For s3 = s2 + 1 To share.Count - 1<br>                            pool.Clear()<br>                            If Not pool.Contains(player(p1)) Then pool.Add(player(p1))<br>                            If Not pool.Contains(player(p2)) Then pool.Add(player(p2))<br>                            If Not pool.Contains(share(s1)) Then pool.Add(share(s1))<br>                            If Not pool.Contains(share(s2)) Then pool.Add(share(s2))<br>                            If Not pool.Contains(share(s3)) Then pool.Add(share(s3))<br>                            If pool.Count = 5 Then<br>                                Dim p As Pack<br>                                pool.Sort()<br>                                p.Hand = pool.ToArray(GetType(Integer))<br>                                ret.Add(p)<br>                            End If<br>                        Next<br>                    Next<br>                Next<br>            Next<br>        Next<br>        ret.Sort()<br>        If ret.Count = 0 Then<br>            Return ""<br>        End If<br>        Dim pc As Pack = ret(0)<br>        Dim r As String<br>        For a = 4 To 0 Step -1<br>            r &amp;= cards.Chars(pc.Hand(a))<br>        Next<br>        Return r<br>    End Function<br>End Class<br></td>