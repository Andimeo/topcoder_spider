<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;algorithm&gt;<br>#include &lt;cctype&gt;<br>#include &lt;climits&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cstring&gt;<br>#include &lt;deque&gt;<br>#include &lt;functional&gt;<br>#include &lt;iostream&gt;<br>#include &lt;list&gt;<br>#include &lt;map&gt;<br>#include &lt;numeric&gt;<br>#include &lt;queue&gt;<br>#include &lt;set&gt;<br>#include &lt;sstream&gt;<br>#include &lt;stack&gt;<br>#include &lt;string&gt;<br>#include &lt;utility&gt;<br>#include &lt;vector&gt;<br>using namespace std;<br>typedef vector&lt;string&gt; VS;typedef vector&lt;int&gt; VI;<br>typedef set&lt;string&gt; SS; typedef set&lt;int&gt; SI;<br>typedef set&lt;string&gt;::iterator iSS; typedef set&lt;int&gt;::iterator iSI;<br>typedef pair&lt;int,int&gt; PII; typedef pair&lt;string,string&gt; PSS;<br>typedef signed long long LL;typedef unsigned long long ULL;<br>template&lt;class T&gt; inline int size(const T&amp;c){ return c.size(); }<br>#define FOR(i,n) for(int i=0;i&lt;(n);++i)<br>#define FORD(i,n) for(int i=(n)-1;i&gt;=0;--i)<br>#define FOR2(i,a,b) for(int i=(a);i&lt;(b);++i)<br>#define FORD2(i,a,b) for(int i=(b)-1;i&gt;=a;--i)<br>#define PB push_back<br>#define MP make_pair<br>#define min3(a,b,c) (min((a),min((b),(c))))<br>#define min4(a,b,c,d) (min((a),min3((b),(c),(d))))<br>#define max3(a,b,c) (max((a),max((b),(c))))<br>#define max4(a,b,c,d) (max((a),max3((b),(c),(d))))<br>LL gcd(LL a,LL b){for(LL c;b;c=a,a=b,b=c%b);return a;}<br>LL lcm(LL a,LL b){return a/gcd(a,b)*b;}<br><br>vector&lt;double&gt; P;<br>int n;<br><br>void Go(int c, int tot, vector&lt;int&gt; C, double p){<br>  int i;<br>  vector&lt;int&gt; nextC;<br>  if(c == 0) return;<br>  for(i = 0; i &lt; n; i++){<br>    if(C[i]){<br>      P[i] += (p*C[i])/(1.0*tot);<br>      nextC = C;<br>      nextC[i] = 0;<br>      Go(c-1, tot-C[i], nextC, p*(C[i]/(1.0*tot)));<br>    }<br>  }<br>}<br><br>class ChipRace { <br>public: vector &lt;double&gt; chances(vector &lt;int&gt; chips){ <br>  int tot = 0, i, c;<br>  n = size(chips);<br>  P.clear();<br>  for(i = 0; i &lt; n; i++){<br>    tot += chips[i];<br>    P.push_back(0);<br>  }<br>  c = tot / 5 + (tot % 5 &gt; 2 ? 1 : 0);<br>  Go(c, tot, chips, 1);<br>  return P;<br>} <br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br> <br>}; <br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003]<br>// Powered by CodeProcessor<br></td>