<td class="problemText" colspan="8" valign="middle" align="left">
            using namespace std;<br>#include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;stdio.h&gt;<br>#include &lt;stdlib.h&gt;<br>#include &lt;string.h&gt;<br>#include &lt;ctype.h&gt;<br>#include &lt;stack&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;queue&gt;<br>#include &lt;iostream&gt;<br>#include &lt;sstream&gt;<br>typedef long long I64;<br>typedef vector&lt;int&gt; VI;<br>typedef vector&lt;string&gt; VS;<br>typedef vector&lt;I64&gt; VI64;<br>typedef unsigned uint;<br>typedef const char cchar;<br>typedef pair&lt;int,int&gt; PII;<br>typedef vector&lt;double&gt; VD;<br>typedef vector&lt;PII&gt; VPII;<br>#define FOR(i,n) for(int i=0;i&lt;(n);i++)<br>#define FORR(i,a,b) for(int i=(a);i&lt;=(b);i++)<br>#define VAR(a,b) __typeof(b) a=b<br>#define FORIT(it,c) for(VAR(it,(c).begin());it!=(c).end();it++)<br>#define ALL(x) (x).begin(),(x).end()<br>#define UNIQ(x) (x).erase(unique(ALL(x)),(x).end())<br> <br> <br>static vector&lt;string&gt; tokenize(string s, string ch) {<br>   vector&lt;string&gt; ret;<br>   int p2;<br>   for( unsigned p = 0; p &lt; s.size(); p = p2+1 ) {<br>      p2 = s.find_first_of(ch, p);<br>      if( p2 == -1 ) p2 = s.size();<br>      if( p2-p &gt; 0 ) ret.push_back( s.substr(p, p2-p) );<br>   }<br>   return ret;<br>} <br>template &lt;class T&gt;<br>static string toString(T val) {<br>    ostringstream os;<br>    os &lt;&lt; val;<br>    return os.str();<br>}<br> <br>template &lt;class T&gt;<br>static void parse(const string&amp;s, T &amp;val) {<br>    istringstream iss(s);<br>    iss &gt;&gt; val;<br>}<br>struct IslandFerriesImpl {<br>    vector &lt;string&gt; legs;<br>    vector &lt;string&gt; vprices;<br>    IslandFerriesImpl(vector &lt;string&gt; _legs,vector &lt;string&gt; _prices) {<br>        legs = _legs;<br>        vprices = _prices;<br>    }<br> <br>    vector&lt;vector&lt;PII&gt; &gt; ferryLegs;<br>    vector&lt;VI&gt; prices;<br> <br>    vector &lt;int&gt; costs() {<br>        int nisland = vprices.size();<br>        int nferry = legs.size();<br> <br>        FOR(i,nferry) {<br>            ferryLegs.push_back(vector&lt;PII&gt;());<br>            VS toks = tokenize(legs[i]," -");<br>            FOR(j,toks.size()/2) {<br>                int from,to;<br>                parse(toks[j*2],from);<br>                parse(toks[j*2+1],to);<br>                ferryLegs[i].push_back(PII(from,to));<br>            }<br>        }<br> <br>        FOR(i,nisland) {<br>            prices.push_back(VI());<br>            VS toks = tokenize(vprices[i]," ");<br>            FOR(j,toks.size()) {<br>                int pr;<br>                parse(toks[j],pr);<br>                prices[i].push_back(pr);<br>            }<br>        }<br> <br>        int dist[50][1&lt;&lt;11];<br>        memset(dist,-1,sizeof(dist));<br> <br>        queue&lt;PII&gt; q;<br>        q.push(PII(0,0));<br>        dist[0][0] = 0;<br> <br>        while(!q.empty()) {<br>            PII fr = q.front(); q.pop();<br>            int at = fr.first;<br>            int have = fr.second;<br> <br>            int nhave = 0;<br>            FOR(j,nferry)<br>                if(have &amp; (1&lt;&lt;j)) {<br>                    nhave++;<br> <br>                    for(int leg=0;leg&lt;ferryLegs[j].size();leg++) {<br>                        if(ferryLegs[j][leg].first == at) {<br>                            int toat = ferryLegs[j][leg].second;<br>                            int tohave = have &amp; ~(1&lt;&lt;j);<br>                            int todist = dist[at][have];<br>                            if(dist[toat][tohave] == -1 ||<br>                                    dist[toat][tohave] &gt; todist) {<br>                                dist[toat][tohave] = todist;<br>                                q.push(PII(toat,tohave));<br>                            }<br>                        }<br>                    }<br>                }<br> <br>            if(nhave &lt; 3) {<br>                FOR(j,nferry)<br>                    if(!(have &amp; (1&lt;&lt;j))) {<br>                        int toat = at;<br>                        int tohave = have | (1&lt;&lt;j);<br>                        int todist = dist[at][have] + prices[at][j];<br>                        if(dist[toat][tohave] == -1 ||<br>                                dist[toat][tohave] &gt; todist) {<br>                            dist[toat][tohave] = todist;<br>                            q.push(PII(toat,tohave));<br>                        }<br>                    }<br>            }<br>        }<br> <br>        VI ret;<br>        for(int i=1;i&lt;nisland;i++) {<br>            ret.push_back(dist[i][0]);<br>        }<br>        return ret;<br>    };<br>};<br> <br> <br>struct IslandFerries {<br>    vector &lt;int&gt; costs(vector &lt;string&gt; legs,vector &lt;string&gt; prices) {<br>        IslandFerriesImpl impl(legs,prices);<br>        return impl.costs();<br>    }<br> <br>};<br> <br> <br> <br> <br>// Powered by FileEdit<br>// Powered by CodeProcessor<br></td>