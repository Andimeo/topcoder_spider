<td class="problemText" colspan="8" valign="middle" align="left">
            //program framework generated with WishingBone's parser :)-<br> <br>//common header<br>#ifdef WIN32<br>#pragma warning(disable:4786)<br>#define for if (0); else for<br>#endif<br>#include &lt;iostream&gt;<br>#include &lt;iomanip&gt;<br>#include &lt;sstream&gt;<br>#include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;deque&gt;<br>#include &lt;set&gt;<br>#include &lt;map&gt;<br>#include &lt;bitset&gt;<br>#include &lt;valarray&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;functional&gt;<br>#include &lt;numeric&gt;<br>#include &lt;complex&gt;<br>#include &lt;utility&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cstring&gt;<br>#include &lt;cctype&gt;<br>#include &lt;cmath&gt;<br>using namespace std;<br> <br>//64 bit integer definition<br>#ifdef WIN32<br>#define in_routine(type,spec) \<br>istream&amp; operator&gt;&gt;(istream&amp; s,type &amp;d){char b[30];s&gt;&gt;b;sscanf(b,spec,&amp;d);return s;}<br>#define out_routine(type,spec) \<br>ostream&amp; operator&lt;&lt;(ostream&amp; s,type d){char b[30];sprintf(b,spec,d);s&lt;&lt;b;return s;}<br>typedef signed __int64 i64; in_routine(i64,"%I64d") out_routine(i64,"%I64d")<br>typedef unsigned __int64 u64; in_routine(u64,"%I64u") out_routine(u64,"%I64u")<br>#else<br>typedef signed long long i64;<br>typedef unsigned long long u64;<br>#endif<br> <br>#define REP(i,n) for(int i=0;i&lt;(n);i++)<br>#define FOR(i,a,b) for(int i=(a);i&lt;=(b);i++)<br>#define inf 1000000000<br>//common routines<br>#ifdef WIN32<br>#define min(a,b) _cpp_min(a,b)<br>#define max(a,b) _cpp_max(a,b)<br>#endif<br>#define abs(a) ((a)&gt;0?(a):-(a))<br>#define s2d(s,d) istringstream(s)&gt;&gt;d<br>#define d2s(d,s) {ostringstream t;t&lt;&lt;d;s=t.str();}<br>typedef vector&lt;int&gt; VI;<br>typedef vector&lt;VI&gt; VVI;<br>typedef vector&lt;string&gt; VS;<br>typedef vector&lt;VS&gt; VVS;<br>template&lt;class T&gt;vector&lt;T&gt;split(const string&amp;s,T){vector&lt;T&gt; result;istringstream is(s);T a;while (is&gt;&gt;a) result.push_back(a);return result;}<br>inline VI split(const string&amp;s){return split(s,0);}<br>VVI split(const VS &amp;g){VVI ret;for(int i=0;i&lt;g.size();i++) ret.push_back(split(g[i]));return ret;}<br>string itoa(int n){char buf[100];sprintf(buf,"%d",n);return buf;}<br>int gcd(int a,int b){for(int c;b;c=a,a=b,b=c%b);return a;}<br>int lcm(int a,int b){return a/gcd(a,b)*b;}<br>template&lt;class T&gt;class Index{public:typedef map&lt;T,int&gt;Map;typedef Map::iterator Iter;Map MyMap;vector&lt;T&gt; ItemList;int insert(const T&amp;item){Iter it=MyMap.find(item);if(it==MyMap.end()){int n=MyMap.size();MyMap[item] = n;ItemList.push_back(item);return n;}else return it-&gt;second;}int find(const T&amp;item)const{Iter it=MyMap.find(item);if(it==MyMap.end())return -1;else return it-&gt;second;}int contain(const T&amp;item)const{return Find(item)&gt;=0;}int size(){return MyMap.size();}T &amp;item(int index){return ItemList[index];}int operator[](const T&amp;item){return insert(item);}T&amp;operator()(int index){return ItemList[index];}};<br>//output routine<br>ostream&amp; operator&lt;&lt;(ostream&amp; s,string d){<br>  s&lt;&lt;'\"'&lt;&lt;d.c_str()&lt;&lt;'\"';<br>  return s;<br>}<br>template &lt;class T&gt;<br>ostream&amp; operator&lt;&lt;(ostream&amp; s,vector&lt;T&gt; d){<br>  s&lt;&lt;"{";<br>  for (typename vector&lt;T&gt;::iterator i=d.begin();i!=d.end();i++)<br>    s&lt;&lt;(i!=d.begin()?",":"")&lt;&lt;*i;<br>  s&lt;&lt;"}";<br>  return s;<br>}<br> <br>//parsing routine<br>template &lt;class T&gt;<br>vector&lt;basic_string&lt;T&gt; &gt; parse(const basic_string&lt;T&gt; &amp;s,const basic_string&lt;T&gt; &amp;delim){<br>  vector&lt;basic_string&lt;T&gt; &gt; ret(0);<br>  for (int b,e=0;;ret.push_back(s.substr(b,e-b)))<br>    if ((b=s.find_first_not_of(delim,e))==(e=s.find_first_of(delim,b)))<br>      return ret;<br>}<br>vector&lt;int&gt; intparse(const string &amp;s,const string &amp;delim=" \t\n"){<br>  vector&lt;string&gt; tmp=parse(s,delim);<br>  vector&lt;int&gt; ret(0);<br>  for (vector&lt;string&gt;::iterator i=tmp.begin();i!=tmp.end();i++)<br>    {int t;s2d(*i,t);ret.push_back(t);}<br>  return ret;<br>}<br> <br> <br>class ComplexIntegers{<br>public:<br>  vector&lt;string&gt; classify(vector&lt;int&gt; r,vector&lt;int&gt; m){<br>  <br>    VS ret;<br>    REP(i, r.size()){<br>      if(r[i]*r[i] + m[i]*m[i] == 0) ret.push_back("zero");<br>      else if(r[i]*r[i] + m[i]*m[i] == 1) ret.push_back("unit");<br>      else {<br>        if(r[i] * m[i]){<br>          if(prime(r[i]*r[i] + m[i]*m[i])) ret.push_back("prime");<br>          else ret.push_back("composite");<br>        }<br>        else {<br>          if(r[i]) swap(r[i], m[i]);<br>          m[i] = abs(m[i]);<br>          if(m[i] % 4 == 3 &amp;&amp; prime(m[i])) ret.push_back("prime");<br>          else ret.push_back("composite");<br>        }<br>      }<br>    }<br>    return ret;<br>  }<br> <br>  bool prime(int a){<br>  <br>    int b = floor(sqrt(double(a)));<br>    for(int i = 2; i &lt;= b; i++) <br>      if(a % i == 0) return false;<br>    return true;<br>  }<br>};<br> <br> <br> <br> <br>#ifdef WIN32<br>int test0(){<br>  int _realPart[]={ 0,     1,       0,     1,       -1,      2,           0,       0,          -3};<br>  vector&lt;int&gt; realPart(_realPart+0,_realPart+sizeof(_realPart)/sizeof(int));<br>  int _imaginaryPart[]={ 0,     0,      -1,     1,        1,      0,          -3,       5,          -2};<br>  vector&lt;int&gt; imaginaryPart(_imaginaryPart+0,_imaginaryPart+sizeof(_imaginaryPart)/sizeof(int));<br>  string _classify[]={ "zero",  "unit",  "unit",  "prime",  "prime",  "composite",  "prime",  "composite",  "prime" };<br>  vector&lt;string&gt; classify(_classify+0,_classify+sizeof(_classify)/sizeof(string));<br>  ComplexIntegers _ComplexIntegers;<br>  vector&lt;string&gt; ret=_ComplexIntegers.classify(realPart,imaginaryPart);<br>  cout&lt;&lt;"--------------------test 0--------------------"&lt;&lt;endl;<br>  cout&lt;&lt;"realPart = "&lt;&lt;realPart&lt;&lt;endl;<br>  cout&lt;&lt;"imaginaryPart = "&lt;&lt;imaginaryPart&lt;&lt;endl;<br>  cout&lt;&lt;"expected to return "&lt;&lt;classify&lt;&lt;endl;<br>  cout&lt;&lt;"your method returns "&lt;&lt;ret&lt;&lt;endl;<br>  if (ret==classify)<br>    cout&lt;&lt;endl&lt;&lt;"Pass!"&lt;&lt;endl&lt;&lt;endl;<br>  else {<br>    cout&lt;&lt;endl&lt;&lt;"Fail!!!!!!!!!! aoao~~~~~~~~~~~~"&lt;&lt;endl&lt;&lt;endl;<br>    return 0;<br>  }<br>  return 1;<br>}<br> <br>int test1(){<br>  int _realPart[]={2,3,4,5,2,3,4,5,2,3,4,5,2,3,4,5};<br>  vector&lt;int&gt; realPart(_realPart+0,_realPart+sizeof(_realPart)/sizeof(int));<br>  int _imaginaryPart[]={2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5};<br>  vector&lt;int&gt; imaginaryPart(_imaginaryPart+0,_imaginaryPart+sizeof(_imaginaryPart)/sizeof(int));<br>  string _classify[]={ "composite",  "prime",  "composite",  "prime",  "prime",  "composite",  "composite",  "composite",  "composite",  "composite",  "composite",  "prime",  "prime",  "composite",  "prime",  "composite" };<br>  vector&lt;string&gt; classify(_classify+0,_classify+sizeof(_classify)/sizeof(string));<br>  ComplexIntegers _ComplexIntegers;<br>  vector&lt;string&gt; ret=_ComplexIntegers.classify(realPart,imaginaryPart);<br>  cout&lt;&lt;"--------------------test 1--------------------"&lt;&lt;endl;<br>  cout&lt;&lt;"realPart = "&lt;&lt;realPart&lt;&lt;endl;<br>  cout&lt;&lt;"imaginaryPart = "&lt;&lt;imaginaryPart&lt;&lt;endl;<br>  cout&lt;&lt;"expected to return "&lt;&lt;classify&lt;&lt;endl;<br>  cout&lt;&lt;"your method returns "&lt;&lt;ret&lt;&lt;endl;<br>  if (ret==classify)<br>    cout&lt;&lt;endl&lt;&lt;"Pass!"&lt;&lt;endl&lt;&lt;endl;<br>  else {<br>    cout&lt;&lt;endl&lt;&lt;"Fail!!!!!!!!!! aoao~~~~~~~~~~~~"&lt;&lt;endl&lt;&lt;endl;<br>    return 0;<br>  }<br>  return 1;<br>}<br> <br>int test2(){<br>  int _realPart[]={0,0,0,0,0,0,0,0,0,-19,23,29,31,37,-41};<br>  vector&lt;int&gt; realPart(_realPart+0,_realPart+sizeof(_realPart)/sizeof(int));<br>  int _imaginaryPart[]={15,2,-3,5,-7,11,-13,17,0,0,0,0,0,0,0};<br>  vector&lt;int&gt; imaginaryPart(_imaginaryPart+0,_imaginaryPart+sizeof(_imaginaryPart)/sizeof(int));<br>  string _classify[]={ "composite",  "composite",  "prime",  "composite",  "prime",  "prime",  "composite",  "composite",  "zero",  "prime",  "prime",  "composite",  "prime",  "composite",  "composite" };<br>  vector&lt;string&gt; classify(_classify+0,_classify+sizeof(_classify)/sizeof(string));<br>  ComplexIntegers _ComplexIntegers;<br>  vector&lt;string&gt; ret=_ComplexIntegers.classify(realPart,imaginaryPart);<br>  cout&lt;&lt;"--------------------test 2--------------------"&lt;&lt;endl;<br>  cout&lt;&lt;"realPart = "&lt;&lt;realPart&lt;&lt;endl;<br>  cout&lt;&lt;"imaginaryPart = "&lt;&lt;imaginaryPart&lt;&lt;endl;<br>  cout&lt;&lt;"expected to return "&lt;&lt;classify&lt;&lt;endl;<br>  cout&lt;&lt;"your method returns "&lt;&lt;ret&lt;&lt;endl;<br>  if (ret==classify)<br>    cout&lt;&lt;endl&lt;&lt;"Pass!"&lt;&lt;endl&lt;&lt;endl;<br>  else {<br>    cout&lt;&lt;endl&lt;&lt;"Fail!!!!!!!!!! aoao~~~~~~~~~~~~"&lt;&lt;endl&lt;&lt;endl;<br>    return 0;<br>  }<br>  return 1;<br>}<br> <br>int test3(){<br>  int _realPart[]={99,-39,0,0,97,1003,9998,1119};<br>  vector&lt;int&gt; realPart(_realPart+0,_realPart+sizeof(_realPart)/sizeof(int));<br>  int _imaginaryPart[]={0,0,35,-129,-2,-232,9997,1120};<br>  vector&lt;int&gt; imaginaryPart(_imaginaryPart+0,_imaginaryPart+sizeof(_imaginaryPart)/sizeof(int));<br>  string _classify[]={ "composite",  "composite",  "composite",  "composite",  "prime",  "prime",  "prime",  "prime" };<br>  vector&lt;string&gt; classify(_classify+0,_classify+sizeof(_classify)/sizeof(string));<br>  ComplexIntegers _ComplexIntegers;<br>  vector&lt;string&gt; ret=_ComplexIntegers.classify(realPart,imaginaryPart);<br>  cout&lt;&lt;"--------------------test 3--------------------"&lt;&lt;endl;<br>  cout&lt;&lt;"realPart = "&lt;&lt;realPart&lt;&lt;endl;<br>  cout&lt;&lt;"imaginaryPart = "&lt;&lt;imaginaryPart&lt;&lt;endl;<br>  cout&lt;&lt;"expected to return "&lt;&lt;classify&lt;&lt;endl;<br>  cout&lt;&lt;"your method returns "&lt;&lt;ret&lt;&lt;endl;<br>  if (ret==classify)<br>    cout&lt;&lt;endl&lt;&lt;"Pass!"&lt;&lt;endl&lt;&lt;endl;<br>  else {<br>    cout&lt;&lt;endl&lt;&lt;"Fail!!!!!!!!!! aoao~~~~~~~~~~~~"&lt;&lt;endl&lt;&lt;endl;<br>    return 0;<br>  }<br>  return 1;<br>}<br> <br>int test4(){<br>  int _realPart[]={0,  0,0,1,-1,   1,1,-1,-1,   2,-2,0,0,  1,1,2,2,-1,-1,-2,-2,      3,-3,0,0,   1,1,3,3,-1,-1,-3,-3,    2,2,-2,-2,  0,0,4,-4,                 1,1,4,4,-1,-1,-4,-4 };<br>  vector&lt;int&gt; realPart(_realPart+0,_realPart+sizeof(_realPart)/sizeof(int));<br>  int _imaginaryPart[]={0,  1,-1,0,0,   1,-1,1,-1,   0,0,2,-2,  2,-2,1,-1,2,-2,1,-1,       0,0,-3,3,   3,-3,1,-1,3,-3,1,-1,     2,-2,2,-2,  4,-4,0,0,                 4,-4,1,-1,4,-4,1,-1 };<br>  vector&lt;int&gt; imaginaryPart(_imaginaryPart+0,_imaginaryPart+sizeof(_imaginaryPart)/sizeof(int));<br>  string _classify[]={ "zero",  "unit",  "unit",  "unit",  "unit",  "prime",  "prime",  "prime",  "prime",  "composite",  "composite",  "composite",  "composite",  "prime",  "prime",  "prime",  "prime",  "prime",  "prime",  "prime",  "prime",  "prime",  "prime",  "prime",  "prime",  "composite",  "composite",  "composite",  "composite",  "composite",  "composite",  "composite",  "composite",  "composite",  "composite",  "composite",  "composite",  "composite",  "composite",  "composite",  "composite",  "prime",  "prime",  "prime",  "prime",  "prime",  "prime",  "prime",  "prime" };<br>  vector&lt;string&gt; classify(_classify+0,_classify+sizeof(_classify)/sizeof(string));<br>  ComplexIntegers _ComplexIntegers;<br>  vector&lt;string&gt; ret=_ComplexIntegers.classify(realPart,imaginaryPart);<br>  cout&lt;&lt;"--------------------test 4--------------------"&lt;&lt;endl;<br>  cout&lt;&lt;"realPart = "&lt;&lt;realPart&lt;&lt;endl;<br>  cout&lt;&lt;"imaginaryPart = "&lt;&lt;imaginaryPart&lt;&lt;endl;<br>  cout&lt;&lt;"expected to return "&lt;&lt;classify&lt;&lt;endl;<br>  cout&lt;&lt;"your method returns "&lt;&lt;ret&lt;&lt;endl;<br>  if (ret==classify)<br>    cout&lt;&lt;endl&lt;&lt;"Pass!"&lt;&lt;endl&lt;&lt;endl;<br>  else {<br>    cout&lt;&lt;endl&lt;&lt;"Fail!!!!!!!!!! aoao~~~~~~~~~~~~"&lt;&lt;endl&lt;&lt;endl;<br>    return 0;<br>  }<br>  return 1;<br>}<br> <br>int main(){<br>  if (test0() &amp;&amp; test1() &amp;&amp; test2() &amp;&amp; test3() &amp;&amp; test4()) cout&lt;&lt;"ALL PASSED!"&lt;&lt;endl;<br>  return 0;<br>}<br>#endif<br></td>