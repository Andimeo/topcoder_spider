<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br><br>public class ComplexIntegers {<br>  public String[] classify(int[] realPart, int[] imaginaryPart) {<br>    String[] words = {"zero", "unit", "prime", "composite"};<br>    int n = realPart.length;<br>    String[] ret = new String[n];<br>    <br>    for (int i = 0; i &lt; n; i++) {<br>      int a = realPart[i];<br>      int b = imaginaryPart[i];<br>      if (norm(a,b) == 0) {<br>        ret[i] = words[0];<br>      } else if (norm(a, b) == 1) {<br>        ret[i] = words[1];<br>      } else if (complexprime(a,b)) {<br>        ret[i] = words[2];<br>      } else {<br>        ret[i] = words[3];<br>      }<br>    }<br>    <br>    return ret;<br>  }<br>  <br>  public boolean complexprime(int a, int b) {<br>    int p = 0;<br>    if (a == 0) {<br>      p = b;<br>    } else if (b==0) {<br>      p = a;<br>    }<br>    if (p &lt; 0) p = -p;<br>    if (p!=0) {<br>      if (p%4==3 &amp;&amp; prime(p)) {<br>        return true;<br>      }<br>      return false;<br>    } else {<br>      p = norm(a, b);<br>      if (prime(p)) {<br>        return true;<br>      }<br>      return false;<br>    }<br>  }<br>  <br>  public boolean prime(int p) {<br>    if (p == 1 || p == 0) return false;<br>    if (p == 2) return true;<br>    for (int i = 2; i &lt; Math.sqrt(p) + 1; i++) {<br>      if (p%i == 0) {<br>        return false;<br>      }<br>    }<br>    return true;<br>  }<br>  <br>  public int norm(int a, int b) {<br>    return a*a + b*b;<br>  }<br><br>  ////////////////////////////////////////////////////////////////////////////////////////////////<br><br>  public final static void main(String[] args)<br>  {<br>    try {<br>      validateExample("1", new ComplexIntegers().classify(new int[] { 0,     1,       0,     1,       -1,      2,           0,       0,          -3},new int[] { 0,     0,      -1,     1,        1,      0,          -3,       5,          -2}), new String[] { "zero",  "unit",  "unit",  "prime",  "prime",  "composite",  "prime",  "composite",  "prime" }, "classify(new int[] { 0,     1,       0,     1,       -1,      2,           0,       0,          -3},new int[] { 0,     0,      -1,     1,        1,      0,          -3,       5,          -2})");<br>      validateExample("2", new ComplexIntegers().classify(new int[] {2,3,4,5,2,3,4,5,2,3,4,5,2,3,4,5},new int[] {2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5}), new String[] { "composite",  "prime",  "composite",  "prime",  "prime",  "composite",  "composite",  "composite",  "composite",  "composite",  "composite",  "prime",  "prime",  "composite",  "prime",  "composite" }, "classify(new int[] {2,3,4,5,2,3,4,5,2,3,4,5,2,3,4,5},new int[] {2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5})");<br>      validateExample("3", new ComplexIntegers().classify(new int[] {0,0,0,0,0,0,0,0,0,-19,23,29,31,37,-41},new int[] {15,2,-3,5,-7,11,-13,17,0,0,0,0,0,0,0}), new String[] { "composite",  "composite",  "prime",  "composite",  "prime",  "prime",  "composite",  "composite",  "zero",  "prime",  "prime",  "composite",  "prime",  "composite",  "composite" }, "classify(new int[] {0,0,0,0,0,0,0,0,0,-19,23,29,31,37,-41},new int[] {15,2,-3,5,-7,11,-13,17,0,0,0,0,0,0,0})");<br>      validateExample("4", new ComplexIntegers().classify(new int[] {99,-39,0,0,97,1003,9998,1119},new int[] {0,0,35,-129,-2,-232,9997,1120}), new String[] { "composite",  "composite",  "composite",  "composite",  "prime",  "prime",  "prime",  "prime" }, "classify(new int[] {99,-39,0,0,97,1003,9998,1119},new int[] {0,0,35,-129,-2,-232,9997,1120})");<br>      validateExample("5", new ComplexIntegers().classify(new int[] {0,  0,0,1,-1,   1,1,-1,-1,   2,-2,0,0,  1,1,2,2,-1,-1,-2,-2,       3,-3,0,0,   1,1,3,3,-1,-1,-3,-3,    2,2,-2,-2,  0,0,4,-4,                  1,1,4,4,-1,-1,-4,-4 },new int[] {0,  1,-1,0,0,   1,-1,1,-1,   0,0,2,-2,  2,-2,1,-1,2,-2,1,-1,        0,0,-3,3,   3,-3,1,-1,3,-3,1,-1,     2,-2,2,-2,  4,-4,0,0,                  4,-4,1,-1,4,-4,1,-1 }), new String[] { "zero",  "unit",  "unit",  "unit",  "unit",  "prime",  "prime",  "prime",  "prime",  "composite",  "composite",  "composite",  "composite",  "prime",  "prime",  "prime",  "prime",  "prime",  "prime",  "prime",  "prime",  "prime",  "prime",  "prime",  "prime",  "composite",  "composite",  "composite",  "composite",  "composite",  "composite",  "composite",  "composite",  "composite",  "composite",  "composite",  "composite",  "composite",  "composite",  "composite",  "composite",  "prime",  "prime",  "prime",  "prime",  "prime",  "prime",  "prime",  "prime" }, "classify(new int[] {0,  0,0,1,-1,   1,1,-1,-1,   2,-2,0,0,  1,1,2,2,-1,-1,-2,-2,       3,-3,0,0,   1,1,3,3,-1,-1,-3,-3,    2,2,-2,-2,  0,0,4,-4,                  1,1,4,4,-1,-1,-4,-4 },new int[] {0,  1,-1,0,0,   1,-1,1,-1,   0,0,2,-2,  2,-2,1,-1,2,-2,1,-1,        0,0,-3,3,   3,-3,1,-1,3,-3,1,-1,     2,-2,2,-2,  4,-4,0,0,                  4,-4,1,-1,4,-4,1,-1 })");<br>    } catch (Exception e) {<br>      System.out.println(e);<br>      e.printStackTrace(System.out);<br>    }<br>  }<br><br>  private static void validateExample(String exampleNum, String[] returned, String[] expected, String methodInvocation) {<br>    print(exampleNum);<br>    print("  ");<br>    if (!eq(returned,expected)) {<br>      print("FAIL");<br>    } else {<br>      print("SUCCESS");<br>    }<br>    print(" ");<br>    print(methodInvocation);<br>    print("\tGot:[");<br>    print(returned);<br>    print("]\t");<br>    print("Expected:[");<br>    print(expected);<br>    print("]");<br>    print("\n");<br>  }<br><br>  public static void print(boolean a) {<br>    System.out.print(a);<br>  }<br><br>  public static void print(long a) {<br>    System.out.print(a);<br>  }<br><br>  public static void print(int a) {<br>    System.out.print(a);<br>  }<br><br>  public static void print(char a) {<br>    System.out.print(a);<br>  }<br><br>  public static void print(String a) {<br>    System.out.print(a);<br>  }<br><br>  public static void print(int[] a) {<br>    if (a==null) {System.out.print("null"); return;}<br>    for (int i=0; i&lt;a.length; i++) System.out.print(a[i]+(i&lt;a.length-1?",":""));<br>  }<br><br>  public static void print(int[][] a) {<br>    if (a==null) {System.out.print("null"); return;}<br>    for (int i=0; i&lt;a.length; i++) { print(a[i]); print("\n"); }<br>  }<br><br>  public static void print(String[] a) {<br>    if (a==null) {System.out.print("null"); return;}<br>    for (int i=0; i&lt;a.length; i++) System.out.print(a[i]+(i&lt;a.length-1?",":""));<br>  }<br><br>  public static boolean eq(boolean a, boolean b) {<br>    return a==b;<br>  }<br><br>  public static boolean eq(long a, long b) {<br>    return a==b;<br>  }<br><br>  public static boolean eq(int a, int b) {<br>    return a==b;<br>  }<br><br>  public static boolean eq(char a, char b) {<br>    return a==b;<br>  }<br><br>  public static boolean eq(String a, String b) {<br>    return a.equals(b);<br>  }<br><br>  public static boolean eq(int[] a, int[] b) { return Arrays.equals(a,b); }<br>  public static boolean eq(String[] a, String[] b) { return Arrays.equals(a,b); }<br><br>}<br> <br>// Powered by CodeProcessor<br></td>