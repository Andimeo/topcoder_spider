<td class="problemText" colspan="8" valign="middle" align="left">
            // FilterC#<br><br><br>using System;<br>using System.Collections;<br><br>public class DungeonEscape {<br><br>  public int exitTime(string[] up, string[] down, string[] east, string[] west, int sy, int sx) <br>  {<br>    int nr=up.Length;<br>    int nc=up[0].Length;<br><br>    int[,] d=new int[nr,nc];<br>    int INF=100000000;<br><br>    int NS=10*nr*nc*nc;<br>    int[] xs=new int[NS];<br>    int[] ys=new int[NS];<br>    int todo=0;<br>    int done=0;<br>    for(int i=0;i&lt;nr;i++)<br>      for(int j=0;j&lt;nc;j++)<br>        d[i,j]=INF;<br><br>    xs[todo]=sx;ys[todo]=sy;d[sy,sx]=0;todo++;<br>    while(done&lt;todo)<br>    {<br>      int x=xs[done%NS];<br>      int y=ys[done%NS];<br>      int dd=d[y,x];<br>      done++;<br><br>      int c=0;<br>      if(y-1&gt;=0&amp;&amp;up[y][x]!='x')<br>      {<br>        c=up[y][x]-'0';<br>        if(d[y-1,x]&gt;d[y,x]+c&amp;&amp;d[y,x]+c&lt;nc*(nr-y+1))<br>        {<br>          d[y-1,x]=d[y,x]+c;<br>          xs[todo%NS]=x; ys[todo%NS]=y-1; todo++;<br>        }<br>      }<br>      if(y+1&lt;nr&amp;&amp;down[y][x]!='x')<br>      {<br>        c=down[y][x]-'0';<br>        if(d[y+1,x]&gt;d[y,x]+c&amp;&amp;d[y,x]+c&lt;nc*(nr-y-1))<br>        {<br>          d[y+1,x]=d[y,x]+c;<br>          xs[todo%NS]=x; ys[todo%NS]=y+1; todo++;<br>        }<br>      }<br>      if(x-1&gt;=0&amp;&amp;west[y][x]!='x')<br>      {<br>        c=west[y][x]-'0';<br>        if(d[y,x-1]&gt;d[y,x]+c&amp;&amp;d[y,x]+c&lt;nc*(nr-y))<br>        {<br>          d[y,x-1]=d[y,x]+c;<br>          xs[todo%NS]=x-1; ys[todo%NS]=y; todo++;<br>        }<br>      }<br>      if(x+1&lt;nc&amp;&amp;east[y][x]!='x')<br>      {<br>        c=east[y][x]-'0';<br>        if(d[y,x+1]&gt;d[y,x]+c&amp;&amp;d[y,x]+c&lt;nc*(nr-y))<br>        {<br>          d[y,x+1]=d[y,x]+c;<br>          xs[todo%NS]=x+1; ys[todo%NS]=y; todo++;<br>        }<br>      }<br>    }<br><br>    int mr=INF;<br>    for(int i=0;i&lt;nc;i++)<br>      if(up[0][i]!='x')<br>      {<br>        int cc=up[0][i]-'0';<br>        if(d[0,i]+cc&lt;mr) mr=d[0,i]+cc;<br>      }<br><br>    if(mr==INF) return -1;<br><br>    return mr;<br>  }<br><br><br>  private static ArrayList BitCount(int n){ ArrayList r = new ArrayList(); int idx=0; while(n &gt; 0) { if((n&amp;1)==1) r.Add(idx); n &gt;&gt;= 1; idx++;} return r; }<br>  private static int Gcd(int a, int b) { while(b!=0) {int t=a; a=b; b=t%b;} return a;}<br>  private static int Lcm(int a, int b) { return a*b/Gcd(a,b); }<br>  private static char[] CA(ArrayList ar) { return (char []) ar.ToArray(typeof(char)); }<br>  private static int[] IA(ArrayList ar) { return (int []) ar.ToArray(typeof(int)); }<br>  private static long[] LA(ArrayList ar) { return (long []) ar.ToArray(typeof(long)); }<br>  private static double[] DA(ArrayList ar) { return (double []) ar.ToArray(typeof(double)); }<br>  private static string[] SA(ArrayList ar) { return (string[]) ar.ToArray(typeof(string)); }<br>  private static int INT(Object x) { return Int32.Parse(x.ToString()); }<br>  private static long LNG(Object x) { return Int64.Parse(x.ToString()); }<br>  private static double DBL(Object x) { return Double.Parse(x.ToString()); }<br>  private static int MinI(IEnumerable a) { int m = Int32.MaxValue; foreach (int x in a) m = Math.Min(m, x); return m; }<br>  private static long MinL(IEnumerable a) { long  m = Int64.MaxValue;  foreach (long x in a) m = Math.Min(m, x); return m; }<br>  private static double MinD(IEnumerable a) { double m = Double.MaxValue; foreach (double x in a) m = Math.Min(m, x); return m; }<br>  private static string MinS(IEnumerable a) { string m = null; foreach (string x in a) m = (m == null || m.CompareTo(x)&gt;0) ? x : m; return m; } <br>  private static int MaxI(IEnumerable a) { int m = Int32.MinValue;  foreach (int x in a) m = Math.Max(m, x); return m; }<br>  private static long MaxL(IEnumerable a) { long   m = Int64.MinValue;   foreach (long x in a) m = Math.Max(m, x); return m; }<br>  private static double MaxD(IEnumerable a) { double m = Double.MinValue; foreach (double x in a) m = Math.Max(m, x); return m; }<br>  private static string MaxS(IEnumerable a) { string m = null; foreach (string x in a) m = (m == null || m.CompareTo(x)&lt;0) ? x : m; return m; } <br>  private static int SumI(IEnumerable a) { int m = 0;  foreach (int x in a) m += x; return m; }<br>  private static long SumL(IEnumerable a) { long m = 0;  foreach (long x in a) m += x; return m; }<br>  private static double SumD(IEnumerable a) { double m = 0;  foreach (double x in a) m += x; return m; }<br>  private static string SumS(IEnumerable a) { string m = ""; foreach (string x in a) m += x; return m; }<br>  private static int MinI(params int[] a) { int m = Int32.MaxValue; foreach (int x in a) m = Math.Min(m, x); return m; }<br>  private static long MinL(params long[] a) { long  m = Int64.MaxValue;  foreach (long x in a) m = Math.Min(m, x); return m; }<br>  private static double MinD(params double[] a) { double m = Double.MaxValue; foreach (double x in a) m = Math.Min(m, x); return m; }<br>  private static string MinS(params string[] a) { string m = null; foreach (string x in a) m = (m == null || m.CompareTo(x)&gt;0) ? x : m; return m; } <br>  private static int MaxI(params int[] a) { int m = Int32.MinValue;  foreach (int x in a) m = Math.Max(m, x); return m; }<br>  private static long MaxL(params long[] a) { long   m = Int64.MinValue;   foreach (long x in a) m = Math.Max(m, x); return m; }<br>  private static double MaxD(params double[] a) { double m = Double.MinValue; foreach (double x in a) m = Math.Max(m, x); return m; }<br>  private static string MaxS(params string[] a) { string m = null; foreach (string x in a) m = (m == null || m.CompareTo(x)&lt;0) ? x : m; return m; } <br>  private static int SumI(params int[] a) { int m = 0;  foreach (int x in a) m += x; return m; }<br>  private static long SumL(params long[] a) { long m = 0;  foreach (long x in a) m += x; return m; }<br>  private static double SumD(params double[] a) { double m = 0;  foreach (double x in a) m += x; return m; }<br>  private static string SumS(params string[] a) { string m = ""; foreach (string x in a) m += x; return m; }<br>  private static int[] dr={-1,0,1,0};<br>  private static int[] dc={0,1,0,-1};<br>    public class SComparer:IComparer <br>   { <br>     public int Compare(object x, object y) <br>        { <br>      string sx=(string)x; <br>      string sy=(string)y; <br>      return String.CompareOrdinal(sx,sy); <br>    } <br>   } <br>}<br><br><br>// Powered by FileEdit<br>// Powered by CodeProcessor<br></td>