<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;iostream&gt;<br>#include &lt;sstream&gt;<br>#include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;queue&gt;<br>#include &lt;set&gt;<br>#include &lt;map&gt;<br>#include &lt;stdio.h&gt;<br>#include &lt;stdlib.h&gt;<br>#include &lt;string.h&gt;<br>#include &lt;math.h&gt;<br>#include &lt;ctype.h&gt;<br>#include &lt;setjmp.h&gt;<br>#define ll long long<br>#define ld long double<br>#define EPS 1e-9<br>using namespace std;<br> <br>int tryit(const char*a, const char*b, int m) {<br> int i=0;<br> while(1) {<br>  if (!*a || !*b) return i;<br>  if (*b != (*a-'0')*m+'0') return i;<br>  i++;a++;b++;<br> }<br>}<br> <br>class DigitMultiples {<br> public:<br>  int getLongest(string single, string multiple) {<br> <br>// BEGIN CUT HERE<br>    static bool s_FirstTime = true; if (s_FirstTime) { s_FirstTime = false; run_test(-1); }<br>// END CUT HERE<br> <br>   int i, j, k, l = 0;<br>   for (i = 0; i &lt; 10; i++)<br>    for (j = 0; j &lt; single.length(); j++)<br>     for (k = 0; k &lt; multiple.length(); k++)<br>      l &gt;?= tryit(single.c_str()+j, multiple.c_str()+k, i);<br>   return l;<br>   <br>   <br>   <br>   <br>  }<br> <br>// BEGIN CUT HERE<br>  public:<br>  void run_test(int Case) { if ((Case == -1) || (Case == 0)) test_case_0(); if ((Case == -1) || (Case == 1)) test_case_1(); if ((Case == -1) || (Case == 2)) test_case_2(); if ((Case == -1) || (Case == 3)) test_case_3(); if ((Case == -1) || (Case == 4)) test_case_4(); if ((Case == -1) || (Case == 5)) test_case_5(); if ((Case == -1) || (Case == 6)) test_case_6(); }<br>  private:<br>  template &lt;typename T&gt; string print_array(const vector&lt;T&gt; &amp;V) { ostringstream os; os &lt;&lt; "{ "; for (typename vector&lt;T&gt;::const_iterator iter = V.begin(); iter != V.end(); ++iter) os &lt;&lt; '\"' &lt;&lt; *iter &lt;&lt; "\","; os &lt;&lt; " }"; return os.str(); }<br>  void verify_case(int Case, const int &amp;Expected, const int &amp;Received) { cerr &lt;&lt; "Test Case #" &lt;&lt; Case &lt;&lt; "..."; if (Expected == Received) cerr &lt;&lt; "PASSED" &lt;&lt; endl; else { cerr &lt;&lt; "FAILED" &lt;&lt; endl; cerr &lt;&lt; "\tExpected: \"" &lt;&lt; Expected &lt;&lt; '\"' &lt;&lt; endl; cerr &lt;&lt; "\tReceived: \"" &lt;&lt; Received &lt;&lt; '\"' &lt;&lt; endl; } }<br>  void test_case_0() { string Arg0 = "3211113321571"; string Arg1 = "5555266420"; int Arg2 = 5; verify_case(0, Arg2, getLongest(Arg0, Arg1)); }<br>  void test_case_1() { string Arg0 = "100200300"; string Arg1 = "100400600"; int Arg2 = 8; verify_case(1, Arg2, getLongest(Arg0, Arg1)); }<br>  void test_case_2() { string Arg0 = "111111111100000000000000000000000000000000000"; string Arg1 = "122333444455555666666777777788888888999999999"; int Arg2 = 9; verify_case(2, Arg2, getLongest(Arg0, Arg1)); }<br>  void test_case_3() { string Arg0 = "000000000000"; string Arg1 = "000000000000"; int Arg2 = 12; verify_case(3, Arg2, getLongest(Arg0, Arg1)); }<br>  void test_case_4() { string Arg0 = "11111111111"; string Arg1 = "11111111111"; int Arg2 = 11; verify_case(4, Arg2, getLongest(Arg0, Arg1)); }<br>  void test_case_5() { string Arg0 = "89248987092734709478099"; string Arg1 = "00000000000000000000000"; int Arg2 = 23; verify_case(5, Arg2, getLongest(Arg0, Arg1)); }<br>  void test_case_6() { string Arg0 = "11111111111111111111111111111111111111111111111111"; string Arg1 = "00000000000000000000000001111111111111111111111111"; int Arg2 = 25; verify_case(6, Arg2, getLongest(Arg0, Arg1)); }<br> <br>// END CUT HERE<br> <br>};<br> <br>// Powered by PopsEdit<br>// Powered by TZTester 1.01 [25-Feb-2003]<br>// Powered by CodeProcessor<br></td>