<td class="problemText" colspan="8" valign="middle" align="left">
            //program framework generated with WishingBone's parser :)-<br> <br>//common header<br>#ifdef WIN32<br>#  pragma warning(disable:4786)<br>#  define for if (0); else for<br>#endif<br>#include &lt;iostream&gt;<br>#include &lt;iomanip&gt;<br>#include &lt;sstream&gt;<br>#include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;deque&gt;<br>#include &lt;set&gt;<br>#include &lt;map&gt;<br>#include &lt;bitset&gt;<br>#include &lt;valarray&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;functional&gt;<br>#include &lt;numeric&gt;<br>#include &lt;complex&gt;<br>#include &lt;utility&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cstring&gt;<br>#include &lt;cctype&gt;<br>#include &lt;cmath&gt;<br>using namespace std;<br> <br>//64 bit integer definition<br>#ifdef WIN32<br>#define in_routine(type,spec) \<br>istream&amp; operator&gt;&gt;(istream&amp; s,type &amp;d){char b[30];s&gt;&gt;b;sscanf(b,spec,&amp;d);return s;}<br>#define out_routine(type,spec) \<br>ostream&amp; operator&lt;&lt;(ostream&amp; s,type d){char b[30];sprintf(b,spec,d);s&lt;&lt;b;return s;}<br>typedef signed __int64 i64; in_routine(i64,"%I64d") out_routine(i64,"%I64d")<br>typedef unsigned __int64 u64; in_routine(u64,"%I64u") out_routine(u64,"%I64u")<br>#else<br>typedef signed long long i64;<br>typedef unsigned long long u64;<br>#endif<br> <br>//common routines<br>#ifdef WIN32<br>#define min(a,b) _cpp_min(a,b)<br>#define max(a,b) _cpp_max(a,b)<br>#endif<br>#define abs(a) ((a)&gt;0?(a):-(a))<br>#define s2d(s,d) istringstream(s)&gt;&gt;d<br>#define d2s(d,s) {ostringstream t;t&lt;&lt;d;s=t.str();}<br>int gcd(int a,int b){for(int c;b;c=a,a=b,b=c%b);return a;}<br>int lcm(int a,int b){return a/gcd(a,b)*b;}<br>template &lt;class T&gt;<br>void remove(vector&lt;T&gt;&amp; v,const T&amp;e){<br>  v.resize(remove(v.begin(),v.end(),e)-v.begin());<br>}<br> <br>//output routine<br>ostream&amp; operator&lt;&lt;(ostream&amp; s,string d){<br>  s&lt;&lt;'\"'&lt;&lt;d.c_str()&lt;&lt;'\"';<br>  return s;<br>}<br>template &lt;class T&gt;<br>ostream&amp; operator&lt;&lt;(ostream&amp; s,vector&lt;T&gt; d){<br>  s&lt;&lt;"{";<br>  for (typename vector&lt;T&gt;::iterator i=d.begin();i!=d.end();i++)<br>    s&lt;&lt;(i!=d.begin()?",":"")&lt;&lt;*i;<br>  s&lt;&lt;"}";<br>  return s;<br>}<br> <br>//parsing routine<br>template &lt;class T&gt;<br>vector&lt;basic_string&lt;T&gt; &gt; parse(const basic_string&lt;T&gt; &amp;s,const basic_string&lt;T&gt; &amp;delim){<br>  vector&lt;basic_string&lt;T&gt; &gt; ret(0);<br>  for (int b,e=0;;ret.push_back(s.substr(b,e-b)))<br>    if ((b=s.find_first_not_of(delim,e))==(e=s.find_first_of(delim,b)))<br>      return ret;<br>}<br>vector&lt;int&gt; intparse(const string &amp;s,const string &amp;delim=" \t\n"){<br>  vector&lt;string&gt; tmp=parse(s,delim);<br>  vector&lt;int&gt; ret(0);<br>  for (vector&lt;string&gt;::iterator i=tmp.begin();i!=tmp.end();i++)<br>    {int t;s2d(*i,t);ret.push_back(t);}<br>  return ret;<br>}<br> <br>//name mapper<br>class mapper{<br>public:<br>  map&lt;string,int&gt; m;<br>  vector&lt;string&gt; v;<br>  void reset(){<br>    v.clear();<br>    m.clear();<br>  }<br>  int size(){<br>    return v.size();<br>  }<br>  int get(string str){<br>    if (m.find(str)==m.end()){<br>      m[str]=v.size();<br>      v.push_back(str);<br>    }<br>    return m[str];<br>  }<br>  string get(int i){<br>    return v[i];<br>  }<br>};<br> <br> <br> <br>class BigCube{<br>public:<br>  <br>string largestCube(vector&lt;string&gt; range)<br>{<br>  vector &lt;pair&lt;i64,i64&gt; &gt; ra(range.size());<br>  for (int i = 0, j; i &lt; range.size(); i ++) {<br>    for (ra[i].first = 0, j = 0; j &lt; range[i].size() &amp;&amp; range[i][j] != '-'; j ++)<br>      ra[i].first = ra[i].first * 10 + range[i][j] - '0';<br>    for (ra[i].second = 0, j ++; j &lt; range[i].size(); j ++)<br>      ra[i].second = ra[i].second * 10 + range[i][j] - '0';<br>  }<br>  i64 n, nn;<br>  string res;<br>  for (n = 100000; n &gt;= 0; n --) {<br>    nn = n * n * n;<br>    for (int i = 0; i &lt; range.size(); i ++) {<br>      if (nn &gt;= ra[i].first &amp;&amp; nn &lt;= ra[i].second) {<br>        res = "";<br>        for (; nn; nn /= 10) res += nn % 10 + '0';<br>        for (int j = 0, k = res.size() - 1; j &lt; k; j ++, k --)<br>          swap(res[j], res[k]);<br>        if (res == "") res = "0";<br>        return res;<br>      }<br>    }<br>  }<br>  return "";<br>}<br> <br>};<br> <br> <br> <br> <br>#ifdef WIN32<br>void test0(){<br>  string _range[]={"1-1000000000001"};<br>  vector&lt;string&gt; range(_range+0,_range+sizeof(_range)/sizeof(string));<br>  string largestCube= "1000000000000";<br>  BigCube _BigCube;<br>  string ret=_BigCube.largestCube(range);<br>  cout&lt;&lt;"--------------------test 0--------------------"&lt;&lt;endl;<br>  cout&lt;&lt;"range = "&lt;&lt;range&lt;&lt;endl;<br>  cout&lt;&lt;"expected to return "&lt;&lt;largestCube&lt;&lt;endl;<br>  cout&lt;&lt;"your method returns "&lt;&lt;ret&lt;&lt;endl;<br>  if (ret==largestCube)<br>    cout&lt;&lt;endl&lt;&lt;"Pass!"&lt;&lt;endl&lt;&lt;endl;<br>  else<br>    cout&lt;&lt;endl&lt;&lt;"Fail!!!!!!!!!! aoao~~~~~~~~~~~~"&lt;&lt;endl&lt;&lt;endl;<br>}<br> <br>void test1(){<br>  string _range[]={"10-999999999999990","11-999999999999991","12-999999999999992", "13-999999999999993","14-999999999999994","15-999999999999995", "16-999999999999996","17-999999999999993","18-999999999999994", "19-999999999999999"};<br>  vector&lt;string&gt; range(_range+0,_range+sizeof(_range)/sizeof(string));<br>  string largestCube= "999970000299999";<br>  BigCube _BigCube;<br>  string ret=_BigCube.largestCube(range);<br>  cout&lt;&lt;"--------------------test 1--------------------"&lt;&lt;endl;<br>  cout&lt;&lt;"range = "&lt;&lt;range&lt;&lt;endl;<br>  cout&lt;&lt;"expected to return "&lt;&lt;largestCube&lt;&lt;endl;<br>  cout&lt;&lt;"your method returns "&lt;&lt;ret&lt;&lt;endl;<br>  if (ret==largestCube)<br>    cout&lt;&lt;endl&lt;&lt;"Pass!"&lt;&lt;endl&lt;&lt;endl;<br>  else<br>    cout&lt;&lt;endl&lt;&lt;"Fail!!!!!!!!!! aoao~~~~~~~~~~~~"&lt;&lt;endl&lt;&lt;endl;<br>}<br> <br>void test2(){<br>  string _range[]={"0-3","10-20","30-60","80-120"};<br>  vector&lt;string&gt; range(_range+0,_range+sizeof(_range)/sizeof(string));<br>  string largestCube= "1";<br>  BigCube _BigCube;<br>  string ret=_BigCube.largestCube(range);<br>  cout&lt;&lt;"--------------------test 2--------------------"&lt;&lt;endl;<br>  cout&lt;&lt;"range = "&lt;&lt;range&lt;&lt;endl;<br>  cout&lt;&lt;"expected to return "&lt;&lt;largestCube&lt;&lt;endl;<br>  cout&lt;&lt;"your method returns "&lt;&lt;ret&lt;&lt;endl;<br>  if (ret==largestCube)<br>    cout&lt;&lt;endl&lt;&lt;"Pass!"&lt;&lt;endl&lt;&lt;endl;<br>  else<br>    cout&lt;&lt;endl&lt;&lt;"Fail!!!!!!!!!! aoao~~~~~~~~~~~~"&lt;&lt;endl&lt;&lt;endl;<br>}<br> <br>void test3(){<br>  string _range[]={"999700030000-999999999999","999400119993-999700029998", "999100269974-999400119991","998800479937-999100269972"};<br>  vector&lt;string&gt; range(_range+0,_range+sizeof(_range)/sizeof(string));<br>  string largestCube= "";<br>  BigCube _BigCube;<br>  string ret=_BigCube.largestCube(range);<br>  cout&lt;&lt;"--------------------test 3--------------------"&lt;&lt;endl;<br>  cout&lt;&lt;"range = "&lt;&lt;range&lt;&lt;endl;<br>  cout&lt;&lt;"expected to return "&lt;&lt;largestCube&lt;&lt;endl;<br>  cout&lt;&lt;"your method returns "&lt;&lt;ret&lt;&lt;endl;<br>  if (ret==largestCube)<br>    cout&lt;&lt;endl&lt;&lt;"Pass!"&lt;&lt;endl&lt;&lt;endl;<br>  else<br>    cout&lt;&lt;endl&lt;&lt;"Fail!!!!!!!!!! aoao~~~~~~~~~~~~"&lt;&lt;endl&lt;&lt;endl;<br>}<br> <br>void test4(){<br>  string _range[]={"0-0","2-2","3-3","4-4","5-5","6-6","7-7","9-9","10-10","12-12", "14-14","16-16","18-18","20-20","22-22","24-24","26-26","28-28", "30-30","32-32","34-34","36-36","38-38","40-40","42-42","44-44", "46-46","48-48","50-50","52-52","54-54","56-56","58-58","60-60", "62-62","65-65","67-67","69-69","71-71","73-73","75-75","77-77", "79-79","81-81","83-83","85-85","87-87","89-89","99-99",  "999970000300000-999999999999999" };<br>  vector&lt;string&gt; range(_range+0,_range+sizeof(_range)/sizeof(string));<br>  string largestCube= "0";<br>  BigCube _BigCube;<br>  string ret=_BigCube.largestCube(range);<br>  cout&lt;&lt;"--------------------test 4--------------------"&lt;&lt;endl;<br>  cout&lt;&lt;"range = "&lt;&lt;range&lt;&lt;endl;<br>  cout&lt;&lt;"expected to return "&lt;&lt;largestCube&lt;&lt;endl;<br>  cout&lt;&lt;"your method returns "&lt;&lt;ret&lt;&lt;endl;<br>  if (ret==largestCube)<br>    cout&lt;&lt;endl&lt;&lt;"Pass!"&lt;&lt;endl&lt;&lt;endl;<br>  else<br>    cout&lt;&lt;endl&lt;&lt;"Fail!!!!!!!!!! aoao~~~~~~~~~~~~"&lt;&lt;endl&lt;&lt;endl;<br>}<br> <br>int main(){<br>  test0();<br>  test1();<br>  test2();<br>  test3();<br>  test4();<br>  return 0;<br>}<br>#endif<br></td>