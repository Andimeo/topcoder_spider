<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;vector&gt;<br>#include &lt;string&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;utility&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;sstream&gt;<br>#include &lt;iostream&gt;<br>#include &lt;iterator&gt;<br>#include &lt;functional&gt;<br>using namespace std;<br> <br>//////////////////////////////////////////////////////////////////////////////<br>///////////////////////////Utility Code//////////////////////////////////////<br>////////////////////////////////////////////////////////////////////////////<br> <br>string NumString(int number)<br>{<br>  stringstream c;<br>  c&lt;&lt;number;<br>  return c.str();<br>}<br> <br>vector&lt;string&gt; tokenize(string &amp;line, const string delims=" \t,;")<br>{<br>  vector&lt;string&gt; words;<br>  string ret="";<br>  int count=0;<br>  string::size_type begIdx, endIdx;<br>  begIdx=line.find_first_not_of(delims);<br>  while(begIdx != string::npos)<br>  {<br>    words.push_back("");<br>    endIdx=line.find_first_of(delims, begIdx);<br>    if(endIdx==string::npos)<br>      endIdx=line.length();<br>    for(int i=begIdx; i&lt;static_cast&lt;int&gt;(endIdx); ++i)<br>    {<br>      words[count]+=line[i];<br>      ret+=line[i];<br>    }<br>    ret+=' ';<br>    begIdx=line.find_first_not_of(delims, endIdx);<br>    count++;<br>  }<br>  line=ret;<br>  return words;<br>}<br> <br>string tokenize_block(string &amp;line,const string delims=" ")<br>{<br>  for(int idx=0;idx&lt;line.size();)<br>    if(line.substr(idx,delims.length())==delims)<br>      line.replace(idx,delims.length(), "");<br>    else<br>      ++idx;<br>  return line;<br>}<br> <br>/////////////////////////////////////////////////////////////////////////////<br>///////////////////////////////Contest Code/////////////////////////////////<br>///////////////////////////////////////////////////////////////////////////<br> <br>struct Education<br>{<br>  int minimize(string desire, vector&lt;int&gt; tests)<br>  {<br>    int d;<br>    if(desire=="A")<br>      d=90;<br>    if(desire=="B")<br>      d=80;<br>    if(desire=="C")<br>      d=70;<br>    if(desire=="D")<br>      d=60;<br>    for(int c=0;c&lt;=100;c++)<br>    {<br>      int f=0;<br>      for(int d=0;d&lt;tests.size();d++)<br>        f+=tests[d];<br>      if((double)(f+c)/(tests.size()+1)&gt;=d)<br>        return c;<br>    }<br>    return -1;<br>  }<br>};<br></td>