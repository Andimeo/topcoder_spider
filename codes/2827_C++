<td class="problemText" colspan="8" valign="middle" align="left">
            #line 2 "ChangeOptimizer.cpp"<br><br>#include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;ctype.h&gt;<br>#include &lt;math.h&gt;<br>#include &lt;iostream&gt;<br>#include &lt;set&gt;<br>#include &lt;sstream&gt;<br>#include &lt;map&gt;<br>#include &lt;complex&gt;<br><br>using namespace std;<br><br>typedef vector&lt;string&gt; vs;<br>typedef vector&lt;int&gt; vi;<br>typedef long long ll;<br>typedef long double ld;<br> <br>#define LS &lt;<br>#define FOR(k,a,b) for(typeof(a) k=(a); k LS (b); k++)<br>#define SIZE(x) (int(x.size()))<br>#define LET(k,val) typeof(val) k = (val)<br> <br>#define CLC(act,val) (*({act; static typeof(val) CLCR; CLCR = (val); &amp;CLCR;}))<br> <br>#define FIRST(k,a,b,cond) CLC(LET(k, a); for(; k LS (b); k++) if(cond) break, k)<br>#define EXISTS(k,a,b,cond) (FIRST(k,a,b,cond) LS (b))<br>#define FORALL(k,a,b,cond) (!EXISTS(k,a,b,!(cond)))<br> <br>#define FOLD0(k,a,b,init,act) CLC(LET(k, a); LET(R##k, init); for(; k LS (b); k++) {act;}, R##k)<br>#define SUMTO(k,a,b,init,x)  FOLD0(k,a,b,init,R##k += (x))<br>#define PRODTO(k,a,b,init,x) FOLD0(k,a,b,init,R##k *= (x))<br>#define MAXTO(k,a,b,init,x)  FOLD0(k,a,b,init,R##k &gt;?= (x))<br>#define MINTO(k,a,b,init,x)  FOLD0(k,a,b,init,R##k &lt;?= (x))<br>#define SUM(k,a,b,x) SUMTO(k,a,b,(typeof(x)) (0), x)<br>#define PROD(k,a,b,x) PRODTO(k,a,b,(typeof(x)) (1), x)<br> <br>#define FOLD1(k,a,b,init,act) CLC(LET(k, a); LET(R##k, init); for(k++; k LS (b); k++) act, R##k)<br>#define MAX(k,a,b,x) FOLD1(k,a,b,x, R##k &gt;?= (x))<br>#define MIN(k,a,b,x) FOLD1(k,a,b,x, R##k &lt;?= (x))<br> <br><br>ll cv[200], mc[200];<br><br>class ChangeOptimizer {<br>  public:<br>  vector &lt;int&gt; fewestCoins(vector &lt;int&gt; coinTypes, int value) {<br>    vi cts = coinTypes;<br>    sort(coinTypes.begin(), coinTypes.end());<br>    value++;<br>    if(FORALL(k,0,SIZE(coinTypes), coinTypes[k] != value)) coinTypes.push_back(value);<br>    int N = SIZE(coinTypes);<br>    FOR(k,0,N) cv[k] = coinTypes[k];<br>    mc[0] = 0;<br>    FOR(l,1,N) mc[l] = <br>      MIN(m,0,l, (cv[l] % cv[m] == 0) ? mc[m] + (cv[l] / cv[m]) - 1 : 2000000000);<br>//  FOR(l,0,N) printf("%Ld:%Ld ", cv[l], mc[l]); printf("\n");<br>    vector&lt;int&gt; res;<br>    FOR(k,0,N) res.push_back(0);<br>    int s = FIRST(k,0,N, cv[k] == value);<br>    while(s) {<br>      int s1 = s - 1;<br>      while(s1 &amp;&amp; (cv[s] % cv[s1] || mc[s] != mc[s1] + (cv[s] / cv[s1]) - 1)) s1--;<br>//    printf("s1 = %d\n", s1);<br>      res[s1] = cv[s] / cv[s1] - 1;<br>      s = s1;<br>      }<br>    vector&lt;int&gt; res1;<br>    FOR(k,0,N-1) res1.push_back(res[FIRST(l,0,N, cv[l] == cts[k])]);<br>    return res1;<br>    }<br>  <br> <br>  };<br><br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003]<br>// Powered by CodeProcessor<br></td>