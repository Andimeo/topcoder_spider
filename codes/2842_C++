<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;algorithm&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cctype&gt;<br>#include &lt;cmath&gt;<br>#include &lt;iostream&gt;<br>#include &lt;sstream&gt;<br>#include &lt;string&gt;<br>#include &lt;utility&gt;<br>#include &lt;vector&gt;<br>using namespace std;<br>#define VAR(a,b) typeof(b) a=(b)<br>#define REP(i,n) for(int _n=n, i=0;i&lt;_n;++i)<br>#define FOR(i,a,b) for(int i=(a),_b=(b);i&lt;=_b;++i)<br>#define FORD(i,a,b) for(int i=(a),_b=(b);i&gt;=_b;--i)<br>#define FOREACH(it,c) for(VAR(it,(c).begin());it!=(c).end();++it)<br>#define ALL(f,w) ({ bool _ok=true; f _ok=_ok &amp;&amp; (w); _ok; })<br>#define EXISTS(f,w) (!ALL(f,!(w)))<br>typedef long long LL;<br>const int INF = 1000000000;<br>typedef vector&lt;int&gt; VI;<br>template&lt;class T&gt; inline int size(const T&amp;c) { return c.size(); }<br>template&lt;class T&gt; inline vector&lt;T&gt; makeV(const T&amp;x) { return vector&lt;T&gt;(1,x); }<br>template&lt;class T&gt; inline vector&lt;T&gt; makeV(const T&amp;x,const T&amp;y) {<br>  vector&lt;T&gt; v(2); v[0] = x; v[1] = y; return v;<br>}<br>template&lt;class T&gt; inline vector&lt;T&gt; makeV(const T&amp;x,const T&amp;y,const T&amp;z) {<br>  vector&lt;T&gt; v(3); v[0] = x; v[1] = y; v[2]=z; return v;<br>}<br>template&lt;class A,class B&gt; inline bool contains(const A&amp;a, const B&amp;b) {<br>  return find(a.begin(),a.end(),b)!=a.end();<br>}<br>template&lt;class T&gt; string i2s(T x) { ostringstream o; o&lt;&lt;x; return o.str(); }<br>vector&lt;string&gt; split(string s,string del=" ") {<br>  s+=del[0];<br>  string w;<br>  vector&lt;string&gt; res;<br>  FOREACH(it,s) {<br>    if(!contains(del,*it)) w+=*it;<br>    else if(w!="") { res.push_back(w); w=""; }<br>  }<br>  return res;<br>}<br> <br>///////////////////////////////////////////////////////////////////<br> <br>bool dasie(VI tab, VI s) {<br>  sort(s.begin(),s.end());<br>  int p =0;<br>  int prev = -INF;<br>  REP(x, size(tab)) {<br>    while(p&lt;size(s) &amp;&amp; s[p] &lt; prev) ++p;<br>    if(tab[x] &lt; prev || p &lt; size(s) &amp;&amp; s[p] &lt; tab[x]) {<br>      if(p==size(s)) return false;<br>      prev = s[p++];<br>    }<br>    else prev = tab[x];<br>  }<br>  return true;<br>}<br> <br>struct Sortitaire {<br>  // MAIN<br>  int turns(vector &lt;int&gt; tab, vector &lt;int&gt; stock) {<br>    int a = -1, b = size(stock)+1;<br>    while(b-a&gt;1) {<br>      int c = (a+b)/2;<br>      VI v; REP(i,c) v.push_back(stock[i]);<br>      if(dasie(tab,v)) b=c; else a=c;<br>    }<br>    if(b&gt;size(stock)) return -1; else return b;<br>  }<br> <br> <br>  <br>///////////////////////////////////////////////////////////////////<br> <br> <br> <br> <br>};<br> <br> <br> <br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003]<br>// Powered by CodeProcessor<br></td>