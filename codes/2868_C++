<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;iostream&gt;<br>#include &lt;sstream&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;queue&gt;<br>#include &lt;vector&gt;<br>#include &lt;string&gt;<br>#include &lt;string.h&gt;<br>#include &lt;stdlib.h&gt;<br>#include &lt;ctype.h&gt;<br>#include &lt;stdio.h&gt;<br>#include &lt;math.h&gt;<br> <br>using namespace std;<br> <br>#define REP(i,n) for(int i=0;i&lt;(n);++i)<br>#define FOR(i,a,b) for(int i=(a);i&lt;=(b);++i)<br>#define FORD(i,a,b) for(int i=(a);i&gt;=(b);--i)<br>#define FOREACH(i,c) for(__typeof((c).begin()) i=(c).begin();i!=(c).end();++i)<br>#define ALL(x) (x).begin(),(x).end()<br>const int INF = 1000000000;<br>typedef long long LL;<br>typedef vector&lt;int&gt; VI;<br> <br>string joinStr(vector&lt;string&gt; v, string add=" "){<br>  string ret = "";<br>  for(int i=0; i&lt;v.size()-1; i++){<br>    ret+=v[i]+add;<br>  }<br>  ret+=v[v.size()-1];<br>  return ret;<br>}<br> <br>string stripStr(string s, string delim = " "){<br>string ret="";<br>while(s.size() &gt; 0){<br>if(s.find(delim,0) != string::npos){<br>ret += s.substr(0,s.find(delim,0));<br>s.erase(0, s.find(delim,0) + delim.size());<br>}<br>else break;<br>}<br>if(s.size() &gt; 0) ret += s;<br>return ret;<br>}<br>    <br> <br>vector&lt;string&gt; splitStr(string s, string delim = " ", int times=2){<br>vector&lt;string&gt; ret;<br>while(s.size()&gt;0 &amp;&amp; ret.size() &lt; times){<br>if(s.find(delim, 0) != string::npos){<br>ret.push_back(s.substr(0,s.find(delim, 0)));<br>s.erase(0,s.find(delim, 0)+delim.size());<br>}<br>else break;<br>}<br>if(s.size() &gt; 0) ret.push_back(s);<br>return ret;<br>}<br> <br>class NoOrderOfOperations {<br>public:<br>int evaluate(string expr) {<br>  int tot = expr[0]-'0';<br>  for(int i=1; i&lt;expr.size(); i+=2){<br>    int n = expr[i+1]-'0';<br>    switch(expr[i]){<br>      case '+': tot+=n;<br>      break;<br>      case '-': tot-=n;<br>      break;<br>      case '*': tot*=n;<br>      break;<br>    }<br>  }<br>  return tot;<br>    <br>}<br>};<br> <br>// Powered by PopsEdit<br></td>