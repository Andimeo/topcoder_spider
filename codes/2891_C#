<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections;<br>using System.Collections.Specialized;<br> <br>public class RedSquare{<br> public int countTheEmptyReds(int m, int n, int[] r, int[] f){<br>  int[,] a=new int[m,n];<br>    for (int i=0;i&lt;m;i++)<br>      for (int j=0;j&lt;n;j++) if ((i+j)%2==(m+n-1)%2) a[i,j]=-1; else a[i,j]=-2;<br>    for (int i=0;i&lt;r.Length;i++)  a[m-r[i],f[i]-1]=1;<br>    int d=0;<br>    for (int i=0;i&lt;m;i++)<br>      for (int j=0;j&lt;n;j++)<br>       if (a[i,j]==-1) d++;<br>    return d;<br> }<br> public static void Main(string[] args){<br>  __Compare(1, new RedSquare().countTheEmptyReds(3, 5, new int[]{ 1, 2, 2 }, new int[]{ 4, 1, 2 }), 5);<br>  __Compare(2, new RedSquare().countTheEmptyReds(3, 3, new int[]{ 1, 2, 3, 1, 2, 3, 1, 2, 3 }, new int[]{ 1, 1, 1, 2, 2, 2, 3, 3, 3 }), 0);<br>  __Compare(3, new RedSquare().countTheEmptyReds(5, 5, new int[]{ 1, 1, 2, 2, 2, 3, 3, 4, 4, 4, 5, 5 }, new int[]{ 2, 4, 1, 3, 5, 2, 4, 1, 3, 5, 2, 4 }), 0);<br>  __Compare(4, new RedSquare().countTheEmptyReds(5, 6, new int[]{ 1, 1, 2, 2, 2, 3, 3, 4, 4, 4, 5, 5 }, new int[]{ 2, 4, 1, 3, 5, 2, 4, 1, 3, 5, 2, 4 }), 15);<br>  __Compare(5, new RedSquare().countTheEmptyReds(1, 1, new int[]{  }, new int[]{  }), 0);<br>  __Compare(6, new RedSquare().countTheEmptyReds(50, 50, new int[]{ 1 }, new int[]{ 1 }), 1249);<br>  __Compare(7, new RedSquare().countTheEmptyReds(50, 50, new int[]{ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 }, new int[]{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 }), 1225);<br> }<br> static void __Compare(int index, object got, object expected){<br>  if(__Equal(got, expected))<br>   Console.WriteLine("\nCase " + index + ": Pass");<br>  else{<br>  Console.WriteLine("\nCase " + index + ": Fail");<br>  Console.WriteLine("Expected: " + __GetString(expected));<br>  Console.WriteLine("Received: " + __GetString(got));<br>  }<br> }<br> static bool __Equal(object got, object expected){<br>  if(got is Array &amp;&amp; expected is Array){<br>   Array g = (Array)got, e = (Array)expected;<br>   if(g.Length != e.Length) return false;<br>   for(int i = 0; i &lt; g.Length; i++)<br>    if(!__Equal(g.GetValue(i), e.GetValue(i)))<br>     return false;<br>   return true;<br>  }<br>  else<br>   return expected.Equals(got);<br> }<br> static string __GetString(object obj){<br>  if(obj is Array){<br>   string rv = "";<br>   Array o = (Array)obj;<br>   if(o.Length == 0) return "{}";<br>   for(int i = 0; i &lt; o.Length; i++)<br>    rv += __GetString(o.GetValue(i)) + ", ";<br>   return "{ " + rv.Substring(0, rv.Length - 2) + " }";<br>  }<br>  else if(obj is string)<br>   return '"' + (string)obj + '"';<br>  else<br>   return obj.ToString();<br> }<br>}<br></td>