<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;vector&gt;<br>#include &lt;string&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;set&gt;<br>#include &lt;iostream&gt;<br>#include &lt;map&gt;<br>#include &lt;functional&gt;<br>#include &lt;deque&gt;<br>#include &lt;sstream&gt;<br>#include &lt;numeric&gt;<br><br>using namespace std;<br><br>char *monabbriv[] = {"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"};<br><br>vector&lt; int &gt; ptim( string in ) {<br>  int day;<br>  char month[ 4 ];<br>  int yr;<br>  int hr;<br>  int min;<br>  int sec;<br>  char ampm[ 3 ];<br>  sscanf( in.c_str(), "%d %s %d at %d:%d:%d %s", &amp;day, month, &amp;yr, &amp;hr, &amp;min, &amp;sec, ampm );<br>  int mon;<br>  for( mon = 0; 1; mon++ )<br>    if( strcmp( monabbriv[ mon ], month ) == 0 )<br>      break;<br>  if( hr == 12 )<br>    hr = 0;<br>  if( strcmp( ampm, "PM" ) == 0 ) {<br>    hr += 12;<br>  }<br>  day--;<br>  vector&lt; int &gt; mkd;<br>  mkd.push_back( yr );<br>  mkd.push_back( mon );<br>  mkd.push_back( day );<br>  mkd.push_back( hr );<br>  mkd.push_back( min );<br>  mkd.push_back( sec );<br>  return mkd;<br>}<br><br><br>int moma[] = { 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 };<br>int momay[] = { 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };<br><br>int gmamo( vector&lt; int &gt; &amp;in ) {<br>  int yamo = 0;<br>  if( in[ 0 ] % 400 == 0 ) {<br>    yamo = 1;<br>  } else if( in[ 0 ] % 100 == 0 ) {<br>    yamo = 0;<br>  } else if( in[ 0 ] % 4 == 0 ) {<br>    yamo = 1;<br>  } else {<br>    yamo = 0;<br>  }<br>  return moma[ in[ 1 ] ] + momay[ in[ 1 ] ] * yamo;<br>}<br><br>void increy( vector&lt; int &gt; &amp;in ) {<br>  in[ 0 ]++;<br>  // YAY<br>}<br><br>void increo( vector&lt; int &gt; &amp;in ) {<br>  in[ 1 ]++;<br>  if( in[ 1 ] == 12 ) {<br>    in[ 1 ] = 0;<br>    increy( in );<br>  }<br>}<br><br>void incred( vector&lt; int &gt; &amp;in ) {<br>  in[ 2 ]++;<br>  if( in[ 2 ] == gmamo( in ) ) {<br>    in[ 2 ] = 0;<br>    increo( in );<br>  }<br>}<br><br>void increh( vector&lt; int &gt; &amp;in ) {<br>  in[ 3 ]++;<br>  if( in[ 3 ] == 24 ) {<br>    in[ 3 ] = 0;<br>    incred( in );<br>  }<br>}<br><br>void increm( vector&lt; int &gt; &amp;in ) {<br>  in[ 4 ]++;<br>  if( in[ 4 ] == 60 ) {<br>    in[ 4 ] = 0;<br>    increh( in );<br>  }<br>}<br><br>void incres( vector&lt; int &gt; &amp;in ) {<br>  in[ 5 ]++;<br>  if( in[ 5 ] == 60 ) {<br>    in[ 5 ] = 0;<br>    increm( in );<br>  }<br>}<br><br>class Uptime {<br>  public:<br>  string calcUptime(string started, string now) {<br>    vector&lt; int &gt; st = ptim( started );<br>    vector&lt; int &gt; nw = ptim( now );<br>    vector&lt; int &gt; delt( 6, 0 );<br>    while( st[ 5 ] != nw[ 5 ] ) {<br>      delt[ 5 ]++;<br>      incres( st );<br>    }<br>    while( st[ 4 ] != nw[ 4 ] ) {<br>      delt[ 4 ]++;<br>      increm( st );<br>    }<br>    while( st[ 3 ] != nw[ 3 ] ) {<br>      delt[ 3 ]++;<br>      increh( st );<br>    }<br>    while( st != nw ) {<br>      delt[ 2 ]++;<br>      incred( st );<br>    }<br>    string oat;<br>    if( delt[ 2 ] ) {<br>      char bef[ 128 ];<br>      sprintf( bef, "%dd ", delt[ 2 ] );<br>      oat += bef;<br>    }<br>    if( delt[ 3 ] ) {<br>      char bef[ 128 ];<br>      sprintf( bef, "%dh ", delt[ 3 ] );<br>      oat += bef;<br>    }<br>    if( delt[ 4 ] ) {<br>      char bef[ 128 ];<br>      sprintf( bef, "%dm ", delt[ 4 ] );<br>      oat += bef;<br>    }<br>    if( delt[ 5 ] ) {<br>      char bef[ 128 ];<br>      sprintf( bef, "%ds ", delt[ 5 ] );<br>      oat += bef;<br>    }<br>    if( oat.size() ) {<br>      oat.erase( oat.end() - 1, oat.end() );<br>    }<br>    return oat;<br>  }<br>};<br><br><br><br>// Powered by FileEdit<br></td>