<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>public class TCSocks {<br>  <br>  int[][] parse(String[] t){<br>    int[][] ret = new int[t.length][t.length];<br>    for(int i = 0; i &lt; t.length; i++){<br>      StringTokenizer st = new StringTokenizer(t[i]);<br>      for(int j = 0; j &lt; t.length; j++){<br>        ret[i][j] = Integer.parseInt(st.nextToken());<br>      }<br>    }<br>    return ret;<br>  }<br>  int[][] costs, times, profit;<br>  int best = 0;<br>  public int earnMoney(int[] money, String[] cost, String[] time, String[] competitors) {<br>    costs = parse(cost);<br>    times = parse(time);<br>    profit = parse(money, competitors);<br>    doit(0, 0, 0, 0);<br>    return best;<br>  }<br>  void doit(int visited, int city, int time, int soFar){<br>    if(city == 0 &amp;&amp; time != 0){<br>      best = Math.max(best, soFar);<br>      return;<br>    }<br>    soFar += profit[city][time];<br>    for(int i = 0; i &lt; times.length; i++){<br>      if(((1&lt;&lt;i)&amp;visited) != 0) continue;<br>      doit(visited | (1&lt;&lt;i), i, time + times[city][i], soFar - costs[city][i]);<br>    }<br>  }<br>  int[][] parse(int[] money, String[] competitors){<br>    int[][] ret = new int[money.length][100];<br>    for(int i = 0; i &lt; ret.length; i++){<br>      Arrays.fill(ret[i], money[i]);<br>    }<br>    for(int i = 0; i &lt; competitors.length; i++){<br>      int time = 0;<br>      int city = 0;<br>      StringTokenizer st = new StringTokenizer(competitors[i]);<br>      while(st.hasMoreTokens()){<br>        int to = Integer.parseInt(st.nextToken());<br>        time += times[city][to];<br>        halve(ret[to],time);<br>        city = to;<br>      }<br>    }<br>    return ret;<br>  }<br>  <br>  void halve(int[] t, int from){<br>    for(int i = from; i &lt; t.length; i++){<br>      t[i] /= 2;<br>    }<br>  }<br> <br> <br>// ##################### NO POINT LOOKING BELOW, TESTCODE ONLY ####################<br> <br> <br>/** begin cut - don't modify this line*/<br>  public static void main(String[] a) {<br>    new TCSocks().runTestCase(0);<br>    new TCSocks().runTestCase(1);<br>    new TCSocks().runTestCase(2);<br>    new TCSocks().runTestCase(3);<br>    new TCSocks().runTestCase(4);<br>    new TCSocks().runTestCase(5);<br>  }<br> <br>  public void runTestCase(int nbr) {<br>    switch(nbr) {<br>      case 0 : {<br>        checkOutput(earnMoney(new int[] {0, 100, 100, 100}, new String[] {"0 50 50 200", "0 0 50 200", "0 10 0 200", "0 0 0 0"}, new String[] {"0 1 1 1", "1 0 1 1", "1 1 0 1", "1 1 1 0"}, new String[] {}), 140, 0); break;<br>      }<br>      case 1 : {<br>        checkOutput(earnMoney(new int[] {0, 100, 100, 100}, new String[] {"0 50 50 200", "0 0 50 200", "0 10 0 200", "0 0 0 0"}, new String[] {"0 1 1 1", "1 0 1 1", "1 1 0 1", "1 1 1 0"}, new String[] {"3", "2 3 1", "2 1"}), 50, 1); break;<br>      }<br>      case 2 : {<br>        checkOutput(earnMoney(new int[] {0, 100, 200}, new String[] {"0 20 10", "10 0 20", "20 10 0"}, new String[] {"0 1 5", "1 0 1", "1 1 0"}, new String[] {"2", "2"}), 240, 2); break;<br>      }<br>      case 3 : {<br>        checkOutput(earnMoney(new int[] {0, 40, 40, 40, 40, 40}, new String[] {"0 25 25 25 25 25", "25 0 25 25 25 25", "25 25 0 25 25 25",   "25 25 25 0 25 25", "25 25 25 25 0 25", "25 25 25 25 25 0"}, new String[] {"0 1 1 1 1 1", "1 0 1 1 1 1", "1 1 0 1 1 1", "1 1 1 0 1 1", "1 1 1 1 0 1", "1 1 1 1 1 0"}, new String[] {"1", "2", "3", "4", "5"}), 0, 3); break;<br>      }<br>      case 4 : {<br>        checkOutput(earnMoney(new int[] {0, 70, 70, 70, 70, 70}, new String[] {"0 25 25 25 25 25", "25 0 25 25 25 25", "25 25 0 25 25 25",   "25 25 25 0 25 25", "25 25 25 25 0 25", "25 25 25 25 25 0"}, new String[] {"0 1 1 1 1 1", "1 0 1 1 1 1", "1 1 0 1 1 1", "1 1 1 0 1 1", "1 1 1 1 0 1", "1 1 1 1 1 0"}, new String[] {"1", "2", "3", "4", "5"}), 25, 4); break;<br>      }<br>      case 5 : {<br>        checkOutput(earnMoney(new int[] {0,457,434,382,818,403,265,449,214}, new String[] {"0 204 600 800 885 542 439 823 913",  "32 0 813 687 242 129 34 447 862",  "56 462 0 727 71 309 461 867 200",  "656 96 334 0 178 650 108 477 547",  "89 856 922 495 0 821 374 100 651",  "634 810 319 947 322 0 283 227 286",  "446 416 272 551 243 880 0 47 878",  "390 315 221 765 938 732 747 0 435",  "902 616 166 830 223 406 736 712 0"}, new String[] {"0 1 10 6 5 5 4 7 6",  "5 0 2 7 3 2 1 4 2",  "1 9 0 8 6 1 3 9 9",  "2 8 8 0 1 9 10 4 5",  "8 8 2 7 0 5 3 9 1",  "6 8 9 9 3 0 7 4 7",  "10 8 9 10 7 1 0 9 4",  "8 6 5 1 6 6 5 0 4",  "3 8 4 4 6 10 10 3 0"}, new String[] {"1 8 2 5 4 7 6","6 2 4","8 7"}), 785, 5); break;<br>      }<br>    }<br>  }<br>  final void checkOutput(int mine, int them, int nbr) {<br>    boolean success = (mine==them);<br>    StringBuffer out = new StringBuffer();<br>    out.append("Example ");<br>    out.append((nbr+1));<br>    out.append(" - ");<br>    out.append(success ? "success" : "failure   ");<br>    if(!success) {<br>      out.append("Got: ");<br>      out.append(mine);<br>      out.append(", Expected: ");<br>      out.append(them);<br>    }<br>    System.out.println(out);<br>  }<br>  final void checkOutput(long mine, long them, int nbr) {<br>    boolean success = (mine==them);<br>    StringBuffer out = new StringBuffer();<br>    out.append("Example ");<br>    out.append((nbr+1));<br>    out.append(" - ");<br>    out.append(success ? "success" : "failure   ");<br>    if(!success) {<br>      out.append("Got: ");<br>      out.append(mine);<br>      out.append(", Expected: ");<br>      out.append(them);<br>    }<br>    System.out.println(out);<br>  }<br>  final void checkOutput(double mine, double them, int nbr) {<br>    boolean success = doubleCompare(mine, them);<br>    StringBuffer out = new StringBuffer();<br>    out.append("Example ");<br>    out.append((nbr+1));<br>    out.append(" - ");<br>    out.append(success ? "success" : "failure   ");<br>    if(!success) {<br>      out.append("Got: ");<br>      out.append(mine);<br>      out.append(", Expected: ");<br>      out.append(them);<br>    }<br>    System.out.println(out);<br>  }<br>  private static boolean doubleCompare(double expected, double result){<br>    double MAX_DOUBLE_ERROR = 1E-9;<br>    if(Double.isNaN(expected)){<br>      return Double.isNaN(result);<br>    }else if(Double.isInfinite(expected)){<br>      if(expected &gt; 0){<br>        return result &gt; 0 &amp;&amp; Double.isInfinite(result);<br>      }else{<br>        return result &lt; 0 &amp;&amp; Double.isInfinite(result);<br>      }<br>    }else if(Double.isNaN(result) || Double.isInfinite(result)){<br>      return false;<br>    }else if(Math.abs(result - expected) &lt; MAX_DOUBLE_ERROR){<br>      return true;<br>    }else{<br>      double min = Math.min(expected * (1.0 - MAX_DOUBLE_ERROR),<br>        expected * (1.0 + MAX_DOUBLE_ERROR));<br>      double max = Math.max(expected * (1.0 - MAX_DOUBLE_ERROR),<br>          expected * (1.0 + MAX_DOUBLE_ERROR));<br>      return result &gt; min &amp;&amp; result &lt; max;<br>    }<br>  }<br>  final void checkOutput(char mine, char them, int nbr) {<br>    boolean success = (mine==them);<br>    StringBuffer out = new StringBuffer();<br>    out.append("Example ");<br>    out.append((nbr+1));<br>    out.append(" - ");<br>    out.append(success ? "success" : "failure   ");<br>    if(!success) {<br>      out.append("Got: ");<br>      out.append("'");<br>      out.append(mine);<br>      out.append("'");<br>      out.append(", Expected: ");<br>      out.append("'");<br>      out.append(them);<br>      out.append("'");<br>    }<br>    System.out.println(out);<br>  }<br>  final void checkOutput(String mine, String them, int nbr) {<br>    boolean success = (mine.equals(them));<br>    StringBuffer out = new StringBuffer();<br>    out.append("Example ");<br>    out.append((nbr+1));<br>    out.append(" - ");<br>    out.append(success ? "success" : "failure   ");<br>    if(!success) {<br>      out.append("Got: ");<br>      out.append("\"");<br>      out.append(mine);<br>      out.append("\"");<br>      out.append(", Expected: ");<br>      out.append("\"");<br>      out.append(them);<br>      out.append("\"");<br>    }<br>    System.out.println(out);<br>  }<br>  final void checkOutput(long[] mine, long[] them, int nbr) {<br>    boolean success = (Arrays.equals(mine, them));<br>    StringBuffer out = new StringBuffer();<br>    out.append("Example ");<br>    out.append((nbr+1));<br>    out.append(" - ");<br>    out.append(success ? "success" : "failure   ");<br>    if(!success) {<br>      out.append("Got: ");<br>      out.append("{");<br>      for(int x=0;x&lt;mine.length;x++) {<br>        out.append(mine[x]);<br>        if(x&lt;mine.length-1) out.append(", ");<br>      }<br>      out.append("}");<br>      out.append(", Expected: ");<br>      out.append("{");<br>      for(int x=0;x&lt;them.length;x++) {<br>        out.append(them[x]);<br>        if(x&lt;them.length-1) out.append(", ");<br>      }<br>      out.append("}");<br>    }<br>    System.out.println(out);<br>  }<br>  final void checkOutput(char[] mine, char[] them, int nbr) {<br>    boolean success = (Arrays.equals(mine, them));<br>    StringBuffer out = new StringBuffer();<br>    out.append("Example ");<br>    out.append((nbr+1));<br>    out.append(" - ");<br>    out.append(success ? "success" : "failure   ");<br>    if(!success) {<br>      out.append("Got: ");<br>      out.append("{");<br>      for(int x=0;x&lt;mine.length;x++) {<br>        out.append(mine[x]);<br>        if(x&lt;mine.length-1) out.append(", ");<br>      }<br>      out.append("}");<br>      out.append(", Expected: ");<br>      out.append("{");<br>      for(int x=0;x&lt;them.length;x++) {<br>        out.append(them[x]);<br>        if(x&lt;them.length-1) out.append(", ");<br>      }<br>      out.append("}");<br>    }<br>    System.out.println(out);<br>  }<br>  final void checkOutput(double[] mine, double[] them, int nbr) {<br>    boolean success = (Arrays.equals(mine, them));<br>    StringBuffer out = new StringBuffer();<br>    out.append("Example ");<br>    out.append((nbr+1));<br>    out.append(" - ");<br>    out.append(success ? "success" : "failure   ");<br>    if(!success) {<br>      out.append("Got: ");<br>      out.append("{");<br>      for(int x=0;x&lt;mine.length;x++) {<br>        out.append(mine[x]);<br>        if(x&lt;mine.length-1) out.append(", ");<br>      }<br>      out.append("}");<br>      out.append(", Expected: ");<br>      out.append("{");<br>      for(int x=0;x&lt;them.length;x++) {<br>        out.append(them[x]);<br>        if(x&lt;them.length-1) out.append(", ");<br>      }<br>      out.append("}");<br>    }<br>    System.out.println(out);<br>  }<br>  final void checkOutput(int[] mine, int[] them, int nbr) {<br>    boolean success = (Arrays.equals(mine, them));<br>    StringBuffer out = new StringBuffer();<br>    out.append("Example ");<br>    out.append((nbr+1));<br>    out.append(" - ");<br>    out.append(success ? "success" : "failure   ");<br>    if(!success) {<br>      out.append("Got: ");<br>      out.append("{");<br>      for(int x=0;x&lt;mine.length;x++) {<br>        out.append(mine[x]);<br>        if(x&lt;mine.length-1) out.append(", ");<br>      }<br>      out.append("}");<br>      out.append(", Expected: ");<br>      out.append("{");<br>      for(int x=0;x&lt;them.length;x++) {<br>        out.append(them[x]);<br>        if(x&lt;them.length-1) out.append(", ");<br>      }<br>      out.append("}");<br>    }<br>    System.out.println(out);<br>  }<br>  final void checkOutput(String[] mine, String[] them, int nbr) {<br>    boolean success = (Arrays.equals(mine, them));<br>    StringBuffer out = new StringBuffer();<br>    out.append("Example ");<br>    out.append((nbr+1));<br>    out.append(" - ");<br>    out.append(success ? "success" : "failure   ");<br>    if(!success) {<br>      out.append("Got: ");<br>      out.append("{");<br>      for(int x=0;x&lt;mine.length;x++) {<br>        out.append(mine[x]);<br>        if(x&lt;mine.length-1) out.append(", ");<br>      }<br>      out.append("}");<br>      out.append(", Expected: ");<br>      out.append("{");<br>      for(int x=0;x&lt;them.length;x++) {<br>        out.append(them[x]);<br>        if(x&lt;them.length-1) out.append(", ");<br>      }<br>      out.append("}");<br>    }<br>    System.out.println(out);<br>  }<br> <br>/** end cut - don't modify this line*/<br>}<br> <br>// Powered by PopsEdit<br>// Powered by CodeProcessor<br></td>