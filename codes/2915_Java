<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>public class CaptureThemAll {<br>  <br>  <br>  /**<br>   * (-2, -1), (-2, 1), (2, -1), (2, 1), (-1, -2), (1, -2), <br>   * (-1, 2) or (1, 2)<br>   */<br>  public int[] xDiff = {-2, -2, 2, 2, -1, 1, -1, 1};<br>  public int[] yDiff = {-1, 1, -1, 1, -2, -2, 2, 2};<br>  <br>  class Pos<br>  {<br>    int x;<br>    int y;<br>    <br>    public Pos (int xx, int yy)<br>    {<br>      x = xx;<br>      y = yy;<br>    }<br>    <br>    public boolean valid ()<br>    {<br>      if (x &lt; 0 || x &gt; 7) return false;<br>      if (y &lt; 0 || y &gt; 7) return false;<br>      return true;<br>    }<br>  }<br>    public int fastKnight(String knight, String rook, String queen) {<br>      Pos kPos = new Pos (knight.charAt(0) - 'a', knight.charAt(1) - '1');<br>      Pos rPos = new Pos (rook.charAt(0) - 'a', rook.charAt(1) - '1');<br>      Pos qPos = new Pos (queen.charAt(0) - 'a', queen.charAt(1) - '1');<br>        int[][] minKillRookFirst = new int[8][8];<br>        int[][] minKillQueenSec = new int[8][8];<br>        for (int i = 0; i &lt; 8; i++)<br>        {<br>          for (int j = 0; j &lt; 8; j++)<br>          {<br>        minKillRookFirst[i][j] = 100000;<br>        minKillQueenSec[i][j] = 100000;            <br>          }<br>        }<br>        minKillRookFirst[kPos.x][kPos.y] = 0;<br>        boolean changed = true;<br>        while (changed)<br>        {<br>          changed = false;<br>          for (int i = 0; i &lt; 8; i++)<br>            for (int j = 0; j &lt; 8; j++)<br>            {<br>              for (int k = 0; k &lt; xDiff.length; k++)<br>              {<br>                Pos tP = new Pos(i + xDiff[k], j + yDiff[k]);<br>                if (tP.valid())<br>                {<br>                  if (minKillRookFirst[tP.x][tP.y] + 1 &lt; minKillRookFirst[i][j])<br>                  {<br>                    changed = true;<br>                    minKillRookFirst[i][j] = minKillRookFirst[tP.x][tP.y] + 1;<br>                  }<br>                    <br>                }<br>              }<br>            }<br>        }<br>        minKillQueenSec[rPos.x][rPos.y] = 0;<br>    changed = true;<br>    while (changed)<br>    {<br>      changed = false;<br>      for (int i = 0; i &lt; 8; i++)<br>        for (int j = 0; j &lt; 8; j++)<br>        {<br>          for (int k = 0; k &lt; xDiff.length; k++)<br>          {<br>            Pos tP = new Pos(i + xDiff[k], j + yDiff[k]);<br>            if (tP.valid())<br>            {<br>              if (minKillQueenSec[tP.x][tP.y] + 1 &lt; minKillQueenSec[i][j])<br>              {<br>                changed = true;<br>                minKillQueenSec[i][j] = minKillQueenSec[tP.x][tP.y] + 1;<br>              }<br>                    <br>            }<br>          }<br>        }<br>    }        <br>        int v1 = minKillRookFirst[rPos.x][rPos.y] + minKillQueenSec[qPos.x][qPos.y];<br><br>    int[][] minKillQueenFirst = new int[8][8];<br>    int[][] minKillRookSec = new int[8][8];<br>    for (int i = 0; i &lt; 8; i++)<br>    {<br>      for (int j = 0; j &lt; 8; j++)<br>      {<br>        minKillQueenFirst[i][j] = 100000;<br>        minKillRookSec[i][j] = 100000;<br>      }<br>    }<br>    minKillQueenFirst[kPos.x][kPos.y] = 0;<br>    changed = true;<br>    while (changed)<br>    {<br>      changed = false;<br>      for (int i = 0; i &lt; 8; i++)<br>        for (int j = 0; j &lt; 8; j++)<br>        {<br>          for (int k = 0; k &lt; xDiff.length; k++)<br>          {<br>            Pos tP = new Pos(i + xDiff[k], j + yDiff[k]);<br>            if (tP.valid())<br>            {<br>              if (minKillQueenFirst[tP.x][tP.y] + 1 &lt; minKillQueenFirst[i][j])<br>              {<br>                changed = true;<br>                minKillQueenFirst[i][j] = minKillQueenFirst[tP.x][tP.y] + 1;<br>              }<br>                    <br>            }<br>          }<br>        }<br>    }<br>    minKillRookSec[qPos.x][qPos.y] = 0;<br>    changed = true;<br>    while (changed)<br>    {<br>      changed = false;<br>      for (int i = 0; i &lt; 8; i++)<br>        for (int j = 0; j &lt; 8; j++)<br>        {<br>          for (int k = 0; k &lt; xDiff.length; k++)<br>          {<br>            Pos tP = new Pos(i + xDiff[k], j + yDiff[k]);<br>            if (tP.valid())<br>            {<br>              if (minKillRookSec[tP.x][tP.y] + 1 &lt; minKillRookSec[i][j])<br>              {<br>                changed = true;<br>                minKillRookSec[i][j] = minKillRookSec[tP.x][tP.y] + 1;<br>              }<br>                    <br>            }<br>          }<br>        }<br>    }        <br>    int v2 = minKillQueenFirst[qPos.x][qPos.y] + minKillRookSec[rPos.x][rPos.y];<br>    return Math.min (v1, v2);<br>    }<br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by CodeProcessor<br></td>