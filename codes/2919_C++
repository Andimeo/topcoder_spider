<td class="problemText" colspan="8" valign="middle" align="left">
            //program framework generated with WishingBone's parser :)-<br> <br>//common header<br>#ifdef WIN32<br>#  pragma warning(disable:4786)<br>#  define for if (0); else for<br>#endif<br>#include &lt;iostream&gt;<br>#include &lt;iomanip&gt;<br>#include &lt;sstream&gt;<br>#include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;deque&gt;<br>#include &lt;set&gt;<br>#include &lt;map&gt;<br>#include &lt;bitset&gt;<br>#include &lt;valarray&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;functional&gt;<br>#include &lt;numeric&gt;<br>#include &lt;complex&gt;<br>#include &lt;utility&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cstring&gt;<br>#include &lt;cctype&gt;<br>#include &lt;cmath&gt;<br>using namespace std;<br> <br>//64 bit integer definition<br>#ifdef WIN32<br>#define in_routine(type,spec) \<br>istream&amp; operator&gt;&gt;(istream&amp; s,type &amp;d){char b[30];s&gt;&gt;b;sscanf(b,spec,&amp;d);return s;}<br>#define out_routine(type,spec) \<br>ostream&amp; operator&lt;&lt;(ostream&amp; s,type d){char b[30];sprintf(b,spec,d);s&lt;&lt;b;return s;}<br>typedef signed __int64 i64; in_routine(i64,"%I64d") out_routine(i64,"%I64d")<br>typedef unsigned __int64 u64; in_routine(u64,"%I64u") out_routine(u64,"%I64u")<br>#else<br>typedef signed long long i64;<br>typedef unsigned long long u64;<br>#endif<br> <br>//common routines<br>#ifdef WIN32<br>#define min(a,b) _cpp_min(a,b)<br>#define max(a,b) _cpp_max(a,b)<br>#endif<br>#define abs(a) ((a)&gt;0?(a):-(a))<br>#define s2d(s,d) istringstream(s)&gt;&gt;d<br>#define d2s(d,s) {ostringstream t;t&lt;&lt;d;s=t.str();}<br>int gcd(int a,int b){for(int c;b;c=a,a=b,b=c%b);return a;}<br>int lcm(int a,int b){return a/gcd(a,b)*b;}<br>template &lt;class T&gt;<br>void remove(vector&lt;T&gt;&amp; v,const T&amp;e){<br>  v.resize(remove(v.begin(),v.end(),e)-v.begin());<br>}<br> <br>//output routine<br>ostream&amp; operator&lt;&lt;(ostream&amp; s,string d){<br>  s&lt;&lt;'\"'&lt;&lt;d.c_str()&lt;&lt;'\"';<br>  return s;<br>}<br>template &lt;class T&gt;<br>ostream&amp; operator&lt;&lt;(ostream&amp; s,vector&lt;T&gt; d){<br>  s&lt;&lt;"{";<br>  for (typename vector&lt;T&gt;::iterator i=d.begin();i!=d.end();i++)<br>    s&lt;&lt;(i!=d.begin()?",":"")&lt;&lt;*i;<br>  s&lt;&lt;"}";<br>  return s;<br>}<br> <br>//parsing routine<br>template &lt;class T&gt;<br>vector&lt;basic_string&lt;T&gt; &gt; parse(const basic_string&lt;T&gt; &amp;s,const basic_string&lt;T&gt; &amp;delim){<br>  vector&lt;basic_string&lt;T&gt; &gt; ret(0);<br>  for (int b,e=0;;ret.push_back(s.substr(b,e-b)))<br>    if ((b=s.find_first_not_of(delim,e))==(e=s.find_first_of(delim,b)))<br>      return ret;<br>}<br>vector&lt;int&gt; intparse(const string &amp;s,const string &amp;delim=" \t\n"){<br>  vector&lt;string&gt; tmp=parse(s,delim);<br>  vector&lt;int&gt; ret(0);<br>  for (vector&lt;string&gt;::iterator i=tmp.begin();i!=tmp.end();i++)<br>    {int t;s2d(*i,t);ret.push_back(t);}<br>  return ret;<br>}<br> <br>//name mapper<br>class mapper{<br>public:<br>  map&lt;string,int&gt; m;<br>  vector&lt;string&gt; v;<br>  void reset(){<br>    v.clear();<br>    m.clear();<br>  }<br>  int size(){<br>    return v.size();<br>  }<br>  int get(string str){<br>    if (m.find(str)==m.end()){<br>      m[str]=v.size();<br>      v.push_back(str);<br>    }<br>    return m[str];<br>  }<br>  string get(int i){<br>    return v[i];<br>  }<br>};<br> <br> <br>class Untypeset{<br>public:<br>  int val(vector&lt;string&gt; s) {    <br>    int co = -1;<br>    for (int i = 0; i &lt; s[0].size(); ++i) {<br>      bool fi = false;      <br>      for (int j = 0; j &lt; s.size(); ++j) {<br>        if (s[j][i] == '+' &amp;&amp; !fi) {<br>          fi = true;<br>        }else if (s[j][i] != ' ') {<br>          fi = false;<br>          break;<br>        }        <br>      }<br>      if (fi){<br>        co = i;<br>        break;<br>      }      <br>    }<br>      if (co != -1) {<br>        vector&lt;string&gt; s1(s.size(), "");<br>        vector&lt;string&gt; s2(s.size(), "");<br>        for(int i = 0; i &lt; s.size(); ++i)<br>          for(int j = 0; j &lt; co; ++j)<br>            s1[i] += s[i][j];<br>        for(int i = 0; i &lt; s.size(); ++i)<br>          for(int j = co+1; j &lt; s[0].length(); ++j)<br>            s2[i] += s[i][j];<br>          return val(s1) + val(s2);<br>      }else {<br>        int maxl = -1;<br>        int ro;<br>        for (int i = 0; i &lt; s.size(); ++i){<br>          int j = 0;<br>          while (s[i][j] != '-' &amp;&amp; j &lt; s[0].size())<br>            j++;          <br>          int cnt = 0;<br>          for (; j &lt; s[0].size() &amp;&amp; s[i][j] == '-'; ++j)<br>            ++cnt;<br>          if (cnt &gt; maxl) {<br>            maxl = cnt;<br>            ro = i;<br>          }<br>        }<br> <br>        if (maxl &gt; 0) {<br>          vector&lt;string&gt; s1;<br>          vector&lt;string&gt; s2;<br>          for (int i = 0; i &lt; ro; ++i)<br>            s1.push_back(s[i]);<br>          for (int i = ro+1; i &lt; s.size(); ++i)<br>            s2.push_back(s[i]);<br>          return val(s1) / val(s2);<br>        }else{<br>          for (int i = 0; i &lt; s.size(); ++i){<br>            int ret = 0;  <br>            for (int j = 0; j &lt; s[0].size(); ++j)<br>              if (s[i][j] &gt;= '0' &amp;&amp; s[i][j] &lt;= '9'){<br>                ret *= 10;<br>                ret += (int)(s[i][j] - 48);<br>              }<br>            if (ret != 0)<br>              return ret;<br>          }<br>            <br>        }<br>      }    <br>  }<br>  int evaluate(vector&lt;string&gt; expression){<br>    return val(expression);<br>  }<br>};<br> <br> <br> <br> <br>#ifdef WIN32<br>void test0(){<br>  string _expression[]={ "2801" };<br>  vector&lt;string&gt; expression(_expression+0,_expression+sizeof(_expression)/sizeof(string));<br>  int evaluate= 2801;<br>  Untypeset _Untypeset;<br>  int ret=_Untypeset.evaluate(expression);<br>  cout&lt;&lt;"--------------------test 0--------------------"&lt;&lt;endl;<br>  cout&lt;&lt;"expression = "&lt;&lt;expression&lt;&lt;endl;<br>  cout&lt;&lt;"expected to return "&lt;&lt;evaluate&lt;&lt;endl;<br>  cout&lt;&lt;"your method returns "&lt;&lt;ret&lt;&lt;endl;<br>  if (ret==evaluate)<br>    cout&lt;&lt;endl&lt;&lt;"Pass!"&lt;&lt;endl&lt;&lt;endl;<br>  else<br>    cout&lt;&lt;endl&lt;&lt;"Fail!!!!!!!!!! aoao~~~~~~~~~~~~"&lt;&lt;endl&lt;&lt;endl;<br>}<br> <br>void test1(){<br>  string _expression[]={ "  625       ",  "------------",  "        5   " };<br>  vector&lt;string&gt; expression(_expression+0,_expression+sizeof(_expression)/sizeof(string));<br>  int evaluate= 125;<br>  Untypeset _Untypeset;<br>  int ret=_Untypeset.evaluate(expression);<br>  cout&lt;&lt;"--------------------test 1--------------------"&lt;&lt;endl;<br>  cout&lt;&lt;"expression = "&lt;&lt;expression&lt;&lt;endl;<br>  cout&lt;&lt;"expected to return "&lt;&lt;evaluate&lt;&lt;endl;<br>  cout&lt;&lt;"your method returns "&lt;&lt;ret&lt;&lt;endl;<br>  if (ret==evaluate)<br>    cout&lt;&lt;endl&lt;&lt;"Pass!"&lt;&lt;endl&lt;&lt;endl;<br>  else<br>    cout&lt;&lt;endl&lt;&lt;"Fail!!!!!!!!!! aoao~~~~~~~~~~~~"&lt;&lt;endl&lt;&lt;endl;<br>}<br> <br>void test2(){<br>  string _expression[]={ "       ",  "500    ",  "       ",  "    +  ",  "       ",  "       ",  "      1",  "       ",  "       " };<br>  vector&lt;string&gt; expression(_expression+0,_expression+sizeof(_expression)/sizeof(string));<br>  int evaluate= 501;<br>  Untypeset _Untypeset;<br>  int ret=_Untypeset.evaluate(expression);<br>  cout&lt;&lt;"--------------------test 2--------------------"&lt;&lt;endl;<br>  cout&lt;&lt;"expression = "&lt;&lt;expression&lt;&lt;endl;<br>  cout&lt;&lt;"expected to return "&lt;&lt;evaluate&lt;&lt;endl;<br>  cout&lt;&lt;"your method returns "&lt;&lt;ret&lt;&lt;endl;<br>  if (ret==evaluate)<br>    cout&lt;&lt;endl&lt;&lt;"Pass!"&lt;&lt;endl&lt;&lt;endl;<br>  else<br>    cout&lt;&lt;endl&lt;&lt;"Fail!!!!!!!!!! aoao~~~~~~~~~~~~"&lt;&lt;endl&lt;&lt;endl;<br>}<br> <br>void test3(){<br>  string _expression[]={ "   120   ",  "  -----  ",  "    10   ",  "---------",  "    6    ",  "   ---   ",  "    2    " };<br>  vector&lt;string&gt; expression(_expression+0,_expression+sizeof(_expression)/sizeof(string));<br>  int evaluate= 4;<br>  Untypeset _Untypeset;<br>  int ret=_Untypeset.evaluate(expression);<br>  cout&lt;&lt;"--------------------test 3--------------------"&lt;&lt;endl;<br>  cout&lt;&lt;"expression = "&lt;&lt;expression&lt;&lt;endl;<br>  cout&lt;&lt;"expected to return "&lt;&lt;evaluate&lt;&lt;endl;<br>  cout&lt;&lt;"your method returns "&lt;&lt;ret&lt;&lt;endl;<br>  if (ret==evaluate)<br>    cout&lt;&lt;endl&lt;&lt;"Pass!"&lt;&lt;endl&lt;&lt;endl;<br>  else<br>    cout&lt;&lt;endl&lt;&lt;"Fail!!!!!!!!!! aoao~~~~~~~~~~~~"&lt;&lt;endl&lt;&lt;endl;<br>}<br> <br>void test4(){<br>  string _expression[]={ "       24       ",  " 31 + ----      ",  "       12   + 16",  "-----------     ",  "   5 + 6        " };<br>  vector&lt;string&gt; expression(_expression+0,_expression+sizeof(_expression)/sizeof(string));<br>  int evaluate= 19;<br>  Untypeset _Untypeset;<br>  int ret=_Untypeset.evaluate(expression);<br>  cout&lt;&lt;"--------------------test 4--------------------"&lt;&lt;endl;<br>  cout&lt;&lt;"expression = "&lt;&lt;expression&lt;&lt;endl;<br>  cout&lt;&lt;"expected to return "&lt;&lt;evaluate&lt;&lt;endl;<br>  cout&lt;&lt;"your method returns "&lt;&lt;ret&lt;&lt;endl;<br>  if (ret==evaluate)<br>    cout&lt;&lt;endl&lt;&lt;"Pass!"&lt;&lt;endl&lt;&lt;endl;<br>  else<br>    cout&lt;&lt;endl&lt;&lt;"Fail!!!!!!!!!! aoao~~~~~~~~~~~~"&lt;&lt;endl&lt;&lt;endl;<br>}<br> <br>void test5(){<br>  string _expression[]={"3 + 4 + 6"};<br>  vector&lt;string&gt; expression(_expression+0,_expression+sizeof(_expression)/sizeof(string));<br>  int evaluate= 13;<br>  Untypeset _Untypeset;<br>  int ret=_Untypeset.evaluate(expression);<br>  cout&lt;&lt;"--------------------test 5--------------------"&lt;&lt;endl;<br>  cout&lt;&lt;"expression = "&lt;&lt;expression&lt;&lt;endl;<br>  cout&lt;&lt;"expected to return "&lt;&lt;evaluate&lt;&lt;endl;<br>  cout&lt;&lt;"your method returns "&lt;&lt;ret&lt;&lt;endl;<br>  if (ret==evaluate)<br>    cout&lt;&lt;endl&lt;&lt;"Pass!"&lt;&lt;endl&lt;&lt;endl;<br>  else<br>    cout&lt;&lt;endl&lt;&lt;"Fail!!!!!!!!!! aoao~~~~~~~~~~~~"&lt;&lt;endl&lt;&lt;endl;<br>}<br> <br>void test6(){<br>  string _expression[]={ " 1     4     9 ",  "--- + --- + ---",  " 1     2     3 " };<br>  vector&lt;string&gt; expression(_expression+0,_expression+sizeof(_expression)/sizeof(string));<br>  int evaluate= 6;<br>  Untypeset _Untypeset;<br>  int ret=_Untypeset.evaluate(expression);<br>  cout&lt;&lt;"--------------------test 6--------------------"&lt;&lt;endl;<br>  cout&lt;&lt;"expression = "&lt;&lt;expression&lt;&lt;endl;<br>  cout&lt;&lt;"expected to return "&lt;&lt;evaluate&lt;&lt;endl;<br>  cout&lt;&lt;"your method returns "&lt;&lt;ret&lt;&lt;endl;<br>  if (ret==evaluate)<br>    cout&lt;&lt;endl&lt;&lt;"Pass!"&lt;&lt;endl&lt;&lt;endl;<br>  else<br>    cout&lt;&lt;endl&lt;&lt;"Fail!!!!!!!!!! aoao~~~~~~~~~~~~"&lt;&lt;endl&lt;&lt;endl;<br>}<br> <br>void test7(){<br>  string _expression[]={ "34      ",  "        ",  "        ",  "        ",  "        ",  "        ",  "        ",  "        ",  "        ",  "        ",  "        ",  "        ",  "        ",  "        ",  "        ",  "   +    ",  "        ",  "        ",  "        ",  "        ",  "        ",  "        ",  "        ",  "        ",  "        ",  "        ",  "        ",  "        ",  "        ",  "        ",  "        ",  "        ",  "        ",  "        ",  "        ",  "        ",  "        ",  "        ",  "        ",  "        ",  "        ",  "        ",  "        ",  "        ",  "        ",  "        ",  "        ",  "        ",  "        ",  "     924" };<br>  vector&lt;string&gt; expression(_expression+0,_expression+sizeof(_expression)/sizeof(string));<br>  int evaluate= 958;<br>  Untypeset _Untypeset;<br>  int ret=_Untypeset.evaluate(expression);<br>  cout&lt;&lt;"--------------------test 7--------------------"&lt;&lt;endl;<br>  cout&lt;&lt;"expression = "&lt;&lt;expression&lt;&lt;endl;<br>  cout&lt;&lt;"expected to return "&lt;&lt;evaluate&lt;&lt;endl;<br>  cout&lt;&lt;"your method returns "&lt;&lt;ret&lt;&lt;endl;<br>  if (ret==evaluate)<br>    cout&lt;&lt;endl&lt;&lt;"Pass!"&lt;&lt;endl&lt;&lt;endl;<br>  else<br>    cout&lt;&lt;endl&lt;&lt;"Fail!!!!!!!!!! aoao~~~~~~~~~~~~"&lt;&lt;endl&lt;&lt;endl;<br>}<br> <br>int main(){<br>  test0();<br>  test1();<br>  test2();<br>  test3();<br>  test4();<br>  test5();<br>  test6();<br>  test7();<br>  return 0;<br>}<br>#endif<br></td>