<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>public class MedalTable {<br>  class Country implements Comparable {<br>    String name;<br>    int gold, silver, bronze;<br>    Country(String name, int gold, int silver, int bronze) {<br>      this.name = new String(name);<br>      this.gold = gold;<br>      this.silver = silver;<br>      this.bronze = bronze;<br>    }<br>    public int compareTo(Object o) {<br>      Country c = (Country)o;<br>      if (gold != c.gold) return c.gold - gold;<br>      if (silver != c.silver) return c.silver - silver;<br>      if (bronze != c.bronze) return c.bronze - bronze;<br>      return name.compareTo(c.name);<br>    }<br>    public String toString() {<br>      return name + " " + gold + " " + silver + " " + bronze;<br>    }<br>  }<br>  public String[] generate(String[] results) {<br>    ArrayList al = new ArrayList();<br>    for (int i = 0; i &lt; results.length; i++) {<br>      StringTokenizer st = new StringTokenizer(results[i]);<br>      while (st.hasMoreTokens()) {<br>        String name = st.nextToken();<br>        if (!al.contains(name)) al.add(name);<br>      }<br>    }<br>    <br>    Country [] cc = new Country[al.size()];<br>    for (int i = 0; i &lt; al.size(); i++) {<br>      String name = (String)al.get(i);<br>      cc[i] = new Country(name, 0, 0, 0);<br>    }<br>    <br>    for (int i = 0; i &lt; results.length; i++) {<br>      StringTokenizer st = new StringTokenizer(results[i]);<br>      int curr = 0;<br>      while (st.hasMoreTokens()) {<br>        String name = st.nextToken();<br>        int idx = al.indexOf(name);<br>        if (curr == 0) cc[idx].gold++;<br>        if (curr == 1) cc[idx].silver++;<br>        if (curr == 2) cc[idx].bronze++;<br>        curr++;<br>      }<br>    }<br>    Arrays.sort(cc);<br>    String [] r = new String[al.size()];<br>    for (int i = 0; i &lt; al.size(); i++) {<br>      r[i] = cc[i].toString();<br>    }<br>    return r;<br>  }<br> <br> <br> <br>}<br> <br>// Powered by PopsEdit<br>// Powered by CodeProcessor<br></td>