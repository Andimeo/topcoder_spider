<td class="problemText" colspan="8" valign="middle" align="left">
            using System; using System.Collections; using System.Text; public class GetThemAll { public int quickKnight(string[] pieces) {<br> <br>int[,] cost = new int[21,21];<br>for (int i=0; i&lt;21; i++) for (int j=0; j&lt;21; j++)<br> cost[i,j] = 999999;<br> <br>int[] xmap = new int[]{1,1,-1,-1,2,2,-2,-2};<br>int[] ymap = new int[]{2,-2,2,-2,1,-1,1,-1};<br> <br>cost[10,10] = 0;<br>for (int t=0; t&lt;100; t++)<br> for (int i=2; i&lt;19; i++) for (int j=2; j&lt;19; j++)<br>  {<br>  cost[i,j] = Math.Min(cost[i,j], 1 + cost[i+1, j+2]);<br>  cost[i,j] = Math.Min(cost[i,j], 1 + cost[i+1, j-2]);<br>  cost[i,j] = Math.Min(cost[i,j], 1 + cost[i-1, j+2]);<br>  cost[i,j] = Math.Min(cost[i,j], 1 + cost[i-1, j-2]);<br>  cost[i,j] = Math.Min(cost[i,j], 1 + cost[i+2, j+1]);<br>  cost[i,j] = Math.Min(cost[i,j], 1 + cost[i+2, j-1]);<br>  cost[i,j] = Math.Min(cost[i,j], 1 + cost[i-2, j+1]);<br>  cost[i,j] = Math.Min(cost[i,j], 1 + cost[i-2, j-1]);<br>  }<br> <br>int N = pieces.Length;<br>if (N == 0) return 0;<br> <br>int[,] d = new int[N+1,N+1];<br>for (int i=0; i&lt;=N; i++)<br> for (int j=1; j&lt;=N; j++)<br>  {<br>  int x0 = (i==0) ? 0 : Convert.ToInt32(pieces[i-1].Split(' ')[0]);<br>  int y0 = (i==0) ? 0 : Convert.ToInt32(pieces[i-1].Split(' ')[1]);<br>  int x1 = (j==0) ? 0 : Convert.ToInt32(pieces[j-1].Split(' ')[0]);<br>  int y1 = (j==0) ? 0 : Convert.ToInt32(pieces[j-1].Split(' ')[1]);<br>  <br>  int dx = Math.Abs(x1 - x0), dy = Math.Abs(y1 - y0);<br>  int dist = 0;<br>  <br>  if (Math.Abs(dx) &gt;= 6 || Math.Abs(dy) &gt;= 6)<br>   {<br>   if (dy &gt;= dx*2)<br>    {<br>    dist = (dy/2) - 2;<br>    dy -= dist*2;<br>    dx -= dist;<br>    if (dx &lt; 0) dx &amp;= 1; <br>    }<br>   else if (dx &gt;= dy*2)<br>    {<br>    dist = (dx/2) - 2;<br>    dx -= dist*2;<br>    dy -= dist;<br>    if (dy &lt; 0) dy &amp;= 1; <br>    }<br>   else<br>    {<br>    dist = ((dx+dy)/3) - 2;<br>    if (dx &gt; dy)<br>       { dy -= dist*3 - (dx-4); dx = 4; }<br>    else<br>       { dx -= dist*3 - (dy-4); dy = 4; }<br>    }<br> <br>   }<br> <br>  dist += cost[dx+10, dy+10];<br>  d[i,j] = dist;<br>  }<br> <br>// WS(d, N+1, N+1);<br> <br>// Time to finish from X when already visited Mask.<br>int[,] best = new int[N+1, 512];<br>for (int mask=(1&lt;&lt;N)-1; mask&gt;=0; mask--)<br> for (int cur=0; cur&lt;=N; cur++)<br>  if (cur&gt;0 || mask == 0)<br>   {<br>   if (mask+1 == (1&lt;&lt;N)) { best[cur, mask] = 0; continue; }<br>   int min = 999999999;<br>   for (int next=1; next&lt;=N; next++)<br>    if ((mask &amp; (1 &lt;&lt; (next-1))) == 0)<br>     min = Math.Min(min, d[cur, next] + best[next, mask | (1 &lt;&lt; (next-1))]);<br>   best[cur, mask] = min;<br>   }<br> <br>// WS(best, N+1, 1&lt;&lt;N);<br> <br>return best[0, 0];<br>}<br> <br> <br> <br> <br> <br>static void WR(Object x, params object[] p) { Console.Write(x.ToString(), p); }<br>static void WL(Object x, params object[] p) { Console.WriteLine(x.ToString(), p); }<br>static void WL() { WL(""); }<br>static void WS(params Object[] c) { foreach (Object x in c) WR(x.ToString() + " "); }<br>static void WS(Array ar, int X) { for (int x=0; x&lt;X; x++) WS(ar.GetValue(x)); WL(); }<br>static void WS(Array ar, int X, int Y) { for (int y=0; y&lt;Y; y++) { for (int x=0; x&lt;X; x++) WS(ar.GetValue(x,y)); WL(); }}<br>}<br></td>