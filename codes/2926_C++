<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;vector&gt;<br>#include &lt;string&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;set&gt;<br>#include &lt;map&gt;<br>#include &lt;list&gt;<br>#include &lt;iostream&gt;<br>#include &lt;math.h&gt;<br>#include &lt;queue&gt;<br>#include &lt;iterator&gt;<br>#include &lt;sstream&gt;<br>#include &lt;stdio.h&gt;<br> <br>using namespace std;<br> <br>#define fi(a, b) for(int i=((int)(a)); i &lt; ((int)(b)); i++)<br>#define fie(a, b) for(int i=((int)(a)); i &lt;= ((int)(b)); i++)<br>#define fj(a, b) for(int j=((int)(a)); j &lt; ((int)(b)); j++)<br>#define fje(a, b) for(int j=((int)(a)); j &lt;= ((int)(b)); j++)<br>#define fk(a, b) for(int k=((int)(a)); k &lt; ((int)(b)); k++)<br>#define fl(a, b) for(int l=((int)(a)); l &lt; ((int)(b)); l++)<br>#define di(a) for(int i=(int)((a)-1); i&gt;=0; i--)<br>#define dj(a) for(int j=(int)((a)-1); j&gt;=0; j--)<br>#define die(a) for(int i=(int)(a); i&gt;=0; i--)<br>#define dje(a) for(int j=(int)(a); j&gt;=0; j--)<br>#define fdi(a, b) for(int i=((int)(a)); i &gt; ((int)(b)); i--)<br>#define fdj(a, b) for(int j=((int)(a)); j &gt; ((int)(b)); j--)<br>#define fdk(a, b) for(int k=((int)(a)); k &gt; ((int)(b)); k--)<br>#define fdl(a, b) for(int l=((int)(a)); l &gt; ((int)(b)); l--)<br>#define ri(b) for(int i=0; i &lt; ((int)(b)); i++)<br>#define rie(b) for(int i=0; i &lt;= ((int)(b)); i++)<br>#define rj(b) for(int j=0; j &lt; ((int)(b)); j++)<br>#define rje(b) for(int j=0; j &lt;= ((int)(b)); j++)<br>#define rk(b) for(int k=0; k &lt; ((int)(b)); k++)<br>#define rke(b) for(int k=0; k &lt; ((int)(b)); k++)<br>#define rl(b) for(int l=0; l &lt; ((int)(b)); l++)<br> <br>#define itadj for(int adx=-1; adx&lt;=1; adx++) for(int ady=-1; ady&lt;=1; ady++)<br>#define chkadj(i, j, n, m) ((i)&gt;=0&amp;&amp;(j)&gt;=0&amp;&amp;(i)&lt;n&amp;&amp;(j)&lt;m)<br> <br>#define fe(v,it) for(__typeof(v.begin()) it=v.begin(); it != v.end(); it++)<br> <br>typedef int i32;<br>typedef unsigned int u32;<br>typedef long long i64;<br>typedef long long ll;<br>typedef unsigned long long u64;<br>typedef string str;<br>typedef double dbl;<br> <br>#define bz(a) memset(a,0,sizeof(a))<br>#define sq(x) ((x)*(x))<br> <br>typedef vector&lt; i32 &gt; vi;<br>typedef vector&lt; str &gt; vs;<br>typedef vector&lt; i64 &gt; vl;<br>typedef vector&lt; vi  &gt; vvi;<br>typedef vector&lt; vs  &gt; vvs;<br>typedef vector&lt; dbl &gt; vd;<br>typedef vector&lt; vd  &gt; vvd;<br> <br>typedef set&lt; i32 &gt; si;<br>typedef set&lt; str  &gt; ss;<br> <br>typedef vi::iterator  itri;<br>typedef vvi::iterator itrvi;<br>typedef vs::iterator  itrs;<br>typedef vvs::iterator itrvs;<br>typedef vd::iterator  itrd;<br>typedef vvd::iterator itrvd;<br> <br>#define ffof   find_first_of<br>#define ffnof  find_first_not_of<br> <br>#define dbg_vint(v) do { copy(va(v),ostream_iterator&lt;int&gt;(cout,"\t")); cout &lt;&lt; endl; } while(0)<br>#define dbg_vll(v) do { copy(va(v),ostream_iterator&lt;ll&gt;(cout,"\t")); cout &lt;&lt; endl; } while(0)<br>#define dbg_vstr(v) do { copy(va(v),ostream_iterator&lt;str&gt;(cout,"\t")); cout &lt;&lt; endl; } while(0)<br>#define dbg_vdbl(v) do { copy(va(v),ostream_iterator&lt;dbl&gt;(cout,"\t")); cout &lt;&lt; endl; } while(0)<br> <br>#define MAX(a,b) ((a)&gt;(b)?(a):(b))<br>#define MIN(a,b) ((a)&gt;(b)?(b):(a))<br>#define ABS(a)   MAX((a),-(a))<br>#define DIST(a,b) ABS((a)-(b))<br> <br>#define vp(v,a)  (v).push_back(a)<br>#define vpb(v,a) (v).push_back(a)<br>#define vpf(v,a) (v).push_front(a)<br>#define vpob(v) (v).pop_back()<br>#define vpof(v) (v).pop_front()<br> <br>#define va(v) (v).begin(), (v).end()<br>#define vf(v,a) find(va(v),(a))<br>#define ve(v,a) (vf(v,a)!=(v).end())<br>#define vins(v,a) do { if (!ve(v,a)) vpb(v, a); } while(0)<br>#define vind(v,a) (ve(v,a)?(vf(v,a)-v.begin()):-1)<br> <br>inline i64 gcd(i64 a, i64 b) { if (b==0) return a; return gcd(b, a%b); }<br>inline i64 lcm(i64 a, i64 b) { return (a*b)/gcd(a,b);                  }<br> <br>#define sz size()<br> <br>#define mp(x, y) make_pair(x, y)<br>#define mt(x, y, z) mp(mp(x,y),z)<br> <br>#define pfst(p) (p).first<br>#define pscd(p) (p).second<br> <br>#define tfst(t) (t).first.first<br>#define tscd(t) (t).first.second<br>#define tthd(t) (t).second<br> <br>typedef pair&lt;int, int&gt; pii;<br>typedef pair&lt;int, str&gt; pis;<br>typedef pair&lt;str, int&gt; psi;<br>typedef pair&lt;str, str&gt; pss;<br> <br>typedef pair&lt; pii, int &gt; tii;<br>typedef pair&lt; pss, str &gt; tss;<br> <br>#define pq priority_queue<br> <br> <br>int d1[201][201];<br> <br>int adx[] = { -1, -1, -2, -2, 1, 1, 2, 2 };<br>int ady[] = { 2,  -2, 1,  -1, 2, -2, 1, -1};<br> <br>int doit2(int x, int y)<br>{<br>  if (d1[50+x][50+y]) return d1[50+x][50+y]-1;  <br>  <br>  d1[50][50]=1;<br>  <br>  list&lt; pii &gt; t;<br>  vp(t,mp(0,0));<br>  <br>  while(!t.empty())<br>  {<br>    int cx=t.front().first;<br>    int cy=t.front().second;<br>    <br>    vpof(t);<br>    rk(8)<br>    {<br>      int nx=cx+adx[k];<br>      int ny=cy+ady[k];<br>      if (!chkadj(nx+50,ny+50,200,200)) continue;<br>      if (d1[nx+50][ny+50]) continue;<br>      d1[nx+50][ny+50]=d1[cx+50][cy+50]+1;<br>      vp(t,mp(nx,ny));<br>    }<br>  }<br>  <br>  return d1[50+x][50+y]-1;<br>}<br> <br>int d[10][10];<br> <br>int get_dist(pii p1, pii p2)<br>{<br>  pii p(ABS(p2.first-p1.first),ABS(p2.second-p1.second));  <br>  <br>  int ret=0;<br>  while(ABS(p.first)&gt;99||ABS(p.second)&gt;99)<br>  {<br>    ret++;<br>    if (ABS(p.first)&gt;ABS(p.second))<br>    {<br>      if (p.first&gt;0) p.first -= 2; else p.first += 2;<br>      if (p.second&gt;0) p.second -= 1; else p.second += 1;<br>    }<br>    else<br>    {<br>      if (p.first&gt;0) p.first -= 1; else p.first += 1;<br>      if (p.second&gt;0) p.second -= 2; else p.second += 2;<br>    }<br>  }<br>  <br>  ret += doit2(ABS(p.first),ABS(p.second));<br>  return ret;<br>}<br> <br>class GetThemAll {<br>  public:<br>  int quickKnight(vector &lt;string&gt; pieces) {<br>    <br>// BEGIN CUT HERE<br>    static bool s_FirstTime = true; if (s_FirstTime) { s_FirstTime = false; run_test(-1); }<br>    // END CUT HERE<br>    <br>    bz(d1);<br>vector&lt; pii &gt; pt;<br>vp(pt,mp(0,0));<br>ri(pieces.sz)<br>{<br>  int a, b;<br>  istringstream st(pieces[i]);<br>  st&gt;&gt;a&gt;&gt;b;<br>  vp(pt,mp(a,b));<br>}<br> <br>ri(pt.sz) fj(i+1,pt.sz) d[i][j]=d[j][i]=get_dist(pt[i],pt[j]);<br>//printf("OK\n");<br> <br>vi v;<br>fi(1,pt.sz) vp(v,i);<br> <br>int ret=2000000000;<br> <br> <br> <br>do<br>{<br>  int x=0;<br>  int c=0;<br>  ri(v.sz) { x += d[c][v[i]]; c=v[i]; }<br>  <br>  ret &lt;?= x;<br>} while(next_permutation(va(v)));<br> <br>return ret;    <br>  }<br>  <br>// BEGIN CUT HERE<br>  public:<br>  void run_test(int Case) { if ((Case == -1) || (Case == 0)) test_case_0(); if ((Case == -1) || (Case == 1)) test_case_1(); if ((Case == -1) || (Case == 2)) test_case_2(); if ((Case == -1) || (Case == 3)) test_case_3(); if ((Case == -1) || (Case == 4)) test_case_4(); }<br>  private:<br>  template &lt;typename T&gt; string print_array(const vector&lt;T&gt; &amp;V) { ostringstream os; os &lt;&lt; "{ "; for (typename vector&lt;T&gt;::const_iterator iter = V.begin(); iter != V.end(); ++iter) os &lt;&lt; '\"' &lt;&lt; *iter &lt;&lt; "\","; os &lt;&lt; " }"; return os.str(); }<br>  void verify_case(int Case, const int &amp;Expected, const int &amp;Received) { cerr &lt;&lt; "Test Case #" &lt;&lt; Case &lt;&lt; "..."; if (Expected == Received) cerr &lt;&lt; "PASSED" &lt;&lt; endl; else { cerr &lt;&lt; "FAILED" &lt;&lt; endl; cerr &lt;&lt; "\tExpected: \"" &lt;&lt; Expected &lt;&lt; '\"' &lt;&lt; endl; cerr &lt;&lt; "\tReceived: \"" &lt;&lt; Received &lt;&lt; '\"' &lt;&lt; endl; } }<br>  void test_case_0() { string Arr0[] = {"1 2"}; vector &lt;string&gt; Arg0(Arr0, Arr0 + (sizeof(Arr0) / sizeof(Arr0[0]))); int Arg1 = 1; verify_case(0, Arg1, quickKnight(Arg0)); }<br>  void test_case_1() { string Arr0[] = {"2 -1", "2 1", "-2 1", "-2 -1"}; vector &lt;string&gt; Arg0(Arr0, Arr0 + (sizeof(Arr0) / sizeof(Arr0[0]))); int Arg1 = 7; verify_case(1, Arg1, quickKnight(Arg0)); }<br>  void test_case_2() { string Arr0[] = {"0 1"}; vector &lt;string&gt; Arg0(Arr0, Arr0 + (sizeof(Arr0) / sizeof(Arr0[0]))); int Arg1 = 3; verify_case(2, Arg1, quickKnight(Arg0)); }<br>  void test_case_3() { string Arr0[] = {"0 7", "7 7", "7 0"}; vector &lt;string&gt; Arg0(Arr0, Arr0 + (sizeof(Arr0) / sizeof(Arr0[0]))); int Arg1 = 15; verify_case(3, Arg1, quickKnight(Arg0)); }<br>  void test_case_4() { string Arr0[] = {"-1000000 -1000000", "1000000 1000000", "1000000 -1000000", "-1000000 1000000"}; vector &lt;string&gt; Arg0(Arr0, Arr0 + (sizeof(Arr0) / sizeof(Arr0[0]))); int Arg1 = 3666668; verify_case(4, Arg1, quickKnight(Arg0)); }<br> <br>// END CUT HERE<br> <br>};<br> <br>GetThemAll GetThemAll_obj;<br> <br>extern  "C" void i_know_it_would_fail_but_at_least_i_can_try() {<br>  GetThemAll_obj.run_test(-1);<br>}<br> <br> <br>// Powered by PopsEdit<br>// Powered by TZTester 1.01 [25-Feb-2003]<br>// Powered by CodeProcessor<br></td>