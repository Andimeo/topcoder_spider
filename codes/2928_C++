<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;list&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;functional&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cmath&gt;<br>#include &lt;sstream&gt;<br>#include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;set&gt;<br>#include &lt;iostream&gt;<br>#include &lt;deque&gt;<br>#include &lt;cctype&gt;<br><br>//#include &lt;map&gt;<br>//#include &lt;stack&gt;<br>//#include &lt;numeric&gt;<br>//#include &lt;queue&gt;<br>using namespace std;<br><br>#define FO(i,n) for(int i=0;i&lt;(n);++i)<br>#define FOR(i,a,b) for(int i=(a);i&lt;=(b);++i)<br>#define FORD(i,a,b) for(int i=(a);i&gt;=(b);--i)<br>#define FOREACH(it,c) for(__typeof((c).begin()) it=(c).begin();it!=(c).end();++it)<br>#define ALL(cont) (cont).begin(),(cont).end()<br>#define PB push_back<br>#define NX(cont) next_permutation(ALL(cont))<br>#define DB (double)<br><br>typedef long long LL;<br><br>const int INF = 1000000000;<br>const double EPS = 0.0000001;<br>#define SIDX string::size_type<br>#define NPOS string::npos<br><br>typedef vector&lt;int&gt; VI;<br>typedef vector&lt;string&gt; VS;<br>typedef deque&lt;int&gt; DI;<br>typedef deque&lt;string&gt; DS;<br>typedef list&lt;int&gt; LI;<br>typedef list&lt;string&gt; LS;<br><br>typedef vector&lt; VI &gt; VII;<br>typedef deque&lt; DI &gt; DII;<br><br>VS tokenize(string s, string tokens);<br>inline void lower(string &amp;s);<br>inline void upper(string &amp;s);<br><br>template&lt;class T&gt; inline string l2s(T x);<br>template&lt;class T&gt; inline T nwd(T a, T b);<br>template&lt;class T&gt; inline T nww(T a, T b);<br>template&lt;class T, class Con&gt; inline bool is(const T &amp;x, const Con &amp;container);<br>template&lt;class Con&gt; void print(const Con&amp; container);<br>template&lt;class Con&gt; void print2(const Con&amp; container);<br>template&lt;class Con, class T&gt; inline T suma(const Con &amp;container, T &amp;w);<br>#define SUM(con) suma((con), (*(con).begin()))<br>template&lt;class Con, class T&gt; inline int count(const T &amp;x, const Con &amp;container);<br>template&lt;class Con&gt; inline double avg(const Con &amp;container);<br>#define MIN(con) (*min_element(ALL(con)))<br>#define MAX(con) (*max_element(ALL(con)))<br><br><br>/*****************************************************************************/<br><br>class TransportCounting<br>{<br>    public:<br>    int countBuses(int speed, vector &lt;int&gt; pos, vector &lt;int&gt; v, int time)<br>    {<br>        int res = 0;<br>      int n = v.size();<br><br>      int s = time*speed;<br><br>      FO(i,n)<br>      {<br>        if(pos[i] == 0)<br>        {<br>          ++res;<br>          continue;<br>        }<br><br>        if(s &gt;= pos[i] + v[i]*time)<br>          ++res;<br>      }<br>      return res;<br>    }<br><br><br>};<br><br>/*****************************************************************************/<br><br><br><br>VS tokenize(string s, string tokens) {<br>  s = s + tokens;<br>  VS res;<br>  string tmp;<br>  for (unsigned int i = 0; i &lt; s.length(); i++) {<br>    if(tokens.find(s[i]) != NPOS) {<br>      if (tmp != "")<br>        res.push_back(tmp);<br>      tmp = "";<br>    }<br>    else tmp += s[i];<br>  }<br>  return res;<br>}<br><br>inline void lower(string &amp;s) {<br>  FOREACH(it,s)<br>    *it = tolower(*it);<br>}<br><br>inline void upper(string &amp;s) {<br>  FOREACH(it,s)<br>    *it = toupper(*it);<br>}<br><br>template&lt;class T&gt; inline string l2s(T x) {<br>  ostringstream o;<br>  o &lt;&lt; x;<br>  return o.str();<br>}<br><br>template&lt;class T&gt; inline T nwd(T a, T b) {<br>  return b==0 ? a : nwd(b, a%b);<br>}<br><br>template&lt;class T&gt; inline T nww(T a, T b) {<br>  return a*b/nwd(a,b);<br>}<br><br>template&lt;class T, class Con&gt; inline bool is(const T &amp;x, const Con &amp;container) {<br>  return find(ALL(container),x) != container.end();<br>}<br><br>template&lt;class Con&gt; void print(const Con&amp; container) {<br>  FOREACH(it,container)<br>    cout &lt;&lt; *it &lt;&lt; " ";<br>  cout &lt;&lt; "\n";<br>}<br><br>template&lt;class Con&gt; void print2(const Con&amp; container) {<br>  FOREACH(it,container) {<br>    FOREACH(jt,*it)<br>      cout &lt;&lt; *jt &lt;&lt; " ";<br>    cout &lt;&lt; "\n";<br>  }<br>}<br><br>template&lt;class Con, class T&gt; inline T suma(const Con &amp;container,T &amp;w) {<br><br>  try {<br>    T wynik = 0;<br>    FOREACH(it,container)<br>      wynik+=(*it);<br>    return wynik;<br>  }catch(...)<br>  {<br>    T wynik;<br>    FOREACH(it,container)<br>      wynik+=(*it);<br>    return wynik;<br>  }<br>}<br>template&lt;class Con, class T&gt; inline int count(const T &amp;x, const Con &amp;container) {<br>  int res = 0;<br>  FOREACH(it,container)<br>    if(*it == x)<br>      ++res;<br>  return res;<br>}<br><br>template&lt;class Con&gt; inline double avg(const Con &amp;container) {<br>  double suma = 0;<br>  FOREACH(it,container)<br>    suma+=(*it);<br><br>  return suma/(double)container.size();<br>}<br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003]<br>// Powered by CodeProcessor<br></td>