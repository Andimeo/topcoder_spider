<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Text;<br>using System.Text.RegularExpressions;<br>using System.Collections;<br>using System.Collections.Specialized;<br><br>public class Crossings {<br>    public Crossings() {<br>       // Life is Good !!<br>    }<br>    private static void Swap(ref int a, ref int b)<br>    {<br>        int t = a;<br>        a = b;<br>        b = t;<br>    }<br>    private static double CTan(double x)<br>    {<br>        return 1.0 / Math.Tan(x);<br>    }<br>    public int[] getOut(int[] positions, int[] angles)<br>    {<br>        int count = positions.Length;<br>        int[] res = new int[count];<br>        for (int i = 0; i &lt; count; i++)<br>        {<br>            res[i] = i;<br>            angles[i] = 180 - angles[i];<br>        }<br><br>        for(int i=0;i&lt;count;i++)<br>            for (int ii = i + 1; ii &lt; count; ii++)<br>            {<br>                if (positions[i] &gt; positions[ii])<br>                {<br>                    Swap(ref positions[i], ref positions[ii]);<br>                    Swap(ref res[i], ref res[ii]);<br>                    Swap(ref angles[i], ref angles[ii]);<br>                }<br>            }<br><br>        bool found = true;<br>        while (found)<br>        {<br>            found = false;<br>            double time = double.MaxValue;<br>            int best = -1;<br>            for (int i = 0; i &lt; count - 1; i++)<br>            {<br>                if (angles[i] - angles[i + 1] &gt; 0)<br>                {<br>                    double t = (positions[i + 1] - positions[i]) / ((CTan((180 - angles[i]) / 180.0 * Math.PI) + CTan(angles[i + 1] / 180.0 * Math.PI)) * Math.Sin(Math.PI / 180.0 * Math.Max(180 - angles[i], angles[i + 1])));<br>                    if (t &lt; time)<br>                    {<br>                        time = t;<br>                        if (180 - angles[i] &gt; angles[i + 1]) best = i+1;<br>                        if (180 - angles[i] &lt; angles[i + 1]) best = i;<br>                        if (180 - angles[i] == angles[i + 1])<br>                        {<br>                            if (res[i] &gt; res[i + 1])<br>                            {<br>                                best = i;<br>                            }<br>                            else<br>                            {<br>                                best = i+1;<br>                            }<br>                        }<br>                    }<br>                }<br>            }<br>            if (best &gt;= 0)<br>            {<br>                count--;<br>                for (int i = best; i &lt; count; i++)<br>                {<br>                    positions[i] = positions[i + 1];<br>                    angles[i] = angles[i + 1];<br>                    res[i] = res[i + 1];<br>                }<br>                found = true;<br>            }<br>        }<br>        int[] ret = new int[count];<br>        for (int i = 0; i &lt; count; i++) ret[i] = res[i];<br>        Array.Sort(ret);<br>        return ret;<br>    }<br><br><br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by CodeProcessor<br></td>