<td class="problemText" colspan="8" valign="middle" align="left">
            using namespace std;<br>#include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;stdio.h&gt;<br>#include &lt;stdlib.h&gt;<br>#include &lt;string.h&gt;<br>#include &lt;ctype.h&gt;<br>#include &lt;stack&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;queue&gt;<br>#include &lt;iostream&gt;<br>#include &lt;sstream&gt;<br>typedef long long I64;<br>typedef vector&lt;int&gt; VI;<br>typedef vector&lt;string&gt; VS;<br>typedef vector&lt;I64&gt; VI64;<br>typedef unsigned uint;<br>typedef const char cchar;<br>typedef pair&lt;int,int&gt; PII;<br>typedef vector&lt;double&gt; VD;<br>typedef vector&lt;PII&gt; VPII;<br>#define FOR(i,n) for(int i=0;i&lt;(n);i++)<br>#define FORR(i,a,b) for(int i=(a);i&lt;=(b);i++)<br>#define VAR(a,b) __typeof(b) a=b<br>#define FORIT(it,c) for(VAR(it,(c).begin());it!=(c).end();it++)<br>#define ALL(x) (x).begin(),(x).end()<br>#define UNIQ(x) (x).erase(unique(ALL(x)),(x).end())<br> <br>double CONV = M_PI/180.0;<br> <br>struct CrossingsImpl {<br>    vector &lt;int&gt; positions;<br>    vector &lt;int&gt; angles;<br>    CrossingsImpl(vector &lt;int&gt; _positions,vector &lt;int&gt; _angles) {<br>        positions = _positions;<br>        angles = _angles;<br>    }<br> <br>    vector &lt;int&gt; getOut() {<br>        int n = positions.size();<br>        double hitdist[60][60];<br>        int hitfirst[60][60];<br> <br>        vector&lt;double&gt; dists;<br> <br>        FOR(i,n) FOR(j,n) hitdist[i][j] = 0.0;<br> <br>        FOR(i,n) for(int j=i+1;j&lt;n;j++) {<br>            if(i==j) continue;<br> <br>            double m1 = cos(angles[i]*CONV) / sin(angles[i]*CONV);<br>            double m2 = cos(angles[j]*CONV) / sin(angles[j]*CONV);<br> <br>            if(angles[i] == angles[j]) continue;<br> <br>            double y = (positions[i]-positions[j]) / (m2 - m1);<br>            if(y &lt; 0.0) continue;<br> <br>            printf("%d,%d hit at %g\n",positions[i],positions[j],y);<br> <br>            hitdist[i][j] = y;<br>            hitfirst[i][j] = abs(angles[i]-90) &lt;= abs(angles[j]-90) ? i : j;<br>            dists.push_back(y);<br>        }<br> <br>        sort(ALL(dists));<br>        UNIQ(dists);<br> <br>        vector&lt;bool&gt; in(n,1);<br> <br>        FOR(d,dists.size()) {<br>            FOR(i,n) for(int j=i+1;j&lt;n;j++) {<br>                if(fabs(hitdist[i][j]-dists[d])&lt;1e-10 &amp;&amp; in[i] &amp;&amp; in[j]) {<br>                    if(hitfirst[i][j]==i)<br>                        in[j] = 0;<br>                    else<br>                        in[i] = 0;<br>                }<br>            }<br>        }<br>        <br>        VI ret;<br>        FOR(i,n) {<br>            if(in[i]) ret.push_back(i);<br>        }<br>        return ret;<br>    };<br>};<br> <br> <br>struct Crossings {<br>    vector &lt;int&gt; getOut(vector &lt;int&gt; positions,vector &lt;int&gt; angles) {<br>        CrossingsImpl impl(positions,angles);<br>        return impl.getOut();<br>    }<br> <br>};<br> <br> <br> <br> <br>// Powered by FileEdit<br>// Powered by CodeProcessor<br></td>