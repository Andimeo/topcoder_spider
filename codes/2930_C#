<td class="problemText" colspan="8" valign="middle" align="left">
            using System; using System.Collections; public class HierarchicalTree<br>{<br>  public string[] countDescendants(string[] parentData) {<br>    <br>    Hashtable ct = MAP;<br>    ct["ROOT"] = 0;<br>    map = MAP;<br>    String cc = "";<br>    foreach (String s in parentData) cc += s;<br>    foreach (String spec in cc.Split(' ')) if (spec.Length &gt; 0)<br>    {<br>      String[] ss = spec.Split(',');<br>      if (map.Contains(ss[0]) &amp;&amp; (String)map[ss[0]] != ss[1])<br>        return new String[0];<br>        <br>      // if (!map.Contains(ss[0])) Add1(ct, ss[1]);<br>      // if (!ct.Contains(ss[1])) ct[ss[1]] = 0;<br>      ct[ss[0]] = 0;<br>      ct[ss[1]] = 0;<br>      <br>      if (ss[0] == "ROOT") return new String[0];<br>      map[ss[0]] = ss[1];<br>    }<br>    <br>    foreach (String node in map.Keys) if (!OK(node)) return new String[0];<br>    foreach (String node in map.Keys) Climb(node, ct);<br>    <br>    ArrayList ar = AR;<br>    foreach (String key in ct.Keys) if (key != "ROOT")<br>      ar.Add(String.Format("{1}: {0}", ct[key], key));<br>    <br>    ar.Sort();<br>    ar.Insert(0, String.Format("ROOT: {0}", ct["ROOT"]));<br>    return SA(ar);<br>}<br> <br> <br>Hashtable map;<br> <br>bool OK(String node)<br>{<br>  for (int i=0; i&lt;1300; i++) { if (node == "ROOT") return true; if (node == null) return false; node = (String) map[node]; }<br>  return false;<br>}<br> <br>void Climb(String node, Hashtable ct)<br>{<br>  while (node != "ROOT")<br>  {<br>    String parent = (String)map[node];<br>    Add1(ct, parent);<br>    node = parent;<br>  }<br>}<br> <br>void Add1(Hashtable map, Object x) { Object ct = map[x]; map[x] = 1 + (ct==null ? 0 : (int)ct); }<br> <br> <br> <br>static ArrayList AR { get { return new ArrayList(); }}<br>static Hashtable MAP { get { return new Hashtable(); }}<br> <br>static int   [] IA(ArrayList ar) { return (int   []) ar.ToArray(typeof(int   )); }<br>static string[] SA(ArrayList ar) { return (string[]) ar.ToArray(typeof(string)); }<br> <br>int    INT   (Object x) { return Convert.ToInt32 (x.ToString()); }<br>long   LONG  (Object x) { return Convert.ToInt64 (x.ToString()); }<br>double DOUBLE(Object x) { return Convert.ToDouble(x.ToString()); }<br> <br>static void WR(Object x, params object[] p) { Console.Write(x.ToString(), p); }<br>static void WL(Object x, params object[] p) { Console.WriteLine(x.ToString(), p); }<br>static void WL() { WL(""); }<br>static void WS(params Object[] c) { foreach (Object x in c) WR(x.ToString() + " "); }<br>static void WSL(params Object[] c) { foreach (Object x in c) WR(x.ToString() + " "); WL(); }<br>static void WS(Array ar, int X) { for (int x=0; x&lt;X; x++) WS(ar.GetValue(x)); WL(); }<br>static void WS(Array ar, int X, int Y) { for (int y=0; y&lt;Y; y++) { for (int x=0; x&lt;X; x++) WS(ar.GetValue(x,y)); WL(); }}}<br> <br>// Powered by PopsEdit<br></td>