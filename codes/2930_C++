<td class="problemText" colspan="8" valign="middle" align="left">
            /*<br> * HierarchicalTree.cpp<br> *<br> * Author:   Jason Y. Lee<br> * TopCoder: UFP2161<br> *<br> * KOALAS RULE! GO KOALAS! =)<br> */<br><br>#include &lt;algorithm&gt;<br>#include &lt;cctype&gt;<br>#include &lt;climits&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cstring&gt;<br>#include &lt;iostream&gt;<br>#include &lt;sstream&gt;<br>#include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br><br><br>using namespace std;<br><br>#define DEBUG(x)<br><br>vector&lt;string&gt; split(const string &amp;s, string ch = " \t")<br>{<br>  vector&lt;string&gt; rv;<br><br>  for (int p = 0, p2; p &lt; s.size(); p = p2+1)<br>  {<br>    p2 = s.find_first_of(ch, p);<br><br>    if (p2 == -1) p2 = s.size();<br>    if (p2-p &gt; 0) rv.push_back(s.substr(p, p2-p));<br>  }<br><br>  return rv;<br>}<br><br>struct HierarchicalTree<br>{<br>  struct Node<br>  {<br>    set&lt;string&gt; children;<br>    int seen;<br>    int descendants;<br><br>    Node()<br>    {<br>      seen = -1;<br>      descendants = 0;<br>    }<br>  };<br><br>  map&lt;string,Node&gt; tree;<br><br>  bool dfs(string node)<br>  {<br>    Node *n = &amp;tree[node];<br><br>    if (n-&gt;seen != -1)<br>      return false;<br><br>    n-&gt;seen = 0;<br>    n-&gt;descendants = n-&gt;children.size();<br><br>    for (set&lt;string&gt;::iterator itr = (n-&gt;children).begin(); itr != (n-&gt;children).end(); itr++)<br>    {<br>      if (!dfs(*itr))<br>        return false;<br>      n-&gt;descendants += tree[*itr].descendants;<br>    }<br><br>    return true;<br>  }<br><br>  vector&lt;string&gt; countDescendants(vector&lt;string&gt; parentData)<br>  {<br>    vector&lt;string&gt; rv;<br>    tree.clear();<br>    string data = "";<br><br>    for (int i = 0; i &lt; parentData.size(); i++)<br>      data += parentData[i];<br><br>    vector&lt;string&gt; tokens = split(data, " ");<br><br>    for (int i = 0; i &lt; tokens.size(); i++)<br>    {<br>      vector&lt;string&gt; t2 = split(tokens[i], ",");<br>      tree[t2[1]].children.insert(t2[0]);<br>    }<br><br>    if (dfs("ROOT") == false)<br>      return rv;<br><br>    for (map&lt;string,Node&gt;::iterator itr = tree.begin(); itr != tree.end(); itr++)<br>      if (itr-&gt;second.seen == -1)<br>        return rv;<br><br>    for (map&lt;string,Node&gt;::iterator itr = tree.begin(); itr != tree.end(); itr++)<br>    {<br>      ostringstream os;<br><br>      os &lt;&lt; itr-&gt;first &lt;&lt; ": " &lt;&lt; itr-&gt;second.descendants;<br>      rv.push_back(os.str());<br>    }<br><br>    sort(rv.begin(), rv.end());<br><br>    return rv;<br>  }<br><br><br><br>};<br><br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003]<br>// Powered by CodeProcessor<br></td>