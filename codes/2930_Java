<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>public class HierarchicalTree {<br>  int mark(Map c, Map d, Set v, Object n) {<br>    if (v.contains(n)) throw new InternalError();<br>    v.add(n);<br>    Set s = (Set) c.get(n);<br>    int t = 0;<br>    if (s != null)<br>      for (Iterator i = s.iterator(); i.hasNext(); )<br>        t += mark(c, d, v, i.next());<br>    d.put(n, new Integer(t));<br>    return t + 1;<br>  }<br>  public String[] countDescendants(String[] parentData) {<br>    StringBuffer bf = new StringBuffer();<br>    for (int i = 0; i &lt; parentData.length; i++) bf.append(parentData[i]);<br>    StringTokenizer st = new StringTokenizer(bf.toString());<br>    Map c = new HashMap();<br>    while (st.hasMoreTokens()) {<br>      String[] s = st.nextToken().split(",");<br>      Set l = (Set) c.get(s[1]);<br>      if (l == null) {<br>        l = new HashSet();<br>        c.put(s[1], l);<br>      }<br>      l.add(s[0]);<br>    }<br>    Set v = new HashSet();<br>    Map d = new TreeMap();<br>    try {<br>      mark(c, d, v, "ROOT");<br>    } catch (InternalError e) {<br>      return new String[0];<br>    }<br>    for (Iterator i = c.keySet().iterator(); i.hasNext(); )<br>      if (!v.contains(i.next())) return new String[0];<br>    List l = new ArrayList();<br>    for (Iterator i = d.keySet().iterator(); i.hasNext(); ) {<br>      Object o = i.next();<br>      l.add(o + ": " + d.get(o));<br>    }<br>    return (String[]) l.toArray(new String[0]);<br>  }<br>}<br> <br> <br>// Powered by FileEdit<br>// Powered by CodeProcessor<br></td>