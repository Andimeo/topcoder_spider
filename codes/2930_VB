<td class="problemText" colspan="8" valign="middle" align="left">
            Imports Microsoft.VisualBasic<br>Imports System.Math<br>Imports System<br>Imports System.Collections<br>Imports System.Text<br> <br>Public Class HierarchicalTree<br>    Implements IComparer<br> <br>    Dim descend As New Hashtable<br>    Dim h As New Hashtable<br>    Public Function countDescendants(ByVal parentData As String()) As String()<br>        Dim s As String = String.Join("", parentData)<br>        Dim p() As String = s.Split(" "c)<br>        Dim a As Integer<br>        For a = 0 To p.Length - 1<br>            If p(a).Length &gt; 0 Then<br>                Dim np() As String = p(a).Split(","c)<br>                Dim al As ArrayList = h(np(1))<br>                If al Is Nothing Then<br>                    al = New ArrayList<br>                    h(np(1)) = al<br>                End If<br>                If Not al.Contains(np(0)) Then al.Add(np(0))<br>            End If<br>        Next<br>        If Validate("ROOT") Then<br>            If h.Count &gt; 0 Then<br>                Return New String() {}<br>            Else<br>                'valid structure<br>                Dim ret As New ArrayList<br>                Dim dp As DictionaryEntry<br>                For Each dp In descend<br>                    ret.Add(dp.Key &amp; ": " &amp; CStr(dp.Value))<br>                Next<br>                Dim sret As String() = ret.ToArray(GetType(String))<br>                Array.Sort(sret, Me)<br>                Return sret<br>            End If<br>        Else<br>            Return New String() {}<br>        End If<br>    End Function<br> <br>    Private Function Validate(ByVal node As String) As Boolean<br>        Dim al As ArrayList = h(node)<br>        If Not descend(node) Is Nothing Then Return False<br>        descend(node) = 0<br>        If al Is Nothing Then Return True<br>        Dim a As Integer<br>        For a = 0 To al.Count - 1<br>            Dim tmp As Boolean = Validate(al(a))<br>            If tmp = False Then Return False<br>            descend(node) += 1 + descend(al(a))<br>        Next<br>        h.Remove(node)<br>        Return True<br>    End Function<br> <br>    Public Function Compare(ByVal x As Object, ByVal y As Object) As Integer Implements System.Collections.IComparer.Compare<br>        Return String.CompareOrdinal(x, y)<br>    End Function<br>End Class<br></td>