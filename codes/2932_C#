<td class="problemText" colspan="8" valign="middle" align="left">
            // Parser Count: 3<br> <br>using System;<br>using System.Collections;<br> <br>public class TopographicalImage<br>{<br>  public struct Peak<br>  {<br>    public bool b;<br>    public int height;<br>  }<br> <br>  public struct Point { public int x, y, height; }<br> <br>  Peak[][] map;<br>  ArrayList points;<br>  int cursor;<br>  int h, w;<br> <br>  public void findPossiblePeaks()<br>  {<br>    points = new ArrayList();<br>    for (int y = 0; y &lt; h; ++y)<br>    {<br>      for (int x = 0; x &lt; w; ++x)<br>      {<br>        int level = map[y][x].height;<br>        if (y &gt; 0 &amp;&amp; x &gt; 0 &amp;&amp; map[y-1][x-1].height &gt; level) continue;<br>        if (y &gt; 0 &amp;&amp; map[y-1][x].height &gt; level) continue;<br>        if (y &gt; 0 &amp;&amp; x &lt; w - 1 &amp;&amp; map[y-1][x+1].height &gt; level) continue;<br>        if (x &gt; 0 &amp;&amp; map[y][x-1].height &gt; level) continue;<br>        if (x &lt; w - 1 &amp;&amp; map[y][x+1].height &gt; level) continue;<br>        if (y &lt; h - 1 &amp;&amp; x &gt; 0 &amp;&amp; map[y+1][x-1].height &gt; level) continue;<br>        if (y &lt; h - 1 &amp;&amp; map[y+1][x].height &gt; level) continue;<br>        if (y &lt; h - 1 &amp;&amp; x &lt; w - 1 &amp;&amp; map[y+1][x+1].height &gt; level) continue;<br>        Point p = new Point();<br>        p.x = x; p.y = y; p.height = level;<br> <br>        int i;<br>        for (i = 0; i &lt; points.Count; ++i)<br>        {<br>          Point p2 = (Point) points[i];<br>          if (p2.height &lt; level) break;<br>        }<br>        points.Insert(i, p);<br>      }<br>    }<br>    cursor = 0;<br>  }<br> <br>  public int markHighest()<br>  {<br>    ArrayList todo = new ArrayList();<br>    Point found; found.x = -1; found.y = -1; found.height = -1;<br>    while (cursor &lt; points.Count)<br>    {<br>      Point test = (Point) points[cursor];<br>      cursor++;<br>      if (map[test.y][test.x].b == false)<br>      {<br>        found = test;<br>        break;<br>      }<br>    }<br> <br>    if (found.x == -1) return 1;<br> <br>    todo.Add(found);<br>    map[found.y][found.x].b = true;<br> <br>    int count = 0;<br>    while (todo.Count &gt; 0)<br>    {<br>      found = (Point) todo[todo.Count - 1];<br>      todo.RemoveAt(todo.Count - 1);<br> <br>      int x = found.x;<br>      int y = found.y;<br>      int level = map[y][x].height;<br>    <br>      if (y &gt; 0 &amp;&amp; x &gt; 0 &amp;&amp; !map[y-1][x-1].b &amp;&amp; map[y-1][x-1].height &lt;= level)<br>      { Point p = new Point(); p.x = x-1; p.y = y-1; todo.Add(p); map[y-1][x-1].b = true; }<br>      if (y &gt; 0 &amp;&amp; !map[y-1][x].b &amp;&amp; map[y-1][x].height &lt;= level)<br>      { Point p = new Point(); p.x = x; p.y = y-1; todo.Add(p); map[y-1][x].b = true; }<br>      if (y &gt; 0 &amp;&amp; x &lt; w - 1 &amp;&amp; !map[y-1][x+1].b &amp;&amp; map[y-1][x+1].height &lt;= level)<br>      { Point p = new Point(); p.x = x+1; p.y = y-1; todo.Add(p); map[y-1][x+1].b = true; }<br>      if (x &gt; 0 &amp;&amp; !map[y][x-1].b &amp;&amp; map[y][x-1].height &lt;= level)<br>      { Point p = new Point(); p.x = x-1; p.y = y; todo.Add(p); map[y][x-1].b = true; }<br>      if (x &lt; w - 1 &amp;&amp; !map[y][x+1].b &amp;&amp; map[y][x+1].height &lt;= level)<br>      { Point p = new Point(); p.x = x+1; p.y = y; todo.Add(p); map[y][x+1].b = true; }<br>      if (y &lt; h - 1 &amp;&amp; x &gt; 0 &amp;&amp; !map[y+1][x-1].b &amp;&amp; map[y+1][x-1].height &lt;= level) <br>      { Point p = new Point(); p.x = x-1; p.y = y+1; todo.Add(p); map[y+1][x-1].b = true; }<br>      if (y &lt; h - 1 &amp;&amp; !map[y+1][x].b &amp;&amp; map[y+1][x].height &lt;= level) <br>      { Point p = new Point(); p.x = x; p.y = y+1; todo.Add(p); map[y+1][x].b = true; }<br>      if (y &lt; h - 1 &amp;&amp; x &lt; w - 1 &amp;&amp; !map[y+1][x+1].b &amp;&amp; map[y+1][x+1].height &lt;= level)<br>      { Point p = new Point(); p.x = x+1; p.y = y+1; todo.Add(p); map[y+1][x+1].b = true; }<br>      count++;<br>    }<br> <br>    return count;<br>  }<br> <br>  public int[] calcPeakAreas(string[] topoData)<br>  {<br>    h = topoData.Length;<br>    w = topoData[0].Length;<br>    map = new Peak[h][];<br>    for (int i = 0; i &lt; h; ++i) map[i] = new Peak[w];<br> <br>    for (int i = 0; i &lt; h; ++i)<br>    {<br>      char[] xs = topoData[i].ToCharArray();<br> <br>      for (int j = 0; j &lt; w; ++j)<br>      {<br>        map[i][j].height = (int) xs[j];<br>        map[i][j].b = false;<br>      }<br>    }<br> <br>    findPossiblePeaks();<br> <br>    int remaining = w * h;<br>    ArrayList vect = new ArrayList();<br>    while (remaining &gt; 0)<br>    {<br>      int newp = markHighest();<br>      remaining -= newp;<br>      vect.Add(newp);<br>    }<br> <br>    int[] ret = new int[vect.Count];<br>    for (int i = 0; i &lt; ret.Length; ++i)<br>    {<br>      ret[i] = ((int)vect[i]);<br>    }<br>    return ret;<br>  }<br>}<br></td>