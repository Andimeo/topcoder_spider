<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;vector&gt;<br>#include &lt;list&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;deque&gt;<br>#include &lt;stack&gt;<br>#include &lt;bitset&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;functional&gt;<br>#include &lt;numeric&gt;<br>#include &lt;utility&gt;<br>#include &lt;sstream&gt;<br>#include &lt;iostream&gt;<br>#include &lt;iomanip&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;time.h&gt;<br> <br>using namespace std;<br> <br>class TopographicalImage {<br>public:<br>  int getarea(vector&lt;string&gt; &amp;t,int x,int y, char z)<br>  {<br>    if((x&lt;0)||(x&gt;=t[0].size()))<br>      return 0;<br>    if((y&lt;0)||(y&gt;=t.size()))<br>      return 0;<br>    char h = t[y][x];<br>    if( h == ' ')<br>      return 0;<br>    if( h &gt; z )<br>      return 0;<br>    int area = 1;<br>    t[y][x] = ' ';<br>    area += getarea(t,x-1,y-1,h);<br>    area += getarea(t,x-1,y,h);<br>    area += getarea(t,x-1,y+1,h);<br>    area += getarea(t,x,y-1,h);<br>    area += getarea(t,x,y+1,h);<br>    area += getarea(t,x+1,y-1,h);<br>    area += getarea(t,x+1,y,h);<br>    area += getarea(t,x+1,y+1,h);<br>    return area;  <br>  }<br>  vector &lt;int&gt; calcPeakAreas(vector &lt;string&gt;);<br>};<br> <br>vector &lt;int&gt; TopographicalImage::calcPeakAreas(vector &lt;string&gt; topoData) {<br>  vector &lt;int&gt; ret(0);<br>  int sum = 0;<br>  while (sum &lt; topoData.size()*topoData[0].size())<br>  {<br>    char max = ' ';<br>    int x = -1;<br>    int y = -1;<br>    for (int i = 0; i&lt; topoData.size();i++)<br>    {<br>      for (int j = 0; j&lt; topoData[0].size();j++)<br>      {<br>        if (topoData[i][j]&gt;max)<br>        {<br>          max = topoData[i][j];<br>          x = j;<br>          y = i;<br>        }<br>      }<br>    }<br>    int area = getarea(topoData,x,y,max);<br>    sum += area;<br>    ret.push_back(area);     <br>  }<br>  return ret;<br>}<br> <br>double test0() {<br>  string t0[] = {<br>"............",<br>"....i..i....",<br>"....i..i....",<br>".o..i..i..o.",<br>".o........o.",<br>"..oooooooo..",<br>"............"<br>};<br>  vector &lt;string&gt; p0(t0, t0+sizeof(t0)/sizeof(string));<br>  TopographicalImage * obj = new TopographicalImage();<br>  clock_t start = clock();<br>  vector &lt;int&gt; my_answer = obj-&gt;calcPeakAreas(p0);<br>  clock_t end = clock();<br>  delete obj;<br>  cout &lt;&lt;"Time: " &lt;&lt;(double)(end-start)/CLOCKS_PER_SEC &lt;&lt;" seconds" &lt;&lt;endl;<br>  int t1[] = { 78,  3,  3 };<br>  vector &lt;int&gt; p1(t1, t1+sizeof(t1)/sizeof(int));<br>  cout &lt;&lt;"Desired answer: " &lt;&lt;endl;<br>  cout &lt;&lt;"\t{ ";<br>  if (p1.size() &gt; 0) {<br>    cout &lt;&lt;p1[0];<br>    for (int i=1; i&lt;p1.size(); i++)<br>      cout &lt;&lt;", " &lt;&lt;p1[i];<br>    cout &lt;&lt;" }" &lt;&lt;endl;<br>  }<br>  else<br>    cout &lt;&lt;"}" &lt;&lt;endl;<br>  cout &lt;&lt;endl &lt;&lt;"Your answer: " &lt;&lt;endl;<br>  cout &lt;&lt;"\t{ ";<br>  if (my_answer.size() &gt; 0) {<br>    cout &lt;&lt;my_answer[0];<br>    for (int i=1; i&lt;my_answer.size(); i++)<br>      cout &lt;&lt;", " &lt;&lt;my_answer[i];<br>    cout &lt;&lt;" }" &lt;&lt;endl;<br>  }<br>  else<br>    cout &lt;&lt;"}" &lt;&lt;endl;<br>  if (my_answer != p1) {<br>    cout &lt;&lt;"DOESN'T MATCH!!!!" &lt;&lt;endl &lt;&lt;endl;<br>    return -1;<br>  }<br>  else {<br>    cout &lt;&lt;"Match :-)" &lt;&lt;endl &lt;&lt;endl;<br>    return (double)(end-start)/CLOCKS_PER_SEC;  //I want to eventually turn this into a time of some kind.<br>  }<br>}<br>double test1() {<br>  string t0[] = {<br>"............",<br>"....i..i....",<br>"....i..i....",<br>".S..i..i..Y.",<br>".M........E.",<br>"..ILEYSMIL..",<br>"............"<br>};<br>  vector &lt;string&gt; p0(t0, t0+sizeof(t0)/sizeof(string));<br>  TopographicalImage * obj = new TopographicalImage();<br>  clock_t start = clock();<br>  vector &lt;int&gt; my_answer = obj-&gt;calcPeakAreas(p0);<br>  clock_t end = clock();<br>  delete obj;<br>  cout &lt;&lt;"Time: " &lt;&lt;(double)(end-start)/CLOCKS_PER_SEC &lt;&lt;" seconds" &lt;&lt;endl;<br>  int t1[] = { 69,  3,  2,  5,  3,  1,  1 };<br>  vector &lt;int&gt; p1(t1, t1+sizeof(t1)/sizeof(int));<br>  cout &lt;&lt;"Desired answer: " &lt;&lt;endl;<br>  cout &lt;&lt;"\t{ ";<br>  if (p1.size() &gt; 0) {<br>    cout &lt;&lt;p1[0];<br>    for (int i=1; i&lt;p1.size(); i++)<br>      cout &lt;&lt;", " &lt;&lt;p1[i];<br>    cout &lt;&lt;" }" &lt;&lt;endl;<br>  }<br>  else<br>    cout &lt;&lt;"}" &lt;&lt;endl;<br>  cout &lt;&lt;endl &lt;&lt;"Your answer: " &lt;&lt;endl;<br>  cout &lt;&lt;"\t{ ";<br>  if (my_answer.size() &gt; 0) {<br>    cout &lt;&lt;my_answer[0];<br>    for (int i=1; i&lt;my_answer.size(); i++)<br>      cout &lt;&lt;", " &lt;&lt;my_answer[i];<br>    cout &lt;&lt;" }" &lt;&lt;endl;<br>  }<br>  else<br>    cout &lt;&lt;"}" &lt;&lt;endl;<br>  if (my_answer != p1) {<br>    cout &lt;&lt;"DOESN'T MATCH!!!!" &lt;&lt;endl &lt;&lt;endl;<br>    return -1;<br>  }<br>  else {<br>    cout &lt;&lt;"Match :-)" &lt;&lt;endl &lt;&lt;endl;<br>    return (double)(end-start)/CLOCKS_PER_SEC;  //I want to eventually turn this into a time of some kind.<br>  }<br>}<br>double test2() {<br>  string t0[] = {<br>"zzzzzzzzzzzzz",<br>"z...........z",<br>"z...c.b.c...z",<br>"z....bab.b..z",<br>"z...c.b.c...z",<br>"z...........z",<br>"zzzzzzzzzzzzz"<br>};<br>  vector &lt;string&gt; p0(t0, t0+sizeof(t0)/sizeof(string));<br>  TopographicalImage * obj = new TopographicalImage();<br>  clock_t start = clock();<br>  vector &lt;int&gt; my_answer = obj-&gt;calcPeakAreas(p0);<br>  clock_t end = clock();<br>  delete obj;<br>  cout &lt;&lt;"Time: " &lt;&lt;(double)(end-start)/CLOCKS_PER_SEC &lt;&lt;" seconds" &lt;&lt;endl;<br>  int t1[] = { 81,  6,  2,  1,  1 };<br>  vector &lt;int&gt; p1(t1, t1+sizeof(t1)/sizeof(int));<br>  cout &lt;&lt;"Desired answer: " &lt;&lt;endl;<br>  cout &lt;&lt;"\t{ ";<br>  if (p1.size() &gt; 0) {<br>    cout &lt;&lt;p1[0];<br>    for (int i=1; i&lt;p1.size(); i++)<br>      cout &lt;&lt;", " &lt;&lt;p1[i];<br>    cout &lt;&lt;" }" &lt;&lt;endl;<br>  }<br>  else<br>    cout &lt;&lt;"}" &lt;&lt;endl;<br>  cout &lt;&lt;endl &lt;&lt;"Your answer: " &lt;&lt;endl;<br>  cout &lt;&lt;"\t{ ";<br>  if (my_answer.size() &gt; 0) {<br>    cout &lt;&lt;my_answer[0];<br>    for (int i=1; i&lt;my_answer.size(); i++)<br>      cout &lt;&lt;", " &lt;&lt;my_answer[i];<br>    cout &lt;&lt;" }" &lt;&lt;endl;<br>  }<br>  else<br>    cout &lt;&lt;"}" &lt;&lt;endl;<br>  if (my_answer != p1) {<br>    cout &lt;&lt;"DOESN'T MATCH!!!!" &lt;&lt;endl &lt;&lt;endl;<br>    return -1;<br>  }<br>  else {<br>    cout &lt;&lt;"Match :-)" &lt;&lt;endl &lt;&lt;endl;<br>    return (double)(end-start)/CLOCKS_PER_SEC;  //I want to eventually turn this into a time of some kind.<br>  }<br>}<br>double test3() {<br>  string t0[] = {"!"};<br>  vector &lt;string&gt; p0(t0, t0+sizeof(t0)/sizeof(string));<br>  TopographicalImage * obj = new TopographicalImage();<br>  clock_t start = clock();<br>  vector &lt;int&gt; my_answer = obj-&gt;calcPeakAreas(p0);<br>  clock_t end = clock();<br>  delete obj;<br>  cout &lt;&lt;"Time: " &lt;&lt;(double)(end-start)/CLOCKS_PER_SEC &lt;&lt;" seconds" &lt;&lt;endl;<br>  int t1[] = { 1 };<br>  vector &lt;int&gt; p1(t1, t1+sizeof(t1)/sizeof(int));<br>  cout &lt;&lt;"Desired answer: " &lt;&lt;endl;<br>  cout &lt;&lt;"\t{ ";<br>  if (p1.size() &gt; 0) {<br>    cout &lt;&lt;p1[0];<br>    for (int i=1; i&lt;p1.size(); i++)<br>      cout &lt;&lt;", " &lt;&lt;p1[i];<br>    cout &lt;&lt;" }" &lt;&lt;endl;<br>  }<br>  else<br>    cout &lt;&lt;"}" &lt;&lt;endl;<br>  cout &lt;&lt;endl &lt;&lt;"Your answer: " &lt;&lt;endl;<br>  cout &lt;&lt;"\t{ ";<br>  if (my_answer.size() &gt; 0) {<br>    cout &lt;&lt;my_answer[0];<br>    for (int i=1; i&lt;my_answer.size(); i++)<br>      cout &lt;&lt;", " &lt;&lt;my_answer[i];<br>    cout &lt;&lt;" }" &lt;&lt;endl;<br>  }<br>  else<br>    cout &lt;&lt;"}" &lt;&lt;endl;<br>  if (my_answer != p1) {<br>    cout &lt;&lt;"DOESN'T MATCH!!!!" &lt;&lt;endl &lt;&lt;endl;<br>    return -1;<br>  }<br>  else {<br>    cout &lt;&lt;"Match :-)" &lt;&lt;endl &lt;&lt;endl;<br>    return (double)(end-start)/CLOCKS_PER_SEC;  //I want to eventually turn this into a time of some kind.<br>  }<br>}<br>double test4() {<br>  string t0[] = {<br>"AAAAAAABBBBCCCDEFGHHIIJIIHGFEDDCCCBBBBBBBBBBAAAAAA",<br>"AAAAABBBBBCCDDEEFGHIJJJJIIHGFEDDCCCCCCCCCBBBBBAAAA",<br>"AAAABBBBCCCDDEEFGHIIJJJJJIHGFEDDDDDDDDDCCCCBBBBAAA",<br>"AAABBBBCCDDEEFFGHHIJJJJJJIHGFEEDDDDDEEDDDDCCBBBBAA",<br>"AABBBCCDDEEFFGGHHIIJJJJJIHHGFEEEEEEEFFFEEDDCCBBBAA",<br>"BBBBCCDDEFFGHHHIIIIJJJIIIHGFFEEEEFFGGGGGFEEDCCBBBA",<br>"BBBCCDEEFGHIIIJJJJIIIIIHHGGFFEEFFGGHHHHHGGFEDCCBBB",<br>"BBCCDEEGHIJJKKKKJJJIIHHGGFFEEEEFGGHIIJJIIHGFEDCCBB",<br>"CCCDEEFHIJKLMMMLKKJIHHGGFFEEEEFFGHIJJKKJJIHGFEDCBB",<br>"CDDEEFHIJLMNNNNMLKJIHGFFEEEDEEFFGIJKKLLLKJIHFEDCCB",<br>"DDEFFGIJLMNOPPONMLJIHGFEEDDDDEFGHIJKLMMMLKJIGFEDCB",<br>"EEFFGHIKMNOQQQPONLKIHFEEDDDDDEFGHIKLMMNMMLKIHGEDCC",<br>"FFGGHIJLMOPQRRQPNMKIGFEDDCCDDEFGHIKLMNNNNMLJIGFEDC",<br>"GHHHIJKLNOQRRRQPOMKIGFEDDCCDDEFGHIKLMNNNNMLKIHFEDC",<br>"HIIIJJKLNOPQRRQPNLKIGFEDDCCDDEFGHJKLMNOONNMKJHGFDC",<br>"IJJJJJKLMOPQQQPONLJHGFEDDDDDEEFGIJKLMNOONNMLJIGFED",<br>"JJJJJKKLMNOOPPONMKJHGFEDDDDEEFGHIJKLMNNONNMLJIGFED",<br>"JKKJJJKKLMMNNNNMLJIHFFEEEEEFGGHIJKLMMNNNNMMKJIGFED",<br>"KKKJJJJJKKLLMLLKJIHGFFEEEFFGHIJKKLMMNNNNNMLKJHGFED",<br>"JJJJIIIIIJJJKKJJIIHGFFFFFGHIJKLMMNNNNNNMMLKJIHGEDC",<br>"JJJIIHHHHHHIIIIIHHGGGGGGHIJKLMNOOOOONNMMLKJIHGFEDC",<br>"IIIHHGGGGGGGGHHHGGGGGGHIIJLMNOPQQQQPONMLKJIHGFEDDC",<br>"HHHGGFFFFFFFFFGGGGGGHHIJKMNOQRSSSSRQPNMLKIHGFFEDCC",<br>"GGGFFEEEEEEEEFFFGGGHIJKLMOPRSTUUUTSRPNMKJHGFFEDCCB",<br>"FFFEEEEDDDDEEEEFGGHIJKLNOQRTUVWWWVTRPNLJIHFEEDCCBB",<br>"EEEEDDDDDDDDEEEFGHIJKLNOQRTVWXYYXWUSPNLJHGFEDCCBBB",<br>"DDDDDDDDDDDEEEFFGHIKLNOQRTVWXYZYYWURPMKIGFEDCCBBBB",<br>"CDDDDDDEEEEEEFFGHIJKMOPRSUWXYZZZXWTROMJHGEDCCBBBBA",<br>"CCDDDEEEFFFFFGGHHJKLNOQRTVWXYZZYXVTQNLIGFEDCBBBAAA",<br>"CCDDEFFGGGGHHHHIIJKMNPQSTVWXYYYXVURPMKIGEDCBBBAAAA",<br>"CDDEFGGHIIIIIIIJJKLMOPQSTUVWWXWVUSQNLJHFECCBBBAAAA",<br>"CDEFGHIJKKKKKKKKKLMNOPQRSTUVVVUTSQOMJHGEDCBBBAAAAA",<br>"CDEGHIKLMMMMMMLLLMMNOPQRSSTTTTSRQOMKIGFDCCBBAAAAAA",<br>"DEFGIKLMNOOOONNMMMNNOPQQRRRRRRQPNMKIHFEDCBBBAAAAAA",<br>"DEGHJLMOPQQQPPOONNNOOPPPQQQPPONMLKIHFEDCBBBAAAAAAA",<br>"DEGIKMNPQRRRRQPOOOOOOOPPPOOONMLKJIHFEDCCBBAAAAAAAA",<br>"DFGIKMOQRSSSRRQPOOOOOOOOONMMLKJIHGFEDCCBBBAAAAAAAA",<br>"DFGIKMOQRSSSRRQPOOOOONNNMMLKJIIHGFEDCCBBBAAAAAAAAA",<br>"DEGIJLNPQRRRRQPOONNNNNMMLLKJIHGFEEDCCBBBAAAAAAAAAA",<br>"DEFHJKMOPQQQQPOONNMMMMLLKJIHGGFEDDCCBBBAAAAAAAAAAA",<br>"CDFGIJLMNOOOONNMMLLLLLKKJIHGFEEDCCCBBBAAAAAAAAAAAA",<br>"CDEFGIJKLMMMMMLLKKKKKJJIIHGFEDDCCBBBBAAAAAAAAAAAAA",<br>"CCDEFGHIJKKKKKJJJIIIIIHHGGFEDDCCBBBBAAAAAAAAAAAAAA",<br>"BCCDEFGHHIIIIIHHHHHHHGGGFFEDDCCBBBAAAAAAAAAAAAAAAA",<br>"BBCCDEEFFGGGGGGFFFFFFFFEEDDCCCBBBAAAAAAAAAAAAAAAAA",<br>"BBBCCDDEEEEEEEEEEEEEEEEDDDCCBBBBAAAAAAAAAAAAAAAAAA",<br>"ABBBCCCCDDDDDDDDDDDDDDDCCCCBBBBAAAAAAAAAAAAAAAAAAA",<br>"AABBBBBCCCCCCCCCCCCCCCCCCBBBBBAAAAAAAAAAAAAAAAAAAA",<br>"AAABBBBBBBBBBBBBBBBBBBBBBBBBAAAAAAAAAAAAAAAAAAAAAA",<br>"AAAAAABBBBBBBBBBBBBBBBBBBBAAAAAAAAAAAAAAAAAAAAAAAA"<br>};<br>  vector &lt;string&gt; p0(t0, t0+sizeof(t0)/sizeof(string));<br>  TopographicalImage * obj = new TopographicalImage();<br>  clock_t start = clock();<br>  vector &lt;int&gt; my_answer = obj-&gt;calcPeakAreas(p0);<br>  clock_t end = clock();<br>  delete obj;<br>  cout &lt;&lt;"Time: " &lt;&lt;(double)(end-start)/CLOCKS_PER_SEC &lt;&lt;" seconds" &lt;&lt;endl;<br>  int t1[] = { 1918,  65,  483,  5,  5,  24 };<br>  vector &lt;int&gt; p1(t1, t1+sizeof(t1)/sizeof(int));<br>  cout &lt;&lt;"Desired answer: " &lt;&lt;endl;<br>  cout &lt;&lt;"\t{ ";<br>  if (p1.size() &gt; 0) {<br>    cout &lt;&lt;p1[0];<br>    for (int i=1; i&lt;p1.size(); i++)<br>      cout &lt;&lt;", " &lt;&lt;p1[i];<br>    cout &lt;&lt;" }" &lt;&lt;endl;<br>  }<br>  else<br>    cout &lt;&lt;"}" &lt;&lt;endl;<br>  cout &lt;&lt;endl &lt;&lt;"Your answer: " &lt;&lt;endl;<br>  cout &lt;&lt;"\t{ ";<br>  if (my_answer.size() &gt; 0) {<br>    cout &lt;&lt;my_answer[0];<br>    for (int i=1; i&lt;my_answer.size(); i++)<br>      cout &lt;&lt;", " &lt;&lt;my_answer[i];<br>    cout &lt;&lt;" }" &lt;&lt;endl;<br>  }<br>  else<br>    cout &lt;&lt;"}" &lt;&lt;endl;<br>  if (my_answer != p1) {<br>    cout &lt;&lt;"DOESN'T MATCH!!!!" &lt;&lt;endl &lt;&lt;endl;<br>    return -1;<br>  }<br>  else {<br>    cout &lt;&lt;"Match :-)" &lt;&lt;endl &lt;&lt;endl;<br>    return (double)(end-start)/CLOCKS_PER_SEC;  //I want to eventually turn this into a time of some kind.<br>  }<br>}<br> <br>//Powered by [KawigiEdit]<br></td>