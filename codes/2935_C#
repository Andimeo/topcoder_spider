<td class="problemText" colspan="8" valign="middle" align="left">
            using System; using System.Collections; using System.Text; public class QueenInterference { public int numSteps(int N_) {<br>N = N_;<br>board = new int[N];<br>for (int i=0; i&lt;N; i++)<br> board[i] = RAND(N)-1;<br> <br>int steps = 0;<br>int[] bad = new int[N];<br>int[] hits = new int[N];<br>int[] rows = new int[N];<br>while (true)<br> {<br> int T = 0;<br> for (int i=0; i&lt;N; i++)<br>  if (Reachable(i, board[i]))<br>   bad[T++] = i;<br> <br> if (T == 0) break;<br> <br> // Alteration step<br> steps++;<br> int K = RAND(T);<br> int C = bad[K-1];<br> //WS("K,C", K, C); WL();<br> int minHits = 999999;<br> int numMin = 0;<br> for (int y=0; y&lt;N; y++)<br>  {<br>  int h = 0;<br>  for (int x=0; x&lt;N; x++) if (x != C)<br>   if (Reaches(x, board[x], C, y))<br>    {<br>    h++;<br>    // WS("Reaches", x, board[x], C, y); WL();<br>    }<br>  hits[y] = h;<br>  if (h &lt; minHits) { minHits = h; numMin = 0; }<br>  if (h == minHits) numMin++;<br>  }<br> <br> int temp = 0;<br> for (int i=0; i&lt;N; i++) if (hits[i] == minHits)<br>  rows[temp++] = i;<br> //WS(minHits, numMin); WL();<br> //WS(rows, numMin);<br> if (numMin == 1) board[C] = rows[0]; else board[C] = rows[RAND(numMin)-1];<br> }<br> <br>return steps;<br>}<br> <br>bool Reachable(int x, int y) {<br>for (int X=0; X&lt;N; X++) if (X != x)<br> if (Reaches(x, y, X, board[X]))<br>  return true;<br>return false;<br>}<br> <br> <br>bool Reaches(int x, int y, int X, int Y) {<br>return (x==X || y==Y || Math.Abs(x-X)==Math.Abs(y-Y));<br>}<br> <br>int[] board;<br>int N;<br>Int64 a = 1;<br>int RAND(int up)<br> {<br> int result = ((int)a%up)+1;<br> a = (16807*a) % 2147483647;<br> //WL(result);<br> return result;<br> }<br> <br> <br> <br>static ArrayList AR { get { return new ArrayList(); }}<br>static Hashtable MAP { get { return new Hashtable(); }}<br> <br>static int   [] IA(ArrayList ar) { return (int   []) ar.ToArray(typeof(int   )); }<br>static string[] SA(ArrayList ar) { return (string[]) ar.ToArray(typeof(string)); }<br> <br>int    INT   (Object x) { return Convert.ToInt32 (x.ToString()); }<br>long   LONG  (Object x) { return Convert.ToInt64 (x.ToString()); }<br>double DOUBLE(Object x) { return Convert.ToDouble(x.ToString()); }<br> <br>static void WR(Object x, params object[] p) { Console.Write(x.ToString(), p); }<br>static void WL(Object x, params object[] p) { Console.WriteLine(x.ToString(), p); }<br>static void WL() { WL(""); }<br>static void WS(params Object[] c) { foreach (Object x in c) WR(x.ToString() + " "); }<br>static void WS(Array ar, int X) { for (int x=0; x&lt;X; x++) WS(ar.GetValue(x)); WL(); }<br>static void WS(Array ar, int X, int Y) { for (int y=0; y&lt;Y; y++) { for (int x=0; x&lt;X; x++) WS(ar.GetValue(x,y)); WL(); }}<br>}<br></td>