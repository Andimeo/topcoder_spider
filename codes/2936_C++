<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;vector&gt;<br>#include &lt;list&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;deque&gt;<br>#include &lt;stack&gt;<br>#include &lt;bitset&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;functional&gt;<br>#include &lt;numeric&gt;<br>#include &lt;utility&gt;<br>#include &lt;sstream&gt;<br>#include &lt;iostream&gt;<br>#include &lt;iomanip&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;time.h&gt;<br> <br>using namespace std;<br> <br>class DrivingDirections {<br>public:<br>  vector &lt;string&gt; reverse(vector &lt;string&gt;);<br>};<br> <br>vector &lt;string&gt; DrivingDirections::reverse(vector &lt;string&gt; directions) {<br>  vector &lt;string&gt; ret(0);<br>  ret.push_back("Start on ");<br>  for (int i = directions.size()-1;i&gt;=0;i--)<br>  {<br>    if (directions[i][5] == 'L')<br>    {<br>      ret[ret.size()-1] += directions[i].substr(13);<br>      ret.push_back("Turn RIGHT on ");<br>       <br>    }<br>    else if (directions[i][5] == 'R')<br>    {<br>      ret[ret.size()-1] += directions[i].substr(14);<br>      ret.push_back("Turn LEFT on ");<br>       <br>    }<br>    else<br>    {<br>      ret[ret.size()-1] += directions[i].substr(9);<br>    }<br>  }<br>  return ret;<br>}<br> <br>double test0() {<br>  string t0[] = {"Start on Pirate Street",<br>"Turn LEFT on Viking Avenue",<br>"Turn RIGHT on Ninja Court"};<br>  vector &lt;string&gt; p0(t0, t0+sizeof(t0)/sizeof(string));<br>  DrivingDirections * obj = new DrivingDirections();<br>  clock_t start = clock();<br>  vector &lt;string&gt; my_answer = obj-&gt;reverse(p0);<br>  clock_t end = clock();<br>  delete obj;<br>  cout &lt;&lt;"Time: " &lt;&lt;(double)(end-start)/CLOCKS_PER_SEC &lt;&lt;" seconds" &lt;&lt;endl;<br>  string t1[] = { "Start on Ninja Court",  "Turn LEFT on Viking Avenue",  "Turn RIGHT on Pirate Street" };<br>  vector &lt;string&gt; p1(t1, t1+sizeof(t1)/sizeof(string));<br>  cout &lt;&lt;"Desired answer: " &lt;&lt;endl;<br>  cout &lt;&lt;"\t{ ";<br>  if (p1.size() &gt; 0) {<br>    cout &lt;&lt;"\""&lt;&lt;p1[0]&lt;&lt;"\"";<br>    for (int i=1; i&lt;p1.size(); i++)<br>      cout &lt;&lt;", \"" &lt;&lt;p1[i]&lt;&lt;"\"";<br>    cout &lt;&lt;" }" &lt;&lt;endl;<br>  }<br>  else<br>    cout &lt;&lt;"}" &lt;&lt;endl;<br>  cout &lt;&lt;endl &lt;&lt;"Your answer: " &lt;&lt;endl;<br>  cout &lt;&lt;"\t{ ";<br>  if (my_answer.size() &gt; 0) {<br>    cout &lt;&lt;"\""&lt;&lt;my_answer[0]&lt;&lt;"\"";<br>    for (int i=1; i&lt;my_answer.size(); i++)<br>      cout &lt;&lt;", \"" &lt;&lt;my_answer[i]&lt;&lt;"\"";<br>    cout &lt;&lt;" }" &lt;&lt;endl;<br>  }<br>  else<br>    cout &lt;&lt;"}" &lt;&lt;endl;<br>  if (my_answer != p1) {<br>    cout &lt;&lt;"DOESN'T MATCH!!!!" &lt;&lt;endl &lt;&lt;endl;<br>    return -1;<br>  }<br>  else {<br>    cout &lt;&lt;"Match :-)" &lt;&lt;endl &lt;&lt;endl;<br>    return (double)(end-start)/CLOCKS_PER_SEC;  //I want to eventually turn this into a time of some kind.<br>  }<br>}<br>double test1() {<br>  string t0[] = {"Start on planet Earth"};<br>  vector &lt;string&gt; p0(t0, t0+sizeof(t0)/sizeof(string));<br>  DrivingDirections * obj = new DrivingDirections();<br>  clock_t start = clock();<br>  vector &lt;string&gt; my_answer = obj-&gt;reverse(p0);<br>  clock_t end = clock();<br>  delete obj;<br>  cout &lt;&lt;"Time: " &lt;&lt;(double)(end-start)/CLOCKS_PER_SEC &lt;&lt;" seconds" &lt;&lt;endl;<br>  string t1[] = { "Start on planet Earth" };<br>  vector &lt;string&gt; p1(t1, t1+sizeof(t1)/sizeof(string));<br>  cout &lt;&lt;"Desired answer: " &lt;&lt;endl;<br>  cout &lt;&lt;"\t{ ";<br>  if (p1.size() &gt; 0) {<br>    cout &lt;&lt;"\""&lt;&lt;p1[0]&lt;&lt;"\"";<br>    for (int i=1; i&lt;p1.size(); i++)<br>      cout &lt;&lt;", \"" &lt;&lt;p1[i]&lt;&lt;"\"";<br>    cout &lt;&lt;" }" &lt;&lt;endl;<br>  }<br>  else<br>    cout &lt;&lt;"}" &lt;&lt;endl;<br>  cout &lt;&lt;endl &lt;&lt;"Your answer: " &lt;&lt;endl;<br>  cout &lt;&lt;"\t{ ";<br>  if (my_answer.size() &gt; 0) {<br>    cout &lt;&lt;"\""&lt;&lt;my_answer[0]&lt;&lt;"\"";<br>    for (int i=1; i&lt;my_answer.size(); i++)<br>      cout &lt;&lt;", \"" &lt;&lt;my_answer[i]&lt;&lt;"\"";<br>    cout &lt;&lt;" }" &lt;&lt;endl;<br>  }<br>  else<br>    cout &lt;&lt;"}" &lt;&lt;endl;<br>  if (my_answer != p1) {<br>    cout &lt;&lt;"DOESN'T MATCH!!!!" &lt;&lt;endl &lt;&lt;endl;<br>    return -1;<br>  }<br>  else {<br>    cout &lt;&lt;"Match :-)" &lt;&lt;endl &lt;&lt;endl;<br>    return (double)(end-start)/CLOCKS_PER_SEC;  //I want to eventually turn this into a time of some kind.<br>  }<br>}<br>double test2() {<br>  string t0[] = {"Start on Hebron Ave",<br>"Turn RIGHT on CT-2",<br>"Turn LEFT on I-84",<br>"Turn LEFT on I-81",<br>"Turn RIGHT on I-80",<br>"Turn LEFT on I-680",<br>"Turn RIGHT on Mission Blvd",<br>"Turn LEFT on I-880",<br>"Turn RIGHT on Montague Expressway",<br>"Turn RIGHT on Mission College Blvd"};<br>  vector &lt;string&gt; p0(t0, t0+sizeof(t0)/sizeof(string));<br>  DrivingDirections * obj = new DrivingDirections();<br>  clock_t start = clock();<br>  vector &lt;string&gt; my_answer = obj-&gt;reverse(p0);<br>  clock_t end = clock();<br>  delete obj;<br>  cout &lt;&lt;"Time: " &lt;&lt;(double)(end-start)/CLOCKS_PER_SEC &lt;&lt;" seconds" &lt;&lt;endl;<br>  string t1[] = { "Start on Mission College Blvd",  "Turn LEFT on Montague Expressway",  "Turn LEFT on I-880",  "Turn RIGHT on Mission Blvd",  "Turn LEFT on I-680",  "Turn RIGHT on I-80",  "Turn LEFT on I-81",  "Turn RIGHT on I-84",  "Turn RIGHT on CT-2",  "Turn LEFT on Hebron Ave" };<br>  vector &lt;string&gt; p1(t1, t1+sizeof(t1)/sizeof(string));<br>  cout &lt;&lt;"Desired answer: " &lt;&lt;endl;<br>  cout &lt;&lt;"\t{ ";<br>  if (p1.size() &gt; 0) {<br>    cout &lt;&lt;"\""&lt;&lt;p1[0]&lt;&lt;"\"";<br>    for (int i=1; i&lt;p1.size(); i++)<br>      cout &lt;&lt;", \"" &lt;&lt;p1[i]&lt;&lt;"\"";<br>    cout &lt;&lt;" }" &lt;&lt;endl;<br>  }<br>  else<br>    cout &lt;&lt;"}" &lt;&lt;endl;<br>  cout &lt;&lt;endl &lt;&lt;"Your answer: " &lt;&lt;endl;<br>  cout &lt;&lt;"\t{ ";<br>  if (my_answer.size() &gt; 0) {<br>    cout &lt;&lt;"\""&lt;&lt;my_answer[0]&lt;&lt;"\"";<br>    for (int i=1; i&lt;my_answer.size(); i++)<br>      cout &lt;&lt;", \"" &lt;&lt;my_answer[i]&lt;&lt;"\"";<br>    cout &lt;&lt;" }" &lt;&lt;endl;<br>  }<br>  else<br>    cout &lt;&lt;"}" &lt;&lt;endl;<br>  if (my_answer != p1) {<br>    cout &lt;&lt;"DOESN'T MATCH!!!!" &lt;&lt;endl &lt;&lt;endl;<br>    return -1;<br>  }<br>  else {<br>    cout &lt;&lt;"Match :-)" &lt;&lt;endl &lt;&lt;endl;<br>    return (double)(end-start)/CLOCKS_PER_SEC;  //I want to eventually turn this into a time of some kind.<br>  }<br>}<br>double test3() {<br>  string t0[] = {"Start on  ",<br>"Turn LEFT on  0123456789 - ",<br>"Turn RIGHT on  0123456789 - ",<br>"Turn LEFT on                                      ",<br>"Turn RIGHT on                                     ",<br>"Turn LEFT on -a0b1c2d3e4f5g6h7i8j9k ",<br>"Turn RIGHT on -A0B1C2D3E4F5G6H7I8J9K ",<br>"Turn LEFT on -",<br>"Turn RIGHT on -"};<br>  vector &lt;string&gt; p0(t0, t0+sizeof(t0)/sizeof(string));<br>  DrivingDirections * obj = new DrivingDirections();<br>  clock_t start = clock();<br>  vector &lt;string&gt; my_answer = obj-&gt;reverse(p0);<br>  clock_t end = clock();<br>  delete obj;<br>  cout &lt;&lt;"Time: " &lt;&lt;(double)(end-start)/CLOCKS_PER_SEC &lt;&lt;" seconds" &lt;&lt;endl;<br>  string t1[] = { "Start on -",  "Turn LEFT on -",  "Turn RIGHT on -A0B1C2D3E4F5G6H7I8J9K ",  "Turn LEFT on -a0b1c2d3e4f5g6h7i8j9k ",  "Turn RIGHT on                                     ",  "Turn LEFT on                                      ",  "Turn RIGHT on  0123456789 - ",  "Turn LEFT on  0123456789 - ",  "Turn RIGHT on  " };<br>  vector &lt;string&gt; p1(t1, t1+sizeof(t1)/sizeof(string));<br>  cout &lt;&lt;"Desired answer: " &lt;&lt;endl;<br>  cout &lt;&lt;"\t{ ";<br>  if (p1.size() &gt; 0) {<br>    cout &lt;&lt;"\""&lt;&lt;p1[0]&lt;&lt;"\"";<br>    for (int i=1; i&lt;p1.size(); i++)<br>      cout &lt;&lt;", \"" &lt;&lt;p1[i]&lt;&lt;"\"";<br>    cout &lt;&lt;" }" &lt;&lt;endl;<br>  }<br>  else<br>    cout &lt;&lt;"}" &lt;&lt;endl;<br>  cout &lt;&lt;endl &lt;&lt;"Your answer: " &lt;&lt;endl;<br>  cout &lt;&lt;"\t{ ";<br>  if (my_answer.size() &gt; 0) {<br>    cout &lt;&lt;"\""&lt;&lt;my_answer[0]&lt;&lt;"\"";<br>    for (int i=1; i&lt;my_answer.size(); i++)<br>      cout &lt;&lt;", \"" &lt;&lt;my_answer[i]&lt;&lt;"\"";<br>    cout &lt;&lt;" }" &lt;&lt;endl;<br>  }<br>  else<br>    cout &lt;&lt;"}" &lt;&lt;endl;<br>  if (my_answer != p1) {<br>    cout &lt;&lt;"DOESN'T MATCH!!!!" &lt;&lt;endl &lt;&lt;endl;<br>    return -1;<br>  }<br>  else {<br>    cout &lt;&lt;"Match :-)" &lt;&lt;endl &lt;&lt;endl;<br>    return (double)(end-start)/CLOCKS_PER_SEC;  //I want to eventually turn this into a time of some kind.<br>  }<br>}<br>double test4() {<br>  string t0[] = {"Start on Duke University Rd",<br>"Turn RIGHT on Swift Ave",<br>"Turn LEFT on NC-147",<br>"Turn LEFT on I-85",<br>"Turn RIGHT on I-40",<br>"Turn RIGHT on US-52",<br>"Turn LEFT on I-74",<br>"Turn RIGHT on I-77",<br>"Turn LEFT on I-64",<br>"Turn RIGHT on Martin Luther King Memorial Bridge",<br>"Turn RIGHT on N 3rd St",<br>"Turn LEFT on Cole St",<br>"Turn LEFT on N Broadway",<br>"Turn RIGHT on Convention Plz"};<br>  vector &lt;string&gt; p0(t0, t0+sizeof(t0)/sizeof(string));<br>  DrivingDirections * obj = new DrivingDirections();<br>  clock_t start = clock();<br>  vector &lt;string&gt; my_answer = obj-&gt;reverse(p0);<br>  clock_t end = clock();<br>  delete obj;<br>  cout &lt;&lt;"Time: " &lt;&lt;(double)(end-start)/CLOCKS_PER_SEC &lt;&lt;" seconds" &lt;&lt;endl;<br>  string t1[] = { "Start on Convention Plz",  "Turn LEFT on N Broadway",  "Turn RIGHT on Cole St",  "Turn RIGHT on N 3rd St",  "Turn LEFT on Martin Luther King Memorial Bridge",  "Turn LEFT on I-64",  "Turn RIGHT on I-77",  "Turn LEFT on I-74",  "Turn RIGHT on US-52",  "Turn LEFT on I-40",  "Turn LEFT on I-85",  "Turn RIGHT on NC-147",  "Turn RIGHT on Swift Ave",  "Turn LEFT on Duke University Rd" };<br>  vector &lt;string&gt; p1(t1, t1+sizeof(t1)/sizeof(string));<br>  cout &lt;&lt;"Desired answer: " &lt;&lt;endl;<br>  cout &lt;&lt;"\t{ ";<br>  if (p1.size() &gt; 0) {<br>    cout &lt;&lt;"\""&lt;&lt;p1[0]&lt;&lt;"\"";<br>    for (int i=1; i&lt;p1.size(); i++)<br>      cout &lt;&lt;", \"" &lt;&lt;p1[i]&lt;&lt;"\"";<br>    cout &lt;&lt;" }" &lt;&lt;endl;<br>  }<br>  else<br>    cout &lt;&lt;"}" &lt;&lt;endl;<br>  cout &lt;&lt;endl &lt;&lt;"Your answer: " &lt;&lt;endl;<br>  cout &lt;&lt;"\t{ ";<br>  if (my_answer.size() &gt; 0) {<br>    cout &lt;&lt;"\""&lt;&lt;my_answer[0]&lt;&lt;"\"";<br>    for (int i=1; i&lt;my_answer.size(); i++)<br>      cout &lt;&lt;", \"" &lt;&lt;my_answer[i]&lt;&lt;"\"";<br>    cout &lt;&lt;" }" &lt;&lt;endl;<br>  }<br>  else<br>    cout &lt;&lt;"}" &lt;&lt;endl;<br>  if (my_answer != p1) {<br>    cout &lt;&lt;"DOESN'T MATCH!!!!" &lt;&lt;endl &lt;&lt;endl;<br>    return -1;<br>  }<br>  else {<br>    cout &lt;&lt;"Match :-)" &lt;&lt;endl &lt;&lt;endl;<br>    return (double)(end-start)/CLOCKS_PER_SEC;  //I want to eventually turn this into a time of some kind.<br>  }<br>}<br> <br>//Powered by [KawigiEdit]<br></td>