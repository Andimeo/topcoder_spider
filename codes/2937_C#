<td class="problemText" colspan="8" valign="middle" align="left">
            using System; using System.Collections; public class IPConverter<br>{<br>  public string[] possibleAddresses(string am) {<br>    ArrayList ar = AR;<br>    int N=am.Length;<br>    for (int i=1; i&lt;N; i++) for (int j=i+1; j&lt;N; j++)<br>    for (int k=j+1; k&lt;N; k++)<br>    if (OK(am.Substring(0, i)) &amp;&amp; OK(am.Substring(i,j-i)) &amp;&amp; OK(am.Substring(j,k-j)) &amp;&amp; OK(am.Substring(k)))<br>    ar.Add(am.Substring(0, i) +"."+ am.Substring(i,j-i) +"."+ am.Substring(j,k-j) +"."+ am.Substring(k));<br>    <br>    ar.Sort();<br>    return SA(ar);<br>  }<br>  <br>  bool OK(String s)<br>  {<br>    if(s == "0") return true;<br>    if (s.Length &gt; 3) return false;<br>    if (s.Length == 0 || s[0] == '0') return false;<br>    int x = INT(s);<br>    if (x &lt; 0 || x &gt; 255) return false;<br>    return true;<br>  }<br> <br> <br>static ArrayList AR { get { return new ArrayList(); }}<br>static Hashtable MAP { get { return new Hashtable(); }}<br> <br>static int   [] IA(ArrayList ar) { return (int   []) ar.ToArray(typeof(int   )); }<br>static string[] SA(ArrayList ar) { return (string[]) ar.ToArray(typeof(string)); }<br> <br>int    INT   (Object x) { return Convert.ToInt32 (x.ToString()); }<br>long   LONG  (Object x) { return Convert.ToInt64 (x.ToString()); }<br>double DOUBLE(Object x) { return Convert.ToDouble(x.ToString()); }<br> <br>static void WR(Object x, params object[] p) { Console.Write(x.ToString(), p); }<br>static void WL(Object x, params object[] p) { Console.WriteLine(x.ToString(), p); }<br>static void WL() { WL(""); }<br>static void WS(params Object[] c) { foreach (Object x in c) WR(x.ToString() + " "); }<br>static void WSL(params Object[] c) { foreach (Object x in c) WR(x.ToString() + " "); WL(); }<br>static void WS(Array ar, int X) { for (int x=0; x&lt;X; x++) WS(ar.GetValue(x)); WL(); }<br>static void WS(Array ar, int X, int Y) { for (int y=0; y&lt;Y; y++) { for (int x=0; x&lt;X; x++) WS(ar.GetValue(x,y)); WL(); }}}<br> <br>// Powered by PopsEdit<br></td>