<td class="problemText" colspan="8" valign="middle" align="left">
            using System; using System.Collections; using System.Text; public class StarAdventure { public int mostStars(string[] L) {<br>int X=L[0].Length, Y=L.Length, XY=X+Y;<br>int[,,] best = new int[X,X,X]; // best score with paths at the given X positions<br>int[,,] b2 = new int[X,X,X];<br>for (int A=0; A&lt;X; A++) for (int B=0; B&lt;X; B++) for (int C=0; C&lt;X; C++)<br> best[A,B,C] = -999999999;<br>best[0,0,0] = 0;<br>for (int t=1; t&lt;=X+Y-2; t++)<br> {<br> for (int A=0; A&lt;X; A++) for (int B=0; B&lt;X; B++) for (int C=0; C&lt;X; C++)<br>  {<br>  int aa = t-A, bb=t-B, cc=t-C;<br>  if (aa &lt; 0 || bb &lt; 0 || cc &lt; 0 || aa &gt;= Y || bb &gt;= Y || cc &gt;= Y) continue;<br>  int bestHere = 0;<br>  int delta = (int)L[aa][A] - 48;<br>  if (B != A) delta += (int)L[bb][B] - 48;<br>  if (C != A &amp;&amp; C != B) delta += (int)L[cc][C] - 48;<br>  if ( A&gt;0 &amp;&amp;  B&gt;0 &amp;&amp;  C&gt;0) bestHere = Math.Max(bestHere, best[A-1, B-1, C-1] + delta);<br>  if ( A&gt;0 &amp;&amp;  B&gt;0 &amp;&amp; cc&gt;0) bestHere = Math.Max(bestHere, best[A-1, B-1, C  ] + delta);<br>  if ( A&gt;0 &amp;&amp; bb&gt;0 &amp;&amp;  C&gt;0) bestHere = Math.Max(bestHere, best[A-1, B,   C-1] + delta);<br>  if ( A&gt;0 &amp;&amp; bb&gt;0 &amp;&amp; cc&gt;0) bestHere = Math.Max(bestHere, best[A-1, B,   C  ] + delta);<br>  if (aa&gt;0 &amp;&amp;  B&gt;0 &amp;&amp;  C&gt;0) bestHere = Math.Max(bestHere, best[A,   B-1, C-1] + delta);<br>  if (aa&gt;0 &amp;&amp;  B&gt;0 &amp;&amp; cc&gt;0) bestHere = Math.Max(bestHere, best[A,   B-1, C  ] + delta);<br>  if (aa&gt;0 &amp;&amp; bb&gt;0 &amp;&amp;  C&gt;0) bestHere = Math.Max(bestHere, best[A,   B,   C-1] + delta);<br>  if (aa&gt;0 &amp;&amp; bb&gt;0 &amp;&amp; cc&gt;0) bestHere = Math.Max(bestHere, best[A,   B,   C  ] + delta);<br>  b2[A,B,C] = bestHere;<br>  }<br> <br> int[,,] temp = best; best = b2; b2 = temp;<br> }<br> <br>return best[X-1,X-1,X-1];<br>}<br> <br> <br>static ArrayList AR { get { return new ArrayList(); }}<br>static Hashtable MAP { get { return new Hashtable(); }}<br> <br>static int   [] IA(ArrayList ar) { return (int   []) ar.ToArray(typeof(int   )); }<br>static string[] SA(ArrayList ar) { return (string[]) ar.ToArray(typeof(string)); }<br> <br>int    INT   (Object x) { return Convert.ToInt32 (x.ToString()); }<br>long   LONG  (Object x) { return Convert.ToInt64 (x.ToString()); }<br>double DOUBLE(Object x) { return Convert.ToDouble(x.ToString()); }<br> <br>static void WR(Object x, params object[] p) { Console.Write(x.ToString(), p); }<br>static void WL(Object x, params object[] p) { Console.WriteLine(x.ToString(), p); }<br>static void WL() { WL(""); }<br>static void WS(params Object[] c) { foreach (Object x in c) WR(x.ToString() + " "); }<br>static void WS(Array ar, int X) { for (int x=0; x&lt;X; x++) WS(ar.GetValue(x)); WL(); }<br>static void WS(Array ar, int X, int Y) { for (int y=0; y&lt;Y; y++) { for (int x=0; x&lt;X; x++) WS(ar.GetValue(x,y)); WL(); }}<br>}<br></td>