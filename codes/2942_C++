<td class="problemText" colspan="8" valign="middle" align="left">
            // {{{<br>#include &lt;algorithm&gt;<br>#include &lt;cctype&gt;<br>#include &lt;cstring&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;iostream&gt;<br>#include &lt;sstream&gt;<br>#include &lt;utility&gt;<br>#include &lt;string&gt;<br>#include &lt;vector&gt;<br>using namespace std;<br>#define REP(i,n) for(int i=0;i&lt;(n);++i)<br>#define FOR(i,a,b) for(int i=(a);i&lt;=(b);++i)<br>#define FORD(i,a,b) for(int i=(a);i&gt;=(b);--i)<br>#define FOREACH(it,c) for(typeof((c).begin()) it=(c).begin();it!=(c).end();++it)<br>typedef long long LL; typedef long double ld; typedef vector&lt;int&gt; VI;<br>typedef vector&lt;string&gt; VS; const int INF = 1000000000;<br>const LL INFLL = LL(INF)*LL(INF); const double PI = 4*atan(1.0);<br>template&lt;class T&gt; inline int size(const T&amp;c) { return c.size(); }<br>template&lt;class T&gt; string i2s(T x) { stringstream ss; ss&lt;&lt;x; return ss.str(); }<br>int s2i(string s) { stringstream ss(s); int x; ss&gt;&gt;x; return x;}<br>int s2ll(string s) { stringstream ss(s); LL x; ss&gt;&gt;x; return x;}<br><br>VS split(string s, string del=" ") {<br>  s += del[0]; string w; VS res;<br>  FOREACH(it,s) {<br>    if(find(del.begin(),del.end(),*it)==del.end()) {<br>      w += *it;<br>    } else {<br>      if(w!="") res.push_back(w); w="";<br>    }<br>  }<br>  return res;<br>}<br><br>VI s2vi(string s, string del=" ") {<br>  VS v = split(s,del);<br>  VI res;<br>  FOREACH(it,v) res.push_back(s2i(*it));<br>  return res;<br>}<br><br>// }}}<br><br>LL tab[100000];<br>LL tab2[100000];<br><br>LL calc(vector&lt;string&gt; &amp;folds, int len, char c) {<br>//  cerr &lt;&lt; "calc\n";<br>  int st = 0;<br>  REP(i,len) tab[i]=1;<br>  FOREACH(it,folds) {<br>    string s = *it;<br>    if(tolower(s[0])!=c) continue;<br>    int x = s2i(s.substr(1,string::npos));<br>    x -= st;<br>    if(x&lt;=0 || x&gt;=len) continue;<br><br>    // assume right<br>    int L1 = x;<br>    int L2 = len-x;<br>    len = max(L1,L2);<br>    REP(i,len) {<br>      LL a = 0;<br>      if(L1-1-i&gt;=0) a += tab[L1-1-i];<br>      if(i&lt;L2) a += tab[L1+i];<br>      tab2[i]=a;<br>    }<br>    REP(i,len) tab[i]=tab2[i];<br>    if(islower(s[0])) { // left<br>      st += x-len;<br>      reverse(tab, tab+len);<br>    } else // right<br>      st += x;<br>//    cerr &lt;&lt; st &lt;&lt; "\n";<br>//    REP(i,len) cerr &lt;&lt; tab[i] &lt;&lt; " ";<br>//    cerr &lt;&lt; "\n";<br>  }<br>  LL res = 0;<br>  REP(i,len) res = max(res, tab[i]);<br>  return res;<br>}<br><br>struct PaperThickness {<br><br>// MAIN<br>long long maxThickness(vector &lt;string&gt; folds, int width, int height) {<br>  string s; FOREACH(it,folds) s += *it;<br>  VS v = split(s);<br>  return calc(v, width, 'x') * calc(v, height, 'y');<br>}<br><br>};<br><br><br><br>// Powered by FileEdit<br></td>