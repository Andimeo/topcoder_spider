<td class="problemText" colspan="8" valign="middle" align="left">
            using namespace std;<br>#include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;stdio.h&gt;<br>#include &lt;stdlib.h&gt;<br>#include &lt;string.h&gt;<br>#include &lt;ctype.h&gt;<br>#include &lt;stack&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;queue&gt;<br>#include &lt;iostream&gt;<br>#include &lt;sstream&gt;<br>typedef long long I64;<br>typedef vector&lt;int&gt; VI;<br>typedef vector&lt;string&gt; VS;<br>typedef vector&lt;I64&gt; VI64;<br>typedef unsigned uint;<br>typedef const char cchar;<br>typedef pair&lt;int,int&gt; PII;<br>typedef vector&lt;double&gt; VD;<br>typedef vector&lt;PII&gt; VPII;<br>#define FOR(i,n) for(int i=0;i&lt;(n);i++)<br>#define FORR(i,a,b) for(int i=(a);i&lt;=(b);i++)<br>#define VAR(a,b) __typeof(b) a=b<br>#define FORIT(it,c) for(VAR(it,(c).begin());it!=(c).end();it++)<br>#define ALL(x) (x).begin(),(x).end()<br>#define UNIQ(x) (x).erase(unique(ALL(x)),(x).end())<br> <br>int cd(int x,int cx,int y,int cy) {<br>    int d = (((x)-cx)*((x)-cx)+((y)-cy)*((y-cy)));<br>    printf("dist %d\n",d);<br>    return d;<br>}<br> <br>#define dist(x,y) (((x)-cx)*((x)-cx)+((y)-cy)*((y-cy)))<br>// #define dist(x,y) cd(x,cx,y,cy)<br>#define disteq(x,y) (dist(x,y)==sqd)<br>#define corner(x,y) (disteq(x,y)+disteq(x+1,y)+disteq(x,y+1)+disteq(y+1,y+1))<br>#define hits(x,y) (min(min(dist(x,y),dist(x+1,y)),min(dist(x,y+1),dist(x+1,y+1))) &lt; sqd &amp;&amp; max(max(dist(x,y),dist(x+1,y)),max(dist(x,y+1),dist(x+1,y+1))) &gt; sqd)<br> <br>struct ArcsImpl {<br>    vector &lt;string&gt; grid;<br>    ArcsImpl(vector &lt;string&gt; _grid) {<br>        grid = _grid;<br>    }<br>    <br>    bool edge(int x1,int y1,int x2,int y2) {<br>        int r = abs(x1-x2);<br>        if(r != abs(y2-y1)) return false;<br>        if(r==0) return false;<br> <br>        // printf("edge %d,%d,%d,%d ?\n",x1,y1,x2,y2);<br> <br>        if(x1 &gt; x2) {<br>            swap(x1,x2);<br>            swap(y1,y2);<br>        }<br> <br>        int sqd = (x1-x2)*(x1-x2);<br>        // printf("sqd %d\n",sqd);<br> <br>        int cx = x1;<br>        int cy = y2;<br> <br>        for(int xx=min(x1,x2); xx&lt;max(x1,x2); xx++) {<br>            for(int yy=min(y1,y2); yy&lt;max(y1,y2); yy++) {<br>                // printf("test %d,%d: %d\n",xx,yy,hits(xx,yy));<br>                if(grid[yy][xx]=='#' &amp;&amp; hits(xx,yy))<br>                    goto fail1;<br> <br>            }<br>        }<br>        return true;<br>fail1:<br>        cx = x2;<br>        cy = y1;<br>        for(int xx=min(x1,x2); xx&lt;max(x1,x2); xx++) {<br>            for(int yy=min(y1,y2); yy&lt;max(y1,y2); yy++) {<br>                if(grid[yy][xx]=='#' &amp;&amp; hits(xx,yy))<br>                    goto fail2;<br> <br>            }<br>        }<br>        return true;<br>fail2:<br>        return false;<br>    }<br> <br>    int numArcs() {<br>        unsigned dist[60][60];<br>        memset(dist,-1,sizeof(dist));<br> <br>        queue&lt;PII&gt; q;<br>        q.push(PII(0,0));<br>        dist[0][0] = 0;<br> <br>        int xs = grid[0].size();<br>        int ys = grid.size();<br> <br>        // printf("xs %d, ys %d\n",xs,ys);<br> <br>        while(!q.empty()) {<br>            int atx = q.front().first;<br>            int aty = q.front().second;<br>            q.pop();<br> <br>            unsigned newdist = dist[atx][aty]+1;<br> <br> <br>            for(int x=0; x&lt;=xs; x++)<br>            for(int y=0; y&lt;=ys; y++) {<br>                if(dist[x][y] &lt;= newdist) continue;<br>                if(edge(atx,aty,x,y)) {<br>                    dist[x][y] = newdist;<br>                    q.push(PII(x,y));<br>                    // printf("dist %d,%d -&gt; %d,%d = %d\n",atx,aty,x,y,newdist);<br>                }<br>            }<br>        }<br> <br>        return dist[xs][ys];<br>    };<br>};<br> <br> <br>struct Arcs {<br>    int numArcs(vector &lt;string&gt; grid) {<br>        ArcsImpl impl(grid);<br>        return impl.numArcs();<br>    }<br> <br>};<br> <br> <br> <br> <br>// Powered by FileEdit<br>// Powered by CodeProcessor<br></td>