<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>public class Arcs {<br>  boolean[][] g;<br>  boolean[][] v;<br>  LinkedList q;<br>  int h, w;<br>  static class State {<br>    int x, y, d;<br>    State(int x, int y, int d) {<br>      this.x = x;<br>      this.y = y;<br>      this.d = d;<br>    }<br>  }<br>  boolean ok(int x, int y, int r, int u, int v) {<br>    r *= r;<br>    int x1 = (u - x) * (u - x);<br>    int x2 = (u - x + 1) * (u - x + 1);<br>    int y1 = (v - y) * (v - y);<br>    int y2 = (v - y + 1) * (v - y + 1);<br>    boolean a = x1 + y1 &lt; r || x1 + y2 &lt; r || x2 + y1 &lt; r || x2 + y2 &lt; r;<br>    boolean b = x1 + y1 &gt; r || x1 + y2 &gt; r || x2 + y1 &gt; r || x2 + y2 &gt; r;<br>    return !(a &amp;&amp; b &amp;&amp; g[v][u]);<br>  }<br>  boolean block(int x, int y, int r, int dx, int dy) {<br>    int x1 = Math.min(x, x + r * dx);<br>    int x2 = Math.max(x, x + r * dx);<br>    int y1 = Math.min(y, y + r * dy);<br>    int y2 = Math.max(y, y + r * dy);<br>    for (int i = x1; i &lt; x2; i++)<br>      for (int j = y1; j &lt; y2; j++)<br>        if (!ok(x, y, r, i, j)) return true;<br>    return false;<br>  }<br>  void add(int x1, int y1, int d, int x2, int y2) {<br>    if (x2 &lt; 0 || x2 &gt; w || y2 &lt; 0 || y2 &gt; h) return;<br>    if (v[y2][x2]) return;<br>    int r = Math.abs(x2 - x1);<br>    if (block(x1, y2, r, x2 &lt; x1 ? -1 : 1, y1 &lt; y2 ? -1 : 1) &amp;&amp;<br>        block(x2, y1, r, x1 &lt; x2 ? -1 : 1, y2 &lt; y1 ? -1 : 1)) return;<br>    if (x2 == w &amp;&amp; y2 == h) done = true;<br>    v[y2][x2] = true;<br>    q.add(new State(x2, y2, d + 1));<br>  }<br>  boolean done;<br>  public int numArcs(String[] grid) {<br>    h = grid.length;<br>    w = grid[0].length();<br>    g = new boolean[h][w];<br>    v = new boolean[h + 1][w + 1];<br>    for (int i = 0; i &lt; h; i++)<br>      for (int j = 0; j &lt; w; j++)<br>        g[i][j] = grid[i].charAt(j) == '#';<br>    q = new LinkedList();<br>    int xx = Math.min(w, h);<br>    done = false;<br>    v[0][0] = true;<br>    q.add(new State(0, 0, 0));<br>    while (!q.isEmpty() &amp;&amp; !done) {<br>      State s = (State) q.removeFirst();<br>      for (int i = 1; i &lt;= xx; i++) {<br>        add(s.x, s.y, s.d, s.x + i, s.y + i);<br>        add(s.x, s.y, s.d, s.x + i, s.y - i);<br>        add(s.x, s.y, s.d, s.x - i, s.y + i);<br>        add(s.x, s.y, s.d, s.x - i, s.y - i);<br>      }<br>      if (done) return s.d + 1;<br>    }<br>    return -1;<br>  }<br>}<br> <br> <br>// Powered by FileEdit<br>// Powered by CodeProcessor<br></td>