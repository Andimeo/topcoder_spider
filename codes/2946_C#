<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections;<br><br>public class NegativePhotoresist <br>{<br>  double[,] dist;<br>  bool[,] connections;<br>  int[] x;<br>  int[] y;<br>  int N;<br>  public double minimumTilt(string[] pinConnections, int limit) <br>  {<br>    N = pinConnections.Length;<br>    x = new int[N];<br>    y = new int[N];<br>    connections = new bool[pinConnections.Length, pinConnections.Length];<br>    dist = new double[pinConnections.Length, pinConnections.Length];<br>    for(int i=0;i&lt;pinConnections.Length;i++)<br>    {<br>      string[] s = pinConnections[i].Split(new char[]{' ',','});<br>      x[i] = Int32.Parse(s[0]);<br>      y[i] = Int32.Parse(s[1]);<br>      for(int j=2;j&lt;s.Length;j++)<br>      {<br>        int to = Int32.Parse(s[j]);<br>        connections[i,to] = true;<br>      }<br>    }<br>    double low = 0.01;<br>    double high = 1.55;<br>    while(high - low &gt; 5e-11)<br>    {<br>      double guess = (low + high)/2.0;<br>      if(satisfied(guess, limit))<br>      {<br>        high = guess;<br>      }<br>      else<br>      {<br>        low = guess;<br>      }<br>    }<br>    return (low + high) / 2;<br>  }<br>  bool satisfied(double angle,int limit)<br>  {<br>    for(int i=0;i&lt;N;i++)<br>    {<br>      for(int j=i+1;j&lt;N;j++)<br>      {<br>        if(connections[i,j])<br>          dist[i,j] = dist[j,i] = len(i,j,angle);<br>        else<br>          dist[i,j] = dist[j,i] = -1;<br>      }<br>    }<br>    for(int i=0;i&lt;N;i++)<br>      for(int j=0;j&lt;N;j++)<br>        for(int k=0;k&lt;N;k++)<br>          if(dist[j,i] != -1 &amp;&amp; dist[i,k] != -1)<br>            if(dist[j,k] == -1 || dist[j,k] &gt; dist[j,i] + dist[i,k])<br>              dist[j,k] = dist[j,i] + dist[i,k];<br>    double sum = 0;<br>    for(int i=0;i&lt;N;i++)<br>    {<br>      for(int j=i+1;j&lt;N;j++)<br>      {<br>        if(dist[i,j] != -1)<br>          sum += dist[i,j];<br>      }<br>    }<br>        <br>    return sum &lt; limit;<br>  }<br>  double len(int from,int to,double angle)<br>  {<br>    double x1 = x[from];<br>    double x2 = x[to];<br>    double y1 = y[from] * Math.Cos(angle);<br>    double y2 = y[to] * Math.Cos(angle);<br>    return Math.Sqrt(square(x2-x1)+square(y2-y1));  <br>  }<br>  double square(double x)<br>  {<br>    return x*x;<br>  }<br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by CodeProcessor<br></td>