<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;map&gt; // find insert erase make_pair first second<br>#include &lt;set&gt;<br>#include &lt;cassert&gt; // assert<br>//#include &lt;queue&gt;<br>//#include &lt;cctype&gt; // isalpha isdigit isalnum isupper islower tolower toupper<br>#include &lt;string&gt; // size<br>#include &lt;vector&gt; // push_back pop_back front back<br>#include &lt;iostream&gt;<br>#include &lt;sstream&gt; // istringstream ostringstream<br>#include &lt;algorithm&gt; // next_permutation reverse count<br>#include &lt;numeric&gt; // accumulate<br>#include &lt;functional&gt;<br><br>using namespace std;<br><br>#ifndef TR // DEBUG OUTPUT MACRO<br>#  define TR(v) do{}while(0)<br>#  undef assert<br>#  define assert(expr) (void)(expr)<br>#endif<br>#define ALL(C) (C).begin(), (C).end()<br>#define forIter(I, C) for(typeof((C).begin()) I=(C).begin(); I!=(C).end(); ++I)<br>#define forN(I, C) for ( int I = 0; I &lt; (C); ++(I) )<br>#define forEach(I, C) forN(I,int((C).size()))<br>#define forEach2(I, J, C) forEach(I, C)forEach(J, (C)[I])<br>typedef long long i64; typedef unsigned long long u64;<br>typedef vector&lt;int&gt; VI; typedef vector&lt;VI&gt; VVI; typedef vector&lt;string&gt; VS;<br><br>const double MAX = 1e300;<br><br>#define METHOD NegativePhotoresist::minimumTilt<br>struct NegativePhotoresist<br>{<br>    vector&lt;double&gt; xx, yy;<br>    VVI cc;<br>    bool good(double angle, double limit)<br>    {<br>        double muly = cos(angle);<br>        const int N = xx.size();<br>        vector&lt; vector&lt;double&gt; &gt; dd(N, vector&lt;double&gt;(N));<br>        forEach2 ( i, j, dd ) {<br>            if ( cc[i][j] ) {<br>                dd[i][j] = hypot(xx[i]-xx[j], (yy[i]-yy[j])*muly);<br>            }<br>            else {<br>                dd[i][j] = MAX*2;<br>            }<br>        }<br>        forN ( k, N ) forN ( j, N ) forN ( i, N )<br>            dd[i][j] = min(dd[i][j], dd[i][k] + dd[k][j]);<br>        double sum = 0;<br>        int count = 0;<br>        forN ( i, N ) {<br>            forN ( j, i ) {<br>                if ( dd[i][j] &lt; MAX ) {<br>                    ++count;<br>                    sum += dd[i][j];<br>                }<br>            }<br>        }<br>        TR(count|angle|muly|sum);<br>        return sum &lt; limit;<br>    }<br>    double minimumTilt(vector &lt;string&gt; pinConnections, int limit) <br>    {<br>        cc.assign(pinConnections.size(), VI(pinConnections.size()));<br>        forEach ( i, pinConnections ) {<br>            istringstream in(pinConnections[i]);<br>            int x, y, k;<br>            char c;<br>            in &gt;&gt; x &gt;&gt; c &gt;&gt; y;<br>            xx.push_back(x);<br>            yy.push_back(y);<br>            while ( in &gt;&gt; k ) {<br>                cc[i][k] = 1;<br>                cc[k][i] = 1;<br>            }<br>            in.clear();<br>        }<br>        double min = 0, max = M_PI/2;<br>        while ( max-min &gt; 1e-10 ) {<br>            double mid = (max+min)/2;<br>            (good(mid, limit)? max: min) = mid;<br>        }<br>        return min;<br>    }<br>};<br><br><br>// Powered by FileEdit<br></td>