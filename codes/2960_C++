<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;vector&gt; <br>#include &lt;map&gt; <br>#include &lt;set&gt; <br>#include &lt;string&gt; <br>#include &lt;algorithm&gt; <br>#include &lt;deque&gt; <br>#include &lt;queue&gt; <br>#include &lt;stack&gt; <br>#include &lt;iostream&gt; <br>#include &lt;cstdio&gt; <br>#include &lt;cstring&gt; <br>#include &lt;climits&gt; <br>#include &lt;cmath&gt; <br>#include &lt;sstream&gt; <br>using namespace std; <br>#define BAE(C) (C).begin(),(C).end() <br>#define FOREACH(I,C,T) for (T::iterator I = (C).begin(); I != (C).end(); ++I) <br>#define FORA(I,C) for (int I = 0; I &lt; (C).size(); I++) <br>#define FORI(I,E) for (int I = 0, end434 = E; I &lt; end434; I++) <br><br>struct Diving {<br>string needed(string difficulty, string need, string ratings) {<br>  vector&lt;string&gt; tok = tokenize(ratings, " ");<br>  double diff, nd;<br>  sscanf(difficulty.c_str(), "%lf",&amp;diff);<br>  sscanf(need.c_str(), "%lf",&amp;nd);<br>  for (int rating = 0; rating &lt;= 20; rating++) {<br>    vector&lt;int&gt; rates;<br>    FORA(i,tok) {<br>      if (tok[i] == "?.?") {<br>        rates.push_back(rating);<br>      } else {<br>        double t;<br>        sscanf(tok[i].c_str(),"%lf",&amp;t);<br>        rates.push_back((int)(t * 2 + 1e-6));<br>      }<br>    }<br>    sort(rates.begin(), rates.end());<br>    int sum = 0;<br>    for (int i=1; i&lt;4; i++) sum += rates[i];<br>    if (sum / 2.0 * diff &gt;= nd - 1e-6) {<br>      char c[50];<br>      sprintf(c,"%d.%d",rating/2,(rating%2)*5);<br>      return c;<br>    }<br>  }<br>  return "-1.0";<br>}<br>template&lt;class T,class V&gt; <br>   bool myFind(T &amp;src,V &amp;value) <br>   { <br>      if (find(BAE(src),value) != src.end()) return true; <br>      return false; <br>   } <br>    <br>   vector&lt;string&gt; tokenize(string in,string tok) { <br>      string::iterator cp = in.begin(); <br>      vector&lt;string&gt; res; <br>      while (cp != in.end()) { <br>         while (cp != in.end() &amp;&amp; count(BAE(tok),*cp)) cp++; <br>         string::iterator tmp = find_first_of(cp,in.end(),BAE(tok)); <br>         if (cp != in.end()) res.push_back(string(cp,tmp)); <br>         cp = tmp; <br>      } <br>      return res; <br>   } <br>    <br>   vector&lt;int&gt; sti(const vector&lt;string&gt; &amp;in) { <br>      vector&lt;int&gt; out; <br>      FORA(i,in) { <br>         int tmp; sscanf(in[i].c_str(),"%d",&amp;tmp); out.push_back(tmp); <br>      } <br>      return out; <br>   } <br><br>};<br><br><br>// Powered by FileEdit<br>// Powered by CodeProcessor<br></td>