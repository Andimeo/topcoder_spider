<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;vector&gt;<br>#include &lt;string&gt;<br>#include &lt;set&gt;<br>#include &lt;map&gt;<br>#include &lt;iostream&gt;<br>#include &lt;sstream&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;algo.h&gt;<br> <br>using namespace std;<br> <br>class BridgeArrangement {<br>  static int toint(char x) {<br>    if (x&gt;='2' &amp;&amp; x&lt;='9') return (int)(x-'0');<br>    if (x=='T') return 10;<br>    if (x=='J') return 11;<br>    if (x=='Q') return 12;<br>    if (x=='K') return 13;<br>    return 14;<br>  }<br>  static int mycmp(char a, char b) {<br>    int ax=toint(a);<br>    int bx=toint(b);<br>    return ax&lt;bx;<br>  }<br>  static int mycmp2(char a, char b) {<br>    int ax=toint(a);<br>    int bx=toint(b);<br>    return ax&gt;bx;<br>  }<br>  int cnt(vector &lt;string&gt; c, string x) {<br>    int i,j,k;<br>    vector &lt;int&gt; a(4,0);<br>    vector &lt;string&gt; y;<br>    int dmin,d;<br>    dmin=100;<br>    int p;<br>    for (i=0;i&lt;=c.size();i++)<br>    for (j=i;j&lt;=c.size();j++)<br>    for (k=j;k&lt;=c.size();k++) {<br>      y=vector &lt;string&gt;(4,"");<br>      d=0;<br>      a=vector &lt;int&gt;(4,0);<br>      for (p=0;p&lt;i;p++) {<br>        if (c[p][1]==x[0]) {<br>          y[0].push_back(c[p][0]);<br>        }<br>        if (c[p][1]==x[1]) a[1]++;<br>        if (c[p][1]==x[2]) a[2]++;<br>        if (c[p][1]==x[3]) a[3]++;<br>      }<br>      for (p=i;p&lt;j;p++) {<br>        if (c[p][1]==x[1]) {<br>          y[1].push_back(c[p][0]);<br>        }<br>        if (c[p][1]==x[0]) a[0]++;<br>        if (c[p][1]==x[2]) a[2]++;<br>        if (c[p][1]==x[3]) a[3]++;<br>      }<br>      for (p=j;p&lt;k;p++) {<br>        if (c[p][1]==x[2]) {<br>          y[2].push_back(c[p][0]);<br>        }<br>        if (c[p][1]==x[0]) a[0]++;<br>        if (c[p][1]==x[1]) a[1]++;<br>        if (c[p][1]==x[3]) a[3]++;<br>      }<br>      for (p=k;p&lt;c.size();p++) {<br>        if (c[p][1]==x[3]) {<br>          y[3].push_back(c[p][0]);<br>        }<br>        if (c[p][1]==x[0]) a[0]++;<br>        if (c[p][1]==x[1]) a[1]++;<br>        if (c[p][1]==x[2]) a[2]++;<br>      }<br>if (a[1]==0 &amp;&amp; y[1].size()==0 &amp;&amp; (a[2]&gt;0 || y[2].size()&gt;0) ) return 100;<br>if (a[2]==0 &amp;&amp; y[2].size()==0 &amp;&amp; (a[1]&gt;0 || y[1].size()&gt;0) ) return 100;<br>      d=a[0]+a[1]+a[2]+a[3];<br>      for (p=0;p&lt;4;p++) {<br>        if (a[p]==0 &amp;&amp; y[p].size()&gt;2)<br>          if (is_sorted(y[p].begin(),y[p].end(),mycmp)) d++;<br>          else if (is_sorted(y[p].begin(),y[p].end(),mycmp2)) d++;<br>      }<br>      if (d&lt;dmin) dmin=d;<br>    }<br>    return dmin;<br>  }<br>public:<br>  int minMoves(vector &lt;string&gt; cards) {<br>    int d;<br>    int dmin=cnt(cards,"CDSH");<br>    d=cnt(cards,"CHSD"); if (d&lt;dmin) dmin=d;<br>    d=cnt(cards,"SDCH"); if (d&lt;dmin) dmin=d;<br>    d=cnt(cards,"SHCD"); if (d&lt;dmin) dmin=d;<br>    d=cnt(cards,"DSHC"); if (d&lt;dmin) dmin=d;<br>    d=cnt(cards,"HSDC"); if (d&lt;dmin) dmin=d;<br>    d=cnt(cards,"DCHS"); if (d&lt;dmin) dmin=d;<br>    d=cnt(cards,"HCDS"); if (d&lt;dmin) dmin=d;<br>    if (dmin==100) {<br>      d=cnt(cards,"HCSD"); if (d&lt;dmin) dmin=d;<br>      d=cnt(cards,"HSCD"); if (d&lt;dmin) dmin=d;<br>      d=cnt(cards,"SHDC"); if (d&lt;dmin) dmin=d;<br>      d=cnt(cards,"SDHC"); if (d&lt;dmin) dmin=d;<br>    }<br>    return dmin;<br>  }<br>};<br> <br> <br> <br>// Powered by FileEdit<br></td>