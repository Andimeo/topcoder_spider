<td class="problemText" colspan="8" valign="middle" align="left">
            using System; using System.Collections; public class BadMazeStrategy<br>{<br>  public int numSteps(string[] M) {<br>    int X = M[0].Length, Y=M.Length;<br>    int t=0;<br>    int x=0,y=0;<br>    for (int i=0; i&lt;X; i++) for (int j=0; j&lt;Y; j++) if (M[j][i] == 'Y') { x=i; y=j; }<br>    int dir=0;<br>    int[] xd = new int[]{1,1,0,-1,-1,-1,0,1};<br>    int[] yd = new int[]{0,1,1,1,0,-1,-1,-1};<br>    <br>    while (t &lt; 100000)<br>    {<br>      if (M[y][x]=='D') break;<br>      int x1=x+xd[dir], y1=y+yd[dir];<br>      for (int i=0; i&lt;10; i++)<br>        if (x1&lt;0 || y1&lt;0 || x1&gt;=X || y1&gt;=Y || M[y1][x1]=='X')<br>          { dir = (dir+1)%8; if (i&gt;8) return -1; x1=x+xd[dir]; y1=y+yd[dir]; }<br>        else break;<br>        <br>      //WSL(x,y,x1,y1,dir,t);<br>      x=x1; y=y1; t++;<br>    }<br>    <br>    return (t&gt;=100000) ? -1 : t;<br>}<br> <br> <br>static ArrayList AR { get { return new ArrayList(); }}<br>static Hashtable MAP { get { return new Hashtable(); }}<br> <br>static int   [] IA(ArrayList ar) { return (int   []) ar.ToArray(typeof(int   )); }<br>static string[] SA(ArrayList ar) { return (string[]) ar.ToArray(typeof(string)); }<br> <br>int    INT   (Object x) { return Convert.ToInt32 (x.ToString()); }<br>long   LONG  (Object x) { return Convert.ToInt64 (x.ToString()); }<br>double DOUBLE(Object x) { return Convert.ToDouble(x.ToString()); }<br> <br>static void WR(Object x, params object[] p) { Console.Write(x.ToString(), p); }<br>static void WL(Object x, params object[] p) { Console.WriteLine(x.ToString(), p); }<br>static void WL() { WL(""); }<br>static void WS(params Object[] c) { foreach (Object x in c) WR(x.ToString() + " "); }<br>static void WSL(params Object[] c) { foreach (Object x in c) WR(x.ToString() + " "); WL(); }<br>static void WS(Array ar, int X) { for (int x=0; x&lt;X; x++) WS(ar.GetValue(x)); WL(); }<br>static void WS(Array ar, int X, int Y) { for (int y=0; y&lt;Y; y++) { for (int x=0; x&lt;X; x++) WS(ar.GetValue(x,y)); WL(); }}}<br> <br>// Powered by PopsEdit<br></td>