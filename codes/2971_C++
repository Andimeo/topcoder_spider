<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;iostream&gt;<br>#include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;functional&gt;<br>#include &lt;numeric&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cmath&gt;<br>#include &lt;queue&gt;<br>using namespace std;<br>typedef vector&lt;int&gt; VI;  typedef vector&lt;vector&lt;int&gt; &gt; VVI;<br>typedef vector&lt;string&gt; VS;  typedef vector&lt;vector&lt;string&gt; &gt; VVS;<br>typedef signed long long i64;  typedef unsigned long long u64;<br><br>int dx[8] = {1, 1, 0, -1, -1, -1, 0, 1};<br>int dy[8] = {0, 1, 1, 1, 0, -1, -1, -1};<br><br>int seen[100][100][8];<br><br>class BadMazeStrategy {<br>public:<br>int numSteps(vector &lt;string&gt; a) {<br>  int i, j, k, x, y, z, n, d, x2, y2;<br>  int ret;<br><br>  for( y = 0; y &lt; a.size(); y++ )<br>  for( x = 0; x &lt; a[y].size(); x++ )<br>    if( a[y][x] == 'Y' ) goto found;<br>found:<br>  d = 0;<br>  n = 0;<br>  while( !seen[y][x][d] ) {<br>    seen[y][x][d] = 1;<br>    x2 = x + dx[d];<br>    y2 = y + dy[d];<br>    if( x2 &lt; 0 || x2 &gt;= a[0].size() || y2 &lt; 0 || y2 &gt;= a.size() ||<br>      a[y2][x2] == 'X' ) {d = (d+1)%8; continue;}<br>    y = y2;<br>    x = x2;<br>    n++;<br>    if( a[y2][x2] == 'D' ) return n;<br>  }<br>  return -1;<br>}<br>};<br><br><br>// Powered by FileEdit<br></td>