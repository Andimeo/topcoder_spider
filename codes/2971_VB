<td class="problemText" colspan="8" valign="middle" align="left">
            Imports System.Collections<br> <br>Public Class BadMazeStrategy<br>    Public Function numSteps(ByVal maze As String()) As Integer<br>        Dim x, y, dx, dy, steps As Integer<br>        Dim tile, nextTile As String<br> <br>        dx = 1<br>        x = -1<br>        _Visited = New ArrayList<br> <br>        While y &lt; maze.Length AndAlso x = -1<br>            x = maze(y).IndexOf("Y")<br>            If x = -1 Then y += 1<br>        End While<br> <br>        maze(y) = maze(y).Replace("Y", ".")<br>        tile = GetTile(maze, x, y, 0, 0)<br>        While tile &lt;&gt; "D"<br>            If Visited(x, y, dx, dy) Then<br>                Return -1<br>            End If<br> <br>            Visited(x, y, dx, dy) = True<br> <br>            nextTile = GetTile(maze, x, y, dx, dy)<br> <br>            If nextTile = "." OrElse nextTile = "D" Then<br>                x += dx<br>                y += dy<br>                steps += 1<br>                tile = nextTile<br>            Else<br>                Rotate(dx, dy)<br>            End If<br>        End While<br> <br>        Return steps<br>    End Function<br> <br>    Private _Visited As ArrayList<br> <br>    Private Property Visited(ByVal x As Integer, ByVal y As Integer, ByVal dx As Integer, ByVal dy As Integer) As Boolean<br>        Get<br>            Dim nums() As Integer<br>            For Each nums In _Visited<br>                If nums(0) = x AndAlso nums(1) = y AndAlso nums(2) = dx AndAlso nums(3) = dy Then<br>                    Return True<br>                End If<br>            Next<br>            Return False<br>        End Get<br>        Set(ByVal Value As Boolean)<br>            If Not Visited(x, y, dx, dy) Then<br>                _Visited.Add(New Integer() {x, y, dx, dy})<br>            End If<br>        End Set<br>    End Property<br> <br> <br>    Public Function GetTile(ByVal maze As String(), ByVal x As Integer, ByVal y As Integer, ByVal dx As Integer, ByVal dy As Integer) As String<br>        If (x + dx &lt; 0) OrElse (x + dx &gt;= maze(0).Length) Then<br>            Return "X"<br>        ElseIf (y + dy &lt; 0) OrElse (y + dy &gt;= maze.Length) Then<br>            Return "X"<br>        Else<br>            Return maze(y + dy).Chars(x + dx).ToString()<br>        End If<br>    End Function<br> <br>    Public Function Rotate(ByRef dx As Integer, ByRef dy As Integer)<br>        If dx = 0 Then<br>            If dy = 1 Then<br>                dx = -1<br>                dy = 1<br>            ElseIf dy = -1 Then<br>                dx = 1<br>            End If<br>        ElseIf dx = 1 Then<br>            If dy = 0 Then<br>                dy = 1<br>            ElseIf dy = 1 Then<br>                dx = 0<br>            ElseIf dy = -1 Then<br>                dy = 0<br>            End If<br>        ElseIf dx = -1 Then<br>            If dy = 0 Then<br>                dy = -1<br>            ElseIf dy = 1 Then<br>                dy = 0<br>            ElseIf dy = -1 Then<br>                dx = 0<br>            End If<br>        End If<br>    End Function<br> <br>End Class<br></td>