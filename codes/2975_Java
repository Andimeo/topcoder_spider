<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>public class FileFilter {<br>  public String[] filter(String[] files, String[] extensions) {<br>    String[] ret = new String[files.length];<br>    for(int i = 0; i &lt; ret.length; i++){<br>      boolean ok = false;<br>      for(int j = 0; j &lt; extensions.length; j++){<br>        if(files[i].toLowerCase().endsWith("."+extensions[j].toLowerCase())) ok = true;<br>      }<br>      ret[i] = ok?"ALLOW":"DENY";<br>    }<br>    return ret;<br>  }<br> <br> <br>// ##################### NO POINT LOOKING BELOW, TESTCODE ONLY ####################<br> <br> <br>/** begin cut - don't modify this line*/<br>  public static void main(String[] a) {<br>    new FileFilter().runTestCase(0);<br>    new FileFilter().runTestCase(1);<br>    new FileFilter().runTestCase(2);<br>  }<br> <br>  public void runTestCase(int nbr) {<br>    switch(nbr) {<br>      case 0 : {<br>        checkOutput(filter(new String[] {"algorithm.txt","algorithms.html","wingl.exe","yourDoc.PIF","graph.gIf"}, new String[] {"txt","html","gif","doc"}), new String[] { "ALLOW",  "ALLOW",  "DENY",  "DENY",  "ALLOW" }, 0); break;<br>      }<br>      case 1 : {<br>        checkOutput(filter(new String[] {}, new String[] {"exe","pif"}), new String[] { }, 1); break;<br>      }<br>      case 2 : {<br>        checkOutput(filter(new String[] {".bashrc","bash.rc"}, new String[] {"rc"}), new String[] { "DENY",  "ALLOW" }, 2); break;<br>      }<br>    }<br>  }<br>  final void checkOutput(int mine, int them, int nbr) {<br>    boolean success = (mine==them);<br>    StringBuffer out = new StringBuffer();<br>    out.append("Example ");<br>    out.append((nbr+1));<br>    out.append(" - ");<br>    out.append(success ? "success" : "failure   ");<br>    if(!success) {<br>      out.append("Got: ");<br>      out.append(mine);<br>      out.append(", Expected: ");<br>      out.append(them);<br>    }<br>    System.out.println(out);<br>  }<br>  final void checkOutput(long mine, long them, int nbr) {<br>    boolean success = (mine==them);<br>    StringBuffer out = new StringBuffer();<br>    out.append("Example ");<br>    out.append((nbr+1));<br>    out.append(" - ");<br>    out.append(success ? "success" : "failure   ");<br>    if(!success) {<br>      out.append("Got: ");<br>      out.append(mine);<br>      out.append(", Expected: ");<br>      out.append(them);<br>    }<br>    System.out.println(out);<br>  }<br>  final void checkOutput(double mine, double them, int nbr) {<br>    boolean success = doubleCompare(mine, them);<br>    StringBuffer out = new StringBuffer();<br>    out.append("Example ");<br>    out.append((nbr+1));<br>    out.append(" - ");<br>    out.append(success ? "success" : "failure   ");<br>    if(!success) {<br>      out.append("Got: ");<br>      out.append(mine);<br>      out.append(", Expected: ");<br>      out.append(them);<br>    }<br>    System.out.println(out);<br>  }<br>  private static boolean doubleCompare(double expected, double result){<br>    double MAX_DOUBLE_ERROR = 1E-9;<br>    if(Double.isNaN(expected)){<br>      return Double.isNaN(result);<br>    }else if(Double.isInfinite(expected)){<br>      if(expected &gt; 0){<br>        return result &gt; 0 &amp;&amp; Double.isInfinite(result);<br>      }else{<br>        return result &lt; 0 &amp;&amp; Double.isInfinite(result);<br>      }<br>    }else if(Double.isNaN(result) || Double.isInfinite(result)){<br>      return false;<br>    }else if(Math.abs(result - expected) &lt; MAX_DOUBLE_ERROR){<br>      return true;<br>    }else{<br>      double min = Math.min(expected * (1.0 - MAX_DOUBLE_ERROR),<br>        expected * (1.0 + MAX_DOUBLE_ERROR));<br>      double max = Math.max(expected * (1.0 - MAX_DOUBLE_ERROR),<br>          expected * (1.0 + MAX_DOUBLE_ERROR));<br>      return result &gt; min &amp;&amp; result &lt; max;<br>    }<br>  }<br>  final void checkOutput(char mine, char them, int nbr) {<br>    boolean success = (mine==them);<br>    StringBuffer out = new StringBuffer();<br>    out.append("Example ");<br>    out.append((nbr+1));<br>    out.append(" - ");<br>    out.append(success ? "success" : "failure   ");<br>    if(!success) {<br>      out.append("Got: ");<br>      out.append("'");<br>      out.append(mine);<br>      out.append("'");<br>      out.append(", Expected: ");<br>      out.append("'");<br>      out.append(them);<br>      out.append("'");<br>    }<br>    System.out.println(out);<br>  }<br>  final void checkOutput(String mine, String them, int nbr) {<br>    boolean success = (mine.equals(them));<br>    StringBuffer out = new StringBuffer();<br>    out.append("Example ");<br>    out.append((nbr+1));<br>    out.append(" - ");<br>    out.append(success ? "success" : "failure   ");<br>    if(!success) {<br>      out.append("Got: ");<br>      out.append("\"");<br>      out.append(mine);<br>      out.append("\"");<br>      out.append(", Expected: ");<br>      out.append("\"");<br>      out.append(them);<br>      out.append("\"");<br>    }<br>    System.out.println(out);<br>  }<br>  final void checkOutput(long[] mine, long[] them, int nbr) {<br>    boolean success = (Arrays.equals(mine, them));<br>    StringBuffer out = new StringBuffer();<br>    out.append("Example ");<br>    out.append((nbr+1));<br>    out.append(" - ");<br>    out.append(success ? "success" : "failure   ");<br>    if(!success) {<br>      out.append("Got: ");<br>      out.append("{");<br>      for(int x=0;x&lt;mine.length;x++) {<br>        out.append(mine[x]);<br>        if(x&lt;mine.length-1) out.append(", ");<br>      }<br>      out.append("}");<br>      out.append(", Expected: ");<br>      out.append("{");<br>      for(int x=0;x&lt;them.length;x++) {<br>        out.append(them[x]);<br>        if(x&lt;them.length-1) out.append(", ");<br>      }<br>      out.append("}");<br>    }<br>    System.out.println(out);<br>  }<br>  final void checkOutput(char[] mine, char[] them, int nbr) {<br>    boolean success = (Arrays.equals(mine, them));<br>    StringBuffer out = new StringBuffer();<br>    out.append("Example ");<br>    out.append((nbr+1));<br>    out.append(" - ");<br>    out.append(success ? "success" : "failure   ");<br>    if(!success) {<br>      out.append("Got: ");<br>      out.append("{");<br>      for(int x=0;x&lt;mine.length;x++) {<br>        out.append(mine[x]);<br>        if(x&lt;mine.length-1) out.append(", ");<br>      }<br>      out.append("}");<br>      out.append(", Expected: ");<br>      out.append("{");<br>      for(int x=0;x&lt;them.length;x++) {<br>        out.append(them[x]);<br>        if(x&lt;them.length-1) out.append(", ");<br>      }<br>      out.append("}");<br>    }<br>    System.out.println(out);<br>  }<br>  final void checkOutput(double[] mine, double[] them, int nbr) {<br>    boolean success = (Arrays.equals(mine, them));<br>    StringBuffer out = new StringBuffer();<br>    out.append("Example ");<br>    out.append((nbr+1));<br>    out.append(" - ");<br>    out.append(success ? "success" : "failure   ");<br>    if(!success) {<br>      out.append("Got: ");<br>      out.append("{");<br>      for(int x=0;x&lt;mine.length;x++) {<br>        out.append(mine[x]);<br>        if(x&lt;mine.length-1) out.append(", ");<br>      }<br>      out.append("}");<br>      out.append(", Expected: ");<br>      out.append("{");<br>      for(int x=0;x&lt;them.length;x++) {<br>        out.append(them[x]);<br>        if(x&lt;them.length-1) out.append(", ");<br>      }<br>      out.append("}");<br>    }<br>    System.out.println(out);<br>  }<br>  final void checkOutput(int[] mine, int[] them, int nbr) {<br>    boolean success = (Arrays.equals(mine, them));<br>    StringBuffer out = new StringBuffer();<br>    out.append("Example ");<br>    out.append((nbr+1));<br>    out.append(" - ");<br>    out.append(success ? "success" : "failure   ");<br>    if(!success) {<br>      out.append("Got: ");<br>      out.append("{");<br>      for(int x=0;x&lt;mine.length;x++) {<br>        out.append(mine[x]);<br>        if(x&lt;mine.length-1) out.append(", ");<br>      }<br>      out.append("}");<br>      out.append(", Expected: ");<br>      out.append("{");<br>      for(int x=0;x&lt;them.length;x++) {<br>        out.append(them[x]);<br>        if(x&lt;them.length-1) out.append(", ");<br>      }<br>      out.append("}");<br>    }<br>    System.out.println(out);<br>  }<br>  final void checkOutput(String[] mine, String[] them, int nbr) {<br>    boolean success = (Arrays.equals(mine, them));<br>    StringBuffer out = new StringBuffer();<br>    out.append("Example ");<br>    out.append((nbr+1));<br>    out.append(" - ");<br>    out.append(success ? "success" : "failure   ");<br>    if(!success) {<br>      out.append("Got: ");<br>      out.append("{");<br>      for(int x=0;x&lt;mine.length;x++) {<br>        out.append(mine[x]);<br>        if(x&lt;mine.length-1) out.append(", ");<br>      }<br>      out.append("}");<br>      out.append(", Expected: ");<br>      out.append("{");<br>      for(int x=0;x&lt;them.length;x++) {<br>        out.append(them[x]);<br>        if(x&lt;them.length-1) out.append(", ");<br>      }<br>      out.append("}");<br>    }<br>    System.out.println(out);<br>  }<br> <br>/** end cut - don't modify this line*/<br>}<br> <br>// Powered by PopsEdit<br>// Powered by CodeProcessor<br></td>