<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections;<br>public class Answer {<br>  string[] words;<br>  int n;<br>  int[][] splitSets;<br><br>  private void ConstructSplitSets()<br>  {<br>    splitSets = new int[26][];<br>    int[] pos = new int[100];<br>    int[] pos2 = new int[100];<br>    int[] sets = new int[100];<br>    int npos = 0;<br>    int npos2 = 0;<br>    int nsets = 0;<br><br>    for (int i = 0; i &lt; 26; ++i)<br>    {<br>      bool[] mark = new bool[100];<br>      nsets = 0;<br><br>      for (int j = 0; j &lt; n; ++j)<br>        if (!mark[j])<br>        {<br>          string word = words[j];<br>          npos = 0;<br><br>          for (int k = 0; k &lt; word.Length; ++k)<br>            if (word[k] - 'A' == i)<br>            {<br>              pos[npos++] = k;<br>            }<br><br>          int cset = 0;<br>          for (int l = 0; l &lt; n; ++l)<br>            if (!mark[l])<br>            {<br>              word = words[l];<br>              npos2 = 0;<br><br>              for (int k = 0; k &lt; word.Length; ++k)<br>                if (word[k] - 'A' == i)<br>                {<br>                  pos2[npos2++] = k;<br>                }<br><br>              if (npos != npos2) continue;<br><br>              bool ok = false;<br>              for (int k = 0; k &lt; npos; ++k)<br>                if (pos[k] != pos2[k]) <br>                {<br>                  ok = true;<br>                  break;<br>                }<br><br>              if (ok) continue;<br><br>              mark[l] = true;<br>              cset |= (1 &lt;&lt; l);<br>            }<br><br>          sets[nsets++] = cset;<br>        }<br><br>      splitSets[i] = new int[nsets];<br>      for (int k = 0; k &lt; nsets; ++k)<br>        splitSets[i][k] = sets[k];<br>    }<br><br>  }<br><br>  public int chooseOne(string[] words) <br>  {<br>    this.words = words;<br>    n = words.Length;<br><br>    ConstructSplitSets();<br><br>    int[] best = new int[1 &lt;&lt; n];<br><br>    for (int i = 1; i &lt; 1 &lt;&lt; n; ++i)<br>    {<br>      if ((i &amp; (i - 1)) == 0)<br>        best[i] = 0;<br>      else<br>      {<br>        int cbest = int.MaxValue;<br><br>        for (int j = 0; j &lt; 26; ++j)<br>        {<br>          int cmax = int.MinValue;<br>          for (int k = 0; k &lt; splitSets[j].Length; ++k)<br>          {<br>            int ii = i &amp; splitSets[j][k];<br>            if (ii == i)<br>              cmax = int.MaxValue;<br>            else<br>              if (best[ii] &gt; cmax)<br>                cmax = best[ii];<br>          }<br><br>          if (cmax &lt; cbest)<br>            cbest = cmax;<br>        }<br><br>        best[i] = 1 + cbest;<br>      }<br>    }<br><br>    return best[(1 &lt;&lt; n) - 1];<br>  }<br><br><br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003] [modified for C# by Petr]<br>// Powered by CodeProcessor<br></td>