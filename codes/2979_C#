<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections;<br> <br>public class FewestTurns<br>{<br>  int x1, y1, x2, y2;<br>  public int val;<br>  ArrayList intersects = new ArrayList();<br>  public FewestTurns()<br>  {<br>  }<br>  public FewestTurns(string s)<br>  {<br>    int index=s.IndexOf(" ");<br>    x1=Int32.Parse(s.Substring(0, index));<br>    s=s.Substring(index+1);<br>    index=s.IndexOf(" ");<br>    y1=Int32.Parse(s.Substring(0, index));<br>    s=s.Substring(index+1);<br>    index=s.IndexOf(" ");<br>    x2=Int32.Parse(s.Substring(0, index));<br>    s=s.Substring(index+1);<br>    y2=Int32.Parse(s);<br>    val=1000;<br>  }<br>  public bool intersect(FewestTurns a, FewestTurns b)<br>  {<br>    if(a==null||b==null)<br>      return false;<br>    if(a.x1==a.x2) //|<br>    {<br>      if(b.x1==b.x2)//|<br>      {<br>        if(b.x1==a.x1)<br>          return b.y1==a.y2||b.y2==a.y1;<br>        else<br>          return false;<br>      }<br>      else<br>        return a.x1&gt;=b.x1&amp;&amp;a.x1&lt;=b.x2&amp;&amp;b.y1&gt;=a.y1&amp;&amp;b.y1&lt;=a.y2;<br>    }<br>    else//----<br>    {<br>      if(b.y1==b.y2)//-----<br>      {<br>        if(b.y1==a.y1)<br>          return b.x1==a.x2||b.x2==a.x1;<br>        else<br>          return false;<br>      }<br>      else<br>        return b.x1&gt;=a.x1&amp;&amp;b.x1&lt;=a.x2&amp;&amp;a.y1&gt;=b.y1&amp;&amp;a.y1&lt;=b.y2;<br>    }<br>  }<br>  public bool intersect(FewestTurns a, int x, int y)<br>  {<br>    if(a==null)<br>      return false;<br>    return a.x1&lt;=x&amp;&amp;a.x2&gt;=x&amp;&amp;a.y1&lt;=y&amp;&amp;a.y2&gt;=y;<br>  }<br>  public int numTurns(string[] roads, string start, string end)<br>  {<br>    FewestTurns[] rds = new FewestTurns[roads.Length];<br>    for(int i=0; i&lt;rds.Length; i++)<br>    {<br>      rds[i]=new FewestTurns(roads[i]);<br>      for(int j=0; j&lt;i; j++)<br>        if(intersect(rds[i], rds[j]))<br>        {<br>          rds[i].intersects.Add(rds[j]);<br>          rds[j].intersects.Add(rds[i]);<br>        }<br>    }<br>    int startX, startY, endX, endY;<br>    int index=start.IndexOf(" ");<br>    startX=Int32.Parse(start.Substring(0, index));<br>    startY=Int32.Parse(start.Substring(index+1));<br>    index=end.IndexOf(" ");<br>    endX=Int32.Parse(end.Substring(0, index));<br>    endY=Int32.Parse(end.Substring(index+1));<br>    for(int i=0; i&lt;roads.Length; i++)<br>      if(intersect(rds[i], startX, startY))<br>      {<br>        rds[i].val=0;<br>        expand(rds[i]);<br>      }<br>    int min=1000;<br>    for(int i=0; i&lt;rds.Length; i++)<br>      if(intersect(rds[i], endX, endY))<br>        if(rds[i].val&lt;min)<br>          min=rds[i].val;<br>    return min;<br>  }<br>  public void expand(FewestTurns a)<br>  {<br>    FewestTurns tmp;<br>    for(int i=0; i&lt;a.intersects.Count; i++)<br>    {<br>      tmp=(FewestTurns)a.intersects[i];<br>      if(parallel(a, tmp))<br>      {<br>        if(tmp.val&gt;a.val)<br>        {<br>          tmp.val=a.val;<br>          expand(tmp);<br>        }<br>      }<br>      if(tmp.val&gt;a.val+1)<br>      {<br>        tmp.val=a.val+1;<br>        expand(tmp);<br>      }<br>    }<br>  }<br>  public bool parallel(FewestTurns a, FewestTurns b)<br>  {<br>    if(a.x1==a.x2)<br>      return a.x1==b.x1&amp;&amp;a.x1==b.x2;<br>    else<br>      return a.y1==b.y1&amp;&amp;a.y1==b.y2;<br>  }<br>}<br></td>