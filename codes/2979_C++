<td class="problemText" colspan="8" valign="middle" align="left">
            #line 91 "FewestTurns.cpp"<br><br>#include &lt;cstdio&gt;<br>#include &lt;iostream&gt;<br>#include &lt;cstring&gt;<br>#include &lt;cmath&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;vector&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;string&gt;<br>#include &lt;queue&gt;<br>#include &lt;stack&gt;<br><br>using namespace std;<br><br>#define REP(i,n) for(int i=0;i&lt;(n);++i)<br>#define EACH(i,x) REP(i,(x).size())<br>#define FOR(i,a,b) for(int i=(a);i&lt;(b);++i)<br>#define SORT(x) (sort((x).begin(), (x).end()))<br>#define UNIQUE(x) ((x).erase(unique((x).begin(), (x).end()), (x).end()))<br>#define pb push_back<br>#define REV(x) (reverse((x).begin(), (x).end()))<br>#define all(x) (x).begin(),(x).end()<br><br>typedef long long int lint; typedef unsigned long long int ull;<br>typedef pair&lt;int,int&gt; pi; typedef pair&lt;string,string&gt; ps; typedef pair&lt;int,string&gt; pis; typedef pair&lt;string,int&gt; psi;<br>typedef vector&lt;int&gt; vi; typedef vector&lt;vi&gt; vvi;<br>typedef vector&lt;pi&gt; vp; typedef vector&lt;bool&gt; vb; typedef vector&lt;string&gt; vs; typedef vector&lt;vb&gt; vvb; typedef vector&lt;vs&gt; vvs;<br><br>template&lt;typename T&gt; ostream&amp; operator &lt;&lt; (ostream&amp; os, const vector&lt;T&gt; &amp;temp) { os &lt;&lt; "{"; for (int i = 0; i &lt; temp.size(); i++) os &lt;&lt; (i?", ":"") &lt;&lt; temp[i]; os &lt;&lt; "}"; return os; }<br>template&lt;typename T&gt; istream&amp; operator &gt;&gt; (istream&amp; is, vector&lt;T&gt; &amp;temp) { T x; is &gt;&gt; x; temp.pb(x); return is; }<br><br>const int inf = 999999999;<br>const double eps = 1e-12;<br><br>vs stovs(const string &amp;str, const string &amp;delim = " ")<br>{<br>  vs res; int p = 0; <br>  while(1) { p = str.find_first_not_of(delim, p); if(p &lt; 0) break; int np = str.find_first_of(delim, p+1); res.push_back(str.substr(p, np-p)); if(np &lt; 0) break; p = np; }<br>  return res;<br>}<br><br>inline vi vstovi(const vs &amp;v) { vi ret; EACH(i,v) ret.push_back(atoi(v[i].c_str())); return ret; }<br>inline vi stovi(const string &amp;str, const string &amp;delim = " ") { return vstovi(stovs(str, delim)); }<br>inline vvs vstovvs(const vs &amp;v, const string &amp;delim = " ") { vvs ret; EACH(i,v) ret.push_back(stovs(v[i], delim)); return ret; }<br>inline vvi vstovvi(const vs &amp;v, const string &amp;delim = " ") { vvi ret; EACH(i,v) ret.push_back(stovi(v[i], delim)); return ret; }<br><br>const int horz = 0;<br>const int vert = 1;<br><br>int n;<br>int sx, sy, ex, ey;<br>int Y1[128], X1[128], Y2[128], X2[128], type[128];<br><br>int start[128], end[128];<br>bool graph[128][128];<br>int c[128];<br><br>class FewestTurns {<br>  public:<br>   int numTurns(vector &lt;string&gt; roads, string start, string end) {<br>    int res = inf;<br>    n = roads.size();<br>    REP(i,n)<br>    {<br>      vi v = stovi(roads[i]);<br>      X1[i] = v[0];<br>      Y1[i] = v[1];<br>      X2[i] = v[2];<br>      Y2[i] = v[3];<br>      type[i] = (X1[i] == X2[i] ? vert : horz);<br>    }<br>    vi st = stovi(start), en = stovi(end);<br>    sx = st[0]; sy = st[1];<br>    ex = en[0]; ey = en[1];<br>    REP(i,n)<br>    {<br>      start[i] = (Y1[i] &lt;= sy &amp;&amp; sy &lt;= Y2[i] &amp;&amp; X1[i] &lt;= sx &amp;&amp; sx &lt;= X2[i]);<br>      end[i] = (Y1[i] &lt;= ey &amp;&amp; ey &lt;= Y2[i] &amp;&amp; X1[i] &lt;= ex &amp;&amp; ex &lt;= X2[i]);<br>    }<br>    REP(i,n)<br>      REP(j,n)<br>        graph[i][j] = !(X2[i] &lt; X1[j] || X2[j] &lt; X1[i]) &amp;&amp; !(Y2[i] &lt; Y1[j] || Y2[j] &lt; Y1[i]);<br>    queue&lt;int&gt; q;<br>    REP(i,n) c[i] = inf;<br>    REP(i,n) if(start[i]) { c[i] = 0; q.push(i); }<br>    while(!q.empty())<br>    {<br>      int u = q.front(); q.pop();<br>      if(end[u]) res &lt;?= c[u];<br>      REP(v,n)<br>      {<br>        int add = (type[u] == type[v] ? 0 : 1);<br>        if(graph[u][v] &amp;&amp; c[v] &gt; c[u]+add)<br>        {<br>          c[v] = c[u]+add;<br>          q.push(v);<br>        }<br>      }<br>    }<br>    return res;<br>  }<br>};<br><br><br>// Powered by FileEdit<br></td>