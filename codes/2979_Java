<td class="problemText" colspan="8" valign="middle" align="left">
            public class FewestTurns {<br>  public int numTurns(String roads[], String start, String end) {<br>    char u[][] = new char[300][300];<br>    int ux[][] = new int[300][300];<br>    int i,j,k;<br>    for(j=0;j&lt;300;j++) for(i=0;i&lt;300;i++) u[j][i] = 'X';<br>    for(j=0;j&lt;300;j++) for(i=0;i&lt;300;i++) ux[j][i] = 999999;<br>    for(k=0;k&lt;roads.length;k++) {<br>      String coord[] = roads[k].split(" ");<br>      int x1 = Integer.parseInt(coord[0])*2+1;<br>      int y1 = Integer.parseInt(coord[1])*2+1;<br>      int x2 = Integer.parseInt(coord[2])*2+1;<br>      int y2 = Integer.parseInt(coord[3])*2+1;<br>      if(x1 == x2) {  // vertical<br>        while(y1&lt;y2) u[y1++][x1] = ' ';<br>        while(y2&lt;y1) u[y2++][x1] = ' ';<br>        u[y1][x1] = ' ';<br>      }<br>      if(y1 == y2) {  // vertical<br>        while(x1&lt;x2) u[y1][x1++] = ' ';<br>        while(x2&lt;x1) u[y1][x2++] = ' ';<br>        u[y1][x1] = ' ';<br>      }<br>    }<br>    int sx,sy,ex,ey;<br>    String c[] = start.split(" ");<br>    sx = Integer.parseInt(c[0])*2+1;<br>    sy = Integer.parseInt(c[1])*2+1;<br>    c = end.split(" ");<br>    ex = Integer.parseInt(c[0])*2+1;<br>    ey = Integer.parseInt(c[1])*2+1;<br> <br>    int best = 9999999;<br>    for(int dir=0;dir&lt;4;dir++) {<br>      for(j=0;j&lt;300;j++) for(i=0;i&lt;300;i++) ux[j][i] = 999999;<br>      ux[sy][sx] = 0;<br>      fill(u, ux, sx, sy, ex, ey, dir);<br>      int ret = ux[ey][ex];<br>      if(ret &lt; best) best = ret;<br>//      for(j=0;j&lt;50;j++) {<br>//        System.out.print(""+j);<br>//        for(i=0;i&lt;50;i++) {<br>//          System.out.print(" "+ux[j][i]);<br>//        }<br>//        System.out.println();<br>//      }<br>    }<br> <br>    return best;<br>  }<br> <br>  void fill(char u[][], int ux[][], int sx, int sy, int ex, int ey, int dir) {<br>    if(u[sy][sx] == 'X') return;<br>    int p = 0;<br>    // left<br>    if(u[sy][sx-1] != 'X') {<br>      if(dir != 0) p = 1; else p = 0;<br>      if(ux[sy][sx] + p &lt; ux[sy][sx-1]) {<br>        ux[sy][sx-1] = ux[sy][sx] + p;<br>        fill(u,ux,sx-1,sy,ex,ey,0);<br>      }<br>    }<br>    // right<br>    if(u[sy][sx+1] != 'X') {<br>      if(dir != 2) p = 1; else p = 0;<br>      if(ux[sy][sx] + p &lt; ux[sy][sx+1]) {<br>        ux[sy][sx+1] = ux[sy][sx] + p;<br>        fill(u,ux,sx+1,sy,ex,ey,2);<br>      }<br>    }<br>    // up<br>    if(u[sy-1][sx] != 'X') {<br>      if(dir != 1) p = 1; else p = 0;<br>      if(ux[sy][sx] + p &lt; ux[sy-1][sx]) {<br>        ux[sy-1][sx] = ux[sy][sx] + p;<br>        fill(u,ux,sx,sy-1,ex,ey,1);<br>      }<br>    }<br>    // down<br>    if(u[sy+1][sx] != 'X') {<br>      if(dir != 3) p = 1; else p = 0;<br>      if(ux[sy][sx] + p &lt; ux[sy+1][sx]) {<br>        ux[sy+1][sx] = ux[sy][sx] + p;<br>        fill(u,ux,sx,sy+1,ex,ey,3);<br>      }<br>    }<br>  }<br> <br>}<br></td>