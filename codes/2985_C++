<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;algorithm&gt;<br>#include &lt;iostream&gt;<br>#include &lt;sstream&gt;<br>#include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;queue&gt;<br>#include &lt;cmath&gt;<br>using namespace std;<br><br>vector&lt;string&gt; split( const string&amp; s, const string&amp; delim =" " ) {<br>    vector&lt;string&gt; res;<br>    string t;<br>    for ( int i = 0 ; i != s.size() ; i++ ) {<br>        if ( delim.find( s[i] ) != string::npos ) {<br>            if ( !t.empty() ) {<br>                res.push_back( t );<br>                t = "";<br>            }<br>        } else {<br>            t += s[i];<br>        }<br>    }<br>    if ( !t.empty() ) {<br>        res.push_back(t);<br>    }<br>    return res;<br>}<br><br>vector&lt;int&gt; splitInt( const string&amp; s, const string&amp; delim =" " ) {<br>    vector&lt;string&gt; tok = split( s, delim );<br>    vector&lt;int&gt; res;<br>    for ( int i = 0 ; i != tok.size(); i++ )<br>        res.push_back( atoi( tok[i].c_str() ) );<br>    return res;<br>}<br><br>int better(int i,int j,vector&lt;int&gt; wins,vector&lt;string&gt; names,vector&lt;string&gt; lostTo){<br>    if(wins[i]&gt;wins[j])return 1;<br>    if(wins[i]&lt;wins[j])return 0;<br>    int newi=-1,newj=-1;<br>    for(int k=0; k&lt;names.size(); k++){<br>        if(names[k]==lostTo[i])newi=k;<br>        if(names[k]==lostTo[j])newj=k;<br>    }<br>    if((newi!=-1)&amp;&amp;(newj!=-1))return better(newi,newj,wins,names,lostTo);<br>    return 0;<br>}    <br>class TournamentRanker {<br>public:<br>    vector &lt;string&gt; rankTeams(vector &lt;string&gt; names, vector &lt;string&gt; lostTo) {<br>        vector &lt;string&gt; res;<br>        vector &lt;int&gt; wins(names.size(),0);<br>        for(int i=0; i&lt;lostTo.size(); i++)<br>                for(int j=0; j&lt;names.size(); j++)<br>                                if(lostTo[i]==names[j])wins[j]++;<br>        for(int i=0; i&lt;names.size(); i++)<br>                for(int j=0; j&lt;names.size(); j++)<br>                                if(better(i,j,wins,names,lostTo))<br>                                {<br>                                    int k=wins[i];<br>                                    wins[i]=wins[j];<br>                                    wins[j]=k;<br>                                    string s=names[i];<br>                                    names[i]=names[j];<br>                                    names[j]=s;<br>                                    s=lostTo[i];<br>                                    lostTo[i]=lostTo[j];<br>                                    lostTo[j]=s;<br>                                }                                    <br>        res=names;        <br>        return res;<br>    }<br><br>};<br><br><br>// Powered by FileEdit<br>// Powered by CodeProcessor<br></td>