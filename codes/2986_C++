<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;iostream&gt;<br>#include &lt;stdio.h&gt;<br>#include &lt;sstream&gt;<br>#include &lt;map&gt;<br>#include &lt;queue&gt;<br>#include &lt;set&gt;<br> <br>using namespace std;<br> <br>#define FOR(i,n) for(int i=0; i&lt;(n); i++)<br>#define FOREACH(i,c) for(__typeof((c).begin()) i=(c).begin(); i!=(c).end(); i++)<br>#define pb push_back<br>typedef vector&lt;int&gt; VI;<br>typedef vector&lt;string&gt; VS;<br>template &lt;class T&gt; void sort(T&amp; t) { sort(t.begin(), t.end()); }<br>template &lt;class T&gt; ostream&amp; operator &lt;&lt;(ostream&amp; os, const vector&lt;T&gt;&amp; v) { FOR(i, v.size()) os &lt;&lt; v[i] &lt;&lt; ' '; return os; }<br>template &lt;class T&gt; istream&amp; operator &gt;&gt;(istream&amp; is, vector&lt;T&gt;&amp; v) { v.clear(); T t; while (is &gt;&gt; t) v.pb(t); return is; }<br>template &lt;class T&gt; string tostr(const T&amp; t) { ostringstream os; os &lt;&lt; t; return os.str(); }<br> <br>typedef istringstream iss;<br>typedef long long LL;<br>VS tokenize(string s, string sep = " ") {<br>  VS ret;<br>  for (int p = 0, pp; p &lt; s.size(); p = pp+1) {<br>    pp = s.find_first_of(sep, p);<br>    if (pp &lt; 0) pp = s.size();<br>    if (pp &gt; p) ret.pb(s.substr(p, pp-p));<br>  }<br>  return ret;<br>}<br> <br>struct Refactoring {<br>int refactor(int n, int minf = 2) {<br>  //static int testing = 0; if (!testing++) run_test(-1);  // CUT THIS<br>  int ret = 0;<br>  for (int i = minf; i*i &lt;= n; i++) {<br>    if (n % i == 0) {<br>      ret += 1;<br>      ret += refactor(n/i, i);  <br>    }<br>  }<br>  return ret;<br>}<br> <br>// BEGIN CUT HERE<br>  public:<br>  void run_test(int Case) { if ((Case == -1) || (Case == 0)) test_case_0(); if ((Case == -1) || (Case == 1)) test_case_1(); if ((Case == -1) || (Case == 2)) test_case_2(); if ((Case == -1) || (Case == 3)) test_case_3(); }<br>  private:<br>  template &lt;typename T&gt; string print_array(const vector&lt;T&gt; &amp;V) { ostringstream os; os &lt;&lt; "{ "; for (typename vector&lt;T&gt;::const_iterator iter = V.begin(); iter != V.end(); ++iter) os &lt;&lt; '\"' &lt;&lt; *iter &lt;&lt; "\","; os &lt;&lt; " }"; return os.str(); }<br>  void verify_case(int Case, const int &amp;Expected, const int &amp;Received) { cerr &lt;&lt; "Test Case #" &lt;&lt; Case &lt;&lt; "..."; if (Expected == Received) cerr &lt;&lt; "PASSED" &lt;&lt; endl; else { cerr &lt;&lt; "FAILED" &lt;&lt; endl; cerr &lt;&lt; "\tExpected: \"" &lt;&lt; Expected &lt;&lt; '\"' &lt;&lt; endl; cerr &lt;&lt; "\tReceived: \"" &lt;&lt; Received &lt;&lt; '\"' &lt;&lt; endl; } }<br>  void test_case_0() { int Arg0 = 24; int Arg1 = 6; verify_case(0, Arg1, refactor(Arg0)); }<br>  void test_case_1() { int Arg0 = 9973; int Arg1 = 0; verify_case(1, Arg1, refactor(Arg0)); }<br>  void test_case_2() { int Arg0 = 9240; int Arg1 = 295; verify_case(2, Arg1, refactor(Arg0)); }<br>  void test_case_3() { int Arg0 = 1916006400; int Arg1 = 7389115; verify_case(3, Arg1, refactor(Arg0)); }<br> <br>// END CUT HERE<br> <br>};<br> <br>// Powered by PopsEdit<br>// Powered by TZTester 1.01 [25-Feb-2003]<br>// Powered by CodeProcessor<br></td>