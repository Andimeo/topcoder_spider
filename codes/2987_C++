<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;algorithm&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cctype&gt;<br>#include &lt;cmath&gt;<br>#include &lt;iostream&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;sstream&gt;<br>#include &lt;string&gt;<br>#include &lt;utility&gt;<br>#include &lt;vector&gt;<br>using namespace std;<br>#define VAR(a,b) typeof(b) a=(b)<br>#define REP(i,n) for(int _n=n, i=0;i&lt;_n;++i)<br>#define FOR(i,a,b) for(int i=(a),_b=(b);i&lt;=_b;++i)<br>#define FORD(i,a,b) for(int i=(a),_b=(b);i&gt;=_b;--i)<br>#define FOREACH(it,c) for(VAR(it,(c).begin());it!=(c).end();++it)<br>#define ALL(f,w) ({ bool _ok=true; f { _ok=_ok &amp;&amp; (w);if(!_ok) break;} _ok; })<br>#define EXISTS(f,w) (!ALL(f,!(w)))<br>#define MIN(f,w) ({ int _mm=(1&lt;&lt;31)-1; f _mm&lt;?=(w); _mm; })<br>#define MAX(f,w) ({ int _mm=(1&lt;&lt;31); f _mm&gt;?=(w); _mm; })<br>typedef long long LL;<br>const int INF = 1000000000; const LL INFLL = LL(INF) * LL(INF);<br>typedef vector&lt;int&gt; VI; typedef vector&lt;string&gt; VS; typedef vector&lt;VI&gt; VVI;<br>template&lt;class T&gt; inline int size(const T&amp;c) { return c.size(); }<br>template&lt;class T&gt; inline vector&lt;T&gt; makeV(const T&amp;x) { return vector&lt;T&gt;(1,x); }<br>template&lt;class T&gt; inline vector&lt;T&gt; makeV(const T&amp;x,const T&amp;y) {<br>  vector&lt;T&gt; v(2); v[0] = x; v[1] = y; return v;<br>}<br>template&lt;class T&gt; inline vector&lt;T&gt; makeV(const T&amp;x,const T&amp;y,const T&amp;z) {<br>  vector&lt;T&gt; v(3); v[0] = x; v[1] = y; v[2]=z; return v;<br>}<br>template&lt;class A,class B&gt; inline bool contains(const A&amp;a, const B&amp;b) {<br>  return find(a.begin(),a.end(),b)!=a.end();<br>}<br>template&lt;class T&gt; string i2s(T x) { ostringstream o; o&lt;&lt;x; return o.str(); }<br>int s2i(string s) { istringstream i(s); int x; i&gt;&gt;x; return x; }<br>LL s2ll(string s) { istringstream i(s); LL x; i&gt;&gt;x; return x; }<br> <br>vector&lt;string&gt; split(string s,string del=" ") {<br>  s+=del[0];<br>  string w;<br>  vector&lt;string&gt; res;<br>  FOREACH(it,s) {<br>    if(!contains(del,*it)) w+=*it;<br>    else if(w!="") { res.push_back(w); w=""; }<br>  }<br>  return res;<br>}<br> <br>VI s2vi(string s,string del=" ") {<br>  VS v = split(s,del);<br>  VI res;<br>  FOREACH(it,v) res.push_back(s2i(*it));<br>  return res;<br>}<br> <br>///////////////////////////////////////////////////////////////////<br> <br>int n;<br>int cache[1&lt;&lt;15];<br> <br>int calc(int p) {<br>  int &amp;res = cache[p];<br>  if(res!=-1) return res;<br>  REP(i,n-1) if(p&amp;(1&lt;&lt;i)) FOR(j,i+1,n-1) FOR(k,j,n-1) {<br>    int p2 = p ^ (1&lt;&lt;i) ^ (1&lt;&lt;j) ^ (1&lt;&lt;k);<br>    if(!calc(p2)) return (res=1);<br>  }<br>  return (res = 0);<br>}<br> <br>struct Roxor {<br>  // MAIN<br>  vector &lt;int&gt; play(vector &lt;int&gt; piles) {<br>    n = size(piles);<br>    REP(i,1&lt;&lt;n) cache[i]=-1;<br>    REP(i,n-1) if(piles[i]&gt;0) FOR(j,i+1,n-1) FOR(k,j,n-1) {<br>      VI p2 = piles;<br>      p2[i]--; p2[j]++; p2[k]++;<br>      int start = 0;<br>      REP(a,n) start |= (p2[a]&amp;1)&lt;&lt;a;<br>      int res = calc(start);<br>      if(!res) return makeV(i,j,k);<br>    }<br>    return VI();<br>  }<br> <br> <br>  <br>///////////////////////////////////////////////////////////////////<br> <br> <br> <br> <br>};<br> <br> <br> <br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003]<br>// Powered by CodeProcessor<br></td>