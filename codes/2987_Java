<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>public class Roxor {<br>  int[] f = new int[16];<br><br>  public boolean canwin(int[] piles) {<br>    int l = piles.length;<br>    int s = 0;<br>    for (int i=0; i&lt;l; i++) {<br>      if (piles[i] % 2 == 1) {<br>        s = s ^ f[l-i-1];<br>      }<br>    }<br>    if (s != 0) {<br>      return true;<br>    } else {<br>      return false;<br>    }<br>  }<br><br>    public int[] play(int[] piles) {<br>  f[0] = 0;<br>  for (int i=1; i&lt;=15; i++) {<br>    boolean[] used = new boolean[100];<br>    Arrays.fill(used, false);<br>    for (int j=0; j&lt;i; j++) {<br>      for (int k=0; k&lt;i; k++) {<br>        used[f[j]^f[k]] = true;<br>      }<br>    }<br>    f[i] = 0;<br>    while (used[f[i]]) {<br>      f[i]++;<br>    }<br>  }<br>  if (!canwin(piles)) {<br>    int[] res = new int[0];<br>    return res;<br>  } else {<br>    for (int i=0; i+1&lt;piles.length; i++) {<br>      if (piles[i] &gt; 0) {<br>        for (int j=i+1; j&lt;piles.length; j++) {<br>          for (int k=j; k&lt;piles.length; k++) {<br>            piles[i]--; piles[j]++; piles[k]++;<br>            if (!canwin(piles)) {<br>              int[] res = new int[3];<br>              res[0] = i; res[1] = j; res[2] = k;<br>              return res;<br>            }<br>            piles[i]++; piles[j]--; piles[k]--;<br>          }<br>        }  <br>      }<br>    }<br>  }<br>  int[] res = new int[0];<br>  return res;<br>   }<br><br>}<br><br><br><br>// Powered by FileEdit<br>// Powered by CodeProcessor<br></td>