<td class="problemText" colspan="8" valign="middle" align="left">
            #line 2 "PhoneSearch.cpp"<br><br>// Warning: no successful challenges against me yet.<br><br>#include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;ctype.h&gt;<br>#include &lt;math.h&gt;<br>#include &lt;iostream&gt;<br>#include &lt;set&gt;<br>#include &lt;sstream&gt;<br><br>using namespace std;<br>typedef long long ll; typedef long double ld;<br>typedef vector&lt;int&gt; vi; typedef vector&lt;string&gt; vs;<br><br>#define LS &lt;<br>#define FOR(k,start,end) for(typeof(start) k=(start); k LS (end); ++k)<br>#define Size(x) (int(x.size()))<br>#define LET(k,val) typeof(val) k = (val)<br><br>#define CLC(act,val) (*({act; static typeof(val) CLCR; CLCR = (val); &amp;CLCR;}))<br> <br>#define FIRST(k,a,b,cond) CLC(LET(k, a); for(; k LS (b); k++) if(cond) break, k)<br>#define EXISTS(k,a,b,cond) (FIRST(k,a,b,cond) LS (b))<br>#define FORALL(k,a,b,cond) (!EXISTS(k,a,b,!(cond)))<br> <br>#define FOLD0(k,a,b,init,act) CLC(LET(k, a); LET(R##k, init); for(; k LS (b); k++) {act;}, R##k)<br>#define SUMTO(k,a,b,init,x)  FOLD0(k,a,b,init,R##k += (x))<br>#define PRODTO(k,a,b,init,x) FOLD0(k,a,b,init,R##k *= (x))<br>#define MAXTO(k,a,b,init,x)  FOLD0(k,a,b,init,R##k &gt;?= (x))<br>#define MINTO(k,a,b,init,x)  FOLD0(k,a,b,init,R##k &lt;?= (x))<br>#define SUM(k,a,b,x) SUMTO(k,a,b,(typeof(x)) (0), x)<br>#define PROD(k,a,b,x) PRODTO(k,a,b,(typeof(x)) (1), x)<br> <br>#define FOLD1(k,a,b,init,act) CLC(LET(k, a); LET(R##k, init); for(k++; k LS (b); k++) act, R##k)<br>#define MAX(k,a,b,x) FOLD1(k,a,b,x, R##k &gt;?= (x))<br>#define MIN(k,a,b,x) FOLD1(k,a,b,x, R##k &lt;?= (x))<br> <br>#define INF 2000000000<br>int tcize(int n) {return n&lt;INF ? n : -1;}<br><br><br>ll distr[26*26*26+1];<br><br>int first[90];<br>int last[90];<br><br>class PhoneSearch {<br>  public:<br>  int pageFlips(vector &lt;int&gt; freqs, vector &lt;string&gt; pages, string prefix) {<br>    // !FDI<br>    FOR(k, 0, 26) FOR(l,0,26) FOR(m,0,26)<br>      distr[1+k*26*26+l*26+m] = freqs[k] * freqs[l] * freqs[m];<br>    FOR(k, 0, 26*26*26) distr[k+1] += distr[k];<br>    // distr = distribuant<br>    int pre1 = 0;<br>    int pre2 = 26*26*26;<br>    int page1 = 0;<br>    int page2 = Size(pages);<br>    FOR(p,0,Size(pages)) {<br>      first[p] = pages[p][0]*26*26 + pages[p][1]*26 + pages[p][2];<br>      last[p] = pages[p][4]*26*26 + pages[p][5]*26 + pages[p][6];<br>      first[p] -= 'A' * (1+26+26*26);<br>      last[p] -= 'A' * (1+26+26*26);<br>      }<br><br>    int seek = prefix[0]*26*26 + prefix[1]*26 + prefix[2];<br>    seek -= 'A' * (1+26+26*26);<br>    <br>    int count = 0;<br>    <br>    int max = 100;<br>    while(max) {<br>//    printf("Limit %d-%d, pages %d\n", pre1, pre2, page1, page2);<br>      if(!(pre1 &lt;= seek &amp;&amp; seek &lt; pre2)) return -count;<br>      if(page1 &gt;= page2) return -count;<br>      count++;<br>      int p1 =<br>        page1 + ((page2-page1) * (distr[seek]-distr[pre1])) / (distr[pre2]-distr[pre1]);<br>      int p2 =<br>        page1 + ((page2-page1) * (distr[seek+1]-distr[pre1])-1) / (distr[pre2]-distr[pre1]);<br>//    printf("Pages: %d/%d\n", p1, p2);<br>      int p = (p1+p2) / 2;<br>//    printf("Got %d: %d-%d (seek %d)\n", p, first[p], last[p], seek);<br>      if(first[p] &lt;= seek &amp;&amp; seek &lt;= last[p]) return count;<br>      else if(seek &lt; first[p]) {page2 = p; pre2 = first[p];}<br>      else {page1 = p+1; pre1 = last[p]+1;}<br>      max--;<br>      }<br>  <br>    return max;<br>    }<br>  <br> <br>  };<br><br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003]<br>// Powered by CodeProcessor<br></td>