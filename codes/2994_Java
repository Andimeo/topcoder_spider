<td class="problemText" colspan="8" valign="middle" align="left">
            /*<br>*/<br>import java.util.*;<br>public class PhoneSearch {<br>  public int pageFlips(int[] freqs, String[] pages, String prefix) {<br>            return pageFlips(freqs,pages,toNum(prefix),-1,pages.length,0);<br>  }<br>        <br>        public int pageFlips(int [] freqs, String [] pages, int prefix, int minPage, int maxPage, int flips) {<br>  //          System.out.println(minPage + "  " + maxPage + "  " + flips);<br>            if (maxPage == minPage + 1) return flips*-1;<br>            long min = (minPage == -1) ? 0 : 1+toNum(pages[minPage].substring(4));<br>            long max = (maxPage == pages.length) ? 26*26*26-1 : toNum(pages[maxPage].substring(0,3))-1;<br><br>            findPrefix(min,max,prefix,freqs);<br>  //          System.out.println(min + "  " + max + "  " + prefix + "  " + total + "  " + start + "  " + size + "  ");<br>            int nPages = maxPage-minPage-1;<br>            int minPg = (int) (nPages * start / total + minPage + 1);<br>            int maxPg = (int) (nPages * (start + size - 1) / total + minPage + 1);<br>            int pg = (maxPg + minPg) / 2;<br>     //       System.out.println(minPg + "  " + maxPg + "  " + pg);<br>            long pgMin = toNum(pages[pg].substring(0,3));<br>            long pgMax = toNum(pages[pg].substring(4));<br>         //   System.out.println(pgMin + "  " + pgMax);<br>            if (prefix &lt; pgMin) return pageFlips(freqs,pages,prefix,minPage,pg,flips+1);<br>            if (prefix &gt; pgMax) return pageFlips(freqs,pages,prefix,pg,maxPage,flips+1);<br>            return flips + 1;<br>        }<br>        <br>        long total, start, size;<br>        <br>        // inclusive!<br>        public void findPrefix(long min, long max, long prefix, int [] freqs) {<br>            total = 0;<br>            for(long i = min; i &lt;= max; i++) {<br>                long val = prefixValue(i,freqs);<br>                if (prefix==i) {<br>                    start = total;<br>                    size = val;<br>                }<br>                total += val;<br>            }<br>            <br>        }<br>        <br>        public int toNum(String prefix) {<br>            int ret = 0;<br>            for(int i = 0; i &lt; 3; i++) {<br>                ret = ret * 26 + (prefix.charAt(i)-'A');<br>            }<br>            return ret;<br>        }<br>        <br>        public long prefixValue(long prefixNum, int [] freqs) {<br>            long ret = 1;<br>            for(int i = 0; i &lt; 3; i++) {<br>                long val = prefixNum % 26;<br>                ret = ret * freqs[(int)val];<br>                prefixNum /= 26;<br>            }<br>            return ret;<br>        }<br>        <br>  public static void main(String[] args) {<br>    PhoneSearch temp = new PhoneSearch();<br>                int [] freqs = new int [] { 51,50,50,50,50,50,50,50,50,50,50,50,50, 50,50,50,50,50,50,50,50,50,50,50,50,50 };<br>                String [] pages = new String []  { "ZAA-ZBZ", "ZCA-ZDZ", "ZEA-ZFZ", "ZGA-ZHZ", "ZIA-ZJZ",<br>   "ZKA-ZLZ", "ZMA-ZNZ", "ZOA-ZPZ", "ZQA-ZRZ", "ZSA-ZTZ",<br>   "ZUA-ZVZ", "ZWA-ZXZ", "ZYA-ZZZ" }<br>;<br>    System.out.println(temp.pageFlips(freqs, pages, "YYY"));<br>  }<br>}<br><br><br>// Powered by FileEdit<br></td>