<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;iostream&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;sstream&gt;<br>#include &lt;map&gt;<br>#include &lt;queue&gt;<br>#include &lt;set&gt;<br> <br>using namespace std;<br> <br>// TYPEDEFS and CONSTANTS<br> <br>typedef vector&lt;int&gt; VI;<br>typedef vector&lt;string&gt; VS;<br>typedef pair&lt;int, int&gt; PII, Point;<br> <br>typedef long double ld;<br>typedef long long ll;<br>typedef signed long long i64;<br>typedef unsigned long long u64;<br> <br>const ld Pi=3.14159265358979323846;<br>const ld EPSILON = 1e-12;<br>const int INF = 0x7fffffff;<br> <br> <br>// MACROS<br> <br>#define Pn cout&lt;&lt;endl;<br>#define Pr(x) cout&lt;&lt;#x"="&lt;&lt;(x)&lt;&lt;" ";<br>#define Prn(x) cout&lt;&lt;#x"="&lt;&lt;(x)&lt;&lt;endl;<br>#define Prt(x) cout&lt;&lt;#x"="&lt;&lt;(x?"true":"false")&lt;&lt;" ";<br>#define Prtn(x) cout&lt;&lt;#x"="&lt;&lt;(x?"true":"false")&lt;&lt;" "&lt;&lt;endl;<br>#define PRINT(x) cout&lt;&lt;#x"={ ";copy(x.begin(),x.end(),ostream_iterator&lt;__typeof(*x.begin())&gt;(cout," "));cout&lt;&lt;"}"&lt;&lt;endl;<br> <br>#define FOR(i,a,b) for(int i=(a);i&lt;=(b);++i)<br>#define FORD(i,a,b) for(int i=(a);i&gt;=(b);--i)<br>#define REP(i,n) for(int i=0;i&lt;(n);++i)<br>#define REPD(i,n) for(int i=(n)-1;i&gt;=0;--i)<br>#define FOREACH(i,c) for(__typeof((c).begin()) i=(c).begin();i!=(c).end();++i)<br>template &lt;class T&gt; void SWAP(T &amp;x, T &amp;y) {T z=x; x=y; y=z;}<br> <br>#define PB push_back<br>#define ALL(x) (x).begin(), (x).end()<br>#define RALL(x) (x).rbegin(), (x).rend()<br>#define SORT(x) stable_sort(ALL(x))<br>#define SUM(x) accumulate(ALL(x),0)<br>#define COUNT(x,y) count(ALL(x),y)<br> <br> <br> <br>class grafixGlobs { <br>    public: <br>    vector &lt;int&gt; execute(vector &lt;string&gt; commands, int sel) <br>    { <br>    int nc  =  commands.size();<br>    string tc;<br>    string obj;<br>    int tid1, tid2;<br>    bool inUse[10000];<br>    int nO[10000][3];<br>    REP(i, 10000) nO[i][0]  =  nO[i][1]  =  nO[i][2]  =  0;<br>    REP(i, 10000) inUse[i]=false;<br>    REP(i, nc) {<br>      stringstream bla(commands[i]);<br>      bla&gt;&gt;tc;<br>      if(tc=="make") {<br>        bla&gt;&gt;obj;<br>        REP(k, 10000) {<br>          if(!inUse[k]) {<br>            inUse[k]  =  true;<br>            nO[k][0]  =  nO[k][1]  =  nO[k][2]  =  0;<br>            if(obj=="polygon") {<br>              nO[k][2]=1;<br>            }else if(obj=="circle") {<br>              nO[k][1]=1;<br>            }else if(obj=="arc") {<br>              nO[k][0]=1;<br>            }<br>            break;<br>          }<br>        }<br>      }<br>      else if(tc=="merge") {<br>        bla&gt;&gt;tid1&gt;&gt;tid2;<br>        nO[tid1][0]+=nO[tid2][0];<br>        nO[tid1][1]+=nO[tid2][1];<br>        nO[tid1][2]+=nO[tid2][2];<br>        inUse[tid2]  =  false;<br>      } else if(tc=="delete") {<br>        bla &gt;&gt; tid1;<br>        inUse[tid1]  =  false;<br>      } else if(tc=="split") {<br>        bla&gt;&gt;tid1;<br>        int t0  =  nO[tid1][0];<br>        int t1  =  nO[tid1][1];<br>        int t2  =  nO[tid1][2];<br>        inUse[tid1]  =  false;<br>        nO[tid1][0]  =  nO[tid1][1]  =  nO[tid1][2]  =  0;<br>        int k=0;<br>        while(t0&gt;0) {<br>          while(inUse[k]) ++k;<br>          inUse[k]  =  true;<br>          nO[k][0]  =  1;<br>          nO[k][1]  =  0;<br>          nO[k][2]  =  0;<br>          --t0;<br>        }<br>        while(t1&gt;0) {<br>          while(inUse[k]) ++k;<br>          inUse[k]  =  true;<br>          nO[k][0]  =  0;<br>          nO[k][1]  =  1;<br>          nO[k][2]  =  0;<br>          --t1;<br>        }<br>        while(t2&gt;0) {<br>          while(inUse[k]) ++k;<br>          inUse[k]  =  true;<br>          nO[k][0]  =  0;<br>          nO[k][1]  =  0;<br>          nO[k][2]  =  1;<br>          --t2;<br>        }<br>      }<br>    }<br>    vector&lt;int&gt; res;<br>    if(inUse[sel]) {<br>        res.PB(nO[sel][0]);<br>        res.PB(nO[sel][1]);<br>        res.PB(nO[sel][2]);<br>    }<br>    return res;<br>    } <br>    <br> <br>    }; <br> <br> <br> <br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003]<br>// Powered by CodeProcessor<br></td>