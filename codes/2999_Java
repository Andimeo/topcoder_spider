<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>public class grafixGlobs {<br>  public int[] execute(String[] c, int sel) {<br>    int[] at = new int[10000];<br>    int[][] obj = new int[10000][3];<br>    for (int i =0;i&lt;c.length;i++) {<br>      String[] v = c[i].split(" ");<br>      if (v[0].equals("make")) {<br>        int j=0;<br>        while (obj[j][0]+obj[j][1]+obj[j][2]!=0) j++;<br>        if (v[1].equals("arc")) {<br>          obj[j][0] = 1;<br>        } else if (v[1].equals("circle")) {<br>          obj[j][1] = 1;<br>        } else {<br>          obj[j][2] = 1;<br>        }<br>      } else if (v[0].equals("delete")) {<br>        int j = Integer.parseInt(v[1]);<br>        obj[j][0]=obj[j][1]=obj[j][2] = 0;<br>      } else if (v[0].equals("merge")) {<br>        int j = Integer.parseInt(v[1]);<br>        int k = Integer.parseInt(v[2]);<br>        obj[j][0]+=obj[k][0];<br>        obj[j][1]+=obj[k][1];<br>        obj[j][2]+=obj[k][2];<br>        obj[k][0]=obj[k][1]=obj[k][2] = 0;<br>      } else if (v[0].equals("split")) {<br>        int j = Integer.parseInt(v[1]);<br>        int nra = obj[j][0];<br>        int nrc = obj[j][1];<br>        int nrp = obj[j][2];<br>        obj[j][0]=obj[j][1]=obj[j][2] = 0;<br>        while (nra != 0) {<br>          j=0;<br>          while (obj[j][0]+obj[j][1]+obj[j][2]!=0) j++;<br>          obj[j][0] = 1;<br>          nra--;<br>        }<br>        while (nrc != 0) {<br>          j=0;<br>          while (obj[j][0]+obj[j][1]+obj[j][2]!=0) j++;<br>          obj[j][1] = 1;<br>          nrc--;<br>        }<br>        while (nrp != 0) {<br>          j=0;<br>          while (obj[j][0]+obj[j][1]+obj[j][2]!=0) j++;<br>          obj[j][2] = 1;<br>          nrp--;<br>        }<br>      }<br>    }<br>    if (sel&gt;=10000) return new int[]{};<br>    int nr = 0;<br>    for (int i = 0;i&lt;3;i++) {<br>      nr+=obj[sel][i];<br>    }<br>    if (nr==0) return new int[]{};<br>    return obj[sel];<br>  }<br>  public final static void main(String[] args)<br>  {<br>    try {<br>      validateExample("1", new grafixGlobs().execute(new String[] {"make polygon", "make circle", "make polygon", "merge 0 1", "merge 2 0", "split 2"},0), new int[] { 0,  1,  0 }, "execute(new String[] {\"make polygon\", \"make circle\", \"make polygon\", \"merge 0 1\", \"merge 2 0\", \"split 2\"},0)");<br>      validateExample("2", new grafixGlobs().execute(new String[] {"make circle", "make circle", "make arc", "merge 2 1", "delete 0",  "split 2", "delete 0", "make polygon"},0), new int[] { 0,  0,  1 }, "execute(new String[] {\"make circle\", \"make circle\", \"make arc\", \"merge 2 1\", \"delete 0\",  \"split 2\", \"delete 0\", \"make polygon\"},0)");<br>      validateExample("3", new grafixGlobs().execute(new String[] {"make circle", "make circle", "make arc", "merge 2 1", "delete 0",  "split 2", "delete 0", "make polygon"},2), new int[] { }, "execute(new String[] {\"make circle\", \"make circle\", \"make arc\", \"merge 2 1\", \"delete 0\",  \"split 2\", \"delete 0\", \"make polygon\"},2)");<br>      validateExample("4", new grafixGlobs().execute(new String[] {"make arc"},999), new int[] { }, "execute(new String[] {\"make arc\"},999)");<br>      validateExample("5", new grafixGlobs().execute(new String[] {"make polygon", "make polygon", "make arc", "make circle",  "make circle", "delete 3", "make polygon", "make arc",  "make arc", "merge 1 3", "merge 1 4", "merge 2 1", "make arc",  "make arc", "make circle", "make circle", "merge 6 5",  "split 6", "merge 2 1"},2), new int[] { 2,  1,  2 }, "execute(new String[] {\"make polygon\", \"make polygon\", \"make arc\", \"make circle\",  \"make circle\", \"delete 3\", \"make polygon\", \"make arc\",  \"make arc\", \"merge 1 3\", \"merge 1 4\", \"merge 2 1\", \"make arc\",  \"make arc\", \"make circle\", \"make circle\", \"merge 6 5\",  \"split 6\", \"merge 2 1\"},2)");<br>    } catch (Exception e) {<br>      System.out.println(e);<br>      e.printStackTrace(System.out);<br>    }<br>  }<br><br>  private static void validateExample(String exampleNum, int[] returned, int[] expected, String methodInvocation) {<br>    print(exampleNum);<br>    print("  ");<br>    if (!eq(returned,expected)) {<br>      print("FAIL");<br>    } else {<br>      print("SUCCESS");<br>    }<br>    print(" ");<br>    print(methodInvocation);<br>    print("\tGot:[");<br>    print(returned);<br>    print("]\t");<br>    print("Expected:[");<br>    print(expected);<br>    print("]");<br>    print("\n");<br>  }<br><br>  public static void print(boolean a) {<br>    System.out.print(a);<br>  }<br><br>  public static void print(long a) {<br>    System.out.print(a);<br>  }<br><br>  public static void print(int a) {<br>    System.out.print(a);<br>  }<br><br>  public static void print(char a) {<br>    System.out.print(a);<br>  }<br><br>  public static void print(String a) {<br>    System.out.print(a);<br>  }<br><br>  public static void print(int[] a) {<br>    if (a==null) {System.out.print("null"); return;}<br>    for (int i=0; i&lt;a.length; i++) System.out.print(a[i]+(i&lt;a.length-1?",":""));<br>  }<br><br>  public static void print(int[][] a) {<br>    if (a==null) {System.out.print("null"); return;}<br>    for (int i=0; i&lt;a.length; i++) { print(a[i]); print("\n"); }<br>  }<br><br>  public static void print(String[] a) {<br>    if (a==null) {System.out.print("null"); return;}<br>    for (int i=0; i&lt;a.length; i++) System.out.print(a[i]+(i&lt;a.length-1?",":""));<br>  }<br><br>  public static boolean eq(boolean a, boolean b) {<br>    return a==b;<br>  }<br><br>  public static boolean eq(long a, long b) {<br>    return a==b;<br>  }<br><br>  public static boolean eq(int a, int b) {<br>    return a==b;<br>  }<br><br>  public static boolean eq(char a, char b) {<br>    return a==b;<br>  }<br><br>  public static boolean eq(String a, String b) {<br>    return a.equals(b);<br>  }<br><br>  public static boolean eq(int[] a, int[] b) { return Arrays.equals(a,b); }<br>  public static boolean eq(String[] a, String[] b) { return Arrays.equals(a,b); }<br><br>                              public static void print(double a) {<br>          System.out.print(a);<br>   }<br><br>   public static boolean eq(double a, double b) {<br>        return Math.abs(a-b)&lt;1e-15;<br>    }<br>}<br> <br>// Powered by CodeProcessor<br></td>