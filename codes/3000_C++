<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;sstream&gt;<br>#include &lt;iostream&gt;<br>#include &lt;queue&gt;<br>#include &lt;deque&gt;<br>#include &lt;vector&gt;<br>#include &lt;string&gt;<br>#include &lt;math.h&gt;<br>#include &lt;numeric&gt;<br>#include &lt;algorithm&gt;<br><br>#ifdef __GNUC__<br>typedef long long lint;<br>typedef unsigned long long ulint;<br>#else<br>typedef __int64 lint;<br>typedef unsigned __int64 ulint;<br>#endif<br><br>using namespace std;<br><br>#define FOR(iter, bound) for(int iter=0; iter &lt; bound;iter++)<br>#define SFOR(iter, start, bound) for (int iter = start; iter&lt;bound; iter++)<br>#define ALL(C) C.begin(), C.end()<br>#define VSORT(vec) sort(ALL(vec))<br><br>typedef vector&lt;string&gt; VS;<br>typedef vector&lt;VS&gt; VVS;<br>typedef vector&lt;int&gt; VI;<br>typedef vector&lt;VI&gt; VVI;<br>typedef vector&lt;bool&gt; VB;<br>typedef vector&lt;VB&gt; VVB;<br>typedef vector&lt;double&gt; VD;<br>typedef vector&lt;vector&lt;double&gt; &gt; VVD;<br><br><br>VS Parse(string str, string look_for = " ", bool i_push_empty = false)<br>  {<br>  VS ans;<br>  if (look_for.length() == 0)<br>    {<br>    ans.push_back(str);<br>    return ans;<br>    };<br>  string last = "";<br>  int pos = 0;<br>  while (true)<br>    {<br>    if (pos == str.length())<br>      {<br>      if (last.length() != 0)<br>        ans.push_back(last);<br>      return ans;<br>      };<br>    if (look_for.find(str[pos]) == string::npos)<br>      last.push_back(str[pos]);<br>    else<br>      {<br>      if (i_push_empty || last.length() != 0)<br>        ans.push_back(last);<br>      last = "";<br>      };<br>    pos++;<br>    };<br>  return ans;<br>  };<br><br><br>void PRV(vector&lt;int&gt; vec)<br>  {<br>  for (int i = 0; i &lt; vec.size(); i++)<br>    printf("%i ", vec[i]);<br>  printf("\n");<br>  };<br><br><br>class grafixDither<br>        { <br>        public: <br>          void GetKK(int n1)<br>            {<br>            FOR(i, N)<br>              FOR(j, N)<br>              {<br>              int num = GetStep(SS, i, j);<br>              if (num == n1)<br>                {<br>                x = i;<br>                y = j;<br>                return;<br>                }<br>              }<br>            }<br>          int GetStep(int k, int x, int y)<br>            {<br>//            printf("k = %i x = %i y = %i \n", k, x, y);<br>            if (k == 0)<br>              return 0;<br>            int pp = 1 &lt;&lt; (k-1);<br>            int h1 = (x &lt; pp)?0:2;<br>            int h2 = (y &lt; pp)?0:1;<br>            switch (h1 + h2)<br>              {<br>              case 0:<br>                return GetStep(k-1, y, x);<br>              case 1:<br>                return (3*pp*pp + GetStep(k-1, 2*pp - y - 1, pp - x - 1));<br>              case 2:<br>                return (pp*pp + GetStep(k-1, x - pp, y));              <br>              default:<br>                return (2*pp*pp + GetStep(k-1, x-pp, y-pp));<br>              }<br><br>            }<br>          int N;<br>          int SS;<br>          VVI data;<br>          VS ans;<br>          int x, y;<br>          int Stup(int n1)<br>            {<br>            if (n1 == 1)<br>              return 0;<br>            return 1 + Stup(n1/2);<br>            }<br>        vector &lt;string&gt; gray2bwRiemersma(vector &lt;string&gt; grays) <br>            { <br>            N = grays.size();<br>            SS = Stup(N);<br>            data = VVI(N, VI(N, 0));<br>            FOR(i, N)<br>              FOR(j, N)<br>              if (grays[i][j] &gt;= 'a' &amp;&amp; grays[i][j] &lt;= 'z')<br>                data[i][j] = (grays[i][j] - 'a')*5;<br>              else<br>                data[i][j] = 130 + (grays[i][j] - 'A')*5;<br>            int error = 0;<br>            VS ans(N, string(N, ' '));<br>            FOR(step, N*N)<br>              {<br>              GetKK(step);<br>              int val = data[x][y] + error;<br>              val = max(0, val);<br>              val = min(255, val);<br>              if (val &lt;= 127)<br>                {<br>                ans[x][y] = 'B';<br>                error = val;<br>                }<br>              else<br>                {<br>                ans[x][y] = 'W';<br>                error = val - 255;<br>                }<br>              }<br>            return ans;<br>            } <br>        <br> <br>        }; <br><br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003]<br>// Powered by CodeProcessor<br></td>