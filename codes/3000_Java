<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>import java.math.*;<br>import java.util.regex.*;<br>import java.text.*;<br>public class grafixDither {<br>    char map[][];<br>    int error = 0;<br>    String set = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";<br> <br>    void evil(int x, int y, int x1,int y1, int x2,int y2, int side) {<br>  if(side==1) {<br>      int real = set.indexOf(map[y][x])*5 + error;<br>      real = Math.min(Math.max(real, 0),  255);<br>      int pick = real&lt;=127 ? 0 : 255;<br>      error = real - pick;<br>      map[y][x] = pick==0?'B':'W';<br>  } else {<br>      int s = side/2;<br>      evil(x, y, x2, y2, x1, y1, s);<br>      evil(x+x1*s, y+y1*s, x1,y1,x2,y2, s);<br>      evil(x+x1*s+x2*s, y+y1*s+y2*s, x1,y1,x2,y2, s);<br>      evil(x+x2*(s*2-1)+x1*(s-1),<br>     y+y2*(s*2-1)+y1*(s-1), -x2,-y2, -x1,-y1, s);<br>  }<br>    }<br>public String[] gray2bwRiemersma(String[] grays) {<br>    map = str2c(grays);<br>    evil(0, 0, 0, 1, 1, 0, grays.length);<br>    return c2str(map);<br>}<br> <br>/* std &lt;cg-&gt; */ <br>    /*&lt;-cg-&gt;*/static char[] str2c(String s) { return s.toCharArray(); }<br>    /*&lt;-cg-&gt;*/static String c2str(char[] c) { return new String(c); }<br>    /*&lt;-cg-&gt;*/static char[][] str2c(String[] s) { <br>  /*&lt;-cg-&gt;*/char a[][] = new char[s.length][];<br>  /*&lt;-cg-&gt;*/for(int i=a.length;i--&gt;0;) a[i] = s[i].toCharArray();<br>  /*&lt;-cg-&gt;*/return a;<br>    /*&lt;-cg-&gt;*/}<br>    /*&lt;-cg-&gt;*/static String[] c2str(char[][] s) {<br>  /*&lt;-cg-&gt;*/String a[] = new String[s.length];<br>  /*&lt;-cg-&gt;*/for(int i=a.length;i--&gt;0;) a[i] = c2str(s[i]);<br>  /*&lt;-cg-&gt;*/return a;<br>    /*&lt;-cg-&gt;*/}<br>    /*&lt;-cg-&gt;*/static int s2i(String s) { try { return Integer.parseInt(s); } catch(Exception e) { return -1; } }<br>    /*&lt;-cg-&gt;*/static int[] s2i(String[] s) { <br>  /*&lt;-cg-&gt;*/int[] n = new int[s.length]; <br>  /*&lt;-cg-&gt;*/for(int i=n.length;i--&gt;0;) n[i] = s2i(s[i]);<br>  /*&lt;-cg-&gt;*/return n;<br>    /*&lt;-cg-&gt;*/}<br>    /*&lt;-cg-&gt;*/static int[][] s2i(String[][] s) { <br>  /*&lt;-cg-&gt;*/int[][] n = new int[s.length][]; <br>  /*&lt;-cg-&gt;*/for(int i=n.length;i--&gt;0;) n[i] = s2i(s[i]);<br>  /*&lt;-cg-&gt;*/return n;<br>    /*&lt;-cg-&gt;*/}<br>    /*&lt;-cg-&gt;*/static long s2l(String s) { try { return Long.parseLong(s); } catch(Exception e) { return -1; } }<br>    /*&lt;-cg-&gt;*/static long[] s2l(String[] s) { <br>  /*&lt;-cg-&gt;*/long[] n = new long[s.length]; <br>  /*&lt;-cg-&gt;*/for(int i=n.length;i--&gt;0;) n[i] = s2l(s[i]);<br>  /*&lt;-cg-&gt;*/return n;<br>    /*&lt;-cg-&gt;*/}<br>    /*&lt;-cg-&gt;*/static long[][] s2l(String[][] s) { <br>  /*&lt;-cg-&gt;*/long[][] n = new long[s.length][]; <br>  /*&lt;-cg-&gt;*/for(int i=n.length;i--&gt;0;) n[i] = s2l(s[i]);<br>  /*&lt;-cg-&gt;*/return n;<br>    /*&lt;-cg-&gt;*/}<br>    /*&lt;-cg-&gt;*/static BigInteger big(long i) { return BigInteger.valueOf(i); }<br>    /*&lt;-cg-&gt;*/static int b2i(BigInteger b) { return b.intValue(); }<br>    /*&lt;-cg-&gt;*/static long b2l(BigInteger b) { return b.longValue(); }<br>    /*&lt;-cg-&gt;*/static Hashtable _rex = new Hashtable();<br>    /*&lt;-cg-&gt;*/static Pattern comp_(String s) {<br>  /*&lt;-cg-&gt;*/Object o; if(null==(o=_rex.get(s))) _rex.put(s,o=Pattern.compile(s)); <br>  /*&lt;-cg-&gt;*/return (Pattern)o; }<br>    /*&lt;-cg-&gt;*/static String match1(String s, String p) {<br>  /*&lt;-cg-&gt;*/Matcher m = comp_(p).matcher(s); if(!m.find()) return null;<br>  /*&lt;-cg-&gt;*/return m.group();<br>    /*&lt;-cg-&gt;*/}<br>    /*&lt;-cg-&gt;*/static String[] matchN(String s, String p) {<br>  /*&lt;-cg-&gt;*/ArrayList l=  new ArrayList();<br>  /*&lt;-cg-&gt;*/Matcher m = comp_(p).matcher(s); <br>  /*&lt;-cg-&gt;*/while(m.find()) l.add(m.group());<br>  /*&lt;-cg-&gt;*/return (String[])l.toArray(new String[0]);<br>    /*&lt;-cg-&gt;*/}<br>    /*&lt;-cg-&gt;*/static String[] groups(Matcher m) { <br>  /*&lt;-cg-&gt;*/String s[] = new String[m.groupCount()+1];<br>  /*&lt;-cg-&gt;*/for(int i=s.length;i--&gt;0;) s[i] = m.group(i);<br>  /*&lt;-cg-&gt;*/return s;<br>    /*&lt;-cg-&gt;*/}<br>    /*&lt;-cg-&gt;*/static String[] matchP(String s, String p) {<br>  /*&lt;-cg-&gt;*/Matcher m = comp_(p).matcher(s); if(!m.find()) return null;<br>  /*&lt;-cg-&gt;*/return groups(m);<br>    /*&lt;-cg-&gt;*/}<br>    /*&lt;-cg-&gt;*/static String[][] matchNP(String s, String p) {<br>  /*&lt;-cg-&gt;*/ArrayList l=  new ArrayList();<br>  /*&lt;-cg-&gt;*/Matcher m = comp_(p).matcher(s); <br>  /*&lt;-cg-&gt;*/while(m.find()) l.add(groups(m));<br>  /*&lt;-cg-&gt;*/return (String[][])l.toArray(new String[0][]);<br>    /*&lt;-cg-&gt;*/}<br>    /*&lt;-cg-&gt;*/  // &lt;-cg&gt;<br>}<br></td>