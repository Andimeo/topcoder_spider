<td class="problemText" colspan="8" valign="middle" align="left">
            using System; using System.Collections; using System.Text; using System.Text.RegularExpressions; public class TeleportAndLoader<br>{<br>public int cheapTransportation(int[] B, int tt, int ll) {<br>long T=tt, L=ll;<br>int N = B.Length;<br>Array.Sort(B);<br> <br>// Cost to place the first X boxes, with the most recent teleport being for box Y<br>long[,] cost = new long[N+1,N+1];<br>for (int i=0; i&lt;N; i++) cost[0,i] = T;<br>for (int x=1; x&lt;=N; x++)<br> {<br> cost[x,N] = cost[x-1,N] + L*B[x-1];<br> for (int y=0; y&lt;N; y++)<br>  {<br>  long cur = cost[x-1,y] + L*Math.Abs(B[x-1]-B[y]);<br>  for (int z=0; z&lt;=N; z++) cur = Math.Min(cur, cost[x-1,z] + T + L*Math.Abs(B[x-1]-B[y]));<br>  //cur = Math.Min(cur, cost[x-1,N] + T + L*Math.Abs(B[x-1]-B[y]));<br> <br>  //if (y == x-1) cur = Math.Min(cur, cost[x-1,N] + T);<br>  //if (y == x-1) for (int z=0; z&lt;x-1; z++) cur = Math.Min(cur, cost[x-1,z] + T);<br>  //for (int z=0; z&lt;y; z++) cur = Math.Min(cur, cost[x-1,z] + L*(B[x-1]-B[z]));<br>  //if (x-1 &gt; y) cur = Math.Min(cur, cost[x-1,y] + L*(B[x-1]-B[y]));<br>  cost[x,y] = cur;<br>  }<br> }<br> <br>long min=cost[N,N];<br>for (int i=0; i&lt;N; i++) min = Math.Min(min, cost[N,i]);<br>return (int)min;<br>}<br> <br> <br>static ArrayList AR { get { return new ArrayList(); }}<br>static Hashtable MAP { get { return new Hashtable(); }}<br> <br>static int   [] IA(ArrayList ar) { return (int   []) ar.ToArray(typeof(int   )); }<br>static string[] SA(ArrayList ar) { return (string[]) ar.ToArray(typeof(string)); }<br> <br>int    INT   (Object x) { return Convert.ToInt32 (x.ToString()); }<br>long   LONG  (Object x) { return Convert.ToInt64 (x.ToString()); }<br>double DOUBLE(Object x) { return Convert.ToDouble(x.ToString()); }<br> <br>static void WR(Object x, params object[] p) { Console.Write(x.ToString(), p); }<br>static void WL(Object x, params object[] p) { Console.WriteLine(x.ToString(), p); }<br>static void WL() { WL(""); }<br>static void WS(params Object[] c) { foreach (Object x in c) WR(x.ToString() + " "); }<br>static void WSL(params Object[] c) { foreach (Object x in c) WR(x.ToString() + " "); WL(); }<br>static void WS(Array ar, int X) { for (int x=0; x&lt;X; x++) WS(ar.GetValue(x)); WL(); }<br>static void WS(Array ar, int X, int Y) { for (int y=0; y&lt;Y; y++) { for (int x=0; x&lt;X; x++) WS(ar.GetValue(x,y)); WL(); }}}<br> <br>// Powered by PopsEdit<br></td>