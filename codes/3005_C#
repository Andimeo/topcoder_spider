<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections;<br>using System.Text;<br> <br> <br>public class LargestCircle {<br> <br>  public bool CanDraw(bool[,] taken, int x, int y, int r, int sizeX, int sizeY) {<br>    int rsq = r*r;<br>    for (double i=(double)-r+1.0/100.0;i&lt;r; i+= 1.0/10.0) {<br>      // (i)^2 + (y-y1)^2 = r^2<br>      // i^2 + y^2-2y*y1+y1^2 = r^2<br>      // y = (y1+/- sqrt(r^2-i^2))<br>      double yDesc = Math.Sqrt(-i*i + rsq);<br>      double yI = y + yDesc;<br>      int yIi = (int)Math.Floor(yI);<br>      int xIi = (int)Math.Floor(x+i);<br>      if (taken[xIi, yIi])<br>        return false;<br>      yI = y - yDesc;<br>      yIi = (int)Math.Floor(yI);<br>      if (taken[xIi, yIi])<br>        return false;<br>    }<br>    return true;<br>  }<br> <br>  public int radius(string[] grid) {<br>    bool[,] taken = new bool[grid.Length,grid[0].Length];<br>    for (int i=0; i&lt;grid.Length;i++) {<br>      for (int j=0; j&lt;grid[i].Length;j++) {<br>        if (grid[i][j] == '#')<br>          taken[i,j] = true;<br>      }<br>    }<br>    int best = 0;<br>    for (int i=1; i&lt;grid.Length; i++) {<br>      for (int j=1; j&lt;grid[0].Length; j++) {<br>        int maxRadius = Math.Min(i,j);<br>        maxRadius = Math.Min(maxRadius, grid.Length-i);<br>        maxRadius = Math.Min(maxRadius, grid[0].Length -j);<br>        for (int k=1; k&lt;=maxRadius; k++) {<br>          if (CanDraw(taken, i,j,k, grid.Length, grid[0].Length))<br>            if (k &gt; best)<br>              best = k;<br>        }<br>      }<br>    }<br>    return best;<br>  }<br>}<br></td>