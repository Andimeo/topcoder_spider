<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;string&gt;<br>#include &lt;vector&gt;<br>using namespace std;<br> <br>class LargestCircle {<br>public:<br>int radius(vector&lt;string&gt; grid)<br>{<br>  //vector&lt; vector&lt;int&gt; &gt; corners;<br> <br>  int mindim = grid[0].length();<br>  if(grid.size() &lt; mindim) mindim = grid.size();<br> <br>  /*for(int y = 0; y &lt;= grid.size(); y++)<br>  {<br>    vector&lt;int&gt; row;<br>    for(int x = 0; x &lt;= grid[0].length(); x++)<br>      row.push_back(0);<br>    corners.push_back(row);<br>  }*/<br>  <br>  int in[2][2];<br>  for(int r = mindim; r &gt; 0; r--)<br>    for(int oy = r; oy &lt;= grid.size() - r; oy++)<br>      for(int ox = r; ox &lt;= grid[0].length() - r; ox++)<br>      {<br>        bool good = true;<br>        for(int gy = 0; gy &lt; grid.size() &amp;&amp; good; gy++)<br>        for(int gx = 0; gx &lt; grid[0].length() &amp;&amp; good; gx++)<br>        if(grid[gy][gx] == '#')<br>        {<br>          int rx, ry;<br>          rx = gx - ox;<br>          ry = gy - oy;<br>          in[0][0] = rx * rx + ry * ry - r * r;<br>          in[1][0] = rx * rx + (ry + 1) * (ry + 1) - r * r;<br>          in[0][1] = (rx + 1) * (rx + 1) + ry * ry - r * r;<br>          in[1][1] = (rx + 1) * (rx + 1) + (ry + 1) * (ry + 1) - r * r;<br>          if(in[0][0] &lt;= 0 &amp;&amp; in[1][0] &lt;= 0 &amp;&amp; in[0][1] &lt;= 0 &amp;&amp; in[1][1] &lt;= 0)<br>            good = true;<br>          else if(in[0][0] &gt;= 0 &amp;&amp; in[1][0] &gt;= 0 &amp;&amp; in[0][1] &gt;= 0 &amp;&amp; in[1][1] &gt;= 0)<br>            good = true;<br>          else<br>            good = false;<br>        }<br>        if(good) return r;<br>      }<br>  return 0;<br>}<br>};<br></td>