<td class="problemText" colspan="8" valign="middle" align="left">
            Public Class LargestCircle<br>    Public Function radius(ByVal grid As String()) As Integer<br>        If grid.GetUpperBound(0) = -1 Then Return 0<br> <br>        Dim aGrid(grid.GetUpperBound(0), grid(0).Length - 1) As Char<br>        Dim i, j As Integer<br>        Dim iLargestCircle As Integer = 0<br> <br> <br>        For i = 0 To aGrid.GetUpperBound(0)<br>            For j = 0 To aGrid.GetUpperBound(1)<br>                aGrid(i, j) = grid(i).Substring(j, 1)<br>            Next<br>        Next<br> <br>        Dim iMaxSize As Integer<br>        Dim iSize As Integer<br>        Dim x, y As Integer<br>        Dim bGood As Boolean<br> <br>        For i = 0 To aGrid.GetUpperBound(0) - 1<br>            For j = 0 To aGrid.GetUpperBound(1) - 1<br>                iMaxSize = i + 1<br>                If j + 1 &lt; i + 1 Then iMaxSize = j + 1<br>                If aGrid.GetUpperBound(0) - i &lt; iMaxSize Then iMaxSize = aGrid.GetUpperBound(0) - i<br>                If aGrid.GetUpperBound(1) - j &lt; iMaxSize Then iMaxSize = aGrid.GetUpperBound(1) - j<br>                For iSize = iLargestCircle + 1 To iMaxSize<br>                    bGood = True<br>                    For x = i - iSize + 1 To i + iSize<br>                        For y = j - iSize + 1 To j + iSize<br>                            If bGood Then<br>                                If aGrid(x, y) = "#" Then<br>                                    If bCrosses(x, y, i, j, iSize) Then<br>                                        bGood = False<br>                                    End If<br>                                End If<br>                            End If<br>                        Next<br>                    Next<br>                    If bGood Then iLargestCircle = iSize<br>                Next<br>            Next<br>        Next<br> <br>        Return iLargestCircle<br> <br> <br>    End Function<br> <br>    Private Function bCrosses(ByVal x As Integer, ByVal y As Integer, ByVal i As Integer, ByVal j As Integer, ByVal iSize As Integer) As Boolean<br>        i += 1<br>        j += 1<br>        Dim bOut As Boolean = False<br>        Dim bIn As Boolean = False<br>        Dim r1, r2, r3, r4 As Double<br> <br>        r1 = System.Math.Sqrt((i - x) ^ 2 + (j - y) ^ 2)<br>        x += 1<br>        r2 = System.Math.Sqrt((i - x) ^ 2 + (j - y) ^ 2)<br>        y += 1<br>        r3 = System.Math.Sqrt((i - x) ^ 2 + (j - y) ^ 2)<br>        x -= 1<br>        r4 = System.Math.Sqrt((i - x) ^ 2 + (j - y) ^ 2)<br> <br>        If r1 &gt; iSize Then bOut = True<br>        If r1 &lt; iSize Then bIn = True<br>        If r2 &gt; iSize Then bOut = True<br>        If r2 &lt; iSize Then bIn = True<br>        If r3 &gt; iSize Then bOut = True<br>        If r3 &lt; iSize Then bIn = True<br>        If r4 &gt; iSize Then bOut = True<br>        If r4 &lt; iSize Then bIn = True<br> <br>        If bIn And bOut Then<br>            Return True<br>        Else<br>            Return False<br>        End If<br> <br> <br>    End Function<br>End Class<br></td>