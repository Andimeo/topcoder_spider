<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;algorithm&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cctype&gt;<br>#include &lt;cmath&gt;<br>#include &lt;vector&gt;<br>#include &lt;string&gt;<br>#include &lt;iostream&gt;<br>#include &lt;sstream&gt;<br>#include &lt;set&gt;<br>#include &lt;map&gt;<br>#include &lt;utility&gt;<br>#include &lt;queue&gt;<br>#include &lt;stack&gt;<br>using namespace std;<br><br>#define REP(i,n) for(int i=0;i&lt;(n);++i)<br>#define FOR(i,a,b) for(int i=(a);i&lt;=(b);++i)<br>#define FORD(i,a,b) for(int i=(a);i&gt;=(b);--i)<br>#define VAR(a,b) typeof(b) a=(b)<br>#define FOREACH(it,c) for(VAR(it,(c).begin());it!=(c).end();++it)<br>#define ALL(f,w) ({ bool _ok=true; f _ok=_ok &amp;&amp; (w); _ok; })<br>#define EXISTS(f,w) (!ALL(f,!(w)))<br>typedef long long LL;<br>typedef vector&lt;int&gt; VI; typedef vector&lt;VI&gt; VVI; typedef vector&lt;string&gt; VS;<br>const int INF = 1000000000; const LL INFLL = LL(INF) * LL(INF);<br><br>template&lt;class T&gt; inline int size(const T&amp;c) { return c.size(); }<br>template&lt;class T&gt; inline vector&lt;T&gt; makeV(const T&amp;a) {<br>  vector&lt;T&gt; v; v.push_back(a); return v;<br>}<br>template&lt;class T&gt; inline vector&lt;T&gt; makeV(const T&amp;a,const T&amp;b) {<br>  vector&lt;T&gt; v; v.push_back(a); v.push_back(b); return v;<br>}<br>template&lt;class T&gt; inline vector&lt;T&gt; makeV(const T&amp;a,const T&amp;b,const T&amp;c) {<br>  vector&lt;T&gt; v; v.push_back(a); v.push_back(b); v.push_back(c); return v;<br>}<br>template&lt;class T,class U&gt; inline bool contains(const T&amp;a, const U&amp;b) {<br>  return find(a.begin(),a.end(),b)!=a.end();<br>}<br>vector&lt;string&gt; split(string s,string del=" ") {<br>  vector&lt;string&gt; res; string w;<br>  s+=del[0];<br>  FOREACH(it,s) {<br>    if(!contains(del,*it)) w+=*it;<br>    else if(w!="") { res.push_back(w); w=""; }<br>  }<br>  return res;<br>}<br>template&lt;class T&gt; inline string x2s(T x) { ostringstream os; os &lt;&lt; x; return os.str(); }<br>inline int s2i(string s) { istringstream is(s); int x; is&gt;&gt;x; return x; }<br>inline int s2ll(string s) { istringstream is(s); LL x; is&gt;&gt;x; return x; }<br><br>VI s2vi(string s,string del=" ") {<br>  VS v = split(s,del);<br>  VI res;<br>  FOREACH(it,v) res.push_back(s2i(*it));<br>  return res;<br>}<br><br>//////////////////////////////////////////////////////////////////////<br><br>int nwords;<br>vector&lt;string&gt; words;<br>int digits;<br><br>map&lt;pair&lt;int,VI&gt;, LL&gt; cache;<br><br>LL go(int p, VI v) {<br>  /*<br>  cerr &lt;&lt; "GO "&lt;&lt; p;<br>  FOREACH(it,v) cerr &lt;&lt; ' ' &lt;&lt; *it;<br>  cerr &lt;&lt; "\n"; */<br>  LL &amp;res = cache[make_pair(p,v)];<br>  if(res!=0) return res;<br>  res = 1;<br>  FOR(c,'0','9') {<br>    VI v2;<br>    bool anew = false;<br>    FOREACH(it,v) {<br>      int nr = *it &gt;&gt; 8;<br>      int pp = *it &amp; 255;<br>      if(words[nr][pp]==c) {<br>        if(pp == size(words[nr])-1) anew = true;<br>        else v2.push_back((nr &lt;&lt; 8) + pp+1);<br>      }<br>    }<br>    if(p==digits-1) {<br>      if(anew) res+=1;<br>    }<br>    else {<br>      if(anew) {<br>        REP(i,nwords) v2.push_back((i&lt;&lt;8));<br>      }<br>      sort(v2.begin(),v2.end());<br>      res += go(p+1, v2)-1;<br>    }<br>  }<br>  return res;<br>}<br><br>void cWords(LL base) {<br>  LL p=1;<br>  words.clear();<br>  for(;;) {<br>    string s = x2s(p);<br>    if(size(s)&gt;digits) break;<br>    words.push_back(s);<br>    if(INFLL/base &lt; p) break;<br>    p*=base;<br>  }<br>}<br><br>struct StringOfPowers {<br>  // MAIN<br>  long long count(int base, int digitss) {<br>    digits = digitss;<br>    cWords(base);<br>    cache.clear();<br>    nwords = size(words);<br>    VI v; REP(i,nwords) v.push_back((i&lt;&lt;8)+0);<br>    return go(0,v)-1;<br>  }<br>};<br><br><br><br>// Powered by FileEdit<br></td>