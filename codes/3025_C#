<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections;<br> <br>public class bloggoDocStructure<br>{<br>  string doca,docb;<br>  int posa,posb;<br> <br>  private string nexttaga()<br>  {<br>    while (posa&lt;doca.Length &amp;&amp; doca[posa]!='&lt;') posa++;<br>    if (posa==doca.Length) return "";<br>    else<br>    {<br>      int i=posa;<br>      while (doca[posa++]!='&gt;');<br>      return doca.Substring(i+1,posa-i-2);<br>    }<br>  }<br> <br>  private string nexttagb()<br>  {<br>    while (posb&lt;docb.Length &amp;&amp; docb[posb]!='&lt;') posb++;<br>    if (posb==docb.Length) return "";<br>    else<br>    {<br>      int i=posb;<br>      while (docb[posb++]!='&gt;');<br>      return docb.Substring(i+1,posb-i-2);<br>    }<br>  }<br> <br>  private bool checkEquiv()<br>  {<br>    while (true)<br>    {<br>      string s1=nexttaga();<br>      string s2=nexttagb();<br>      if (string.Compare(s1,s2)!=0) return false;<br>      if (s1[0]=='/') break;<br>      if (!checkEquiv()) return false;<br>    }<br>    return true;<br>  }<br> <br>  private void parsea()<br>  {<br>    int c=1;<br>    while (c&gt;0)<br>      if (nexttaga()[0]=='/') c--;<br>      else c++;<br>  }<br> <br>  private void parseb()<br>  {<br>    int c=1;<br>    while (c&gt;0)<br>      if (nexttagb()[0]=='/') c--;<br>      else c++;<br>  }<br> <br>  private bool checkIn(int pa,int pb)<br>  {<br>    posa=pa; posb=pb;<br>    string s1,s2;<br>    while (true)<br>    {<br>      s1=nexttaga();<br>      if (s1[0]=='/') return true;<br>      while (true)<br>      {<br>        s2=nexttagb();<br>        if (s2[0]=='/') return false;<br>        if (string.Compare(s1,s2)==0)<br>        {<br>          int sava=posa,savb=posb;<br>          if (checkIn(posa,posb))<br>          {<br>            posa=sava; posb=savb;<br>            parseb();<br>            break;<br>          }<br>          else<br>          {<br>            posa=sava; posb=savb;<br>            parseb();<br>          }<br>        }<br>        else<br>          parseb();<br>      }<br>      parsea();<br>    }<br>  }<br> <br>  private bool checkOut(int pa,int pb)<br>  {<br>    posa=pa; posb=pb;<br>    string s1,s2;<br>    while (true)<br>    {<br>      s2=nexttagb();<br>      if (s2[0]=='/') return true;<br>      while (true)<br>      {<br>        s1=nexttaga();<br>        if (s1[0]=='/') return false;<br>        if (string.Compare(s1,s2)==0)<br>        {<br>          int sava=posa,savb=posb;<br>          if (checkOut(posa,posb))<br>          {<br>            posa=sava; posb=savb;<br>            parsea();<br>            break;<br>          }<br>          else<br>          {<br>            posa=sava; posb=savb;<br>            parsea();<br>          }<br>        }<br>        else<br>          parsea();<br>      }<br>      parseb();<br>    }<br>  }<br> <br>  public string compare(string[] _doca,string[] _docb)<br>  {<br>    int ca,cb;<br>    doca="";<br>    foreach (string s in _doca) doca+=s;<br>    docb="";<br>    foreach (string s in _docb) docb+=s;<br>    posa=0; nexttaga();<br>    posb=0; nexttagb();<br>    ca=1; cb=1;<br>    while (string.Compare(nexttaga(),"")!=0) ca++;<br>    ca/=2;<br>    while (string.Compare(nexttagb(),"")!=0) cb++;<br>    cb/=2;<br>    posa=0; nexttaga();<br>    posb=0; nexttagb();<br>    if (checkEquiv()) return "equivalent";<br>    posa=0; nexttaga();<br>    posb=0; nexttagb();<br>    if (checkIn(posa,posb)) return "intree "+((cb-ca)).ToString();<br>    posa=0; nexttaga();<br>    posb=0; nexttagb();<br>    if (checkOut(posa,posb)) return "outtree "+((ca-cb)).ToString();<br>    return "incompatible";<br>  }<br>}<br></td>