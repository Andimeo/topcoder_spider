<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>import java.util.regex.*;<br>public class bloggoDocStructure {<br>    static String[] matchN(String s, String p) {<br>  ArrayList l=  new ArrayList();<br>  Matcher m = Pattern.compile(p).matcher(s); <br>  while(m.find()) l.add(m.group());<br>  return (String[])l.toArray(new String[0]);<br>    }<br> <br>    class T {<br>  String type;<br>  ArrayList subs=  new ArrayList();<br>  int sz; int size() { <br>      if(sz&gt;0) return sz;<br>      sz=1;<br>      /* fromlist subs T.t &lt;cg-&gt; */ for(int _r6272 = 0; _r6272 &lt; subs.size(); _r6272++) {<br>          /*&lt;-cg-&gt;*/T t = (T) subs.get(_r6272);  // &lt;-cg&gt;<br>    sz += t.size();<br>      }<br>      return sz;<br>  }<br> <br>  public String toString() {<br>      return type+" "+subs;<br>  }<br>  Hashtable h = new Hashtable();<br>  // er this krympet versjon av o<br>  public int intr(T o) {<br>      if(!o.type.equals(type)) return -1;<br>      // cache<br>      if(h.get(o) != null) return ((Integer)h.get(o)).intValue();<br>      boolean match[][] = new boolean[o.subs.size()+1][subs.size()+1];<br>      match[0][0]= true;<br>      for(int i=1;i&lt;=o.subs.size();i++) {<br>    for(int j=0;j&lt;=Math.min(i, subs.size());j++) {<br>        boolean b = match[i-1][j];<br>        if(j&gt;0) {<br>      if(match[i-1][j-1] &amp;&amp; 0&lt;= ((T)subs.get(j-1)).intr((T)o.subs.get(i-1))) {<br>          b = true;<br>      }<br>        }<br>        match[i][j] = b;<br>    }<br>      }<br>      int res = match[o.subs.size()][subs.size()] ? o.size()-size() : -1;<br>      //      System.out.println(this+"\n"+o+"\n"+"\t"+res+"\n");<br>      return res;<br>  }<br>    }<br>    <br>    String tag[];<br>    int p = 0;<br>    T tre() {<br>  if(p&gt;=tag.length) return null;<br>  String s = tag[p];<br>  if(s.charAt(1)=='/') return null;<br>  p++;<br>  T t = new T();<br>  t.type = s;<br>  T ch;<br>  while(true) {<br>      ch = tre();<br>      if(ch==null) { p++; return t; }<br>      t.subs.add(ch);<br>  }<br>    }<br>    T parse(String[] s) {<br>  String o = "";<br>  for(int i=0;i&lt;s.length;i++) o += s[i];<br> <br>  tag = matchN(o, "&lt;/?[a-z0-9]+&gt;");<br>  p = 0;<br>  return tre();<br>    }<br>    <br> <br>public String compare(String[] docA, String[] docB) {<br>    T a = parse(docA);<br>    T b = parse(docB);<br>    //    System.out.println(a);<br>    //    System.out.println(b);<br>    int ab = a.intr(b);<br>    int ba = b.intr(a);<br>    if((ab|ba)&gt;=0) return "equivalent";<br>    if(ab&gt;=0) return "intree "+ab;<br>    if(ba&gt;=0) return "outtree "+ba;<br>    return "incompatible";<br>}}<br></td>