<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br> <br>public class ParenReduction {<br>    private class ExpNode {<br>        public ExpNode Left, Right;<br>        char Operator;<br> <br>        public bool IsRealOperator(char o)<br>        {<br>            return "+-*/^".IndexOf(o) != -1;<br>        }<br> <br>        public int LeftOperatorPrecedence(char o)<br>        {<br>            if (o == '+') return 1;<br>            if (o == '-') return 1;<br>            if (o == '*') return 2;<br>            if (o == '/') return 2;<br>            if (o == '^') return 3;<br>            return 4;<br>        }<br> <br>        public int RightOperatorPrecedence(char o)<br>        {<br>            if (o == '+') return 1;<br>            if (o == '-') return 2;<br>            if (o == '*') return 3;<br>            if (o == '/') return 4;<br>            if (o == '^') return 5;<br>            return 6;<br>        }<br> <br>        public ExpNode(string s, ref int pos)<br>        {<br>            if (s[pos] != '(') {<br>                Left = Right = null;<br>                Operator = s[pos];<br>                return;<br>            }<br>            <br>            ++pos;<br>            Left = new ExpNode(s, ref pos);<br> <br>            ++pos;<br>            Operator = s[pos];<br>            if (!IsRealOperator(Operator)) {<br>//                throw new InvalidOperationException("Invalid Operator");<br>            }<br> <br>            ++pos;<br>            Right = new ExpNode(s, ref pos);<br> <br>            ++pos;<br>            if (s[pos] != ')') {<br>//                throw new InvalidOperationException(") expected");<br>            }<br>        }<br> <br>        public string FullPrint()<br>        {<br>            if (IsRealOperator(Operator)) {<br>                return '(' + Left.FullPrint() + Operator + Right.FullPrint() + ')';<br>            } else {<br>                return Operator.ToString();<br>            }<br>        }<br> <br>        public string PrettyPrint()<br>        {<br>            string LeftPrint, RightPrint;<br>            if (!IsRealOperator(Operator)) {<br>                return Operator.ToString();<br>            }<br>            LeftPrint = Left.PrettyPrint();<br>            RightPrint = Right.PrettyPrint();<br>            if (LeftOperatorPrecedence(Left.Operator) &lt; LeftOperatorPrecedence(Operator)) {<br>                LeftPrint = "(" + LeftPrint + ")";<br>            } else if (Left.Operator == Operator &amp;&amp; Operator == '^') {<br>                LeftPrint = "(" + LeftPrint + ")";<br>            }<br>            if (RightOperatorPrecedence(Right.Operator) &lt; RightOperatorPrecedence(Operator)) {<br>                RightPrint = "(" + RightPrint + ")";<br>            } else if (Right.Operator == Operator &amp;&amp; (Operator == '-' || Operator == '/')) {<br>                RightPrint = "(" + RightPrint + ")";<br>            }<br>            return LeftPrint + Operator + RightPrint;<br>        }<br>    }<br> <br>    public static string pretty(string s)<br>    {<br>        int x = 0;<br>        ExpNode exp = new ExpNode(s, ref x);<br>        return exp.PrettyPrint();<br>    }<br> <br>    public static void Check(string q, string a)<br>    {<br>        string ma = pretty(q);<br>        if (ma == a) {<br>            Console.WriteLine("Q:{0} A:{1}", q, a);<br>        } else {<br>            Console.WriteLine("Q:{0} A:{1} C:{2}", q, ma, a);<br>        }<br>    }<br> <br>    public static void Main()<br>    {<br>        Check("(a-(b/(c^d)))", "a-b/c^d");<br>        Check("(e*((f+(g+h))*i))", "e*(f+g+h)*i");<br>        Check("x", "x");<br>        Check("((a+((l-g)+o))^((r/i)*((t/h)*m)))", "(a+l-g+o)^(r/i*t/h*m)");<br>        Check("(((((t-(k/(o*m)))*(c*f))*((n/j)+(v-z)))^l)/(x-h))", "((t-k/(o*m))*c*f*(n/j+v-z))^l/(x-h)");<br>        Check("(a+((b+(c-d))-e))", "a+b+c-d-e");<br>        Check("((a-(b-c))-d)", "a-(b-c)-d");<br>        Check("((a^b)^c)", "(a^b)^c");<br>        Check("(a^(b^c))", "a^b^c");<br>    }<br>}<br></td>