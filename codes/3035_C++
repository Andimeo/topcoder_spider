<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;iostream&gt;<br>#include &lt;string&gt;<br> <br>using namespace std;<br> <br>class ParenReduction {<br>public:<br>string reduceleft (string E, char op) {<br>  int x, count;<br>  if (E. length () == 1) return E;<br>  count = 0;<br>  if (E [0] == '(') count++;<br>  x = 0;<br>  while (count &gt; 0) {<br>    x++;<br>    if (E [x] == '(') count++;<br>    else if (E [x] == ')') count--;<br>  }<br>  char Eop = E [x+1];<br>  string E1 = E.substr (0, x + 1);<br>  if (E1 [0] == '(') E1 = E1. substr (1, E1. length () - 2);<br>  string E2 = E.substr (x + 2, E.length ());<br>  if (E2 [0] == '(') E2 = E2. substr (1, E2. length () - 2);<br>  <br>  E1 = reduceleft (E1, Eop);<br>  E2 = reduceright (E2, Eop);<br>   <br>  switch (op) {<br>  case '^':<br>    return ('(' + E1 + Eop + E2 + ')');<br>  case '*':<br>    if (Eop == '^' || Eop == '*' || Eop == '/') return (E1 + Eop + E2);<br>    if (Eop == '+' || Eop == '-') return ('(' + E1 + Eop + E2 + ')');<br>  case '/':<br>    if (Eop == '^' || Eop == '*' || Eop == '/') return (E1 + Eop + E2);<br>    if (Eop == '+' || Eop == '-') return ('(' + E1 + Eop + E2 + ')');<br>  case '+':<br>    return (E1 + Eop + E2);<br>  case '-':<br>    return (E1 + Eop + E2);<br>  }<br>  return "(-1)";<br>}<br> <br>string reduceright (string E, char op) {<br>  int x, count;<br>  if (E. length () == 1) return E;<br>  count = 0;<br>  if (E [0] == '(') count++;<br>  x = 0;<br>  while (count &gt; 0) {<br>    x++;<br>    if (E [x] == '(') count++;<br>    else if (E [x] == ')') count--;<br>  }<br>  char Eop = E [x+1];<br>  string E1 = E.substr (0, x + 1);<br>  if (E1 [0] == '(') E1 = E1. substr (1, E1. length () - 2);<br>  string E2 = E.substr (x + 2, E.length ());<br>  if (E2 [0] == '(') E2 = E2. substr (1, E2. length () - 2);<br>  <br>  E1 = reduceleft (E1, Eop);<br>  E2 = reduceright (E2, Eop);<br>   <br>  switch (op) {<br>  case '^':<br>    if (Eop == '^') return (E1 + Eop + E2);<br>    return ('(' + E1 + Eop + E2 + ')');<br>    break;<br>  case '*':<br>    if (Eop == '^' || Eop == '*' || Eop == '/') return (E1 + Eop + E2);<br>    if (Eop == '+' || Eop == '-') return ('(' + E1 + Eop + E2 + ')');<br>  case '/':<br>    if (Eop == '^') return (E1 + Eop + E2);<br>    return ('(' + E1 + Eop + E2 + ')');<br>  case '+':<br>    return (E1 + Eop + E2);<br>  case '-':<br>    if (Eop == '+' || Eop == '-') return ('(' + E1 + Eop + E2 + ')');<br>    return (E1 + Eop + E2);<br>  }<br>  return "(-1)";<br>}<br> <br>string pretty (string expr) {<br>  int x, count;<br>  if (expr. length () == 1) return expr;<br>  expr = expr.substr (1, expr.length () - 2);<br>  count = 0;<br>  if (expr [0] == '(') count++;<br>  x = 0;<br>  while (count &gt; 0) {<br>    x++;<br>    if (expr [x] == '(') count++;<br>    else if (expr [x] == ')') count--;<br>  }<br>  char Eop = expr [x+1];<br>  string E1 = expr.substr (0, x + 1);<br>  if (E1 [0] == '(') E1 = E1. substr (1, E1. length () - 2);<br>  string E2 = expr.substr (x + 2, expr.length ());<br>  if (E2 [0] == '(') E2 = E2. substr (1, E2. length () - 2);<br> <br>  E1 = reduceleft (E1, Eop);<br>  E2 = reduceright (E2, Eop);<br>  return (E1 + Eop + E2);<br>}<br>};<br></td>