<td class="problemText" colspan="8" valign="middle" align="left">
            Imports Microsoft.VisualBasic<br>Imports System<br>Imports System.Collections<br> <br>Public Class Thesaurus<br>    Private Const MAX_WORDS = 50 * 25<br>    Private t(49, MAX_WORDS - 1), notExists(49) As Boolean<br>    Private word As New SortedList()<br>    Private wordID As Integer<br> <br>    Private Function have2Commons(ByVal i As Integer, ByVal j As Integer) As Boolean<br>        Dim k, count As Integer<br> <br>        For k = 0 To wordID - 1<br>            If t(i, k) = True AndAlso t(j, k) = True Then<br>                count += 1<br>                If count &gt;= 2 Then Return True<br>            End If<br>        Next<br>        Return False<br>    End Function<br>    Private Sub mergeAndClear(ByVal i As Integer, ByVal j As Integer)<br>        Dim k As Integer<br> <br>        For k = 0 To wordID - 1<br>            If t(j, k) = True Then t(i, k) = True<br>        Next<br>        notExists(j) = True<br>    End Sub<br>    Public Function edit(ByVal entry As String()) As String()<br>        Dim i, j, k, kk, thisWord, n, resCount As Integer<br>        Dim tok() As String<br>        Dim merged As Boolean<br> <br>        n = entry.Length<br>        For i = 0 To n - 1<br>            tok = entry(i).Split(" ")<br>            For j = 0 To tok.Length - 1<br>                If word.Contains(tok(j)) Then<br>                    thisWord = word(tok(j))<br>                Else<br>                    word.Add(tok(j), wordID)<br>                    thisWord = wordID<br>                    wordID += 1<br>                End If<br>                t(i, thisWord) = True<br>            Next<br>        Next<br> <br>        resCount = n<br> <br>        Do<br>            merged = False<br>            For i = 0 To n - 1<br>                If Not notExists(i) Then<br>                    For j = i + 1 To n - 1<br>                        If Not notExists(j) AndAlso have2Commons(i, j) Then<br>                            mergeAndClear(i, j)<br>                            resCount -= 1<br>                            merged = True<br>                        End If<br>                    Next<br>                End If<br>            Next<br>        Loop Until merged = False<br> <br>        Dim res(resCount - 1) As String<br>        j = 0<br>        For i = 0 To n - 1<br>            If Not notExists(i) Then<br>                For k = 0 To word.Count - 1<br>                    For kk = 0 To wordID - 1<br>                        If t(i, kk) AndAlso word.GetByIndex(k) = kk Then res(j) &amp;= word.GetKey(k) &amp; " "<br>                    Next<br>                Next<br>                res(j) = res(j).Substring(0, res(j).Length - 1)<br>                j += 1<br>            End If<br>        Next<br>        res.Sort(res)<br>        Return res<br>    End Function<br>End Class<br></td>