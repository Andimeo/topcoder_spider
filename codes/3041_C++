<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;iostream&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cmath&gt;<br>using namespace std;<br>typedef vector&lt;int&gt; VI; typedef vector&lt;VI&gt; VVI;<br>typedef vector&lt;string&gt; VS; typedef vector&lt;VS&gt; VVS;<br>typedef long long i64; typedef unsigned long long u64;<br><br>VS tokenize(const string &amp;s, const string &amp;ch) {<br>  VS ret;<br>  for( int p = 0, p2; p &lt; s.size(); p = p2+1 ) {<br>    p2 = s.find_first_of(ch, p);<br>    if( p2 == -1 ) p2 = s.size();<br>    if( p2-p &gt; 0 ) ret.push_back(s.substr(p, p2-p));<br>    if( p2 &lt; s.size() ) ret.push_back(string(1, s[p2]));<br>  }<br>  return ret;<br>}<br><br>VS t;<br>VS ret;<br><br>void doit(int &amp;p, int x) {<br>  int i, j, k, p2;<br>  for( p2 = p+1; t[p2] != "&lt;"; p2++ );<br>  if( t[p2+1] == "/"+t[p+1] ) {<br>    ret.push_back(string(x, ' '));<br>    for( i = p; i &lt; p2+3; i++ ) ret.back() += t[i];<br>    p = p2+3;<br>    return;<br>  }<br>  ret.push_back(string(x, ' '));<br>  ret.back() += "&lt;"+t[p+1]+"&gt;";<br>  p2 = p+3;<br>  while( t[p2] != "&lt;" || t[p2+1] != "/"+t[p+1] ) {<br>    if( t[p2] != "&lt;" ) {<br>      ret.push_back(string(x+3, ' '));<br>      ret.back() += t[p2++];<br>    } else {<br>      doit(p2, x+3);<br>    }<br>  }<br>  ret.push_back(string(x, ' '));<br>  ret.back() += "&lt;/"+t[p+1]+"&gt;";<br>  p = p2+3;<br>}<br><br>class BadXML {<br>public:<br>vector &lt;string&gt; format(vector &lt;string&gt; doc) {<br>  string s;<br>  int i, j, k, x, y, z, n;<br><br>  for( i = 0; i &lt; doc.size(); i++ ) s += doc[i];<br>  t = tokenize(s, "&lt;&gt;");<br>  for( x = 0; x &lt; t.size(); ) doit(x, 0);<br>  return ret;<br>}<br>};<br><br><br>// Powered by FileEdit<br></td>