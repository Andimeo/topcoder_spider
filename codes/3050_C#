<td class="problemText" colspan="8" valign="middle" align="left">
            using System; using System.Collections; using System.Text; using System.Text.RegularExpressions;<br>public class SquareLanguage<br>   {<br>   public long howMany(int[] abs, int[] bbs, int[] cbs, int[] dbs)<br>      {<br>      long[] mins = new long[]{abs[0], bbs[0], cbs[0], dbs[0]};<br>      long[] maxs = new long[]{abs[1], bbs[1], cbs[1], dbs[1]};<br>      Hashtable map = new Hashtable();<br>      for (int mask=0; mask &lt; 256; mask++)<br>         {<br>         ArrayList ar = new ArrayList();<br>         String s = "";<br>         bool ok = true;<br>         for (int i=0; i &lt; 8; i++)<br>            if (TEST(mask,i))<br>               {<br>               char c = "abcdabcd"[i];<br>               long min = Math.Max(1, mins[i%4]);<br>               long max = maxs[i%4];<br>               if (s.Length &gt; 0 &amp;&amp; s[s.Length-1] == c)<br>                  {<br>                  ar[ar.Count-2] = (long)ar[ar.Count-2] + min;<br>                  ar[ar.Count-1] = (long)ar[ar.Count-1] + max;<br>                  }<br>               else<br>                  {<br>                  s += c; ar.Add(min); ar.Add(max);<br>                  }<br>               }<br>            else if (mins[i%4] &gt;0)<br>               ok = false;<br>         for (int i=0; i&lt;ar.Count; i += 2)<br>            if ((long)ar[i] &gt; (long)ar[i+1])<br>               ok = false;<br>         if (ok)<br>            {<br>            ArrayList ar2 = map[s] as ArrayList;<br>            if (ar2 == null) { ar2 = new ArrayList(); map.Add(s, ar2); }<br>            ar2.Add(ar.ToArray(typeof(long)));<br>            }<br>         }<br>      long tot=0;<br>      foreach (ArrayList ar in map.Values)<br>         tot += F(ar);<br>      return tot;<br>      }<br>   long F(ArrayList ar)<br>      {<br>      long tot=0;<br>      int N = ar.Count;<br>      for (int mask=1; mask &lt;= (1&lt;&lt;N)-1; mask++)<br>         {<br>         long[] range = null;<br>         for (int i=0; i &lt; N; i++) if (TEST(mask,i))<br>            if (range == null)<br>               range = (long[]) ((long[])ar[i]).Clone();<br>            else<br>               Intersect(range, (long[]) ar[i]);<br>         long prod=1;<br>         for (int i=0; i&lt;range.Length; i+=2)<br>            if (range[i+1] &lt; range[i])<br>               prod=0;<br>            else<br>               prod *= range[i+1]-range[i]+1;<br>         if (Odd(BC(mask))) tot += prod; else tot -= prod;<br>         }<br>      return tot;<br>      }<br>   void Intersect(long[] a, long[] b)<br>      {<br>      for (int i=0; i&lt;a.Length; i+=2)<br>         {<br>         long temp = b[i]; if (a[i] &lt; temp) a[i] = temp;<br>         long temp2 = b[i+1]; if (a[i+1] &gt; temp2) a[i+1] = temp2;<br>         }<br>      }<br><br><br>// Library begins here<br><br>static int BC(int x) { int tot=0; while (x&gt;0) { tot += (x&amp;1); x &gt;&gt;= 1; } return tot; }<br><br>static bool Odd (int x) { return (x&amp;1) != 0; }<br><br>static bool TEST  (int   x, int pos) { return (x&amp;(1&lt;&lt;pos))!=0; }<br><br>} // TopC#der<br><br><br>// Powered by FileEdit<br></td>