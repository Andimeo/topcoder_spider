<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;string&gt;  <br>#include &lt;vector&gt;  <br>#include &lt;iostream&gt;  <br>#include &lt;sstream&gt;  <br>#include &lt;map&gt;  <br>#include &lt;algorithm&gt;  <br>#include &lt;cmath&gt;  <br>#include &lt;stdio.h&gt;  <br>#include &lt;set&gt;  <br>#include &lt;list&gt;  <br>#include &lt;queue&gt;  <br>#include &lt;numeric&gt; <br>using namespace std; <br>typedef pair&lt;int,int&gt; ip; <br><br>class SquareLanguage <br>{<br>public:<br>  long long howMany(vector &lt;int&gt; abounds, vector &lt;int&gt; bbounds, vector &lt;int&gt; cbounds, vector &lt;int&gt; dbounds) {<br>    vector&lt;vector&lt;int&gt; &gt; v(4);<br>    v[0]=abounds;<br>    v[1]=bbounds;<br>    v[2]=cbounds;<br>    v[3]=dbounds;<br>    vector&lt;long long&gt; dup(4,0);<br>    long long TOT=1;<br>    TOT *= abounds[1]-abounds[0]+1;<br>    TOT *= abounds[1]-abounds[0]+1;<br>    TOT *= bbounds[1]-bbounds[0]+1;<br>    TOT *= bbounds[1]-bbounds[0]+1;<br>    TOT *= cbounds[1]-cbounds[0]+1;<br>    TOT *= cbounds[1]-cbounds[0]+1;<br>    TOT *= dbounds[1]-dbounds[0]+1;<br>    TOT *= dbounds[1]-dbounds[0]+1;<br><br>    for (int q=0;q&lt;4;q++){<br>      int s=0;<br>      for (int i=0;i&lt;4;i++)<br>  s+=v[i][0];<br>      if (s==v[q][0]){<br>  dup[q]=1;<br>  for (int i=0;i&lt;4;i++)<br>    if (i!=q) dup[q]*=v[i][1]-v[i][0]+1;<br>  dup[q]*=v[q][1]-v[q][0];<br>  dup[q]*=v[q][1]-v[q][0];<br>      }<br>    }<br>    return TOT - dup[0]-dup[1]-dup[2]-dup[3];<br>  }<br>};<br><br>// Powered by FileEdit<br><br><br>// Powered by FileEdit<br></td>