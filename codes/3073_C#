<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections;<br><br>public class HeartsGame <br>{<br>  <br>  int[,] cards = new int[4,13];<br>  char[,] suits = new char[4,13];<br>  char[] led = new char[13];<br>  int[] wholed = new int[13];<br>  int[] scores = new int[4];<br>  bool[] cheat = new bool[4];<br>  int heartsBroken = -1;<br>  int first = 0;<br>  bool isheart(int p,int i)<br>  {<br>    return suits[p,i] == 'H';<br>  }<br>  bool ispointhand(int p,int i)<br>  {<br>    return suits[p,i] == 'H' || suits[p,i] == 'S' &amp;&amp; cards[p,i] == 12;<br>  }<br>  public string[] score(string[] tricks) <br>  {<br>    heartsBroken = -1;<br>    for(int i=0;i&lt;tricks.Length;i++)<br>    {<br>      string[] c = tricks[i].Split(new char[]{' '});<br>      update(c,i);<br>    }<br>    for(int p = 0;p&lt;4;p++)<br>    {<br>      for(int i=0;i&lt;13;i++)<br>      {<br>        //no hearts until broken<br>        if(isheart(p,i) &amp;&amp; wholed[i] == p &amp;&amp; heartsBroken &gt;= i)<br>        {<br>          for(int j=i+1;j&lt;13;j++)<br>          {<br>            if(!isheart(p,j)) <br>            {<br>      //        Console.WriteLine("player " + p + " cheated by leading hearts without it being broken");<br>              cheat[p] = true;<br>            }<br>          }<br>        }<br>        //played a point card<br>        if(ispointhand(p,i) &amp;&amp; i == 0)<br>        {<br>          for(int j=i+1;j&lt;13;j++)<br>          {<br>            if(!ispointhand(p,j)) <br>            {<br>              cheat[p] = true;<br>    //          Console.WriteLine("player " + p + " cheated by playing points on the first turn");<br>            }<br>          }<br>        }<br>        //follow suit<br>        if(led[i] != suits[p,i])<br>        {<br>          for(int j=i+1;j&lt;13;j++)<br>          {<br>            if(suits[p,j] == led[i])<br>            {<br>              cheat[p] = true;<br>      //        Console.WriteLine("player " + p + " cheated by not following suit.");<br>            }<br>          }<br>        }<br>      }<br>    }<br>    for(int i=0;i&lt;4;i++)<br>    {<br>      if(scores[i] == 26)<br>      {<br>        for(int j=0;j&lt;4;j++)<br>        {<br>          if(i == j) scores[j] = 0; else scores[j] = 26;<br>        }<br>        break;<br>      }<br>    }<br>    string[] ret = new string[4];<br>    for(int i=0;i&lt;4;i++) <br>    {<br>      if(cheat[i]) <br>        ret[i] = "CHEATER!";<br>      else<br>        ret[i] = "" + scores[i];<br>    }<br>    return ret;<br>  }<br><br>  void update(string[] c,int hand)<br>  {<br>    wholed[hand] = first;<br>    bool h = false;<br>    char suit = c[0][0];<br>    led[hand] = suit;<br>    int highest = 0;<br>    for(int i=0;i&lt;4;i++)<br>    {<br>      if(c[i][0] == 'H')<br>      {<br>    //    Console.WriteLine("hearts broken at ");<br>        h = true;<br>      }<br>      if(c[i][0] == suit &amp;&amp; rank(c[i][1]) &gt; rank(c[highest][1]))<br>      {<br>        highest = i;<br>      }<br>      setcard(c[i], i, hand);<br>    }<br>    <br>    if(h &amp;&amp; heartsBroken == -1) <br>    {<br>      heartsBroken = hand;<br>  //    Console.WriteLine("hearts broken at " + heartsBroken);<br>    }<br><br>    first = (first + highest) %4;<br>  //  Console.WriteLine("first is " + (first+1));<br>    for(int i=0;i&lt;4;i++)<br>      scores[first] += score(c[i]);<br>  }<br>  void setcard(string card,int player,int hand)<br>  {<br>    player = (first + player)% 4;<br>    cards[player,hand] = rank(card[1]);<br>    suits[player,hand] = card[0];<br>  }<br>  int rank(char val)<br>  {<br>    if(val == 'A') return 14;<br>    if(val == 'K') return 13;<br>    if(val == 'Q') return 12;<br>    if(val == 'J') return 11;<br>    if(val == 'T') return 10;<br>    return val - '0';<br>  }<br>  int score(string card)<br>  {<br>    if(card == "SQ") return 13;<br>    if(card[0] == 'H') return 1;<br>    return 0;<br>  }<br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by CodeProcessor<br></td>