<td class="problemText" colspan="8" valign="middle" align="left">
            using System; using System.Collections; using System.Text; using System.Text.RegularExpressions;<br>public class RectangleDivision { public int count(int a_, int b_) {<br>a=a_; b=b_;<br> <br>if (a==1) return b-1;<br> <br>int tot=0;<br> <br>a2=a+2; b2=b+2;<br>int I = (a-2)*(b-2);<br>int P = a*b - I;<br>long[] perim = new long[P];<br>for (int x=0; x&lt;b; x++) perim[x] |= (long)1 &lt;&lt; ((x+1)*8+1);<br>for (int x=0; x&lt;b; x++) perim[x+a+b-2] |= (long)1 &lt;&lt; ((b-x)*8+a);<br>for (int y=0; y&lt;a; y++) perim[y+b-1] |= (long)1 &lt;&lt; (b*8+y+1);<br>for (int y=0; y&lt;a-1; y++) perim[y+b+b+a-3] |= (long)1 &lt;&lt; (8+(a-y));<br> <br>foreach (long xx in perim) Console.WriteLine("{0:X}", xx);<br>//WL();<br> <br>long ALL=0;<br>for (int x=1; x&lt;=b; x++) for (int y=1; y&lt;=a; y++) ALL |= (long)1 &lt;&lt; (x*8+y);<br>//Console.WriteLine("{0:X}", ALL);<br> <br>for (int p=1; p&lt;P; p++) for (int q=1; q&lt;=P-p; q++)<br>{<br>long PP=0;<br>for (int r=p; r&lt;p+q; r++) PP |= perim[r];<br>long QQ=0;<br>for (int r=0; r&lt;p; r++) QQ |= perim[r];<br>for (int r=p+q+1; r&lt;P; r++) QQ |= perim[r];<br> <br>long row = (1&lt;&lt;(a-2))-1;<br>long B=PP;<br>long BB = (long)1 &lt;&lt; 2+16;<br>for (int M=0; M&lt;(1&lt;&lt;(I)); M++)<br> {<br> if ((M&amp;1) == 0)<br>  { B=PP; for (int x=0; x&lt;b-2; x++) B |= (long)((M&gt;&gt;x*(a-2)) &amp; row) &lt;&lt; 2+16+(8*x); }<br> else<br>  B |= BB;<br> <br> //for (int x=0; x&lt;a-2; x++) for (int y=0; y&lt;b-2; y++) if (Test(M,x*b+y))<br> // B += (long)1 &lt;&lt; ((x+2)*8+(y+2));<br> <br> long C=Flood(B, PP);<br> if (C!=B)<br>  {<br>  //Console.WriteLine("a {0} {1} {2:X} {3:X}", p,q,B,C);<br>  continue;<br>  }<br> <br> long B2 = ALL-B;<br> C = Flood(B2, QQ);<br> if (C!=B2)<br>  {<br>  //Console.WriteLine("b {0} {1} {2:X} {3:X} {4:X} {5:X}", p,q,B2,C,PP,QQ);<br>  continue;<br>  }<br> <br> tot++;<br> }<br>}<br> <br>return tot;<br>}<br> <br> <br>int a,b,a2,b2;<br>long Flood(long B, long C)<br>{<br>//int T=a*b;<br>while (true) //for (int t=0; t&lt;T; t++)<br> {<br> long D = (C&gt;&gt;1)|(C&lt;&lt;1)|(C&lt;&lt;8)|(C&gt;&gt;8);<br> long C2 = C | (D&amp;B);<br> if(C2==C) break;<br> C=C2;<br> }<br> <br>return C;<br>}<br> <br> <br>bool Test(int x, int y) { return (x&amp;(1&lt;&lt;y))!=0; }<br> <br>ArrayList AR { get { return new ArrayList(); }}<br>Hashtable MAP { get { return new Hashtable(); }}<br> <br>int[] IA(ArrayList ar) { return (int[]) ar.ToArray(typeof(int)); }<br>string[] SA(ArrayList ar) { return (string[]) ar.ToArray(typeof(String)); }<br> <br>int INT(Object o) { return Convert.ToInt32(o.ToString()); }<br>long LONG(Object o) { return Convert.ToInt64(o.ToString()); }<br>double DOUBLE(Object o) { return Convert.ToDouble(o.ToString()); }<br> <br>bool NextPerm(int[] a)<br>{<br>int N=a.Length;<br>for (int i=N-2; i&gt;=0; i--) if (a[i]&lt;a[i+1])<br> {<br> Array.Reverse(a, i+1, N-i-1);<br> for (int j=i+1; ; j++) if (a[i] &lt; a[j])<br>  { int t=a[i]; a[i]=a[j]; a[j]=t; return true; }<br> }<br> <br>return false;<br>}<br> <br>void WL() { Console.WriteLine(""); }<br>void WS(params Object[] a) { foreach (Object x in a) Console.Write("{0} ", x); }<br>void WSL(params Object[] a) { WS(a); WL(); }<br>void WS(Array a, int X) { for (int x=0; x&lt;X; x++) WS(a.GetValue(x)); WL(); }<br>void WS(Array a, int X, int Y) { for (int y=0; y&lt;Y; y++) { for (int x=0; x&lt;X; x++) WS(a.GetValue(x,y)); WL(); }}<br> <br>}<br></td>