<td class="problemText" colspan="8" valign="middle" align="left">
            using namespace std;<br>#include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;stdio.h&gt;<br>#include &lt;stdlib.h&gt;<br>#include &lt;string.h&gt;<br>#include &lt;ctype.h&gt;<br>#include &lt;stack&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;queue&gt;<br>#include &lt;iostream&gt;<br>#include &lt;sstream&gt;<br>typedef long long I64;<br>typedef pair&lt;int,int&gt; PII;<br>typedef vector&lt;int&gt; VI;<br>typedef vector&lt;string&gt; VS;<br>typedef vector&lt;double&gt; VD;<br>typedef vector&lt;PII&gt; VPII;<br>#define FOR(i,n) for(int i=0;i&lt;(n);i++)<br>#define VAR(a,b) __typeof(b) a=b<br>#define FORIT(it,c) for(VAR(it,(c).begin());it!=(c).end();it++)<br>#define ALL(x) (x).begin(),(x).end()<br> <br>struct CafeteriaImpl {<br>    vector &lt;int&gt; offset;<br>    vector &lt;int&gt; walkingTime;<br>    vector &lt;int&gt; drivingTime;<br>    CafeteriaImpl(vector &lt;int&gt; _offset,vector &lt;int&gt; _walkingTime,vector &lt;int&gt; _drivingTime) {<br>        offset = _offset;<br>        walkingTime = _walkingTime;<br>        drivingTime = _drivingTime;<br>    }<br> <br>    string latestTime() {<br>        int targ = 14*60+30;<br>        int best = 0;<br> <br>        FOR(i,offset.size()) {<br>            int t = targ - drivingTime[i];<br>            while(t%10 != offset[i]) t--;<br>            t -= walkingTime[i];<br>            best &gt;?= t;<br>        }<br> <br>        int h = (best / 60) % 12;<br>        if(h==0) h = 12;<br>        int m = best % 60;<br> <br>        char ans[20];<br>        sprintf(ans,"%02d:%02d",h,m);<br> <br>        return ans;<br>    };<br>};<br> <br> <br>struct Cafeteria {<br>    string latestTime(vector &lt;int&gt; offset,vector &lt;int&gt; walkingTime,vector &lt;int&gt; drivingTime) {<br>        CafeteriaImpl impl(offset,walkingTime,drivingTime);<br>        return impl.latestTime();<br>    }<br> <br>};<br> <br> <br> <br> <br>// Powered by FileEdit<br>// Powered by CodeProcessor<br></td>