<td class="problemText" colspan="8" valign="middle" align="left">
            using System; using System.Collections; using System.Text; using System.Text.RegularExpressions;<br>public class CubeSum { public int count(int N) {<br>int t=0;<br>for (int i=0; i&lt;K; i++) for (int j=i; j&lt;K; j++) for (int k=j; k&lt;K; k++)<br> {<br> int s = i*i*i + j*j*j + k*k*k;<br> if (s&gt;N) continue;<br> int l = CR(N-s);<br> if (l &lt; k) continue;<br> if (s + l*l*l == N) t++;<br> }<br> <br>WS(K*K*K);<br>return t;<br>}<br> <br>int CR(int x)<br>{<br>int min=0, max=K;<br>while (max &gt; min)<br> {<br> int mid = (max+min)/2;<br> int y = mid*mid*mid;<br> if (y == x) return mid;<br> if (y &gt; x) max = mid-1; else min = mid+1;<br> }<br> <br>return min;<br>}<br> <br>int K=500;<br> <br>bool Test(int x, int y) { return (x &amp; (1&lt;&lt;y)) != 0; }<br> <br>ArrayList AR { get { return new ArrayList(); }}<br>Hashtable MAP { get { return new Hashtable(); }}<br> <br>int[] IA(ArrayList ar) { return (int[]) ar.ToArray(typeof(int)); }<br>string[] SA(ArrayList ar) { return (string[]) ar.ToArray(typeof(string)); }<br> <br>int INT(Object o) { return Convert.ToInt32(o.ToString()); }<br>long LONG(Object o) { return Convert.ToInt64(o.ToString()); }<br>double DOUBLE(Object o) { return Convert.ToDouble(o.ToString()); }<br> <br>void WL() { Console.WriteLine(); }<br>void WS(params Object[] a) { foreach (Object o in a) Console.Write("{0} ", o); }<br>void WSL(params Object[] a) { WS(a); WL(); }<br>void WS(Array a, int X) { for (int i=0; i&lt;X; i++) WS(a.GetValue(i)); WL(); }<br>void WS(Array a, int X, int Y) { for (int y=0; y&lt;Y; y++) { for (int x=0; x&lt;X; x++) WS(a.GetValue(x,y)); WL(); }}<br> <br>bool NextPerm(int[] a)<br>{<br>int N=a.Length;<br>for (int i=N-2; i&gt;=0; i--) if (a[i] &lt; a[i+1])<br> {<br> Array.Reverse(a, i+1, N-i-1);<br> for (int j=i+1; ; j++) if (a[i] &lt; a[j]) { int t=a[i]; a[i]=a[j]; a[j]=t; return true; }<br> }<br>return false;<br>}<br> <br>}<br></td>