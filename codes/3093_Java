<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br><br>public class PermissionTree {<br>  private List[] folderChilds;<br>  private Set[] folderUsers;<br><br>  public int[] findHome(String[] folders, String[] users)  {<br>    folderChilds = new List[folders.length];<br>    for (int i = 0; i &lt; folders.length; ++i)<br>      folderChilds[i] = new ArrayList();<br>    folderUsers = new Set[folders.length];<br>    for (int i = 0; i &lt; folders.length; ++i) {<br>      String folder = folders[i];<br>      int folderParent = Integer.parseInt(folder.substring(0, folder.indexOf(' ')));<br>      if (i != 0)<br>        folderChilds[folderParent].add(new Integer(i));<br><br>      String[] u = folder.substring(folder.indexOf(' ')).trim().split(",");<br>      folderUsers[i] = new HashSet();<br>      for (int j = 0; j &lt; u.length; ++j)<br>        folderUsers[i].add(u[j]);<br>    }<br><br>    int[] result = new int[users.length];<br>    for (int i = 0; i &lt; users.length; ++i) {<br>      int[] maxCount = new int[] { 0 };<br>      int[] maxFolder = new int[] { -1 };<br>      recursion(users[i], 0, maxCount, maxFolder);<br>      result[i] = maxFolder[0];<br>    }<br>    return result;<br>  }<br><br><br>  private int recursion(String user, int folder, int maxCount[], int maxFolder[]) {<br>    int count = 0;<br>    for (int i = 0; i &lt; folderChilds[folder].size(); ++i) {<br>      int childFolder = ((Integer)folderChilds[folder].get(i)).intValue();<br>      count += recursion(user, childFolder, maxCount, maxFolder);<br>    }<br>    if (folderUsers[folder].contains(user))<br>      ++count;<br>    if (count &gt; maxCount[0]) {<br>      maxCount[0] = count;<br>      maxFolder[0] = folder;<br>    }<br>    return count;<br>  }<br><br><br>  public static void main(String[] args)  {<br>    try {<br>            eq(0,(new PermissionTree()).findHome(new String[] {"0 Admin", "0 Joe,Phil", "0 Joe"}, new String[] {"Admin", "Joe", "Phil"}),new int[] { 0,  0,  1 });<br>            eq(1,(new PermissionTree()).findHome(new String[] {"0 Admin"}, new String[] {"Peter", "Paul", "Mary"}),new int[] { -1,  -1,  -1 });<br>            eq(2,(new PermissionTree()).findHome(new String[] {"0 Admin", "2 John", "0 Peter,John", "0 Tim", "1 John"}, new String[] {"John"}),new int[] { 2 });<br>            eq(3,(new PermissionTree()).findHome(new String[] {"0 Admin",<br>               "0 Jeff", "1 Mark,Tim", "1 Tim,Jeff",<br>               "0 Dan", "4 Ed", "4 Tom", "4 Kyle,Ed",<br>               "0 Ben", "8 Rich", "8 Sam", "8 Tim"}, new String[] {"Jeff", "Ed", "Tim", "Steve"}),new int[] { 1,  4,  0,  -1 });<br>            eq(4,(new PermissionTree()).findHome(new String[] {"0 Admin", "0 Bob,Joe,Bob", "0 Joe"}, new String[] {"Joe", "Bob"}),new int[] { 0,  1 });<br>    }<br>    catch( Exception exx)  {<br>      System.err.println(exx);<br>      exx.printStackTrace(System.err);<br>    }<br>  }<br><br><br>    private static void eq( int n, int a, int b ) {<br>        if ( a==b )<br>            System.err.println("Case "+n+" passed.");<br>        else<br>            System.err.println("Case "+n+" failed: expected "+b+", received "+a+".");<br>    }<br>    private static void eq( int n, char a, char b ) {<br>        if ( a==b )<br>            System.err.println("Case "+n+" passed.");<br>        else<br>            System.err.println("Case "+n+" failed: expected '"+b+"', received '"+a+"'.");<br>    }<br>    private static void eq( int n, long a, long b ) {<br>        if ( a==b )<br>            System.err.println("Case "+n+" passed.");<br>        else<br>            System.err.println("Case "+n+" failed: expected \""+b+"L, received "+a+"L.");<br>    }<br>    private static void eq( int n, boolean a, boolean b ) {<br>        if ( a==b )<br>            System.err.println("Case "+n+" passed.");<br>        else<br>            System.err.println("Case "+n+" failed: expected "+b+", received "+a+".");<br>    }<br>    private static void eq( int n, String a, String b ) {<br>        if ( a != null &amp;&amp; a.equals(b) )<br>            System.err.println("Case "+n+" passed.");<br>        else<br>            System.err.println("Case "+n+" failed: expected \""+b+"\", received \""+a+"\".");<br>    }<br>    private static void eq( int n, int[] a, int[] b ) {<br>        if ( a.length != b.length ) {<br>            System.err.println("Case "+n+" failed: returned "+a.length+" elements; expected "+b.length+" elements.");<br>            return;<br>        }<br>        for ( int i= 0; i &lt; a.length; i++)<br>            if ( a[i] != b[i] ) {<br>                System.err.println("Case "+n+" failed. Expected and returned array differ in position "+i);<br>                print( b );<br>                print( a );<br>                return;<br>            }<br>        System.err.println("Case "+n+" passed.");<br>    }<br>    private static void eq( int n, long[] a, long[] b ) {<br>        if ( a.length != b.length ) {<br>            System.err.println("Case "+n+" failed: returned "+a.length+" elements; expected "+b.length+" elements.");<br>            return;<br>        }<br>        for ( int i= 0; i &lt; a.length; i++ )<br>            if ( a[i] != b[i] ) {<br>                System.err.println("Case "+n+" failed. Expected and returned array differ in position "+i);<br>                print( b );<br>                print( a );<br>                return;<br>            }<br>        System.err.println("Case "+n+" passed.");<br>    }<br>    private static void eq( int n, String[] a, String[] b ) {<br>        if ( a.length != b.length) {<br>            System.err.println("Case "+n+" failed: returned "+a.length+" elements; expected "+b.length+" elements.");<br>            return;<br>        }<br>        for ( int i= 0; i &lt; a.length; i++ )<br>            if( !a[i].equals( b[i])) {<br>                System.err.println("Case "+n+" failed. Expected and returned array differ in position "+i);<br>                print( b );<br>                print( a );<br>                return;<br>            }<br>        System.err.println("Case "+n+" passed.");<br>    }<br>    private static void print( int a ) {<br>        System.err.print(a+" ");<br>    }<br>    private static void print( long a ) {<br>        System.err.print(a+"L ");<br>    }<br>    private static void print( String s ) {<br>        System.err.print("\""+s+"\" ");<br>    }<br>    private static void print( int[] rs ) {<br>        if ( rs == null) return;<br>        System.err.print('{');<br>        for ( int i= 0; i &lt; rs.length; i++ ) {<br>            System.err.print(rs[i]);<br>            if ( i != rs.length-1 )<br>                System.err.print(", ");<br>        }<br>        System.err.println('}');<br>    }<br>    private static void print( long[] rs) {<br>        if ( rs == null ) return;<br>        System.err.print('{');<br>        for ( int i= 0; i &lt; rs.length; i++ ) {<br>            System.err.print(rs[i]);<br>            if ( i != rs.length-1 )<br>                System.err.print(", ");<br>        }<br>        System.err.println('}');<br>    }<br>    private static void print( String[] rs ) {<br>        if ( rs == null ) return;<br>        System.err.print('{');<br>        for ( int i= 0; i &lt; rs.length; i++ ) {<br>            System.err.print( "\""+rs[i]+"\"" );<br>            if( i != rs.length-1)<br>                System.err.print(", ");<br>        }<br>        System.err.println('}');<br>    }<br>    private static void nl() {<br>        System.err.println();<br>    }<br>}<br><br><br>// Powered by FileEdit<br>// Powered by CodeProcessor<br></td>