<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;iostream&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;sstream&gt;<br><br>#include &lt;cstdio&gt;<br>#include &lt;cstdlib&gt;<br><br>#include &lt;cmath&gt;<br><br>#include &lt;functional&gt;<br>#include &lt;numeric&gt;<br>#include &lt;cctype&gt;<br>#include &lt;climits&gt;<br><br>#include &lt;queue&gt;<br>#include &lt;map&gt;<br><br>using namespace std;<br><br>typedef vector&lt;string&gt; VS;<br>typedef vector&lt;vector&lt;string&gt; &gt; VSS;<br>typedef vector&lt;int&gt; VI;<br>typedef vector&lt;vector&lt;int&gt; &gt; VII;<br>typedef vector&lt;vector&lt;vector&lt;int&gt; &gt; &gt; VIII;<br>typedef unsigned long long u64;<br>typedef signed long long i64;<br>typedef long double ld;<br><br>#define ALL(S) (S).begin(), (S).end()<br>#define SORT(S) sort(ALL(S))<br>#define UNIQUE(S) (S).erase(unique((S).begin(), (S).end()), (S).end())<br>#define REV(S) reverse(ALL(S))<br><br>#define si size()<br>#define cs c_str()<br>#define pb(x) push_back((x))<br>#define mp make_pair<br><br>#define fi(i,S) for (int i=0;i&lt;(S);i++)<br>#define fd(i,S) for (int i=(S)-1;i&gt;=0;i--)<br>#define ftype(i,S,T) for (typeof(T) i = (S); i != (T); i++)<br>#define foreach(i,S) ftype(i,(S).begin(),(S).end())<br><br>#define debug(x) cerr &lt;&lt; #x &lt;&lt; " = " &lt;&lt; x &lt;&lt; endl<br><br>template &lt;class T&gt; ostream&amp; operator&lt;&lt;(ostream&amp; os, vector&lt;T&gt; v) <br>{<br>  os &lt;&lt; "{"; fi(i,v.si) os &lt;&lt; (i?", ":"") &lt;&lt; v[i]; os &lt;&lt; "}";<br>  return os;<br>}<br>template&lt;class S,class T&gt; ostream&amp; operator&lt;&lt;(ostream &amp;os, const pair&lt;S,T&gt; &amp;p) <br>{<br>  os &lt;&lt; "[" &lt;&lt; p.first &lt;&lt; ", " &lt;&lt; p.second &lt;&lt; "]";<br>  return os;<br>}<br><br>template&lt;class T&gt; string tostr(T a)<br>{<br>  char buf[10];<br>  sprintf(buf,"%03d",a);<br>  return string(buf);<br>}<br><br>int go(char c)<br>{<br>  if (c==' ') return 0;<br>  if ('A'&lt;=c &amp;&amp; c&lt;='Z') return c-'A'+1;<br>  if ('a'&lt;=c &amp;&amp; c&lt;='z') return c-'a'+27;<br>  if ('0'&lt;=c &amp;&amp; c&lt;='9') return c-'0'+53;<br>  return 0;<br>}<br><br>class ImageSteganography {<br>  public:<br>  vector &lt;string&gt; encode(vector &lt;string&gt; image, string message) <br>  {<br>    VS ret;<br>    string s,cur;<br>    int idx=0,pos=0,val,t,mval;<br>    fi(i,message.si)<br>    {<br>      val=go(message[i]);<br><br>      t=val&amp;3;<br>      s=image[idx].substr(pos,3);<br>      pos+=3;<br>      mval=atoi(s.cs);<br>      mval&amp;=(255-3);<br>      mval|=t;<br>      cur+=tostr(mval);<br>      <br>      if (pos==image[idx].si)<br>      {<br>        ret.pb(cur);cur="";<br>        idx++;<br>        pos=0;<br>      }<br><br>      t=val&amp;12;t&gt;&gt;=2;<br>      s=image[idx].substr(pos,3);<br>      pos+=3;<br>      mval=atoi(s.cs);<br>      mval&amp;=(255-3);<br>      mval|=t;<br>      cur+=tostr(mval);<br>      <br>      if (pos==image[idx].si)<br>      {<br>        ret.pb(cur);cur="";<br>        idx++;<br>        pos=0;<br>      }<br><br>      t=val&amp;48;t&gt;&gt;=4;<br>      s=image[idx].substr(pos,3);<br>      pos+=3;<br>      mval=atoi(s.cs);<br>      mval&amp;=(255-3);<br>      mval|=t;<br>      cur+=tostr(mval);<br>      <br>      if (pos==image[idx].si)<br>      {<br>        ret.pb(cur);cur="";<br>        idx++;<br>        pos=0;<br>      }<br>    }<br>    while(idx&lt;image.si)<br>    {<br>      s=image[idx].substr(pos,3);<br>      pos+=3;<br>      mval=atoi(s.cs);<br>      mval|=3;<br>      cur+=tostr(mval);<br>      if (pos==image[idx].si)<br>      {<br>        ret.pb(cur);cur="";<br>        idx++;<br>        pos=0;<br>      }<br>      if (idx&gt;=image.si) break;<br>      s=image[idx].substr(pos,3);<br>      pos+=3;<br>      mval=atoi(s.cs);<br>      mval|=3;<br>      cur+=tostr(mval);<br>      if (pos==image[idx].si)<br>      {<br>        ret.pb(cur);cur="";<br>        idx++;<br>        pos=0;<br>      }<br>      if (idx&gt;=image.si) break;<br>      s=image[idx].substr(pos,3);<br>      pos+=3;<br>      mval=atoi(s.cs);<br>      mval|=3;<br>      cur+=tostr(mval);<br>      if (pos==image[idx].si)<br>      {<br>        ret.pb(cur);cur="";<br>        idx++;<br>        pos=0;<br>      }<br>      if (idx&gt;=image.si) break;<br>    }<br>    return ret;<br>  }<br><br><br>};<br><br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003]<br>// Powered by CodeProcessor<br></td>