<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>import java.util.regex.*;<br>import java.text.*;<br>import java.math.*;<br>public class DFAReversal {<br>  public int reverse(String[] dfa, int[] accept) {<br>    StringTokenizer st = new StringTokenizer(dfa[0]);<br>    int n = st.countTokens();<br>    boolean[] done = new boolean[1&lt;&lt;dfa.length];<br>    int[][] rev = new int[dfa.length][n];<br>    for(int i = 0; i &lt; dfa.length; i++){<br>      st = new StringTokenizer(dfa[i]);<br>      for(int j = 0; j &lt; n; j++){<br>        int to = Integer.parseInt(st.nextToken());<br>        rev[to][j] |= (1&lt;&lt;i);<br>      }<br>    }<br>    int start = 0;<br>    for(int i = 0; i &lt; accept.length; i++){<br>      start |= (1&lt;&lt;accept[i]);<br>    }<br>    int ret = 1;<br>    done[start] = true;<br>    LinkedList que = new LinkedList();<br>    que.add(new Integer(start));<br>    while(que.size() &gt; 0){<br>      int at = ((Integer)que.removeFirst()).intValue();<br>      for(int i = 0; i &lt; n; i++){<br>        int next = 0;<br>        for(int j = 0; j &lt; rev.length; j++){<br>          if(((1&lt;&lt;j)&amp;at)==0)continue;<br>          next |= rev[j][i];<br>        }<br>        if(done[next])continue;<br>        done[next] = true;<br>        que.add(new Integer(next));<br>        ret++;<br>      }<br>    }<br>    return ret;<br>  }<br> <br>}<br> <br>// Powered by PopsEdit<br>// Powered by CodeProcessor<br></td>