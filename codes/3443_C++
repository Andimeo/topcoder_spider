<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;string&gt;<br>#include &lt;vector&gt;<br>using namespace std;<br> <br>class OneArmedBandit<br>{<br>  double chanceWin( vector&lt; string &gt; wheels, string target )<br>  {<br>    int iReels = wheels.size( );<br>    double dChance = 1.0;<br> <br>    for( int r = 0; r &lt; iReels; ++r )<br>    {<br>      if( target[r] != '-' )<br>      {<br>        int iPoss = 0;<br>        for( int i = 0; i &lt; wheels[r].length( ); ++i )<br>          if( wheels[r][i] == target[r] )<br>            ++iPoss;<br>        dChance *= ( double ) iPoss / ( double ) wheels[r].length( );<br>      }<br>    }<br>    return dChance;<br>  }<br> <br>public:<br>  double progressiveJackpot(vector &lt;string&gt; wheels, string jackpotLine, vector &lt;string&gt; payoffTable)<br>  {<br>    double dExp = 0.0;<br>    for( int i = 0; i &lt; payoffTable.size( ); ++i )<br>    {<br>      string target = payoffTable[i].substr(0,payoffTable[i].find(" "));<br>      string wins  = payoffTable[i].substr(payoffTable[i].find(" ")+1);<br>      double dLineValue = chanceWin( wheels, target ) * atof( wins.c_str( ) );<br>      dExp += dLineValue;<br>    }<br>    if( dExp &gt;= 1.0 )<br>      return 0.0;<br>    if( chanceWin( wheels, jackpotLine ) == 0.0 )<br>      return -1.0;<br>    dExp = 1.0 - dExp;<br>    dExp /= chanceWin( wheels, jackpotLine );<br>    return dExp;<br>  }<br>};<br></td>