<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Text;<br>using System.Text.RegularExpressions;<br>using System.Collections;<br>using System.Collections.Specialized;<br><br>public class WalkingHome {<br>    public WalkingHome() {<br>       // Life is Good !!<br>    }<br>    public int fewestCrossings(string[] map)<br>    {<br>        int X = map.Length;<br>        int Y = map[0].Length;<br>        // 0 -   1 |<br>        int[, ,] path = new int[X, Y, 2];<br>        for (int i = 0; i &lt; X; i++)<br>            for (int ii = 0; ii &lt; Y; ii++)<br>                for (int iii = 0; iii &lt; 2; iii++)<br>                    path[i, ii, iii] = int.MaxValue / 2;<br><br>        for (int i = 0; i &lt; X; i++)<br>            for (int ii = 0; ii &lt; Y; ii++)<br>                if (map[i][ii] == 'H')<br>                {<br>                    path[i, ii, 0] = 0;<br>                    path[i, ii, 1] = 0;<br>                }<br><br>        int res = int.MaxValue;<br>        bool found = true;<br>        while (found)<br>        {<br>            found = false;<br>            for (int i = 0; i &lt; X; i++)<br>                for (int ii = 0; ii &lt; Y; ii++)<br>                    for (int iii = 0; iii &lt; 2; iii++)<br>                    {<br>                        if (map[i][ii] == 'F') continue;<br>                        if (map[i][ii] == '*') continue;<br>                        if (map[i][ii] == '|' &amp;&amp; iii != 1) continue;<br>                        if (map[i][ii] == '-' &amp;&amp; iii != 0) continue;<br><br>                        int K = 0;<br>                        if (map[i][ii] == '-' || map[i][ii] == '|')<br>                        {<br>                            K = 1;<br>                        }<br><br>                        if (iii == 0) // X +- 1 <br>                        {<br>                            int Z = K;<br><br>                            if (i &gt; 0)<br>                            {<br>                                if (map[i - 1][ii] == '-' || map[i - 1][ii] == '|') Z = 0;<br>                                if (path[i - 1, ii, iii] + Z &lt; path[i, ii, iii])<br>                                {<br><br>                                    path[i, ii, iii] = path[i - 1, ii, iii] + Z;<br>                                    found = true;<br>                                }<br>                            }<br>                            Z = K;<br>                            if (i + 1 &lt; X)<br>                            {<br>                                if (map[i + 1][ii] == '-' || map[i + 1][ii] == '|') Z = 0;<br>                                if (path[i + 1, ii, iii] + Z &lt; path[i, ii, iii])<br>                                {<br>                                    path[i, ii, iii] = path[i + 1, ii, iii] + Z;<br>                                    found = true;<br>                                }<br>                            }<br>                        }<br>                        else<br>                        {<br>                            int Z = K;<br><br>                            if (ii &gt; 0)<br>                            {<br>                                if (map[i][ii-1] == '-' || map[i][ii-1] == '|') Z = 0;<br>                                if (path[i, ii - 1, iii] + Z &lt; path[i, ii, iii])<br>                                {<br>                                    path[i, ii, iii] = path[i, ii - 1, iii] + Z;<br>                                    found = true;<br>                                }<br>                            }<br>                            Z = K;<br>                            if (ii + 1 &lt; Y)<br>                            {<br>                                if (map[i][ii + 1] == '-' || map[i][ii + 1] == '|') Z = 0;<br>                                if (path[i, ii + 1, iii] + Z &lt; path[i, ii, iii])<br>                                {<br>                                    path[i, ii, iii] = path[i, ii + 1, iii] + Z;<br>                                    found = true;<br>                                }<br>                            }<br>                        }<br>                        if (map[i][ii] == '.' || map[i][ii] == 'S' || map[i][ii] == 'H')<br>                        {<br>                            if (path[i, ii, 1 - iii] &lt; path[i, ii, iii])<br>                            {<br>                                path[i, ii, iii] = path[i, ii, 1 - iii];<br>                                found = true;<br>                            }<br>                        }<br>                        if (map[i][ii] == 'S')<br>                        {<br>                            res = Math.Min(res, path[i, ii, iii]);<br>                        }<br>                    }<br>        }<br>        if (res &gt;= int.MaxValue / 2) return -1;<br>        return res;<br>    }<br><br><br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by CodeProcessor<br></td>