<td class="problemText" colspan="8" valign="middle" align="left">
            // Warning: Challenging may cause loss of 25 points.<br>// I'm now automatically removing unused stuff.<br><br>#include &lt;algorithm&gt;<br>#include &lt;string&gt;<br>#include &lt;vector&gt;<br>using namespace std;<br><br>#define LS &lt;<br>#define Size(x) (int(x.size()))<br>#define LET(k,val) typeof(val) k = (val)<br>// execute "act", and return "val" as an expression result<br>#define CLC(act,val) (*({act; static typeof(val) CLCR; CLCR = (val); &amp;CLCR;}))<br><br>// All macros with parameters "k,a,b" run the "k" variable in range [a,b)<br>#define FOR(k,a,b) for(typeof(a) k=(a); k LS (b); ++k)<br><br>// Standard mathematical quantifiers, plus tools to implement them<br>// note: the range has to be non-empty here<br>#define FOLD1(k,a,b,init,act) CLC(LET(k, a); LET(R##k, init); for(++k; k LS (b); ++k) act, R##k)<br>#define MIN(k,a,b,x) FOLD1(k,a,b,x, R##k &lt;?= (x))<br><br>#line 3 "Triptych.cc"<br><br>#define INFF 1000000<br><br>int cost[50][50];<br><br>class Triptych {<br>  public:<br>  int minCost(vector &lt;string&gt; fares, vector &lt;int&gt; destinations) {<br>    // !FDI<br>    int K = Size(fares);<br><br>    FOR(k,0,K) FOR(l,0,K) <br>      if(fares[k][l]=='-') cost[k][l] = INFF;<br>      else cost[k][l] = fares[k][l] - '0';<br>    FOR(k,0,K) cost[k][k] = 0;<br><br>    FOR(k,0,K) FOR(i,0,K) FOR(j,0,K)<br>      cost[i][j] &lt;?= cost[i][k] + cost[k][j];<br><br><br>    int d0 = destinations[0];<br>    int d1 = destinations[1];<br>    int d2 = destinations[2];<br>    int cst = MIN(a,0,K, MIN(b,0,K, <br>      cost[a][d0] + cost[a][d1] + cost[a][b] + cost[b][d2] + cost[b][0] &lt;?<br>      cost[a][d0] + cost[a][d2] + cost[a][b] + cost[b][d1] + cost[b][0] &lt;?<br>      cost[a][d2] + cost[a][d1] + cost[a][b] + cost[b][d0] + cost[b][0]<br>      ));<br>    if(cst &gt;= INFF) return -1;<br>    return cst*10;<br>    }<br>  };<br><br><br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003]<br>// Powered by CodeProcessor<br></td>