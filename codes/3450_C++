<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;algorithm&gt;<br>#include &lt;climits&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cctype&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cstring&gt;<br>#include &lt;iostream&gt;<br>#include &lt;sstream&gt;<br>#include &lt;string&gt;<br>#include &lt;queue&gt;<br>#include &lt;deque&gt;<br>#include &lt;functional&gt;<br>#include &lt;complex&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>using namespace std;<br>#define fu(i,n) for( int i = 0; i &lt; (n); ++i )<br>#define fr(i,S,E) for( typeof(E) i = (S); i != (E); ++i )<br>#define pb push_back<br>#define ALL(x) (x).begin(), (x).end()<br>typedef long long i64;<br>typedef vector&lt;int&gt; VI; typedef vector&lt;VI&gt; VVI;<br>typedef vector&lt;string&gt; VS; typedef pair&lt;int,int&gt; PII;<br> <br>map&lt;string,int&gt; mp;<br> <br>struct GroceryBagger {<br>int minimumBags( int strength, vector &lt;string&gt; itemType ) <br>{<br>    int r = 0;<br>    fu(i,itemType.size()) mp[itemType[i]]++;<br>    <br>    for( map&lt;string,int&gt;::iterator it = mp.begin(); it != mp.end(); ++it ) {<br>        r += (it-&gt;second + strength - 1) / strength;<br>    }<br> <br>    return r;<br>}<br> <br>};<br></td>