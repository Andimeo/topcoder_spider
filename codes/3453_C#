<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections;<br>using System.Collections.Generic;<br>using System.Collections.Specialized;<br>using System.Text;<br>using System.Text.RegularExpressions;<br> <br>// Ugliest Solution Ever.<br> <br>public class Choice : IComparable&lt;Choice&gt;{<br>    public char ch;<br>    public int tot;<br>    public Choice(char c, int total) {<br>        ch=c;<br>        tot=total;<br>    }<br>    <br>    public int CompareTo(Choice other) {<br>        return (tot.CompareTo(other.tot) == 0) ? -ch.CompareTo(other.ch): tot.CompareTo(other.tot);<br>    }<br>}<br> <br>public class ScrabFortune{<br>    <br>    List&lt;Choice&gt; choices;<br>  public string getMin(string pool, string[] board, int threshold)  {<br>    int[] tot=new int[26];<br>      <br>      int totLetters=0;<br>      <br>      for(int i=0;i&lt;board.Length;i++){<br>          for(int j=0;j&lt;board[i].Length;j++){<br>              tot[board[i][j] - 'a']++;<br>          }<br>          totLetters+=board[i].Length;<br>      }<br>      <br>      bool[] used = new bool[26];<br>      <br>      for(int i=0;i&lt;pool.Length;i++){<br>          used[(int)(pool[i]-'a')] = true;<br>      }<br>      <br>      choices = new List&lt;Choice&gt;();<br>      <br>      for(int i=0;i&lt;26;i++){<br>          if(used[i]){<br>              Choice choice = new Choice((char)(i + 'a'), tot[i]);<br>              choices.Add(choice);<br>          }<br>      }<br>      <br>      choices.Sort();<br>      choices.Reverse();<br>      <br>      int num=totLetters-threshold;<br>      int revealed=0;<br>      int numNeeded=0;<br>      bool[] rused = new bool[26];<br> <br>      List&lt;char&gt; sb=new List&lt;char&gt;();<br>      for(numNeeded=0;numNeeded&lt;choices.Count;numNeeded++){<br>          if(revealed  &gt;= num) break;<br>          revealed+=choices[numNeeded].tot;<br>          rused[choices[numNeeded].ch-'a']=true;<br>      }<br>      <br>      if(revealed &lt; num){<br>            return "IMPOSSIBLE";<br>        }<br>      <br>      // Keep finding the lowest char which still allows us to work.<br>      <br>      for(int i = numNeeded - 1; i &gt;= 0; i--){<br>          char smallest=choices[i].ch;<br>          int ismallest=i;<br>          for(int j = i + 1; j &lt; choices.Count; j++){<br>                if(!rused[choices[j].ch - 'a'] &amp;&amp; revealed - choices[i].tot + choices[j].tot &gt;= num &amp;&amp; smallest &gt; choices[j].ch){<br>                    smallest=choices[j].ch;<br>                    ismallest=j;<br>                }<br>          }<br>          rused[choices[i].ch - 'a']=false;<br>          rused[choices[ismallest].ch - 'a']=true;<br>          revealed=revealed-choices[i].tot+choices[ismallest].tot;<br>      }<br> <br>            StringBuilder ssb  = new StringBuilder();<br>            for(int j=0;j &lt; 26;j++) {<br>                if(rused[j]){<br>                    ssb.Append((char)(j + 'a'));<br>                }<br>            }<br>            return ssb.ToString();<br>  }<br> <br> <br>}<br>//Powered by [KawigiEdit] 2.0!<br></td>