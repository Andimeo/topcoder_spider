<td class="problemText" colspan="8" valign="middle" align="left">
            // Cry as challenge phase is passing by<br><br>#include &lt;algorithm&gt;<br>#include &lt;functional&gt;<br><br>#include &lt;cmath&gt;<br>#include &lt;cctype&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cstring&gt;<br><br>#include &lt;vector&gt;<br>#include &lt;string&gt;<br>#include &lt;sstream&gt;<br>#include &lt;iostream&gt;<br><br>using namespace std;<br><br>#define FORC(it,v) for( __typeof((v).begin()) it = (v).begin(); it != (v).end(); ++it )<br><br>const int MAXN = 2501;<br><br>int A[ 26 ];<br>int bio[ MAXN+10 ];<br><br>string dp[ MAXN+10 ];<br><br>bool better( const string &amp;a, const string &amp;b )  <br>{<br>    if( a.size() != b.size() ) return a.size() &lt; b.size();<br>    return a &lt; b;<br>}<br><br>string bet( const string &amp;a, const string &amp;b ) <br>{<br>    if( better( a, b ) ) return a;<br>    return b;<br>}<br><br>class ScrabFortune {<br>public:<br>    string getMin( string pool, vector &lt;string&gt; board, int threshold ) {<br>        memset( A, 0, sizeof A );<br><br>        sort( pool.begin(), pool.end() );<br>        pool.resize( unique( pool.begin(), pool.end() ) - pool.begin() );<br><br>        int sum = 0;<br><br>        FORC( it, board ) {<br>            sum += ( int )it-&gt;size();<br>            FORC( a, *it ) ++A[ *a - 'a' ];<br>        }<br><br>        memset( bio, 0, sizeof bio );<br><br>        dp[0] = "";<br>        bio[0] = true;<br><br>        for( int C = 0; C &lt; ( int )pool.size(); ++C ) {<br>            char c = pool[ C ];<br><br>            for( int i = MAXN - 1; i &gt;= 0; --i )<br>                if( bio[i] ) {<br>                    string tmps = dp[i] + c;<br>                    int tt = i + A[ c-'a' ];<br><br>                    if( tt &lt; MAXN ) {<br>                        if( bio[tt] == false ) dp[tt] = tmps;<br><br>                        bio[ tt ] = true;<br>                        dp[ tt ] = bet( dp[tt], tmps );<br>                    }<br>                }<br>        }<br><br>        string best = string( 60, 'z' );<br><br><br>        for( int i = max( sum-threshold, 0 ); i &lt;= sum; ++i )<br>            if( bio[i] )<br>                best = bet( best, dp[i] );<br><br>        if( best == string( 60, 'z' ) )<br>            return "IMPOSSIBLE";<br><br>        return best;<br>    }<br>};<br><br><br><br><br><br><br><br><br><br>// Powered by FileEdit<br>// Powered by moj 3.0 beta 11 [modified TZTester]<br>// Powered by CodeProcessor<br></td>