<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;sstream&gt;<br>#include &lt;iostream&gt;<br>#include &lt;functional&gt;<br>#include &lt;cctype&gt;<br>#include &lt;complex&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cassert&gt;<br>#include &lt;queue&gt;<br>#include &lt;stack&gt;<br>#include &lt;list&gt;<br>#include &lt;iomanip&gt;<br>using namespace std;<br>class PrimeAnagrams {public: vector &lt;int&gt; primes(string anagram); };<br> <br>#define MAXPRIME 1000001<br> <br>char comp[MAXPRIME];<br> <br>typedef vector&lt;int&gt; VI;<br> <br>VI primes;<br> <br>void generate_primes() {<br>  int i;<br>  comp[0] = comp[1] = 1;<br>  for (i=4; i&lt;MAXPRIME; i+=2)<br>    comp[i] = 1;<br>  primes.clear();<br>  primes.push_back(2);<br>  for (i=3; i&lt;=(MAXPRIME-1)/i; i+=2) {<br>    if (!comp[i]) {<br>      for (int j=i*i; j&lt;MAXPRIME; j+=i+i)<br>        comp[j] = 1;<br>      primes.push_back(i);<br>    }<br>  }<br>  for (; i&lt;MAXPRIME; i+=2)<br>    if (!comp[i])<br>      primes.push_back(i);<br>}<br> <br>long long prod;<br>VI res;<br> <br>vector &lt;int&gt; PrimeAnagrams::primes(string anagram)<br>{<br>  generate_primes();<br>  prod = 0;<br>  res.clear();<br>  sort(anagram.begin(), anagram.end());<br>  do {<br>    if (anagram[0] == '0')<br>      continue;<br>    int a = 0;<br>    for (int i = 0; i &lt; anagram.size()-2; i++)<br>    {<br>      a = (10 * a) + anagram[i] - '0';<br>      if (anagram[i+1] == '0' || comp[a])<br>        continue;<br>      int b = 0;<br>      for (int j = i+1; j &lt; anagram.size()-1; j++)<br>      {<br>        b = (10 * b) + anagram[j] - '0';<br>        if (anagram[j+1] == '0' || comp[b])<br>          continue;<br>        int c = 0;<br>        for (int k = j+1; k &lt; anagram.size(); k++)<br>          c = (10 * c) + anagram[k] - '0';<br>        if (!comp[c])<br>        {<br>          long long cand = a;<br>          cand *= b;<br>          cand *= c;<br>          if (res.empty() || cand &lt; prod)<br>          {<br>            res.clear();<br>            res.push_back(a);<br>            res.push_back(b);<br>            res.push_back(c);<br>            prod = cand;<br>          }<br>        }<br>      }<br>    }<br>  } while (next_permutation(anagram.begin(), anagram.end()));<br>  sort(res.begin(), res.end());<br>  return res;<br>}<br> <br> <br>// Powered by FileEdit<br></td>