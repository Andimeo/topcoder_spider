<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>public class LandMines {<br>  String[] map;<br>  int n, m;<br>  boolean[][] used;<br><br>  int[] dx = {1, -1, 0, 0};<br>  int[] dy = {0, 0, 1, -1};<br><br>  int result;<br><br>  public boolean cango(int x, int y, int dir) {<br>    while ((x &gt;= 0) &amp;&amp; (x &lt; n) &amp;&amp; (y &gt;=0) &amp;&amp; (y &lt; m)) {<br>      if (map[x].charAt(y) == 'M') {<br>        return false;<br>      }<br>      x += dx[dir];<br>      y += dy[dir];<br>    }<br>    return true;<br>  }<br><br>  public void dfs(int x, int y)  {<br>    if (used[x][y])  {<br>      return;<br>    }<br>    used[x][y] = true;<br>    result++;<br>    for (int i=0; i &lt; 4; i++) {<br>      int newx = x+dx[i];<br>      int newy = y+dy[i];<br>      if ((newx &gt;= 0) &amp;&amp; (newx &lt; n) &amp;&amp;<br>         (newy &gt;= 0) &amp;&amp; (newy &lt; m) &amp;&amp;<br>         (cango(x, y, i)))  {<br>        dfs(newx, newy);<br>      }<br>    }<br>  }<br><br>    public int numClear(String[] layout) {<br>  map = layout;<br>  n = map.length;<br>  m = map[0].length();<br>  used = new boolean[n][m];<br>  for (int i=0; i &lt; n; i++)  {<br>    Arrays.fill(used[i], false);<br>  }<br>  result = 0;<br>  dfs(0, 0);<br>  return result;<br>    }<br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by CodeProcessor<br></td>