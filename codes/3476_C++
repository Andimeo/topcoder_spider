<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;vector&gt;<br>#include &lt;string&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;iostream&gt;<br>#include &lt;cmath&gt;<br>#include &lt;sstream&gt;<br> <br>using namespace std;<br> <br>//#include &lt;map&gt;<br>//#include &lt;list&gt;<br>//#include &lt;iterator&gt;<br>//#include &lt;queue&gt;<br> <br>#define rep(var,n) for(int var=0; var&lt;(n); var++)<br>#define repd(var,n) for(int var=(n)-1; var&gt;=0; var--)<br>#define repv(var,arr) for(int var=0; var&lt;arr.size(); var++)<br> <br>typedef vector&lt;int&gt; vi;<br>typedef vector&lt;string&gt; vs;<br>typedef vector&lt;double&gt; vd;<br>typedef vector&lt; vector&lt;int&gt; &gt; vvi;<br>typedef vector&lt; vector&lt;string&gt; &gt; vvs;<br>typedef vector&lt; vector&lt;double&gt; &gt; vvd;<br> <br>#define sz size()<br>#define cs c_str()<br>#define bz(mem) memset(mem,0,sizeof(mem))<br>#define mp(a,b) make_pair(a,b)<br>#define mt(a,b) make_pair(make_pair(a,b),c)<br> <br>vector&lt; pair&lt;int, int &gt; &gt; v;<br> <br>int cvt(string s, int p)<br>{<br>  int a,b;<br>  sscanf(s.cs,"%d:%d",&amp;a,&amp;b);<br>  <br>  if (a==8&amp;&amp;b==0) { if(p==0) return 8*60; else return 20*60; }<br>  if (a&lt;8) return (a+12)*60+b; else return a*60+b;<br>}<br> <br>class Conference {<br>public:<br>int coverage(int n, vector &lt;string&gt; meetings) {<br>  v.clear();<br>  rep(i,meetings.size()) {<br>    istringstream st(meetings[i]);<br>    string s1,s2;<br>    st&gt;&gt;s1&gt;&gt;s2;<br>    v.push_back(make_pair(cvt(s2,1),cvt(s1,0)));<br>  }<br>  <br>  sort(v.begin(),v.end());<br>  <br>  int ret=0;<br>  <br>  vector&lt; int &gt; end;<br>  rep(i,n) end.push_back(0);<br>  <br>  rep(i,v.size()) {<br>    int ind=-1;<br>    rep(j,end.size()) if (end[j]&lt;=v[i].second) {<br>      if (ind==-1||end[j]&gt;=end[ind]) { ind=j; }<br>    }<br>    if (ind!=-1) {<br>      ret++;<br>      end[ind]=v[i].first;<br>    }<br>  }<br>  <br>  return ret;<br>}};<br></td>