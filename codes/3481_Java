<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>public class PackageShipping<br>{<br>  public class It implements Comparable<br>  {<br>    int loc, time;<br>    double ex, px;<br> <br>    It (int loc, double ex, double px, int time)<br>    {<br>      this.loc = loc;<br>      this.px = px;<br>      this.ex = ex;<br>      this.time = time;<br>    }<br> <br>    public boolean equals (Object o)<br>    {<br>      return compareTo(o) == 0;<br>    }<br>    <br>    public int compareTo (Object o){<br>    It i = (It) o;<br>    if (ex &lt; i.ex) return -1; <br>    if (ex &gt; i.ex) return 1;<br>    if (loc &lt; i.loc) return -1;<br>    if (loc &gt; i.loc) return 1; <br>    if (px &lt; i.px) return -1; <br>    if (px &gt; i.px) return 1;<br>    if (time &lt; i.time) return -1;<br>    if (time &gt; i.time) return 1;<br>  return 0;<br>}<br> <br>  }<br>  <br>  public double ship(String[] rs, String or, String dt, int time, int pc)<br>  {<br>    ArrayList ss = new ArrayList ();<br>    int origin, destination;<br>    if (ss.contains (or)) origin = ss.indexOf(or); else { origin = ss.size(); ss.add(or); }<br>    if (ss.contains (dt)) destination = ss.indexOf(dt); else { destination = ss.size(); ss.add(dt); }<br>    int rz = rs.length;<br>    int[] ro = new int[rz];<br>    int[] rd = new int[rz];<br>    int[] rtime = new int[rz];<br>    int[] rcost = new int[rz];<br>    double[] rprob = new double[rz];<br>    for (int i = 0; i &lt; rz; i++)<br>    {<br>     StringTokenizer st = new StringTokenizer(rs[i]);<br>     String s;<br>     s = st.nextToken();<br>     if (ss.contains (s)) ro[i] = ss.indexOf(s); else { ro[i] = ss.size(); ss.add(s); }<br>     s = st.nextToken();<br>     if (ss.contains (s)) rd[i] = ss.indexOf(s); else { rd[i] = ss.size(); ss.add(s); }<br>     rtime[i] = Integer.parseInt (st.nextToken());<br>     rcost[i] = Integer.parseInt (st.nextToken());<br>     rprob[i] = Double.parseDouble (st.nextToken())/100.0;<br>    }<br>  //System.out.println ("" + ro[1] + " " + rd[1] + " " + rtime[1] + " " + rcost[1] + " " + rprob[1]);<br> <br>  TreeSet ts = new TreeSet ();<br> <br>  ts.add (new It (origin, 0.0, 1.0, 0));<br> <br>  while (ts.size() &gt; 0)<br>  {<br>   It node = (It) ts.first();<br>   ts.remove (node);<br> <br>   if (node.loc == destination) { System.out.println ("" + node.ex); return node.ex;}<br> <br>   for (int i = 0; i &lt; rz; i++)<br>   {<br>     int oi = ro[i];<br>     if (oi != node.loc) continue;<br>     int di = rd[i];<br>     int tm = rtime[i];<br>     if (node.time + tm &gt; time) continue;<br>     int ct = rcost[i];<br>     double pb = rprob[i];<br> <br>     ts.add (new It (di, node.ex + ct + node.px*pb*pc, node.px - node.px * pb, node.time+tm));<br>   }<br>  }<br> <br>  return 0;<br>  }<br>}<br></td>