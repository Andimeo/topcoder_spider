<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>public class AutoAdjust {<br>  int n, m;<br>  int[][] color;<br><br>  int best_br;<br>  int best_con;<br><br>  String[] result;<br><br>  public boolean good_pair(int br, int con) {<br>    double[][] tmp = new double[n][m];<br>    int[][] res_col = new int[n][m];<br>    boolean has_min = false;<br>    boolean has_max = false;<br>    for (int i=0; i &lt; n; i++) {<br>      for (int j=0; j &lt; m; j++) {<br>        tmp[i][j] = color[i][j] + br;<br>        tmp[i][j] -= 63.5;<br>        tmp[i][j] *= con;<br>        tmp[i][j] /= 100.0;<br>        tmp[i][j] += 63.5;<br>        res_col[i][j] = (int)Math.round(tmp[i][j]+1e-8);<br>        if (res_col[i][j] &lt;= 32) {<br>          res_col[i][j] = 32;<br>          has_min = true;<br>        }<br>        if (res_col[i][j] &gt;= 95) {<br>          res_col[i][j] = 95;<br>          has_max = true;<br>        }<br>      }<br>    }<br>    if ((!has_min) || (!has_max)) {<br>      return false;<br>    }<br>    if ((con &lt; best_con) || ((con == best_con) &amp;&amp; (Math.abs(br) &lt; Math.abs(best_br)))) {<br>      best_con = con;<br>      best_br = br;<br>      result = new String[n];<br>      for (int i=0; i &lt; n; i++) {<br>        result[i] = "";<br>        for (int j=0; j &lt; m; j++) {<br>          result[i] += (char)res_col[i][j];<br>        }<br>      }<br>    }<br>    return true;<br>  }<br><br>    public String[] adjust(String[] image) {<br>  n = image.length;<br>  m = image[0].length();<br>  color = new int[n][m];<br><br>  for (int i=0; i &lt; n; i++) {<br>    for (int j=0; j &lt; m; j++) {<br>      color[i][j] = (int)image[i].charAt(j);<br>    }<br>  }<br><br>  best_con = 30000;<br>  best_br = 30000;<br><br>  for (int i=-100; i&lt;=100; i++) {<br>    int l=100;<br>    int r=20000;<br>    while (r-l &gt; 1) {<br>      int c = (l+r) / 2;<br>      if (good_pair(i, c)) {<br>        r = c;<br>      } else {<br>        l = c;<br>      }<br>    }<br>    good_pair(i, l);<br>    good_pair(i, r);<br>  }<br><br>  return result;<br>    }<br><br>}<br><br><br><br>// Powered by FileEdit<br>// Powered by CodeProcessor<br></td>