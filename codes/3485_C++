<td class="problemText" colspan="8" valign="middle" align="left">
            // Warning: less successful challenges against me than against tomek.<br>// I'm now automatically removing unused stuff.<br><br>#include &lt;algorithm&gt;<br>#include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;iostream&gt;<br>#include &lt;complex&gt;<br>using namespace std;<br><br>typedef long long ll;<br>typedef vector&lt;int&gt; vi;<br>typedef vector&lt;string&gt; vs;<br>typedef complex&lt;ll&gt; cll;<br><br>#define LS &lt;<br>#define Size(x) (int(x.size()))<br><br>// All macros with parameters "k,a,b" run the "k" variable in range [a,b)<br>#define FOR(k,a,b) for(typeof(a) k=(a); k LS (b); ++k)<br><br>#define INF 1000000000<br><br>// cross product<br>template &lt;class T&gt; T operator ^ (complex&lt;T&gt; x, complex&lt;T&gt; y) {<br>  return (x*conj(y)).imag();<br>  }<br><br>// Operators missing from GCC...<br>template&lt;class T&gt; T&amp; operator &gt;?= (T&amp; x, T y) {if(y&gt;x) x=y; return x;}<br>template&lt;class T&gt; T&amp; operator &lt;?= (T&amp; x, T y) {if(y&lt;x) x=y; return x;}<br><br>#line 3 "Triangulation.cc"<br><br>int next[60];<br><br>vector&lt;pair&lt;int,int&gt; &gt; res;<br><br>vi gx, gy;<br><br><br>bool dsign(int a, int b) {<br>  return (a&gt;=0 &amp;&amp; b&lt;=0) || (a&lt;=0 &amp;&amp; b&gt;=0);<br>  }<br><br>bool crosses(int ax1, int ay1, int ax2, int ay2,<br>  int bx1, int by1, int bx2, int by2, bool d) {<br><br>  cll a1(ax1, ay1);<br>  cll a2(ax2, ay2);<br>  cll b1(bx1, by1);<br>  cll b2(bx2, by2);<br>  <br>  return dsign((a2-a1) ^ (b1-a1), (a2-a1) ^ (b2-a1))<br>   &amp;&amp; dsign((b2-b1) ^ (a1-b1), (b2-b1) ^ (a2-b1));<br>  }<br><br>int area(int t) {<br>  int t1 = t;<br>  int a = 0;<br>  do {<br>    a += (gy[t1] + gy[next[t1]]) * (gx[t1] - gx[next[t1]]);<br>    t1 = next[t1];<br>    } while(t1 != t);<br>  return a;<br>  }<br><br>void tri(int t) {<br>  if(next[next[next[t]]] == t) return;<br>  <br>  pair&lt;int,int&gt; best;<br>  <br>  best.first = INF;<br> <br>  int t1 = t, t2, t3;<br>  <br>//  int cyc = 0;<br>  <br>  do {<br>//  printf("t1 = %d\n", t1); fflush(stdout);<br>    t2 = t;<br>    do {<br>//    printf("t2 = %d\n", t2); fflush(stdout);<br>      <br>//    cyc++; if(cyc == 100) exit(0);<br> <br>      if(t1 == t2 || t1 == next[t2] || next[t1] == t2) {<br>        t2 = next[t2]; continue;<br>        }<br>      <br>      bool ok = true;<br><br>      int a1, a2, sav;<br><br>      sav = next[t1]; next[t1] = t2; a1=area(t1); next[t1] = sav;<br>  <br>      sav = next[t2]; next[t2] = t1; a2=area(t2); next[t2] = sav;<br>      <br>      if(dsign(a1, a2)) ok = false;<br><br>      t3 = t;<br>      <br>      if(ok) do {<br>        if(t3 == t1 || t3 == t2 || next[t3] == t1 || next[t3] == t2) {<br>          t3 = next[t3];<br>          continue;<br>          }<br><br>        if(crosses(gx[t1], gy[t1], gx[t2], gy[t2],<br>          gx[t3], gy[t3], gx[next[t3]], gy[next[t3]],<br>           t1 == 0 &amp;&amp; t2 == 3 &amp;&amp; t3 == 1))<br>          ok = false;<br><br>        t3 = next[t3];<br>        } while(t3 != t);<br>      <br>      if(ok) best &lt;?= make_pair(t1, t2);<br>      <br>      t2 = next[t2];<br>      } while(t2 != t);<br><br>    t1 = next[t1];<br>    } while(t1 != t);<br>  <br>  t1 = best.first; t2 = best.second;<br>  <br>  if(t1 != INF) {<br>    int sav;<br>    <br>//  printf("added (%d,%d)\n", t1, t2);<br>    fflush(stdout);<br>    <br>    res.push_back(best);<br>    <br>    sav = next[t1]; next[t1] = t2; tri(t1); next[t1] = sav;<br><br>    sav = next[t2]; next[t2] = t1; tri(t2); next[t2] = sav;<br>    }<br>    <br>  else printf("bug? [%d,%d,%d,%d,%d]\n", t, next[t], next[next[t]], next[next[next[t]]],next[next[next[next[t]]]]);<br>  }<br><br>class Triangulation {<br>  public:<br>  vector &lt;string&gt; triangulate(vector &lt;int&gt; x, vector &lt;int&gt; y) {<br>    // !FDI<br>    int N = Size(x);<br>    FOR(n,0,N) next[n] = (n+1)%N;<br>    <br>    res.clear();<br>    <br>    gx = x; gy = y;<br>    tri(0);<br><br>    sort(res.begin(), res.end());<br>    <br>    vs ress;<br>    FOR(k,0,Size(res)) {<br>      char buf[50];<br>      <br>      sprintf(buf, "%d %d", res[k].first, res[k].second);<br>      <br>      ress.push_back(buf);<br>      }<br>      <br>    return ress;<br>    }<br>  };<br><br><br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003]<br>// Powered by CodeProcessor<br></td>