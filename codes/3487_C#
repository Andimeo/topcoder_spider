<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections;<br><br>public class Necklaces {<br>  int[,] memo = new int[51, 51];<br>  int[,] memoGen = new int[51, 51];<br><br>  int curGen;<br><br>  public int go(int[] gems, int leastSeg, int pos, int cutsleft)<br>  {<br>    if (pos==gems.Length)<br>    {<br>      if (cutsleft == 0)<br>        return leastSeg;<br>      return int.MaxValue;<br>    }<br>    if (cutsleft == 0)<br>      return int.MaxValue;<br><br>    if (memoGen[pos, cutsleft] == curGen)<br>      return memo[pos, cutsleft];<br>    int sum = 0, best = int.MaxValue;<br>    for (int i = pos; i &lt; gems.Length; i++)<br>    {<br>      sum += gems[i];<br>      if (sum &gt;= leastSeg)<br>      {<br>        int v = go(gems, leastSeg, i + 1, cutsleft-1);<br>        if (Math.Max(v,sum) &lt; best)<br>          best = Math.Max(v,sum);<br>      }<br>    }<br>    memoGen[pos, cutsleft] = curGen;<br>    memo[pos, cutsleft] = best;<br>    return best;<br>  }<br><br>  public int inequity(int n, int[] gems) {<br>    if (n==1) return 0;<br><br>    for (int i = 0; i &lt; 51; i++)<br>      for (int j = 0; j &lt; 51; j++)<br>        memoGen[i,j] = -1;<br><br>    int best = int.MaxValue;<br>    curGen = 0;<br>    for (int i = 0; i &lt; gems.Length; i++)<br>    {<br>      int[] newGems = new int[gems.Length];<br>      for (int j = 0; j &lt; gems.Length; j++)<br>        newGems[j] = gems[(i+j) % gems.Length];<br>      int leastSeg = 0;<br>      for (int j = 0; j &lt; gems.Length; j++)<br>      {<br>        leastSeg += newGems[j];<br>        curGen++;<br>        int maxSeg = go(newGems, leastSeg, j+1, n-1);<br>        if (maxSeg-leastSeg &lt; best)<br>          best = maxSeg-leastSeg;<br>      }<br>    }<br>    return best;<br>  }<br>}<br><br><br>// Powered by FileEdit<br></td>