<td class="problemText" colspan="8" valign="middle" align="left">
            #line 114 "ExperimentalAnalyzer.cpp"<br>#include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cctype&gt;<br>#include &lt;cmath&gt;<br>#include &lt;iostream&gt;<br>#include &lt;sstream&gt;<br>#include &lt;utility&gt;<br>#include &lt;map&gt;<br>using namespace std;<br>typedef vector&lt;int&gt; VI;  typedef vector&lt;vector&lt;int&gt; &gt; VVI;<br>typedef vector&lt;string&gt; VS;  typedef vector&lt;vector&lt;string&gt; &gt; VVS;<br>typedef signed long long LL;  <br><br>#define REP(i,n) for(int _n=n, i=0;i&lt;_n;++i)<br>#define BE(a) a.begin(), a.end()<br>#define PB push_back<br><br>//--&lt;contains tokenize tokint tokmat<br>template&lt;class A,class B&gt; inline bool contains(const A&amp;a, const B&amp;b) {<br>    return find(a.begin(),a.end(),b)!=a.end();<br>}<br>//--&gt;<br>//--&lt;tokenize tokint tokmat<br>vector&lt;string&gt; tokenize(string s,string del=" ") {<br>  s+=del[0];<br>  string w;<br>  vector&lt;string&gt; res;<br>  for (string::iterator it=s.begin(); it!=s.end(); it++) {<br>    if(!contains(del,*it)) w+=*it;<br>    else if(w!="") { res.push_back(w); w=""; }<br>  }<br>  return res;<br>}<br>//--&gt;<br>//--&lt;tokint tokmat<br>vector&lt;int&gt; tokint(string s, string ch=" ") {<br>  vector&lt;int&gt; ret;<br>  vector&lt;string&gt; p = tokenize(s, ch);<br>  for( int i = 0; i &lt; p.size(); i++ )<br>    ret.push_back( atoi(p[i].c_str()) );<br>  return ret;<br>}<br>//--&gt;<br>//--&lt;tokmat<br>vector&lt;vector&lt;int&gt; &gt; tokmat(vector&lt;string&gt; s, string ch=" ") {<br>  vector&lt;vector&lt;int&gt; &gt; ret;<br>  for(vector&lt;string&gt;::iterator it = s.begin(); it != s.end(); ++it) {<br>    ret.push_back(tokint(*it,ch));<br>  };<br>  return ret;<br>}<br>//--&gt;<br>// BEGIN CODE:<br>class ExperimentalAnalyzer {<br>  public:<br>  vector &lt;int&gt; getPredictors(vector &lt;string&gt; data) {<br>        VI ret;<br>    VVI mat = tokmat(data);<br>        cout &lt;&lt; "Here" &lt;&lt; endl;<br>        REP(j,mat[0].size()) {<br>            if (j==0) continue;<br>            VI one,two;<br>            REP(i,mat.size()) {<br>                if (mat[i][0] == 0) one.PB(mat[i][j]);<br>                else two.PB(mat[i][j]);<br>            };<br>            if (one.size() == 0 || two.size() == 0) {<br>            } else {<br>                sort(BE(one));            sort(BE(two));<br>                if (one[one.size()-1] &lt; two[0] || one[0] &gt; two[two.size()-1]) {<br>                    ret.PB(j);<br>                };<br>            };<br>        };<br>        return ret;<br>  }<br>  <br><br>};<br><br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003]<br>// Powered by CodeProcessor<br></td>