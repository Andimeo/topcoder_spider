<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;algorithm&gt;<br>#include &lt;cctype&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;iostream&gt;<br>#include &lt;sstream&gt;<br>#include &lt;string&gt;<br>#include &lt;utility&gt;<br>#include &lt;vector&gt;<br>using namespace std;<br>#define VAR(a,b) typeof(b) a=(b)<br>#define REP(i,n) for(int i=0;i&lt;(n);++i)<br>#define FOR(i,a,b) for(int i=(a);i&lt;=(b);++i)<br>#define FORD(i,a,b) for(int i=(a);i&gt;=(b);--i)<br>#define FOREACH(it,c) for(VAR(it,(c).begin());it!=(c).end();++it)<br>#define ALL(f,w) ({bool _ok=true; f _ok=_ok&amp;&amp;(w); _ok; })<br>#define EXISTS(f,w) (!ALL(f,!(w)))<br>typedef long long LL; typedef vector&lt;int&gt; VI;<br>typedef vector&lt;VI&gt; VVI; typedef vector&lt;string&gt; VS;<br>const int INF = 1000000000; const int INFLL = LL(INF)*LL(INF);<br>template&lt;class T&gt; inline int size(const T&amp;c) { return c.size(); }<br>template&lt;class T&gt; inline vector&lt;T&gt; makeV(const T&amp;a) {<br>  vector&lt;T&gt; v(1,a); return v;<br>}<br>template&lt;class T&gt; inline vector&lt;T&gt; makeV(const T&amp;a,const T&amp;b) {<br>  vector&lt;T&gt; v(1,a); v.push_back(b); return v;<br>}<br>template&lt;class T&gt; inline vector&lt;T&gt; makeV(const T&amp;a,const T&amp;b,const T&amp;c) {<br>  vector&lt;T&gt; v(1,a); v.push_back(b); v.push_back(c); return v;<br>}<br>template&lt;class T,class U&gt; inline bool contains(const T&amp;a,const U&amp;b) {<br>  return find(a.begin(),a.end(),b)!=a.end();<br>}<br>template&lt;class T&gt; inline string i2s(const T&amp;a) { ostringstream os; os&lt;&lt;a;<br>return os.str(); }<br>inline int s2i(string s) { istringstream is(s); int x; is&gt;&gt;x; return x; }<br>inline int s2ll(string s) { istringstream is(s); LL x; is&gt;&gt;x; return x; }<br>VS split(string s,string del=" ") {<br>  VS res; string w;<br>  FOREACH(it,s) {<br>    if(contains(del,*it)) {<br>      if(w!="") res.push_back(w); w="";<br>    }<br>    else w+=*it;<br>  }<br>  return res;<br>}<br>VI s2vi(string s,string del=" ") {<br>  VS v = split(s,del);<br>  VI res; FOREACH(it,v) res.push_back(s2i(*it));<br>  return res;<br>}<br><br>string pl(string x,string y) {<br>  string res = x;<br>  int p=0;<br>  FORD(i,99,0) {<br>    p += (x[i]-'0')+(y[i]-'0');<br>    res[i] = char('0'+p%10);<br>    p/=10;<br>  }<br>  return res;<br>}<br><br>string div3(string x) {<br>  int p = 0;<br>  REP(i,100) {<br>    p = 10*p + (x[i]-'0');<br>    x[i] = char('0'+p/3);<br>    p%=3;<br>  }<br>  return x;<br>}<br><br><br>struct Symbolic {<br>  //MAIN<br>  int compare(string value, vector &lt;int&gt; itin) {<br>    value[0]='0';<br>    while(size(value)&lt;100) value+='0';<br>    string A; REP(i,100) A+='0';<br>    string B=A; B[0]='1';<br>    FOREACH(it,itin) {<br>      string C = div3(pl(pl(A,A),B));<br>      if(*it==0) {<br>        B = C;<br>      }<br>      else { A=B; B=C; }<br>    }<br>//    cerr &lt;&lt; A &lt;&lt; ' ' &lt;&lt; B &lt;&lt; "\n";<br>    if(value&lt;A &amp;&amp; value&lt;B) return -1;<br>    if(value&gt;A &amp;&amp; value&gt;B) return 1;<br>    return 0;<br>  }<br>};<br><br><br><br>// Powered by FileEdit<br></td>