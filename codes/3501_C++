<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;algorithm&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cctype&gt;<br>#include &lt;cmath&gt;<br>#include &lt;iostream&gt;<br>#include &lt;sstream&gt;<br>#include &lt;string&gt;<br>#include &lt;utility&gt;<br>#include &lt;vector&gt;<br>using namespace std;<br>#define REP(i,n) for(int _n=n, i=0;i&lt;_n;++i)<br>#define FOREACH(it,c) for(typeof((c).begin()) it=(c).begin();it!=(c).end();++it)<br>typedef vector&lt;string&gt; VS;<br>template&lt;class T&gt; inline int size(const T&amp;c) { return c.size(); }<br>template&lt;class A,class B&gt; inline bool contains(const A&amp;a, const B&amp;b) {<br>  return find(a.begin(),a.end(),b)!=a.end();<br>}<br>VS split(string s,string del=" ") {<br>  s+=del[0];<br>  string w;<br>  VS res;<br>  FOREACH(it,s) {<br>    if(!contains(del,*it)) w+=*it;<br>    else if(w!="") { res.push_back(w); w=""; }<br>  }<br>  return res;<br>}<br> <br>double s2d(string s) {<br>  double x;<br>  sscanf(s.c_str(), "%lf", &amp;x); <br>  return x;<br>}<br> <br>struct SPC {<br>  double s,p,c;<br>  SPC() {}<br>  SPC(double s,double p, double c):s(s),p(p),c(c) {}<br>};<br> <br>double costOfTime;<br>vector&lt;SPC&gt; tickets;<br>vector&lt;SPC&gt; costPerMile;<br> <br>double f(SPC t1,SPC t2,SPC c1, SPC c2, double x) {<br>  double res = costOfTime / x;<br>  double prob = t1.p + (t2.p-t1.p) * (x-t1.s)/ (t2.s-t1.s);<br>  res += prob * t1.c;<br>  double cpm = c1.c + (c2.c-c1.c) * (x-c1.s) / (c2.s-c1.s);<br>  res += cpm;<br>  return res;<br>}<br> <br>double go(int i1,int i2) {<br>  SPC t1 = tickets[i1];<br>  SPC t2 = tickets[i1+1];<br>  SPC c1 = costPerMile[i2];<br>  SPC c2 = costPerMile[i2+1];<br>  double aa = max(t1.s, c1.s);<br>  double bb = min(t2.s, c2.s);<br>  REP(i,1000) {<br>    double x1 = (aa*2+bb)/3;<br>    double x2 = (aa+bb*2)/3;<br>    double v1 = f(t1,t2,c1,c2,x1);<br>    double v2 = f(t1,t2,c1,c2,x2);<br>    if(v1&gt;v2) aa=x1; else bb=x2;<br>  }<br>  return f(t1,t2,c1,c2,aa);<br>}<br> <br>struct Driving {<br> <br>  // MAIN<br>  double lowestCost(int _costOfTime, vector &lt;string&gt; _tickets, vector &lt;string&gt; _costPerMile) {<br>    costOfTime = _costOfTime;<br>    tickets.clear(); costPerMile.clear();<br>    tickets.push_back(SPC(0,0,0));<br>    FOREACH(it,_tickets) {<br>      VS v = split(*it);<br>      tickets.push_back(SPC(s2d(v[0]),s2d(v[1]),s2d(v[2])));<br>    }<br>    FOREACH(it,_costPerMile) {<br>      VS v = split(*it);<br>      costPerMile.push_back(SPC(s2d(v[0]),0,s2d(v[1])));<br>    }<br>    double record = 1e100;<br>    int i1 = 0;<br>    int i2 = 0;<br>    while(i1&lt;size(tickets)-1 &amp;&amp; i2&lt;size(costPerMile)-1) {<br>      double v = go(i1,i2);<br>      record = min(record, v);<br>      if(tickets[i1+1].s &lt; costPerMile[i2+1].s) ++i1;<br>      else if(tickets[i1+1].s &gt; costPerMile[i2+1].s) ++i2;<br>      else { ++i1; ++i2; }<br>    }<br>    return record;<br>  }<br> <br>};<br> <br>// Powered by FileEdit<br> <br>// Powered by TomekAI<br>// Powered by TZTester 1.01 [25-Feb-2003]<br> <br>// Powered by CodeProcessor<br></td>