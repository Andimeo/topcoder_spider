<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>public class Driving {<br> <br> <br>    // I WANT GENERICS ! ARRGGH!!<br>    class LinThingie {<br>  TreeMap tm = new TreeMap();<br>  public void put(double a, double b) {<br>      tm.put(new Double(a), new Double(b));<br>  }<br>  public double nextDn(double a) {<br>      Double x = new Double(a);<br>      SortedMap sm = tm.headMap(x);<br>      Double x2 = (Double) ( sm.isEmpty() ? tm.firstKey() : sm.lastKey() );<br>      Double y2 = (Double) tm.get(x2);<br>      if(tm.get(x)!=null) y2 = (Double)tm.get(x);<br>      return y2.doubleValue();<br>  }<br>      <br>  public double get(double a) {<br>      Double x = new Double(a);<br>      SortedMap sm = tm.tailMap(x);<br>      Double x2 = (Double) ( sm.isEmpty() ? tm.lastKey() : sm.firstKey() );<br>      Double y2 = (Double) tm.get(x2);<br>      if(x2.equals(x)) return y2.doubleValue();<br> <br>      sm = tm.headMap(x);<br>      Double x1 = (Double) ( sm.isEmpty() ? tm.firstKey() : sm.lastKey() );<br>      Double y1 = (Double) tm.get(x1);<br>      return y1.doubleValue() + (y2.doubleValue()-y1.doubleValue()) * (a-x1.doubleValue()) / (x2.doubleValue()-x1.doubleValue());<br>  }<br>    }<br>    double d(String s){return Double.parseDouble(s); }<br> <br>    LinThingie tickProb = new LinThingie();<br>    LinThingie mileCost = new LinThingie();<br>    LinThingie tickCost = new LinThingie();<br>    LinThingie nurg = new LinThingie();<br> <br>    double best = 1e9;<br>    double evil(double speed) {<br>  double res = cot*1.0/speed + tickProb.get(speed)*tickCost.nextDn(speed) + mileCost.get(speed);<br>  if(res&lt;best) best = res;<br>  return res;<br>    }<br>    int cot;<br>    public void scan(double a, double d) {<br>  if(d - a &lt; 2e-13) return ;<br>  double b = a + (d-a)/3;<br>  double c = a + (d-a)*2/3;<br>  double A=evil(a),D=evil(d);<br>  double B=evil(b),C=evil(c);<br>  if(A&lt;=C &amp;&amp; A&lt;=D &amp;&amp; B&lt;=C &amp;&amp; B&lt;=D) scan(a,c);<br>  else scan(b,d);<br>    }<br>public double lowestCost(int costOfTime, String[] tickets, String[] costPerMile) {<br>    cot = costOfTime;<br>    mileCost.put(-100000, 0); <br>    tickProb.put(-100000, 0); <br>    tickCost.put(-100000, 0); <br>    tickCost.put(0, 0); <br>    tickProb.put(0, 0);<br>    tickProb.put(1e28, 1); // ignore :-)<br>    for(int i=tickets.length;i--&gt;0;) {<br>  String s[] = tickets[i].split(" ");<br>  double speed = d(s[0]);<br>  double prob = d(s[1]);<br>  double cost = d(s[2]);<br>  tickCost.put(speed, cost);<br>  tickProb.put(speed, prob);<br>  nurg.put(speed, 42);<br>    }<br>    double max  = 0;<br>    for(int i=costPerMile.length;i--&gt;0;) {<br>  String s[] = costPerMile[i].split(" ");<br>  double speed = d(s[0]);<br>  double cost = d(s[1]);<br>  max = Math.max(speed, max);<br>  mileCost.put(speed, cost);<br>  nurg.put(speed, 42);<br>    }<br>    nurg.put(0,0);<br>    Iterator i = nurg.tm.keySet().iterator();<br>    i.next(); // skip 0<br>    double lower = 0, upper = 0;<br>    best = 1e19;<br>    while(i.hasNext()) {<br>  lower = upper + 2e-15;<br>  upper = ((Double)i.next()).doubleValue() - 1e-15;<br>  // /* print lower upper &lt;cg&gt; */ System.out.println(" lower=" + (lower) + " upper=" + (upper)); <br>  if(lower &gt;= max) break;<br>  evil(lower); evil(upper);<br>  scan(lower, upper);<br>    }<br>    return best;<br>}}<br></td>