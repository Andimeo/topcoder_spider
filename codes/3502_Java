<td class="problemText" colspan="8" valign="middle" align="left">
            // Author:  King Larry Mak<br>// TC Handle:  Larry<br>import java.util.*;<br>public class TimeAnalysis {<br>  public double ln( double a ) {<br>    return Math.log( a ) / Math.log( 2.0 );<br>  }<br>  <br>  int var[];<br>  <br>  public double go2( String k ) {<br>    /* Either lg( s ) or s^n or just s or n^s */ <br>    if ( k.indexOf( "^" ) &gt;= 0 ) {<br>      try {<br>        StringTokenizer st = new StringTokenizer( k, "^" );<br>        char a = st.nextToken().charAt( 0 );<br>        int s = Integer.parseInt( st.nextToken() );<br>      <br>        return Math.pow( (double) var[a-'A'], s );<br>      } catch ( Exception ex ) {<br>        StringTokenizer st = new StringTokenizer( k, "^" );<br>        int s = Integer.parseInt( st.nextToken() );<br>        char a = st.nextToken().charAt( 0 );<br>      <br>        return Math.pow( s, (double) var[a-'A'] );<br>      }<br>    }<br>    /* lg( s ) */<br>    if ( k.indexOf( "lg(" ) &gt;= 0 ) {<br>      return ln( (double) var[ k.charAt(3) - 'A' ] );<br>    }<br>    return var[ k.charAt( 0 ) - 'A' ];<br>  }<br>  <br>  public double go1( String k ) {<br>    StringTokenizer st = new StringTokenizer( k, "*" );<br>    double s = 1.0;<br>    <br>    while ( st.hasMoreTokens() ) {<br>      s *= go2( st.nextToken() );<br>    }<br>    <br>    return s;<br>  }<br>  <br>  public String time(String[] variables, String equation) {<br>    var = new int[26];<br>    <br>    for ( int i = 0; i &lt; variables.length; i++ ) {<br>      StringTokenizer st = new StringTokenizer( variables[i] );<br>      char a = st.nextToken().charAt( 0 );<br>      int k = Integer.parseInt( st.nextToken() );<br>      <br>      var[ a - 'A' ] = k;<br>    }<br>    <br>    StringTokenizer st = new StringTokenizer( equation, "+" );<br>    double s = 0.0;<br>    <br>    while ( st.hasMoreTokens() ) {<br>      s += go1( st.nextToken() );<br>    }<br>    <br>    String ret = ((int) s ) + " nanoseconds";<br>    if ( s &gt;= 1000 ) {<br>      s /= 1000;<br>      ret = ((int) s ) + " microseconds";<br>      <br>      if ( s &gt;= 1000 ) {<br>        s /= 1000;<br>        ret = ((int) s ) + " milliseconds";<br>        <br>        if ( s &gt;= 1000 ) {<br>          s /= 1000;<br>          ret = ((int) s ) + " seconds";<br>          <br>          if ( s &gt;= 60 ) {<br>            s /= 60;<br>            ret = ((int) s ) + " minutes";<br>            <br>            if ( s &gt;= 60 ) {<br>              s /= 60;<br>              ret = ((int) s ) + " hours";<br>              <br>              if ( s &gt;= 24 ) {<br>                s /= 24;<br>                ret = ((int) s ) + " days";<br>                <br>                if ( s &gt;= 365 ) {<br>                  s /= 365;<br>                  ret = ((int) s ) + " years";<br>                }<br>              }<br>            }<br>          }<br>        }<br>      }<br>    }<br>    return ret;<br>  }<br>  <br>}<br> <br>// Powered by PopsEdit<br>// Powered by CodeProcessor<br></td>