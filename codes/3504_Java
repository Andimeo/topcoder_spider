<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br> <br>public class Justify {<br>  static void write(String s) {<br>    System.out.print(s);<br>  }<br>  <br>  static int words, pars;<br>  static String[] word;<br>  static int[] wordlen;<br>  static boolean[] done;<br>  static double[] bestw;<br>  static int[] wol;<br>  static int w;<br>  <br>  public static String[] justify(String[] par, int ww) {<br>    w = ww + 1;<br>    words = 0;<br>    pars = par.length;<br>    for(int i=0; i&lt;pars; i++) {<br>      StringTokenizer tok = new StringTokenizer(par[i], " ");<br>      while(tok.hasMoreTokens()) {<br>        words++;<br>        tok.nextToken();<br>      }<br>    }<br>    word = new String[words];<br>    wordlen = new int[words];<br>    int tmp = 0;<br>    for(int i=0; i&lt;pars; i++) {<br>      StringTokenizer tok = new StringTokenizer(par[i], " ");<br>      while(tok.hasMoreTokens()) {<br>        word[tmp] = tok.nextToken();<br>        wordlen[tmp] = word[tmp].length() + 1;<br>        tmp++;        <br>      }<br>    }<br>    done = new boolean[words+1];<br>    bestw = new double[words+1];<br>    wol = new int[words+1];<br>    <br>    double resw = getBestw(0);<br>    //write(resw + "\n");<br>    <br>    LinkedList rest = new LinkedList();<br>    int gehad = 0;<br>    while(true) {<br>      String s = "";<br>      int ntmp = wol[gehad];<br>      for(int i=0; i&lt;ntmp; i++) {<br>        s = s + " " + word[gehad];<br>        gehad++;<br>      }<br>      s = s.substring(1);<br>      rest.add(s);<br>      if(gehad == words) break;<br>    }<br>    <br>    String[] res = new String[rest.size()];<br>    int p = 0;<br>    for(Iterator it=rest.listIterator(); it.hasNext(); ) {<br>      String s = (String)it.next();<br>      res[p++] = s;<br>    }<br>    return res;<br>  }<br>  <br>  public static double getBestw(int l) {<br>    if(done[l]) return bestw[l];<br>    <br>    double res;<br>    int n;<br>    <br>    if(l == words) {<br>      res = 0.0;<br>      n = 0;<br>    } else if(l == words - 1) {<br>      res = 0.0;<br>      n = 1;<br>    } else {<br>      int sum = 0;<br>      for(int i=l; i&lt;words; i++)<br>        sum+= wordlen[i];<br>      if(sum&lt;w) {<br>        res = 1.0;<br>        n = words - l;<br>      } else {<br>        double wtmp = wordlen[l] + wordlen[l+1];<br>        if(wtmp &gt; w) {<br>          res = -1.0;<br>          n = -1;<br>        } else {<br>          n = -1;<br>          res = Double.MAX_VALUE;<br>          int ntmp = 2;<br>          double restmp = (w + ntmp - wtmp - 1)/(double)(ntmp-1);<br>          while(true) {<br>            if(getBestw(l + ntmp) &gt;= 0.0 &amp;&amp; Math.max(restmp, getBestw(l + ntmp)) &lt; res) {<br>              res = Math.max(restmp, getBestw(l + ntmp));<br>              n = ntmp;<br>            }<br>            <br>            if(l+ntmp == words || wtmp + wordlen[l+ntmp] &gt; w) break;<br>            <br>            wtmp+= wordlen[l+ntmp];<br>            ntmp++;            <br>            restmp = (w + ntmp - wtmp - 1)/(double)(ntmp-1);<br>          }<br>          if(res == Double.MAX_VALUE) res = -1.0;<br>        }<br>      }<br>    }<br>    <br>    done[l] = true;<br>    bestw[l] = res;<br>    wol[l] = n;<br>    <br>    return res;<br>  }<br>}<br></td>