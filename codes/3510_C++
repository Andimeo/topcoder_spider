<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;set&gt;<br>#include &lt;map&gt;<br>#include &lt;queue&gt;<br>#include &lt;iostream&gt;<br>#include &lt;sstream&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;ctype.h&gt;<br>#include &lt;stdio.h&gt;<br>using namespace std;<br> <br>#define FF(v,a) for(int (v)=0;(v)&lt;a;(v)++)<br> <br>#define FORI(s,e) for(int i=(s);i&lt;(e);i++)<br>#define FORJ(s,e) for(int j=(s);j&lt;(e);j++)<br>#define FORK(s,e) for(int k=(s);k&lt;(e);k++)<br>#define FORL(s,e) for(int l=(s);l&lt;(e);l++)<br>#define FORM(s,e) for(int m=(s);m&lt;(e);m++)<br> <br>template&lt;class T&gt; vector&lt;T&gt; parsestring(string s,string delim=" ")<br>{<br>  int pos;<br>  string subs;<br>  vector&lt;T&gt; res;<br>  while(s.size()&gt;0)<br>  {<br>    while(s.size()&gt;0 &amp;&amp; delim.find(s[0])!=string::npos) s.erase(0,1);<br>    while(s.size()&gt;0 &amp;&amp; delim.find(s[s.size()-1])!=string::npos) s.erase(s.size()-1,1);<br> <br>    if(s.size()==0) break;<br> <br>    pos=s.find_first_of(delim);<br>    if(pos==string::npos)<br>    {<br>      subs=s;<br>      s="";<br>    }<br>    else<br>    {<br>      subs=s.substr(0,pos);<br>      s=s.substr(pos+1);<br>    }<br> <br>    T tmp;<br>    istringstream iss(subs);<br>    iss &gt;&gt; tmp;<br>    res.push_back(tmp);<br>  }<br> <br>  return res;<br>}<br> <br>#define pstr parsestring&lt;string&gt;<br>#define pint parsestring&lt;int&gt;<br>#define pdbl parsestring&lt;double&gt;<br> <br>class NestedRandomness {<br>  public:<br>  int t;<br>  double mem[1001][11];<br>  double rec(int N, int nestings)<br>  {<br>    if(nestings==0)<br>    {<br>      if(N==t) return 1.0;<br>      return 0.0;<br>    }<br>    if(N==0) return 0;<br>    if(mem[N][nestings]!=-1) return mem[N][nestings];<br>    double ret=0;<br>    FORI(0,N) ret+=rec(i,nestings-1);<br>    ret/=N;<br>    mem[N][nestings]=ret;<br>    return ret;<br>  }<br>  double probability(int N, int nestings, int target) {<br>    FORI(0,1001) FORJ(0,11) mem[i][j]=-1;<br>    t=target;<br>    return rec(N,nestings);<br>  }<br>};<br> <br>// Powered by PopsEdit<br></td>