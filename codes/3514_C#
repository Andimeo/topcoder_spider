<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Text;<br>using System.Collections;<br><br>public class QuadrilateralSearch {<br>    public double findLargest(int dr, int n, int c, int g) {<br>        double res = 0;<br><br>    double[] x = new double[c], y = new double[c];<br><br>    int i,j,k;<br>    int p = 0;<br>    for (i = 0; i &lt; c; i++)<br>    {<br>      x[i] = Math.Cos(Math.PI*2*p/n);<br>      y[i] = Math.Sin(Math.PI*2*p/n);<br>      p = (p+g)%n;<br>    }<br><br>    for (i = 0; i &lt; c; i++)<br>      for (j = i+1; j &lt; c; j++)<br>      {<br>        double d = Math.Sqrt((x[i]-x[j])*(x[i]-x[j])+(y[i]-y[j])*(y[i]-y[j]));<br>        double a,b,cx;<br>        a = y[j]-y[i];<br>        b = x[i]-x[j];<br>        cx = -a*x[i]-b*y[i];<br><br>        double t = Math.Sqrt(a*a+b*b);<br>        double gm = -1E+7, lm = -1E+7;<br>        for (k = 0; k &lt; c; k++)<br>        {<br>          double e = a*x[k]+b*y[k]+cx;<br>          if (e &gt; 0)<br>          {<br>            if (e &gt; gm) { gm = e; }<br>          } <br>          else<br>          {<br>            if (-e &gt; lm) { lm = -e;}<br>          }<br>        }<br>        if ((gm*d*dr*dr/t+lm*d*dr*dr/t)/8 &gt; res) res = (gm*d*dr*dr/t+lm*d*dr*dr/t)/8;<br>      }<br><br><br><br>        return res;<br>    }<br><br>}<br><br><br><br>// Powered by FileEdit<br>// Powered by CodeProcessor<br></td>