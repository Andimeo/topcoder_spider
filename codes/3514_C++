<td class="problemText" colspan="8" valign="middle" align="left">
            // another fine solution by misof<br>#include &lt;algorithm&gt;<br> <br>#include &lt;iostream&gt;<br>#include &lt;sstream&gt;<br>#include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;queue&gt;<br>#include &lt;set&gt;<br>#include &lt;map&gt;<br> <br>#include &lt;cstdio&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cctype&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cassert&gt;<br>using namespace std;<br> <br>#define REP(i,n) for(int i=0;i&lt;(n);++i)<br>#define FOR(i,a,b) for(int i=(a);i&lt;=(b);++i)<br> <br>/////////////////// CODE WRITTEN DURING THE COMPETITION FOLLOWS ////////////////////////////////<br> <br>double X[1000], Y[1000];<br>double alpha;<br>int num[1000];<br> <br>int isright(int a, int b, int c) {<br>  if (c &lt; min(a,b)) return 0;<br>  if (c &gt; max(a,b)) return 0;<br>  return 1;<br>}<br> <br>class QuadrilateralSearch {<br>public:<br>  double findLargest(int d, int n, int c, int g) {<br>    alpha = (2*M_PI) / n;<br> <br>    int kde = 0;<br>    REP(i,c) { <br>      X[i] = 0.5 * d * cos( alpha * kde );<br>      Y[i] = 0.5 * d * sin( alpha * kde );<br>      num[i] = kde;<br>      kde += g;<br>      kde %= n;<br>    }<br> <br>    double res = 0.0;<br>    FOR(i,0,c-1) FOR(j,i+1,c-1) {<br>      double larea = -1e15;<br>      double rarea = -1e15;<br>      FOR (k,0,c-1) if (k!=i) if (k!=j) {<br>        double area = fabs( 0.5 * (    <br>                X[i]*Y[j] + X[j]*Y[k] + X[k]*Y[i]<br>                - X[j]*Y[i] - X[k]*Y[j] - X[i]*Y[k]<br>              ));<br>        if (isright(num[i],num[j],num[k])) {<br>          rarea &gt;?= area;<br>        } else {<br>          larea &gt;?= area;<br>        }<br>      }<br>      res &gt;?= (rarea + larea);<br>    }<br>    return res;<br>  }<br> <br>// }}} keep<br>};<br> <br> <br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003]<br>// Powered by CodeProcessor<br></td>