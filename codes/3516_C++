<td class="problemText" colspan="8" valign="middle" align="left">
            #include  &lt;vector&gt;<br>#include  &lt;string&gt;<br>#include  &lt;algorithm&gt;<br>#include  &lt;cstdio&gt;<br> <br>using namespace std;<br> <br>class DeadCode<br>{<br>  private:<br> <br>    void floyd(int m[50][50], int n)<br>    {<br>      for (int k=0; k&lt;n; k++)<br>        for (int i=0; i&lt;n; i++)<br>          for (int j=0; j&lt;n; j++)<br>            if (m[i][k] &amp;&amp; m[k][j])    m[i][j] = 1;<br>    }<br> <br>  public:<br> <br>    int deadCount(vector&lt;string&gt; code)<br>    {<br>      int    graph[50][50];<br>      int    ret[50];<br>      int    n = code.size();<br> <br>      fill( *graph, *graph + 50*50, 0);<br>      fill( ret, ret+50, 0);<br> <br>      for (int i=0; i&lt;n; i++)<br>        graph[i][i] = 1;<br> <br>      for (int i=0; i&lt;n; i++)<br>        if (code[i][0] == 'R')<br>        {<br>          ret[i] = 1;<br>          continue;<br>        }<br>        else<br>        {<br>          int    x, y;<br> <br>          sscanf(code[i].c_str(), "%*s %d %*s %d ", &amp;x, &amp;y);<br> <br>          graph[i][x] = 1;<br>          graph[i][y] = 1;<br>        }<br> <br>      floyd(graph, n);<br> <br>      int    count = 0;<br> <br>      for (int i=0; i&lt;n; i++)<br>      {<br>        if (!graph[0][i])<br>        {<br>          count++;<br>          continue;<br>        }<br> <br>        bool  flag = false;<br> <br>        for (int j=0; j&lt;n; j++)<br>        {<br>          if (!ret[j])  continue;<br> <br>          if (graph[i][j])<br>          {<br>            flag = true;<br>            break;<br>          }<br>        }<br> <br>        if (flag == false)    count++;<br>      }<br> <br>      return count;<br>    }<br>};<br></td>