<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;sstream&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;cmath&gt;<br>#include &lt;iostream&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;string&gt;<br>#include &lt;vector&gt;<br><br>using namespace std;<br><br>typedef long long ll;<br>typedef pair&lt;int,int&gt; pii;<br>typedef pair&lt;double,double&gt; pdd;<br>typedef vector&lt;int&gt; vi;<br>typedef vector&lt;string&gt; vs;<br>typedef map&lt;string,int&gt; msi;<br><br>struct TreeSpreading {<br>  ll ways[11][11][11][11][5];<br><br>  ll Ways(int a, int b, int c, int d, int x) {<br>    if (a+b+c+d == 0) return 1;<br>    ll &amp;r = ways[a][b][c][d][x];<br>    if (r == -1) {<br>      r = 0;<br>      if (a &amp;&amp; x != 0) r += Ways(a-1, b, c, d, 0);<br>      if (b &amp;&amp; x != 1) r += Ways(a, b-1, c, d, 1);<br>      if (c &amp;&amp; x != 2) r += Ways(a, b, c-1, d, 2);<br>      if (d &amp;&amp; x != 3) r += Ways(a, b, c, d-1, 3);<br>    }<br>    return r;<br>  }<br>  <br>  TreeSpreading() {<br>    memset(ways, -1, sizeof(ways));<br>  }<br><br>   long long countArrangements(int a, int b, int c, int d) {<br>      return Ways(a,b,c,d,4);<br>   }<br><br>};<br><br><br>// Powered by FileEdit<br>// Powered by CodeProcessor<br></td>