<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>import java.util.regex.*;<br>import java.text.*;<br>import java.math.*;<br>public class TreeSpreading {<br>  long[][][][][] memo;<br>  public long countArrangements(int a, int b, int c, int d) {<br>    memo = new long[a+1][b+1][c+1][d+1][5];<br>    for(int i = 0; i &lt; memo.length; i++){<br>      for(int j = 0; j &lt; memo[i].length; j++){<br>        for(int k = 0; k &lt; memo[i][j].length; k++){<br>          for(int l = 0; l &lt; memo[i][j][k].length; l++){<br>            Arrays.fill(memo[i][j][k][l],-1);<br>          }<br>        }<br>      }<br>    }<br>    return doit(a,b,c,d,4);<br>  }<br>  long doit(int a, int b, int c, int d, int last){<br>    if(a == 0 &amp;&amp; b == 0 &amp;&amp; c == 0 &amp;&amp; d == 0) return 1;<br>    if(memo[a][b][c][d][last] != -1) return memo[a][b][c][d][last];<br>    long ret = 0;<br>    if(last != 0 &amp;&amp; a &gt; 0) ret += doit(a-1,b,c,d,0);<br>    if(last != 1 &amp;&amp; b &gt; 0) ret += doit(a,b-1,c,d,1);<br>    if(last != 2 &amp;&amp; c &gt; 0) ret += doit(a,b,c-1,d,2);<br>    if(last != 3 &amp;&amp; d &gt; 0) ret += doit(a,b,c,d-1,3);<br>    memo[a][b][c][d][last] = ret;<br>    return ret;<br>  }<br> <br>}<br> <br>// Powered by PopsEdit<br>// Powered by CodeProcessor<br></td>