<td class="problemText" colspan="8" valign="middle" align="left">
            Public Class TreeSpreading<br>        Private mMemo(,,,,) As Long<br>        Public Function countArrangements(ByVal a As Integer, ByVal b As Integer, ByVal c As Integer, ByVal d As Integer) As Long<br> <br>            ReDim mMemo(3, a, b, c, d)<br>            Dim i, j, k, l, m As Integer<br>            For i = 0 To a<br>                For j = 0 To b<br>                    For k = 0 To c<br>                        For l = 0 To d<br>                            For m = 0 To 3<br>                                mMemo(m, i, j, k, l) = -1<br>                            Next<br>                        Next<br>                    Next<br>                Next<br>            Next<br> <br>            Return countSome(a, b, c, d, 0)<br> <br> <br>        End Function<br> <br>        Private Function countSome(ByVal a As Integer, ByVal b As Integer, ByVal c As Integer, ByVal d As Integer, ByVal iNoStart As Integer) As Long<br>            If a = 0 And b = 0 And c = 0 And d = 0 Then Return 1<br>            If iNoStart &gt; 0 Then<br>                If mMemo(iNoStart - 1, a, b, c, d) &gt; -1 Then Return mMemo(iNoStart - 1, a, b, c, d)<br>            End If<br> <br>            Dim iTot As Long = 0<br> <br>            If iNoStart &lt;&gt; 1 And a &gt; 0 Then<br>                iTot += countSome(a - 1, b, c, d, 1)<br>            End If<br> <br>            If iNoStart &lt;&gt; 2 And b &gt; 0 Then<br>                iTot += countSome(a, b - 1, c, d, 2)<br>            End If<br> <br>            If iNoStart &lt;&gt; 3 And c &gt; 0 Then<br>                iTot += countSome(a, b, c - 1, d, 3)<br>            End If<br> <br>            If iNoStart &lt;&gt; 4 And d &gt; 0 Then<br>                iTot += countSome(a, b, c, d - 1, 4)<br>            End If<br> <br>            If iNoStart &gt; 0 Then<br>                mMemo(iNoStart - 1, a, b, c, d) = iTot<br>            End If<br>            Return iTot<br> <br>        End Function<br> <br>    End Class<br></td>