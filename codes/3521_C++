<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;iostream&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;sstream&gt;<br><br>#include &lt;cstdio&gt;<br>#include &lt;cstdlib&gt;<br><br>#include &lt;cmath&gt;<br><br>#include &lt;functional&gt;<br>#include &lt;numeric&gt;<br>#include &lt;cctype&gt;<br>#include &lt;climits&gt;<br><br>#include &lt;queue&gt;<br>#include &lt;map&gt;<br><br>using namespace std;<br><br>typedef vector&lt;string&gt; VS;<br><br>#define si size()<br>#define cs c_str()<br>#define pb(x) push_back((x))<br>#define mp make_pair<br><br>#define fi(i,S) for (int i=0;i&lt;(S);i++)<br><br>int dx[]={1,0,-1,0};<br>int dy[]={0,1,0,-1};<br>int reach[25][25][4];<br>int ok[25][25][4];<br>int clear[50][50];<br>VS m;<br>int r,c;<br>int check(int a,int b,int d)<br>{<br>  //printf("%d %d\n",m.si,m[0].si);<br>  //printf("check (%d,%d)\n",2*a+dx[d],2*b+dy[d]);<br>  if(2*a+dx[d]&gt;=0 &amp;&amp; 2*a+dx[d]&lt;m.si &amp;&amp; 2*b+dy[d]&gt;=0 &amp;&amp; 2*b+dy[d]&lt;m[0].si &amp;&amp;<br>    m[2*a+dx[d]][2*b+dy[d]]!=' ')<br>    return 1;<br>  return 0;<br>}<br><br>int dfs(int i,int j,int d,int start)<br>{<br>  //printf("(%d,%d)\n",i,j);<br>  if(i==r &amp;&amp; j==c &amp;&amp; !start) return 1;<br>  if(reach[i][j][d]) return ok[i][j][d];<br>  reach[i][j][d]=1;<br>  fi(k,4)<br>  {<br>    if((d+2)%4==k) continue;<br>    if(check(i,j,k))<br>    {<br>      //printf("go (%d,%d) in dir (%d,%d)\n",i,j,dx[k],dy[k]);<br>      int result=dfs(i+dx[k],j+dy[k],k,0);<br>      clear[2*i+dx[k]][2*j+dy[k]]|=result;<br>      ok[i][j][d]|=result;<br>    }<br>  }<br>  return ok[i][j][d];<br>}<br>  <br>class SnowClearing {<br>  public:<br>  int unreachable(vector &lt;string&gt; citymap, int row, int column) <br>  {<br>    row--; column--; r=row; c=column;m=citymap;<br>    memset(reach,0,sizeof(reach));<br>    memset(ok,0,sizeof(ok));<br>    memset(clear,0,sizeof(clear));<br>    dfs(r,c,0,1);<br>    dfs(r,c,1,1);<br>    dfs(r,c,2,1);<br>    dfs(r,c,3,1);<br>    int ret=0;<br>    fi(i,m.si)fi(j,m[0].si) <br>      if (m[i][j]=='-' || m[i][j]=='|')<br>        ret+=1-clear[i][j];<br>    return ret;<br>  }<br><br><br>};<br><br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003]<br>// Powered by CodeProcessor<br></td>