<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;iostream&gt;<br>#include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;functional&gt;<br>#include &lt;numeric&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cmath&gt;<br>#include &lt;queue&gt;<br>using namespace std;<br>typedef vector&lt;int&gt; VI;  typedef vector&lt;vector&lt;int&gt; &gt; VVI;<br>typedef vector&lt;string&gt; VS;  typedef vector&lt;vector&lt;string&gt; &gt; VVS;<br>typedef signed long long i64;  typedef unsigned long long u64;<br><br>vector&lt;string&gt; tokenize(string s, string ch) {<br>  vector&lt;string&gt; ret;<br>  for( int p = 0, p2; p &lt; s.size(); p = p2+1 ) {<br>    p2 = s.find_first_of(ch, p);<br>    if( p2 == -1 ) p2 = s.size();<br>    if( p2-p &gt; 0 ) ret.push_back( s.substr(p, p2-p) );<br>  }<br>  return ret;<br>}<br><br>vector&lt;int&gt; tokint(string s, string ch) {<br>  vector&lt;int&gt; ret;<br>  vector&lt;string&gt; p = tokenize(s, ch);<br>  for( int i = 0; i &lt; p.size(); i++ )<br>    ret.push_back( atoi(p[i].c_str()) );<br>  return ret;<br>}<br><br>vector&lt;vector&lt;int&gt; &gt; tokmat(vector&lt;string&gt; s, string ch) {<br>  vector&lt;vector&lt;int&gt; &gt; ret;<br>  for( int i = 0; i &lt; s.size(); i++ )<br>    ret.push_back( tokint(s[i], ch) );<br>  return ret;<br>}<br><br>VVI a;<br>int memo[51][51][51];<br>int doit(int x, int c1, int c2) {<br>  int &amp;ret = memo[x][c1][c2];<br>  if( ret != -1 ) return ret;<br>  if( x == a[0].size() ) return ret = 0;<br>  ret = 1000000000;<br>  for( int c = 0; c &lt; a.size(); c++ ) if( c != c1 || c != c2 ) {<br>    ret &lt;?= a[c][x] + doit(x+1, c2, c);<br>  }<br>  return ret;<br>}<br><br>class ContractWork {<br>public:<br>int minimumCost(vector &lt;string&gt; A, int b) {<br>  memset(memo, -1, sizeof(memo));<br>  a = tokmat(A, " ");<br>  return doit(0, a.size(), a.size());<br>}<br>};<br><br><br>// Powered by FileEdit<br></td>