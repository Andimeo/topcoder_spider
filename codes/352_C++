<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;vector&gt;<br>#include &lt;string&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;set&gt;<br>#include &lt;iostream&gt;<br>#include &lt;map&gt;<br>#include &lt;sstream&gt;<br> <br>enum { IS, LT, LTE, GT, GTE, NT, BET };<br> <br>class rule {<br>public:<br>  int comp;<br>  int d1;<br>  int d2;<br>  bool valid( int i ) {<br>    switch( comp ) {<br>      case IS:<br>        return i == d1;<br>      case LT:<br>        return i &lt; d1;<br>      case LTE:<br>        return i &lt;= d1;<br>      case GT:<br>        return i &gt; d1;<br>      case GTE:<br>        return i &gt;= d1;<br>      case NT:<br>        return i != d1;<br>      case BET:<br>        return i &gt;= d1 &amp;&amp; i &lt;= d2;<br>    }<br>    return false;<br>  }<br>};<br> <br>map&lt; char, vector&lt; rule &gt; &gt; rls;<br>vector&lt; int &gt; mlpts;<br> <br>void pse( vector&lt; string &gt; r ) {<br>  int i;<br>  for( i = 0; i &lt; r.size(); i++ ) {<br>    char c = r[ i ][ 0 ];<br>    char comp1 = r[ i ][ 1 ];<br>    char comp2 = r[ i ][ 2 ];<br>    rule rl;<br>    int ps;<br>    switch( comp1 ) {<br>      case '=': ps = 3; rl.comp = IS; break;<br>      case '!': ps = 3; rl.comp = NT; break;<br>      case 'B': ps = 2; rl.comp = BET; break;<br>      case '&lt;': if( comp2 == '=' ) {<br>        ps = 3; rl.comp = LTE; break;<br>            } else {<br>              ps = 2; rl.comp = LT; break;<br>            }<br>      case '&gt;': if( comp2 == '=' ) {<br>        ps = 3; rl.comp = GTE; break;<br>            } else {<br>              ps = 2; rl.comp = GT; break;<br>            }<br>    }<br>    rl.d1 = atoi( r[ i ].c_str() + ps );<br>    if( rl.comp == BET )<br>      rl.d2 = atoi( strchr( r[ i ].c_str() + ps, ',' ) + 1 );<br>    rls[ c ].push_back( rl );<br>  }<br>};<br> <br>class RuleEngine {<br>public:<br>  string countSets( vector&lt; string &gt; r1, vector&lt; string &gt; r2 ) {<br>    pse( r1 );<br>    pse( r2 );<br>    map&lt; char, vector&lt; rule &gt; &gt;::iterator it;<br>    long long oval = 1;<br>    for( it = rls.begin(); it != rls.end(); it++ ) {<br>      int v;<br>      int cnt = 0;<br>      for( v = -10; v &lt;= 10; v++ ) {<br>        bool vld = true;<br>        int i;<br>        for( i = 0; i &lt; it-&gt;second.size(); i++ )<br>          vld &amp;= it-&gt;second[ i ].valid( v );<br>        if( vld )<br>          cnt++;<br>      }<br>      oval *= cnt;<br>    }<br>    stringstream str;<br>    str &lt;&lt; oval;<br>    return str.str();<br>  }<br>};<br></td>