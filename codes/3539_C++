<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;vector&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;string&gt;<br>#include &lt;math.h&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;iostream&gt;<br>#include &lt;list&gt;<br>#include &lt;queue&gt;<br>#include &lt;set&gt;<br>#include &lt;map&gt;<br> <br>using namespace std;<br> <br>#define CLASS Highscore<br>#define FOR(p,it,k) for(it=p; it &lt; k;it++)<br>#define ALL(s) s.begin(), s.end()<br>#define SORTALL(vec) sort(ALL(vec));<br>#define PERM(vec)  (next_permutation(ALL(vec)))<br>#define DLVEC(a,vec) a = vec.size();<br> <br>//typedef long long LL; <br>typedef vector&lt;int&gt; VI; <br>typedef vector&lt;string&gt; VS;<br>typedef pair&lt;int,int&gt; PII;<br>typedef vector&lt;PII&gt; VPII;<br> <br>vector&lt;string&gt; split( const string&amp; s, const string&amp; delim =" " ) { vector&lt;string&gt; res; string t; for ( unsigned int i = 0 ; i != s.size() ; i++ ) { if ( delim.find( s[i] ) != string::npos ) { if ( !t.empty() ) { res.push_back( t ); t = ""; } } else { t += s[i]; } } if ( !t.empty() ) { res.push_back(t); } return res; }<br>inline bool zawieraS(const string&amp; s, const string&amp; delim =" " ) {  return (s.find(delim) != string::npos);}<br>template&lt;class A,class B&gt; inline bool zawieraV(const A&amp;a, const B&amp;b) {  return find(a.begin(),a.end(),b)!=a.end();}<br> <br>//sscanf(tab[x].c_str(),"%d%d%d",&amp;w1,&amp;w2,&amp;w3);<br>//x = atoi(tab.c_str());<br>//int num = sscanf(word.c_str(), "%d-%d", &amp;val1, &amp;val2);<br> <br>VI::iterator id;<br>VI::iterator id1;<br>VI::iterator id2;<br>VS::iterator is; <br> <br> <br>class CLASS<br>{<br>public:<br>  <br>  int getRank(vector &lt;int&gt; scores, int newscore, int places)<br>  {    <br>    int i,j,k,len;<br>    DLVEC(len,scores);<br> <br>    if ((places == len) &amp;&amp; ( newscore &lt;= scores.at(len-1)))<br>      return -1;<br>    i = 1;<br>    if (!len) return 1;<br>    while (scores.at(i-1) &gt; newscore)<br>    {<br>      i++;<br>      if (i &gt; len)<br>        return i;<br>    }    <br> <br> <br>    return i;<br>  }<br> <br>};<br> <br>/*<br>int main()<br>{<br>  CLASS a;<br> <br>  return 0;<br>}<br>*/<br> <br> <br>//  reverse(A, A + 6);<br>//  double* y = find(A,A+6,1.4);<br>//  vector &lt;int&gt; a;  a.size(); a.push_back(1); a.clear(); a.pop_back(); a.erase(ALL(a));  <br> <br>//  list &lt;int&gt; L; L.back(); L.front(); L.insert(L.begin(),2); L.max_size(); L.pop_back();<br>//  L.pop_front(); L.remove(1); /*wszystkie rowne 1*/ //L.sort(); <br>//  L.splice(L.begin(), list&lt;int&gt; x); L.swap(list &lt;int&gt; x); /*zamiana list*/<br>  <br>//  deque &lt;int&gt; xx; xx.swap(deque&lt;int&gt;x);<br>//  stack &lt;int&gt; sss; sss.pop(); sss.push(2); sss.empty(); sss.top();<br>//  priority_queue &lt;int&gt; pq; pq.pop(); pq.push(9); pq.empty(); pq.top();<br> <br>//  set - unique, multiset nie<br>//  set &lt;int&gt; s; s.count(1); //- ile jest elementow o wartosci 1 <br>//  s.equal_range(1); //zwraca pare iteratorow w zasiegu ktorych sa wszystkie 1<br>//  s.lower_bound(1); //- pierwszy element nie mniejzy niz 1<br>//  s.upper_bound(1); //pierwszy wiekszy od 1<br>//  multiset &lt;int&gt; ms; <br> <br>//  map &lt;int,int&gt; mp; multimap&lt;int,int&gt;mlmp;<br>//  mp.count(1); mp.lower_bound(1); mp[1]; mp.upper_bound(1);<br> <br>//  pair&lt;int,int&gt;p; p.first=1; p.second=2;<br>//  bitset &lt;32&gt; mask;<br> <br>//  string s; s.c_str(); s.data(); //tablice z nullem i bez<br>//  s.compare("aa"); s.copy(buf,0,3); s.find("aaa"); s.replace(1,4,buf,2,5); s.substr(2,5); s.swap(buf);<br>//  string s = "asdfghj"; cout &lt;&lt; s.substr(2,1) &lt;&lt; endl; //drugi parametr to ilosc<br>//  char alpha[] = "abcdefghijklmnopqrstuvwxyz";rotate(alpha, alpha + 13, alpha + 26);<br>  <br>//  int A1[] = { 3, 1, 4, 1, 5, 9, 3 };<br>//  int A2[] = { 3, 1, 4, 2, 8, 5, 7 };<br>//  int N = 4;  //ile porownujemy<br>//  cout &lt;&lt; "Result of comparison: " &lt;&lt; equal(A1, A1 + N, A2) &lt;&lt; endl;<br>  <br>//  vector&lt;double&gt; V(4);<br>//  fill(ALL(V), 137); <br>//  vector&lt;int&gt; V;generate(ALL(V), rand);<br> <br>//  vector&lt;int&gt; V;<br>//  vector&lt;int&gt;::iterator new_end = unique(ALL(V));<br>//  copy(V.begin(), new_end, ostream_iterator&lt;int&gt;(cout, " "));<br> <br>//  min(1,2); max(1,2); min_element(ALL(a)); max_ele...<br></td>