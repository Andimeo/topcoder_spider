<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;iostream&gt;<br>#include &lt;sstream&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;set&gt;<br>#include &lt;map&gt;<br>#include &lt;queue&gt;<br>#include &lt;stack&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cctype&gt;<br>#include &lt;cmath&gt;<br> <br>using namespace std;<br> <br>class Disaster {<br> <br>  int n;<br>  double r[50][50];<br>  double b[50];<br>  double t[50];<br>  <br>  public:<br>  double expected(double B, vector &lt;string&gt; roads) {<br>    n=roads.size();<br>    for (int i=0; i&lt;n; i++)<br>    {<br>      istringstream in(roads[i]);<br>      for (int j=0; j&lt;n; j++) in &gt;&gt; r[i][j];<br>    }<br>    <br>    for (int i=0; i&lt;n; i++)   b[i]=0;<br>    b[0]=1;<br>    <br>    double sol=0;<br>    <br>    for (int k=1; k&lt;=n*n; k++)<br>    {<br>      for (int i=0; i&lt;n; i++)  t[i]=b[i];<br>      for (int i=0; i&lt;n; i++) b[i]=0;<br>      <br>      for (int i=0; i&lt;n; i++) if (t[i]!=0)<br>      for (int j=0; j&lt;n; j++) b[j]=max(b[j], t[i]*r[i][j]);<br>      <br>      double P=b[1];<br>      double x=1/(B+B*k);<br>      double E=x*P*pow((1-B*x), k);<br>      sol=max(sol, E);<br>    }<br>    <br>    return sol;<br>  }<br>};<br> <br>// Powered by PopsEdit<br></td>