<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;string&gt;<br>#include &lt;strstream&gt;<br>#include &lt;vector&gt;<br> <br>class Solver<br>{<br>public:<br> <br>vector &lt;string&gt; pathStart;<br>vector &lt;string&gt; pathEnd;<br>set &lt;string&gt; beenTo;<br> <br>int getLongestPath(string s1, string s2)<br>{<br>  if (beenTo.count(s2))<br>    return 0;<br>  int best = -10000;<br>  for (int i = 0; i &lt; pathStart.size(); i++)<br>  {<br>    string src = pathStart[i];<br>    string dst = pathEnd[i];<br>    if (src == s1 &amp;&amp; !beenTo.count(dst))<br>    {<br>      beenTo.insert(dst);<br>      int count = 1 + getLongestPath(dst, s2);<br>      beenTo.erase(dst);<br>      if (count &gt; best)<br>        best = count;<br>    }<br>  }<br>  return best;<br>}<br> <br>int largest(vector&lt;string&gt; lovers)<br>{<br>  vector &lt;string&gt; people;<br>  beenTo.clear();<br>  pathStart.clear();<br>  pathEnd.clear();<br> <br>  for (int i = 0; i &lt; lovers.size(); i++)<br>  {<br>    string s1, s2, s3;<br>    istrstream in(lovers[i].c_str());<br>    in &gt;&gt; s1 &gt;&gt; s2 &gt;&gt; s3;<br>    pathStart.push_back(s1);<br>    pathEnd.push_back(s3);<br>    people.push_back(s1);<br>  }<br> <br>  int best = -10000;<br>  for (int i = 0; i &lt; people.size(); i++)<br>  {<br>    int count = getLongestPath(people[i], people[i]);<br>    if (count &gt; best)<br>      best = count;<br>  }<br> <br>  return best;<br>}<br> <br>};<br></td>