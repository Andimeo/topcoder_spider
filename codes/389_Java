<td class="problemText" colspan="8" valign="middle" align="left">
            /*<br>*/<br> <br>import java.util.*;<br> <br>public class Solver {<br>  int N;<br>  int adj[][] = new int[256][256];<br>  int nadj[] = new int[256];<br>  String names[] = new String[256];<br> <br>  boolean used[] = new boolean[256];<br>  int start;<br>  int maxn;<br> <br>  void search(int a, int n) {<br>    //System.out.println("search " + names[a] + " " + n);<br>    if(a == start) {<br>      if(n &gt; maxn) maxn = n;<br>      return;<br>    }<br> <br>    for(int i = 0; i &lt; nadj[a]; i++) {<br>      int b = adj[a][i];<br>      if(used[b]) continue;<br>      used[b] = true;<br>      search(b, n + 1);<br>      used[b] = false;<br>    }<br>  }<br> <br>  int getname(String s) {<br>    for(int i = 0; i &lt; N; i++) {<br>      if(s.equals(names[i])) return i;<br>    }<br>    names[N] = s;<br>    return N++;<br>  }<br> <br>  void addedge(int a, int b) {<br>    for(int i = 0; i &lt; nadj[a]; i++)<br>      if(adj[a][i] == b) return;<br>    adj[a][nadj[a]++] = b;<br>  }<br> <br>  public int largest(String[] data) {<br>    for(int i = 0; i &lt; data.length; i++) {<br>      StringTokenizer st = new StringTokenizer(data[i]);<br>      String x = st.nextToken();<br>      st.nextToken();<br>      String y = st.nextToken();<br>      int a = getname(x);<br>      int b = getname(y);<br>      addedge(a, b);<br>    }<br> <br>    for(start = 0; start &lt; N; start++) {<br>      System.out.println("START = " + start);<br>      for(int i = 0; i &lt; nadj[start]; i++) {<br>        int a = adj[start][i];<br>        used[a] = true;<br>        search(a, 1);<br>        used[a] = false;<br>      }<br>    }<br>    return maxn;<br>  }<br>  <br>  public static void main(String[] args) {<br>    Solver temp = new Solver();<br> <br>    String data[] = {<br>      //"A LOVES B",<br>      //"B LOVES A"<br>//"ME LOVES YOU",<br> //"ME LOVES YOU",<br> //"YOU LOVES ME"<br>"A LOVES B",<br> "B LOVES C",<br> "C LOVES A",<br> "D LOVES E",<br> "E LOVES F",<br> "F LOVES G",<br> "G LOVES D",<br>    };<br> <br>    System.out.println(temp.largest(data));<br>  }<br>}<br> <br> <br>// Powered by FileEdit<br></td>