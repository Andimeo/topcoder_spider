<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;iostream&gt;<br>#include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;functional&gt;<br>#include &lt;numeric&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cmath&gt;<br>#include &lt;queue&gt;<br>using namespace std;<br>typedef vector&lt;int&gt; VI;  typedef vector&lt;vector&lt;int&gt; &gt; VVI;<br>typedef vector&lt;string&gt; VS;  typedef vector&lt;vector&lt;string&gt; &gt; VVS;<br>typedef signed long long i64;  typedef unsigned long long u64;<br><br>vector&lt;string&gt; tokenize(string s, string ch) {<br>  vector&lt;string&gt; ret;<br>  for( int p = 0, p2; p &lt; s.size(); p = p2+1 ) {<br>    p2 = s.find_first_of(ch, p);<br>    if( p2 == -1 ) p2 = s.size();<br>    if( p2-p &gt; 0 ) ret.push_back( s.substr(p, p2-p) );<br>  }<br>  return ret;<br>}<br><br>vector&lt;int&gt; tokint(string s, string ch) {<br>  vector&lt;int&gt; ret;<br>  vector&lt;string&gt; p = tokenize(s, ch);<br>  for( int i = 0; i &lt; p.size(); i++ )<br>    ret.push_back( atoi(p[i].c_str()) );<br>  return ret;<br>}<br><br>vector&lt;vector&lt;int&gt; &gt; tokmat(vector&lt;string&gt; s, string ch) {<br>  vector&lt;vector&lt;int&gt; &gt; ret;<br>  for( int i = 0; i &lt; s.size(); i++ )<br>    ret.push_back( tokint(s[i], ch) );<br>  return ret;<br>}<br><br>int spent[15001][51];<br>int spent2[15001][51];<br><br>class SalesPromotion {<br>public:<br>int bestPrice(int a, int b, int c, vector &lt;string&gt; D) {<br>  int i, j, k, x, y, z, n;<br>  int ret;<br>  VVI d = tokmat(D, " ");<br><br>  for( i = 0; i &lt;= a; i++ )<br>  for( j = 0; j &lt;= b; j++ )<br>    spent[i][j] = 1000000000;<br>  spent[a][b] = 0;<br>  for( i = 0; i &lt; d.size(); i++ ) {<br>    for( j = 0; j &lt;= a; j++ )<br>    for( k = 0; k &lt;= b; k++ )<br>      spent2[j][k] = 1000000000;<br>    for( j = 0; j &lt;= a; j++ )<br>    for( k = 0; k &lt;= b; k++ ) {<br>      if( j &gt;= d[i][0] )<br>        spent2[j-d[i][0]][k] &lt;?= spent[j][k];<br>      if( k )<br>        spent2[j][k-1] &lt;?= spent[j][k] + (d[i][1]+1)/2;<br>      spent2[j][k] &lt;?= spent[j][k] + (d[i][1]*(100-c)+99)/100;<br>    }<br>    memcpy(spent, spent2, sizeof(spent));<br>  }<br>  return spent[0][0];<br>}<br>};<br><br><br>// Powered by FileEdit<br></td>