<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;algorithm&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cctype&gt;<br>#include &lt;cmath&gt;<br>#include &lt;iostream&gt;<br>#include &lt;sstream&gt;<br>#include &lt;string&gt;<br>#include &lt;utility&gt;<br>#include &lt;vector&gt;<br>using namespace std;<br>#define REP(i,n) for(int _n=n, i=0;i&lt;_n;++i)<br>#define FOREACH(it,c) for(typeof((c).begin()) it=(c).begin();it!=(c).end();++it)<br>typedef long long LL;<br>typedef vector&lt;int&gt; VI;<br>typedef vector&lt;string&gt; VS;<br>template&lt;class T&gt; inline int size(const T&amp;c) { return c.size(); }<br>template&lt;class A,class B&gt; inline bool contains(const A&amp;a, const B&amp;b) {<br>  return find(a.begin(),a.end(),b)!=a.end();<br>}<br>int s2i(string s) { istringstream i(s); int x; i&gt;&gt;x; return x; }<br>VS split(string s,string del=" ") {<br>  s+=del[0];<br>  string w;<br>  VS res;<br>  FOREACH(it,s) {<br>    if(!contains(del,*it)) w+=*it;<br>    else if(w!="") { res.push_back(w); w=""; }<br>  }<br>  return res;<br>}<br>VI s2vi(string s,string del=" ") {<br>  VS v=split(s,del);<br>  VI res; FOREACH(it,v) res.push_back(s2i(*it));<br>  return res;<br>}<br> <br>int n;<br>int nrounds;<br>vector&lt;VI&gt; edge; // [i][round]<br>LL from[64];<br>LL from2[64];<br> <br>void cFrom() {<br>  REP(i,n) from[i] = 1LL&lt;&lt;i;<br>  REP(r,nrounds) {<br>    REP(i,n) from2[i]=from[i];<br>    REP(i,n) from2[edge[i][r]] |= from[i];<br>    REP(i,n) from[i]=from2[i];<br>  }<br>}<br> <br>struct CommunicableDisease {<br> <br>  // MAIN<br>  string findSource(vector &lt;string&gt; contact, string results) {<br>    n = size(contact);<br>    edge.resize(n);<br>    REP(i,n) edge[i]=s2vi(contact[i]);<br>    nrounds = size(edge[0]);<br>    cFrom();<br>    LL zero = 0;<br>    REP(i,n) {<br>      if(results[i]!='C') <br>        zero |= from[i];<br>    }<br>    LL must = 0;<br>    REP(i,n) if(results[i]=='C') {<br>      LL a = from[i] &amp;~ zero;<br>      if(!a) return "INVALID";<br>      if((a&amp;(a-1))==0) must |= a;<br>    }<br>    string res;<br>    REP(i,n) {<br>      if(zero&amp;(1LL&lt;&lt;i)) res+='N';<br>      else if(must&amp;(1LL&lt;&lt;i)) res+='C';<br>      else res += 'I';<br>    }<br>    return res;<br>  }<br> <br>};<br> <br>// Powered by FileEdit<br> <br>// Powered by TomekAI<br>// Powered by TZTester 1.01 [25-Feb-2003]<br> <br>// Powered by CodeProcessor<br></td>