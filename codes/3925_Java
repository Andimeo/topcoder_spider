<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>import java.util.regex.*;<br>import java.text.*;<br>import java.math.*;<br>import static java.lang.Math.*;<br>import static java.util.Arrays.*;<br>public class CommentNest {<br>  char[] ar;<br>  String s;<br>  public int whatsLeft(String[] lines) {<br>    s = "";<br>    for(int i = 0; i &lt; lines.length; i++){<br>      s += lines[i]+"A";<br>    }<br>    ar = s.toCharArray();<br>    int ret = s.length();<br>    for(int i = 0; i &lt; s.length()-1; i++){<br>      if(s.charAt(i) != '/' || s.charAt(i+1) != '*')continue;<br>      for(int j = s.length()-2; j &gt; i+1; j--){<br>        if(s.charAt(j) != '*' || s.charAt(j+1) != '/')continue;<br>        if(!nester(i+2, j, 0))continue;<br>        ret -= j+2-i;<br>      //  System.out.println("Removed "+s.substring(i,j+2));<br>        i = j+1;<br>      }<br>    }<br>    return ret;<br>  }<br>  class State{<br>    int f, t, o;<br>    public boolean equals(Object ob){<br>      State s = (State)ob;<br>      return s.f == f &amp;&amp; s.t == t &amp;&amp; s.o == o;<br>    }<br>    State(int ff, int tt, int oo){f = ff; t = tt; o = oo;}<br>    public int hashCode(){<br>      return 1037*f+17*t+o;<br>    }<br>  }<br>  HashMap&lt;State, Boolean&gt; memo = new HashMap&lt;State, Boolean&gt;();<br>  boolean nester(int from, int to, int open){<br>    State key = new State(from, to, open);<br>    if(memo.containsKey(key)) return memo.get(key);<br>    boolean ret = open == 0;<br>    outer:<br>    for(int i = from; i &lt; to-1; i++){<br>      if(ar[i] == '/' &amp;&amp; ar[i+1] == '*'){<br>        if(nester(i+2, to, open+1)){<br>          ret = true;<br>          break outer;<br>        }<br>        if(i &lt; to-2 &amp;&amp; ar[i+2] == '/' &amp;&amp; open &gt;= 1 &amp;&amp; nester(i+3, to, open-1)){<br>          ret = true;<br>          break outer;<br>        }<br>        ret = false;<br>        break outer;<br>      }<br>      if(ar[i] == '*' &amp;&amp; ar[i+1] == '/'){<br>        if(open &gt;= 1 &amp;&amp; nester(i+2, to, open-1)){<br>          ret = true;<br>          break outer;<br>        }<br>        if(i &lt; to-2 &amp;&amp; ar[i+2] == '*' &amp;&amp; nester(i+3, to, open+1)){<br>          ret = true;<br>          break outer;<br>        }<br>        ret = false;<br>        break outer;<br>      }<br>    }<br>    memo.put(key, ret);<br>    return ret;<br>  }<br> <br>}<br> <br>// Powered by PopsEdit<br>// Powered by CodeProcessor<br></td>