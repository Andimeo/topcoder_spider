<td class="problemText" colspan="8" valign="middle" align="left">
            public class SmartWordToy {<br>  int qs;<br>  int qe;<br>  int[] buf = new int[4];<br><br>  public int minPresses(String start, String finish, String[] forbid) {<br>    boolean[] forb = new boolean[26 * 26 * 26 * 26];<br>    int[] q = new int[26 * 26 * 26 * 26 + 5];<br>    int[] stepCount = new int[26 * 26 * 26 * 26 + 5];<br>    boolean[] vis = new boolean[26 * 26 * 26 * 26 + 5];<br>    qe = qs = 0;<br><br>    for (int i = 0; i &lt; forbid.length; ++i) {<br>      String s = forbid[i];<br>      String[] strings = s.split(" ");<br>      for (int i1 = 0; i1 &lt; strings[0].length(); ++i1) {<br>        int c1 = strings[0].charAt(i1);<br>        for (int i2 = 0; i2 &lt; strings[1].length(); ++i2) {<br>          int c2 = strings[1].charAt(i2);<br>          for (int i3 = 0; i3 &lt; strings[2].length(); ++i3) {<br>            int c3 = strings[2].charAt(i3);<br>            for (int i4 = 0; i4 &lt; strings[3].length(); ++i4) {<br>                     int c4 = strings[3].charAt(i4);<br>              int code = ((c1 - 'a') * 26 * 26 * 26) +<br>                      ((c2 - 'a') * 26 * 26) +<br>                      ((c3 - 'a') * 26) + ((c4 - 'a'));<br>              forb[code] = true;<br>            }<br>          }<br>        }<br>      }<br>    }<br><br>    int st = code(start);<br>    int fin = code(finish);<br><br>    if (forb[st] || forb[fin]) {<br>      return -1;<br>    }<br><br>    int[] temp = new int[4];<br><br>    q[qe++] = st;<br>    vis[st] = true;<br>    while (qs &lt; qe) {<br>      int step = stepCount[qs];<br>      int v = q[qs++];<br>      if (v == fin) {<br>        return stepCount[qs - 1];<br>      }<br><br>      temp[3] = v % 26;<br>      v /= 26;<br>      temp[2] = v % 26;<br>      v /= 26;<br>      temp[1] = v % 26;<br>      v /= 26;<br>      temp[0] = v % 26;<br><br>      for (int k = 0; k &lt; 4; ++k) {<br>        for (int b = 0; b &lt; 2; ++b) {<br>          next(k, b == 0, temp);<br>          int n = buf[0] * 26 * 26 * 26 + buf[1] * 26 * 26 + buf[2] * 26 + buf[3];<br>          if (!vis[n] &amp;&amp; !forb[n]) {<br>            vis[n] = true;<br>            stepCount[qe] = step + 1;<br>            q[qe++] = n;<br>          }<br>        }<br>      }<br>    }<br><br>    return -1;<br>  }<br><br><br>  void next(int pos, boolean up, int[] t) {<br>    buf[0] = t[0];<br>    buf[1] = t[1];<br>    buf[2] = t[2];<br>    buf[3] = t[3];<br><br>    if (up) {<br>      if (++buf[pos] == 26) buf[pos] = 0;<br>    } else {<br>      if (--buf[pos] == -1) buf[pos] = 25;<br>    }<br>  }<br><br>  int code (String s) {<br>    return ((s.charAt(0) - 'a') * 26 * 26 * 26) +<br>         ((s.charAt(1) - 'a') * 26 * 26) +<br>         ((s.charAt(2) - 'a') * 26) + ((s.charAt(3) - 'a'));<br>  }<br><br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by CodeProcessor<br></td>