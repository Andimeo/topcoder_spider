<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;algorithm&gt;<br>#include &lt;iostream&gt;<br>#include &lt;sstream&gt;<br>#include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;queue&gt;<br>#include &lt;set&gt;<br>#include &lt;map&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cctype&gt;<br>#include &lt;cmath&gt;<br>using namespace std;<br><br>#define ALL(c) (c).begin(), (c).end()<br>#define REP(i,n)  for(int i=0;i&lt;n;i++)<br>#define REPD(i,n) for(int i=(n-1);i&gt;=0;i--)<br>#define FOR(i,v,n)  for(int i=v;i&lt;n;i++)<br>#define FORD(i,v,n) for(int i=(n-1);i&gt;=v;i--)<br>#define FOREACH(it,c) for(typeof((c).begin()) it=(c).begin();it!=(c).end();++it)<br>#define sz(c) (c).size()<br><br>typedef vector &lt;int&gt; VI;<br>typedef vector &lt;VI&gt; VVI;<br>typedef vector &lt;long long&gt; VL;<br>typedef vector &lt;VL&gt; VVL;<br>typedef vector &lt;double&gt; VD;<br>typedef vector &lt;VD&gt; VVD;<br>typedef vector &lt;string&gt; VS;<br>typedef vector &lt;VS&gt; VVS;<br><br>typedef struct {<br>  int co,fe,fi;<br>} A;<br><br>bool cmp(const A&amp; a, const A&amp; b) {<br>  if (a.co!=b.co)<br>    return a.co&lt;b.co;<br>  if (a.fe!=b.fe)<br>    return a.fe&lt;b.fe;<br><br>  return a.fi&lt;b.fi;<br>}<br><br>class AutoMarket {<br>public:  <br>    int maxSet(vector &lt;int&gt; cost, vector &lt;int&gt; features, vector &lt;int&gt; fixTimes) {<br>        int res=0;<br><br>  vector &lt;A&gt; tudo;<br>  REP(i,sz(cost)) {<br>    A t;<br>    t.co=cost[i]; t.fe=features[i]; t.fi=fixTimes[i];<br>    tudo.push_back(t);<br>  }<br>  sort(ALL(tudo), cmp);<br><br>  REP(i,sz(tudo))<br>    cout&lt;&lt;tudo[i].co&lt;&lt;" "&lt;&lt; tudo[i].fe&lt;&lt;tudo[i].fi&lt;&lt;endl;<br><br>  int memo[1000];<br>  REP(i,sz(tudo)) {<br>    memo[i]=1;<br>    REPD(j,i) {<br>      if(tudo[j].co&lt;tudo[i].co &amp;&amp;<br>         tudo[j].fe&gt;tudo[i].fe &amp;&amp;<br>         tudo[j].fi&lt;tudo[i].fi)<br>        memo[i]&gt;?=(memo[j]+1);<br>    }<br><br>    res&gt;?=memo[i];<br>  }<br><br>        return res;<br>    }<br><br>};<br><br><br>// Powered by FileEdit<br>// Powered by CodeProcessor<br></td>