<td class="problemText" colspan="8" valign="middle" align="left">
            Public Class CakeDivision<br>        Public Function ratio(ByVal length As Integer, ByVal width As Integer, ByVal pieces As Integer) As Double<br>            Return dBest(length / width, pieces)<br> <br>        End Function<br> <br>        Private Function dBest(ByVal dRatio As Double, ByVal iPieces As Integer) As Double<br>            If dRatio &lt; 1 Then dRatio = 1 / dRatio<br>            If iPieces = 1 Then<br>                Return dRatio<br>            End If<br> <br>            If iPieces = 2 Then<br>                If dRatio &gt;= 2 Then<br>                    Return dRatio / 2<br>                Else<br>                    Return 2 / dRatio<br>                End If<br>            End If<br> <br>            If iPieces = 3 Then<br>                If dRatio &gt;= 3 Then<br>                    Return dRatio / 3<br>                Else<br>                    Return 3 / dRatio<br>                End If<br>            End If<br> <br>            Dim dLowest As Double = 99999<br>            Dim i, j As Integer<br>            Dim dAns As Double<br> <br>            If iPieces &gt; 3 Then<br>                For i = 1 To iPieces \ 2<br>                    dAns = System.Math.Max(dBest(dRatio / iPieces * i, i), dBest(dRatio / iPieces * (iPieces - i), iPieces - i))<br>                    If dAns &lt; dLowest Then dLowest = dAns<br>                Next<br> <br>                For i = 1 To iPieces \ 2<br>                    dAns = System.Math.Max(dBest((1 / dRatio) / iPieces * i, i), dBest((1 / dRatio) / iPieces * (iPieces - i), iPieces - i))<br>                    If dAns &lt; dLowest Then dLowest = dAns<br>                Next<br>            End If<br> <br>            Return dLowest<br>        End Function<br>    End Class<br></td>