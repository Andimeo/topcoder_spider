<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;vector&gt;<br>#include &lt;sstream&gt;<br>#include &lt;iostream&gt;<br> <br>using namespace std;<br> <br>class StockHistory {<br>public:<br>  int maximumEarnings(int initialInvestment, int monthlyContribution, vector &lt;string&gt; stockPrices) {<br>    unsigned int i = stockPrices.size() - 1;<br>    stringstream s(stockPrices[i]);<br>    vector&lt;int&gt; endPrices;<br>    int tmp;<br>    while (s &gt;&gt; tmp) {<br>      endPrices.push_back(tmp);<br>    }<br>    const unsigned int nP = endPrices.size();<br>    double win = 0;<br>    double best = 1.0;<br>    --i;<br>    while (i &gt; 0) {<br>      cerr &lt;&lt; "mongth " &lt;&lt; i &lt;&lt; endl;<br>      stringstream ss(stockPrices[i]);<br>      vector&lt;int&gt; p;<br>      while (ss &gt;&gt; tmp) {<br>        p.push_back(tmp);<br>      }<br>      for (unsigned int j = 0; j &lt; nP; ++j) {<br>        if ((((double)endPrices[j])/((double)p[j])) &gt; best) {<br>          best = (((double)endPrices[j]) / ((double)p[j]));<br>        }<br>      }<br>      win += monthlyContribution * (best - 1.0);<br>      --i;<br>    }<br>    stringstream ss(stockPrices[i]);<br>    vector&lt;int&gt; p;<br>    while (ss &gt;&gt; tmp) {<br>      p.push_back(tmp);<br>    }<br>    for (unsigned int j = 0; j &lt; nP; ++j) {<br>      cerr &lt;&lt; (((double) endPrices[j])/((double)p[j])) &lt;&lt; endl;<br>      if ((((double) endPrices[j])/((double)p[j])) &gt; best) {<br>        cerr &lt;&lt; "best ist " &lt;&lt; j &lt;&lt; endl;<br>        best = (((double) endPrices[j]) / ((double)p[j]));<br>      }<br>    }<br>    win += initialInvestment * (best - 1.0);<br>    return (int) (win + 0.5);<br>  }<br> <br>};<br></td>