<td class="problemText" colspan="8" valign="middle" align="left">
            Public Class OptimalTax<br>        Public Function optimalIncome(ByVal fixedBase As Integer(), ByVal percent As Integer(), ByVal index As Integer) As Double<br>            Dim i, j, k, l As Long<br> <br>            Dim aPivotNum(9999) As Integer<br>            Dim aPivotDen(9999) As Integer<br> <br>            k = 0<br> <br>            For i = 0 To fixedBase.GetUpperBound(0) - 1<br>                For j = i + 1 To fixedBase.GetUpperBound(0)<br>                    aPivotNum(k) = System.Math.Abs(fixedBase(j) - fixedBase(i))<br>                    aPivotDen(k) = System.Math.Abs(percent(j) - percent(i))<br>                    k += 1<br>                Next<br>            Next<br> <br>            aPivotNum(k) = 0<br>            aPivotDen(k) = 1<br> <br>            Dim dBest As Double<br>            Dim dVal As Double<br>            Dim iBestIdx As Integer<br>            Dim bBest As Boolean<br>            Dim bOne As Boolean = False<br>            Dim dSmall As Double = Double.MaxValue<br>            Dim dTest As Double<br>            Dim dSmallestTest As Double = Double.MaxValue<br>            Dim bEverBest As Boolean<br> <br>            For i = 0 To k<br>                If aPivotDen(i) &lt;&gt; 0 Then<br>                    dTest = CDbl(aPivotNum(i) * 100) / CDbl(aPivotDen(i))<br>                    dBest = dTest * percent(index) / 100 + fixedBase(index)<br>                    bBest = True<br>                    bOne = True<br>                    dSmallestTest = System.Math.Min(dSmallestTest, dTest)<br> <br>                    For j = 0 To fixedBase.GetUpperBound(0)<br>                        dVal = dTest * percent(j) / 100 + fixedBase(j)<br>                        If dVal + 0.0000000001 &lt; dBest Then<br>                            bBest = False<br>                            Exit For<br>                        End If<br>                    Next<br>                    If bBest Then<br>                        dSmall = System.Math.Min(dSmall, dTest)<br>                        bEverBest = True<br>                    End If<br>                End If<br>            Next<br> <br>            If Not beverbest Then Return -1<br> <br>            If Not bOne Then Return -1<br> <br>            dTest = dSmall + 0.0001<br>            dBest = dTest * percent(index) / 100 + fixedBase(index)<br>            bBest = True<br>            For j = 0 To fixedBase.GetUpperBound(0)<br>                If j &lt;&gt; index Then<br>                    dVal = dTest * percent(j) / 100 + fixedBase(j)<br>                    If dVal - 0.0000000001 &lt; dBest Then<br>                        bBest = False<br>                        Exit For<br>                    End If<br>                End If<br>            Next<br>            If Not bBest Then Return -1<br> <br>            Return dSmall<br> <br> <br>        End Function<br>    End Class<br></td>