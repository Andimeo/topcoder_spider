<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections;<br> <br>public class DerivationDisplay<br>{<br>  public int getCase(string input)<br>  {<br>    // if string is all 'a's<br>    <br>    for(int i = 0; i &lt; input.Length; i++)<br>    {<br>      if(input[i] == 'b')<br>      break;<br>      if(i == input.Length - 1)<br>      return 0;<br>    }<br>    <br>    // if string is all 'b's<br>    <br>    for(int i = 0; i &lt; input.Length; i++)<br>    {<br>      if(input[i] == 'a')<br>      break;<br>      if(i == input.Length - 1)<br>      return 1;<br>    }<br>    <br>    // if string is X 'a's, Y 'b's<br>    <br>    if(input[0] == 'a' &amp;&amp; input[input.Length - 1] == 'b')<br>    return 2;<br>    <br>    if(input[0] == 'b' &amp;&amp; input[input.Length - 1] == 'a')<br>    return 3;<br>    <br>    Console.WriteLine("uh-oh");<br>    return -1;<br>  }<br>  <br>  public string [] getDerivation(string input)<br>  {<br>    ArrayList derivations = new ArrayList();<br>    int c = getCase(input);<br>    derivations.Add("S");<br>    <br>    switch(c)<br>    {<br>      case -1:<br>        return new string[] {"ack"};<br>      break;<br>      case 0:<br>      {<br>        derivations.Add("T");<br>        derivations.Add("A");<br>        int n = input.Length;<br>        for(int i = 1; i &lt; n; i++)<br>        {<br>          string rep = "";<br>          for(int j = 0; j &lt; i; j++)<br>          rep += "a";<br>          derivations.Add(rep + "A");<br>        }<br>      }<br>      break;<br>      case 1:<br>      {<br>        derivations.Add("T");<br>        derivations.Add("B");<br>        int n = input.Length;<br>        for(int i = 1; i &lt; n; i++)<br>        {<br>          string rep = "";<br>          for(int j = 0; j &lt; i; j++)<br>          rep += "b";<br>          derivations.Add(rep + "B");<br>        }<br>      }<br>      break;<br>      case 2:<br>      {<br>        derivations.Add("T");<br>        int n = 0;<br>        int m = 0;<br>        for(int i = input.Length - 1; i &gt;= 0; i--)<br>        if(input[i] == 'b') n++; else i = -1;<br>        for(int i = 0; i &lt; input.Length; i++)<br>        if(input[i] == 'a') m++; else i = input.Length;<br>        if(m &lt; n) n = m;<br>        string repA = "";<br>        string repB = "";<br>        for(int i = 1; i &lt;= n; i++)<br>        {<br>          repA = "";<br>          repB = "";<br>          for(int j = 0; j &lt; i; j++)<br>          {<br>            repA += "a";<br>            repB += "b";<br>          }<br>          derivations.Add(repA + "T" + repB);<br>        }<br>        char ch = input[n];<br>        string s = repA + char.ToUpper(ch).ToString() + repB;<br>        derivations.Add(s);<br>        for(int i = 1; i &lt; input.Length - 2 * n; i++)<br>        {<br>          string rep = "";<br>          for(int j = 0; j &lt; i; j++)<br>          rep += ch.ToString();<br>          derivations.Add(repA + rep + char.ToUpper(ch).ToString() + repB);<br>        }<br>      }<br>      break;<br>      case 3:<br>      {<br>        derivations.Add("bUa");<br>        string rep = "";<br>        for(int i = 1; i &lt; input.Length - 2; i++)<br>        {<br>          char ch = input[i];<br>          rep += ch.ToString();<br>          derivations.Add("b" + rep + "Ua");<br>        }<br>      }<br>      break;<br>    }<br>    <br>    derivations.Add(input);<br>    string [] result = new string[derivations.Count];<br>    derivations.CopyTo(result, 0);<br>    <br>    return result;<br>  }<br>};<br> <br>// Powered by PopsEdit<br></td>