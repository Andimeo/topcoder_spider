<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;vector&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;cmath&gt;<br>using namespace std;<br> <br>#define ALL(C) (C).begin(), (C).end()<br>#define forN(I,C) for(int I=0; I&lt;int(C); ++I)<br>#define forEach(I,C) for(int I=0; I&lt;int((C).size()); ++I)<br>typedef vector&lt;int&gt; VI;<br> <br>struct RemoteRover<br>{<br>    double optimalTravel(VI width, VI speed, int offset)<br>    {<br>        double l = 0, h = 1./ *max_element(ALL(speed));<br>        forN ( t, 100 ) {<br>            double m = (h+l)*.5;<br>            double to = 0;<br>            forEach ( i, speed ) {<br>                double sq = 1-m*m*speed[i]*speed[i];<br>                if ( sq &lt;= 1e-100 ) sq = 1e-100;<br>                double o = width[i]*m*speed[i]/sqrt(sq);<br>                to += o;<br>            }<br>            if ( to &gt; offset ) {<br>                h = m;<br>            }<br>            else {<br>                l = m;<br>            }<br>        }<br>        double m = (l+h)*.5;<br>        double ret = 0;<br>        forEach ( i, speed ) {<br>            double sq = 1-m*m*speed[i]*speed[i];<br>            if ( sq &lt;= 1e-100 ) sq = 1e-100;<br>            double t = width[i]/sqrt(sq)/speed[i];<br>            ret += t;<br>        }<br>        return ret;<br>    }<br>};<br></td>