<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections;<br><br>public class PatternCutting {<br>  int width;<br>  int height;<br>  string[] pattern;<br>  const int MAX_CASES = 3000000;<br>  int num_cases;<br><br>  struct Patt<br>  {<br>    public long data;<br>    public int max_dx;<br>    public int max_dy;<br>    public int fx;<br>    public int fy;<br>  }<br><br>  Patt[] patts;<br>  int res;<br><br>  bool rec(long data, int num)<br>  {<br>    if (num &gt; res)<br>      res = num;<br><br>    if (data == 0)<br>      return true;<br>    <br>    ++num_cases;<br>    if (num_cases &gt;= MAX_CASES)<br>      return true;<br><br>    int ii = -1;<br>    int jj = -1;<br><br>    for (int i = 0; i &lt; height; ++i) <br>    {<br>      for (int j = 0; j &lt; width; ++j)<br>        if ((data &amp; (1L &lt;&lt; (i*width+j))) &gt; 0) <br>        {<br>          ii = i;<br>          jj = j;<br>          break;<br>        }<br>      if (ii &gt;= 0)<br>        break;<br>    }<br><br>    for (int k = 0; k &lt; patts.Length; ++k)<br>    {<br>      int dy = ii - patts[k].fy;<br>      int dx = jj - patts[k].fx;<br>      if (dx &gt;= 0 &amp;&amp; dx &lt;= patts[k].max_dx &amp;&amp; dy &gt;= 0 &amp;&amp; dy &lt;= patts[k].max_dy) {<br>        long val = patts[k].data &lt;&lt; (dy*width+dx);<br>        if ((data &amp; val) == val)<br>          if (rec(data ^ val, num + 1))<br>            return true;<br>      }<br>    }<br><br>    rec(data ^ (1L &lt;&lt; (ii*width+jj)), num);<br><br>    if (num_cases &gt;= MAX_CASES)<br>      return true;<br>    else<br>      return false;<br>  }<br><br>  string[] Rotate(string[] pattern)<br>  {<br>    string[] res = new string[pattern[0].Length];<br>    for (int i = 0; i &lt; pattern[0].Length; ++i)<br>      for (int j = 0; j &lt; pattern.Length; ++j)<br>        res[i] += pattern[pattern.Length - 1 - j][i];<br>    return res;<br>  }<br><br>  Patt MP(string[] pattern)<br>  {<br>    Patt a = new Patt();<br>    a.data = 0;<br>    for (int i = 0; i &lt; pattern.Length; ++i)<br>      for (int j = 0; j &lt; pattern[0].Length; ++j)<br>        if (pattern[i][j]=='X')<br>          a.data |= 1L &lt;&lt; (i*width+j);<br>    a.max_dx = Math.Max(-1, width - pattern[0].Length);<br>    a.max_dy = Math.Max(-1, height - pattern.Length);<br>    for (int i = 0; i &lt; pattern.Length; ++i)<br>      for (int j = 0; j &lt; pattern[0].Length; ++j)<br>        if (pattern[i][j]=='X')<br>        {<br>          a.fx = j;<br>          a.fy = i;<br>          return a;<br>        }<br>    return a;<br>  }<br><br>  void MakePatts()<br>  {<br>    patts = new Patt[4];<br>    string[] p = pattern;<br>    for (int i = 0; i &lt; 4; ++i)<br>    {<br>      patts[i] = MP(p);<br>      p = Rotate(p);<br>    }<br>  }<br><br>  public int getMax(int width, int height, string[] pattern) {<br>    this.width = width;<br>    this.height = height;<br>    this.pattern = pattern;<br>    res = 0;<br>    MakePatts();<br>    num_cases = 0;<br>    rec((1L &lt;&lt; (width*height)) - 1, 0);<br>    return res;<br>  }<br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003]<br>// Powered by CodeProcessor<br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003]<br>// Powered by CodeProcessor<br></td>