<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;algorithm&gt;<br>#include &lt;cmath&gt;<br>#include &lt;iostream&gt;<br>#include &lt;queue&gt;<br>#include &lt;string&gt;<br>#include &lt;vector&gt;<br><br>using namespace std;<br><br><br>int R, C;<br>int a[25][25];<br>int bio[25][25][5];<br><br>const int dr[4] = { -1, 0, 1, 0 };<br>const int dc[4] = { 0, 1, 0, -1 }; <br><br>struct state {<br>   int r, c, x;<br>};<br><br>class LongBlob { <br>   public: <br>   <br>   void update( queue&lt;state&gt; &amp;Q, state &amp;A ) {<br>      if( bio[A.r][A.c][A.x] ) return;<br>      bio[A.r][A.c][A.x] = 1;<br>      Q.push( A );<br>   }<br><br>   int solve( int r, int c ) {<br>      state A;<br>      A.r = r; A.c = c; A.x = 4 - (a[r][c]=='1');<br>      int ret = 0;<br><br>      queue&lt;state&gt; Q;<br>      memset( bio, 0, sizeof bio );<br>      for( update( Q, A ); !Q.empty(); Q.pop() ) {<br>         A = Q.front();<br>         ret &gt;?= (A.r-r)*(A.r-r) + (A.c-c)*(A.c-c);<br>         for( int d = 0; d &lt; 4; ++d ) {<br>            state B;<br>            B.r = A.r + dr[d];<br>            B.c = A.c + dc[d];<br>            if( B.r &lt; 0 || B.r &gt;= R ) continue;<br>            if( B.c &lt; 0 || B.c &gt;= C ) continue;<br>            B.x = A.x - (a[B.r][B.c]=='1'); <br>            if( B.x &lt; 0 ) continue;<br>            <br>            update( Q, B );<br>         }<br>      }<br><br>      return ret;<br>   }<br><br>   double maxLength(vector &lt;string&gt; image) { <br>      R = image.size();<br>      C = image[0].size();<br>      for( int r = 0; r &lt; R; ++r ) <br>         for( int c = 0; c &lt; C; ++c ) <br>            a[r][c] = image[r][c];<br><br>      int ret = 0;<br>      for( int r = 0; r &lt; R; ++r ) <br>         for( int c = 0; c &lt; C; ++c ) <br>            ret &gt;?= solve( r, c );<br>      <br>      return sqrt((double)ret);<br>   } <br><br><br><br><br><br>   <br><br>}; <br><br><br><br>// Powered by FileEdit<br>// Powered by moj 3.0 beta 7 [modified TZTester]<br>// Powered by CodeProcessor<br></td>