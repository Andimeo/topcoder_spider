<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br> <br>public class LongBlob {<br> <br>    final static int[] dx = new int[]{-1, 0, 1, 0};<br>    final static int[] dy = new int[]{0, 1, 0, -1};<br> <br>    public double maxLength(String[] image) {<br>        int m = image.length;<br>        int n = image[0].length();<br>        int[][] a = new int[m + 2][n + 2];<br>        for (int i = 0; i &lt; m + 2; i++) {<br>            Arrays.fill(a[i], 2);<br>        }<br>        for (int i = 0; i &lt; m; i++) {<br>            for (int j = 0; j &lt; n; j++) {<br>                a[i + 1][j + 1] = image[i].charAt(j) - '0';<br>            }<br>        }<br>        m += 2;<br>        n += 2;<br> <br>        int[] qx = new int[m * n * 2];<br>        int[] qy = new int[m * n * 2];<br> <br>        int best = 0;<br>        for (int i = 0; i &lt; m; i++) {<br>            for (int j = 0; j &lt; n; j++) {<br>                if (a[i][j] == 2) {<br>                    continue;<br>                }<br> <br>                int[][] d = new int[m][n];<br>                int h = m * n;<br>                int t = m * n + 1;<br>                qx[h] = i;<br>                qy[h] = j;<br>                d[i][j] = a[i][j] + 1;<br>                while (h &lt; t) {<br>                    int x = qx[h];<br>                    int y = qy[h];<br>                    h++;<br> <br>                    for (int k = 0; k &lt; 4; k++) {<br>                        int nx = x + dx[k];<br>                        int ny = y + dy[k];<br>                        if (a[nx][ny] != 2 &amp;&amp; d[nx][ny] == 0) {<br>                            d[nx][ny] = d[x][y] + a[nx][ny];<br>                            if (a[nx][ny] == 0) {<br>                                h--;<br>                                qx[h] = nx;<br>                                qy[h] = ny;<br>                            } else {<br>                                qx[t] = nx;<br>                                qy[t] = ny;<br>                                t++;<br>                            }<br>                        }<br>                    }<br>                }<br> <br>                for (int k = 0; k &lt; m; k++) {<br>                    for (int l = 0; l &lt; n; l++) {<br>                        if (d[k][l] &gt; 0 &amp;&amp; d[k][l] &lt;= 5) {<br>                            int r = (i - k) * (i - k) + (j - l) * (j - l);<br>                            if (r &gt; best) {<br>                                best = r;<br>                            }<br>                        }<br>                    }<br>                }<br>            }<br>        }<br> <br>        return Math.sqrt(best);<br>    }<br> <br> <br>}<br> <br> <br>// Powered by PopsEdit<br> <br>// Powered by CodeProcessor<br></td>