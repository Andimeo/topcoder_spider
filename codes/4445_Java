<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br> <br>public class PolygonDecomposition {<br>    boolean[][] u;<br>    int[][] ans;<br> <br>    public static final int MOD = 1000000000;<br> <br>    public int calc(int n, int k) {<br>        if (u[n][k]) {<br>            return ans[n][k];<br>        }<br>        u[n][k] = true;<br>        if (k &gt; n - 2 || (n &gt; 2 &amp;&amp; k == 0)) {<br>            return 0;<br>        }<br>        if (n == 2 &amp;&amp; k == 0) {<br>            ans[n][k] = 1;<br>        } else if (k == 1) {<br>            ans[n][k] = 1;<br>        } else {<br>            ans[n][k] = (calc(n - 1, k) + calc(n - 1, k - 1)) % MOD;<br>            for (int i = 3; i &lt; n; i++) {<br>                for (int j = 1; j &lt; k; j++) {<br>                    long r1 = calc(i, j);<br>                    long r2 = calc(n - i + 1, k - j - 1) + calc(n - i + 1, k - j);<br>                    r1 = (r1 * r2) % MOD;<br>                    ans[n][k] = (ans[n][k] + (int)r1) % MOD;<br>                }<br>            }<br>        }<br>        return ans[n][k];<br>    }<br> <br>    public int howMany(int n, int k) {<br>        if (k &gt; n - 2) {<br>            return -1;<br>        }<br>        u = new boolean[n + 1][n + 1];<br>        ans = new int[n + 1][n + 1];<br> <br>        int r = calc(n, k);<br>        if (r == 0) {<br>            return -1;<br>        } else {<br>            return r;<br>        }<br>    }<br> <br>}<br> <br> <br>// Powered by PopsEdit<br> <br>// Powered by CodeProcessor<br></td>