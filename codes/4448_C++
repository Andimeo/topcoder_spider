<td class="problemText" colspan="8" valign="middle" align="left">
            #define MAXINT 1294967296<br>#define MAXSIZE 16198653<br><br>#include &lt;iostream&gt;<br>#include &lt;sstream&gt;<br>#include &lt;fstream&gt;<br>#include &lt;vector&gt;<br>#include &lt;string&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;queue&gt;<br>#include &lt;stack&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cctype&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;iomanip&gt;<br><br>using namespace std;<br><br>int toInt(char ch) {<br>  return int(ch - '0');<br>}<br><br>int toInt(const string &amp;s) {<br>  istringstream i(s);<br>  int x;<br>  i &gt;&gt; x;<br>  return x;<br>}<br><br>vector &lt;int&gt; toInt(const vector &lt;string&gt; &amp;v) {<br>  int size = v.size();<br>  vector &lt;int&gt; sol(size);<br>  for (int i = 0; i &lt; size; i++)<br>    sol[i] = toInt(v[i]);<br>  return sol;<br>}<br>class StrTok {<br>public:<br>  StrTok(const string &amp;s, const string &amp;del = " ", int it = 0) {str = s; delim = del; iter = it;}<br>  StrTok(const string &amp;s, char del, int it = 0) {str = s; delim = del; iter = it;}<br>  StrTok(const StrTok &amp;st) {*this = st;}<br>  string nextToken();<br>  bool hasMoreTokens() {return (iter &lt; str.size());}<br>  int numTokens();<br>  vector &lt;string&gt; separate();<br>  string &amp;getStr() {return str;}<br>  void setStr(const string &amp;s) {str = s;}<br>  string &amp;getDelim() {return delim;}<br>  void setDelim(const string &amp;del) {delim = del;}<br>  void setDelim(char del) {delim = del;}<br>  int getIter() {return iter;}<br>  void setIter(int it) {iter = it;}<br>  StrTok &amp;operator=(const StrTok &amp;st) {str = st.str; delim = st.delim; iter = st.iter; return *this;}<br>  bool operator==(const StrTok &amp;st) {return (str == st.str &amp;&amp; delim == st.delim &amp;&amp; iter == st.iter);}<br>  bool operator!=(const StrTok &amp;st) {return (!(*this == st));}<br>private:<br>  string str;<br>  int iter;<br>  string delim;<br>  bool isDelim();<br>};<br><br>string StrTok::nextToken() {<br>  string tok;<br>  while (iter &lt; str.size() &amp;&amp; !isDelim()) {<br>    tok += str[iter];<br>    iter++;<br>  }<br>  iter += delim.size();<br>  return tok;<br>}<br><br>int StrTok::numTokens() {<br>  int it = iter;<br>  vector &lt;string&gt; toks = separate();<br>  iter = it;<br>  return toks.size();<br>}<br><br>vector &lt;string&gt; StrTok::separate() {<br>  vector &lt;string&gt; toks;<br>  while (hasMoreTokens())<br>    toks.push_back(nextToken());<br>  return toks;<br>}<br><br>bool StrTok::isDelim() {<br>  for (int i = 0, it = iter; i &lt; delim.size(); i++, it++) {<br>    if (it &gt;= str.size() || str[it] != delim[i])<br>      return false;<br>  }<br>  return true;<br>}<br>class MassiveNumbers<br>{ <br>  public:<br>  string getLargest(string a, string b) {<br>        int c,d,e,f;<br>        double g, h;<br>        StrTok st1(a, '^'), st2(b, '^');<br>        c = toInt(st1.nextToken());<br>        d = toInt(st1.nextToken());<br>        e = toInt(st2.nextToken());<br>        f = toInt(st2.nextToken());<br>        g = d*log(double(c));<br>        h = f*log(double(e));<br>        if (g &gt; h) return a;<br>        return b;<br>  } <br>  <br> <br>}; <br><br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003]<br>// Powered by CodeProcessor<br></td>