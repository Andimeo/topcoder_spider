<td class="problemText" colspan="8" valign="middle" align="left">
            public class NumberSplit {<br> <br>    private int tab[] = new int[100001];<br> <br>    void init () {<br>        for (int i = 0; i &lt; 100001; i++) tab[i] = Integer.MIN_VALUE;<br>        for (int i = 0; i &lt; 10; i++) tab[i] = 1;<br>    }<br> <br>    private int get(long start) {<br> <br>        int minimal = Integer.MIN_VALUE;<br> <br>        if (start &lt; 100001 &amp;&amp; tab[(int)start] &gt; Integer.MIN_VALUE) {<br>            return tab[(int)start];<br>        }<br> <br>        String rep = Long.toString(start);<br>        String p1, p2, p3, p4, p5, p6;<br> <br>        for (int i = 0; i &lt; rep.length()-1; i++) {<br>            p1 = rep.substring(0, i+1);<br>            p2 = rep.substring(i+1);<br>            minimal = Math.max(minimal, 1 + get(Long.valueOf(p1).longValue() * Long.valueOf(p2).longValue()));<br>        }<br> <br>        for (int i = 0; i &lt; rep.length() - 2; i++)<br>            for (int j = i+1; j &lt; rep.length() - 1; j++) {<br>                p1 = rep.substring(0, i+1);<br>                p2 = rep.substring(i+1, j+1);<br>                p3 = rep.substring(j+1);<br>                minimal = Math.max(minimal, 1 + get(Long.valueOf(p1).longValue() *<br>                                                    Long.valueOf(p2).longValue() *<br>                                                    Long.valueOf(p3).longValue()<br>                                                 ));<br>            }<br> <br>        for (int i = 0; i &lt; rep.length() - 3; i++)<br>            for (int j = i+1; j &lt; rep.length() - 2; j++)<br>                for (int k = j+1; k &lt; rep.length() - 1; k++) {<br>                p1 = rep.substring(0, i+1);<br>                p2 = rep.substring(i+1, j+1);<br>                p3 = rep.substring(j+1, k+1);<br>                p4 = rep.substring(k+1);<br>                minimal = Math.max(minimal, 1 + get(Long.valueOf(p1).longValue() *<br>                                                    Long.valueOf(p2).longValue() *<br>                                                    Long.valueOf(p3).longValue() *<br>                                                    Long.valueOf(p4).longValue()<br>                                                 ));<br>            }<br> <br>                for (int i = 0; i &lt; rep.length() - 4; i++)<br>                    for (int j = i+1; j &lt; rep.length() - 3; j++)<br>                        for (int k = j+1; k &lt; rep.length() - 2; k++)<br>                            for (int l = k+1; l &lt; rep.length() - 1; l++) {<br>                        p1 = rep.substring(0, i+1);<br>                        p2 = rep.substring(i+1, j+1);<br>                        p3 = rep.substring(j+1, k+1);<br>                        p4 = rep.substring(k+1, l+1);<br>                        p5 = rep.substring(l+1);<br>                        minimal = Math.max(minimal, 1 + get(Long.valueOf(p1).longValue() *<br>                                                            Long.valueOf(p2).longValue() *<br>                                                            Long.valueOf(p3).longValue() *<br>                                                            Long.valueOf(p4).longValue() *<br>                                                            Long.valueOf(p5).longValue()<br>                                                         ));<br>                    }<br> <br> <br>        if (start &lt; 100001 ) {<br>            tab[(int)start] = minimal;<br>        }<br> <br>        return minimal;<br>    }<br> <br>    public int longestSequence(int start) {<br>        init();<br> <br>        return get(start);<br> <br>    }<br> <br>}<br></td>