<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;algorithm&gt;<br>#include &lt;iostream&gt;<br>#include &lt;sstream&gt;<br>#include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;queue&gt;<br>#include &lt;set&gt;<br>#include &lt;map&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cctype&gt;<br>#include &lt;cmath&gt;<br>#include &lt;list&gt;<br>#include &lt;regex.h&gt; <br>using namespace std;<br><br>// LIB CODE<br>#define PB push_back<br>#define FOR(i,a,b) for(int i=(a);i&lt;int(b);++i)<br>#define REP(i,n) FOR(i,0,n)<br>#define SZ(v) ((v).size())<br>#define REPSZ(i,v) REP(i,SZ(v))<br>typedef vector&lt;int&gt; VI;<br>typedef vector&lt;VI&gt; VVI;<br>template&lt;class T, class U&gt; T cast (U x) { T y; ostringstream a; a&lt;&lt;x; istringstream b(a.str()); b&gt;&gt;y; return y; }<br>template&lt;class T&gt; vector&lt;T&gt; split(string s, string x=" ") { vector&lt;T&gt; r; REP(i,s.size()) { string c; while(i&lt;(int)s.size()&amp;&amp;x.find(s[i])==string::npos) c+=s[i++]; if(c.size()) r.push_back(cast&lt;T&gt;(c)); } return r; }<br>typedef vector&lt;double&gt; VD;<br>// REAL CODE<br><br>class TopFive {<br>public:<br>    double findProbability(vector &lt;string&gt; RES, vector &lt;string&gt; ACC, int p) {<br>      VVI res; REPSZ(i,RES) res.PB(split&lt;int&gt;(RES[i]));<br>      VVI acc; REPSZ(i,ACC) acc.PB(split&lt;int&gt;(ACC[i]));<br>      VD place(5,0); place[0]=1.0; int n=SZ(res);<br>      REP(i,n) {<br>        VD nplace(5,0);<br>        REP(j,5) {<br>        double pwin=0;<br>        REP(k,1&lt;&lt;3) {<br>          int c=0; double pp=1;<br>          REP(l,3) if(k&amp;(1&lt;&lt;l)) { c+=res[i][l]; pp*=acc[i][l]/100.0; } else pp*=(100-acc[i][l])/100.0;<br>          if(c&lt;p) pwin+=pp;<br>        }<br>          nplace[j]+=place[j]*pwin;<br>          if(j!=4) nplace[j+1]+=place[j]*(1-pwin);<br>        }<br>        place=nplace;<br>      }<br>      double ret=0; REP(i,5) ret+=place[i]; return ret;<br>    }<br><br>};<br><br><br>// Powered by FileEdit<br>// Powered by CodeProcessor<br></td>