<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;algorithm&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cctype&gt;<br>#include &lt;cmath&gt;<br>#include &lt;iostream&gt;<br>#include &lt;set&gt;<br>#include &lt;sstream&gt;<br>#include &lt;string&gt;<br>#include &lt;utility&gt;<br>#include &lt;vector&gt;<br>using namespace std;<br>#define FOREACH(it,c) for(typeof((c).begin()) it=(c).begin();it!=(c).end();++it)<br>#define MAX(f,w) ({ int _mm=(1&lt;&lt;31); f _mm&gt;?=(w); _mm; })<br>typedef long long LL;<br>template&lt;class T&gt; inline int size(const T&amp;c) { return c.size(); }<br> <br>const LL MAX = (1LL&lt;&lt;31)-1;<br> <br>set&lt;int&gt; s;<br> <br>struct HammingNumbers {<br> <br>  // MAIN<br>  int getNumber(vector &lt;int&gt; factors, int n) {<br>    s.clear();<br>    s.insert(1);<br>    while(n&gt;0) {<br>      --n;<br>      if(s.empty()) return -1;<br>      LL x = *s.begin();<br>      if(n==0) return int(x);<br>      s.erase(x);<br>      FOREACH(it,factors) if(x* *it &lt;= MAX) s.insert(x * *it);<br>      while(size(s)&gt;n) {<br>        set&lt;int&gt;::iterator it = s.end(); --it;<br>        s.erase(it);<br>      }<br>    }<br>    return -1;<br>  }<br> <br>};<br> <br>// Powered by FileEdit<br> <br>// Powered by TomekAI<br>// Powered by TZTester 1.01 [25-Feb-2003]<br> <br>// Powered by CodeProcessor<br></td>