<td class="problemText" colspan="8" valign="middle" align="left">
            // You will never see how this line looked after 4 challenges failed!<br>#include &lt;algorithm&gt;<br>#include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;map&gt;<br>using namespace std;<br><br>#define LS &lt;<br>#define Size(x) (int(x.size()))<br><br>// All macros with parameters "k,a,b" run the "k" variable in range [a,b)<br>#define FOR(k,a,b) for(typeof(a) k=(a); k LS (b); ++k)<br><br>#define INF 1000000000<br>// produce TC-style answer<br>int tcize(int n) {return n&lt;INF ? n : -1;}<br><br>#ifdef floyd<br>FOR(k,0,100) FOR(i,0,100) FOR(j,0,100) w0[i][j] &lt;?= w0[i][k] + w0[k][j];<br>#endif<br><br>#line 3 "MirrorPlacement.cc"<br><br>int dx[4] = {+1,0,-1,0};<br>int dy[4] = {0,+1,0,-1};<br><br>struct Tpos {<br>  int x, y, dir;<br>  };<br><br>int dist[60][60][4];<br><br>class MirrorPlacement {<br>  public:<br>  int mirrors(vector &lt;string&gt; map) {<br>    // !FDI<br>    Tpos origin, dest;<br>    int X = Size(map[0]);<br>    int Y = Size(map);<br>    FOR(x,0,X) if(map[0][x]   == '.') {dest = origin; origin.x = x; origin.y = 0; origin.dir = 1;}<br>    FOR(x,0,X) if(map[Y-1][x] == '.') {dest = origin; origin.x = x; origin.y = Y-1; origin.dir = 3;}<br>    FOR(y,0,Y) if(map[y][0]   == '.') {dest = origin; origin.y = y; origin.x = 0; origin.dir = 0;}<br>    FOR(y,0,Y) if(map[y][X-1] == '.') {dest = origin; origin.y = y; origin.x = X-1; origin.dir = 2;}<br>    FOR(x,0,X) FOR(y,0,Y) FOR(d,0,4) dist[x][y][d] = INF;<br>    dist[origin.x][origin.y][origin.dir] = 0;<br>    for(int t=0; t&lt;10000; t++) {<br>      FOR(x,0,X) FOR(y,0,Y) FOR(d,0,4) {<br>        int d1;<br>        switch(map[y][x]) {<br>          case '#': d1=4; break;<br>          case '.':<br>            dist[x][y][(d+1)&amp;3] &lt;?= dist[x][y][d] + 1;<br>            dist[x][y][(d-1)&amp;3] &lt;?= dist[x][y][d] + 1;<br>            d1=d;<br>            break;<br>          case '/':<br>            d1 = 3-d;<br>            break;<br>          case '`':<br>            d1 = (5-d)&amp;3;<br>            break;<br>          }<br>        if((d1 &lt; 4) &amp;&amp; <br>          (x+dx[d1] &gt;= 0) &amp;&amp; (x+dx[d1] &lt; X) &amp;&amp; <br>          (y+dy[d1] &gt;= 0) &amp;&amp; (y+dy[d1] &lt; Y))<br>          dist[x+dx[d1]][y+dy[d1]][d1] &lt;?= dist[x][y][d];<br>        }<br>      }<br>    return tcize(dist[dest.x][dest.y][(dest.dir+2)&amp;3]);<br>    }<br>  };<br><br><br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003]<br>// Powered by CodeProcessor<br></td>