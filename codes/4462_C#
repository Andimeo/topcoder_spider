<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Text;<br>using System.Text.RegularExpressions;<br>using System.Collections;<br><br>public class MirrorPath {<br>    public string[] path(string[] maps) {<br>    int dx=0, dy=0, sx=0, sy=0;<br>    int n = maps.Length;<br>    int m = maps[0].Length;<br>    char[][] map = new char[n][];<br>    string[] maps2 = new string[n];<br><br>    for ( int i = 0; i &lt; n; i++ ) {<br>      map[i] = maps[i].ToCharArray();<br>    }<br><br>    for ( int i = 0; i &lt; n; i++ ) {<br>      if ( map[i][0] == '.' ) {<br>        sy = i;<br>        sx = 0;<br>        dx = 1;<br>        break;<br>      }<br>      if ( map[i][m-1] == '.' ) {<br>        sy = i;<br>        sx = m - 1;<br>        dx = -1;<br>        break;<br>      }<br>    }<br>    if ( sx == 0 &amp;&amp; sy == 0 ) {<br>      for ( int j = 0; j &lt; n; j++ ) {<br>        if ( map[0][j] == '.' ) {<br>          sx = j;<br>          sy = 0;<br>          dy = 1;<br>          break;<br>        }<br>        if ( map[n-1][j] == '.' ) {<br>          sx = j;<br>          sy = n - 1;<br>          dy = -1;<br>          break;<br>        }<br>      }<br>    }<br>    sx -= dx;<br>    sy -= dy;<br>    do {<br>      sx += dx;<br>      sy += dy;<br>      if ( !( sx &gt;= 0 &amp;&amp; sx &lt; m &amp;&amp; sy &gt;= 0 &amp;&amp; sy &lt; n ) )<br>        break;<br><br>      if ( map[sy][sx] == '.' || map[sy][sx] == '-' || map[sy][sx] == '|' ) {<br>        if ( dx != 0 ) {<br>          if ( map[sy][sx] == '|' )<br>            map[sy][sx] = '+';<br>          else<br>          map[sy][sx] = '-';<br>      } else if ( dy != 0 ) {<br>        if ( map[sy][sx] == '-' )<br>          map[sy][sx] = '+';<br>        else<br>          map[sy][sx] = '|';<br>      }<br>    } else if ( map[sy][sx] == '/' ) {<br>        int c = dx;<br>        dx = -dy;<br>        dy = -c;<br>      } else if ( map[sy][sx] == '`' ) {<br>        int c = dx;<br>        dx = dy;<br>        dy = c;<br>      }<br>      <br>      for ( int i = 0; i &lt; n; i++ ) {<br>        maps2[i] = new string( map[i] );<br>      }<br><br>    } while ( true );<br><br>  <br><br>    return maps2;<br>    }<br><br>}<br><br><br><br>// Powered by FileEdit<br>// Powered by CodeProcessor<br></td>