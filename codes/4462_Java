<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>public class MirrorPath <br>{<br>  public String[] path(String[] map) <br>  {<br>    int sx = 0, sy = 0;<br>    boolean found = false;<br>    int direction = 0;<br>    StringBuffer[] b = new StringBuffer[map.length];<br>    <br>    for(int bb = 0; bb&lt;map.length; bb++)<br>    {<br>      b[bb] = new StringBuffer(map[bb]);<br>    }<br>    <br>    for(int r = 0; r&lt;map.length; r++)<br>    {<br>      if(r == 0 || r == map.length - 1)<br>      {<br>        for(int c = 0; c&lt;map[r].length(); c++)<br>        {<br>          if(map[r].charAt(c) == '.')<br>          {<br>            sy = r;<br>            sx = c;<br>            found = true;<br>            if(r == map.length - 1)<br>              direction = 1;<br>            else<br>              direction = 3;<br>            break;<br>          }<br>        }<br>        if(found)<br>          break;<br>      }<br>      else<br>      {<br>        if(map[r].charAt(0) == '.')<br>        {<br>          direction = 0;<br>          sx = 0;<br>          sy = r;<br>          break;<br>        }<br>        else if(map[r].charAt(map[r].length()-1) == '.')<br>        {<br>          direction = 2;<br>          sx = map[r].length()-1;<br>          sy = r;<br>          break;<br>        }<br>      }<br>    }<br>        <br>    follow(direction, sx, sy, b);<br>    for(int x = 0; x&lt;b.length; x++)<br>    {<br>      map[x] = b[x].toString();<br>    }<br>    return map;<br>  }<br>  <br>  public void follow(int direction, int sx, int sy, StringBuffer[] map)<br>  {<br>    if(sy &gt;= 0 &amp;&amp; sx &gt;= 0 &amp;&amp; sy &lt;map.length &amp;&amp; sx &lt; map[sy].length())<br>    {<br>      char c = map[sy].charAt(sx);<br>      switch(c)<br>      {<br>      case '-': case '|': case '+':<br>        switch(direction)<br>        {<br>        case 0:          <br>          map[sy].setCharAt(sx, '+');<br>          follow(direction, sx+1, sy, map);<br>          break;<br>        case 1:<br>          map[sy].setCharAt(sx, '+');<br>          follow(direction, sx, sy-1, map);<br>          break;<br>        case 2:<br>          map[sy].setCharAt(sx, '+');<br>          follow(direction, sx-1, sy, map);<br>          break;<br>        case 3:<br>          map[sy].setCharAt(sx, '+');<br>          follow(direction, sx, sy+1, map);<br>          break;<br>        }<br>        break;<br>      case '.':<br>        switch(direction)<br>        {<br>        case 0:          <br>          map[sy].setCharAt(sx, '-');<br>          follow(direction, sx+1, sy, map);<br>          break;<br>        case 1:<br>          map[sy].setCharAt(sx, '|');<br>          follow(direction, sx, sy-1, map);<br>          break;<br>        case 2:<br>          map[sy].setCharAt(sx, '-');<br>          follow(direction, sx-1, sy, map);<br>          break;<br>        case 3:<br>          map[sy].setCharAt(sx, '|');<br>          follow(direction, sx, sy+1, map);<br>          break;<br>        }<br>        break;<br>      case '/':<br>        switch(direction)<br>        {<br>        case 0:          <br>          follow(1, sx, sy-1, map);<br>          break;<br>        case 1:          <br>          follow(0, sx+1, sy, map);<br>          break;<br>        case 2:          <br>          follow(3, sx, sy+1, map);<br>          break;<br>        case 3:          <br>          follow(2, sx-1, sy, map);<br>          break;<br>        }<br>        break;<br>      case '`':<br>        switch(direction)<br>        {<br>        case 0:          <br>          follow(3, sx, sy+1, map);<br>          break;<br>        case 1:          <br>          follow(2, sx-1, sy, map);<br>          break;<br>        case 2:          <br>          follow(1, sx, sy-1, map);<br>          break;<br>        case 3:          <br>          follow(0, sx+1, sy, map);<br>          break;<br>        }<br>        break;     <br>      }<br>    }<br>  }<br><br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by CodeProcessor<br></td>