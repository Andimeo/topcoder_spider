<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>public class ConnectFour {<br>  boolean[] used;<br>  int[] q;<br>  int qbeg, qend;<br><br>  public int state_to_num(int[] state) {<br>    int res = 0;<br>    for (int i=0; i &lt; 7; i++) {<br>      res = res*7 + state[i];<br>    }<br>    return res;<br>  }<br><br>  public int[] num_to_state(int num) {<br>    int[] state = new int[7];<br>    for (int i=6; i &gt;= 0; i--) {<br>      state[i] = num % 7;<br>      num = num / 7;<br>    }<br>    return state;<br>  }<br><br>  public int[] calc_state(String[] board) {<br>    int[] state = new int[7];<br>    for (int i=0; i &lt; 7; i++) {<br>      state[i] = 6;<br>      while ((state[i] &gt; 0) &amp;&amp; (board[6 - state[i]].charAt(i) == '.'))<br>        state[i]--;<br>      boolean ok = true;<br>      for (int j=0; j &lt; state[i]; j++)<br>      if (board[5 - j].charAt(i) == '.') {<br>        ok = false;<br>        break;<br>      }<br>      if (!ok) return new int[0];<br>    }<br>    return state;<br>  }<br><br>  public int winpl(String[] board) {<br>    for (int i=0; i &lt; 6; i++) {<br>      for (int j=0; j &lt; 7; j++) {<br>        if (board[i].charAt(j) != '.') {<br>          for (int dx=-1; dx &lt;= 1; dx++) {<br>            for (int dy=-1; dy &lt;= 1; dy++) {<br>              if ((dx != 0) || (dy != 0)) {<br>                if ((i + 3*dx &gt;= 0) &amp;&amp; (i + 3*dx &lt; 6) &amp;&amp; (j + 3*dy &gt;= 0) &amp;&amp; (j + 3*dy &lt; 7) &amp;&amp;<br>                   (board[i+dx].charAt(j+dy) == board[i].charAt(j)) &amp;&amp;<br>                   (board[i+2*dx].charAt(j+2*dy) == board[i].charAt(j)) &amp;&amp;<br>                   (board[i+3*dx].charAt(j+3*dy) == board[i].charAt(j))) {<br>                  if (board[i].charAt(j) == 'X') return 1;<br>                  if (board[i].charAt(j) == 'O') return 2;<br>                }<br>              }<br>            }<br>          }<br>        }<br>      }<br>    }<br>    return 0;<br>  }<br><br>    public String judge(String[] board) {<br>  used = new boolean[1000000];<br>  q = new int[1000000];<br>  Arrays.fill(used, false);<br>  int[] tmp = new int[7];<br>  Arrays.fill(tmp, 0);<br>  int tmpnum = state_to_num(tmp);<br>  q[qbeg++] = tmpnum;<br>  used[tmpnum] = true;<br>  while (qend &lt; qbeg) {<br>    int stnum = q[qend++];<br>    int[] state = num_to_state(stnum);<br>    int sum = 0;<br>    for (int i=0; i &lt; 7; i++)<br>      sum += state[i];<br>    char needCh;<br>    if (sum % 2 == 0) {<br>      needCh = 'X';<br>    } else {<br>      needCh = 'O';<br>    }<br>    for (int i=0; i &lt; 7; i++) {<br>      if ((state[i] &lt; 6) &amp;&amp; (board[5 - state[i]].charAt(i) == needCh)) {<br>        state[i]++;<br>        stnum = state_to_num(state);<br>        if (!used[stnum]) {<br>          q[qbeg++] = stnum;<br>          used[stnum] = true;<br>        }<br>        state[i]--;<br>      }<br>    }<br>  }<br>  int[] state = calc_state(board);<br>  if (state.length == 0) return "invalid";<br>  int win = winpl(board);<br>  if (win != 0) {<br>    for (int i=0; i &lt; 6; i++) {<br>      for (int j=0; j &lt; 7; j++) <br>      if (board[i].charAt(j) != '.')<br>      {<br>        String[] tmpb = new String[6];<br>        for (int k=0; k &lt; 6; k++) {<br>          tmpb[k] = "";<br>          for (int l=0; l &lt; 7; l++) {<br>            if ((i==k) &amp;&amp; (j==l)) {<br>              tmpb[k] += '.';<br>            } else tmpb[k] += board[k].charAt(l);<br>          }<br>        }<br>        state = calc_state(tmpb);<br>        if (state.length == 0) continue;<br>        win = winpl(tmpb);<br>        if (win != 0) continue;<br>        int stnum = state_to_num(state);<br>        if (!used[stnum]) continue;<br>        win = winpl(board);<br>        if (win == 1) {<br>          return "first player wins";<br>        } else {<br>          return "second player wins";<br>        }<br>      }<br>    }<br>    return "invalid";<br>  }<br><br>  state = calc_state(board);<br>  if (state.length == 0) {<br>    return "invalid";<br>  }<br>  int stnum = state_to_num(state);<br>  if (!used[stnum])<br>    return "invalid";<br><br>  int xcnt = 0;<br>  int ocnt = 0;<br>  for (int i=0; i &lt; 6; i++) {<br>    for (int j=0; j &lt; 7; j++) {<br>      if (board[i].charAt(j) == 'X') xcnt++;<br>      if (board[i].charAt(j) == 'O') ocnt++;<br>    }<br>  }<br>  if (xcnt + ocnt == 42) {<br>    return "draw game";<br>  }<br>  if (xcnt == ocnt) {<br>    return "first player moves";<br>  }<br>  return "second player moves";<br>    }<br><br>}<br><br><br><br>// Powered by FileEdit<br>// Powered by CodeProcessor<br></td>