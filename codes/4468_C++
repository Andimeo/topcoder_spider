<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;algorithm&gt;<br>#include &lt;iostream&gt;<br>#include &lt;sstream&gt;<br>#include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;queue&gt;<br>#include &lt;set&gt;<br>#include &lt;map&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cctype&gt;<br>#include &lt;cmath&gt;<br><br>using namespace std;<br><br>#ifdef __GNUC__<br>#define int64 long long<br>#else /* MSVC, say */<br>#define int64 __int64<br>#endif<br><br>class CardRemover {<br>public:<br>  int dist(string a, string b) {<br>    int res = 0;<br>    if ((a[0]==b[0])||(a[0]==b[1])||(a[0]==b[2])) res++;<br>    if ((a[1]==b[0])||(a[1]==b[1])||(a[1]==b[2])) res++;<br>    if ((a[2]==b[0])||(a[2]==b[1])||(a[2]==b[2])) res++;<br>    return res;<br>  }<br><br>    int calculate(vector &lt;string&gt; cards) {<br>    int n = cards.size();<br>        bool can[51][51];<br>    memset(can, 0, sizeof(bool));<br>    int i,j,k,l;<br>    for (i=0; i &lt; n; i++)<br>      can[i][i+1] = true;<br>    for (l=2; l &lt; n; l++)<br>      for (i=0; i+l&lt;n; i++) {<br>        can[i][i+l] = false;<br>        for (j=i+1; j &lt; i+l; j++)<br>          if ((dist(cards[i], cards[i+l]) &gt;= 2) &amp;&amp; (can[i][j]) &amp;&amp; (can[j][i+l]))<br>            can[i][i+l] = true;<br>      }<br>    int f[51];<br>    f[0] = 1;<br>    for (i=1; i&lt;n; i++) {<br>      f[i] = f[i-1]+1;<br>      for (j=0; j &lt; i; j++)<br>        if ((can[j][i]) &amp;&amp; (f[j]+1 &lt; f[i])) f[i] = f[j]+1;<br>    }<br>    return n -  f[n-1];<br>    }<br><br>};<br><br><br>// Powered by FileEdit<br>// Powered by CodeProcessor<br></td>