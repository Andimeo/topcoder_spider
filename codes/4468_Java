<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>import java.util.regex.*;<br> <br>public class CardRemover {<br>    String[] cards;<br>    int N;<br>    public int calculate(String[] cards) {<br>  this.cards = cards;<br>  N = cards.length;<br>        return doit(0, N-1);<br>    }<br> <br>    int doit(int beg, int end) {<br>  int rv = 0;<br>  int n = end-beg-1;<br>  for (int i=beg+1; i &lt; end; i++)<br>      rv = Math.max(rv, doit(beg, end, i));<br>  return rv;<br>    }<br> <br>    int [][][] memo = new int[52][52][52];<br> <br>    int doit(int beg, int end, int pivot) {<br>  if (memo[beg][end][pivot] &gt; 0)<br>      return memo[beg][end][pivot]-1;<br> <br>  int rv = doit(beg, pivot) + doit(pivot, end);<br>  if (rv == end-beg-2)<br>      rv += removable(beg, pivot, end) ? 1 : 0;<br> <br>  memo[beg][end][pivot] = rv+1;<br>  return rv;<br>    }<br> <br>    int bitcnt(long x) {<br>  int rv = 0;<br>  while (x != 0) {<br>      rv++;<br>      x &amp;= x-1;<br>  }<br>  return rv;<br>    }<br> <br>    boolean removable(int i, int j, int k) {<br>  return bitcnt(getvec(cards[i]) &amp; getvec(cards[k])) &gt;= 2;<br>    }<br> <br>    int getvec(String s) {<br>  int rv = 0;<br>  for (int i=0; i &lt; s.length(); i++) {<br>      rv |= (1&lt;&lt;(s.charAt(i)-'A'));<br>  }<br>  return rv;<br>    }<br>}<br></td>