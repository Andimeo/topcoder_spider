<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections;<br>public class PolyominoCut {<br>  public int[][] field = new int[10][];<br><br>  public PolyominoCut()<br>  {<br>    for (int i = 0; i &lt; 10; ++i)<br>      field[i] = new int[10];<br>  }<br><br>  struct Polyomino<br>  {<br>    public int width;<br>    public int height;<br>    public int[][] data;<br><br>    public override int GetHashCode()<br>    {<br>      int res = width ^ height;<br>      for (int i = 0; i &lt; height; ++i)<br>        for (int j = 0; j &lt; width; ++j)<br>          res ^= (data[i][j] * (i * 31 + j * 37));<br>      return res;<br>    }<br><br>    public override bool Equals(object obj)<br>    {<br>      Polyomino p = (Polyomino) obj;<br>      if (width != p.width || height != p.height)<br>        return false;<br>      for (int i = 0; i &lt; height; ++i)<br>        for (int j = 0; j &lt; width; ++j)<br>          if (data[i][j] != p.data[i][j])<br>            return false;<br><br>      return true;<br>    }<br><br>    public int getData(int row, int col)<br>    {<br>      if (row &lt; 0 || row &gt;= height || col &lt; 0 || col &gt;= width)<br>        return 0;<br>      else<br>        return data[row][col];<br>    }<br><br>    public Polyomino duplicate(int srow, int scol, int erow, int ecol)<br>    {<br>      Polyomino res;<br><br>      res.width = width + scol + ecol;<br>      res.height = height + srow + erow;<br>      res.data = new int[res.height][];<br>      for (int i = 0; i &lt; res.height; ++i)<br>      {<br>        res.data[i] = new int[res.width];<br>        for (int j = 0; j &lt; res.width; ++j)<br>          res.data[i][j] = 0;<br>      }<br>      for (int i = 0; i &lt; height; ++i)<br>        for (int j = 0; j &lt; width; ++j)<br>        {<br>          res.data[i + srow][j + scol] = data[i][j];<br>        }<br><br>      return res;<br>    }<br>  }<br><br>  void Generate(Polyomino origin, Hashtable dest)<br>  {<br>    for (int i = 0; i &lt; origin.height; ++i)<br>      for (int j = 0; j &lt; origin.width; ++j)<br>        if (origin.data[i][j] == 0)<br>          if (origin.getData(i+1,j) &gt; 0 ||<br>            origin.getData(i-1,j) &gt; 0 ||<br>            origin.getData(i,j-1) &gt; 0 ||<br>            origin.getData(i,j+1) &gt; 0)<br>          {<br>            Polyomino p = origin.duplicate(0,0,0,0);<br>            p.data[i][j] = 1;<br>            dest[p] = null;<br>          }<br>    for (int i = 0; i &lt; origin.height; ++i)<br>      if (origin.data[i][0] &gt; 0)<br>      {<br>        Polyomino p = origin.duplicate(0,1,0,0);<br>        p.data[i][0] = 1;<br>        dest[p] = null;<br>      }<br>    for (int i = 0; i &lt; origin.height; ++i)<br>      if (origin.data[i][origin.width - 1] &gt; 0)<br>      {<br>        Polyomino p = origin.duplicate(0,0,0,1);<br>        p.data[i][origin.width] = 1;<br>        dest[p] = null;<br>      }<br>    for (int i = 0; i &lt; origin.width; ++i)<br>      if (origin.data[0][i] &gt; 0)<br>      {<br>        Polyomino p = origin.duplicate(1,0,0,0);<br>        p.data[0][i] = 1;<br>        dest[p] = null;<br>      }<br>    for (int i = 0; i &lt; origin.width; ++i)<br>      if (origin.data[origin.height - 1][i] &gt; 0)<br>      {<br>        Polyomino p = origin.duplicate(0,0,1,0);<br>        p.data[origin.height][i] = 1;<br>        dest[p] = null;<br>      }<br>  }<br><br>  int dfs(int height, int width, int row, int col)<br>  {<br>    if (row &lt; 0 || row &gt;= height || col &lt; 0 || col &gt;= width)<br>      return 0;<br>    if (field[row][col] != 1)<br>      return 0;<br>    field[row][col] = 2;<br>    int ret = 1;<br>    ret += dfs(height, width, row + 1, col);<br>    ret += dfs(height, width, row - 1, col);<br>    ret += dfs(height, width, row, col - 1);<br>    ret += dfs(height, width, row, col + 1);<br>    return ret;<br>  }<br><br>  bool correct(Polyomino p, int drow, int dcol, int height, int width)<br>  {<br>    if (drow &gt; 1) <br>    {<br>      int by = drow - 1;<br>      drow -= by;<br>      height -= by;<br>    }<br><br>    if (dcol &gt; 1)<br>    {<br>      int by = dcol - 1;<br>      dcol -= by;<br>      width -= by;<br>    }<br><br>    if (height &gt; p.height + drow + 1)<br>      height = p.height + drow + 1;<br><br>    if (width &gt; p.width + dcol + 1)<br>      width = p.width + dcol +1;<br><br>    for (int i = 0; i &lt; height; ++i)<br>      for (int j = 0; j &lt; width; ++j)<br>        field[i][j] = 1;<br><br>    int num = height * width;<br><br>    for (int i = 0; i &lt; p.height; ++i)<br>      for (int j = 0; j &lt; p.width; ++j)<br>        if (p.data[i][j] &gt; 0) <br>        {<br>          field[i + drow][j + dcol] = 0;<br>          --num;<br>        }<br><br>    for (int i = 0; i &lt; height; ++i)<br>      for (int j = 0; j &lt; width; ++j)<br>        if (field[i][j] == 1)<br>        {<br>          if (num == dfs(height,width,i,j))<br>            return true;<br>          else<br>            return false;<br>        }<br><br>    return true;<br>  }<br><br>  public int count(int k, int width, int height) {<br>    Hashtable cur = new Hashtable();<br>    Polyomino start;<br>    start.width = 1;<br>    start.height = 1;<br>    start.data = new int[1][];<br>    start.data[0] = new int[1];<br>    start.data[0][0] = 1;<br>    cur[start] = null;<br>    for (int step = 2; step &lt;= k; ++step)<br>    {<br>      Hashtable next = new Hashtable();<br>      foreach (Polyomino p in cur.Keys)<br>      {<br>        Generate(p, next);<br>      }<br>      cur = next;<br>    }<br><br>    int res = 0;<br><br>    foreach (Polyomino p in cur.Keys)<br>    {<br>      for (int srow = 0; srow &lt;= 1; ++srow)<br>        for (int scol = 0; scol &lt;= 1; ++scol)<br>          for (int erow = 0; erow &lt;= 1; ++erow)<br>            for (int ecol = 0; ecol &lt;= 1; ++ecol)<br>            {<br>              if (srow + p.height + erow &gt; height || scol + p.width + ecol &gt; width)<br>                continue;<br><br>              if (srow == 0 &amp;&amp; erow == 0 &amp;&amp; p.height != height)<br>                continue;<br><br>              if (scol == 0 &amp;&amp; ecol == 0 &amp;&amp; p.width != width)<br>                continue;<br><br>              if (!correct(p, srow, scol, srow + p.height + erow, scol + p.width + ecol))<br>                continue;<br><br>              int am = 1;<br>              if (srow &gt; 0 &amp;&amp; erow &gt; 0)<br>                am *= (height - srow - p.height - erow + 1);<br>              if (scol &gt; 0 &amp;&amp; ecol &gt; 0)<br>                am *= (width - scol - p.width - ecol + 1);<br><br>              res += am;<br>            }<br>    }<br><br>    return res;<br>  }<br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003]<br>// Powered by CodeProcessor<br></td>