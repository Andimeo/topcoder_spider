<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;algorithm&gt;<br>#include &lt;iostream&gt;<br>#include &lt;set&gt;<br>#include &lt;sstream&gt;<br>#include &lt;string&gt;<br>#include &lt;vector&gt;<br><br>using namespace std;<br><br>typedef pair&lt;int,int&gt; coords;<br>#define X first<br>#define Y second <br><br>const int dx[4] = { -1, 0, 1, 0 };<br>const int dy[4] = { 0, 1, 0, -1 }; <br><br>set&lt; set&lt;coords&gt; &gt; bio;<br><br>class PolyominoCut { <br>   public: <br>   <br>   int solve( int w, int h, set&lt;coords&gt; polyomino ) {<br>      int minx = 0, maxx = 0;<br>      int miny = 0, maxy = 0;<br>      <br>      for( set&lt;coords&gt;::iterator it = polyomino.begin(); it != polyomino.end(); ++it ) {<br>         minx &lt;?= (*it).X; maxx &gt;?= (*it).X;<br>         miny &lt;?= (*it).Y; maxy &gt;?= (*it).Y;<br>      }<br>      <br>      for( int x = minx; x &lt;= maxx; ++x )<br>         for( int y = miny; y &lt;= maxy; ++y )<br>            if( !polyomino.count( coords( x, y ) ) &amp;&amp;<br>                polyomino.count( coords( x+1, y ) ) &amp;&amp;<br>                polyomino.count( coords( x, y+1 ) ) &amp;&amp;<br>                polyomino.count( coords( x-1, y ) ) &amp;&amp;<br>                polyomino.count( coords( x, y-1 ) ) ) return 0;<br><br>      int N = 0, E = 0, S = 0, W = 0;<br>      int cnt = 0;<br>      for( int x = minx; x &lt;= maxx; ++x ) {<br>         if( cnt == 2 &amp;&amp;  polyomino.count( coords( x, miny ) ) ) cnt++;<br>         if( cnt == 1 &amp;&amp; !polyomino.count( coords( x, miny ) ) ) cnt++;<br>         if( cnt == 0 &amp;&amp;  polyomino.count( coords( x, miny ) ) ) cnt++;<br>      }<br>      if( cnt == 3 ) N = 1;<br>      cnt = 0;<br>      for( int x = minx; x &lt;= maxx; ++x ) {<br>         if( cnt == 2 &amp;&amp;  polyomino.count( coords( x, maxy ) ) ) cnt++;<br>         if( cnt == 1 &amp;&amp; !polyomino.count( coords( x, maxy ) ) ) cnt++;<br>         if( cnt == 0 &amp;&amp;  polyomino.count( coords( x, maxy ) ) ) cnt++;<br>      }<br>      if( cnt == 3 ) S = 1;<br>      cnt = 0;<br>      for( int y = miny; y &lt;= maxy; ++y ) {<br>         if( cnt == 2 &amp;&amp;  polyomino.count( coords( minx, y ) ) ) cnt++;<br>         if( cnt == 1 &amp;&amp; !polyomino.count( coords( minx, y ) ) ) cnt++;<br>         if( cnt == 0 &amp;&amp;  polyomino.count( coords( minx, y ) ) ) cnt++;<br>      }<br>      if( cnt == 3 ) W = 1;<br>      cnt = 0;<br>      for( int y = miny; y &lt;= maxy; ++y ) {<br>         if( cnt == 2 &amp;&amp;  polyomino.count( coords( maxx, y ) ) ) cnt++;<br>         if( cnt == 1 &amp;&amp; !polyomino.count( coords( maxx, y ) ) ) cnt++;<br>         if( cnt == 0 &amp;&amp;  polyomino.count( coords( maxx, y ) ) ) cnt++;<br>      }<br>      if( cnt == 3 ) E = 1;<br>      //      cout &lt;&lt; N &lt;&lt; W &lt;&lt; S &lt;&lt; E &lt;&lt; endl;<br><br>      int NW = !polyomino.count( coords( minx, miny ) );<br>      int NE = !polyomino.count( coords( maxx, miny ) );<br>      int SW = !polyomino.count( coords( minx, maxy ) );<br>      int SE = !polyomino.count( coords( maxx, maxy ) );<br><br>      int rows = h - (maxy-miny) - N - S;<br>      int cols = w - (maxx-minx) - E - W;<br>      <br>      int ret = rows*cols;<br>      if( NW &amp;&amp; !N &amp;&amp; !W ) ret--;<br>      if( NE &amp;&amp; !N &amp;&amp; !E ) ret--;<br>      if( SW &amp;&amp; !S &amp;&amp; !W ) ret--;<br>      if( SE &amp;&amp; !S &amp;&amp; !E ) ret--;<br>      return ret;<br>   }<br><br>   int rec( int k, int w, int h, set&lt;coords&gt; polyomino ) {<br>      int minx = 0, maxx = 0, miny = 0, maxy = 0;<br>      for( set&lt;coords&gt;::iterator it = polyomino.begin(); it != polyomino.end(); ++it ) {<br>         minx &lt;?= (*it).X; maxx &gt;?= (*it).X;<br>         miny &lt;?= (*it).Y; maxy &gt;?= (*it).Y;<br>      }<br>      set&lt;coords&gt; novi;<br><br>      for( set&lt;coords&gt;::iterator it = polyomino.begin(); it != polyomino.end(); ++it ) <br>         novi.insert( coords( (*it).X-minx, (*it).Y-miny ) );<br>      <br>      if( bio.count( novi ) ) return 0;<br>      bio.insert( novi );<br><br>      polyomino = novi;<br><br>      if( k == 0 ) return solve( w, h, polyomino );<br>      <br>      int ret = 0;<br><br>      for( set&lt;coords&gt;::iterator it = polyomino.begin(); it != polyomino.end(); ++it ) {<br>         for( int d = 0; d &lt; 4; ++d ) {<br>            coords a( (*it).X + dx[d], (*it).Y + dy[d] ); <br>            if( novi.count( a ) ) continue;<br>            novi.insert( a );<br>            ret += rec( k-1, w, h, novi );<br>            novi.erase( a );<br>         }<br>      }<br>      <br>      return ret;<br>   }<br><br>   int count(int k, int width, int height) <br>   { <br>      bio.clear();<br>      set&lt;coords&gt; polyomino;<br>      polyomino.insert( coords( 0, 0 ) );<br>      return rec( k-1, width, height, polyomino );<br>   } <br><br><br><br><br><br>   <br><br>}; <br><br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003]<br>// Powered by CodeProcessor<br></td>