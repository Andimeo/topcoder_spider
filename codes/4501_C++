<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;algorithm&gt;<br>#include &lt;iostream&gt;<br>#include &lt;sstream&gt;<br>#include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;queue&gt;<br>#include &lt;set&gt;<br>#include &lt;map&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cctype&gt;<br>#include &lt;cmath&gt;<br>using namespace std;<br><br>#define ALL(c) (c).begin(),(c).end()<br>#define REP(i,n)    for(int i=0,_n=n;i&lt;_n;i++)<br>#define REPD(i,n)   for(int i=(n-1);i&gt;=0;i--)<br>#define FOR(i,v,n)  for(int i=v,_n=n;i&lt;_n;i++)<br>#define FORD(i,v,n) for(int i=(n-1),_v=v;i&gt;=_v;i--)<br>#define FOREACH(it,c) for(typeof((c).begin()) it=(c).begin();it!=(c).end();++it)<br>#define sz(c) (c).size()<br><br>typedef vector&lt;int&gt; VI;<br><br>VI la,lo;<br>int o,d;<br>double melhor;<br>bool adj[30][30],vis[30];<br><br>double rad(int g) {<br>  return (g*3.1415926535897932384626433832795)/180;<br>}<br><br>double dist(int i, int j) {<br>  double radius=4000.00;<br>  double lat1=rad(la[i]),lat2=rad(la[j]),lon1=rad(lo[i]),lon2=rad(lo[j]);<br>  <br>  return radius * acos(sin(lat1) * sin(lat2) + cos(lat1) * cos(lat2) * cos(lon1 - lon2));<br>}<br><br>void calc(int i, double custo) {<br>  if (custo&gt;melhor)<br>    return;<br><br>  if (i==d) {<br>    melhor&lt;?=custo;<br>    return;<br>  }<br><br>  vis[i]=true;<br>  REP(j,30) if (adj[i][j] &amp;&amp; !vis[j])<br>    calc(j,custo+dist(i,j));<br>  vis[i]=false;<br>}<br><br>struct AirTravel {<br>  // MAIN<br>  double shortestTrip(vector &lt;int&gt; latitude, vector &lt;int&gt; longitude, vector &lt;string&gt; canTravel, int origin, int destination) {<br>    <br>    o=origin; d=destination;<br>    la=latitude;<br>    lo=longitude;<br><br>    cout&lt;&lt;dist(0,2)&lt;&lt;endl;<br><br>    memset(vis,false,sizeof(vis));<br>    memset(adj,false,sizeof(adj));<br><br>    REP(i,sz(canTravel)) {<br>      stringstream ss(canTravel[i]);<br>      int j;<br>      while(ss&gt;&gt;j) {<br>  adj[i][j]=true;<br>      }<br>    }<br>    <br>    melhor=1000000000000000000000000000.0;<br>    calc(o,0.0);<br><br>    if (melhor==1000000000000000000000000000.0)<br>      return -1;<br><br>    return melhor;<br>  }<br>};<br><br><br>// Powered by FileEdit<br>// Powered by CodeProcessor<br></td>