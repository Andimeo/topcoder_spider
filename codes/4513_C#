<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Text;<br>using System.Text.RegularExpressions;<br>using System.Collections;<br><br>public class SysFailure<br>{<br>  int rn, cn;<br>  int n;<br>  struct Node<br>  {<br>    public int x, y;<br>    public Node(int a, int b)<br>    {<br>      x = a;<br>      y = b;<br>    }<br>  }<br>  int[] dx = { -1, 0, 1, 1, 1, 0, -1, -1 };<br>  int[] dy = { -1, -1, -1, 0, 1, 1, 1, 0 };<br><br>  bool Islenok(int x, int y, int[,] st)<br>  {<br>    //for (int i = 0; i &lt; rn; i++)<br>    //{<br>    //    for (int j = 0; j &lt; cn; j++)<br>    //    {<br>    //        Console.Write(st[i, j]);<br>    //    }<br>    //    Console.WriteLine();<br>    //}<br>    ArrayList li = new ArrayList();<br>    int cl = 0;<br>    li.Add(new Node(x, y));<br>    st[x, y] = 0;<br>    while (cl != li.Count)<br>    {<br>      Node now = (Node)li[cl];<br>      for (int i = 0; i &lt; 8; i++)<br>      {<br>        Node nn = now;<br>        nn.x = now.x + dx[i];<br>        nn.y = now.y + dy[i];<br>        if (nn.x &gt;= 0 &amp;&amp; nn.x &lt; rn &amp;&amp; nn.y &gt;= 0 &amp;&amp; nn.y &lt; cn)<br>        {<br>          if (st[nn.x, nn.y] == 1)<br>          {<br>            li.Add(nn);<br>            st[nn.x, nn.y] = 0;<br>            if (li.Count &gt;= n)<br>              return true;<br>          }<br>        }<br>      }<br>      cl++;<br>    }<br>    return li.Count &gt;= n;<br>  }<br>  bool Isok(int[,] st)<br>  {<br>    for (int i = 0; i &lt; rn; i++)<br>    {<br>      for (int j = 0; j &lt; cn; j++)<br>      {<br>        if (st[i, j] == 1)<br>        {<br>          if (Islenok(i, j, st))<br>            return true;<br>        }<br>      }<br>    }<br>    return false;<br>  }<br>  void map(string[] state, int i, int j, ref int[,] st)<br>  {<br>    for (int u = 0; u &lt; rn; u++)<br>    {<br>      for (int v = 0; v &lt; cn; v++)<br>      {<br>        if (i == u &amp;&amp; j == v)<br>        {<br>          st[u, v] = 0;<br><br>        }<br>        else<br>          st[u, v] = state[u][v] - '0';<br>      }<br>    }<br>  }<br>  public int critical(int n, string[] state)<br>  {<br>    this.n = n;<br>    int res = 0;<br>    rn = state.Length;<br>    cn = state[0].Length;<br>    int[,] st = new int[rn, cn];<br>    map(state, -1, 0, ref st);<br>    if (!Isok(st))<br>      return -1;<br><br>    for (int i = 0; i &lt; rn; i++)<br>    {<br>      for (int j = 0; j &lt; cn; j++)<br>        if (state[i][j] == '1')<br>        {<br>          map(state, i, j, ref st);<br>          if (!Isok(st))<br>            res++;<br>        }<br>    }<br>    return res;<br>  }<br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by CodeProcessor<br></td>