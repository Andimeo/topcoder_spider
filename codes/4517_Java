<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>public class Runway {<br>    public int inspect(int[] x0, int[] x1) {<br>        int total = 0;<br>        Segment[] seg = new Segment[x0.length];<br>        for (int i = 0; i &lt; x0.length; i++) {<br>            seg[i] = new Segment(x0[i], x1[i]);<br>        }<br>        List&lt;Segment&gt; upp = new ArrayList&lt;Segment&gt;();<br><br>        out: for (int i = seg.length - 1; i &gt;= 0; i--) {<br>            Segment next = seg[i];<br>            if (next.length() == 0) continue;<br>            for (Iterator&lt;Segment&gt; it = upp.iterator(); it.hasNext();) {<br>                Segment up = it.next();<br>                if (up.include(next)) continue out;<br>                if (!up.intersect(next)) continue;<br>                next.merge(up);<br>                it.remove();<br>            }<br>            total++;<br>            upp.add(next);<br>        }<br><br>        return total;<br>    }<br><br>    class Segment {<br>        // segment [a, b]<br>        int a;<br>        int b;<br><br>        public Segment(int a, int b) {<br>            if (a &gt; b) {<br>                a = a + b;<br>                b = a - b;<br>                a = a - b;<br>            }<br>            this.a = a;<br>            this.b = b;<br>        }<br><br>        public boolean intersect(Segment s) {<br>            return !(s.a &gt; b || s.b &lt; a);<br>        }<br><br>        public boolean merge(Segment s) {<br>            if (!intersect(s)) return false;<br>            a = Math.min(a, s.a);<br>            b = Math.max(b, s.b);<br>            return true;<br>        }<br><br>        public boolean include(Segment s) {<br>            return s.a &gt;= a &amp;&amp; s.b &lt;= b;<br>        }<br><br>        public int length() {<br>            return a - b;<br>        }<br>    }<br><br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by CodeProcessor<br></td>