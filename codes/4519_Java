<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>import java.util.regex.*;<br>import java.text.*;<br>import java.math.*;<br>class Frac implements Comparable{<br>  BigInteger u, d;<br>  public Frac(String up, String down){<br>    u = new BigInteger(up);<br>    d = new BigInteger(down);<br>    reduce();<br>  }<br>  public Frac(long up, long down){<br>    u = new BigInteger(Long.toString(up));<br>    d = new BigInteger(Long.toString(down));<br>    reduce();<br>  }<br>  public Frac(BigInteger up, BigInteger down){<br>    u = up;<br>    d = down;<br>    reduce();<br>  }<br>  Frac add(Frac f){<br>    BigInteger gcd = d.gcd(f.d);<br>    BigInteger adjMe = f.d.divide(gcd);<br>    BigInteger adjIt = d.divide(gcd);<br>    BigInteger under = adjMe.multiply(d);<br>    return new Frac(adjMe.multiply(u).add(adjIt.multiply(f.u)), under);<br>  }<br>  Frac subtract(Frac f){<br>    BigInteger gcd = d.gcd(f.d);<br>    BigInteger adjMe = f.d.divide(gcd);<br>    BigInteger adjIt = d.divide(gcd);<br>    BigInteger under = adjMe.multiply(d);<br>    return new Frac(adjMe.multiply(u).subtract(adjIt.multiply(f.u)), under);<br>  }<br>  Frac multiply(Frac f){<br>    return new Frac(u.multiply(f.u), d.multiply(f.d));<br>  }<br>  Frac divide(Frac f){<br>    return new Frac(u.multiply(f.d), d.multiply(f.u));<br>  }<br>  public int compareTo(Object o){<br>    Frac f = (Frac)o;<br>    return u.multiply(f.d).compareTo(f.u.multiply(d));<br>  }<br>  public String toString(){<br>    return u+"/"+d;<br>  }<br>  public Frac abs(){<br>    return new Frac(u.abs(),d.abs());<br>  }<br>  private void reduce(){<br>    BigInteger gcd = u.gcd(d);<br>    if(!gcd.equals(BigInteger.ONE)){<br>      u = u.divide(gcd);<br>      d = d.divide(gcd);<br>    }<br>  }<br>}<br>public class CalcRoot {<br>  public String approximate(int N, int D) {<br>    Frac best = new Frac(1,0);<br>    String ret = "";<br>    Frac num = new Frac(N,1);<br>    for(int d = 1; d &lt;= D; d++){<br>      long lo = 0, hi = 10000000;<br>      while(lo+1&lt;hi){<br>        long mid = (lo+hi)/2;<br>        Frac sq = new Frac(mid*mid,d*d);<br>        if(sq.compareTo(num) &lt; 0) lo = mid;<br>        else hi = mid;<br>      }<br>      for(int i = 0; i &lt; 2; i++){<br>        Frac sq = new Frac((lo+i)*(lo+i),d*d);<br>        Frac dif = (num.subtract(sq)).abs();<br>        if(dif.compareTo(best) &lt; 0){<br>          best = dif;<br>          ret = (lo+i)+"/"+d;<br>        }        <br>      }<br>    }<br>    return ret;<br>  }<br> <br>}<br> <br>// Powered by PopsEdit<br>// Powered by CodeProcessor<br></td>