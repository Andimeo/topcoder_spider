<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections;<br> <br>public class WatchTower<br>{<br>  <br>  double[] lineParams(double x1, double y1, double x2, double y2)<br>  {<br>    double[] k = new double[3];<br>    k[0] = y2 - y1;<br>    k[1] = x1 - x2;<br>    k[2] = -x1 * k[0] - y1 * k[1];<br>    return k;<br>  }<br>  <br>  double[] lineIntersect(double[] k1, double[] k2)<br>  {<br>    double a1 = k1[0];<br>    double b1 = k1[1];<br>    double c1 = k1[2];<br>    double a2 = k2[0];<br>    double b2 = k2[1];<br>    double c2 = k2[2];<br>    double d = a1 * b2 - a2 * b1;<br>    double d1 = c1 * b2 - c2 * b1;<br>    double d2 = a1 * c2 - a2 * c1;<br>    <br>    double[] res = new double[2];<br>    res[0] = double.MaxValue;<br>    res[1] = double.MaxValue;<br>    <br>    if (Math.Abs(d) &gt; 1e-7) <br>    {<br>      res[0] = -d1 / d;<br>      res[1] = -d2 / d;<br>    }<br>    else<br>    {<br>      // dirty hack<br>      if ((Math.Abs(d1) &lt; 1e-7) &amp; (Math.Abs(d2) &lt; 1e-7)) {<br>        res[0] = -1.0;<br>        res[1] = -1.0;<br>      }<br>    }<br>    return res;<br>  }<br> <br>  double[][] lines;<br>  int n;<br> <br>  double calcH(double x)<br>  {<br>    double res = double.MinValue;<br>    double[] par = lineParams(x, 0.0, x, 1.0);<br>    for (int i = 0; i &lt; n; i++) {<br>      res = Math.Max(res, lineIntersect(par, lines[i])[1]);<br>    }<br>    return res;<br>  }<br> <br>  public double minHeight(int[] positions, int[] heights)<br>  {<br>    double res = double.MaxValue;<br>    n = positions.Length - 1;<br>    <br>    lines = new double[n][];<br>    for (int i = 0; i &lt; n; i++) {<br>      lines[i] = lineParams((double) positions[i], (double) heights[i], (double) positions[i + 1], (double) heights[i + 1]);<br>    }<br>    <br>    <br>    for (int i = 0; i &lt; n + 1; i++)<br>      res = Math.Min(res, calcH(positions[i]) - heights[i]);<br>      <br>    for (int i = 0; i &lt; n; i++) {<br>      for (int j = i + 1; j &lt; n; j++) {<br>        double[] p = lineIntersect(lines[i], lines[j]);<br>        if ((p[0] &gt;= positions[0]) &amp; (p[0] &lt;= positions[n])) {<br>          double hei = double.NegativeInfinity;<br>          <br>          for (int k = 0; k &lt; n; k++) {<br>            if ((positions[k] &lt;= p[0]) &amp; (p[0] &lt;= positions[k + 1]))<br>              hei = lineIntersect(lines[k], lineParams(p[0], 0, p[0], 1))[1];<br>          }<br>          <br>          res = Math.Min(res, calcH(p[0]) - hei);<br>        }<br>      }<br>    }<br>    <br>    return res;<br>  }<br> <br>  [STAThread]<br>  static void Main(string[] args)<br>  {<br>  WatchTower obj = new WatchTower();<br>  }<br>}<br></td>