<td class="problemText" colspan="8" valign="middle" align="left">
            // You will never see how this line looked after 4 challenges failed!<br>#include &lt;algorithm&gt;<br>#include &lt;vector&gt;<br>using namespace std;<br><br>typedef long double ld;<br>typedef vector&lt;int&gt; vi;<br><br>#define LS &lt;<br>#define Size(x) (int(x.size()))<br>#define LET(k,val) typeof(val) k = (val)<br>// execute "act", and return "val" as an expression result<br>#define CLC(act,val) (*({act; static typeof(val) CLCR; CLCR = (val); &amp;CLCR;}))<br><br>// All macros with parameters "k,a,b" run the "k" variable in range [a,b)<br>#define FOR(k,a,b) for(typeof(a) k=(a); k LS (b); ++k)<br><br>// Standard mathematical quantifiers, plus tools to implement them<br>// note: the range has to be non-empty here<br>#define FOLD1(k,a,b,init,act) CLC(LET(k, a); LET(R##k, init); for(++k; k LS (b); ++k) act, R##k)<br>#define MAX(k,a,b,x) FOLD1(k,a,b,x, R##k &gt;?= (x))<br><br>#line 3 "WatchTower.cc"<br><br>int N;<br><br>vi pos, h;<br><br>ld level(ld x, int l) {<br>  ld x1 = pos[l], x2 = pos[l+1];<br>  ld y1 = h  [l], y2 = h  [l+1];<br>  // (y-y1) / (y2-y1) == (x-x1) / (x2-x1)<br>  ld res = y1 + (x-x1) * (y2-y1) / (x2-x1);<br>//printf("(%Lf,%Lf) (%Lf,%Lf) (%Lf,%Lf)\n",<br>//  x1,y1, x2,y2, x,res);<br>  return res;<br>  }<br><br><br>ld altAt(ld x, int k) {<br>  ld y = MAX(l,0,N-1, level(x,l));<br>  return y - level(x,k);<br>  }<br><br>class WatchTower {<br>  public:<br>  double minHeight(vector &lt;int&gt; positions, vector &lt;int&gt; heights) {<br>    // !FDI<br>    pos = positions; h = heights;<br>    N = Size(positions);<br><br>    ld min = 0;<br>    <br>    FOR(k,0,N-1) {<br>      ld low = pos[k];<br>      ld hig = pos[k+1];<br>      FOR(it,0,500) {<br>        ld a = (low*2+hig) / 3;<br>        ld b = (low+2*hig) / 3;<br>        ld ah = altAt(a, k);<br>        ld bh = altAt(b, k);<br>        if(ah &lt; bh) hig = b; else low = a;<br>        }<br>//    printf("altat %d (%Lf): %Lf\n", k, low, altAt(low, k));<br>      if(k == 0) min = altAt(low, k);<br>      else min &lt;?= altAt(low, k);<br>      }<br>    <br>    return min;<br>    }<br>  };<br><br><br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003]<br>// Powered by CodeProcessor<br></td>