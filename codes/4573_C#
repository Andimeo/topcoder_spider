<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Text;<br>using System.Text.RegularExpressions;<br>using System.Collections;<br><br>public class DominoesGame {<br>    public DominoesGame() {<br>      // Genesis 1:1  In the beginning God created the heaven and the earth<br>    }<br>    int max = 0;<br>    int N;<br>    int[,] tiles;<br>    bool[] used;<br><br>    private void play(int x, int y, int doubX, int doubY, int score, bool first)<br>    {<br>        int sum;<br>        if (first)<br>        {<br>            sum = x + y;<br>        }<br>        else<br>        {<br>            sum = x * doubX + y * doubY;<br>        }<br>        if (sum % 5 == 0)<br>        {<br>            score = score + sum;<br>            max = Math.Max(max, score);<br>        }<br>        for (int i = 0; i &lt; N; i++)<br>            if (!used[i])<br>            {<br>                if (tiles[i, 0] == x)<br>                {<br>                    used[i] = true;<br>                    play(tiles[i, 1], y, tiles[i, 0] == tiles[i, 1] ? 2 : 1, doubY, score, false);<br>                    used[i] = false;<br>                }<br>                if (tiles[i, 1] == x)<br>                {<br>                    used[i] = true;<br>                    play(tiles[i, 0], y, tiles[i, 0] == tiles[i, 1] ? 2 : 1, doubY, score, false);<br>                    used[i] = false;<br>                }<br>                if (tiles[i, 0] == y)<br>                {<br>                    used[i] = true;<br>                    play(x, tiles[i, 1], doubX, tiles[i, 0] == tiles[i, 1] ? 2 : 1, score, false);<br>                    used[i] = false;<br>                }<br>                if (tiles[i, 1] == y)<br>                {<br>                    used[i] = true;<br>                    play(x, tiles[i, 0], doubX, tiles[i, 0] == tiles[i, 1] ? 2 : 1, score, false);<br>                    used[i] = false;<br>                }<br>            }<br>    }<br>    public int largestTotal(string[] _tiles) {<br>        N = _tiles.Length;<br>        tiles = new int[N, 2];<br>        used = new bool[N];<br>        for (int i = 0; i &lt; N; i++)<br>        {<br>            string[] items = _tiles[i].Split(new char[] { ':' });<br>            tiles[i, 0] = int.Parse(items[0]);<br>            tiles[i, 1] = int.Parse(items[1]);<br>            used[i] = false; <br>        }<br>        for (int i = 0; i &lt; N; i++)<br>        {<br>            used[i] = true;<br>            play(tiles[i, 0], tiles[i, 1], tiles[i, 0] == tiles[i, 1] ? 2 : 1, tiles[i, 0] == tiles[i, 1] ? 2 : 1, 0, true);<br>            used[i] = false;<br>        }<br>        return max;<br>    }<br><br>}<br><br><br><br>// Powered by FileEdit<br>// Powered by CodeProcessor<br></td>