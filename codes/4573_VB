<td class="problemText" colspan="8" valign="middle" align="left">
            Public Class DominoesGame<br>        Dim oMax As System.Collections.Hashtable<br>        Dim sTiles() As String<br>        Public Function largestTotal(ByVal tiles As String()) As Integer<br>            oMax = New System.Collections.Hashtable<br>            Dim i As Integer<br>            ReDim sTiles(tiles.GetUpperBound(0))<br>            For i = 0 To tiles.GetUpperBound(0)<br>                sTiles(i) = tiles(i).Substring(0, 1) &amp; tiles(i).Substring(2, 1)<br>            Next<br> <br>            Return iMax("", (1 &lt;&lt; (tiles.GetUpperBound(0) + 1)) - 1)<br> <br> <br>        End Function<br> <br>        Private Function iMax(ByVal sConfig As String, ByVal iHand As Integer) As String<br>            If oMax.ContainsKey(sConfig) Then Return oMax(sConfig)<br> <br>            ' If iHand = 0 Then Stop<br> <br>            Dim iTot As Integer<br>            Dim iBest As Integer = 0<br>            Dim i, j, k As Integer<br> <br>            If iHand &gt; 0 Then<br> <br>                For i = 0 To sTiles.GetUpperBound(0)<br>                    If ((1 &lt;&lt; i) And (iHand)) &gt; 0 Then<br>                        If sConfig = "" Then<br>                            iTot = iMax(sTiles(i), iHand - (1 &lt;&lt; i))<br>                            If iTot &gt; iBest Then iBest = iTot<br>                        Else<br>                            If sConfig.Substring(0, 1) = sTiles(i).Substring(1, 1) Then<br>                                iTot = iMax(sTiles(i) &amp; sConfig, iHand - (1 &lt;&lt; i))<br>                                If iTot &gt; iBest Then iBest = iTot<br>                            End If<br>                            If sConfig.Substring(0, 1) = sTiles(i).Substring(0, 1) Then<br>                                iTot = iMax(sTiles(i).Substring(1, 1) &amp; sTiles(i).Substring(0, 1) &amp; sConfig, iHand - (1 &lt;&lt; i))<br>                                If iTot &gt; iBest Then iBest = iTot<br>                            End If<br>                            If sConfig.Substring(sConfig.Length - 1, 1) = sTiles(i).Substring(0, 1) Then<br>                                iTot = iMax(sConfig &amp; sTiles(i), iHand - (1 &lt;&lt; i))<br>                                If iTot &gt; iBest Then iBest = iTot<br>                            End If<br>                            If sConfig.Substring(sConfig.Length - 1, 1) = sTiles(i).Substring(1, 1) Then<br>                                iTot = iMax(sConfig &amp; sTiles(i).Substring(1, 1) &amp; sTiles(i).Substring(0, 1), iHand - (1 &lt;&lt; i))<br>                                If iTot &gt; iBest Then iBest = iTot<br>                            End If<br>                        End If<br>                    End If<br>                Next<br>            End If<br>            Dim iVal As Integer<br>            iVal = iValue(sConfig)<br>            If iVal Mod 5 &gt; 0 Then iVal = 0<br> <br>            Dim iRet As Integer = iVal + iBest<br> <br>            oMax.Add(sConfig, iRet)<br> <br>            Return iRet<br> <br>        End Function<br> <br>        Private Function iValue(ByVal sConfig As String) As Integer<br>            If sConfig.Length = 0 Then Return 0<br>            If sConfig.Length = 2 Then Return CInt(sConfig.Substring(0, 1)) + CInt(sConfig.Substring(1, 1))<br>            Dim sEdge1, sEdge2, sEdge3, sEdge4 As String<br>            sEdge1 = sConfig.Substring(0, 1)<br>            sEdge2 = sConfig.Substring(1, 1)<br>            sEdge3 = sConfig.Substring(sConfig.Length - 2, 1)<br>            sEdge4 = sConfig.Substring(sConfig.Length - 1, 1)<br>            Dim i1, i2 As Integer<br> <br>            If sEdge1 = sEdge2 Then<br>                i1 = 2 * CInt(sEdge1)<br>            Else<br>                i1 = CInt(sEdge1)<br>            End If<br>            If sEdge3 = sEdge4 Then<br>                i2 = 2 * CInt(sEdge4)<br>            Else<br>                i2 = CInt(sEdge4)<br>            End If<br> <br>            Return i1 + i2<br>        End Function<br> <br>    End Class<br></td>