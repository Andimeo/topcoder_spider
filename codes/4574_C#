<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections;<br><br>public class BrokenCalculator <br>{<br>  public int fewestKeys(int[] keys, string operators, int target) <br>  {<br>    int [] cost = new int[1000];<br>    ArrayList next = new ArrayList();<br>    ArrayList numbers = new ArrayList();<br>    for(int i=0;i&lt;cost.Length;i++)<br>    {<br>      int[] d = digits(i);<br>      bool bad = false;<br>      foreach(int digit in d)<br>      {<br>        if(Array.IndexOf(keys, digit) == -1)<br>        {<br>          bad = true;<br>        }<br>      }<br>      if(bad) cost[i] = -1;<br>      else <br>      {<br>        cost[i] = d.Length;<br>        next.Add(i);<br>        numbers.Add(i);<br>      }<br>    }<br>  //  Console.WriteLine(next.Count);<br>    while(next.Count != 0)<br>    {<br>      int examine = (int)next[0];<br>      next.RemoveAt(0);<br>      for(int i=0;i&lt;numbers.Count;i++)<br>      {<br>        int num = (int) numbers[i];<br>        foreach(char op in operators)<br>        {<br>          int res = -1;<br>          switch(op)<br>          {<br>            case '+':<br>              res = examine + num; break;<br>            case '-':<br>              res = examine - num; break;<br>            case '*':<br>              res = examine * num; break;<br>            case '/':<br>              if(num != 0)<br>              res = examine / num; break;<br>          }<br>          if(res &gt;= 0 &amp;&amp; res &lt;= 999)<br>          {<br>            int newCost = cost[num] + cost[examine] + 1;<br>            if(target == res) newCost++;<br>        //    Console.WriteLine("" + examine + " " + op + " " + num + " = " + res + " " + newCost);<br>            if(cost[res] == -1 || cost[res] &gt; newCost)<br>            {<br>              cost[res] = newCost;<br>              if(!next.Contains(res)) next.Add(res);<br>            }<br>          }<br>        }<br>      }<br>    }<br>        return cost[target];<br>  }<br><br>  int[] digits(int number)<br>  {<br>    ArrayList d = new ArrayList();<br>    d.Add(number % 10);<br>    while((number /= 10) != 0)<br>    {<br>      d.Add(number%10);<br>    }<br>    return (int[])d.ToArray(typeof(int));<br>  }<br>}<br><br><br>// Powered by FileEdit<br>// Powered by CodeProcessor<br></td>