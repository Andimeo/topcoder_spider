<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;stdio.h&gt;<br>#include &lt;stdlib.h&gt;<br>#include &lt;string.h&gt;<br>#include &lt;math.h&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;vector&gt;<br>#include &lt;string&gt;<br>#include &lt;stack&gt;<br>#include &lt;queue&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;iterator&gt;<br>#include &lt;iostream&gt;<br>#include &lt;functional&gt;<br>#include &lt;sstream&gt;<br><br>using namespace std;<br><br>vector&lt;string&gt; tokenize(string s, string ch)<br>{<br>  int p,p2;<br>  vector&lt;string&gt; ret;<br>  for( p = 0; p &lt; s.size(); p = p2+1 )<br>  {<br>    p2 = s.find(ch, p);<br>    if( p2 == -1 ) p2 = s.size();<br>    if( p2-p &gt; 0 ) ret.push_back( s.substr(p, p2-p) );<br>  }<br>  return ret; <br>}<br><br>class Acronyms <br>{<br>  public:<br>  string acronize(vector &lt;string&gt; doc)<br>  {<br>    int i,j,k,m,cnt,last;<br>    string ret,p,s;<br>    vector &lt; string &gt; sent,wrds;<br><br>    for(i=0;i&lt;doc.size();i++)<br>    {<br>      if(i)<br>        p+=" ";<br>      p+=doc[i];<br>    }<br><br>    sent = tokenize(p , "  ");<br><br>    for(i=0;i&lt;sent.size();i++)<br>    {<br>      if( sent[i][0] == ' ' )<br>        sent[i].erase( sent[i].begin() , sent[i].begin() + 1 );<br><br>      s = sent[i];<br><br>      wrds = tokenize(sent[i] , " ");<br><br>      for(j=1;j&lt;wrds.size();j++)<br>      {<br>        if( !isupper(wrds[j][0]) )<br>          continue;<br><br>        p.resize(0);<br>        for(k=0;k&lt;wrds[j].size();k++)<br>          if( isupper( wrds[j][k] ))<br>            p += wrds[j][k];<br><br>        if( !isalpha(wrds[j][ wrds[j].size() -1 ]) )<br>          p+= wrds[j][ wrds[j].size() -1 ];<br><br>        last = -1;<br><br>        for(k=j+1 , cnt = 0;k&lt;wrds.size();k++)<br>        {<br>          if( !isupper(wrds[k][0]) )<br>          {<br>            cnt++;<br>            if( cnt &gt;= 2 )<br>              break;<br><br>            continue;<br>          }<br><br>          cnt = 0;<br><br>          for(m=0;m&lt;wrds[k].size();m++)<br>            if( isupper( wrds[k][m] ) )<br>              p+= wrds[k][m];<br><br>          if( !isalpha(wrds[k][ wrds[k].size() -1 ]) )<br>            p+= wrds[k][ wrds[k].size() -1 ];<br><br>          last = k;<br>        }<br><br>        if( last == -1 )<br>          continue;<br><br>        wrds.erase( wrds.begin() + j + 1 , wrds.begin() + last + 1 );<br><br>        for(k=1;k&lt;p.size()-1;k++)<br>          if( !isalpha( p[k] ) )<br>            p.erase( p.begin() + k , p.begin() + k + 1 ) , k --;<br>        wrds[j] = p;<br>      }<br>      if(i)<br>        ret+="  ";<br>      for(j=0;j&lt;wrds.size();j++)<br>      {<br>        if(j)<br>          ret+=" ";<br>        ret+=wrds[j];<br>      }<br>    }<br><br>        <br><br>    return ret;<br>  }<br>    <br><br>  <br><br>};<br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003]<br>// Powered by CodeProcessor<br></td>