<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections;<br> <br>  public class OneMoreRectangle<br>  {<br>    public OneMoreRectangle()<br>    {<br>    }<br>    <br>    public int maxCover(string[] rectangles, int qa, int qb)<br>    {<br>      return (new Main()).Execute(rectangles,qa,qb);<br>    }<br>  }<br> <br>  public class Main<br>  {<br>    public Main()<br>    {<br>      me = this;<br>    }<br>    <br>    public static Main me;<br> <br>    public void ProcessRect(Rectangle rect)<br>    {<br>      int ret = 0;<br>      foreach(Rectangle value in rects)<br>      {<br>        if (value.IsCoveredby(rect)) ret++;<br>      }<br>      if (ret&gt;max) max=ret;<br>    }<br> <br>    public void TestPoses()<br>    {<br>      foreach(int x in xposes1)<br>      {<br>        foreach(int y in yposes1)<br>        {<br>          Rectangle rect = new Rectangle(x,y,qa,qb);<br>          ProcessRect(rect);<br>          rect = new Rectangle(x,y,qb,qa);<br>          ProcessRect(rect);<br>        }<br>      }<br> <br>      foreach(int x in xposes1)<br>      {<br>        foreach(int y in yposes2)<br>        {<br>          Rectangle rect = new Rectangle(x,y-qb,qa,qb);<br>          ProcessRect(rect);<br>          rect = new Rectangle(x,y-qa,qb,qa);<br>          ProcessRect(rect);<br>        }<br>      }<br> <br>      foreach(int x in xposes2)<br>      {<br>        foreach(int y in yposes1)<br>        {<br>          Rectangle rect = new Rectangle(x-qa,y,qa,qb);<br>          ProcessRect(rect);<br>          rect = new Rectangle(x-qb,y,qb,qa);<br>          ProcessRect(rect);<br>        }<br>      }<br> <br>      foreach(int x in xposes2)<br>      {<br>        foreach(int y in yposes2)<br>        {<br>          Rectangle rect = new Rectangle(x-qa,y-qb,qa,qb);<br>          ProcessRect(rect);<br>          rect = new Rectangle(x-qb,y-qa,qb,qa);<br>          ProcessRect(rect);<br>        }<br>      }<br> <br>    }<br> <br>    public int max = -1;<br> <br>    public int qa = 0;<br>    public int qb = 0;<br>    <br>    public int Execute(string[] rectangles, int qa, int qb)<br>    {<br>      if (rectangles.Length==0) return 0;<br>      this.qa = qa;<br>      this.qb = qb;<br>      foreach(string value in rectangles)<br>      {<br>        rects.Add(new Rectangle(value));<br>      }<br>      Getxposes1();<br>      Getxposes2();<br>      Getyposes1();<br>      Getyposes2();<br>      TestPoses();<br>      return max;<br>    }<br> <br>    public void Getxposes1()<br>    {<br>      foreach(Rectangle rect in rects)<br>      {<br>        if (!ContainsInt(xposes1,rect.x1)) xposes1.Add(rect.x1);<br>      }<br>    }<br> <br>    public void Getxposes2()<br>    {<br>      foreach(Rectangle rect in rects)<br>      {<br>        if (!ContainsInt(xposes2,rect.x2)) xposes2.Add(rect.x2);<br>      }<br>    }<br> <br>    public bool ContainsInt(ArrayList ar,int value)<br>    {<br>      foreach(int i in ar)<br>      {<br>        if (i==value) return true;<br>      }<br>      return false;<br>    }<br> <br>    public void Getyposes1()<br>    {<br>      foreach(Rectangle rect in rects)<br>      {<br>        if (!ContainsInt(yposes1,rect.y1)) yposes1.Add(rect.y1);<br>      }<br>    }<br> <br>    public void Getyposes2()<br>    {<br>      foreach(Rectangle rect in rects)<br>      {<br>        if (!ContainsInt(yposes2,rect.y1)) yposes2.Add(rect.y2);<br>      }<br>    }<br> <br> <br>    public ArrayList xposes1 = new ArrayList();<br>    public ArrayList xposes2 = new ArrayList();<br>    public ArrayList yposes1 = new ArrayList();<br>    public ArrayList yposes2 = new ArrayList();<br> <br>    public ArrayList rects = new ArrayList();<br>  }<br> <br>  public class Rectangle<br>  {<br>    public Rectangle(int x,int y,int w,int h)<br>    {<br>      x1 = x;<br>      y1 = y;<br>      x2 = x+w;<br>      y2 = y+h;<br>        }<br> <br>    public bool IsCoveredby(Rectangle rect)<br>    {<br>      if (!IsBetween(rect.x1,rect.x2,this.x1)) return false;<br>      if (!IsBetween(rect.x1,rect.x2,this.x2)) return false;<br>      if (!IsBetween(rect.y1,rect.y2,this.y1)) return false;<br>      if (!IsBetween(rect.y1,rect.y2,this.y2)) return false;<br>      return true;<br>    }<br> <br>    public bool IsBetween(int i1,int i2,int i)<br>    {<br>      return ((i&gt;=i1) &amp;&amp; (i&lt;=i2));<br>    }<br> <br>    public Rectangle()<br>    {<br>    }<br> <br>    public Rectangle(string value)<br>    {<br>      string[] sts = value.Split(' ');<br>      x1=Convert.ToInt32(sts[0]);<br>      y1=Convert.ToInt32(sts[1]);<br>      x2=Convert.ToInt32(sts[2]);<br>      y2=Convert.ToInt32(sts[3]);<br>    }<br> <br>    public int x1=0;<br>    public int y1=0;<br>    public int x2=0;<br>    public int y2=0;<br>  }<br></td>