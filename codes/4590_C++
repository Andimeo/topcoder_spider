<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;vector&gt;<br>#include &lt;string&gt;<br>#include &lt;sstream&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;cmath&gt;<br>#include &lt;iostream&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;list&gt;<br>#include &lt;limits&gt;<br> <br>using namespace std;<br> <br>class OneMoreRectangle<br>{<br>public:<br>  struct Rect<br>  {<br>    int x1, y1, x2, y2;<br>  };<br> <br>  int maxc;<br>  vector&lt;Rect&gt; rcs;<br> <br>  int findCover(Rect rc)<br>  {<br>    int res = 0;<br>    for (int  i = 0; i != rcs.size(); ++i)<br>      if (<br>        rcs[i].x1 &gt;= rc.x1 &amp;&amp;<br>        rcs[i].x2 &lt;= rc.x2 &amp;&amp; <br>        rcs[i].y1 &gt;= rc.y1 &amp;&amp; <br>        rcs[i].y2 &lt;= rc.y2)<br>        ++res;<br> <br>    return res;<br>  }<br> <br>  int maxCover(vector &lt;string&gt; rectangles, int qa, int qb)<br>  {<br>    <br>    rcs.clear();<br>    for (int  i = 0; i!= rectangles.size(); ++i)<br>    {<br>      istringstream is(rectangles[i]);<br>      Rect rc;<br>      is &gt;&gt; rc.x1 &gt;&gt; rc.y1 &gt;&gt; rc.x2 &gt;&gt; rc.y2;<br>      rcs.push_back(rc);<br>    }<br> <br>    maxc = 0;<br> <br>    for (int  i = 0; i != rcs.size(); ++i)<br>    {<br>      for (int  j = 0; j != rcs.size(); ++j)<br>      {<br>        {<br>          Rect rc = {rcs[i].x1, rcs[j].y1, rcs[i].x1 + qa, rcs[j].y1 + qb};<br>          maxc = max (findCover(rc), maxc);<br>        }<br> <br>        {<br>          Rect rc = {rcs[i].x1, rcs[j].y1, rcs[i].x1 + qb, rcs[j].y1 + qa};<br>          maxc = max (findCover(rc), maxc);<br>        }<br>      }<br>    }<br> <br>    return maxc;<br>  }<br>protected:<br>private:<br>};<br></td>