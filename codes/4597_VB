<td class="problemText" colspan="8" valign="middle" align="left">
            Imports Microsoft.VisualBasic<br>Imports System<br>Imports System.Collections<br>Imports System.Math<br> <br>Public Class GameEnding<br>    Private iSize As Long<br>    Private aTransX() = {2, 2, 1, -1, -2, -2, -1, 1}<br>    Private aTransY() = {-1, 1, 2, 2, 1, -1, -2, -2}<br>    Private oHash As Hashtable<br>    Public Function result(ByVal n As Integer, ByVal moves As String()) As String<br>        Dim i, j, k, l As Long<br>        iSize = n<br>        j = 0<br>        oHash = New Hashtable<br>        oHash.Add(CLng(0), False)<br> <br>        For i = 0 To n ^ 2 - 1<br>            j += (CLng(1) &lt;&lt; i)<br>        Next<br> <br>        Dim iValid As Long = j<br>        Dim iRow, iCol As Long<br> <br>        For i = 0 To moves.GetUpperBound(0)<br>            iRow = Asc(moves(i).Substring(1, 1)) - Asc("1")<br>            iCol = Asc(moves(i).Substring(0, 1)) - Asc("a")<br>            If (iValid And (CLng(1) &lt;&lt; iLoc(iRow, iCol))) = 0 Then Return "Invalid input"<br>            j = iLoc(iRow, iCol)<br>            For k = 0 To n - 1<br>                iValid = iValid And Not (CLng(1) &lt;&lt; iLoc(iRow, k))<br>                iValid = iValid And Not (CLng(1) &lt;&lt; iLoc(k, iCol))<br>            Next<br>            For l = 0 To 7<br>                If iRow + aTransX(l) &lt; n And iRow + aTransX(l) &gt;= 0 And iCol + aTransY(l) &lt; n And iCol + aTransY(l) &gt;= 0 Then<br>                    iValid = iValid And Not (CLng(1) &lt;&lt; iLoc(iRow + aTransX(l), iCol + aTransY(l)))<br>                End If<br>            Next<br>        Next<br> <br> <br> <br>        If bWin(iValid, moves.GetUpperBound(0)) Then<br>            i = 0<br>        Else<br>            i = 1<br>        End If<br> <br>        If (i + moves.GetUpperBound(0) + 2) Mod 2 = 1 Then<br>            Return "First player wins"<br>        Else<br>            Return "Second player wins"<br>        End If<br> <br>    End Function<br> <br>    Private Function iLoc(ByVal iRow As Long, ByVal iCol As Long) As Long<br>        Return iRow * iSize + iCol<br>    End Function<br> <br>    Private Function bWin(ByVal iState As Long, ByVal iLevel As Integer) As Boolean<br>        If oHash.Contains(iState) Then Return oHash(iState)<br> <br>        Dim i, j, k, l, iRow, iCol As Long<br>        Dim iNewState As Long<br>        For j = 0 To iSize - 1<br>            For k = 0 To iSize - 1<br>                If (iState And (CLng(1) &lt;&lt; iLoc(j, k))) &gt; 0 Then<br>                    iNewState = iState<br>                    For l = 0 To iSize - 1<br>                        iNewState = iNewState And Not (CLng(1) &lt;&lt; iLoc(j, l))<br>                        iNewState = iNewState And Not (CLng(1) &lt;&lt; iLoc(l, k))<br>                    Next<br>                    For l = 0 To 7<br>                        If j + aTransX(l) &lt; iSize And j + aTransX(l) &gt;= 0 And k + aTransY(l) &lt; iSize And k + aTransY(l) &gt;= 0 Then<br>                            iNewState = iNewState And Not (CLng(1) &lt;&lt; iLoc(j + aTransX(l), k + aTransY(l)))<br>                        End If<br>                    Next<br>                    If Not bWin(iNewState, iLevel + 1) Then<br>                        oHash.Add(iState, True)<br>                        Return True<br>                    End If<br>                End If<br>            Next<br>        Next<br> <br>        oHash.Add(iState, False)<br>        Return False<br>    End Function<br> <br> <br>End Class<br></td>