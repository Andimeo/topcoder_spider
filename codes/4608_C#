<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br><br>public class GradingGridIns {<br>  struct Rational<br>  {<br>    public int p;<br>    public int q;<br><br>    public Rational(int p, int q)<br>    {<br>      this.p = p;<br>      this.q = q; <br>    }<br><br>    public int CompareTo(Rational b)<br>    {<br>      return (p * b.q).CompareTo(q * b.p);<br>    }<br>  }<br><br>  int parseInt(string s)<br>  {<br>    int v = 0;<br>    <br>    for (int i = 0; i &lt; s.Length; ++i)<br>      v = v * 10 + (s[i] - '0');<br><br>    return v;<br>  }<br><br>  bool check(string answer, out Rational value)<br>  {<br>    value = new Rational(0, 1);<br><br>    answer = answer.Trim();<br><br>    if (answer.Length == 0)<br>      return false;<br><br>    if (answer.IndexOf(".") &gt;= 0)<br>    {<br>      if (answer.Length == 1)<br>        return false;<br><br>      int at = answer.IndexOf(".");<br><br>      for (int i = 0; i &lt; answer.Length; ++i)<br>        if (i != at &amp;&amp; answer[i] &lt; '0' || answer[i] &gt; '9')<br>          return false;<br><br>      int p10 = 1;<br>      for (int i = at; i &lt; answer.Length - 1; ++i)<br>        p10 *= 10;<br><br>      value = new Rational(parseInt(answer.Substring(0, at) + answer.Substring(at + 1)), p10);<br>      return true;<br><br>    } <br>    else if (answer.IndexOf("/") &gt;= 0) <br>    {<br>      int at = answer.IndexOf("/");<br>  <br>      for (int i = 0; i &lt; answer.Length; ++i)<br>        if (i != at &amp;&amp; answer[i] &lt; '0' || answer[i] &gt; '9')<br>          return false;<br><br>      if (at &lt; 1 || at &gt; answer.Length - 2)<br>        return false;<br><br>      value = new Rational(parseInt(answer.Substring(0, at)), parseInt(answer.Substring(at + 1)));<br>      if (value.q == 0)<br>        return false;<br><br>      return true;<br>    } <br>    else<br>    {<br>      for (int i = 0; i &lt; answer.Length; ++i)<br>        if (answer[i] &lt; '0' || answer[i] &gt; '9')<br>          return false;<br><br>      value = new Rational(parseInt(answer), 1);<br><br>      return true;<br>    }<br>  }<br><br>  public string[] score(string[] answer, int[] lower, int[] upper) {<br>    Rational left = new Rational(lower[0], lower[1]);<br>    Rational right = new Rational(upper[0], upper[1]);<br><br>    Rational nleft = new Rational(0, 1);<br>    Rational nright = new Rational(10000, 1);<br><br>    for (int i = 0; i &lt; 1000; ++i)<br>    {<br>      Rational cur = new Rational(i, 10);<br><br>      if (cur.CompareTo(nleft) &gt; 0 &amp;&amp; cur.CompareTo(left) &lt; 0)<br>        nleft = cur;<br>      if (cur.CompareTo(nright) &lt; 0 &amp;&amp; cur.CompareTo(right) &gt; 0)<br>        nright = cur;<br><br>      cur = new Rational(i, 100);<br><br>      if (cur.CompareTo(nleft) &gt; 0 &amp;&amp; cur.CompareTo(left) &lt; 0)<br>        nleft = cur;<br>      if (cur.CompareTo(nright) &lt; 0 &amp;&amp; cur.CompareTo(right) &gt; 0)<br>        nright = cur;<br><br>      cur = new Rational(i, 1000);<br><br>      if (cur.CompareTo(nleft) &gt; 0 &amp;&amp; cur.CompareTo(left) &lt; 0)<br>        nleft = cur;<br>      if (cur.CompareTo(nright) &lt; 0 &amp;&amp; cur.CompareTo(right) &gt; 0)<br>        nright = cur;<br>    }<br>    <br>    for (int i = 0; i &lt; 10000; ++i)<br>    {<br>      Rational cur = new Rational(i, 1);<br><br>      if (cur.CompareTo(nleft) &gt; 0 &amp;&amp; cur.CompareTo(left) &lt; 0)<br>        nleft = cur;<br>      if (cur.CompareTo(nright) &lt; 0 &amp;&amp; cur.CompareTo(right) &gt; 0)<br>        nright = cur;<br>    }<br><br>    for (int i = 0; i &lt; 100; ++i)<br>      for (int j = 1; j &lt; 10; ++j)<br>      {<br>        Rational cur = new Rational(i, j);<br><br>        if (cur.CompareTo(nleft) &gt; 0 &amp;&amp; cur.CompareTo(left) &lt; 0)<br>          nleft = cur;<br>        if (cur.CompareTo(nright) &lt; 0 &amp;&amp; cur.CompareTo(right) &gt; 0)<br>          nright = cur;<br>      }<br><br>    for (int i = 0; i &lt; 10; ++i)<br>      for (int j = 1; j &lt; 100; ++j)<br>      {<br>        Rational cur = new Rational(i, j);<br><br>        if (cur.CompareTo(nleft) &gt; 0 &amp;&amp; cur.CompareTo(left) &lt; 0)<br>          nleft = cur;<br>        if (cur.CompareTo(nright) &lt; 0 &amp;&amp; cur.CompareTo(right) &gt; 0)<br>          nright = cur;<br>      }<br><br>    string[] res = new string[answer.Length];<br><br>    for (int i = 0; i &lt; answer.Length; ++i)<br>    {<br>      Rational v;<br><br>      if (check(answer[i], out v))<br>      {<br>        if (v.CompareTo(nleft) &gt;= 0 &amp;&amp; v.CompareTo(nright) &lt;= 0)<br>          res[i] = "CORRECT";<br>        else<br>          res[i] = "INCORRECT";<br>      }<br>      else<br>      {<br>        res[i] = "MALFORMED";<br>      }<br>    }<br><br>    return res;<br>  }<br>  <br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003] [modified for C# by Petr]<br>// Powered by CodeProcessor<br></td>