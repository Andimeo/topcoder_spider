<td class="problemText" colspan="8" valign="middle" align="left">
            // Powered by radeclipse!<br>import java.util.* ;<br>public class GradingGridIns {<br>  int num=0, den=0 ;<br>  boolean malformed(String s) {<br>    s = s.trim() ;<br>    if (s.indexOf(" ") &gt;= 0)<br>      return true  ;<br>    int slash = s.indexOf("/") ;<br>    int dot = s.indexOf(".") ;<br>    int len = s.length() ;<br>    if (slash &gt;= 0) {<br>      if (dot &gt;= 0 || s.indexOf("/", slash+1) &gt;= 0 ||<br>    slash == 0 || slash == len-1 || len == 1)<br>  return true ;<br>      String f[] = s.split("/", -1) ;<br>      num = Integer.parseInt(f[0]) ;<br>      den = Integer.parseInt(f[1]) ;<br>      if (den == 0)<br>  return true ;<br>      return false ;<br>    }<br>    if (dot &gt;= 0) {<br>      if (s.indexOf(".", dot+1) &gt;= 0 || len==1)<br>  return true ;<br>      String f[] = s.split("\\.", -1) ;<br>      int bef = 0 ;<br>      int aft = 0 ;<br>      int botdec = 1 ;<br>      if (f[0].length() &gt; 0)<br>  bef = Integer.parseInt(f[0]) ;<br>      if (f[1].length() &gt; 0) {<br>  aft = Integer.parseInt(f[1]) ;<br>  for (int k=0; k&lt;f[1].length(); k++)<br>    botdec *= 10 ;<br>      }<br>      num = bef * botdec + aft ;<br>      den = botdec ;<br>      return false ;<br>    }<br>    if (len == 0)<br>      return true ;<br>    num = Integer.parseInt(s) ;<br>    den = 1 ;<br>    return false ;<br>  }<br>  public String[] score(String[] answer, int[] lower, int[] upper) {<br>    char[] p = "./ 0123456789".toCharArray() ;<br>    char[] b = new char[4] ;<br>    for (int i=0; i&lt;answer.length; i++) {<br>      String s = answer[i] ;<br>      if (malformed(s)) {<br>  answer[i] = "MALFORMED" ;<br>      } else if (lower[0] * den &lt;= num * lower[1] &amp;&amp;<br>     upper[0] * den &gt;= num * upper[1]) {<br>  answer[i] = "CORRECT" ;<br>      } else {<br>  boolean ok = true ;<br>  int mden = den ;<br>  int mnum = num ;<br>  int m = 13 * 13 * 13 * 13 ;<br>  for (int ii=0; ii&lt;m; ii++) {<br>    b[0] = p[ii % 13] ;<br>    b[1] = p[ii / 13 % 13] ;<br>    b[2] = p[ii / 13 / 13 % 13] ;<br>    b[3] = p[ii / 13 / 13 / 13 % 13] ;<br>    String ss = new String(b) ;<br>    if (!malformed(ss)) {<br>      if (mden * num &lt; mnum * den) {<br>        if (num * upper[1] &gt; upper[0] * den) {<br>    System.out.println("Failing 2 on " + ss) ;<br>    ok = false ;<br>    break ;<br>        }<br>      } else if (mden * num &gt; mnum * den) {<br>        if (num * lower[1] &lt; lower[0] * den) {<br>    System.out.println("Failing on " + ss) ;<br>    ok = false ;<br>    break ;<br>        }<br>      }<br>    }<br>  }<br>  if (ok)<br>    answer[i] = "CORRECT" ;<br>  else<br>    answer[i] = "INCORRECT" ;<br>      }<br>    }<br>    return answer ;<br>  }<br>}<br></td>