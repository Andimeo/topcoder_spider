<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;iostream&gt;<br>#include &lt;sstream&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;set&gt;<br>#include &lt;map&gt;<br>#include &lt;deque&gt;<br>#include &lt;ctime&gt;<br>#include &lt;queue&gt; <br>using namespace std;<br> <br>#define si size()<br>typedef vector&lt;int&gt; vi;<br>typedef vector&lt;string&gt; vs;<br>typedef long long ii;<br> <br>int OFFSET=1000;<br>double sp[2][55];<br>double rp[2][55];<br> <br>double p[2][301][2001];<br>bool d[2][301][2001];<br>int SC;<br>int P[] = {2, -2};<br>class ClockManagement {<br>  public:<br>  double go(int team, int time, int diff) {<br>    if (d[team][time][diff]) return p[team][time][diff];<br>    if (time == 0) {<br>      if (team == 0) {<br>        if (diff &gt; OFFSET) return 1;<br>        return 0;<br>      }<br>      else {<br>        if (diff &lt;= OFFSET) return 1;<br>        return 0;<br>      }<br>    }<br>    if (time == 1) {<br>      return go(team, 0, diff);<br>    }<br>    <br>    double opt = 0;<br>    for (int i = 2; i &lt;= SC &amp;&amp; i &lt;= time; i++) {<br>      double winp = 0;<br>      winp += (1 - go(1-team, time-i, diff + P[team])) * sp[team][i];<br>      winp += (go(team, time-i, diff)) * (1-sp[team][i]) * rp[team][i];<br>      winp += (1 - go(1-team, time-i, diff)) * (1-sp[team][i]) * (1 - rp[team][i]);<br>      opt &gt;?= winp;<br>    }<br>    d[team][time][diff] = 1;<br>    p[team][time][diff] = opt;<br>    return opt;<br>  }<br>  double winProbability(vector &lt;int&gt; percentageA, vector &lt;int&gt; percentageB, vector &lt;int&gt; reboundA, vector &lt;int&gt; reboundB, int time, int scoreA, int scoreB) {<br>    SC = percentageA.si + 1;<br>    for (int i = 0; i &lt; percentageA.si; i++) sp[0][i+2] = 0.01 * percentageA[i];<br>    for (int i = 0; i &lt; percentageA.si; i++) sp[1][i+2] = 0.01 * percentageB[i];<br>    for (int i = 0; i &lt; percentageA.si; i++) rp[0][i+2] = 0.01 * reboundA[i];<br>    for (int i = 0; i &lt; percentageA.si; i++) rp[1][i+2] = 0.01 * reboundB[i];<br>    <br>    int diff = scoreA - scoreB;<br>    return go(0, time, diff+OFFSET);<br>  }<br>};<br> <br>// Powered by PopsEdit<br></td>