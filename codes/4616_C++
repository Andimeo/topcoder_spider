<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;vector&gt;<br>using namespace std;<br> <br>#define forIter(I,C) for(typeof((C).end()) I=(C).begin(); I!=(C).end(); ++I)<br>#define forN(I,C) for(int I=0; I&lt;int(C); ++I)<br>#define forEach(I,C) for(int I=0; I&lt;int((C).size()); ++I)<br>typedef vector&lt;int&gt; VI;<br> <br>struct TableSeating<br>{<br>    vector&lt;double&gt; pp;<br>    vector&lt;double&gt; cc;<br>    double go(int uu, int N)<br>    {<br>        if ( cc[uu] &gt;= 0 ) return cc[uu];<br>        double ret = 0;<br>        forEach ( i, pp ) {<br>            if ( !pp[i] ) continue;<br>            int n = i+1;<br>            int bb = (1&lt;&lt;n)-1;<br>            int cnt = 0;<br>            forN ( s, N-n+1 ) {<br>                if ( (bb &amp; uu) == 0 ) {<br>                    ++cnt;<br>                }<br>                bb &lt;&lt;= 1;<br>            }<br>            if ( !cnt ) {<br>                continue;<br>            }<br>            bb = (1&lt;&lt;n)-1;<br>            double r = 0;<br>            forN ( s, N-n+1 ) {<br>                if ( (bb &amp; uu) == 0 ) {<br>                    r += go(uu|bb, N);<br>                }<br>                bb &lt;&lt;= 1;<br>            }<br>            ret += pp[i]*(n+r/cnt);<br>        }<br>        return cc[uu] = ret;<br>    }<br>    double getExpected(int numTables, VI probs)<br>    {<br>        forIter ( i, probs )<br>            pp.push_back(*i*.01);<br>        cc.assign(1&lt;&lt;numTables, -1);<br>        return go(0, numTables);<br>    }<br>};<br></td>