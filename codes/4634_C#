<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections;<br><br>public class TestingCar {<br>  const double EPS = 1e-12;<br><br>  struct Restriction<br>  {<br>    public readonly int left;<br>    public readonly int right;<br>    public readonly int k;<br>    public readonly int b;<br><br>    public Restriction(int left, int right, int k, int b)<br>    {<br>      this.left = left;<br>      this.right = right;<br>      this.k = k;<br>      this.b = b;<br>    }<br>  }<br><br>  Restriction[] bound;<br>  double res;<br><br>  void check(double at)<br>  {<br>    double cur = double.MaxValue;<br><br>    foreach (Restriction r in bound)<br>    {<br>      if (r.left - EPS &lt; at &amp;&amp; at &lt; r.right + EPS)<br>      {<br>        double b = r.k * at + r.b;<br>        if (b &lt; cur)<br>          cur = b;<br>      }<br>    }<br><br>    if (cur &gt; res) <br>    {<br>      res = cur;<br>    }<br>  }<br><br>  public double maximalSpeed(string[] restrictions, int duration, int acceleration) {<br>    ArrayList restrs = new ArrayList();<br>    restrs.Add(new Restriction(0, duration, acceleration, 0));<br>    for (int i = 0; i &lt; restrictions.Length; ++i)<br>    {<br>      string[] s = restrictions[i].Split(' ');<br>      int speed = int.Parse(s[0]);<br>      int start = int.Parse(s[1]);<br>      int len = int.Parse(s[2]);<br>      if (start + len &gt; duration)<br>        len = duration - start;<br>      restrs.Add(new Restriction(start, start + len, 0, speed));<br>      restrs.Add(new Restriction(0, start, -acceleration, speed + start * acceleration));<br>      restrs.Add(new Restriction(start + len, duration, acceleration, speed - (start + len) * acceleration));<br>    }<br><br>    bound = new Restriction[restrs.Count];<br>    restrs.CopyTo(bound);<br><br>    res = 0;<br><br>    check(duration);<br><br>    foreach (Restriction r1 in bound)<br>    {<br>      check(r1.left);<br>      check(r1.right);<br><br>      foreach (Restriction r2 in bound)<br>      {<br>        if (r1.right &gt; r2.left &amp;&amp; r2.right &gt; r1.left)<br>        {<br>          int a = r1.k - r2.k;<br>          int b = r1.b - r2.b;<br>          if (a == 0)<br>            continue;<br>          double x = ((double) -b) / a;<br>          if (x &gt; r1.left - EPS &amp;&amp; x &lt; r1.right + EPS &amp;&amp; x &gt; r2.left - EPS &amp;&amp; x &lt; r2.right + EPS)<br>            check(x);<br>        }<br>      }<br>    }<br><br>    return res;<br>  }<br>  <br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003] [modified for C# by Petr]<br>// Powered by CodeProcessor<br></td>