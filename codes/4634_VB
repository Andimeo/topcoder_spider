<td class="problemText" colspan="8" valign="middle" align="left">
            Imports Microsoft.VisualBasic<br>Imports System<br>Imports System.Collections<br>Imports System.Math<br> <br>Public Class TestingCar<br>    Dim aRestrict(50, 2) As Integer<br>    Dim iLen As Integer<br>    Dim g As Integer<br>    Public Function maximalSpeed(ByVal restrictions As String(), ByVal duration As Integer, ByVal acceleration As Integer) As Double<br>        Dim i, j, k, l As Long<br>        g = acceleration<br> <br>        Dim aPoints As New ArrayList<br>        Dim s() As String<br>        iLen = restrictions.GetUpperBound(0) + 1<br> <br>        For i = 0 To restrictions.GetUpperBound(0)<br>            s = restrictions(i).Split(" ")<br>            aRestrict(i, 0) = CInt(s(0))<br>            aRestrict(i, 1) = CInt(s(1))<br>            aRestrict(i, 2) = CInt(s(1)) + CInt(s(2))<br>        Next<br> <br>        aRestrict(restrictions.GetUpperBound(0) + 1, 0) = 0<br>        aRestrict(restrictions.GetUpperBound(0) + 1, 1) = 0<br>        aRestrict(restrictions.GetUpperBound(0) + 1, 2) = 0<br> <br>        Dim a, b, c, d As Double<br>        Dim x As Double<br> <br>        For i = 0 To iLen<br>            For j = 0 To iLen<br>                ' Right i<br>                a = g<br>                b = aRestrict(i, 0) - aRestrict(i, 2) * g<br>                ' Flat j<br>                c = 0<br>                d = aRestrict(j, 0)<br>                If d &lt;&gt; b Then<br>                    x = (d - b) / (a - c)<br>                    aPoints.Add(x)<br>                End If<br>                ' Left j<br>                c = -g<br>                d = aRestrict(j, 0) + aRestrict(j, 1) * g<br>                If d &lt;&gt; b Then<br>                    x = (d - b) / (a - c)<br>                    aPoints.Add(x)<br>                End If<br>                ' Flat i<br>                a = 0<br>                b = aRestrict(i, 0)<br>                If d &lt;&gt; b Then<br>                    x = (d - b) / (a - c)<br>                    aPoints.Add(x)<br>                End If<br>            Next<br>        Next<br> <br>        aPoints.Add(duration)<br> <br>        Dim dBest As Double = 0<br> <br>        For i = 0 To aPoints.Count - 1<br>            If aPoints(i) &lt;= duration And aPoints(i) &gt;= 0 Then dBest = Max(dBest, dMax(aPoints(i)))<br>        Next<br> <br>        Return dBest<br> <br> <br>    End Function<br> <br>    Private Function dMax(ByVal x As Double) As Double<br>        Dim dBest As Double = 100000<br>        Dim i As Integer<br>        For i = 0 To iLen<br>            If x &lt; aRestrict(i, 1) Then<br>                dBest = Min(dBest, aRestrict(i, 0) + g * (aRestrict(i, 1) - x))<br>            End If<br>            If x &gt;= aRestrict(i, 1) And x &lt;= aRestrict(i, 2) Then<br>                dBest = Min(dBest, aRestrict(i, 0))<br>            End If<br>            If x &gt; aRestrict(i, 2) Then<br>                dBest = Min(dBest, aRestrict(i, 0) + g * (x - aRestrict(i, 2)))<br>            End If<br>        Next<br>        Return dBest<br>    End Function<br> <br>End Class<br></td>