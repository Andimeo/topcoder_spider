<td class="problemText" colspan="8" valign="middle" align="left">
            /// {{{<br>#include &lt;algorithm&gt;<br>#include &lt;cctype&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;iostream&gt;<br>#include &lt;sstream&gt;<br>#include &lt;stack&gt;<br>#include &lt;queue&gt;<br>#include &lt;string&gt;<br>#include &lt;utility&gt;<br>#include &lt;vector&gt;<br>using namespace std;<br>#define REP(i,n) for(int i=0;i&lt;(n);++i)<br>#define FOR(i,a,b) for(int i=(a);i&lt;=(b);++i)<br>#define FORD(i,a,b) for(int i=(a);i&gt;=(b);--i)<br>#define FOREACH(it,c) for(typeof((c).begin()) it=(c).begin();it!=(c).end();++it)<br>#define ALL(c) (c).begin(),(c).end()<br>#define debug(x) cerr &lt;&lt; #x &lt;&lt; " = " &lt;&lt; x &lt;&lt; "\n"<br>#define debugv(v) cerr &lt;&lt; #v &lt;&lt; " ="; FOREACH(it,v) cerr &lt;&lt; " " &lt;&lt; *it &lt;&lt; ","; \<br>  cerr &lt;&lt; "\n"<br>#define FORALL(f,w) ({ bool _ok=true; f { _ok = _ok &amp;&amp; (w); if(!_ok) break; } _ok; })<br>#define EXISTS(f,w) (!(FORALL(f,!(w))))<br>typedef long long LL; typedef vector&lt;int&gt; VI;<br>typedef vector&lt;string&gt; VS; typedef long double ld;<br>const int INF = 1000000000; const LL INFLL = LL(INF) * LL(INF);<br>template&lt;class T&gt; inline int size(const T&amp;c) { return c.size(); }<br>template&lt;class T&gt; string show(T x) { ostringstream o; o&lt;&lt;x; return o.str(); }<br>template&lt;class T&gt; T parse(string s) { istringstream i(s); T x; i&gt;&gt;x; return x; }<br>int s2i(string s) { return parse&lt;int&gt;(s); }<br>VS split(string s, string del=" ") {<br>  s += del[0];<br>  string w;<br>  VS res;<br>  FOREACH(it,s) {<br>    if(find(ALL(del),*it)==del.end()) {<br>      w += *it;<br>    } else {<br>      if(w!="") res.push_back(w);<br>      w="";<br>    }<br>  }<br>  return res;<br>}<br>VI s2vi(string s, string del=" ") {<br>  VS v = split(s,del);<br>  VI res;<br>  FOREACH(it,v) res.push_back(s2i(*it));<br>  return res;<br>}<br>/// }}}<br><br>struct DriveOrder {<br>  string determineOrder(vector &lt;string&gt; cars, int major) {<br>    if(major!=-1) {<br>      return cars[major] + cars[(major+2)%3] + cars[(major+1)%3];<br>    }<br>    string res;<br>    while(cars[0]!="" &amp;&amp; cars[1]!="" &amp;&amp; cars[2]!="") {<br>      int best=0;<br>      FOR(i,1,2) if(cars[i][0] &lt; cars[best][0]) best=i;<br>      res += cars[best][0];<br>      cars[best] = cars[best].substr(1,string::npos);<br>    }<br>    major=0;<br>    while(cars[major]!="") ++major;<br>    return res + cars[major] + cars[(major+2)%3] + cars[(major+1)%3];<br>  }<br>};<br><br><br><br>// Powered by FileEdit<br></td>