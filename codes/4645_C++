<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;string&gt;  <br>#include &lt;vector&gt;  <br>#include &lt;iostream&gt;  <br>#include &lt;sstream&gt;  <br>#include &lt;map&gt;  <br>#include &lt;algorithm&gt;  <br>#include &lt;cmath&gt;  <br>#include &lt;stdio.h&gt;  <br>#include &lt;set&gt;  <br>#include &lt;list&gt;  <br>#include &lt;queue&gt;  <br>#include &lt;numeric&gt; <br>using namespace std; <br>typedef pair&lt;int,int&gt; ip; <br><br>int grd[4][4];<br>int fin[4][4];<br><br>vector&lt;string&gt; tokenize(const string &amp;str, const string &amp;tokens) { <br>  vector&lt;string&gt; ret; <br>  int start = 0; <br>  int i=0; <br>  for (i = 0; i &lt; str.size(); ++i)  { <br>    if (find(tokens.begin(),tokens.end(),str[i]) != tokens.end())  { <br>      if (i &gt; start) <br>  ret.push_back(str.substr(start,i-start)); <br>      start = i+1; <br>    } <br>  } <br>  if (i &gt; start) <br>    ret.push_back(str.substr(start,i-start)); <br>  return ret; <br>}<br>int n;<br>bool compare(){<br>  for (int i=0;i&lt;n;i++){<br>    for (int j=0;j&lt;n;j++){<br>      //      cout &lt;&lt; grd[i][j]&lt;&lt;"/"&lt;&lt;fin[i][j]&lt;&lt;endl;<br>      if (grd[i][j]&gt;=0 &amp;&amp; (grd[i][j]!=fin[i][j])) return false;<br>    }<br>  }<br>  return true;<br>}<br>class TokenGrid <br>{<br>public:<br>  int getUnknown(vector &lt;string&gt; setup, vector &lt;string&gt; finish) {<br>    int cr,cw;<br>    n=setup.size();<br>    for (int i=0;i&lt;setup.size();i++){<br>      vector&lt;string&gt; v = tokenize(setup[i]," ");<br>      for (int j=0;j&lt;v.size();j++)<br>  if (v[j]=="_"){cr=i;cw=j; grd[i][j]=0; }<br>  else if (v[j]=="X") grd[i][j]=-1000000000;<br>  else sscanf(v[j].c_str(),"%d",&amp;grd[i][j]);<br>      v=tokenize(finish[i]," ");<br>      for (int j=0;j&lt;v.size();j++)<br>  if (v[j]=="X") fin[i][j]=-1000000000;<br>  else sscanf(v[j].c_str(),"%d",&amp;fin[i][j]);<br>    }<br>    for (int t=0;t&lt;100;t++){<br>      for (int i=0;i&lt;n;i++)<br>  for (int j=0;j&lt;n;j++){<br>    int k=(!!i)+(!!j)+(i+1&lt;n)+(j+1&lt;n);<br>    if (grd[i][j] &gt;= k){<br>      int p=grd[i][j]/k;<br>      grd[i][j]%=k;<br>      if (i) grd[i-1][j]+=p;<br>      if (i+1&lt;n) grd[i+1][j]+=p;<br>      if (j) grd[i][j-1]+=p;<br>      if (j+1&lt;n) grd[i][j+1]+=p;<br>    }<br>  }<br>    }<br>    <br>    for (int ff=0;ff&lt;1000000;ff++){<br>      bool any=true;<br>      while (any){<br>  any=false;<br>  for (int i=0;i&lt;n;i++)<br>    for (int j=0;j&lt;n;j++){<br>      int k=(!!i)+(!!j)+(i+1&lt;n)+(j+1&lt;n);<br>      if (grd[i][j] &gt;= k){<br>        int p=grd[i][j]/k;<br>        grd[i][j]%=k;<br>        if (i) grd[i-1][j]+=p;<br>        if (i+1&lt;n) grd[i+1][j]+=p;<br>        if (j) grd[i][j-1]+=p;<br>        if (j+1&lt;n) grd[i][j+1]+=p;<br>        any=1;<br>      }<br>    }<br>      }<br>      if (compare()) return ff;<br>      grd[cr][cw]++;<br>    }<br>    return -1;<br>  }<br>};<br><br>// Powered by FileEdit<br><br><br>// Powered by FileEdit<br></td>