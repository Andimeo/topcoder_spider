<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;algorithm&gt;<br>#include &lt;bitset&gt;<br>#include &lt;cassert&gt;<br>#include &lt;cctype&gt;<br>#include &lt;cmath&gt;<br>#include &lt;complex&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cstring&gt;<br>#include &lt;ctime&gt;<br>#include &lt;deque&gt;<br>#include &lt;functional&gt;<br>#include &lt;iostream&gt;<br>#include &lt;iterator&gt;<br>#include &lt;list&gt;<br>#include &lt;map&gt;<br>#include &lt;numeric&gt;<br>#include &lt;queue&gt;<br>#include &lt;set&gt;<br>#include &lt;sstream&gt;<br>#include &lt;stack&gt;<br>#include &lt;string&gt;<br>#include &lt;valarray&gt;<br>#include &lt;vector&gt;<br>#include &lt;utility&gt;<br><br>using namespace std;<br><br>#define all(v) (v).begin(), (v).end()<br><br>// Types<br>typedef long double ld;<br>typedef long long ll;<br>typedef pair &lt;int, int&gt; pii;<br>typedef vector &lt;int&gt; vi;<br>typedef vector &lt;pii&gt; vp;<br>typedef vector &lt;ld&gt; vd;<br>typedef vector &lt;string&gt; vs;<br>typedef vector &lt;bool&gt; vb;<br>typedef queue &lt;pii&gt; qp;<br>typedef map &lt;string, int&gt; msi;<br><br>// Constants<br>const int INF = 1000000000;<br>const ld EPS = 1e-10L;<br>const ld PI = 3.14159265358979L;<br><br>class SplitSubgraphs<br>{<br>// Global<br><br>// Functions<br>public:<br>  int howMany(vector &lt;string&gt; graph)<br>  {<br>    int res;<br>    int n = graph.size();<br>    vi g;<br>    for (int i = 0; i &lt; n; ++i)<br>    {<br>      int c = 0;<br>      for (int j = 0; j &lt; n; ++j)<br>      {<br>        if (graph[i][j] == '1')<br>          c += (1 &lt;&lt; j);<br>      }<br>      c += (1 &lt;&lt; i);<br>      g.push_back(c);<br>    }<br>    vb w(1 &lt;&lt; n);<br>    vi f;<br>    vi e;<br>    for (int i = 1; i &lt; (1 &lt;&lt; n); ++i)<br>    {<br>      bool good = true;<br>      for (int j = 0; j &lt; n; ++j)<br>      {<br>        if (((i &gt;&gt; j) &amp; 1) == 1 &amp;&amp; (i &amp; g[j]) != i)<br>        {<br>          good = false;<br>          break;<br>        }<br>      }<br>      if (good)<br>        f.push_back(i);<br>    }<br>    for (int i = 0; i &lt; n; ++i)<br>      g[i] -= (1 &lt;&lt; i);<br>    for (int i = 1; i &lt; (1 &lt;&lt; n); ++i)<br>    {<br>      bool good = true;<br>      for (int j = 0; j &lt; n; ++j)<br>      {<br>        if (((i &gt;&gt; j) &amp; 1) == 1 &amp;&amp; (i &amp; g[j]) != 0)<br>        {<br>          good = false;<br>          break;<br>        }<br>      }<br>      if (good)<br>        e.push_back(i);<br>    }<br>    for (int i = 0; i &lt; f.size(); ++i)<br>    {<br>      for (int j = 0; j &lt; e.size(); ++j)<br>      {<br>        if ((f[i] &amp; e[j]) == 0)<br>          w[f[i] + e[j]] = true;<br>      }<br>    }<br>    res = count(all(w), true);<br>    return res;<br>  }<br>  <br><br>};<br><br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003]<br>// Powered by CodeProcessor<br></td>