<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections;<br>using System.Collections.Specialized;<br>using System.Text;<br>using System.Text.RegularExpressions;<br> <br>public class TheTournament<br>{<br>  public struct Fix{<br>    public string n;<br>    public double w;<br>    public double l;<br>  }<br>  <br>  public class Cmp : IComparer  <br>{<br>  int IComparer.Compare( Object a, Object b )  <br>  {<br>    Fix x=(Fix)a;<br>    Fix y=(Fix)b;<br>    if(x.w/(x.w+x.l)&gt;y.w/(y.w+y.l)) return -1;<br>    if(x.w/(x.w+x.l)&lt;y.w/(y.w+y.l)) return 1;<br>    return String.CompareOrdinal(x.n, y.n);<br> <br>  }<br>}<br>  <br>  public string findLeader(string[] matches)<br>  {<br>    ArrayList res = new ArrayList(); char[] chs={' '};<br>    for(int i=0; i&lt;matches.GetLength(0); i++){<br>      string[] tmp = matches[i].Split(chs);<br>      bool found=false;<br>      for(int j=0; j&lt;res.Count ; j++){<br>        Fix t=(Fix)res[j];<br>        if(t.n==tmp[0]) {found=true;t.w++; res[j]=t;}<br>      }<br>      if(!found){<br>        Fix t;<br>        t.n=tmp[0];<br>        t.w=0;t.l=0;<br>        t.w++;<br>        res.Add(t);<br>      }<br>      found=false;<br>      for(int j=0; j&lt;res.Count ; j++){<br>        Fix t=(Fix)res[j];<br>        if(t.n==tmp[2]) {found=true;t.l++; res[j]=t;}<br>      }<br>      if(!found){<br>        Fix t;<br>        t.n=tmp[2];<br>        t.l=0; t.w=0;<br>        t.l++;<br>        <br>        res.Add(t);<br>      }<br>    }<br>    Fix[] r=new Fix[res.Count];<br>    for(int i=0; i&lt;res.Count; i++) r[i]=(Fix)res[i];<br>    for(int i=0; i&lt;res.Count; i++) Console.WriteLine(r[i].n+" "+r[i].w+" "+r[i].l);<br>    Array.Sort(r, new Cmp());<br>    return r[0].n;<br>  }<br>  <br> <br>}<br> <br>//Powered by [KawigiEdit]<br></td>