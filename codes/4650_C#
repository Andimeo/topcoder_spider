<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections;<br>using System.Text;<br>using System.Text.RegularExpressions;<br> <br>public class SecurityBunker<br>{<br> <br>    private int n = 0;<br>    private int[] x = new int[300], y = new int[300], t = new int[300];<br>    private int interest = 0;<br>    <br>    private double calc(int v0) {<br>        double[] d = new double[n];<br>        bool[] f = new bool[n];<br>        <br>        for (int i = 0; i &lt; n; i++) {<br>            d[i] = double.MaxValue;<br>            f[i] = false;<br>        }<br>        d[v0] = 0;<br>        <br>        double res = 0.0;<br>        int rest = interest;<br>        <br>        while (rest &gt; 0) {<br>            int b = -1;<br>            <br>            for (int i = 0; i &lt; n; i++) {<br>                if (!f[i]) {<br>                    if (b &lt; 0) {<br>                        b = i;<br>                    } else<br>                    if (d[b] &gt; d[i]) {<br>                        b = i;<br>                    }<br>                }<br>            }<br>            if (b &lt; 0) break;<br>            f[b] = true;<br>            res = Math.Max(res, d[b]);<br>            <br>            if (t[b] == 1) {<br>                for (int i = 0; i &lt; n; i++) {<br>                    if (!f[i]) {<br>                        double q = Math.Sqrt(Math.Abs((x[i] - x[b]) * (x[i] - x[b]) + (y[i] - y[b]) * (y[i] - y[b])));<br>                        d[i] = Math.Min(d[i], q);<br>                    }<br>                }<br>            } else {<br>                rest--;<br>            }<br>        }<br>        return res;<br>    }<br>    <br>    public double chooseBomb(string[] field)<br>    {<br>        for (int i = 0; i &lt; field.Length; i++)<br>            for (int j = 0; j &lt; field[i].Length; j++) {<br>                if (field[i][j] == '*') {<br>                    x[n] = i;<br>                    y[n] = j;<br>                    t[n] = 1;<br>                    n++;<br>                } else<br>                if (field[i][j] == '?') {<br>                    x[n] = i;<br>                    y[n] = j;<br>                    t[n] = 2;<br>                    n++;<br>                    interest++;<br>                }<br>            }<br>            <br>        double ans = 0.0;<br>        for (int i = 0; i &lt; n; i++) {<br>            if (t[i] == 1) {<br>                ans = Math.Max(ans, calc(i));<br>            }<br>        }<br>        return ans;<br>    }<br> <br>}<br></td>