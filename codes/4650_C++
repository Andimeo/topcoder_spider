<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;queue&gt;<br>#include &lt;set&gt;<br>#include &lt;map&gt;<br>#include &lt;sstream&gt;<br>#include &lt;iostream&gt;<br>#include &lt;utility&gt;<br>#include &lt;stdio.h&gt;<br>#include &lt;stdlib.h&gt;<br>#include &lt;string.h&gt;<br>#include &lt;math.h&gt;<br>#include &lt;setjmp.h&gt;<br>#include &lt;ctype.h&gt;<br> <br>#define ll long long<br>#define ld long double<br>#define EPS 1e-9<br>using namespace std;<br> <br>#define SZ size()<br>#define MP make_pair<br>#define PB push_back<br>#define FR(i,a,b) for (int i=(a);i&lt;(signed)(b);i++)<br>#define FOR(i,n) FR(i,0,n)<br>#define FORI(i,s) FOR(i,s.SZ)<br>#define S string<br>#define V vector<br>#define VS V&lt;S&gt;<br>#define VI V&lt;int&gt;<br> <br>struct SecurityBunker {<br>V&lt;pair&lt;ld,ld&gt; &gt; b, so; <br>int uf[4096];<br>int find(int x) { return uf[x] == -1 ? x : (uf[x] = find(uf[x])); }<br>void unite(int x, int y) { x=find(x); y=find(y); if (x-y) uf[x] = y; }<br>int can(ld cur) {<br> memset(uf,-1,sizeof(uf));<br> FORI(i,b) FORI(j,b) if (hypot(b[i].first-b[j].first, b[i].second-b[j].second) &lt; cur) unite(i,j);<br> FORI(k,b) if (uf[k] == -1)<br>  FORI(i,so) {<br>   FORI(j,b) if (find(j) == k &amp;&amp; hypot(b[j].first-so[i].first, b[j].second-so[i].second) &lt; cur) goto happyface;<br>   return 0;<br>   happyface:;<br>  }<br> return 1;<br>}<br>double chooseBomb(VS vs) {<br> FORI(i,vs) FORI(j,vs[i]) {<br>  if (vs[i][j] == '*') b.PB(MP(i,j));<br>  else if (vs[i][j] == '?') so.PB(MP(i,j));<br> }<br> ld lb=0, ub=222;<br> while (ub-lb &gt; 1e-12) {<br>  ld cur = (ub+lb)/2;<br>  if (can(cur)) ub = cur;<br>  else lb = cur; <br> }<br> return (lb+ub)/2;<br>}};<br></td>