<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br> <br>public class GomokuBoardChecker<br>  {<br>    public bool allfull = true;<br> <br>    public int WhoWonNow()<br>    {<br>      int whowon = 0;<br>      for(int y=0;y&lt;=this.ny-1;y++)<br>      {<br>        for(int x=0;x&lt;=this.nx-1;x++)<br>        {<br>          int dx = 0;<br>          int dy = 0;<br>          int tmp = 0;<br>          dx = 1;dy = 0;tmp = IsWonBy(x,y,dx,dy);<br>          if (tmp!=0)<br>          {<br>            if (whowon!=0) if (tmp!=whowon) return -1;<br>            whowon = tmp;<br>          }<br>          dx = 0;dy = 1;tmp = IsWonBy(x,y,dx,dy);<br>          if (tmp!=0)<br>          {<br>            if (whowon!=0) if (tmp!=whowon) return -1;<br>            whowon = tmp;<br>          }<br>          dx = 1;dy = 1;tmp = IsWonBy(x,y,dx,dy);<br>          if (tmp!=0)<br>          {<br>            if (whowon!=0) if (tmp!=whowon) return -1;<br>            whowon = tmp;<br>          }<br>          dx = -1;dy = 1;tmp = IsWonBy(x,y,dx,dy);<br>          if (tmp!=0)<br>          {<br>            if (whowon!=0) if (tmp!=whowon) return -1;<br>            whowon = tmp;<br>          }<br>        }<br>      }<br>      return whowon;<br>    }<br> <br>    public bool TestValidity()<br>    {<br>      for(int y=0;y&lt;=this.ny-1;y++)<br>      {<br>        for(int x=0;x&lt;=this.nx-1;x++)<br>        {<br>          char ch = this.board[y][x];<br>          this.board[y] = this.board[y].Remove(x,1);<br>          this.board[y] = this.board[y].Insert(x,".");<br>          int tmp = this.WhoWonNow();<br>          if (tmp==0) return true;<br>          this.board[y] = this.board[y].Remove(x,1);<br>          this.board[y] = this.board[y].Insert(x,""+ch);<br>        }<br>      }<br>      return false;<br>    }<br> <br>    public string check(string[] board)<br>    {<br>      this.board = board;<br>      this.Analize();<br>      if (Math.Abs(this.Of1s-this.Of2s)&gt;1) return "INVALID";<br>      int whowon = this.WhoWonNow();<br>      if (whowon==0) <br>      {<br>        if (this.allfull) return "DRAW";<br>        return "IN PROGRESS";<br>      }<br>      else<br>      {<br>                if (!this.TestValidity()) return "INVALID";<br>        if (whowon==1)<br>        {<br>          if (Of1s&lt;Of2s) return "INVALID";<br>          return "X WON";<br>        }<br>        else<br>        {<br>          if (Of2s&lt;Of1s) return "INVALID";<br>          return "O WON";<br>        }<br>      }<br>        <br>    }<br> <br>    public int IsWonBy(int x,int y,int dx,int dy)<br>    {<br>      int wh = 0;<br>      for(int i=0;i&lt;=4;i++)<br>      {<br>        int tx = x+(i*dx);<br>        int ty = y+(i*dy);<br>        if (tx&lt;0) return 0;<br>        if (ty&lt;0) return 0;<br>        if (tx&gt;this.nx-1) return 0;<br>        if (ty&gt;this.ny-1) return 0;<br>        int tmp = this.GetAt(tx,ty);<br>        if (tmp==0) return 0;<br>        if (wh!=0)<br>        {<br>          if (tmp!=wh) return 0;<br>        }<br>        wh = tmp;<br>      }<br>      return wh;<br>    }<br> <br>    public int Of1s = 0;<br>    public int Of2s = 0;<br> <br>    public void Analize()<br>    {<br>      for(int y=0;y&lt;=this.ny-1;y++)<br>      {<br>        for(int x=0;x&lt;=this.nx-1;x++)<br>        {<br>          int tmp = this.GetAt(x,y);<br>          if (tmp==0) this.allfull = false;<br>          if (tmp==1) this.Of1s++;<br>          if (tmp==2) this.Of2s++;<br>        }<br>      }<br>    }<br> <br>    public int nx<br>    {<br>      get<br>      {<br>        return board[0].Length;<br>      }<br>    }<br> <br>    public int ny<br>    {<br>      get<br>      {<br>        return board.Length;<br>      }<br>    }<br> <br>    <br>    public int GetAt(int x,int y)<br>    {<br>      char ch = board[y][x];<br>      if (ch=='.') return 0;<br>      if (ch=='X') return 1;<br>      if (ch=='O') return 2;<br>      return -1;<br>    }<br>    public string[] board;<br>  }<br></td>