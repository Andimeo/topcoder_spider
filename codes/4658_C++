<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;algorithm&gt;<br>#include &lt;cctype&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cstring&gt;<br>#include &lt;functional&gt;<br>#include &lt;iostream&gt;<br>#include &lt;iomanip&gt;<br>#include &lt;limits&gt;<br>#include &lt;list&gt;<br>#include &lt;map&gt;<br>#include &lt;numeric&gt;<br>#include &lt;queue&gt;<br>#include &lt;set&gt;<br>#include &lt;sstream&gt;<br>#include &lt;stack&gt;<br>#include &lt;string&gt;<br>#include &lt;utility&gt;<br>#include &lt;vector&gt;<br><br>using namespace std;<br><br>#define VAR(i,e) __typeof(e) i = (e)<br>#define FOREACH(i, C) for (VAR(i, (C).begin()); i != (C).end(); ++i)<br><br>#define PB push_back<br>#define X first<br>#define Y second<br><br>#define OSS ostringstream<br><br>#define VS vector&lt;string&gt;<br><br>template&lt;typename T&gt;<br>istream &amp; operator&gt;&gt;(istream &amp; is, vector&lt;T&gt; &amp; v){<br>    while(true){<br>        T t;<br>        is &gt;&gt; t;<br>        if(! is)break;<br>        v.push_back(t);<br>    }<br>    return is;<br>}<br><br>template&lt;typename T1, typename T2&gt;<br>T1 CAST(T2 t2){<br>        ostringstream oss;<br>        oss &lt;&lt; t2;<br>        istringstream iss(oss.str());<br>        T1 t1;<br>        iss &gt;&gt; t1;<br>        return t1;<br>}<br><br>vector&lt;string&gt; tokenize(string s, string delim = " "){<br>    vector&lt;string&gt; vs;<br>    if(s.size() == 0)return vs;<br>    int beg = 0;<br>    while(true){<br>        int end = s.find(delim, beg);<br>        vs.push_back(s.substr(beg, end - beg));<br>        if(end == string::npos)return vs;<br>        beg = end + 1;<br>    }<br>}<br><br>struct CountriesRanklist{<br>vector &lt;string&gt; findPlaces(vector &lt;string&gt; knownPoints);<br><br>};<br><br>vector &lt;string&gt; CountriesRanklist :: findPlaces ( vector &lt;string&gt; knownPoints ){<br>  map&lt;string, int&gt; sm, cnt;<br>  int lw = -1;<br>  FOREACH(it, knownPoints){<br>    VS vs = tokenize(*it);<br>    sm[vs[0]] += CAST&lt;int&gt;(vs[2]);<br>    cnt[vs[0]]++;<br>    if(lw == -1 || lw &gt; CAST&lt;int&gt;(vs[2]))lw = CAST&lt;int&gt;(vs[2]);<br>  }<br>  --lw;<br>  map&lt;string, int&gt; mn, mx;<br>  FOREACH(it, sm){<br>    mn[it -&gt; X] = it -&gt; Y;<br>    mx[it -&gt; X] = it -&gt; Y + (4 - cnt[it -&gt; X]) * lw;<br>  }<br>  VS res;<br>  FOREACH(it, sm){<br>    int gr = 0, ls = 0;<br>    FOREACH(jt, sm){<br>      if(it -&gt; X != jt -&gt; X){<br>        if(mn[jt -&gt; X] &gt; mx[it -&gt; X])++gr;<br>        if(mx[jt -&gt; X] &gt; mn[it -&gt; X])++ls;<br>      }<br>    }<br>    OSS oss;<br>    oss &lt;&lt; it -&gt; X &lt;&lt; " " &lt;&lt; gr + 1 &lt;&lt; ' ' &lt;&lt; ls + 1;<br>    res.PB(oss.str());<br>  }<br>  return res;<br>} <br>// Powered by Krzysan's Cleaner 1.4-4<br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003]<br>// Powered by CodeProcessor<br></td>