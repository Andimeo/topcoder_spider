<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections;<br> <br>public class StackingBoxes<br>{<br>    private struct Box: IComparable {<br>        public int W;<br>        <br>        public int C;<br>        <br>        public int CW {<br>            get {<br>                return W + C;<br>            }<br>        }<br>        <br>        int IComparable.CompareTo(object other)<br>        {<br>            return CW - ((Box)other).CW;<br>        }<br>    }<br>    <br>    ArrayList ParseStringList(string[] list)<br>    {<br>        ArrayList res = new ArrayList();<br>        foreach (string si in list) {<br>          string[] ns = si.Split(' ');<br>          foreach (string sj in ns) {<br>              res.Add(Int32.Parse(sj));<br>          }<br>      }<br>      return res;<br>    }<br>    <br>  public int highestStack(string[] weight, string[] canCarry)<br>  {<br>         int i, j;  <br>         int[] minw;<br>      ArrayList wl = ParseStringList(weight);<br>         ArrayList cl = ParseStringList(canCarry);<br>         Box[] boxes = new Box[wl.Count];<br> <br>         for (i = 0; i &lt; boxes.Length; ++i) {<br>             boxes[i].W = (int)wl[i];<br>             boxes[i].C = (int)cl[i];<br>         }<br>         Array.Sort(boxes);<br>         <br>         for (i = 0; i &lt; boxes.Length; ++i) {<br>             //Console.WriteLine("{0} {1} {2}", boxes[i].W, boxes[i].C, boxes[i].CW);<br>         }<br>         <br>         minw = new int[wl.Count + 1];<br>         for (i = 0; i &lt; minw.Length; ++i) {<br>             minw[i] = Int32.MaxValue;<br>         }<br>         minw[0] = 0;<br>         for (i = 0; i &lt; boxes.Length; ++i) {<br>             for (j = minw.Length - 1; j &gt;= 0; --j) {<br>                 if (minw[j] != Int32.MaxValue) {<br>                     if (boxes[i].C &gt;= minw[j] &amp;&amp; minw[j + 1] &gt; minw[j] + boxes[i].W) {<br>                         minw[j + 1] = minw[j] + boxes[i].W;<br>                         //Console.WriteLine("Can make {0} with {1}", j + 1, minw[j + 1]);<br>                     }<br>                 }<br>             }<br>         }<br>         for (i = minw.Length - 1; i &gt;= 0; --i) {<br>             if (minw[i] != Int32.MaxValue) {<br>                 return i;<br>             }<br>         }<br>         <br>         return 0;<br>  }<br>  <br> <br>}<br> <br>//Powered by [KawigiEdit]<br></td>