<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;vector&gt;<br>#include &lt;string&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cstdio&gt;<br> <br>using namespace std;<br> <br>struct box<br>{<br>  int w, c;<br>  bool operator &lt; (const box&amp; rhs) const<br>  {<br>    return c &lt; rhs.c;<br>  }<br>};<br> <br>box b[2500];<br>long long table[2][2600];<br>int cur, nex;<br>const long long inf = 1000000000000LL;<br> <br>class StackingBoxes<br>{<br>public:<br>int highestStack(vector&lt;string&gt; weight, vector&lt;string&gt; canCarry)<br>{<br>  int n = 0;<br>  int ln = weight.size();<br>  int i, j, x;<br>  for (i = 0; i &lt; ln; i++)<br>  {<br>    const char *s = weight[i].c_str();<br>    while (*s != 0)<br>    {<br>      while (*s == 32) s++;<br>      if (*s == 0) break;<br>      x = atoi(s);<br>      b[n++].w = x;<br>      while (*s != 32 &amp;&amp; *s != 0) s++;    <br>    }<br>  }<br>  ln = canCarry.size(); n = 0;<br>  for (i = 0; i &lt; ln; i++)<br>  {<br>    const char *s = canCarry[i].c_str();<br>    while (*s != 0)<br>    {<br>      while (*s == 32) s++;<br>      if (*s == 0) break;<br>      x = atoi(s);<br>      b[n++].c = x + b[n].w;<br>      while (*s != 32 &amp;&amp; *s != 0) s++;    <br>    }<br>  }<br>  sort(b, b + n);<br>  for (i = 0; i &lt; n; i++)<br>    printf("b : {w : %d, c : %d}\n", b[i].w, b[i].c);<br> <br>  table[0][0] = 0; table[0][1] = b[0].w; table[0][2] = inf; cur = 0; nex = 1;<br>  for (i = 1; i &lt; n; i++)<br>  {<br>    fill(table[nex], table[nex] + n + 1, inf);<br>    table[nex][0] = 0;<br>    for (j = 1; j &lt;= i + 1; j++)<br>    {<br>      table[nex][j] = table[cur][j] &lt;? table[cur][j - 1] + b[i].w;<br>      if (table[nex][j] &gt; b[i].c)<br>        table[nex][j] = inf;<br>    }<br>    swap(cur, nex);<br>  }<br>  for (i = n; i &gt;= 0; i--)<br>    if (table[cur][i] != inf)<br>      return i;<br>  return 0;<br>}<br>};<br></td>