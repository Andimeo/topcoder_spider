<td class="problemText" colspan="8" valign="middle" align="left">
            // You will never see how this line looked after 4 challenges failed!<br>#include &lt;algorithm&gt;<br>#include &lt;vector&gt;<br>using namespace std;<br><br>typedef long double ld;<br><br>#define LS &lt;<br><br>// All macros with parameters "k,a,b" run the "k" variable in range [a,b)<br>#define FOR(k,a,b) for(typeof(a) k=(a); k LS (b); ++k)<br><br>#line 3 "Pitches.cc"<br><br>ld prob[8][8];<br><br>vector&lt;double&gt; s;<br><br>ld test(ld bb, ld ss, ld p0, ld p1) {<br>  // pitcher p1<br>  ld resultb, results;<br>  <br>  resultb = 0;<br>  results = 0;<br>  <br>  for(int c0=0; c0&lt;2; c0++)<br>  for(int c1=0; c1&lt;2; c1++) {<br>    ld chance = 1;<br>    if(c0 == 1) chance *= p0; else chance *= (1-p0);<br>    if(c1 == 1) chance *= p1; else chance *= (1-p1);<br>    resultb += chance * s[2*c0+4*c1];<br>    results += chance * s[2*c0+4*c1+1];<br>    }<br>  <br>  return resultb * bb + results * ss;<br>  }<br><br>#define eps 1e-12<br><br>class Pitches {<br>  public:<br>  double strikeOut(vector &lt;double&gt; stats, int balls, int strikes) {<br>    // !FDI<br>    s = stats;<br>    <br>    FOR(b,0,8) prob[4][b] = 0;<br>    FOR(b,0,8) prob[b][3] = 1;<br>    for(int bb=3; bb &gt;= 0; bb--)<br>    for(int ss=2; ss &gt;= 0; ss--) {<br>      <br>      ld bbb = prob[bb+1][ss];<br>      ld sss = prob[bb][ss+1];<br><br>      if(test(bbb,sss,0,0) &gt;= test(bbb,sss,0,1)-eps &amp;&amp;<br>         test(bbb,sss,1,0) &gt;= test(bbb,sss,1,1)-eps) {<br>        prob[bb][ss] = test(bbb,sss,0,0) &lt;? test(bbb,sss,1,0);<br>        }<br>      else if(test(bbb,sss,0,0) &lt;= test(bbb,sss,0,1)+eps &amp;&amp;<br>         test(bbb,sss,1,0) &lt;= test(bbb,sss,1,1)+eps) {<br>        prob[bb][ss] = test(bbb,sss,0,1) &lt;? test(bbb,sss,1,1);<br>        }<br>      else if(test(bbb,sss,0,0) &gt;= test(bbb,sss,1,0)-eps &amp;&amp;<br>         test(bbb,sss,0,1) &gt;= test(bbb,sss,1,1)-eps) {<br>        prob[bb][ss] = test(bbb,sss,1,1) &gt;? test(bbb,sss,1,0);<br>        }<br>      else if(test(bbb,sss,0,0) &lt;= test(bbb,sss,1,0)+eps &amp;&amp;<br>         test(bbb,sss,0,1) &lt;= test(bbb,sss,1,1)+eps) {<br>        prob[bb][ss] = test(bbb,sss,0,1) &gt;? test(bbb,sss,0,0);<br>        }<br>      else {<br><br>/*    printf("Here (%d,%d)\n", bb,ss);<br>      printf("%Lf %Lf %Lf %Lf\n",<br>        test(bbb,sss,0,0),<br>        test(bbb,sss,0,1),<br>        test(bbb,sss,1,0),<br>        test(bbb,sss,1,1)<br>        );<br>*/      <br><br>        int sign;<br>        if(test(bbb,sss,0,0) &gt; test(bbb,sss,0,1)) sign = 0;<br>        else sign = 1;<br>        ld min = 0, max = 1;<br>        while(max-min &gt; eps) {<br>          ld med = (min+max)/2;<br>          if(test(bbb,sss,med,sign) &gt; test(bbb,sss,med,1-sign))<br>            min = med;<br>          else<br>            max = med;<br>          }<br>        prob[bb][ss] = test(bbb,sss,min,sign);<br>        }<br>      }<br>    return prob[balls][strikes];<br>    }<br>  };<br><br><br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003]<br>// Powered by CodeProcessor<br></td>