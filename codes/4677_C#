<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections;<br><br>public class MaxTrip {<br>  int[][] edge;<br>  int n;<br>  bool[] mark;<br>  int[] deg;<br>  bool[] alive;<br>  int numOdds;<br><br>  void dfs(int a)<br>  {<br>    if (mark[a])<br>      return;<br><br>    mark[a] = true;<br>    if ((deg[a] &amp; 1) == 1)<br>      ++numOdds;<br><br>    for (int i = 0; i &lt; edge[a].Length; ++i)<br>      dfs(edge[a][i]);<br>  }<br><br>  ArrayList findOdds()<br>  {<br>    mark = new bool[n];<br>    ArrayList l = new ArrayList();<br>    for (int i = 0; i &lt; n; ++i)<br>      if (alive[i] &amp;&amp; !mark[i])<br>      {<br>        numOdds = 0;<br>        dfs(i);<br>        l.Add(numOdds);<br>      }<br><br>    return l;<br>  }<br><br>  public int minBuy(string portA, string portB) {<br>    n = 26;<br>    int m = portA.Length;<br><br>    edge = new int[n][];<br>    deg = new int[n];<br>    alive = new bool[n];<br>    ArrayList l = new ArrayList();<br><br>    for (int i = 0; i &lt; n; ++i)<br>    {<br>      char cur = (char) ('A' + i);<br>      l.Clear();<br><br>      for (int j = 0; j &lt; m; ++j)<br>      {<br>        char c1 = portA[j];<br>        char c2 = portB[j];<br><br>        if (c1 == cur &amp;&amp; c2 == cur)<br>        {<br>          alive[i] = true;<br>          continue;<br>        }<br><br>        if (c1 == cur) <br>        {<br>          l.Add(c2 - 'A');<br>          ++deg[i];<br>          alive[i] = true;<br>        } else if (c2 == cur) <br>        {<br>          l.Add(c1 - 'A');<br>          ++deg[i];<br>          alive[i] = true;<br>        }<br>      }<br><br>      edge[i] = new int[l.Count];<br>      l.CopyTo(edge[i]);<br>    }<br><br>    ArrayList odds = findOdds();<br><br>    int res = 0;<br><br>    while (odds.Count &gt; 1)<br>    {<br>      odds.Sort();<br><br>      int m1 = (int) odds[odds.Count - 2];<br>      int m2 = (int) odds[odds.Count - 1];<br>      ++res;<br><br>      if (m2 == 0)<br>      {<br>        odds.RemoveAt(odds.Count - 1);<br>        odds[odds.Count - 1] = 2; <br>      } else if (m1 == 0)<br>      {<br>        odds.RemoveAt(odds.Count - 1);<br>        odds[odds.Count - 1] = m2;<br>      } else<br>      {<br>        odds.RemoveAt(odds.Count - 1);<br>        odds[odds.Count - 1] = m1 + m2 - 2;<br>      }<br>    }<br><br>    while (true)<br>    {<br>      int mm = (int) odds[0];<br><br>      if (mm &lt;= 2)<br>        break;<br><br>      odds[0] = mm - 2;<br>      ++res;<br>    }<br><br>    return res;<br>  }<br><br>  <br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003] [modified for C# by Petr]<br>// Powered by CodeProcessor<br></td>