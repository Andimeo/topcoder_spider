<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;algorithm&gt;<br>#include &lt;iostream&gt;<br>#include &lt;string&gt;<br>#include &lt;vector&gt;<br><br>using namespace std;<br><br><br>int g[26][26];<br>int degree[26];<br>int bio[26];<br><br>class MaxTrip { <br>   public: <br><br>   int dfs( int i ) {<br>      if( bio[i] ) return 0;<br>      bio[i] = 1;<br>      int ret = 0;<br>      if( degree[i] % 2 ) ret++;<br>      for( int j = 0; j &lt; 26; ++j ) <br>         if( g[i][j] ) <br>            ret += dfs( j );<br>      return ret;<br>   }<br><br>   int minBuy(string portA, string portB) { <br>      int n = portA.size();<br>      memset( g, 0, sizeof g );<br>      memset( degree, 0, sizeof degree );<br>      memset( bio, 0, sizeof bio );<br>      for( int i = 0; i &lt; n; ++i ) {<br>         g[portA[i]-'A'][portB[i]-'A'] = 1;<br>         g[portB[i]-'A'][portA[i]-'A'] = 1;<br>         degree[portA[i]-'A']++;<br>         degree[portB[i]-'A']++;         <br>      }<br>      <br>      int ret = -1;<br>      for( int i = 0; i &lt; 26; ++i ) {<br>         if( degree[i] == 0 ) continue;<br>         if( bio[i] ) continue;<br>         ret += 1 + max( 0, dfs( i )/2 - 1 );<br>      }<br>      return ret;<br>   } <br><br><br><br><br><br>   <br><br>}; <br><br><br><br>// Powered by FileEdit<br>// Powered by moj 3.0 beta 7 [modified TZTester]<br>// Powered by CodeProcessor<br></td>