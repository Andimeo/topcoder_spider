<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>import java.util.regex.*;<br>import java.text.*;<br>import java.math.*;<br>import static java.lang.Math.*;<br>import static java.util.Arrays.*;<br>public class MaxTrip {<br>  public int minBuy(String portA, String portB) {<br>    boolean[][] g = new boolean[26][26];<br>    int[] cnt = new int[26];<br>    for(int i = 0; i &lt; portA.length(); i++){<br>      int t = portA.charAt(i)-'A';<br>      int f = portB.charAt(i)-'A';<br>      g[t][f] = true;<br>      g[f][t] = true;<br>      cnt[t]++;<br>      cnt[f]++;<br>    }<br>    boolean[][] h = new boolean[g.length][g.length];<br>    for(int i = 0; i &lt; h.length; i++){<br>      for(int j = 0; j &lt; h.length; j++){<br>        h[i][j] = g[i][j];<br>      }<br>    }<br>    for(int k = 0; k &lt; h.length; k++){<br>      for(int i = 0; i &lt; h.length; i++){<br>        for(int j = 0; j &lt; h.length; j++){<br>          if(h[i][k] &amp;&amp; h[k][j]) h[i][j] = true;<br>        }<br>      }<br>    }<br>    int[] con = new int[26];<br>    TreeSet&lt;Integer&gt; hs = new TreeSet&lt;Integer&gt;();<br>    for(int i = 0; i &lt; h.length; i++){<br>      for(int j = 0; j &lt; h.length; j++){<br>        if(h[i][j]) con[i] |= (1&lt;&lt;j);<br>      }<br>      if(con[i] != 0) hs.add(con[i]);<br>    }<br>    int ret = 0;<br>    while(hs.size() &gt; 1){<br>      int a = hs.first();<br>      hs.remove(a);<br>      int b = hs.first();<br>      hs.remove(b);<br>      hs.add(a|b);<br>      mod(a, cnt);<br>      mod(b, cnt);<br>      ret++;<br>    }<br>    return ret+max(0, (odds(cnt)-2)/2);<br>  }<br>  void mod(int msk, int[] cnt){<br>    int at = -1;<br>    for(int i = 0; i &lt; cnt.length; i++){<br>      if(((1&lt;&lt;i)&amp;msk)==0)continue;<br>      if(at == -1) at = i;<br>      if((cnt[i]&amp;1)==1) at = i;<br>    }<br>    cnt[at]++;<br>  }<br>  int odds(int[] t){<br>    int ret = 0;<br>    for(int i = 0; i &lt; t.length; i++){<br>      if((t[i]&amp;1)==1) ret++;<br>    }<br>    return ret;<br>  }<br> <br>}<br> <br>// Powered by PopsEdit<br>// Powered by CodeProcessor<br></td>