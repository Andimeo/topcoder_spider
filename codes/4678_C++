<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;algorithm&gt;<br>#include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;list&gt;<br>using namespace std;<br>#define forn(i,n) for(int i=0;i&lt;(int)(n);++i)<br>#define forsn(i,s,n) for(int i=s;i&lt;(int)(n);++i)<br>#define forall(i,c) for(typeof(c.begin()) i=c.begin();i!=c.end();++i)<br><br>class ABCPath {<br>public:<br>    int length(vector &lt;string&gt; g) {<br>       int dx[8] = {-1,-1,-1,0,0,1,1,1};<br>    int dy[8] = {-1,0,1,-1,1,-1,0,1};<br>        int res=0;<br>        vector&lt; vector&lt;int&gt; &gt; m(g.size(), vector&lt;int&gt;(g[0].size(), -1));<br>        list&lt;int&gt; qx,qy;<br>        forn(x,g.size())forn(y,g[x].size())<br>          if (g[x][y] == 'A') { qx.push_back(x); qy.push_back(y); <br>            m[x][y] = 0;<br>          }<br>        while(!qx.empty()) {<br>          int x = qx.front(); qx.pop_front();<br>          int y = qy.front(); qy.pop_front();<br>          forn(d, 8) {<br>            int nx = x + dx[d];<br>            int ny = y + dy[d];<br>            if (nx &gt;= 0 &amp;&amp; ny &gt;= 0 &amp;&amp;<br>            nx &lt; m.size() &amp;&amp; ny &lt; m[0].size()<br>            &amp;&amp; m[nx][ny] == -1 &amp;&amp; g[nx][ny] == g[x][y] + 1) {<br>              m[nx][ny] = m[x][y] + 1;<br>              qx.push_back(nx);<br>              qy.push_back(ny);<br>            }<br>          }<br>        }<br>        forn(x,m.size())forn(y,m[x].size()) res &gt;?= m[x][y] + 1;<br>        return res;<br>    }<br><br>};<br><br><br>// Powered by FileEdit<br>// Powered by CodeProcessor<br></td>