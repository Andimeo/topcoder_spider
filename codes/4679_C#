<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections;<br><br>public class ValetParking {<br>  struct Position<br>  {<br>    public int row;<br>    public int col;<br><br>    public Position(int row, int col)<br>    {<br>      this.row = row;<br>      this.col = col;<br>    }<br>  }<br><br>  public int minMoves(int emptyRow, int emptyCol, int cusRow, int cusCol) {<br>    if (cusRow == 0 &amp;&amp; cusCol == 0)<br>      return 0;<br><br>    int[,] dist = new int[100, 100];<br>    bool[,] mark = new bool[100, 100];<br><br>    Queue q = new Queue();<br>    q.Enqueue(new Position(emptyRow, emptyCol));<br>    mark[emptyRow, emptyCol] = true;<br>    dist[emptyRow, emptyCol] = 0;<br>    mark[cusRow, cusCol] = true;<br>    dist[cusRow, cusCol] = -1;<br><br>    while (q.Count &gt; 0)<br>    {<br>      Position cur = (Position) q.Dequeue();<br><br>      for (int dr = -1; dr &lt;= 1; ++dr)<br>        for (int dc = -1; dc &lt;= 1; ++dc)<br>          if (Math.Abs(dr) + Math.Abs(dc) == 1)<br>          {<br>            int nr = cur.row + dr;<br>            int nc = cur.col + dc;<br><br>            if (nr &gt;= 0 &amp;&amp; nr &lt; 100 &amp;&amp; nc &gt;= 0 &amp;&amp; nc &lt; 100)<br>              if (!mark[nr, nc])<br>              {<br>                mark[nr, nc] = true;<br>                dist[nr, nc] = dist[cur.row, cur.col] + 1;<br>                q.Enqueue(new Position(nr, nc));<br>              }<br>          }<br>    }<br><br>    int res = int.MaxValue;<br><br>    for (int dr = -1; dr &lt;= 0; ++dr)<br>      for (int dc = -1; dc &lt;= 0; ++dc)<br>        if (Math.Abs(dr) + Math.Abs(dc) == 1)<br>        {<br>          int nr = cusRow + dr;<br>          int nc = cusCol + dc;<br>          if (nr &gt;= 0 &amp;&amp; nr &lt; 100 &amp;&amp; nc &gt;= 0 &amp;&amp; nc &lt; 100)<br>          {<br>            int cur = dist[nr, nc] + 1;<br>            <br>            while (nr &gt;= -dc &amp;&amp; nc &gt;= -dr)<br>            {<br>              nr += dc;<br>              nc += dr;<br>              cur += 3;<br><br>              if (nr &gt;= -dr &amp;&amp; nc &gt;= -dc)<br>              {<br>                nr += dr;<br>                nc += dc;<br>                cur += 3;<br>              } else break;<br>            }<br><br>            cur += 5 * (nr + nc);<br><br>            if (cur &lt; res)<br>              res = cur;<br>          }<br>        }<br><br>    return res;<br>  }<br>  <br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003] [modified for C# by Petr]<br>// Powered by CodeProcessor<br></td>