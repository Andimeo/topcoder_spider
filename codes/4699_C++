<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;set&gt;<br>#include &lt;map&gt;<br>#include &lt;sstream&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;math.h&gt;<br>#include &lt;ctype.h&gt;<br>#include &lt;iostream&gt;<br>using namespace std;<br>typedef long long ll;<br>typedef unsigned long long ull;<br> <br>class TriArea {<br>  public:<br>  double area(vector &lt;int&gt; xCenter, vector &lt;int&gt; yCenter, vector &lt;int&gt; height) {<br>    const int offset = 400;<br>    const int bound = 2 * offset + 100;<br>    bool full[bound][bound], half[bound][bound];<br>    memset(full, 0, sizeof(full));<br>    memset(half, 0, sizeof(half));<br>    for (int i = 0; i &lt; xCenter.size(); ++i) {<br>      // Do a linear transformation and rotation first....<br>      int v_x = xCenter[i], v_y = yCenter[i] + height[i];<br>      int l_x = xCenter[i] - height[i], l_y = yCenter[i];<br>      int r_x = xCenter[i] + height[i], r_y = yCenter[i];<br>      int n_v_x = v_x - v_y;<br>      int n_v_y = v_x + v_y;<br>      int n_l_y = l_x + l_y;<br>      int n_r_x = r_x - r_y;<br>      // Then we can fill a table<br>      for (int y = n_v_y; y &gt; n_l_y; --y) {<br>        for (int x = n_v_x; x &lt; n_r_x - (n_v_y - y) - 1; ++x)<br>          full[x+offset][y+offset] = true;<br>        half[n_r_x - (n_v_y - y) - 1 + offset][y+offset] = true;<br>      }<br>    }<br>    ll ans = 0;<br>    for (int x = 0; x &lt; bound; ++x)<br>      for (int y = 0; y &lt; bound; ++y)<br>        ans += (full[x][y]?2: (half[x][y]?1:0));<br>    return (0.25*ans);<br>  }<br>};<br> <br>// Powered by PopsEdit<br></td>