<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;cstdio&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cstring&gt;<br>#include &lt;cassert&gt;<br>#include &lt;cmath&gt;<br>#include &lt;vector&gt;<br>#include &lt;string&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;numeric&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;queue&gt;<br> <br>using namespace std;<br> <br>typedef vector&lt;int&gt; vi;<br>typedef vector&lt;double&gt; vd;<br> <br>#define For(i,a,b) for(int i=(a); i&lt;=(b); i++)<br>#define Rep(i,n) for(int i=0; i&lt;(n); i++)<br>#define Size(x) (int(x.size()))<br>#define Repd(i,n) for(int i=(n)-1; i&gt;=0; i--)<br>#define Fil(a) memset(&amp;a,0,sizeof(a))<br>#define Cpy(a,b) memcpy(&amp;a,&amp;b,sizeof(a))<br> <br>const int maxturns=50000;<br> <br>int port[100];<br>double prob[4][maxturns+1];<br>double pp[13];<br> <br>void calc(int p,double res[])<br>{<br>  double prev[100],next[100];<br>  Fil(next);<br>  next[p]=1.0;<br>  For(turn,1,maxturns)<br>  {<br>    Cpy(prev,next);<br>    Fil(next);<br>    Rep(i,100)<br>      For(j,2,12)<br>      {<br>        int k=i+j;<br>        k&lt;?=99;<br>        k=port[k];<br>        next[k]+=pp[j]*prev[i];<br>      }<br>    res[turn]=next[99];<br>    next[99]=0;<br>  }<br>}<br> <br>struct ChutesAndLadders<br>{<br>  vd winningChance(vi start,vi end,vi posit)<br>  {<br>    Fil(pp);<br>    For(i,1,6) For(j,1,6) pp[i+j]+=1.0;<br>    For(i,2,12) pp[i]/=36;<br>    Rep(i,100) port[i]=i;<br>    Rep(i,Size(start)) port[start[i]]=end[i];<br>    Rep(i,Size(posit)) calc(posit[i],prob[i]);<br>    vd res(Size(posit),0.0);<br>    double sum[4];<br>    Fil(sum);<br>    For(i,1,maxturns)<br>      Rep(j,Size(posit))<br>      {<br>        double add=1.0;<br>        Rep(k,Size(posit))<br>          if(k==j) add*=prob[j][i];<br>          else add*=(1-sum[k]);<br>        res[j]+=add;<br>        sum[j]+=prob[j][i];<br>      }<br>    return res;<br>  }<br>};<br></td>