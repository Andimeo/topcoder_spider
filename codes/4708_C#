<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections;<br><br>public class Recipe {<br>  Hashtable parse(string[] what)<br>  {<br>    Hashtable res = new Hashtable();<br><br>    foreach (string s in what)<br>    {<br>      string[] p = s.Split(' ');<br>      long am = long.Parse(p[0]);<br>      if (p[1] == "tsp")<br>        am *= 1;<br>      else if (p[1] == "Tbsp")<br>        am *= 3;<br>      else<br>        am *= 48;<br><br>      if (!res.ContainsKey(p[2]))<br>        res[p[2]] = (long) 0;<br><br>      res[p[2]] = ((long) res[p[2]]) + am;<br>    }<br><br>    return res;<br>  }<br><br>  long gcd(long a, long b)<br>  {<br>    while (a &gt; 0 &amp;&amp; b &gt; 0)<br>      if (a &gt; b) a %= b; else b %= a;<br>    return a+b;<br>  }<br><br>  string formatNumber(long am)<br>  {<br>    string res = "";<br>    long cups = am / 48;<br>    if (cups &gt; 0)<br>      res += cups + " cups ";<br>    am %= 48;<br>    long Tbsp = am / 3;<br>    if (Tbsp &gt; 0)<br>      res += Tbsp + " Tbsp ";<br>    am %= 3;<br>    long tsp = am;<br>    if (tsp &gt; 0)<br>      res += tsp + " tsp ";<br>    return res;<br>  }<br><br>  public string[] fix(string[] recipe, string[] mixingBowl) {<br>    Hashtable need = parse(recipe);<br>    Hashtable have = parse(mixingBowl);<br><br>    long g = 0;<br>    foreach (DictionaryEntry d in need) <br>    {<br>      g = gcd(g, (long) d.Value);<br>      if (!have.ContainsKey(d.Key))<br>        have[d.Key] = (long) 0;<br>    }<br><br>    Hashtable minNeed = new Hashtable();<br><br>    foreach (DictionaryEntry d in need)<br>      minNeed[d.Key] = (long) d.Value / g;<br><br>    need = minNeed;<br><br>    long min = g;<br><br>    foreach (DictionaryEntry d in need)<br>    {<br>      long cur = ((long) have[d.Key] + (long) d.Value - 1) / (long) d.Value;<br>      if (min &lt; cur)<br>        min = cur;<br>    }<br><br>    ArrayList res = new ArrayList();<br><br>    for (int i = 0; i &lt; recipe.Length; ++i)<br>    {<br>      string name = recipe[i].Split(' ')[2];<br><br>      long add = min * (long) need[name] - (long) have[name];<br><br>      if (add &gt; 0)<br>        res.Add(formatNumber(add) + name);<br>    }<br><br>    string[] r = new string[res.Count];<br>    res.CopyTo(r);<br>    return r;<br>  }<br><br>  <br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003] [modified for C# by Petr]<br>// Powered by CodeProcessor<br></td>