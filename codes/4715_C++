<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;algorithm&gt;<br>#include &lt;iostream&gt;<br>#include &lt;sstream&gt;<br>#include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;queue&gt;<br>#include &lt;set&gt;<br>#include &lt;map&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cctype&gt;<br>#include &lt;cmath&gt;<br><br>using namespace std;<br><br>#ifdef __GNUC__<br>#define int64 long long<br>#else /* MSVC, say */<br>#define int64 __int64<br>#endif<br><br>class VariableSolve {<br>public:<br>  string srt(string s) {<br>    for (int i=0; i+1 &lt; s.size(); i++)<br>      for (int j=0; j+1 &lt; s.size(); j++)<br>        if (s[j] &gt; s[j+1]) {<br>          char tmp = s[j];<br>          s[j] = s[j+1];<br>          s[j+1] = tmp;<br>        }<br>    return s;<br>  }<br><br>  char negs(char c) {<br>    if (c=='+')<br>      return '-';<br>    else<br>      return '+';<br>  }<br><br>    vector &lt;string&gt; getSolutions(string equation) {<br>    equation += '+';<br>        vector&lt;string&gt; therm;<br>    vector&lt;char&gt; sign;<br>    bool was_eqs = false;<br>    char last_char = '+';<br>    string cur_therm = "";<br>    int i,j;<br>    for (i=0; i &lt; equation.size(); i++) {<br>      if ((equation[i]=='+')||(equation[i]=='-')||(equation[i]=='=')) {<br>        therm.push_back(srt(cur_therm));<br>        if (was_eqs)<br>          sign.push_back(negs(last_char));<br>        else<br>          sign.push_back(last_char);<br>        if (equation[i] == '=') {<br>          was_eqs = true;<br>          last_char = '+';<br>        } else last_char = equation[i];<br>        cur_therm = "";        <br>      } else cur_therm += equation[i];      <br>    }<br>    vector&lt;string&gt; ret;<br>    for (char let='A'; let&lt;='Z'; let++) {<br>      vector&lt;string&gt; newtherm;<br>      vector&lt;int&gt; a;<br>      vector&lt;int&gt; b;<br>      vector&lt;int&gt; c;<br>      for (i=0; i &lt; therm.size(); i++) {<br>        int cnt_meet = 0;<br>        string therm_after = "";<br>        for (j=0; j &lt; therm[i].size(); j++)<br>          if (therm[i][j] == let)<br>            cnt_meet++;<br>          else<br>            therm_after += therm[i][j];<br>        int x=0;<br>        while ((x &lt; newtherm.size()) &amp;&amp; (newtherm[x] != therm_after)) x++;<br>        if (x == newtherm.size()) {<br>          newtherm.push_back(therm_after);<br>          a.push_back(0);<br>          b.push_back(0);<br>          c.push_back(0);<br>        }<br>        if (cnt_meet == 0) {<br>          if (sign[i] == '+')<br>            c[x]++;<br>          else<br>            c[x]--;<br>        }<br>        if (cnt_meet == 1) {<br>          if (sign[i] == '+')<br>            b[x]++;<br>          else<br>            b[x]--;<br>        }<br>        if (cnt_meet == 2) {<br>          if (sign[i] == '+')<br>            a[x]++;<br>          else<br>            a[x]--;<br>        }<br>      }      <br>      vector&lt;double&gt; root;<br>      vector&lt;bool&gt; isgood;<br>      for (i=0; i &lt; newtherm.size(); i++) {<br>        if (root.size() != 0) {<br>          for (j=0; j &lt; root.size(); j++) {<br>            if (fabs(a[i] * root[j] * root[j] + b[i] * root[j] + c[i]) &gt; 1e-10)<br>              isgood[j] = false;<br>          }<br>        } else {<br>          if ((a[i] == 0) &amp;&amp; (b[i] == 0)) {<br>            if (c[i] != 0) break;              <br>          } else<br>          if (a[i] == 0) {<br>            root.push_back(-c[i] / (double)b[i]);<br>            isgood.push_back(true);<br>          } else {<br>            int d = b[i]*b[i]-4*a[i]*c[i];<br>            if (d &lt; 0) break;<br>            if (d == 0) {<br>              root.push_back(- b[i] / 2.0 / (double)a[i]);<br>              isgood.push_back(true);<br>            }<br>            if (d &gt; 0) {<br>              root.push_back((- b[i] - sqrt((double)d)) / 2.0 / (double)a[i]);<br>              root.push_back((- b[i] + sqrt((double)d)) / 2.0 / (double)a[i]);<br>              isgood.push_back(true);<br>              isgood.push_back(true);<br>            }<br>          }<br>        }<br>      }<br>      for (i=0; i &lt; root.size(); i++) <br>        if (isgood[i]) {<br>          string s = "";<br>          s += let;<br>          ret.push_back(s);<br>        }<br>    }<br>    return ret;<br>    }<br><br>};<br><br><br>// Powered by FileEdit<br>// Powered by CodeProcessor<br></td>