<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br><br>/** <br> * @author Roman Elizarov<br> */<br>public class VariableSolve {<br>  static class Mults {<br>    int[] a = new int[3];<br>  }<br><br>  static class Cnt {<br>    int cnt;<br>  }<br><br>  public String[] getSolutions(String equation) {<br>    ArrayList&lt;String&gt; res = new ArrayList&lt;String&gt;();<br>    HashMap&lt;String, Mults&gt; mm = new HashMap&lt;String, Mults&gt;();<br>    for (char c = 'A'; c &lt;= 'Z'; c++)<br>      if (equation.indexOf(c) &gt;= 0) {<br>        mm.clear();<br>        StringBuilder term = new StringBuilder();<br>        Cnt cnt = new Cnt();<br>        int mult = 1;<br>        int rhs = 1;<br>        for (int i = 0; i &lt; equation.length(); i++) {<br>          char d = equation.charAt(i);<br>          if (d == '=') {<br>            mkterm(mm, term, mult, cnt);<br>            rhs = -1;<br>            mult = -1;<br>          } else if (d == '+') {<br>            mkterm(mm, term, mult, cnt);<br>            mult = rhs;<br>          } else if (d == '-') {<br>            mkterm(mm, term, mult, cnt);<br>            mult = -rhs;<br>          } else if (d == c) {<br>                    cnt.cnt++;<br>          } else {<br>            term.append(d);<br>          }<br>        }<br>        mkterm(mm, term, mult, cnt);<br>        int goodc = 3; // all<br>        double[] g = null;<br>        for (Iterator it = mm.values().iterator(); it.hasNext();) {<br>          Mults m = (Mults)it.next();<br>          double[] gg;<br>          if (m.a[2] == 0) {<br>            if (m.a[1] == 0) {<br>              if (m.a[0] == 0)<br>                continue; // all good<br>              else {<br>                goodc = 0;<br>                break; // no good<br>              }<br>            } else {<br>              gg = new double[] { -(double)m.a[0] / m.a[1] };<br>            }<br>          } else {<br>            int det = m.a[1] * m.a[1] - 4 * m.a[0] * m.a[2];<br>            if (det &lt; 0) {<br>              goodc = 0;<br>              break; // no good<br>            }<br>            if (det == 0) {<br>              gg = new double[] { -(double)m.a[1] / (2.0 * m.a[2]) };<br>            } else {<br>              double sq = Math.sqrt(det);<br>              gg = new double[] {<br>                (-m.a[1] + sq) / (2.0 * m.a[2]),<br>                (-m.a[1] - sq) / (2.0 * m.a[2])<br>              };<br>            }<br>          }<br>          // merge<br>          if (goodc == 3) {<br>            g = gg;<br>            goodc = g.length;<br>          } else {<br>            double[] gn = new double[2];<br>            int gnc = 0;<br>            for (int i = 0; i &lt; goodc; i++) {<br>              boolean ok = false;<br>              for (int j = 0; j &lt; gg.length; j++)<br>                if (eq(g[i], gg[j])) {<br>                  ok = true;<br>                  break;<br>                }<br>              if (ok)<br>                gn[gnc++] = g[i];<br>            }<br>            g = gn;<br>            goodc = gnc;<br>            if (goodc == 0)<br>              break;<br>          }<br>        }<br>        if (goodc &lt; 3)<br>          for (int j = 0; j &lt; goodc; j++)<br>            res.add("" + c);<br>      }<br>    return res.toArray(new String[0]);<br>  }<br><br>  boolean eq(double x, double y) {<br>    return Math.abs(x - y) &lt; 1e-11;<br>  }<br><br>  private void mkterm(HashMap&lt;String, Mults&gt; mm, StringBuilder term, int mult, Cnt cnt) {<br>    for (int i = 0; i &lt; term.length(); i++)<br>      for (int j = i + 1; j &lt; term.length(); j++)<br>        if (term.charAt(i) &gt; term.charAt(j)) {<br>                  char c = term.charAt(i);<br>          term.setCharAt(i, term.charAt(j));<br>          term.setCharAt(j, c);<br>        }<br>    String ts = term.toString();<br>    Mults m = mm.get(ts);<br>    if (m == null)<br>      mm.put(ts, m = new Mults());<br>        m.a[cnt.cnt] += mult;<br>    term.setLength(0);<br>    cnt.cnt = 0;<br>  }<br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by RETester [based on ExampleBuilder]<br>// Powered by CodeProcessor<br></td>