<td class="problemText" colspan="8" valign="middle" align="left">
            using System; using System.Collections; using System.Text; using System.Text.RegularExpressions;<br>public class PlayingCubes<br>   {<br>   public int[] composeWords(string[] C, string[] W)<br>      {<br>      ArrayList ar = new ArrayList();<br>      int CN = C.Length;<br>      for (int i=0; i &lt; W.Length; i++)<br>         {<br>         String w = W[i];<br>         int wl = w.Length;<br>         if (wl &gt; CN)<br>            continue;<br>         bool can=false;<br>         int[] perm = new int[CN];<br>         for (int j=0; j &lt; CN; j++) perm[j]=j;<br>         do<br>            {<br>            bool good=true;<br>            for (int j=0; j &lt; wl; j++)<br>               if (C[perm[j]].IndexOf(w[j]) &lt; 0)<br>                  good = false;<br>            if (good) can = true;<br>            }<br>         while (NextPerm(perm));<br>         if (can) ar.Add(i);<br>         }<br>      return IA(ar);<br>      }<br><br><br>// Library begins here<br><br>static int[]    IA(ArrayList ar) { return (int   []) ar.ToArray(typeof(int   )); }<br><br>static bool NextPerm(int[] a)<br>   {<br>   int N=a.Length;<br>   for (int i=N-2; i &gt;= 0; i--) if (a[i]&lt;a[i+1])<br>      {<br>      Array.Reverse(a, i+1, N-i-1);<br>      for (int j=i+1; ; j++) if (a[i] &lt; a[j])<br>         {<br>         SWAP(ref a[i], ref a[j]); return true;<br>         }<br>      }<br>   return false;<br>   }<br><br>static void SWAP (ref int    x, ref int    y) { int    t=x; x=y; y=t; }<br><br>} // TopC#der<br><br><br>// Powered by FileEdit<br></td>