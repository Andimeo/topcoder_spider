<td class="problemText" colspan="8" valign="middle" align="left">
            Public Class PlayingCubes<br>        Dim bUsed(10) As Boolean<br>        Dim aCubeContains(25, 10) As Boolean<br>        Dim iCubeMax As Integer<br>        Public Function composeWords(ByVal cubes As String(), ByVal words As String()) As Integer()<br>            Dim i, j, k, l As Long<br>            iCubeMax = cubes.GetUpperBound(0)<br> <br>            For i = 0 To 25<br>                For j = 0 To 10<br>                    aCubeContains(i, j) = False<br>                Next<br>            Next<br> <br>            For i = 0 To cubes.GetUpperBound(0)<br>                For j = 0 To 5<br>                    aCubeContains(Microsoft.VisualBasic.Asc(cubes(i).Substring(j, 1)) - 65, i) = True<br>                Next<br>            Next<br> <br>            Dim sWord As String<br>            Dim aRet As New System.Collections.ArrayList<br> <br>            For i = 0 To words.GetUpperBound(0)<br>                If bCanMake(words(i), 0) Then aRet.Add(CInt(i))<br>                For j = 0 To bUsed.GetUpperBound(0)<br>                    bUsed(j) = False<br>                Next<br> <br>            Next<br> <br>            Return aRet.ToArray(GetType(Integer))<br> <br> <br>        End Function<br> <br>        Private Function bCanMake(ByRef sWord As String, ByRef iPos As Integer) As Boolean<br>            If sWord.Length = iPos Then Return True<br>            Dim i, j As Integer<br>            For i = 0 To iCubeMax<br>                If Not bUsed(i) Then<br>                    If aCubeContains(Microsoft.VisualBasic.Asc(sWord.Substring(iPos, 1)) - 65, i) Then<br>                        bUsed(i) = True<br>                        If bCanMake(sWord, iPos + 1) Then Return True<br>                        bUsed(i) = False<br>                    End If<br>                End If<br>            Next<br>        End Function<br>    End Class<br></td>