<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>public class RollingBlock {<br>    <br>    boolean[][] b0;<br>    boolean[][] b1;<br>    boolean[][] b2;<br>    <br>    class Node {<br>        int s; // state 0, 1, 2<br>        int r, c;<br>        int cost;<br>        public Node(int r, int c, int s, int cost) {<br>            this.r = r;<br>            this.c = c;<br>            this.s = s;<br>            this.cost = cost;<br>        }<br>    }<br>    <br>    public int minMoves(int rows, int cols, int[] start, int[] target) {<br>        <br>        b0 = new boolean[rows][cols];<br>        b1 = new boolean[rows][cols];<br>        b2 = new boolean[rows][cols];<br>        <br>        int tr = target[0];<br>        int tc = target[1];<br>        <br>        Node sn = new Node(start[0], start[1], 0, 0);<br>        Queue&lt;Node&gt; q = new LinkedList&lt;Node&gt;();<br>        q.add(sn);<br>        while (!q.isEmpty()) {<br>            Node n = q.remove();<br>            int r = n.r;<br>            int c = n.c;<br>            int cost = n.cost;<br>            int s = n.s;<br>            <br>            // goal check<br>            if (n.r == tr &amp;&amp; n.c == tc &amp;&amp; s == 0) return n.cost;<br>            <br>            if ((s == 0) &amp;&amp; <br>                    (r &lt; 0 || r &gt;= rows || c &lt; 0 || c &gt;= cols)) continue; <br>            if ((s == 1) &amp;&amp; <br>                    (r &lt; 0 || r &gt;= rows || c &lt; 0 || c+2 &gt;= cols)) continue; <br>            if ((s == 2) &amp;&amp; <br>                    (r &lt; 0 || r+2 &gt;= rows || c &lt; 0 || c &gt;= cols)) continue; <br>            <br>            <br>            if (s == 0 &amp;&amp; b0[r][c]) continue;<br>            if (s == 1 &amp;&amp; b1[r][c]) continue;<br>            if (s == 2 &amp;&amp; b2[r][c]) continue;<br>            if (s == 0) b0[r][c] = true;<br>            if (s == 1) b1[r][c] = true;<br>            if (s == 2) b2[r][c] = true;<br><br>            <br>            // move<br>            if (s == 0) {<br>                q.add(new Node(r, c+1, 1, cost + 1)); // right<br>                q.add(new Node(r, c-3, 1, cost + 1)); // left<br>                q.add(new Node(r-3, c, 2, cost + 1)); // up<br>                q.add(new Node(r+1, c, 2, cost + 1)); // down<br>            } else if (s==1){<br>                q.add(new Node(r, c+3, 0, cost + 1)); // right<br>                q.add(new Node(r, c-1, 0, cost + 1)); // left<br>                q.add(new Node(r-1, c, 1, cost + 1)); // up<br>                q.add(new Node(r+1, c, 1, cost + 1)); // down<br>            } else {<br>                q.add(new Node(r, c+1, 2, cost + 1)); // right<br>                q.add(new Node(r, c-1, 2, cost + 1)); // left<br>                q.add(new Node(r-1, c, 0, cost + 1)); // up<br>                q.add(new Node(r+3, c, 0, cost + 1)); // down<br>            }<br>        }<br>        return -1;<br>    }<br><br>}<br><br><br><br>// Powered by FileEdit<br>// Powered by CodeProcessor<br></td>