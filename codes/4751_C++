<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;iostream&gt;<br>#include &lt;vector&gt;<br>#include &lt;map&gt;<br>#include &lt;ext/hash_map&gt;<br>#include &lt;set&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;complex&gt;<br>#include &lt;numeric&gt;<br>#include &lt;ctype.h&gt;<br>#include &lt;math.h&gt;<br>#include &lt;sstream&gt;<br>#include &lt;string&gt;<br>#include &lt;deque&gt;<br>using namespace std;<br>using namespace __gnu_cxx;<br>typedef long long ll;<br>typedef unsigned long long ull;<br>typedef long double ld;<br> <br>#define SQR(x) ((x)*(x))<br>typedef struct{<br>  int n;             <br>  long double x[2];  <br>} Result;<br> <br>Result solve_quad(long double a, long double b, long double c){<br>  Result r;<br>  long double z = SQR(b)-4*a*c;<br>  if(z &lt; 0){<br>    r.n = 0;<br>  } else if(z == 0){<br>    r.n = 1;<br>    r.x[0] = -b/(2*a);<br>  } else {<br>    r.n = 2;<br>    r.x[0] = (-b+sqrt(z))/(2*a);<br>    r.x[1] = (-b-sqrt(z))/(2*a);<br>  }<br>  return r;<br>}<br>int fit_diag(double x1, double y1, double x2, double y2){<br>  long double A = SQR(x1)+SQR(y1);<br>  long double B = -2*SQR(x1)*x2;<br>  long double C = SQR(x1)*(SQR(x2)-SQR(y1));<br>  long double a;<br>  Result r = solve_quad(A,B,C);<br>  long double w1, w2;<br>  int i;<br>  for(i = 0; i &lt; r.n; i++){<br>    if(0 &lt;= r.x[i] &amp;&amp; r.x[i] &lt;= x2){<br>      a = r.x[i];<br>      w1 = sqrt(SQR(x1)-SQR(a));<br>      w2 = sqrt(SQR(y1)-SQR(x2-a));<br>      if(y2 &gt;= sqrt(SQR(x1)-SQR(a))+sqrt(SQR(y1)-SQR(x2-a)) - 1e-9) return 1;<br>    }<br>  }<br>  return 0;<br>}<br> <br>ld EPS = 1e-9;<br>int rect_in_rect_test(double x1, double y1, double x2, double y2){<br>  if(x1 &lt;= x2 + EPS &amp;&amp; y1 &lt;= y2 + EPS) return 1;<br>  if(x1 &lt;= y2 + EPS &amp;&amp; y1 &lt;= x2 + EPS) return 1;<br>  if(x1 &gt; x2 + EPS &amp;&amp; y1 &gt; y2 + EPS) return 0;<br>  if(x1 &gt; y2 + EPS &amp;&amp; y1 &gt; x2 + EPS) return 0;<br>  if(fit_diag(x1,y1,x2,y2) ||<br>     fit_diag(x1,y1,y2,x2) ||<br>     fit_diag(y1,x1,x2,y2) ||<br>     fit_diag(y1,x1,y2,x2)) return 1;<br>  return 0;<br>}<br> <br>class PackingShapes {<br>  public:<br>  vector &lt;string&gt; tryToFit(int width, int height, vector &lt;string&gt; shapes) {<br>    vector &lt; string &gt; ans;<br>    for(int i = 0; i &lt; shapes.size(); i++){<br>      istringstream sin(shapes[i]); string s; sin &gt;&gt; s;<br>      if(s == "CIRCLE"){<br>        int r; sin &gt;&gt; r;<br>        if(2*r &lt;= (width &lt;? height)) ans.push_back("YES");<br>        else ans.push_back("NO");<br>      }else{<br>        int w, h; sin &gt;&gt; w &gt;&gt; h;<br>        if(rect_in_rect_test(w, h, width, height)) ans.push_back("YES");<br>        else ans.push_back("NO");<br>      }<br>    }<br>    return ans;<br>  }<br>};<br> <br>// Powered by PopsEdit<br></td>