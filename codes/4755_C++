<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;algorithm&gt;<br>#include &lt;iostream&gt;<br>#include &lt;sstream&gt;<br>#include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;queue&gt;<br>#include &lt;set&gt;<br>#include &lt;map&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cctype&gt;<br>#include &lt;cmath&gt;<br>#include &lt;list&gt;<br>#include &lt;regex.h&gt; <br>using namespace std;<br><br>// LIB CODE<br>#define INFINT (999999999)<br>#define FOR(i,a,b) for(int i=(a);i&lt;int(b);++i)<br>#define REP(i,n) FOR(i,0,n)<br>#define SZ(v) ((int)(v).size())<br>#define FORSZ(i,a,v) FOR(i,a,SZ(v))<br>#define REPSZ(i,v) FORSZ(i,0,v)<br>typedef vector&lt;int&gt; VI;<br>template&lt;class T, class U&gt; T cast (U x) { T y; ostringstream a; a&lt;&lt;x; istringstream b(a.str()); b&gt;&gt;y; return y; }<br>template&lt;class T&gt; vector&lt;T&gt; split(string s, string x=" ") { vector&lt;T&gt; r; REP(i,s.size()) { string c; while(i&lt;(int)s.size()&amp;&amp;x.find(s[i])==string::npos) c+=s[i++]; if(c.size()) r.push_back(cast&lt;T&gt;(c)); } return r; }<br>// REAL CODE<br><br>int best[50][50];<br><br><br>class SalesmansDilemma {<br>public:<br>  string bestRoute(int n, int s, int e, vector &lt;string&gt; cost, vector &lt;int&gt; prof) {<br>    REP(i,n) REP(j,n) best[i][j]=-INFINT; best[s][s]=0;<br>    REPSZ(i,cost) { VI x=split&lt;int&gt;(cost[i]); best[x[0]][x[1]]&gt;?=-x[2]+prof[x[1]]; }<br>    <br>    REP(k,n) REP(i,n) REP(j,n) if(best[i][k]!=-INFINT&amp;&amp;best[k][j]!=-INFINT) best[i][j]&gt;?=best[i][k]+best[k][j];<br>    <br>//    REP(i,n) REP(j,n) printf("%10d%c",best[i][j],j==n-1?'\n':' ');<br>    <br>    if(best[s][e]==-INFINT) return "IMPOSSIBLE";<br>    REP(i,n) if(best[s][i]!=-INFINT&amp;&amp;best[i][i]&gt;0&amp;&amp;best[i][e]!=-INFINT) return "ENDLESS PROFIT";<br>    return "BEST PROFIT: "+cast&lt;string&gt;(prof[s]+best[s][e]);<br>  }<br>  <br>};<br><br><br>// Powered by FileEdit<br>// Powered by CodeProcessor<br></td>