<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br> <br>public class SalesmansDilemma {<br>    int n;<br>    int[] p;<br>    int[][] a;<br>    boolean[] u;<br> <br>    public int MUCH = 1000000000;<br> <br>    public void dfs(int i) {<br>        u[i] = true;<br>        for (int j = 0; j &lt; n; j++) {<br>            if (!u[j] &amp;&amp; a[i][j] != 0) {<br>                dfs(j);<br>            }<br>        }<br>    }<br> <br>    public String bestRoute(int towns, int origin, int destination, String[] travelCosts, int[] profits) {<br>        n = towns;<br>        p = profits;<br>        a = new int[n][n];<br>        for (int i = 0; i &lt; travelCosts.length; i++) {<br>            Scanner sc = new Scanner(travelCosts[i]);<br>            int j = sc.nextInt();<br>            int k = sc.nextInt();<br>            int l = sc.nextInt();<br>            if (a[j][k] == 0 || a[j][k] &gt; l) {<br>                a[j][k] = l;<br>            }<br>        }<br> <br>        int[] d = new int[n];<br>        boolean[] r = new boolean[n];<br>        r[origin] = true;<br>        d[origin] = p[origin];<br> <br>        for (int i = 0; i &lt; n; i++) {<br>            for (int j = 0; j &lt; n; j++) {<br>                if (r[j]) {<br>                    for (int k = 0; k &lt; n; k++) {<br>                        if (a[j][k] != 0 &amp;&amp; (!r[k] || d[k] &lt; d[j] + p[k] - a[j][k])) {<br>                            d[k] = d[j] + p[k] - a[j][k];<br>                            if (d[k] &gt; MUCH) {<br>                                d[k] = MUCH;<br>                            }<br>                            r[k] = true;<br>                        }<br>                    }<br>                }<br>            }<br>        }<br> <br>        if (!r[destination]) {<br>            return "IMPOSSIBLE";<br>        }<br> <br>        if (d[destination] == MUCH) {<br>            return "ENDLESS PROFIT";<br>        }<br> <br>        int[] saved = new int[n];<br>        for (int i = 0; i &lt; n; i++) {<br>            saved[i] = d[i];<br>        }<br> <br>        for (int i = 0; i &lt; n; i++) {<br>            for (int j = 0; j &lt; n; j++) {<br>                if (r[j]) {<br>                    for (int k = 0; k &lt; n; k++) {<br>                        if (a[j][k] != 0 &amp;&amp; (!r[k] || d[k] &lt; d[j] + p[k] - a[j][k])) {<br>                            d[k] = d[j] + p[k] - a[j][k];<br>                            if (d[k] &gt; MUCH) {<br>                                d[k] = MUCH;<br>                            }<br>                            r[k] = true;<br>                        }<br>                    }<br>                }<br>            }<br>        }<br> <br>        u = new boolean[n];<br>        for (int i = 0; i &lt; n; i++) {<br>            if (d[i] != saved[i]) {<br>                dfs(i);<br>            }<br>        }<br>        if (u[destination]) {<br>            return "ENDLESS PROFIT";<br>        }<br> <br>        return "BEST PROFIT: " + d[destination];<br>    }<br> <br> <br>}<br> <br> <br>// Powered by PopsEdit<br> <br>// Powered by CodeProcessor<br></td>