<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>public class RingCount {<br>  int m, n;<br>  void dfs(char[][] c, char a, char b, int i, int j) {<br>    if (c[i][j] != a) return;<br>    c[i][j]=b;<br>    if (i&gt;0) dfs(c, a, b, i-1, j);<br>    if (j&gt;0) dfs(c, a, b, i, j-1);<br>    if (i&lt;n-1) dfs(c, a, b, i+1, j);<br>    if (j&lt;m-1) dfs(c, a, b, i, j+1);<br>  }<br>  <br>  public int count(String[] bitmap) {<br>    n = bitmap.length;<br>    m = bitmap[0].length();<br>    boolean[][][] ring = new boolean[52][n][m];<br>    char[][] c = new char[n][];<br>    for (int i=0; i&lt;n; i++) c[i] = bitmap[i].toCharArray();<br>    for (int i=0; i&lt;n; i++) if (c[i][0] == 'X' || c[i][m-1] == 'X') return -1;<br>    for (int i=0; i&lt;m; i++) if (c[0][i] == 'X' || c[n-1][i] == 'X') return -1;<br>    int result = 0;<br>    char expected = '.';<br>    int[][] lev = new int[n][m];<br>    for (int i=0; i&lt;n; i++)<br>    for (int j=0; j&lt;m; j++) {<br>      if (c[i][j]=='X' || c[i][j]=='.') {<br>        //System.out.println(result);<br>        //System.out.println(Arrays.deepToString(c));<br>        if (c[i][j] != expected) return -1;<br>        dfs(c, expected, '*', i, j);<br>        for (int u=0; u&lt;n; u++)<br>        for (int v=0; v&lt;m; v++) {<br>          ring[result][u][v] = (c[u][v]=='*');<br>          if (c[u][v]=='*') {c[u][v]='D'; lev[u][v] = result;}<br>        }<br>        result++;<br>        expected = (char)('X'+'.'-expected);<br>      }<br>      if (result &gt; 50) return -1;<br>    }<br>    if (result % 2 != 0) return -1;<br>    char[][] cum = new char[n][m];<br>    for (int i=0; i&lt;n; i++) Arrays.fill(cum[i], ' ');<br>    for (int t=0; t&lt;result-1; t++) {<br>      for (int i=0; i&lt;n; i++)<br>      for (int j=0; j&lt;m; j++) <br>      if (ring[t][i][j]) cum[i][j]='Y';<br>      //System.out.println(Arrays.deepToString(cum));<br>      int subresult = 0;<br>      for (int i=0; i&lt;n; i++)<br>      for (int j=0; j&lt;m; j++) <br>      if (cum[i][j] == ' ') {subresult++; dfs(cum, ' ', 'N', i, j);}<br>      //System.out.println(Arrays.deepToString(cum));<br>      if (subresult != 1) return -1;<br>      for (int i=0; i&lt;n; i++)<br>      for (int j=0; j&lt;m; j++) <br>      if (cum[i][j] == 'N') {dfs(cum, 'N', ' ', i, j);}<br>    }<br>    //System.out.println("foo");<br>    for (int i=1; i&lt;n; i++)<br>    for (int j=1; j&lt;m; j++)<br>    if (Math.abs(lev[i][j] - lev[i-1][j-1]) &gt; 1) return -1;<br>    for (int i=0; i&lt;n-1; i++)<br>    for (int j=1; j&lt;m; j++)<br>    if (Math.abs(lev[i][j] - lev[i+1][j-1]) &gt; 1) return -1;<br>    <br>    <br>    return result/2;<br>  }<br>}<br> <br>// Powered by PopsEdit<br></td>