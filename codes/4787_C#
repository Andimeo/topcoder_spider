<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br><br>public class ConvexHull {<br>  int size;<br>  int[,] am;<br><br>  class Vector : IComparable<br>  {<br>    public int x;<br>    public int y;<br><br>    public Vector(int x, int y)<br>    {<br>      this.x = x;<br>      this.y = y;<br>    }<br><br>    public int CompareTo(object obj)<br>    {<br>      Vector v = (Vector) obj;<br>      int z = x * v.y - y * v.x;<br>      if (z &lt; 0)<br>        return -2;<br>      else if (z &gt; 0)<br>        return 2;<br>      else<br>      {<br>        z = x + y - v.x - v.y;<br><br>        if (z &lt; 0)<br>          return -1;<br>        else if (z &gt; 0)<br>          return 1;<br>        else<br>          return 0;<br>      }<br>    }<br>  }<br><br>  void fillAm()<br>  {<br>    am = new int[size + 1, size + 1];<br><br>    Vector[] v = new Vector[(size + 1) * size];<br>    int k = 0;<br>    for (int i = 0; i &lt;= size; ++i)<br>      for (int j = 1; j &lt;= size; ++j)<br>        v[k++] = new Vector(i, j);<br><br>    Array.Sort(v);<br><br>    for (int i = 0; i &lt;= size; ++i)<br>      for (int j = 0; j &lt;= size; ++j)<br>        am[i, j] = int.MinValue / 2;<br><br>    am[0, 0] = 0;<br><br>    for (int i = 0; i &lt; v.Length; ++i)<br>      if (i == 0 || v[i].CompareTo(v[i - 1]) &gt; 1)<br>      {<br>        Vector vv = v[i];<br><br>        for (int x = size - vv.x; x &gt;= 0; --x)<br>          for (int y = size - vv.y; y &gt;= 0; --y)<br>            if (am[x + vv.x, y + vv.y] &lt; am[x, y] + 1)<br>              am[x + vv.x, y + vv.y] = am[x, y] + 1;<br>      }<br><br>    for (int i = 0; i &lt;= size; ++i)<br>      for (int j = 0; j &lt;= size; ++j)<br>      {<br>        if (i &lt; size &amp;&amp; am[i, j] &gt; am[i + 1, j])<br>          am[i + 1, j] = am[i, j];<br>        if (j &lt; size &amp;&amp; am[i, j] &gt; am[i, j + 1])<br>          am[i, j + 1] = am[i, j];<br>      }<br>  }<br><br>  public int intHull(int m, int n) {<br>    size = Math.Max(m, n);<br>    fillAm();<br>    int[,] best = new int[n + 1, n + 1];<br>    for (int i = 0; i &lt;= n; ++i)<br>      for (int j = 0; j &lt;= n; ++j)<br>      {<br>        int b = int.MinValue / 2;<br>        for (int k = 0; k &lt;= m; ++k)<br>          if (am[k, i] + am[j, m - k] &gt; b)<br>            b = am[k, i] + am[j, m - k];<br><br>        best[i, j] = b;<br>      }<br><br>    int res = int.MinValue / 2;<br>    for (int i = 0; i &lt;= n; ++i)<br>      for (int j = 0; j &lt;= n; ++j)<br>      {<br>        int cur = best[i, j] + best[n - j, n - i];<br>        if (cur &gt; res)<br>          res = cur;<br>      }<br><br>    return res;<br>  }<br>  <br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003] [modified for C# by Petr]<br>// Powered by CodeProcessor<br></td>