<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br><br>public class BestYahtzeeScore {<br>  int[] tmp = new int[5];<br>  int[] tmp2 = new int[5];<br>  int[] what = new int[5];<br>  int[] all;<br><br>  int score(int[] what)<br>  {<br>    what.CopyTo(tmp, 0);<br>    Array.Sort(tmp);<br>    <br>    int sum = 0;<br>    for (int i =0; i &lt; 5; ++i)<br>      sum += tmp[i];<br><br>    int res = 0;<br>    if (tmp[0] == tmp[1] &amp;&amp; tmp[0] == tmp[2] &amp;&amp; tmp[0] == tmp[3] &amp;&amp; tmp[0] == tmp[4])<br>      if (res &lt; 50) <br>        res = 50;<br><br>    if ((tmp[0] + 1) == tmp[1] &amp;&amp; (tmp[0] + 2) == tmp[2] &amp;&amp; (tmp[0] + 3) == tmp[3] &amp;&amp; (tmp[0] + 4) == tmp[4])<br>      if (res &lt; 40) <br>        res = 40;<br><br>    for (int k = 0; k &lt; 5; ++k) <br>    {<br>      int s = 0;<br>      for (int l = 0; l &lt; 5; ++l)<br>        if (l != k)<br>          tmp2[s++] = tmp[l];<br><br>      if ((tmp2[0] + 1) == tmp2[1] &amp;&amp; (tmp2[0] + 2) == tmp2[2] &amp;&amp; (tmp2[0] + 3) == tmp2[3])<br>        if (res &lt; 30) <br>          res = 30;<br><br>      if (tmp2[0] == tmp2[1] &amp;&amp; tmp2[0] == tmp2[2] &amp;&amp; tmp2[0] == tmp2[3])<br>        if (res &lt; sum) <br>          res = sum;<br>    }<br><br>    if (tmp[0] == tmp[1] &amp;&amp; tmp[2] == tmp[3] &amp;&amp; tmp[2] == tmp[4])<br>      if (res &lt; 25) <br>        res = 25;<br><br>    if (tmp[0] == tmp[1] &amp;&amp; tmp[0] == tmp[2] &amp;&amp; tmp[3] == tmp[4])<br>      if (res &lt; 25) <br>        res = 25;<br><br>    return res;<br>  }<br><br>  int rec(int throws, int at)<br>  {<br>    int best = 0;<br><br>    if (throws == 0)<br>      return score(what);<br><br>    for (int k0 = 0; k0 &lt; 2; ++k0)<br>    for (int k1 = 0; k1 &lt; 2; ++k1)<br>    for (int k2 = 0; k2 &lt; 2; ++k2)<br>    for (int k3 = 0; k3 &lt; 2; ++k3)<br>    for (int k4 = 0; k4 &lt; 2; ++k4)<br>    {<br>      int sat = at;<br>      int[] swhat = new int[what.Length];<br>      what.CopyTo(swhat, 0);<br>      if (k0 &gt; 0) what[0] = all[at++];<br>      if (k1 &gt; 0) what[1] = all[at++];<br>      if (k2 &gt; 0) what[2] = all[at++];<br>      if (k3 &gt; 0) what[3] = all[at++];<br>      if (k4 &gt; 0) what[4] = all[at++];<br>      int cur = rec(throws - 1, at);<br>      if (cur &gt; best)<br>        best = cur;<br>      swhat.CopyTo(what, 0);<br>      at = sat;<br>    }<br><br>    return best;<br>  }<br><br>  public int bestScore(string rolls) {<br>    all = new int[rolls.Length];<br>    for (int i = 0; i &lt; rolls.Length; ++i)<br>    {<br>      all[i] = rolls[i] - '0';<br>    }<br><br>    for (int i = 0; i &lt; 5; ++i)<br>      what[i] = all[i];<br><br>    return rec(2, 5);<br>  }<br>  <br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003] [modified for C# by Petr]<br>// Powered by CodeProcessor<br></td>