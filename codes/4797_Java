<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br> <br>public class BestYahtzeeScore<br>{<br>    private int intAt(String rolls, int j)<br>    {<br>        return Integer.parseInt(""+rolls.charAt(j));<br>    }<br>    <br>    private int score(int i, String rolls)<br>    {<br>        int[] ia = new int[5];<br>        for (int j=0; j&lt;5; j++)<br>        {<br>            ia[j] = intAt(rolls, j);<br>        }<br>        int iNext = 5;<br>        for (int j=0; j&lt;5; j++)<br>        {<br>            if ( (i&amp;(1&lt;&lt;j))==0 ) continue;<br>            ia[j] = intAt(rolls, iNext);<br>            iNext++;<br>        }<br>        for (int j=0; j&lt;5; j++)<br>        {<br>            if ( (i&amp;(1&lt;&lt;(j+5)))==0 ) continue;<br>            ia[j] = intAt(rolls, iNext);<br>            iNext++;<br>        }<br>        Arrays.sort(ia);<br>        int maxSame = 0;<br>        int[] iaCount = new int[7];<br>        for (int die : ia)<br>        {<br>            iaCount[die]++;<br>            maxSame = Math.max(maxSame, iaCount[die]);<br>        }<br>        if (maxSame==5)<br>        {<br>            return 50;<br>        }<br>        else if (maxSame==4)<br>        {<br>            int res = 0;<br>            for (int die : ia) res += die;<br>            return res;<br>        }<br>        else if (maxSame==3)<br>        {<br>            boolean fh = false;<br>            for (int cnt : iaCount)<br>            {<br>                if (cnt==2)<br>                {<br>                    fh = true;<br>                    break;<br>                }<br>            }<br>            return fh?25:0;<br>        }<br>        else<br>        {<br>            int consec = 0, maxconsec = 0;<br>            for (int die=1; die&lt;=6; die++)<br>            {<br>                if (iaCount[die]&gt;0)<br>                {<br>                    consec++;<br>                }<br>                else<br>                {<br>                    consec = 0;<br>                }<br>                maxconsec = Math.max(maxconsec, consec);<br>            }<br>            if (maxconsec==5)<br>            {<br>                return 40;<br>            }<br>            else if (maxconsec==4)<br>            {<br>                return 30;<br>            }<br>            else<br>            {<br>                return 0;<br>            }<br>        }<br>    }<br>    <br>    public int bestScore(String rolls)<br>    {<br>        int res = 0;<br>        for (int i=0; i&lt;(2&lt;&lt;10); i++)<br>        {<br>            res = Math.max(res, score(i, rolls));<br>        }<br>        SOPL(DONE());<br>        return res;<br>    }<br> <br> <br>    //===== The methods below are for jkburt's testing only - they contain no "business logic" =====<br> <br>    private String DONE() { return "done at "<br>    ; }<br>    private void SOPL(String s) {<br>    }<br>    private void SOP(String s) {<br>    }<br> <br>}<br> <br> <br>// Powered by FileEdit<br>// Powered by CodeProcessor<br></td>