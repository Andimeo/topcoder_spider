<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;vector&gt;<br>#include &lt;string&gt;<br>#include &lt;stdlib.h&gt;<br>#include &lt;stdio.h&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;math.h&gt;<br>#include &lt;ctype.h&gt;<br> <br>using namespace std;<br> <br>#define Rep(i, b, n) for (int i = (b); i &lt; (n); ++i)<br> <br>class YahtzeeBestScore {<br>public:<br>  int total(string&amp; h)<br>  {<br>    int tot=0;<br>    Rep(i,0,5) tot+=h[i]-'0';<br>    return tot;<br>  }<br> <br>  int three(string&amp; h)<br>  {<br>    int c[6];<br>    Rep(i,0,6) c[i]=0;<br>    Rep(i,0,5) c[h[i]-'0'-1]++;<br>    Rep(i,0,6)<br>      if (c[i]&gt;=3) return total(h);<br>    return 0;<br>  }<br> <br>  int four(string&amp; h)<br>  {<br>    int c[6];<br>    Rep(i,0,6) c[i]=0;<br>    Rep(i,0,5) c[h[i]-'0'-1]++;<br>    Rep(i,0,6)<br>      if (c[i]&gt;=4) return total(h);<br>    return 0;<br>  }<br> <br>  int full(string&amp; h)<br>  {<br>    int c[6];<br>    Rep(i,0,6) c[i]=0;<br>    Rep(i,0,5) c[h[i]-'0'-1]++;<br> <br>    bool b3=false, b2=false, b5=false;<br> <br>    Rep(i,0,6) {<br>      if (c[i]==3) b3=true;<br>      if (c[i]==2) b2=true;<br>      if (c[i]==5) b5=true;<br>    }<br> <br>    if ((b3&amp;&amp;b2)||b5) return 25;<br>    return 0;<br>  }<br> <br>  int small(string&amp; h)<br>  {<br>    int c[6];<br>    Rep(i,0,6) c[i]=0;<br>    Rep(i,0,5) c[h[i]-'0'-1]++;<br> <br>    if (c[0]&gt;0 &amp;&amp; c[1]&gt;0 &amp;&amp; c[2]&gt;0 &amp;&amp; c[3]&gt;0) return 30;<br>    if (c[4]&gt;0 &amp;&amp; c[1]&gt;0 &amp;&amp; c[2]&gt;0 &amp;&amp; c[3]&gt;0) return 30;<br>    if (c[4]&gt;0 &amp;&amp; c[5]&gt;0 &amp;&amp; c[2]&gt;0 &amp;&amp; c[3]&gt;0) return 30;<br>    return 0;<br>  }<br> <br>  int large(string&amp; h)<br>  {<br>    int c[6];<br>    Rep(i,0,6) c[i]=0;<br>    Rep(i,0,5) c[h[i]-'0'-1]++;<br> <br>    if (c[0]&gt;0 &amp;&amp; c[1]&gt;0 &amp;&amp; c[2]&gt;0 &amp;&amp; c[3]&gt;0 &amp;&amp; c[4]&gt;0) return 40;<br>    if (c[5]&gt;0 &amp;&amp; c[1]&gt;0 &amp;&amp; c[2]&gt;0 &amp;&amp; c[3]&gt;0 &amp;&amp; c[4]&gt;0) return 40;<br>    return 0;<br>  }<br> <br>  int yahtzee(string&amp; h)<br>  {<br>    int c[6];<br>    Rep(i,0,6) c[i]=0;<br>    Rep(i,0,5) c[h[i]-'0'-1]++;<br>    Rep(i,0,6)<br>      if (c[i]&gt;=5) return 50;<br>    return 0;<br>  }<br> <br>  int chance(string&amp; h)<br>  {<br>    return total(h);<br>  }<br> <br>  int score(vector&lt;string&gt;&amp; hands, vector&lt;int&gt;&amp; perm)<br>  {<br>    int sc=0;<br>    Rep(i,0,7) {<br>      switch(perm[i]) {<br>      case 0:<br>        sc+=three(hands[i]);<br>        break;<br>      case 1:<br>        sc+=four(hands[i]);<br>        break;<br>      case 2:<br>        sc+=full(hands[i]);<br>        break;<br>      case 3:<br>        sc+=small(hands[i]);<br>        break;<br>      case 4:<br>        sc+=large(hands[i]);<br>        break;<br>      case 5:<br>        sc+=yahtzee(hands[i]);<br>        break;<br>      case 6:<br>        sc+=chance(hands[i]);<br>        break;<br>      }<br>    }<br>    return sc;<br>  }<br> <br>  int permute(vector&lt;string&gt;&amp; hands, vector&lt;int&gt;&amp; perm, int entry, int n)<br>  {<br>    int ret = 0;<br> <br>    for (int i = 0; i &lt; n; i++) {<br>      bool good = true;<br>      if (entry != 0) {<br>        for (int j = entry-1; j &gt;= 0; j--)<br>          if (i == perm[j]) good = false;<br>      }<br>      if (!good) continue;<br> <br>      perm[entry] = i;<br> <br>      if (entry == n-1) {<br>        ret = score(hands, perm);<br>      } else {<br>        ret = max(ret, permute(hands, perm, entry+1, n));<br>      }<br>    }<br> <br>    return ret;<br>  }<br> <br>  int bestLowerScore(vector &lt;string&gt; hands)<br>  {<br>    vector&lt;int&gt; perm(7);<br>    Rep(i,0,7) perm[i]=i;<br>    return permute(hands, perm, 0, 7);<br>  }<br>};<br></td>