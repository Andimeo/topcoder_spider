<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br><br>public class YahtzeeBestScore {<br><br>    int[][] s = new int[7][7];<br><br>  public int bestLowerScore(String[] hands) {<br>        for (int i = 0; i &lt; 7; i++) {<br>            int[] cards = new int[5];<br>            for (int j = 0; j &lt; 5; j++) {<br>                cards[j] = hands[i].toCharArray()[j] - '0';<br>            }<br>            Arrays.sort(cards);<br>            s[i][0] = getScore1(cards);<br>            s[i][1] = getScore2(cards);<br>            s[i][2] = getScore3(cards);<br>            s[i][3] = getScore4(cards);<br>            s[i][4] = getScore5(cards);<br>            s[i][5] = getScore6(cards);<br>            s[i][6] = getScore7(cards);<br>        }<br><br>        return getBestScore(6);<br>  }<br><br>    boolean[] used = new boolean[7];<br><br>    private int getBestScore(int n) {<br>        if (n &lt; 0) return 0;<br>        int best = 0;<br>        for (int i = 0; i &lt; 7; i++) {<br>            if (!used[i]) {<br>                used[i] = true;<br>                int ss = s[i][n] + getBestScore(n - 1);<br>                if (ss &gt; best) best = ss;<br>                used[i] = false;<br>            }<br>        }<br>        return best;<br>    }<br><br>    private int getScore1(int[] cards) {<br>        int s = 0;<br>        for (int i : cards) {<br>            s += i;<br>        }<br>        for (int i : cards) {<br>            int n = 0;<br>            for (int j : cards) {<br>                if (i == j) {<br>                    n++;<br>                }<br>            }<br>            if (n &gt;= 3) return s;<br>        }<br>        return 0;<br>    }<br><br>    private int getScore2(int[] cards) {<br>        int s = 0;<br>        for (int i : cards) {<br>            s += i;<br>        }<br>        for (int i : cards) {<br>            int n = 0;<br>            for (int j : cards) {<br>                if (i == j) {<br>                    n++;<br>                }<br>            }<br>            if (n &gt;= 4) return s;<br>        }<br>        return 0;<br>    }<br><br>    private int getScore3(int[] cards) {<br>        if (cards[0] == cards[1] &amp;&amp; cards[0] == cards[2] &amp;&amp; cards[3] == cards[4] ||<br>                cards[0] == cards[1] &amp;&amp; cards[2] == cards[3] &amp;&amp; cards[2] == cards[4]) {<br>            return 25;<br>        } else {<br>            return 0;<br>        }<br>    }<br><br>    private int getScore4(int[] cards) {<br>        for (int i = 0; i &lt;= 6; i++) {<br>            boolean g = true;<br>            for (int j = 0; j &lt; 4; j++) {<br>                int k = i + j;<br>                boolean ex = false;<br>                for (int q : cards) {<br>                    if (q == k) {<br>                        ex = true;<br>                        break;<br>                    }<br>                }<br>                if (!ex) {<br>                    g = false;<br>                    break;<br>                }<br>            }<br>            if (g) return 30;<br>        }<br>        return 0;<br>    }<br><br>    private int getScore5(int[] cards) {<br>        for (int i = 0; i &lt;= 6; i++) {<br>            boolean g = true;<br>            for (int j = 0; j &lt; 5; j++) {<br>                int k = i + j;<br>                boolean ex = false;<br>                for (int q : cards) {<br>                    if (q == k) {<br>                        ex = true;<br>                        break;<br>                    }<br>                }<br>                if (!ex) {<br>                    g = false;<br>                    break;<br>                }<br>            }<br>            if (g) return 40;<br>        }<br>        return 0;<br>    }<br><br>    private int getScore6(int[] cards) {<br>        if (cards[0] == cards[1] &amp;&amp; cards[0] == cards[2] &amp;&amp;<br>                cards[0] == cards[3] &amp;&amp; cards[0] == cards[4]) {<br>            return 50;<br>        } else {<br>            return 0;<br>        }<br>    }<br><br>    private int getScore7(int[] cards) {<br>        int s = 0;<br>        for (int i : cards) {<br>            s += i;<br>        }<br>        return s;<br>    }<br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by RETester [based on ExampleBuilder]<br>// Powered by CodeProcessor<br></td>