<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;map&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cstring&gt;<br>#include &lt;cassert&gt;<br>#include &lt;set&gt;<br>#include &lt;iostream&gt;<br>#include &lt;sstream&gt;<br>#include &lt;cstddef&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;utility&gt;<br>#include &lt;iterator&gt;<br>#include &lt;numeric&gt;<br>#include &lt;list&gt;<br> <br>using namespace std;<br> <br>typedef vector&lt;int&gt; vi;<br>typedef vector&lt;int&gt;::iterator vi_i;<br>typedef vector&lt;string&gt; vs;<br>typedef vector&lt;string&gt;::iterator vs_i;<br>typedef pair&lt;int, int&gt; pii;<br> <br>template&lt;class T&gt;<br>void splitstr(const string &amp;s, vector&lt;T&gt; &amp;out)<br>{<br>    istringstream in(s);<br>    T tmp;<br> <br>    out.clear();<br>    while (in &gt;&gt; tmp) out.push_back(tmp);<br>}<br> <br>class ExploringEuropa<br>{<br>public:<br>    int travelTime(string surface, int delay);<br>};<br> <br>int ExploringEuropa::travelTime(string surface, int delay)<br>{<br>    vector&lt;int&gt; vents;<br> <br>    for (size_t i = 1; i &lt; surface.length(); i++)<br>        if (surface[i] == 'V') vents.push_back(i);<br>    while (vents.back() - vents.front() &gt; 2 * delay) vents.pop_back();<br>    int ans = INT_MAX;<br>    int cur = vents[0] + delay;<br>    for (size_t i = 0; i &lt; vents.size(); i++)<br>        if (vents[i] &lt; cur)<br>            ans &lt;?= vents[0] + 4 * delay + (cur - vents[i]);<br>        else<br>            ans &lt;?= vents[0] + 4 * delay + 3 * (vents[i] - cur);<br>        ans &lt;?= vents[0] + 4 * delay + abs(vents[0] + delay - vents[0]);<br>    return ans;<br>}<br> <br> <br>// Powered by FileEdit<br></td>