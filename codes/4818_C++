<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;set&gt;<br>#include &lt;map&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;iostream&gt;<br>#include &lt;numeric&gt;<br> <br>using namespace std;<br> <br>typedef vector&lt;int&gt; vi;<br>typedef vector&lt;string&gt; vs;<br>typedef long long int64;<br>#define ALL(t) t.begin(),t.end()<br>#define FOR(i,n) for (int i=0; i&lt;(n); i++)<br> <br>vs split(string s,string t=" ") {<br>  s+=t[0]; vs ans; string c;<br>  FOR(i,s.size()) { int j=0; while (j&lt;t.size() &amp;&amp; s[i]!=t[j]) j++; if (j&lt;t.size()) { if (c.size()) ans.push_back(c); c=""; } else c+=s[i]; }<br>  return ans;<br>}<br> <br>class CaterpillarTree {<br>  public:<br>  #define MAX 60*60<br>  vector&lt;int&gt; t[MAX];<br>  int n,a[MAX];<br>  void dfs(int x,int y=-1) {<br>    a[x]=0;<br>    FOR(i,t[x].size()) if (t[x][i]!=y) {<br>      dfs(t[x][i],x);<br>      a[x]&gt;?=a[t[x][i]];<br>    }<br>    a[x]++;<br>    int cnt=0;<br>    FOR(i,t[x].size()) cnt+=t[x][i]!=y;<br>    if (cnt) a[x]+=cnt-1;<br>  }<br>  int fewestRemovals(vector &lt;string&gt; tree) {<br>    string s=accumulate(ALL(tree),string());<br>    vector&lt;int&gt; c;<br>    c.push_back(0);<br>    n=1;<br>    FOR(i,s.size()) if (s[i]=='0') {<br>      c.pop_back();<br>    } else {<br>      t[c.back()].push_back(n);<br>      t[n].push_back(c.back());<br>      c.push_back(n++);<br>    }<br>    int r=0;<br>    FOR(i,n) {<br>      dfs(i);//cout&lt;&lt;i&lt;&lt;" "&lt;&lt;a[i]&lt;&lt;endl;<br>      r&gt;?=a[i];<br>    }<br>    return n-r;<br>  }<br>};<br> <br>// Powered by PopsEdit<br></td>