<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br><br>public class CaterpillarTree <br>{<br>  String[] T;<br>  List&lt;Node&gt; nodes;<br>  int S, I;<br>  public int fewestRemovals(String[] tree) <br>  {<br>    T = tree;<br>    nodes = new LinkedList&lt;Node&gt;();<br>    Node n = new Node(0, null);<br>    nodes.add(n);<br>    S = 0;<br>    I = -1;<br>    eval(n);<br>    int best = 0;<br>    //    System.out.printf("%d nodes%n", nodes.size());<br>    for (Node node : nodes)<br>      {<br>  //  System.out.printf("%d %d %d%n", node.max1, node.max2, node.more);<br>  best = Math.max(best, node.max1+node.max2+node.more+1);<br>      }<br>    return nodes.size() - best;<br>  }<br><br>  void eval(Node n)<br>  {<br>    //    System.out.printf("eval %d %d%n", S, I);<br>    I++;<br>    if (I &gt;= T[S].length())<br>      {<br>  I = 0;<br>  S++;<br>      }<br>    if (S &gt;= T.length) return;<br>    while (T[S].charAt(I) == '1')<br>      {<br>  Node n2 = new Node(n.max1 + 1, n);<br>  nodes.add(n2);<br>  eval(n2);<br>  n.add(n2);<br>  I++;<br>  if (I &gt;= T[S].length())<br>    {<br>      I = 0;<br>      S++;<br>    }<br>  if (S &gt;= T.length) return;<br>      }<br>  }<br><br>  class Node<br>  {<br>    //    int[] con = new int[250];<br>    int first;<br>    int max1;<br>    int max2;<br>    int more;<br>    Node n1;<br>    Node n2;<br>    public Node(int in, Node n)<br>    {<br>      //      System.out.printf("Created %d%n", in);<br>      //      con[in]++;<br>      max1 = in;<br>      max2 = 0;<br>      first = in;<br>      n1 = n;<br>      more = 0;<br>    }<br><br>    public void add(Node n)<br>    {<br>      int c;<br>      if (n.max1 == n.first)<br>  {<br>    c = n.max2;<br>  }<br>      else<br>  {<br>    c = n.max1;<br>  }<br>      c += n.more + 1;<br>      //      con[c]++;<br>      if (max2 &gt; 0)<br>  {<br>    more++;<br>  }<br>      if (c &gt; max1)<br>  {<br>    max2 = max1;<br>    max1 = c;<br>    n2 = n1;<br>    n1 = n;<br>  } <br>      else if (c &gt; max2)<br>  {<br>    max2 = c;<br>    n2 = n;<br>  }<br>      //      System.out.printf("Adding %d  -- %d %d %d%n", c, max1, max2, more);<br>    }<br>  }<br>}<br><br><br>// Powered by FileEdit<br></td>