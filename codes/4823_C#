<td class="problemText" colspan="8" valign="middle" align="left">
            using System.Collections;<br>using System;<br>  class Pos : IComparable<br>  {<br>//    public int startCount;<br>//    public int nTimes;<br>    public int pos;<br>    public bool isBegin;<br>    #region IComparable ??<br> <br>    public int CompareTo(object obj)<br>    {<br>      Pos r = (Pos)obj;<br>      if(this.pos &gt; r.pos)<br>        return 1;<br>      else if(this.pos == r.pos)<br>        return 0;<br>      else<br>        return -1;<br>    }<br> <br>    #endregion<br>  }<br>public class UnionOfIntervals<br>{<br> <br>  static public int nthElement(int[] lowerBound, int[] upperBound, int n)<br>  {<br>    Pos[] postions = new Pos[lowerBound.Length*2];<br>    int i = 0;<br>    foreach(int l in lowerBound)<br>    {<br>      Pos pos = new Pos();<br>      pos.pos = l;<br>      pos.isBegin = true;<br>      postions[i++] = pos;<br>    }<br>    foreach(int u in upperBound)<br>    {<br>      Pos pos = new Pos();<br>      pos.pos = u + 1;<br>      pos.isBegin = false;<br>      postions[i++] = pos;<br>    }<br>    Array.Sort(postions);<br> <br>    long count = 0;<br>    int nTimes = 1;<br>    int lastPos = postions[0].pos;<br> <br>    int j = 1;<br>    for(;; j++)<br>    {<br>      int pos = postions[j].pos;<br>      long newcount = count + ((long)pos - (long)lastPos) * (long)nTimes;<br> <br>      if(n &lt; newcount)<br>      {<br>        int ret = (int)((long)lastPos + ((long)n - count) / (long)nTimes);<br>        return ret;<br>      }<br>      count = newcount;<br>      if(postions[j].isBegin)<br>        nTimes++;<br>      else<br>        nTimes--;<br>      lastPos = pos;<br>    }<br>    //return 0;<br>  }<br>}<br></td>