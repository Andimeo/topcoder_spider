<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections;<br>using System.Text;<br><br>public class WordGrid {<br>    struct Point {<br>  public int row;<br>  public int col;<br><br>  public Point(int row, int col) {<br>      this.row = row;<br>      this.col = col;<br>  }<br>    }<br><br>    public string[] fillSpaces(string[] grid, string[] words) {<br>  int height = grid.Length;<br>  int width = grid[0].Length;<br>  int m = words.Length;<br><br>  int[,] what = new int[height, width];<br><br>  int n = 0;<br><br>  for (int i = 0; i &lt; height; ++i)<br>      for (int j = 0; j &lt; width; ++j)<br>    if (grid[i][j] == '.') {<br>        what[i, j] = n;<br>        ++n;<br>    }<br><br>  bool[,,,] achieve = new bool[27, 27, 27, m];<br>  int[] ind = new int[100];<br><br>  for (int i = 0; i &lt; height; ++i)<br>      for (int j = 0; j &lt; width; ++j)<br>    for (int di = -1; di &lt;= 1; ++di)<br>        for (int dj = -1; dj &lt;= 1; ++dj)<br>      if (di != 0 || dj != 0) {<br>          int len = 0;<br><br>          int ci = i;<br>          int cj = j;<br><br>          string cur = "";<br><br>          while (ci &gt;= 0 &amp;&amp; ci &lt; height &amp;&amp; cj &gt;= 0 &amp;&amp; cj &lt; width) {<br>        cur += grid[ci][cj];<br>        if (grid[ci][cj] == '.')<br>            ind[len] = what[ci, cj];<br>        ++len;<br><br>        for (int k = 0; k &lt; words.Length; ++k) {<br>            if (words[k].Length == len) {<br>          int m0 = 26;<br>          int m1 = 26;<br>          int m2 = 26;<br><br>          string word = words[k];<br>          bool ok = true;<br>          for (int l = 0; l &lt; len; ++l)<br>              if (cur[l] == '.') {<br>            switch (ind[l]) {<br>                case 0:<br>              m0 = word[l] - 'A';<br>              break;<br>                case 1:<br>              m1 = word[l] - 'A';<br>              break;<br>                case 2:<br>              m2 = word[l] - 'A';<br>              break;<br>            }<br>              } else if (cur[l] != word[l]) {<br>            ok = false;<br>            break;<br>              }<br>          if (ok) {<br>              achieve[m0, m1, m2, k] = true;<br>          }<br>            }<br>        }<br><br>        ci += di;<br>        cj += dj;<br>          }<br>      }<br><br>  string[] res = new string[height];<br><br>  for (int m0 = 0; m0 &lt; 26; ++m0)<br>      for (int m1 = 0; m1 &lt; 26; ++m1)<br>    for (int m2 = 0; m2 &lt; 26; ++m2) {<br>        bool all = true;<br>        for (int k = 0; k &lt; m; ++k) {<br>      bool ok = achieve[m0, m1, m2, k] ||<br>          achieve[26, m1, m2, k] ||  <br>          achieve[m0, 26, m2, k] ||  <br>          achieve[m0, m1, 26, k] ||  <br>          achieve[26, 26, m2, k] ||  <br>          achieve[26, m1, 26, k] ||  <br>          achieve[m0, 26, 26, k] ||  <br>          achieve[26, 26, 26, k];<br>      if (!ok) {<br>          all = false;<br>          break;<br>      }<br>        }<br><br>        if (all) {<br>      for (int i = 0; i &lt; height; ++i) {<br>          string s = "";<br>          for (int j = 0; j &lt; width; ++j)<br>        if (grid[i][j] == '.') {<br>            switch (what[i, j]) {<br>          case 0:<br>              s += (char) (m0 + 'A');<br>              break;<br>          case 1:<br>              s += (char) (m1 + 'A');<br>              break;<br>          case 2:<br>              s += (char) (m2 + 'A');<br>              break;<br>            }<br>        } else s += grid[i][j];<br>          res[i] = s;<br>      }<br>      return res;<br>        }<br>    }<br><br>  return res;  <br>    }<br>}<br><br><br>// Powered by FileEdit<br></td>