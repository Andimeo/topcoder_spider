<td class="problemText" colspan="8" valign="middle" align="left">
            // Powered by radeclipse!<br>import java.util.* ;<br>public class RoundTable {<br>  long[][][][] da = new long[51][7][7][2] ;<br>  long f(int n) {<br>    if (n &lt;= 1)<br>      return 1 ;<br>    return n * f(n-1) ;<br>  }<br>  public long arrangements(int countA, int countB, int chairs, int minDistance) {<br>    da[0][1][0][1] = 1 ;<br>    long s = 0 ;<br>    for (int npos=1; npos&lt;chairs; npos++) {<br>      for (int oldA=1; oldA&lt;=countA; oldA++) {<br>  for (int oldB=0; oldB&lt;=countB; oldB++) {<br>    for (int opos=npos-1; opos&gt;=0; opos--) {<br>      da[npos][oldA+1][oldB][1] +=<br>        da[opos][oldA][oldB][1] ;<br>      da[npos][oldA][oldB+1][0] +=<br>        da[opos][oldA][oldB][0] ;<br>      if (npos - opos &gt;= minDistance) {<br>        da[npos][oldA+1][oldB][1] +=<br>    da[opos][oldA][oldB][0] ;<br>        da[npos][oldA][oldB+1][0] +=<br>    da[opos][oldA][oldB][1] ;<br>      }<br>    }<br>  }<br>      }<br>      s += da[npos][countA][countB][1] ;<br>      if (chairs - npos &gt;= minDistance)<br>  s += da[npos][countA][countB][0] ;<br>    }<br>    return s * chairs * f(countA-1) * f(countB) ;<br>  }<br>}<br></td>