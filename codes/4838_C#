<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections;<br><br>public class DivisiblePermutations {<br>  class State<br>  {<br>    public int[] am;<br><br>    public State(string s)<br>    {<br>      am = new int[10];<br>      for (int i = 0; i &lt; s.Length; ++i)<br>        ++am[s[i] - '0'];<br>    }<br><br>    public State(State old)<br>    {<br>      am = new int[10];<br>      Array.Copy(old.am, am, 10);<br>    }<br><br>    public override bool Equals(object obj)<br>    {<br>      State st = obj as State;<br>      if (st == null)<br>        return false;<br>      for (int i = 0; i &lt; 10; ++i)<br>        if (am[i] != st.am[i])<br>          return false;<br><br>      return true;<br>    }<br><br>    public override int GetHashCode()<br>    {<br>      int ret = 0;<br>      for (int i = 0; i &lt; 10; ++i)<br>        ret = (ret * 31 + am[i]) % 1000009;<br><br>      return ret;<br>    }<br>  }<br><br>  Hashtable am;<br>  int M;<br><br>  void fill(State st)<br>  {<br>    if (am.ContainsKey(st))<br>      return;<br><br>    long[] res = new long[M];<br><br>    bool any = false;<br><br>    for (int i = 0; i &lt; 10; ++i)<br>      if (st.am[i] &gt; 0)<br>      {<br>        any = true;<br>        State next = new State(st);<br>        --next.am[i];<br>        fill(next);<br>        long[] old = (long[]) am[next];<br>        for (int j = 0; j &lt; M; ++j)<br>          res[(j * 10 + i) % M] += old[j];<br>      }<br><br>    if (!any)<br>    {<br>      res[0] = 1;<br>    }<br><br>    am[st] = res;<br>  }<br><br>  public long count(string N, int M) {<br>    this.M = M;<br>    am = new Hashtable();<br>    State start = new State(N);<br>    fill(start);<br>    long[] res = (long[]) am[start];<br>    return res[0];<br>  }<br><br>  <br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003] [modified for C# by Petr]<br>// Powered by CodeProcessor<br></td>