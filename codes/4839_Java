<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br> <br>public class RingImposition {<br>    public class Matrix {<br>        int n;<br>        int[][] a;<br> <br>        public Matrix(int n, boolean b) {<br>            this.n = n;<br>            a = new int[n][n];<br>            if (b) {<br>                for (int i = 0; i &lt; n; i++) {<br>                    a[i][i] = 1;<br>                    a[i][(i + 1) % n] = 1;<br>                }<br>            } else {<br>                for (int i = 0; i &lt; n; i++) {<br>                    a[i][i] = 1;<br>                }<br>            }<br>        }<br> <br>        public Matrix(int n, int[][] a) {<br>            this.n = n;<br>            this.a = a;<br>        }<br> <br>        public Matrix mul(Matrix m) {<br>            int[][] c = new int[n][n];<br>            for (int i = 0; i &lt; n; i++) {<br>                for (int j = 0; j &lt; n; j++) {<br>                    for (int k = 0; k &lt; n; k++) {<br>                        c[i][j] = (c[i][j] + a[i][k] * m.a[k][j]) % 100;<br>                    }<br>                }<br>            }<br>            return new Matrix(n, c);<br>        }<br> <br>        public Matrix pow(int b) {<br>            Matrix r = new Matrix(n, false);<br>            Matrix a = this;<br>            while (b &gt; 0) {<br>                if (b % 2 == 1) {<br>                    r = r.mul(a);<br>                }<br>                a = a.mul(a);<br>                b = b / 2;<br>            }<br>            return r;<br>        }<br>    }<br> <br>    public int[] predict(int[] seq, int N) {<br>        int n = seq.length;<br>        Matrix m = new Matrix(n, true);<br>        m = m.pow(N);<br>        int[] q = new int[n];<br>        for (int i = 0; i &lt; n; i++) {<br>            for (int j = 0; j &lt; n; j++) {<br>                q[i] = (q[i] + m.a[i][j] * seq[j]) % 100;<br>            }<br>        }<br>        return q;<br>    }<br> <br> <br>}<br> <br> <br>// Powered by PopsEdit<br> <br>// Powered by CodeProcessor<br></td>