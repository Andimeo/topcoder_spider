<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br> <br>public class DrawPlanar {<br>    int n;<br>    int[] xp;<br>    int[] yp;<br>    boolean[][] d;<br>    int[] deg;<br>    boolean[][] b;<br>    int w;<br>    int h;<br>    int[] xx;<br>    int[] yy;<br>    Random r;<br> <br>    boolean bt(int p) {<br>        if (p == n) {<br>            return true;<br>        }<br>        for (int q = 0; q &lt; (w + 1) * (h + 1); q++) {<br>            int x = xx[q];<br>            int y = yy[q];<br> <br>            if (!b[x][y]) {<br>                boolean ok = true;<br>                outer:<br>                for (int i = 0; i &lt; p; i++) if (d[i][p]) {<br>                    for (int j = 0; j &lt; p; j++) {<br>                        for (int k = 0; k &lt; j; k++) if (d[j][k]) {<br>                            if (intersect(xp[j], yp[j], xp[k], yp[k], xp[i], yp[i], x, y)) {<br>                                ok = false;<br>                                break outer;<br>                            }<br>                        }<br>                    }<br>                }<br>                if (ok) {<br>                    b[x][y] = true;<br>                    xp[p] = x;<br>                    yp[p] = y;<br>                    ok = bt(p + 1);<br>                    b[x][y] = false;<br>                    if (ok) {<br>                        return true;<br>                    }<br>                }<br>            }<br>        }<br>        return false;<br>    }<br> <br>    boolean fits(int wid, int hei) {<br>        w = wid;<br>        h = hei;<br> <br>        boolean[][] u = new boolean[w + 1][h + 1];<br>        for (int i = 0; i &lt; (w + 1) * (h + 1); i++) {<br>            int x, y;<br>            do {<br>                x = r.nextInt(w + 1);<br>                y = r.nextInt(h + 1);<br>            } while (u[x][y]);<br>            u[x][y] = true;<br>            xx[i] = x;<br>            yy[i] = y;<br>        }<br> <br> <br>        boolean res = bt(0);<br>        return res;<br>    }<br> <br>    boolean ons(int x1, int y1, int x2, int y2, int x3, int y3) {<br>        return<br>                (x1 == x3 || x1 &lt; x2 &amp;&amp; x2 &lt; x3 || x3 &lt; x2 &amp;&amp; x2 &lt; x1) &amp;&amp;<br>                (y1 == y3 || y1 &lt; y2 &amp;&amp; y2 &lt; y3 || y3 &lt; y2 &amp;&amp; y2 &lt; y1);<br>    }<br> <br>    boolean onw(int x1, int y1, int x2, int y2, int x3, int y3) {<br>        return<br>                (x1 &lt;= x2 &amp;&amp; x2 &lt;= x3 || x3 &lt;= x2 &amp;&amp; x2 &lt;= x1) &amp;&amp;<br>                (y1 &lt;= y2 &amp;&amp; y2 &lt;= y3 || y3 &lt;= y2 &amp;&amp; y2 &lt;= y1);<br>    }<br> <br>    boolean intersect(int x1, int y1, int x2, int y2, int x3, int y3, int x4, int y4) {<br>        int a1 = y1 - y2;<br>        int b1 = x2 - x1;<br>        int c1 = a1 * x1 + b1 * y1;<br>        int a2 = y3 - y4;<br>        int b2 = x4 - x3;<br>        int c2 = a2 * x3 + b2 * y3;<br>        int d = a1 * b2 - a2 * b1;<br>        if (d == 0) {<br>            if (c1 * b2 - c2 * b1 == 0 &amp;&amp; a1 * c2 - a2 * c1 == 0) {<br>                return<br>                        ons(x1, y1, x3, y3, x2, y2) ||<br>                        ons(x1, y1, x4, y4, x2, y2) ||<br>                        ons(x3, y3, x1, y1, x4, y4) ||<br>                        ons(x3, y3, x2, y2, x4, y4);<br>            } else {<br>                return false;<br>            }<br>        } else {<br>            int xc = c1 * b2 - c2 * b1;<br>            int yc = a1 * c2 - a2 * c1;<br>            if (ons(x1 * d, y1 * d, xc, yc, x2 * d, y2 * d) &amp;&amp; onw(x3 * d, y3 * d, xc, yc, x4 * d, y4 * d) ||<br>                onw(x1 * d, y1 * d, xc, yc, x2 * d, y2 * d) &amp;&amp; ons(x3 * d, y3 * d, xc, yc, x4 * d, y4 * d)) {<br>                return true;<br>            }<br>        }<br>        return false;<br>    }<br> <br>    public int minArea(String[] graph) {<br>        n = graph.length;<br>        boolean[][] d1 = new boolean[n][n];<br>        deg = new int[n];<br>        for (int i = 0; i &lt; n; i++) {<br>            for (int j = 0; j &lt; n; j++) {<br>                d1[i][j] = graph[i].charAt(j) == 'T';<br>                if (d1[i][j]) {<br>                    deg[i]++;<br>                }<br>            }<br>        }<br> <br>        boolean[] u = new boolean[n];<br>        int[] at = new int[n];<br>        for (int i = 0; i &lt; n; i++) {<br>            int j = 0;<br>            for (j = 0; j &lt; n; j++) {<br>                if (!u[j]) {<br>                    break;<br>                }<br>            }<br>            for (int k = j + 1; k &lt; n; k++) {<br>                if (!u[k] &amp;&amp; deg[k] &gt; deg[j]) {<br>                    j = k;<br>                }<br>            }<br>            at[i] = j;<br>            u[j] = true;<br>        }<br> <br>        d = new boolean[n][n];<br>        for (int i = 0; i &lt; n; i++) {<br>            for (int j = 0; j &lt; n; j++) {<br>                d[i][j] = d1[at[i]][at[j]];<br>            }<br>        }<br> <br>        xp = new int[n];<br>        yp = new int[n];<br> <br>        b = new boolean[n][n];<br> <br>        xx = new int[n * n];<br>        yy = new int[n * n];<br>        r = new Random(1984);<br> <br>        int min = 49;<br>        for (int i = 0; i &lt; n; i++) {<br>            for (int j = 0; j &lt;= i; j++) {<br>                if (i * j &lt; min &amp;&amp; fits(i, j)) {<br>                    System.out.println(i + " " + j);<br>                    min = i * j;<br>                }<br>            }<br>        }<br>        return min;<br>    }<br> <br>}<br> <br> <br>// Powered by PopsEdit<br> <br>// Powered by CodeProcessor<br></td>