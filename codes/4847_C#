<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections;<br><br>public class Smooshing {<br>  class Identifier : IComparable<br>  {<br>    public string name;<br>    public int firstOccurence;<br>    public int amount;<br><br>    public Identifier(string name, int firstOccurence, int amount)<br>    {<br>      this.name = name;<br>      this.firstOccurence = firstOccurence;<br>      this.amount = amount;<br>    }<br><br>    public int CompareTo(object obj)<br>    {<br>      Identifier id = (Identifier) obj;<br>      if (this.amount &lt; id.amount)<br>        return 1;<br>      else if (this.amount &gt; id.amount)<br>        return -1;<br>      else if (this.firstOccurence &lt; id.firstOccurence)<br>        return -1;<br>      else if (this.firstOccurence &gt; id.firstOccurence)<br>        return 1;<br>      else<br>        return 0;<br>    }<br>  }<br><br>  Hashtable allIDs;<br><br>  void gotId(string name, int at)<br>  {<br>    if (name == "")<br>      return;<br>    if (name[0] &lt; 'A' || name[0] &gt; 'Z')<br>      return;<br>    if (allIDs.ContainsKey(name))<br>    {<br>      Identifier id = (Identifier) allIDs[name];<br>      ++id.amount;<br>    }<br>    else<br>      allIDs[name] = new Identifier(name, at, 1);<br>  }<br><br>  class Trie<br>  {<br>    public Trie[] jump = new Trie[52];<br><br>    public Trie()<br>    {<br>      for (int i = 0; i &lt; 52; ++i)<br>        jump[i] = null;<br>    }<br>  }<br><br>  int decode(char ch)<br>  {<br>    if (ch &gt;= 'A' &amp;&amp; ch &lt;= 'Z')<br>      return ch - 'A';<br>    else<br>      return 26 + (ch - 'a');<br>  }<br>  <br>  public int savings(string[] program) {<br>    allIDs = new Hashtable();<br>    int at = 0;<br>    foreach (string preLine in program)<br>    {<br>      string line = preLine + "!";<br>      string current = "";<br>      for (int i = 0; i &lt; line.Length; ++i)<br>      {<br>        char ch = line[i];<br>        if ((ch &gt;= 'A' &amp;&amp; ch &lt;= 'Z') || (ch &gt;= 'a' &amp;&amp; ch &lt;= 'z'))<br>        {<br>          current += ch;<br>        }<br>        else<br>        {<br>          gotId(current, at);<br>          current = "";<br>        }<br>        ++at;<br>      }<br>    }<br>    Identifier[] ids = new Identifier[allIDs.Count];<br>    allIDs.Values.CopyTo(ids, 0);<br>    Array.Sort(ids);<br>    Trie root = new Trie();<br>    int res = 0;<br>    foreach (Identifier id in ids)<br>    {<br>      Trie cur = root;<br>      int len = 0;<br>      for (int i = 0; true; i = (i + 1) % id.name.Length)<br>      {<br>        ++len;<br>        int ch = decode(id.name[i]);<br>        if (cur.jump[ch] == null)<br>        {<br>          cur.jump[ch] = new Trie();<br>          break;<br>        } else cur = cur.jump[ch];<br>      }<br>      res += (id.name.Length - len) * id.amount;<br>    }<br>    return res;<br>  }<br><br>  <br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003] [modified for C# by Petr]<br>// Powered by CodeProcessor<br></td>