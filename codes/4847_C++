<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;sstream&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;set&gt;<br>#include &lt;map&gt;<br>#include &lt;queue&gt;<br>using namespace std;<br> <br>#define si size()<br>typedef vector&lt;int&gt; vi;<br>typedef vector&lt;string&gt; vs;<br>typedef long long ii;<br>#define rev(A) reverse((A).begin(), (A).end())<br>#define s(A) sort((A).begin(), (A).end())<br>#define mp make_pair<br> <br>//----------------------------<br> <br>map&lt;string,pair&lt;int,int&gt; &gt; id;<br>set&lt;string&gt; used;<br>class Smooshing {<br>  public:<br>  int savings(vector &lt;string&gt; a) {<br>    for (int i = 0; i &lt; a.si; i++) {<br>      for (int j = 0; j &lt; a[i].si; j++) {<br>        if (a[i][j] &gt;= 'a' &amp;&amp; a[i][j] &lt;= 'z') continue;<br>        if (a[i][j] &gt;= 'A' &amp;&amp; a[i][j] &lt;= 'Z') continue;<br>        a[i][j] = ' ';<br>      }<br>      stringstream S(a[i]);<br>      string x;<br>      int n = 0;<br>      while (S &gt;&gt; x) {<br>        if (x[0] &gt;= 'A' &amp;&amp; x[0] &lt;= 'Z') {<br>          if (!id.count(x)) {<br>            id[x] = make_pair(-1, 1000*i + n);<br>          } else {<br>            id[x].first--;<br>          }<br>        }<br>        n++;<br>      }<br>    }<br>    vector&lt;pair&lt;pair&lt;int,int&gt;, string&gt; &gt; V;<br>    for (map&lt;string,pair&lt;int,int&gt; &gt;::iterator i = id.begin(); i != id.end(); ++i) V.push_back(mp(i-&gt;second, i-&gt;first));<br>    s(V);<br>    int save = 0;<br>    for (int i = 0; i &lt; V.si; i++) {<br>      string curr;<br>      int j = 0;<br>      while (1) {<br>        curr += V[i].second[j];<br>        j++;<br>        if (j == V[i].second.si) j = 0;<br>        if (used.find(curr) == used.end()) {<br>          used.insert(curr);<br>          int each = V[i].second.si - curr.si;<br>          save += each * -V[i].first.first;<br>          break;<br>        }<br>      }<br>    }<br>    return save;<br>  }<br>};<br> <br>// Powered by PopsEdit<br></td>