<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections;<br><br>public class MatArith <br>{<br>  decimal[,] parse(string[] x)<br>  {<br>    int r = x.Length;<br>    int c = x[0].Split(' ').Length;<br><br>    decimal[,] w = new decimal[r, c];<br><br>    for (int ri = 0; ri &lt; x.Length; ri++)<br>    {<br>      string[] s = x[ri].Split(' ');<br><br>      for (int ci = 0; ci &lt; s.Length; ci++)<br>        w[ri, ci] = decimal.Parse(s[ci]);<br>    }<br><br>    return w;<br>  }<br><br>  string[] unparse (decimal[,] x)<br>  {<br>    int r = x.GetUpperBound(0) + 1;<br>    int c = x.GetUpperBound(1) + 1;<br><br>    string[] w = new string[r];<br><br>    for (int ri = 0; ri &lt; r; ri++)<br>      for (int ci = 0; ci &lt; c; ci++)<br>        w[ri] += (ci &gt; 0 ? " " : "") + x[ri, ci];<br><br>    return w;<br>  }<br><br>  public decimal[,] add (decimal[,] a, decimal[,] b)<br>  {<br>    int r = a.GetUpperBound(0) + 1;<br>    int c = a.GetUpperBound(1) + 1;<br><br>    if (r != b.GetUpperBound(0) + 1 || c != b.GetUpperBound(1) + 1)<br>      throw new Exception();<br><br>    decimal[,] w = new decimal[r, c];<br><br>    for (int ri = 0; ri &lt; r; ri++)<br>      for (int ci = 0; ci &lt; c; ci++)<br>      {<br>        w[ri, ci] = a[ri, ci] + b[ri, ci];<br><br>        if (w[ri, ci] &lt; int.MinValue || w[ri, ci] &gt; int.MaxValue)<br>          throw new Exception();<br>      }<br><br>    return w;<br>  }<br><br>  public decimal[,] mul (decimal[,] a, decimal[,] b)<br>  {<br>    int ar = a.GetUpperBound(0) + 1;<br>    int ac = a.GetUpperBound(1) + 1;<br>    int br = b.GetUpperBound(0) + 1;<br>    int bc = b.GetUpperBound(1) + 1;<br><br>    if (ac != br)<br>      throw new Exception();<br><br>    decimal[,] w = new decimal[ar, bc];<br><br>    for (int i = 0; i &lt; ar; i++)<br>      for (int j = 0; j &lt; bc; j++)<br>      {<br>        for (int k = 0; k &lt; ac; k++)<br>        {<br>          w[i, j] += a[i, k] * b[k, j];<br>        }<br><br>        if (w[i, j] &lt; int.MinValue || w[i, j] &gt; int.MaxValue)<br>          throw new Exception();<br>      }<br><br>    return w;<br>  }<br><br>  public decimal[,] calculate (decimal[,] a, decimal[,] b, decimal[,] c, string e)<br>  {<br>    switch (e)<br>    {<br>      case "A":<br>        return a;<br>      case "B":<br>        return b;<br>      case "C":<br>        return c;<br>      default:<br>        int p = e.LastIndexOf('+');<br><br>        if (p &gt;= 0)<br>          return add(calculate(a, b, c, e.Substring(0, p)), calculate(a, b, c, e.Substring(p + 1)));<br><br>        p = e.LastIndexOf('*');<br>  <br>        return mul(calculate(a, b, c, e.Substring(0, p)), calculate(a, b, c, e.Substring(p + 1)));<br>    }<br>  }<br><br>  public string[] calculate (string[] A, string[] B, string[] C, string equation) <br>  {<br>    decimal[,] a = parse(A);<br>    decimal[,] b = parse(B);<br>    decimal[,] c = parse(C);<br><br>    try<br>    {<br>      return unparse(calculate(a, b, c, equation));<br>    }<br>    catch (Exception e)<br>    {<br>      return new string[0];<br>    }<br>  }<br><br>  public static void Main ()<br>  {<br>    MatArith m = new MatArith();<br><br>    /*<br>    Code.print(m.calculate(new string[] {"1 2 3","2 3 4"}, new string[] {"1 2","3 4","5 6"}, new string[] {"1"}, "A*B"));<br>    Code.print(m.calculate(new string[] {"1 2 3","2 3 4"}, new string[] {"1 2","3 4","5 6"}, new string[] {"1"}, "A+B+C"));<br>    Code.print(m.calculate(new string[] {"3 5 7","5 4 3","-2 3 2"}, new string[] {"3"}, new string[] {"1 1 1","2 5 2","3 5 -3"}, "A+C"));<br>    Code.print(m.calculate(new string[] {"10 0","0 0"}, new string[] {"0"}, new string[] {"0"}, "A*A*A*A*A*A*A*A*A"));<br>    Code.print(m.calculate(new string[] {"10 0","0 0"}, new string[] {"0"}, new string[] {"0"}, "A*A*A*A*A*A*A*A*A*A"));<br>    //Code.print(m.calculate(new string[], new string[], new string[], ));<br>    //Code.print(m.calculate(new string[], new string[], new string[], ));<br>    //Code.print(m.calculate(new string[], new string[], new string[], ));<br>    //Code.print(m.calculate(new string[], new string[], new string[], ));<br>    //Code.print(m.calculate(new string[], new string[], new string[], ));<br>    */<br>  }<br>}<br></td>