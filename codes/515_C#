<td class="problemText" colspan="8" valign="middle" align="left">
            using System; using System.Collections; public class SameGame { public int getScore(string[] board, string order) {<br>X = board[0].Length;<br>Y = board.Length;<br>b = new char[X,Y];<br>int i,j;<br>for (i=0; i&lt;X; i++) for (j=0; j&lt;Y; j++) b[i,j] = board[j][i];<br> <br>visited = new int[X,Y];<br>int score = 0;<br>//int loops = 0;<br>while (true)<br> {<br> // loops++; if (loops &gt; 999) break; // ***<br> <br> int[] bestLoc = new int[26];<br> int[] bestSize = new int[26];<br> phase++;<br> for (j=0; j&lt;Y; j++) for (i=0; i&lt;X; i++) if (visited[i,j] != phase &amp;&amp; b[i,j] != ' ')<br>  {<br>  int flood = Flood(i,j,false);<br>  int cint = (int) b[i,j] - (int)'A';<br>  if ( (flood &lt; bestSize[cint] || bestSize[cint] == 0)<br>       &amp;&amp; flood &gt; 1 )<br>   {<br>   bestSize[cint] = flood;<br>   bestLoc[cint] = i*999 + j;<br>   }<br>  }<br> <br> bool adv = false;<br> foreach (char c in order)<br>  {<br>  int cint = (int)c - (int)'A';<br>  if (bestSize[cint] &gt; 0)<br>   {<br>   score += (bestSize[cint] * (bestSize[cint]-1)) / 2;<br> <br>   phase++;<br>   i = bestLoc[cint] / 999;<br>   j = bestLoc[cint] % 999;<br>   Flood(i,j,true);<br>   <br>   i=0;<br>   while (i&lt;X)<br>    {<br>    int j2 = Y-1;<br>    for (j=Y-1; j&gt;=0; j--)<br>     if (b[i,j] != ' ')<br>      b[i,j2--] = b[i,j];<br> <br>    while (j2 &gt;= 0) { b[i,j2--] = ' '; }<br> <br>    if (b[i,Y-1] == ' ')<br>     {<br>     X--;<br>     for (int i2=i; i2&lt;X; i2++)<br>      for (j=0; j&lt;Y; j++)<br>       b[i2,j] = b[i2+1,j];<br>     }<br>    else<br>     i++;<br>    }<br>/*<br>   Console.WriteLine();<br>   for (j=0; j&lt;Y; j++)<br>    {<br>    for (i=0; i&lt;X; i++) Console.Write(b[i,j]);<br>    Console.WriteLine("!");<br>    }<br>*/<br>   adv = true;<br>   break;<br>   }<br>  }<br> <br> if (!adv) break;<br> }<br> <br>if (X == 0) score *= 4;<br>return score;<br>}<br> <br>int Flood(int x, int y, bool kill)<br>{<br>int x0=x, y0=y;<br>int toDo = 1;<br>int done = 0;<br>xs[0] = x;<br>ys[0] = y;<br>visited[x,y] = phase;<br>char c = b[x,y];<br>if (kill) b[x0,y0] = ' ';<br>while (done &lt; toDo)<br> {<br> x = xs[done]; y = ys[done]; done++;<br> <br> if (x &gt; 0 &amp;&amp; visited[x-1,y] != phase &amp;&amp; b[x-1,y] == c) { visited[x-1,y] = phase; xs[toDo] = x-1; ys[toDo] = y; toDo++; if (kill) b[x-1,y] = ' '; }<br> if (x &lt; X-1 &amp;&amp; visited[x+1,y] != phase &amp;&amp; b[x+1,y] == c) { visited[x+1,y] = phase; xs[toDo] = x+1; ys[toDo] = y; toDo++; if (kill) b[x+1,y] = ' '; }<br> if (y &gt; 0 &amp;&amp; visited[x,y-1] != phase &amp;&amp; b[x,y-1] == c) { visited[x,y-1] = phase; xs[toDo] = x; ys[toDo] = y-1; toDo++; if (kill) b[x,y-1] = ' '; }<br> if (y &lt; Y-1 &amp;&amp; visited[x,y+1] != phase &amp;&amp; b[x,y+1] == c) { visited[x,y+1] = phase; xs[toDo] = x; ys[toDo] = y+1; toDo++; if (kill) b[x,y+1] = ' '; }<br> }<br> <br>// Console.WriteLine("Flood({0},{1},{2}): returning {3}", x0, y0, kill, done);<br>return done;<br>} // Flood<br> <br>int X,Y;<br>char[,] b;<br>int[,] visited;<br>int[] xs = new int[2500];<br>int[] ys = new int[2500];<br>int phase = 1;<br>}<br></td>