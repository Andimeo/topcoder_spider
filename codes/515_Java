<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>public class SameGame {<br>  int total;<br>  <br>  public int getScore(String[] board, String order) {<br>    char[][] bb = new char[board.length][];<br>    for (int i = 0; i &lt; bb.length; ++i) {<br>      bb[i] = board[i].toCharArray();<br>    }<br>    while (true) {<br>      if (board.length == 0) return 4 * total;    <br>      int bestCC = 10000;<br>      int bestG = 10000;<br>      int bestR = 0;<br>      int bestC = 0;<br>      for (int r = 0; r &lt; bb.length; ++r) {<br>        for (int c = 0; c &lt; bb[0].length; ++c) {<br>          char h = bb[r][c];<br>          if (h == ' ') continue;<br>          int cc = order.indexOf(bb[r][c]);<br>          if (r &gt; 0 &amp;&amp; bb[r-1][c] == h) continue;<br>          if (c &gt; 0 &amp;&amp; bb[r][c-1] == h) continue;<br>          int gg = groupSize(bb, h, r, c, '#');<br>          groupSize(bb, '#', r, c, h);<br>          if (gg &lt; 2) continue;<br>          if (cc &lt; bestCC || (cc == bestCC &amp;&amp; gg &lt; bestG)) {<br>            bestCC = cc;<br>            bestG = gg;<br>            bestR = r;<br>            bestC = c;<br>          }<br>        }<br>      }<br>      if (bestCC == 10000) return total;<br>      char h = bb[bestR][bestC];<br>      int n = groupSize(bb, bb[bestR][bestC], bestR, bestC, ' ');<br>      total += (n * (n-1)) / 2;<br>      <br>//      System.out.println("removed " + h + " x " + n);<br>      pr(bb);<br>      <br>      for (int c = 0; c &lt; bb[0].length; ++c) {<br>        int d = bb.length - 1;<br>        for (int s = bb.length - 1; s &gt;= 0; --s) {<br>          if (bb[s][c] != ' ') {<br>            bb[d--][c] = bb[s][c];<br>          }<br>        }<br>        while (d &gt;= 0) {<br>          bb[d--][c] = ' ';<br>        }<br>      }<br>      <br>      pr(bb);<br>      <br>      LOOP: while (true) {<br>        for (int c = 0; c &lt; bb[0].length; ++c) {<br>          if (bb[0][c] != ' ') break LOOP;<br>        }<br>        char[][] nn = new char[bb.length-1][];<br>        System.arraycopy(bb, 1, nn, 0, nn.length);<br>        bb = nn;<br>        if (bb.length == 0) return total * 4;<br>      }<br>      <br>      pr(bb);<br>      <br>      for (int c = bb[0].length - 1; c &gt;= 0; --c) {<br>        boolean okay = true;<br>        for (int r = 0; r &lt; bb.length; ++r) {<br>          if (bb[r][c] != ' ') { okay = false; break; }<br>        }<br>        if (okay) {<br>          for (int r = 0; r &lt; bb.length; ++r) {<br>            System.arraycopy(bb[r], c + 1, bb[r], c, bb[0].length - c - 1);<br>            bb[r][bb[0].length-1] = ' ';<br>          }<br>        }<br>      }<br>      pr(bb);<br>    }<br>  }<br>  <br>  void pr(char[][] bb) {<br>//    for (int i = 0; i &lt; bb.length; ++i) System.out.println(new String(bb[i]));<br>//    System.out.println();<br>  }<br>  <br>  int groupSize(char[][] bb, char s, int r, int c, char after)<br>  {<br>    if (r &lt; 0 || r &gt;= bb.length) return 0;<br>    if (c &lt; 0 || c &gt;= bb[0].length) return 0;<br>    if (bb[r][c] != s) return 0;<br>    try {<br>      bb[r][c] = '\0';<br>      int g = 1 + groupSize(bb, s, r - 1, c, after);<br>      g += groupSize(bb, s, r + 1, c, after);<br>      g += groupSize(bb, s, r, c + 1, after);<br>      g += groupSize(bb, s, r, c - 1, after);<br>      return g;<br>    }<br>    finally {<br>      bb[r][c] = after;<br>    }<br>  }<br>  <br>  public final static void main(String[] args)<br>  {<br>    try {<br>      validateExample("1", new SameGame().getScore(new String[] {"RBB",  "RRR",  "RBB"},"RB"), 64, "getScore(new String[] {\"RBB\",  \"RRR\",  \"RBB\"},\"RB\")");<br>      validateExample("2", new SameGame().getScore(new String[] {"ABCD",  "ABCD",  "ABCD",  "ABCD"},"ABCD"), 96, "getScore(new String[] {\"ABCD\",  \"ABCD\",  \"ABCD\",  \"ABCD\"},\"ABCD\")");<br>      validateExample("3", new SameGame().getScore(new String[] {"ABCD"},"ABCD"), 0, "getScore(new String[] {\"ABCD\"},\"ABCD\")");<br>      validateExample("4", new SameGame().getScore(new String[] {"ACCAA",  "ABAAA",  "ABBBA",  "AAACD"},"EABCD"), 28, "getScore(new String[] {\"ACCAA\",  \"ABAAA\",  \"ABBBA\",  \"AAACD\"},\"EABCD\")");<br>      validateExample("5", new SameGame().getScore(new String[] {"ABABABABABABABABABAB",  "ABABABABABABABABABAB",  "CDCDCDCDCDCDCDCDCDCD",  "CDCDCDCDCDCDCDCDCDCD",  "EFEFEFEFEFEFEFEFEFEF",  "EFEFEFEFEFEFEFEFEFEF",  "GHGHGHGHGHGHGHGHGHGH",  "GHGHGHGHGHGHGHGHGHGH",  "IJIJIJIJIJIJIJIJIJIJ",  "IJIJIJIJIJIJIJIJIJIJ",  "KLKLKLKLKLKLKLKLKLKL",  "KLKLKLKLKLKLKLKLKLKL",  "MNMNMNMNMNMNMNMNMNMN",  "MNMNMNMNMNMNMNMNMNMN",  "OPOPOPOPOPOPOPOPOPOP",  "OPOPOPOPOPOPOPOPOPOP",  "QRQRQRQRQRQRQRQRQRQR",  "QRQRQRQRQRQRQRQRQRQR",  "STSTSTSTSTSTSTSTSTST",  "STSTSTSTSTSTSTSTSTST",  "UVUVUVUVUVUVUVUVUVUV",  "UVUVUVUVUVUVUVUVUVUV",  "WXWXWXWXWXWXWXWXWXWX",  "WXWXWXWXWXWXWXWXWXWX",  "YZYZYZYZYZYZYZYZYZYZ",  "YZYZYZYZYZYZYZYZYZYZ",  "WXWXWXWXWXWXWXWXWXWX",  "WXWXWXWXWXWXWXWXWXWX",  "UVUVUVUVUVUVUVUVUVUV",  "UVUVUVUVUVUVUVUVUVUV",  "STSTSTSTSTSTSTSTSTST",  "STSTSTSTSTSTSTSTSTST",  "MNMNMNMNMNMNMNMNMNMN",  "MNMNMNMNMNMNMNMNMNMN",  "QRQRQRQRQRQRQRQRQRQR",  "QRQRQRQRQRQRQRQRQRQR",  "OPOPOPOPOPOPOPOPOPOP",  "OPOPOPOPOPOPOPOPOPOP",  "KLKLKLKLKLKLKLKLKLKL",  "KLKLKLKLKLKLKLKLKLKL",  "IJIJIJIJIJIJIJIJIJIJ",  "IJIJIJIJIJIJIJIJIJIJ",  "GHGHGHGHGHGHGHGHGHGH",  "GHGHGHGHGHGHGHGHGHGH",  "EFEFEFEFEFEFEFEFEFEF",  "EFEFEFEFEFEFEFEFEFEF",  "CDCDCDCDCDCDCDCDCDCD",  "CDCDCDCDCDCDCDCDCDCD",  "ABABABABABABABABABAB",  "ABABABABABABABABABAB"},"ABCDEFGHIJKLMNOPQRSTUVWXYZ"), 2720, "getScore(new String[] {\"ABABABABABABABABABAB\",  \"ABABABABABABABABABAB\",  \"CDCDCDCDCDCDCDCDCDCD\",  \"CDCDCDCDCDCDCDCDCDCD\",  \"EFEFEFEFEFEFEFEFEFEF\",  \"EFEFEFEFEFEFEFEFEFEF\",  \"GHGHGHGHGHGHGHGHGHGH\",  \"GHGHGHGHGHGHGHGHGHGH\",  \"IJIJIJIJIJIJIJIJIJIJ\",  \"IJIJIJIJIJIJIJIJIJIJ\",  \"KLKLKLKLKLKLKLKLKLKL\",  \"KLKLKLKLKLKLKLKLKLKL\",  \"MNMNMNMNMNMNMNMNMNMN\",  \"MNMNMNMNMNMNMNMNMNMN\",  \"OPOPOPOPOPOPOPOPOPOP\",  \"OPOPOPOPOPOPOPOPOPOP\",  \"QRQRQRQRQRQRQRQRQRQR\",  \"QRQRQRQRQRQRQRQRQRQR\",  \"STSTSTSTSTSTSTSTSTST\",  \"STSTSTSTSTSTSTSTSTST\",  \"UVUVUVUVUVUVUVUVUVUV\",  \"UVUVUVUVUVUVUVUVUVUV\",  \"WXWXWXWXWXWXWXWXWXWX\",  \"WXWXWXWXWXWXWXWXWXWX\",  \"YZYZYZYZYZYZYZYZYZYZ\",  \"YZYZYZYZYZYZYZYZYZYZ\",  \"WXWXWXWXWXWXWXWXWXWX\",  \"WXWXWXWXWXWXWXWXWXWX\",  \"UVUVUVUVUVUVUVUVUVUV\",  \"UVUVUVUVUVUVUVUVUVUV\",  \"STSTSTSTSTSTSTSTSTST\",  \"STSTSTSTSTSTSTSTSTST\",  \"MNMNMNMNMNMNMNMNMNMN\",  \"MNMNMNMNMNMNMNMNMNMN\",  \"QRQRQRQRQRQRQRQRQRQR\",  \"QRQRQRQRQRQRQRQRQRQR\",  \"OPOPOPOPOPOPOPOPOPOP\",  \"OPOPOPOPOPOPOPOPOPOP\",  \"KLKLKLKLKLKLKLKLKLKL\",  \"KLKLKLKLKLKLKLKLKLKL\",  \"IJIJIJIJIJIJIJIJIJIJ\",  \"IJIJIJIJIJIJIJIJIJIJ\",  \"GHGHGHGHGHGHGHGHGHGH\",  \"GHGHGHGHGHGHGHGHGHGH\",  \"EFEFEFEFEFEFEFEFEFEF\",  \"EFEFEFEFEFEFEFEFEFEF\",  \"CDCDCDCDCDCDCDCDCDCD\",  \"CDCDCDCDCDCDCDCDCDCD\",  \"ABABABABABABABABABAB\",  \"ABABABABABABABABABAB\"},\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\")");<br>    } catch (Exception e) {<br>      System.out.println(e);<br>      e.printStackTrace(System.out);<br>    }<br>  }<br> <br>  private static void validateExample(String exampleNum, int returned, int expected, String methodInvocation) {<br>    print(exampleNum);<br>    print("  ");<br>    if (!eq(returned,expected)) {<br>      print("FAIL");<br>    } else {<br>      print("SUCCESS");<br>    }<br>    print(" ");  <br>    print(methodInvocation);<br>    print("\tGot:[");<br>    print(returned);<br>    print("]\t");<br>    print("Expected:[");<br>    print(expected);<br>    print("]");<br>    print("\n");<br>  }<br> <br>  public static void print(boolean a) {<br>    System.out.print(a);<br>  }<br> <br>  public static void print(long a) {<br>    System.out.print(a);<br>  }<br> <br>  public static void print(int a) {<br>    System.out.print(a);<br>  }<br> <br>  public static void print(char a) {<br>    System.out.print(a);<br>  }<br> <br>  public static void print(String a) {<br>    System.out.print(a);<br>  }<br> <br>  public static void print(int[] a) {<br>    if (a==null) {System.out.print("null"); return;} <br>    for (int i=0; i&lt;a.length; i++) System.out.print(a[i]+(i&lt;a.length-1?",":"")); <br>  }<br> <br>  public static void print(int[][] a) {<br>    if (a==null) {System.out.print("null"); return;} <br>    for (int i=0; i&lt;a.length; i++) { print(a[i]); print("\n"); }<br>  }<br> <br>  public static void print(String[] a) {<br>    if (a==null) {System.out.print("null"); return;} <br>    for (int i=0; i&lt;a.length; i++) System.out.print(a[i]+(i&lt;a.length-1?",":"")); <br>  }<br> <br>  public static boolean eq(boolean a, boolean b) {<br>    return a==b;<br>  }<br> <br>  public static boolean eq(long a, long b) {<br>    return a==b;<br>  }<br> <br>  public static boolean eq(int a, int b) {<br>    return a==b;<br>  }<br> <br>  public static boolean eq(char a, char b) {<br>    return a==b;<br>  }<br> <br>  public static boolean eq(String a, String b) {<br>    return a.equals(b);<br>  }<br> <br>  public static boolean eq(int[] a, int[] b) { return Arrays.equals(a,b); }<br>  public static boolean eq(String[] a, String[] b) { return Arrays.equals(a,b); }<br> <br>}<br>// Powered by CodeProcessor<br></td>