<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections;<br><br>public class CirclesOfDestruction {<br>  const double EPS = 1e-8;<br><br>  class Point<br>  {<br>    public readonly double y;<br>    public readonly double x;<br><br>    public Point(double x, double y)<br>    {<br>      this.y = y;<br>      this.x = x;<br>    }<br><br>    public static double Distance(Point a, Point b)<br>    {<br>      double dx = a.x - b.x;<br>      double dy = a.y - b.y;<br>      return Math.Sqrt(dx * dx + dy * dy);<br>    }<br>  }<br><br>  class Line<br>  {<br>    public readonly double a;<br>    public readonly double b;<br>    public readonly double c;<br><br>    public Line(double a, double b, double c)<br>    {<br>      double z = Math.Sqrt(a * a + b * b);<br>      this.a = a / z;<br>      this.b = b / z;<br>      this.c = c / z;<br>    }<br><br>    public static Point Cross(Line m, Line n)<br>    {<br>      double z = (m.a * n.b - m.b * n.a);<br>      if (Math.Abs(z) &lt; EPS)<br>        return null;<br>      return new Point(<br>        -(m.c * n.b - m.b * n.c) / z,<br>        -(m.a * n.c - m.c * n.a) / z);<br>    }<br><br>    public static Line Normal(Point p, Point q)<br>    {<br>      return new Line(2 * (q.x - p.x), 2 * (q.y - p.y), p.x * p.x + p.y * p.y - q.x * q.x - q.y * q.y);<br>    }<br>  }<br><br>  public double exitTime(int xSize, int ySize, int px, int py, int[] x, int[] y) {<br>    ArrayList lines = new ArrayList();<br>    lines.Add(new Line(1, 0, 0));<br>    lines.Add(new Line(0, 1, 0));<br>    lines.Add(new Line(1, 0, -xSize));<br>    lines.Add(new Line(0, 1, -ySize));<br>    lines.Add(new Line(1, 0, -px));<br>    lines.Add(new Line(0, 1, -py));<br><br>    Point we = new Point(px, py);<br>    int n = x.Length;<br>    Point[] enemy = new Point[n];<br>    for (int i = 0; i &lt; x.Length; ++i)<br>    {<br>      enemy[i] = new Point(x[i], y[i]);<br>      lines.Add(Line.Normal(we, enemy[i]));<br>    }<br><br>    double res = 1e10;<br><br>    for (int i = 0; i &lt; 4; ++i)<br>      for (int j = 0; j &lt; lines.Count; ++j)<br>      {<br>        Line l1 = (Line) lines[i];<br>        Line l2 = (Line) lines[j];<br><br>        Point p = Line.Cross(l1, l2);<br>        if (p == null)<br>          continue;<br><br>        bool ok = true;<br>        double cur = Point.Distance(we, p);<br>        for (int k = 0; k &lt; n; ++k)<br>          if (cur &gt; Point.Distance(enemy[k], p) + EPS)<br>          {<br>            ok = false;<br>            break;<br>          }<br><br>        if (ok)<br>        {<br>          if (cur &lt; res)<br>            res = cur;<br>        }<br>      }<br><br>    if (res &gt; 1e9)<br>      return -1;<br>    else<br>      return res;<br>  }<br>  <br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003] [modified for C# by Petr]<br>// Powered by CodeProcessor<br></td>