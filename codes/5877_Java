<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>import java.util.regex.*;<br> <br>public class CirclesOfDestruction {<br>    double y2;<br>    double x2;<br>    double y1;<br>    double x1;<br>    int[] y;<br>    int[] x;<br>    int py;<br>    int px;<br>    int ySize;<br>    int xSize;<br>    int N;<br>    double minv = 1e+50;<br> <br>    final double epsilon = 1e-10;<br> <br>    boolean linesIntersection(double x1, double y1, double x2, double y2,<br>            double x3, double y3, double x4, double y4,<br>            double [] xyret) {<br>  double a1 = y1-y2;<br>  double b1 = x2-x1;<br>  double c1 = a1*x1+b1*y1;<br> <br>  double a2 = y3-y4;<br>  double b2 = x4-x3;<br>  double c2 = a2*x3+b2*y3;<br> <br>  return linesIntersection(a1, b1, c1,<br>         a2, b2, c2,<br>         xyret);<br>    }<br> <br>    boolean linesIntersection(double a1, double b1, double c1,<br>            double a2, double b2, double c2,<br>            double [] xyret) {<br>  double d = a1*b2-b1*a2;<br>  if (Math.abs(d) &lt; epsilon)<br>      return false;<br> <br>  xyret[0] = (b2*c1-b1*c2)/d;<br>  xyret[1] = (a1*c2-a2*c1)/d;<br> <br>  return true;<br>    }<br> <br> <br>    public double exitTime(int xSize, int ySize, int px, int py, int[] x, int[] y) {<br>  this.y = y;<br>  this.x = x;<br>  this.py = py;<br>  this.px = px;<br>  this.ySize = ySize;<br>  this.xSize = xSize;<br>  N = x.length;<br> <br>  if (px == 0 || py == 0 || px == xSize || py == ySize)<br>      return 0;<br> <br>  doit(px, py, px-1, py);<br>  doit(px, py-1, px, py);<br>  for (int i=0; i&lt;N; i++) {<br>      double [] da = getsui(i);<br>      doit(da[0], da[1], da[2], da[3]);<br>  }<br>  <br>        return minv &lt; 1e+50 ? Math.sqrt(minv) : -1;<br>    }<br> <br>    double [] getsui(int i) {<br>  double [] da = new double[4];<br>  double mx = (px+x[i])/2.0;<br>  double my = (py+y[i])/2.0;<br>  double dx = mx-px;<br>  double dy = my-py;<br>  da[0] = mx;<br>  da[1] = my;<br>  da[2] = mx+dy;<br>  da[3] = my-dx;<br>  return da;<br>    }<br> <br>    void doit(double x1, double y1, double x2, double y2) {<br>  this.y2 = y2;<br>  this.x2 = x2;<br>  this.y1 = y1;<br>  this.x1 = x1;<br>  doit2(0, 0, 1, 0);<br>  doit2(0, 1, 0, 0);<br>  doit2(0, ySize, 1, ySize);<br>  doit2(xSize, 1, xSize, 0);<br>    }<br> <br>    void doit2(double x3, double y3, double x4, double y4) {<br>  double [] da = new double[2];<br>  if (!linesIntersection(x1, y1, x2, y2,<br>             x3, y3, x4, y4,<br>             da))<br>      return;<br>  double d2st = dist(da[0], da[1], px, py);<br>  for (int i=0; i&lt;N; i++)<br>      if (dist(da[0], da[1], x[i], y[i])+epsilon &lt; d2st)<br>    return;<br>  minv = Math.min(minv, d2st);<br>    }<br> <br>    double dist(double x1, double y1, double x2, double y2) {<br>  return (x1-x2)*(x1-x2)+(y1-y2)*(y1-y2);<br>    }<br> <br>}<br> <br>// Powered by CodeProcessor<br></td>