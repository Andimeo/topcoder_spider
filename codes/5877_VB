<td class="problemText" colspan="8" valign="middle" align="left">
            Imports Microsoft.VisualBasic<br>Imports System<br>Imports System.Collections<br>Imports System.Math<br> <br>Public Class CirclesOfDestruction<br>    Public Function exitTime(ByVal xSize As Integer, ByVal ySize As Integer, ByVal px As Integer, ByVal py As Integer, ByVal x As Integer(), ByVal y As Integer()) As Double<br>        Dim i, j, k, l As Integer<br> <br>        Dim dXLegalMin(1) As Double<br>        Dim dXLegalMax(1) As Double<br>        Dim dYLegalMin(1) As Double<br>        Dim dYLegalMax(1) As Double<br> <br>        For i = 0 To 1<br>            dXLegalMax(i) = xSize<br>            dYLegalMax(i) = ySize<br>        Next<br> <br>        If px = 0 Then Return 0<br>        If py = 0 Then Return 0<br>        If px = xSize Then Return 0<br>        If py = ySize Then Return 0<br>        Dim cX, cY As Integer<br>        Dim dX, dY, dG As Double<br>        Dim bAbove, bRight As Boolean<br>        Dim d As Double<br>        Dim dDelta As Double = 0.000000001<br> <br>        For i = 0 To x.GetUpperBound(0)<br>            dX = (px + x(i)) / 2<br>            dY = (py + y(i)) / 2<br>            If px = x(i) Then<br>                If py &gt; y(i) Then<br>                    For j = 0 To 1<br>                        dYLegalMin(j) = Max(dYLegalMin(j), dY)<br>                    Next<br>                    dXLegalMax(0) = -1<br>                Else<br>                    For j = 0 To 1<br>                        dYLegalMax(j) = Min(dYLegalMax(j), dY)<br>                    Next<br>                    dXLegalMax(1) = -1<br>                End If<br>            End If<br> <br>            If py = y(i) Then<br>                If px &gt; x(i) Then<br>                    For j = 0 To 1<br>                        dXLegalMin(j) = Max(dXLegalMin(j), dX)<br>                    Next<br>                    dYLegalMax(0) = -1<br>                Else<br>                    For j = 0 To 1<br>                        dXLegalMax(j) = Min(dXLegalMax(j), dX)<br>                    Next<br>                    dYLegalMax(1) = -1<br>                End If<br>            End If<br> <br>            If py &lt;&gt; y(i) And px &lt;&gt; x(i) Then<br> <br>                dG = (py - y(i)) / (px - x(i))<br>                dG = -1 / dG<br>                bAbove = py &gt; y(i)<br>                bRight = px &gt; x(i)<br> <br>                'x0<br>                d = dY - dG * (dX)<br>                If bAbove Then<br>                    dYLegalMin(0) = Max(dYLegalMin(0), d)<br>                Else<br>                    dYLegalMax(0) = Min(dYLegalMax(0), d)<br>                End If<br>                'xmax<br>                d = dY + dG * (xSize - dX)<br>                If bAbove Then<br>                    dYLegalMin(1) = Max(dYLegalMin(1), d)<br>                Else<br>                    dYLegalMax(1) = Min(dYLegalMax(1), d)<br>                End If<br>                'y0<br>                d = dX - (1 / dG) * (dY)<br>                If bRight Then<br>                    dXLegalMin(0) = Max(dXLegalMin(0), d)<br>                Else<br>                    dXLegalMax(0) = Min(dXLegalMax(0), d)<br>                End If<br>                'ymax<br>                d = dX + (1 / dG) * (ySize - dY)<br>                If bRight Then<br>                    dXLegalMin(1) = Max(dXLegalMin(1), d)<br>                Else<br>                    dXLegalMax(1) = Min(dXLegalMax(1), d)<br>                End If<br>            End If<br>        Next<br> <br>        ' 4x perp<br>        ' 8x edges<br> <br>        Dim dDist As Double = 9999<br> <br>        If px &gt;= dXLegalMin(0) - dDelta And px &lt;= dXLegalMax(0) + dDelta Then<br>            dDist = Min(dDist, py)<br>        End If<br> <br>        If px &gt;= dXLegalMin(1) - dDelta And px &lt;= dXLegalMax(1) + dDelta Then<br>            dDist = Min(dDist, ySize - py)<br>        End If<br> <br>        If py &gt;= dYLegalMin(0) - dDelta And py &lt;= dYLegalMax(0) + dDelta Then<br>            dDist = Min(dDist, px)<br>        End If<br> <br>        If py &gt;= dYLegalMin(1) - dDelta And py &lt;= dYLegalMax(1) + dDelta Then<br>            dDist = Min(dDist, xSize - px)<br>        End If<br> <br>        If dXLegalMin(0) &lt;= dXLegalMax(0) + dDelta Then<br>            dDist = Min(dDist, dFar(px, py, dXLegalMin(0), 0))<br>            dDist = Min(dDist, dFar(px, py, dXLegalMax(0), 0))<br>        End If<br> <br>        If dYLegalMin(0) &lt;= dYLegalMax(0) + dDelta Then<br>            dDist = Min(dDist, dFar(px, py, 0, dYLegalMin(0)))<br>            dDist = Min(dDist, dFar(px, py, 0, dYLegalMax(0)))<br>        End If<br> <br>        If dXLegalMin(1) &lt;= dXLegalMax(1) + dDelta Then<br>            dDist = Min(dDist, dFar(px, py, dXLegalMin(1), ySize))<br>            dDist = Min(dDist, dFar(px, py, dXLegalMax(1), ySize))<br>        End If<br> <br>        If dYLegalMin(1) &lt;= dYLegalMax(1) + dDelta Then<br>            dDist = Min(dDist, dFar(px, py, xSize, dYLegalMin(1)))<br>            dDist = Min(dDist, dFar(px, py, xSize, dYLegalMax(1)))<br>        End If<br> <br>        If dDist = 9999 Then Return -1<br>        Return dDist<br>    End Function<br> <br>    Private Function dFar(ByVal x1 As Double, ByVal y1 As Double, ByVal x2 As Double, ByVal y2 As Double) As Double<br>        Return Sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1))<br>    End Function<br>End Class<br></td>