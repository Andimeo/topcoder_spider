<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br><br>public class RobotCollision {<br>  public double probability(int xSize, int ySize, string commandsRobbie, string commandsSpeedy) {<br>    int n = commandsRobbie.Length;<br><br>    long res = 0;<br><br>    for (int x1 = 0; x1 &lt; xSize; ++x1)<br>      for (int y1 = 0; y1 &lt; ySize; ++y1)<br>        for (int x2 = 0; x2 &lt; xSize; ++x2)<br>          for (int y2 = 0; y2 &lt; ySize; ++y2)<br>          {<br>            if (Math.Abs(x1 - x2) + Math.Abs(y1 - y2) &gt; 2 * n)<br>              continue;<br><br>            bool collide = false;<br><br>            int cx1 = x1;<br>            int cy1 = y1;<br>            int cx2 = x2;<br>            int cy2 = y2;<br><br>            if (cx1 == cx2 &amp;&amp; cy1 == cy2)<br>              collide = true;<br>            else<br>            {<br>              for (int i = 0; i &lt; n; ++i)<br>              {<br>                int nx1 = cx1;<br>                int ny1 = cy1;<br>                int nx2 = cx2;<br>                int ny2 = cy2;<br><br>                switch (commandsRobbie[i])<br>                {<br>                  case 'U':<br>                    if (nx1 &gt; 0)<br>                      --nx1;<br>                    break;<br><br>                  case 'D':<br>                    if (nx1 &lt; xSize - 1)<br>                      ++nx1;<br>                    break;<br><br>                  case 'L':<br>                    if (ny1 &gt; 0)<br>                      --ny1;<br>                    break;<br><br>                  case 'R':<br>                    if (ny1 &lt; ySize - 1)<br>                      ++ny1;<br>                    break;<br>                }<br><br>                switch (commandsSpeedy[i])<br>                {<br>                  case 'U':<br>                    if (nx2 &gt; 0)<br>                      --nx2;<br>                    break;<br><br>                  case 'D':<br>                    if (nx2 &lt; xSize - 1)<br>                      ++nx2;<br>                    break;<br><br>                  case 'L':<br>                    if (ny2 &gt; 0)<br>                      --ny2;<br>                    break;<br><br>                  case 'R':<br>                    if (ny2 &lt; ySize - 1)<br>                      ++ny2;<br>                    break;<br>                }<br><br>                if ((nx1 == nx2 &amp;&amp; ny1 == ny2) || (nx1 == cx2 &amp;&amp; ny1 == cy2 &amp;&amp; nx2 == cx1 &amp;&amp; ny2 == cy1))<br>                {<br>                  collide = true;<br>                  break;<br>                }<br><br>                cx1 = nx1;<br>                cx2 = nx2;<br>                cy1 = ny1;<br>                cy2 = ny2;<br>              }<br>            }<br><br>            if (collide)<br>              ++res;<br>          }<br><br>    return (double) res / xSize / xSize / ySize / ySize;<br>  }<br>  <br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003] [modified for C# by Petr]<br>// Powered by CodeProcessor<br></td>