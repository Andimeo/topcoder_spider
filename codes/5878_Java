<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>import java.math.*;<br>import java.text.*;<br>public class RobotCollision {<br>   boolean debug = false;<br>   <br>   Set set = new HashSet();<br>   ArrayList al = new ArrayList();<br>   Hashtable ht = new Hashtable();<br>   StringTokenizer tok, toka, tokb;<br>   <br>   int MAX = 1000 * 1000 * 1000, nil = -1;<br>   <br>   int n;<br>   char sa[];<br>   char sb[];<br>   int aad[];<br>   int bbd[];<br>   int [] dx = {1, 0, -1, 0};<br>   int [] dy = {0, 1, 0, -1};<br>   int xs, ys;<br>   public double probability(int xSize, int ySize, String<br>   comA, String comB) {<br>      <br>      xs = xSize;<br>      ys = ySize;<br>      <br>      n = comA.length();<br>      sa = new char [n];<br>      sb = new char [n];<br>      for (int i = 0; i &lt; n; i ++) {<br>         sa[i] = comA.charAt(i);<br>         sb[i] = comB.charAt(i);<br>      }<br>      <br>      aad = new int [n];<br>      bbd = new int [n];<br>      for (int i = 0; i &lt; n; i ++) {<br>         aad[i] = "DRUL".indexOf( sa[i] );<br>         bbd[i] = "DRUL".indexOf( sb[i] );<br>      }<br>      <br>      int xchange = 0;<br>      int ychange = 0;<br>      for (int i = 0; i &lt; n; i ++) {<br>         xchange += aad[i] == 0 ? 1 : 0;<br>         xchange += bbd[i] == 0 ? 1 : 0;<br>         ychange += aad[i] == 1 ? 1 : 0;<br>         ychange += bbd[i] == 1 ? 1 : 0;<br>         xchange += aad[i] == 2 ? 1 : 0;<br>         xchange += bbd[i] == 2 ? 1 : 0;<br>         ychange += aad[i] == 3 ? 1 : 0;<br>         ychange += bbd[i] == 3 ? 1 : 0;<br>      }<br>      <br>      double tot = 0;<br>      for (int i = 0; i &lt; xSize ; i ++) {<br>         for (int j = -xchange; j &lt;= xchange; j ++) {<br>            if ( i + j &lt; 0 || i + j &gt;= xSize) {<br>               continue;<br>            }<br>            <br>            for (int k = 0; k &lt; ySize; k ++) {<br>               for ( int ia = -ychange; ia &lt;= ychange; ia ++ ) {<br>                  if ( k + ia &lt; 0 || k + ia &gt;= ySize ) {<br>                     continue;<br>                  }<br>                  <br>                  tot += Calc( i, k, i + j, k + ia );<br>               }<br>            }<br>         }<br>      }<br>      <br>      return tot / xSize / ySize / xSize / ySize;<br>   } // end of method probability<br>   <br>   double Calc( int xa, int ya, int xb, int yb ) {<br>      if ( xa == xb &amp;&amp; ya == yb ) {<br>         return 1;<br>      }<br>      <br>      for (int i = 0; i &lt; n; i ++) {<br>         int oldxa = xa, oldya = ya;<br>         int oldxb = xb, oldyb = yb;<br>         if ( xa == xb &amp;&amp; ya == yb ) {<br>            return 1;<br>         }<br>         <br>         xa += dx[ aad[i] ];<br>         ya += dy[ aad[i] ];<br>         xb += dx[ bbd[i] ];<br>         yb += dy[ bbd[i] ];<br>         <br>         xa = Math.min( xa, xs - 1 );<br>         xa = Math.max( xa, 0 );<br>         xb = Math.min( xb, xs - 1 );<br>         xb = Math.max( xb, 0 );<br>         ya = Math.min( ya, ys - 1 );<br>         ya = Math.max( ya, 0 );<br>         yb = Math.min( yb, ys - 1 );<br>         yb = Math.max( yb, 0 );         <br>         <br>         if ( xa == xb &amp;&amp; ya == yb ) {<br>            return 1;<br>         }<br>         <br>         if ( xa == oldxb &amp;&amp; ya == oldyb &amp;&amp; xb == oldxa &amp;&amp; yb == oldya ) {<br>            return 1;<br>         }<br>      }<br>      <br>      return 0;<br>   }<br>   <br>   <br>}<br> <br>// Powered by CodeProcessor<br></td>