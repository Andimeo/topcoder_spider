<td class="problemText" colspan="8" valign="middle" align="left">
            // Powered by radeclipse!<br>import java.util.* ;<br>public class ManhattanDistance {<br>  double hy(double a, double b) {<br>    return Math.sqrt((double)(a*a+b*b)) ;<br>  }<br>  public double minDistance(int distance, int width, String start, String target) {<br>    int h = Math.abs(start.charAt(0) - target.charAt(0)) ;<br>    int v = Math.abs(Integer.parseInt(start.substring(1))-<br>         Integer.parseInt(target.substring(1))) ;<br>    if (h == 0 || v == 0)<br>      return distance * (v + h) ;<br>    double[][][] d = new double[h+1][v+1][2] ;<br>    for (int s=0; s&lt;=h+v; s++) {<br>      for (int hi=0; hi&lt;=s &amp;&amp; hi &lt;= h; hi++) {<br>  int vi = s - hi ;<br>  if (vi &gt; v)<br>    continue ;<br>  if (vi &gt; 0 || hi &gt; 0) {<br>    d[hi][vi][0] = 1e30 ;<br>    d[hi][vi][1] = 1e30 ;<br>  }<br>  // h step<br>  for (int oh=0; oh&lt;hi; oh++) {<br>    double adjx = width ;<br>    if ((oh == 0 &amp;&amp; vi == 0) ||<br>        (hi == h &amp;&amp; vi == v))<br>      adjx = width / 2.0 ;<br>    d[hi][vi][0] = Math.min(d[hi][vi][0],<br>            d[oh][vi][1] +<br>            hy((hi-oh)*distance-adjx, adjx)) ;<br>  }<br>  for (int ov=0; ov&lt;vi; ov++) {<br>    double adjx = width ;<br>    if ((ov == 0 &amp;&amp; hi == 0) ||<br>        (hi == h &amp;&amp; vi == v))<br>      adjx = width / 2.0 ;<br>    d[hi][vi][1] = Math.min(d[hi][vi][1],<br>            d[hi][ov][0] +<br>            hy((vi-ov)*distance-adjx, adjx)) ;<br>  }<br>      }<br>    }<br>    return Math.min(d[h][v][0], d[h][v][1]) ;<br>  }<br>}<br></td>