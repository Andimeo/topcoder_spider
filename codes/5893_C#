<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections;<br><br>public class SnakeTurbo <br>{<br>  int start;<br>  int end;<br>  ArrayList al;<br>  int[] orbs;<br>  public double finishTime(int startLocation, int endLocation, int[] o) <br>  {<br>    for(int i=0;i&lt;52;i++) for(int j=0;j&lt;52;j++) for(int k=0;k&lt;52;k++) lut[i,j,k] = -1;<br>    orbs = o;<br>    al = new ArrayList();<br>    foreach(int orb in orbs) al.Add(orb);<br>    al.Sort();<br>    start = al.BinarySearch(startLocation);<br>    if(start &lt; 0)<br>    {<br>      start = ~start;<br>      al.Insert(start, startLocation);<br>    }<br>    end = al.BinarySearch(endLocation);<br>    if(end &lt; 0)<br>    {<br>      end = ~end;<br>      al.Insert(end, endLocation);<br>      if(end &lt;= start) start++;<br>    }<br>    return best(start, start, start);<br>  }<br>  int speed(int left,int right)<br>  {<br>    int total = 0;<br>    foreach(int orb in orbs)<br>    {<br>      if(orb &gt;= (int)al[left] &amp;&amp; orb &lt;= (int)al[right]) total++;<br>    }<br>    return total;<br>  }<br>  double[,,] lut = new double[52,52,52];<br>  double best(int left,int right, int at)<br>  {<br>    if(at == end) return 0;<br><br>    if(lut[left,right,at] != -1) return lut[left, right, at];<br>    double good = 1000000000;<br><br>    if(left &gt; 0)<br>    {<br>      double cost = best(left-1,right,left-1);<br>      int dist = (int)al[at] - (int)al[left-1];<br>      double multiplier = Math.Pow(2, speed(left, right));<br>      cost += dist / multiplier;<br>      good = Math.Min(good, cost);<br>    }<br><br>    if(right &lt; al.Count - 1)<br>    {<br>      double cost = best(left,right+1,right+1);<br>      int dist = (int)al[right+1] - (int)al[at];<br>      double multiplier = Math.Pow(2, speed(left, right));<br>      cost += dist / multiplier;<br>      good = Math.Min(good, cost);<br>    }<br>    lut[left, right,at] = good;<br>    return good;<br>  }<br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by CodeProcessor<br></td>