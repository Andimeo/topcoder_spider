<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>import java.util.regex.*;<br>import java.text.*;<br>import java.math.*;<br>import static java.lang.Math.*;<br>import static java.util.Arrays.*;<br>public class SnakeTurbo {<br>  int[] left, right;<br>  int end;<br>  public double finishTime(int startLocation, int endLocation, int[] orbs) {<br>    sort(orbs);<br>    end = endLocation;<br>    int ln = 0;<br>    for(int i = 0; i &lt; orbs.length; i++){<br>      if(orbs[i] &lt; startLocation) ln++;<br>    }<br>    left = new int[ln];<br>    right = new int[orbs.length-ln];<br>    for(int i = 0; i &lt; orbs.length; i++){<br>      if(orbs[i] &lt; startLocation) left[ln-1-i] = orbs[i];<br>      else right[i-ln] = orbs[i];<br>    }<br>    return doit(startLocation, 0, 0, 1);<br>  }<br>  Map&lt;String, Double&gt; map = new HashMap&lt;String, Double&gt;();<br>  double doit(int at, int lc, int rc, double speed){<br>    String key = at+" "+lc+" "+rc;<br>    if(map.containsKey(key)) return map.get(key);<br>    double ret = abs(end-at)/speed;<br>    if(lc != left.length) ret = min(ret, abs(left[lc]-at)/speed + doit(left[lc], lc+1, rc, speed*2));<br>    if(rc != right.length) ret = min(ret, abs(right[rc]-at)/speed + doit(right[rc], lc, rc+1, speed*2));<br>    map.put(key, ret);<br>    return ret;<br>  }<br> <br>}<br> <br>// Powered by PopsEdit<br>// Powered by CodeProcessor<br></td>