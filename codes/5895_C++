<td class="problemText" colspan="8" valign="middle" align="left">
            // I think it is good to submit wrong solutions sometimes to give others challenging opportunities.<br>#include &lt;algorithm&gt;<br>#include &lt;string&gt;<br>#include &lt;vector&gt;<br>using namespace std;<br><br>#define looooooooooooooooooooooooooooong long long long<br><br>typedef vector&lt;string&gt; vs;<br><br>#define LS &lt;<br>#define Size(x) (int(x.size()))<br>#define LET(k,val) typeof(val) k = (val)<br>// execute "act", and return "val" as an expression result<br>#define CLC(act,val) (*({act; static typeof(val) CLCR; CLCR = (val); &amp;CLCR;}))<br><br>// All macros with parameters "k,a,b" run the "k" variable in range [a,b)<br>#define FOR(k,a,b) for(typeof(a) k=(a); k LS (b); ++k)<br><br>// Standard mathematical quantifiers, plus tools to implement them<br>// find the first k in [a,b) that satisfies cond, or b if none<br>#define FIRST(k,a,b,cond) CLC(LET(k, a); for(; k LS (b); ++k) if(cond) break, k)<br>// find the last k in [a,b) that satisfies cond, or a-1 if none<br>#define LAST(k,a,b,cond) CLC(LET(k, b); while((a) &lt;= (--k)) if(cond) break, k)<br>#define EXISTS(k,a,b,cond) (FIRST(k,a,b,cond) LS (b))<br>#define FOLD0(k,a,b,init,act) CLC(LET(k, a); LET(R##k, init); for(; k LS (b); ++k) {act;}, R##k)<br>#define SUMTO(k,a,b,init,x)  FOLD0(k,a,b,init,R##k += (x))<br><br>#line 3 "FallingCoconuts.cc"<br><br>int cocoh[20][128];<br><br>class FallingCoconuts {<br>  public:<br>  vector &lt;string&gt; harvest(vector &lt;int&gt; drops) {<br>    // !FDI<br>    FOR(k,0,128) FOR(l,0,20) cocoh[l][k] = '-';<br>    FOR(k,0,128) cocoh[0][k] = 'O';<br>    FOR(k,0,Size(drops)) {<br>      int x = drops[k] + 25;<br>      int y = 19;<br>      do {<br>        if(cocoh[y-1][x] == '-') y--;<br>        else if(cocoh[y-1][x+1] == '-') {y--; x++;}<br>        else if(cocoh[y-1][x-1] == '-') {y--; x--;}<br>        else break;<br>        }<br>      while(1);<br>      cocoh[y][x] = 'O';<br>      }<br>    int m = FIRST(k,0,128, EXISTS(l,1,19, cocoh[l][k] == 'O'));<br>    int ma = 1+LAST(k,0,128, EXISTS(l,1,19, cocoh[l][k] == 'O'));<br>    int my = 1+LAST(l,0,19, EXISTS(k,0,128, cocoh[l][k] == 'O'));<br>    vs res;<br>    string z;<br>    printf("%d %d %d\n", m,ma,my);<br>    FOR(k,1,my) res.push_back(SUMTO(x,m,ma, z, cocoh[k][x]));<br>    return res;<br>    }<br>  };<br><br><br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003]<br>// Powered by CodeProcessor<br></td>