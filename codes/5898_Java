<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>public class MonomorphicTyper {<br>    Map&lt;String,String&gt; map;<br>    boolean mapped = false;<br>    <br>    public String infer(String expression, String[] definitions) {<br>        if (!mapped) {<br>            map = new TreeMap&lt;String,String&gt;();<br>            for (String s: definitions) {<br>                String[] ss = s.split(":");<br>                map.put(ss[0],ss[1]);<br>            }<br>            mapped = true;<br>        }<br>        String r = map.get(expression);<br>        if (r != null) return r;<br>        int i = expression.indexOf("(")+1;<br>        if (i == 0) return "";<br>        String functionName = expression.substring(0, i);<br>        String args = expression.substring(i, expression.length()-1);<br>        int parenLevel = 0;<br>        String curSubArg = "";<br>        for (int c=0; c&lt;args.length(); c++) {<br>            if (args.charAt(c)==',' &amp;&amp; parenLevel == 0) {<br>                functionName += infer(curSubArg, definitions) + ",";<br>                curSubArg = "";<br>            }<br>            else {<br>                if (args.charAt(c)=='(') parenLevel++;<br>                if (args.charAt(c)==')') parenLevel--;<br>                curSubArg += args.charAt(c);<br>            }<br>        }<br>        functionName += infer(curSubArg, definitions) + ")";<br>        r = map.get(functionName);<br>        if (r != null) return r;<br>        else return "";<br>    }<br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by CodeProcessor<br></td>