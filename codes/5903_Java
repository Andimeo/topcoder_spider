<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br> <br>public class CMajor {<br>  static class Frag {<br>    int[] jump = {-1, -1, -1, -1, -1, -1, -1};<br>  }<br> <br> <br>  static final boolean[] ok = {true, false, true, false, true,   true, false, true, false, true, false, true};<br>  static final int[] ind = {0, -1, 1, -1, 2,                     3, -1,         4,      -1, 5,       -1, 6};<br>  static final int[] ind2 = {0, 2, 4, 5, 7, 9, 11};<br> <br> <br>  public int getLongest(String[] fragments) {<br> <br>    int n = fragments.length;<br>    Frag[] ff = new Frag[n];<br> <br>    for (int i = 0; i &lt; fragments.length; ++i) {<br>      ff[i] = new Frag();<br>      String fragment = fragments[i];<br>      String[] strings = fragment.split(" ");<br>      int[] jj = new int[strings.length];<br>      for (int j = 0; j &lt; jj.length; ++j) {<br>        jj[j] = Integer.parseInt(strings[j]);<br>      }<br> <br>      o:<br>      for (int k = 0; k &lt;= 6; ++k) {<br>        int s = ind2[k];<br>        for (int j = 0; j &lt; jj.length; ++j) {<br>          s = (s + jj[j]) % 12;<br>          if (s &lt; 0) s += 12;<br>          if (!ok[s]) continue o;<br>        }<br>        ff[i].jump[k] = ind[s];<br>      }<br>    }<br> <br>    int nn = 1 &lt;&lt; n;<br>    int[][] buf = new int[7][nn];<br> <br>    for (int i = 0; i &lt; 7; ++i) Arrays.fill(buf[i], -1);<br>    for (int i = 0; i &lt; 7; ++i) buf[i][0] = 0;<br> <br>    for (int i = 0; i &lt; nn; ++i) {<br>      for (int k = 0; k &lt; n; ++k) {<br>        if ((i &amp; (1 &lt;&lt; k)) == 0) {<br>          for (int m = 0; m &lt; 7; ++m) {<br>            int next = ff[k].jump[m];<br>            if (buf[m][i] != -1 &amp;&amp; next != -1) {<br>              int ii = i | (1 &lt;&lt; k);<br>              buf[next][ii] = Math.max(buf[next][ii], buf[m][i] + 1);<br>            }<br>          }<br>        }<br>      }<br>    }<br> <br>    int res = 0;<br>    for (int i = 0; i &lt; 7; ++i) {<br>      for (int j = 0; j &lt; nn; ++j) res = Math.max(res, buf[i][j]);<br> <br>    }<br> <br> <br>    return res;<br>  }<br> <br>}<br> <br> <br>// Powered by FileEdit<br>// Powered by CodeProcessor<br></td>