<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;map&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cstring&gt;<br>#include &lt;cassert&gt;<br>#include &lt;set&gt;<br>#include &lt;iostream&gt;<br>#include &lt;sstream&gt;<br>#include &lt;cstddef&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;utility&gt;<br>#include &lt;iterator&gt;<br>#include &lt;numeric&gt;<br>#include &lt;list&gt;<br>#include &lt;queue&gt;<br> <br>using namespace std;<br> <br>typedef vector&lt;int&gt; vi;<br>typedef vector&lt;int&gt;::iterator vi_i;<br>typedef vector&lt;string&gt; vs;<br>typedef vector&lt;string&gt;::iterator vs_i;<br>typedef pair&lt;int, int&gt; pii;<br> <br>template&lt;class T&gt;<br>void splitstr(const string &amp;s, vector&lt;T&gt; &amp;out)<br>{<br>    istringstream in(s);<br>    T tmp;<br> <br>    out.clear();<br>    while (in &gt;&gt; tmp) out.push_back(tmp);<br>}<br> <br>class ShrinkingPills<br>{<br>public:<br>    int escape(int pills, int pspeed, int dspeed, int door, vector &lt;string&gt; lab);<br>};<br> <br>struct state<br>{<br>    int p;<br>    int h;<br>    int r;<br>    int c;<br>};<br> <br>static const int dr[5] = {0, 1, 0, -1, 0};<br>static const int dc[5] = {1, 0, -1, 0, 0};<br>static int best[11][101][51][51];<br> <br>int ShrinkingPills::escape(int pills, int pspeed, int dspeed, int door, vector &lt;string&gt; lab)<br>{<br>    int R = lab.size();<br>    int C = lab[0].size();<br>    queue&lt;state&gt; q;<br>    int sx = 0, sy = 0, ex = 0, ey = 0;<br> <br>    for (int i = 0; i &lt; R; i++)<br>        for (int j = 0; j &lt; C; j++)<br>        {<br>            switch (lab[i][j])<br>            {<br>            case '@':<br>                sx = i;<br>                sy = j;<br>                break;<br>            case 'E':<br>                ex = i;<br>                ey = j;<br>                break;<br>            }<br>        }<br> <br>    q.push((state) {pills, 100, sx, sy});<br>    memset(best, 0x3f, sizeof(best));<br>    best[pills][100][sx][sy] = 0;<br>    while (!q.empty())<br>    {<br>        state cur = q.front();<br>        int t = best[cur.p][cur.h][cur.r][cur.c] + 1;<br>        q.pop();<br> <br>        for (int take = 0; take &lt; 2; take++)<br>        {<br>            if (take &amp;&amp; (cur.p == 0 || cur.h &lt; 100)) continue;<br>            state nxt = cur;<br>            if (take || nxt.h &lt; 100) nxt.h -= pspeed;<br>            if (nxt.h &lt;= 0) nxt.h = 100;<br>            if (take) nxt.p--;<br> <br>            for (int d = 0; d &lt; 5; d++)<br>            {<br>                nxt.r = cur.r + dr[d];<br>                nxt.c = cur.c + dc[d];<br>                if (lab[nxt.r][nxt.c] == '#') continue;<br>                if (lab[nxt.r][nxt.c] == 'X' &amp;&amp; door - dspeed * t &lt; nxt.h) continue;<br>                if (lab[nxt.r][nxt.c] == 'E') return t;<br>                if (t &lt; best[nxt.p][nxt.h][nxt.r][nxt.c])<br>                {<br>                    best[nxt.p][nxt.h][nxt.r][nxt.c] = t;<br>                    q.push(nxt);<br>                }<br>            }<br>        }<br>    }<br>    return -1;<br>}<br> <br> <br>// Powered by FileEdit<br></td>