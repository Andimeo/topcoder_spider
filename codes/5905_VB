<td class="problemText" colspan="8" valign="middle" align="left">
            Public Class CuttingPoles<br> <br>  Private m_nCuts As Integer = 0 <br>  <br>  Public Function countCuts(poles() As Integer) As Integer<br>  <br>    System.Array.Sort(poles)<br>          System.Array.Reverse(poles)<br>          Dim n As Integer<br>          Dim nAverageHeight = AverageHeight(poles)<br>          Dim nPart As Integer<br> <br>          If Not AllSame(poles) Then<br>              nPart = poles(0) - nAverageHeight<br>              poles(0) = poles(0) - nPart<br>              poles(poles.Length - 1) += nPart<br>              m_nCuts += 1<br> <br>              If Not AllSame(poles) Then<br>                  Return countCuts(poles)<br>              Else<br>                  n = m_nCuts<br>                  m_nCuts = 0<br>                  Return n<br>              End If<br>          Else<br>              n = m_nCuts<br>              m_nCuts = 0<br>              Return n            <br>          End If<br>      <br>  End Function<br>  <br>  Private Function AverageHeight(poles() as Integer) As Integer<br>    Dim nHeight As Integer <br>    For i As Integer = 0 to poles.length -1<br>      nHeight += poles(i)<br>    Next i<br>    Return CInt(nHeight / poles.length)  <br>  End Function <br>  <br>  Private Function AllSame(poles() As Integer) As Boolean<br>    For i As Integer = 0 to poles.length - 2<br>      if poles(i) &lt;&gt; poles(i+1) Then<br>        Return false<br>      End If<br>    Next i<br>    Return True<br>  End Function <br> <br>End Class<br></td>