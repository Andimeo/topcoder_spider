<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Text;<br>using System.Text.RegularExpressions;<br>using System.Collections;<br><br>public class Resort {<br>  Hashtable mm= new Hashtable();<br>  Hashtable nm= new Hashtable();<br>  public Resort() {<br>    nm["H"]= "BLACK DIAMOND";<br>    nm["M"]= "BLUE SQUARE";<br>    nm["E"]= "GREEN CIRCLE";<br>  }<br>  static string best( string[] al) {<br>    if(al.Length==0) return "GREEN CIRCLE";<br>    string res= "BLACK DIAMOND";<br>    foreach( string s in al) {<br>      if(s != res) {<br>        if(res=="BLACK DIAMOND") {<br>          res= s;<br>        } else if(s=="GREEN CIRCLE") {<br>          res= s;<br>        } else if(s != "BLACK DIAMOND") {<br>          res= s;<br>        }<br>      }<br>      if(res=="GREEN CIRCLE") break;<br>    }<br>    return res;<br>  }<br>  string hardest( string a, string b) {<br>    if(a=="BLACK DIAMOND"||b=="BLACK DIAMOND") return "BLACK DIAMOND";<br>    if(a=="BLUE SQUARE"||b=="BLUE SQUARE") return "BLUE SQUARE";<br>    return "GREEN CIRCLE";<br>  }<br>  public string classify(string[] runs, string clf) {<br>    if(mm.ContainsKey(clf))<br>      return (string)mm[clf];<br>    string res= "";<br>    for( int i= 0; i != runs.Length; i++) {<br>      if(runs[i].StartsWith(clf+":")) {<br>        string[] t= runs[i].Split(":,".ToCharArray());<br>        ArrayList al= new ArrayList();<br>        for( int j= 2; j &lt; t.Length; j++) {<br>          al.Add(classify(runs,t[j]));<br>        }<br>        string outg= best((string[])al.ToArray(typeof(string)));<br>        string itype= (string)nm[t[1]];<br>        res= hardest(itype,outg);<br>        break;<br>      }<br>    }<br>    mm[clf]= res;<br>    return res;<br>  }<br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by CodeProcessor<br></td>