<td class="problemText" colspan="8" valign="middle" align="left">
            #pragma warning( disable : 4786 )<br><br>#include &lt;vector&gt;<br>#include &lt;string&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;set&gt;<br>#include &lt;iostream&gt;<br>#include &lt;map&gt;<br>#include &lt;functional&gt;<br>#include &lt;deque&gt;<br>#include &lt;sstream&gt;<br><br>using namespace std;<br><br>vector&lt; string &gt; tokenize( string in, string kar ) {<br>  string::iterator cp = in.begin();<br>  vector&lt; string &gt; oot;<br>  while( cp != in.end() ) {<br>    while( cp != in.end() &amp;&amp; count( kar.begin(), kar.end(), *cp ) )<br>      cp++;<br>    if( cp != in.end() )<br>      oot.push_back( string( cp, find_first_of( cp, in.end(), kar.begin(), kar.end() ) ) );<br>    cp = find_first_of( cp, in.end(), kar.begin(), kar.end() );<br>  };<br>  return oot;<br>};<br><br>map&lt; string, pair&lt; int, vector&lt; string &gt; &gt; &gt; runz;<br><br>map&lt; string, int &gt; kached;<br><br>int dif( char x ) {<br>  switch( x ) {<br>  case 'E': return 0;<br>  case 'M': return 1;<br>  case 'H': return 2;<br>  }<br>  return 15;<br>};<br><br>int doreco( const string &amp;b ) {<br>  if( kached.count( b ) )<br>    return kached[ b ];<br>  const pair&lt; int, vector&lt; string &gt; &gt; &amp;st = runz[ b ];<br>  int dif = st.first;<br>  int easelin = 2;<br>  int i;<br>  for( i = 0; i &lt; st.second.size(); i++ )<br>    if( easelin &gt; doreco( st.second[ i ] ) )<br>      easelin = doreco( st.second[ i ] );<br>  if( easelin &gt; dif &amp;&amp; st.second.size() )<br>    dif = easelin;<br>  kached[ b ] = dif;<br>//  printf( "Adding %s as %d\n", b.c_str(), dif );<br>  return dif;<br>};<br><br>class Resort {<br>  public:<br>  string classify(vector &lt;string&gt; a, string b) {<br>    int i;<br>    for( i = 0; i &lt; a.size(); i++ ) {<br>      vector&lt; string &gt; tok = tokenize( a[ i ], ":," );<br>      pair&lt; int, vector&lt; string &gt; &gt; forb;<br>      forb.first = dif( tok[ 1 ][ 0 ] );<br>      forb.second = tok;<br>      forb.second.erase( forb.second.begin() );<br>      forb.second.erase( forb.second.begin() );<br>      runz[ tok[ 0 ] ] = forb;<br>    }<br>    switch( doreco( b ) ) {<br>    case 0:<br>      return "GREEN CIRCLE";<br>    case 1:<br>      return "BLUE SQUARE";<br>    case 2:<br>      return "BLACK DIAMOND";<br>    }<br>    return "X";<br>  }<br>};<br><br><br><br>// Powered by FileEdit<br></td>