<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Text;<br>using System.Text.RegularExpressions;<br>using System.Collections;<br><br>public class GreedyGovernment {<br>    public double maxAverageCost(string[] tolls, int tollHike) {<br>        double res;<br><br>    Queue q = new Queue();<br>    q.Enqueue("0");<br><br>    ArrayList teed = new ArrayList();<br><br>    while (q.Count &gt; 0) {<br>      string tee = (string)q.Dequeue();<br>      int tipp = tee[tee.Length-1] - '0';<br><br>      for (int i=0;i&lt;tolls.Length;i++) <br>        if (tolls[tipp][i] != 'X' &amp;&amp; tee.IndexOf(i.ToString()) == -1) {<br>          if (i == tolls.Length-1)<br>            teed.Add(tee+i.ToString());<br>          else<br>            q.Enqueue(tee+i.ToString());<br>        }<br><br>    }<br><br><br>    Hashtable abi = new Hashtable();<br><br>    int kogutee = 0;<br>    foreach (string tee in teed) {<br>      for (int i=0;i&lt;tee.Length-1;i++) {<br>        kogutee += tolls[tee[i]-'0'][tee[i+1]-'0'] - '0';<br><br>        abi[tee.Substring(i,2)] = abi[tee.Substring(i,2)] == null ? 1 : ((int)abi[tee.Substring(i,2)] +1);<br>      }<br>    }<br><br>    int max = 0;<br>    foreach (int palju in abi.Values) {<br>      if (palju &gt; max)<br>        max = palju;<br>    }<br><br>    res = kogutee == 0 ? 0 : (((double)kogutee + tollHike * max) / teed.Count);<br>        return res;<br>    }<br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by CodeProcessor<br></td>