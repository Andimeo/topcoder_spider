<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;algorithm&gt;<br>#include &lt;iostream&gt;<br>#include &lt;sstream&gt;<br>#include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;queue&gt;<br>#include &lt;set&gt;<br>#include &lt;map&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cctype&gt;<br>#include &lt;cmath&gt;<br>#include &lt;list&gt;<br>#include &lt;regex.h&gt; <br>using namespace std;<br><br>// LIB CODE<br>typedef vector&lt;int&gt; VI;<br>typedef vector&lt;VI&gt; VVI;<br>#define PB push_back<br>#define FOR(i,a,b) for(int i=(a);i&lt;int(b);++i)<br>#define SZ(v) ((int)(v).size())<br>#define FORSZ(i,a,v) FOR(i,a,SZ(v))<br>#define REPSZ(i,v) FORSZ(i,0,v)<br>typedef vector&lt;string&gt; VS;<br>#define REP(i,n) FOR(i,0,n)<br>template&lt;class T, class U&gt; T cast (U x) { T y; ostringstream a; a&lt;&lt;x; istringstream b(a.str()); b&gt;&gt;y; return y; }<br>template&lt;class T&gt; vector&lt;T&gt; split(string s, string x=" ") { vector&lt;T&gt; r; REP(i,s.size()) { string c; while(i&lt;(int)s.size()&amp;&amp;x.find(s[i])==string::npos) c+=s[i++]; if(c.size()) r.push_back(cast&lt;T&gt;(c)); } return r; }<br>template&lt;class T&gt; vector&lt;vector&lt;T&gt; &gt; splitv(VS vs,string x=" ") { vector&lt;vector&lt;T&gt; &gt; r; REPSZ(i,vs) r.PB(split&lt;T&gt;(vs[i],x)); return r; }<br>// REAL CODE<br><br>class BestTriangulation {<br>public:<br>  double maxArea(vector &lt;string&gt; vertices) {<br>    VVI coord=splitv&lt;int&gt;(vertices);<br>    int n=coord.size();<br>    double ret=0;<br>    REP(i,n) REP(j,i) REP(k,j) {<br>      double area=abs((coord[j][0]-coord[i][0])*(coord[k][1]-coord[i][1])-(coord[k][0]-coord[i][0])*(coord[j][1]-coord[i][1]));<br>      ret&gt;?=area;<br>    }<br>    return ret/2;<br>    <br>  }<br>  <br>};<br><br><br>// Powered by FileEdit<br>// Powered by CodeProcessor<br></td>