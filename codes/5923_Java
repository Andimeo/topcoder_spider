<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>public class BestTriangulation {<br>   public double maxArea(String[] vertices) {<br>      int n = vertices.length;<br>      Point[] p = new Point[n];<br>      for (int i=0; i&lt;n; i++) {<br>         String[] s = vertices[i].split(" ");<br>         int x = Integer.parseInt(s[0]);<br>         int y = Integer.parseInt(s[1]);<br>         p[i] = new Point(x, y);<br>      }<br>      double ret = 0.0;<br>      for (int i=0; i&lt;n; i++) {<br>         for (int j=i+1; j&lt;n; j++) {<br>            for (int k=j+1; k&lt;n; k++) {<br>               Point[] q = new Point[3];<br>               q[0] = p[i]; q[1] = p[j]; q[2] = p[k];<br>               double area = polygonArea(q);<br>               if (area &gt; ret) ret = area;<br>            }<br>         }<br>      }<br>      return ret;<br>   }<br> <br>   class Point {<br>      public int x;<br>      public int y;<br>      public Point(int x, int y) {<br>         this.x = x;<br>         this.y = y;<br>      }<br>      public double len() {<br>         return Math.sqrt(x * x + y * y);<br>      }<br>      public Point add(Point p) {<br>         return new Point(x + p.x, y + p.y);<br>      }<br>      public Point sub(Point p) {<br>         return new Point(x - p.x, y - p.y);<br>      }<br>      public int dot(Point p) {<br>         return (x * p.x + y * p.y);<br>      }<br>      public int cross(Point p) {<br>         return (x * p.y - y * p.x);<br>      }<br>   }<br> <br>   double polygonArea(Point[] p) {<br>      int area = 0;<br>      for (int i = 1; i + 1 &lt; p.length; i++) {<br>         area += p[i].sub(p[0]).cross(p[i + 1].sub(p[0]));<br>      }<br>      return Math.abs(area / 2.0);<br>   }<br>}<br>// Powered by [Googly Bot]<br></td>