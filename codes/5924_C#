<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections;<br> <br>public class OneMorePoint<br>{<br>  public static Array DupArray(object v, params int[] lens)<br>  {<br>    if(lens.Length==0)<br>      return Array.CreateInstance(v.GetType(), 0);<br>    for(int i=lens.Length-1; i&gt;=0; i--)<br>      v = DupArray(v, lens[i]);<br>    return (Array)v;<br>  }<br>  public static Array DupArray(object v, int len)<br>  {<br>    Array r = Array.CreateInstance(v.GetType(), len);<br>    ICloneable c = v as ICloneable;<br>    if(c==null)<br>      while(--len&gt;=0)<br>        r.SetValue(v, len);<br>    else<br>      while(--len&gt;=0)<br>        r.SetValue(c.Clone(), len);<br>    return r;<br>  }<br>  public static Array FormatRow(string s, char format)<br>  {<br>    return FormatCells(s.Split(' '), format);<br>  }<br>  public static void ListsDisperseDirect(params IList[] datas)<br>  {<br>    ArrayList vlist;<br>    ListsDisperseDirect(out vlist, datas);<br>  }<br>  public static void ListsDisperseDirect(out ArrayList vlist, params IList[] datas)<br>  {<br>    int[][] ret = new int[datas.Length][];<br>    Hashtable ht = Counting(datas);<br>    vlist = new ArrayList(ht.Keys);<br>    vlist.Sort();<br>    ht = Posmap(vlist);<br>    for(int i=datas.Length-1;i&gt;=0; i--)<br>      MappingListDirect(ht, datas[i]);<br>  }<br>  public static Array MatrixTranspose(Array m, int cols)<br>  {<br>    Array ret = Array.CreateInstance(m.GetType().GetElementType(), cols);<br>    for(int i=cols-1; i&gt;=0; i--)<br>      ret.SetValue(Array.CreateInstance(m.GetType().GetElementType().GetElementType(), m.Length), i);<br>    for(int i=m.Length-1; i&gt;=0; i--)<br>      for(int j = cols-1; j&gt;=0; j--)<br>        ((Array)ret.GetValue(j)).SetValue(((Array)m.GetValue(i)).GetValue(j), i);<br>    return ret;<br>  }<br>  public static Hashtable Counting(params IEnumerable[] datas)<br>  {<br>    Hashtable ht = new Hashtable();<br>    Counting(ht, datas);<br>    return ht;<br>  }<br>  public static void Counting(Hashtable ht, params IEnumerable[] datas)<br>  {<br>    foreach(IEnumerable data in datas)<br>      foreach(object o in data)<br>        if(ht.Contains(o))<br>          ht[o] = (int)ht[o] + 1;<br>        else<br>          ht[o] = 1;<br>  }<br>  private static Array newArray(char format, int len)<br>  {<br>    switch(format)<br>    {<br>      case 'I':<br>        return Array.CreateInstance(typeof(int), len);<br>    }<br>    throw new InvalidCastException();<br>  }<br>  public static Hashtable Posmap(IList list)<br>  {<br>    Hashtable ht = new Hashtable();<br>    for(int i=0; i&lt;list.Count; i++)<br>      ht[list[i]] = i;<br>    return ht;<br>  }<br>  public static Array FormatMatrix(string[] ss, char format)<br>  {<br>    int i=ss.Length;<br>    Array ret = Array.CreateInstance(newArray(format,0).GetType(), i);<br>    while(--i&gt;=0)<br>      ret.SetValue(FormatRow(ss[i], format), i);<br>    return ret;<br>  }<br>  public static Array FormatCells(string[] ss, char format)<br>  {<br>    int i=ss.Length;<br>    Array ret = newArray(format, i);<br>    while(--i&gt;=0)<br>      ret.SetValue(Format(ss[i], format), i);<br>    return ret;<br>  }<br>  public static void MappingListDirect(Hashtable ht, IList list)<br>  {<br>    ArrayList b = new ArrayList(list);<br>    for(int i=list.Count-1; i&gt;=0; i--)<br>      list[i] = ht[b[i]];<br>  }<br>  public static object Format(string s, char format)<br>  {<br>    switch(format)<br>    {<br>      case 'I':<br>        return int.Parse(s.Trim());<br>    }<br>    throw new InvalidCastException();<br>  }<br>  public string interiorPoint(string[] rectangles)<br>  {<br>    int n=rectangles.Length;<br>    int[][] xyxy = (int[][])MatrixTranspose(FormatMatrix(rectangles, 'I'), 4);<br>    ListsDisperseDirect(xyxy[0], xyxy[2]);<br>    ListsDisperseDirect(xyxy[1], xyxy[3]);<br>    bool[,] m = new bool[100, 100];<br>    int[]  xmax = new int[100],  xmin = (int[])DupArray(100, 100),<br>      ymax = new int[100],  ymin = (int[])DupArray(100, 100);<br>    for(int i=n-1; i&gt;=0; i--)<br>      for(int j=xyxy[0][i]; j&lt;xyxy[2][i]; j++)<br>      {<br>        if(xyxy[1][i]&gt;ymax[j])<br>          ymax[j] = xyxy[1][i];<br>        if(xyxy[3][i]&lt;ymin[j])<br>          ymin[j] = xyxy[3][i];<br>        for(int k=xyxy[1][i]; k&lt;xyxy[3][i]; k++)<br>        {<br>          if(xyxy[0][i]&gt;xmax[k])<br>            xmax[k] = xyxy[0][i];<br>          if(xyxy[2][i]&lt;xmin[k])<br>            xmin[k] = xyxy[2][i];<br>          m[j,k] = true;<br>        }<br>      }<br>    for(int i = 99; i&gt;=0; i--)<br>      for(int j=ymin[i]; j&lt;ymax[i]; j++)<br>        if(!m[i,j] &amp;&amp; xmin[j] &lt;=i &amp;&amp; xmax[j] &gt; i)<br>          return "YES";<br>    return "NO";<br>  }<br>}<br></td>