<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;sstream&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;cmath&gt;<br>#include &lt;iostream&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;string&gt;<br>#include &lt;vector&gt;<br><br>using namespace std;<br><br>typedef long long ll;<br>typedef pair&lt;int,int&gt; pii;<br>typedef pair&lt;double,double&gt; pdd;<br>typedef vector&lt;int&gt; vi;<br>typedef vector&lt;string&gt; vs;<br>typedef map&lt;string,int&gt; msi;<br><br>int best[110][110][25][2];<br>struct ForceTest {<br><br>  int Best(int certain, int think, int units, bool badseed) {<br>    if (certain == 0) return 0;<br>    if (units == 0) return 1&lt;&lt;25;<br><br>    int &amp;r = best[certain][think][units][badseed];<br>    if (r == -1) {<br>      r = 1&lt;&lt;25;<br>      for (int i = 1; i &lt;= think; ++i) {<br>  r &lt;?= 1 + max(Best(certain-i, think-i, units, badseed),<br>          Best(badseed ? think : i-1, i-1, units-1, badseed));<br>      }<br>      for (int i = think+1; i &lt;= certain; ++i) {<br>  r &lt;?= 1 + max(Best(certain-i, certain-i, units, false),<br>          Best(i-1, think, units-1, badseed));<br>      }<br>      //      printf("best %d %d %d %d = %d\n", certain, think, units, badseed);<br>    }<br>    return r;<br>  }<br><br>   int fewestTests(int maxForce, int testUnits) {<br>     memset(best, -1, sizeof(best));<br>     return Best(maxForce, maxForce, testUnits, true);<br>   }<br><br>};<br><br><br>// Powered by FileEdit<br>// Powered by CodeProcessor<br></td>