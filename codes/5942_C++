<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;vector&gt;<br>#include &lt;string&gt;<br>#include &lt;sstream&gt;<br>#include &lt;iostream&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;cctype&gt;<br> <br>using namespace std;<br> <br>class FunctionDependency<br>{<br>public: vector&lt;string&gt; <br>      scriptingOrder(vector&lt;string&gt; funcs,vector&lt;string&gt; depends)<br>    {<br>      vector&lt;string&gt;  retu;<br>      int flag[50][50];<br>      int depe[50];<br>      int temp,j,i;<br>      memset(flag,0,sizeof(flag));<br>      memset(depe,0,sizeof(depe));<br>      for(i=0;i&lt;funcs.size();i++)<br>      {<br>        istringstream is(depends[i]);<br>        while(is&gt;&gt;temp)<br>        {<br>          if(flag[i][temp]==0)<br>          {<br>            flag[i][temp]=1;<br>            depe[i]++;<br>          }<br>        }<br>      }<br>      string cur="";<br>      int index=-1;<br>      for(i=0;i&lt;funcs.size();i++)<br>      {<br>        cur="";<br>        for(j=0;j&lt;funcs.size();j++)<br>        {  <br>          if(depe[j]==0)<br>          {<br>            if(cur=="")<br>            {<br>              cur=funcs[j];<br>              index=j;<br>            }<br>            else if(funcs[j]&lt;cur)<br>            {<br>              cur=funcs[j];<br>              index=j;<br>            }<br>          }<br>        }<br>        retu.push_back(cur);<br>        depe[index]=-1;<br>        for(j=0;j&lt;funcs.size();j++)<br>        {<br>          if(flag[j][index]==1)<br>          {<br>            flag[index][j]=0;<br>            depe[j]--;<br> <br>          }<br>        }<br>      }<br>      return retu;<br> <br>    }<br> <br>};<br></td>