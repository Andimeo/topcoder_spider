<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>public class FunctionDependency {<br>  class Func implements Comparable&lt;Func&gt; {<br>    String name;<br>    int idx;<br>    public Func(String name, int idx){<br>      this.name = name;<br>      this.idx = idx;<br>    }<br>    public int compareTo(Func that){<br>      return this.name.compareTo(that.name);<br>    }<br>  }<br><br>    public String[] scriptingOrder(String[] funcs, String[] depends) {<br>    boolean[] printed = new boolean[funcs.length];<br><br>    ArrayList&lt;String&gt; res = new ArrayList&lt;String&gt;();<br><br>    ArrayList&lt;Func&gt; canBePrinted = new ArrayList&lt;Func&gt;();<br>    for (int n=0; n&lt;funcs.length; n++){<br>      canBePrinted.clear();<br>      for (int i=0; i&lt;funcs.length; i++){<br>        if (printed[i]) continue;<br>        if (depends[i].trim().equals("")){<br>          canBePrinted.add(new Func(funcs[i],i));<br>        } else {<br>          String[] temp = depends[i].split(" ");<br>          boolean independent = true;<br>          for (String d : temp){<br>            int idx = Integer.parseInt(d);<br>            if (!printed[idx]){<br>              independent = false;<br>              break;<br>            }<br>          }<br>          if (independent){<br>            canBePrinted.add(new Func(funcs[i],i));<br>          }<br>        }<br>      }<br>      Collections.sort(canBePrinted);<br><br>      Func p = canBePrinted.get(0);<br>      printed[p.idx] = true;<br>      res.add(p.name);<br>    }<br><br>        return res.toArray(new String[res.size()]);<br>    }<br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by CodeProcessor<br></td>