<td class="problemText" colspan="8" valign="middle" align="left">
            // another fine solution by misof<br>// #includes {{{<br>#include &lt;algorithm&gt;<br>#include &lt;numeric&gt;<br> <br>#include &lt;iostream&gt;<br>#include &lt;sstream&gt;<br>#include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;queue&gt;<br>#include &lt;set&gt;<br>#include &lt;map&gt;<br> <br>#include &lt;cstdio&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cctype&gt;<br>#include &lt;cassert&gt;<br> <br>#include &lt;cmath&gt;<br>#include &lt;complex&gt;<br>using namespace std;<br>// }}}<br> <br>/////////////////// PRE-WRITTEN CODE FOLLOWS, LOOK DOWN FOR THE SOLUTION ////////////////////////////////<br> <br>// pre-written code {{{<br>#define REP(i,n) for(int i=0;i&lt;(int)(n);++i)<br>#define SIZE(t) ((int)((t).size()))<br>#define SQR(x) ((x)*(x))<br>// }}}<br> <br>/////////////////// CODE WRITTEN DURING THE COMPETITION FOLLOWS ////////////////////////////////<br> <br>char type[64];<br>double X[64], Y[64], Z[64];<br> <br>class FindTriangle {<br>public:<br>  double largestArea(vector &lt;string&gt; points) {<br>    int N = SIZE(points);<br>    REP(i,N) {<br>      stringstream SS(points[i]);<br>      SS &gt;&gt; type[i] &gt;&gt; X[i] &gt;&gt; Y[i] &gt;&gt; Z[i];<br>    }<br>    double res = 0.0;<br>    REP(i,N) REP(j,i) REP(k,j) {<br>      int ok = 0;<br>      if (type[i] == type[j]) if (type[i] == type[k]) ok=1;<br>      if (type[i] != type[j]) if (type[i] != type[k]) if (type[j] != type[k]) ok=1;<br>      if (!ok) continue;<br>      double ux=X[j]-X[i], uy=Y[j]-Y[i], uz=Z[j]-Z[i];<br>      double vx=X[k]-X[i], vy=Y[k]-Y[i], vz=Z[k]-Z[i];<br>      double area = sqrt( SQR(ux*vy-vx*uy) + SQR(uy*vz-vy*uz) + SQR(uz*vx-ux*vz) );<br>      res &gt;?= area*0.5;<br>    }<br>    return res;<br>  }<br> <br> <br>};<br> <br> <br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003]<br>// Powered by CodeProcessor<br></td>