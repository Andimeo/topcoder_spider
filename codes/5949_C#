<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br><br>public class Equidistance {<br>  int n;<br>  long[] a;<br>  long[] b;<br>  long result;<br><br>  public long minimumEffort(int[] initial) {<br>    n = initial.Length;<br><br>    long[] at = new long[n];<br><br>    for (int i = 0; i &lt; n; ++i)<br>      at[i] = initial[i];<br><br>    Array.Sort(at);<br><br>    result = long.MaxValue;<br><br>    for (int fix = 0; fix &lt; n; ++fix)<br>    {<br>      a = new long[n];<br>      b = new long[n];<br>      <br>      for (int i = 0; i &lt; n; ++i)<br>      {<br>        a[i] = (i - fix);<br>        b[i] = at[fix] - at[i];<br>      }<br><br>      check(1);<br>      check(-1);<br>      for (int i = 0; i &lt; n; ++i)<br>        if (a[i] != 0)<br>        {<br>          double value = (-b[i] / a[i]);<br>          long v = (long) value;<br>          check(v);<br>          check(v + 1);<br>          check(v - 1);<br>        }<br>    }<br><br>    return result;<br>  }<br><br>  private void check(long y)<br>  {<br>    if (y == 0)<br>      return;<br>    long sum = 0;<br>    for (int i = 0; i &lt; n; ++i)<br>      sum += Math.Abs(a[i] * y + b[i]);<br>    if (sum &lt; result)<br>      result = sum;<br>  }<br><br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003] [modified for C# by Petr]<br>// Powered by CodeProcessor<br></td>