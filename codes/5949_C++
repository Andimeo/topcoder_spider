<td class="problemText" colspan="8" valign="middle" align="left">
            # include &lt;algorithm&gt;<br># include &lt;bitset&gt;<br># include &lt;cassert&gt;<br># include &lt;cctype&gt;<br># include &lt;cmath&gt;<br># include &lt;complex&gt;<br># include &lt;cstdio&gt;<br># include &lt;cstdlib&gt;<br># include &lt;cstring&gt;<br># include &lt;ctime&gt;<br># include &lt;deque&gt;<br># include &lt;functional&gt;<br># include &lt;iostream&gt;<br># include &lt;iterator&gt;<br># include &lt;list&gt;<br># include &lt;map&gt;<br># include &lt;numeric&gt;<br># include &lt;queue&gt;<br># include &lt;set&gt;<br># include &lt;sstream&gt;<br># include &lt;stack&gt;<br># include &lt;string&gt;<br># include &lt;valarray&gt;<br># include &lt;vector&gt;<br># include &lt;utility&gt;<br><br>using namespace  std  ;<br><br>// Constants<br>const int INF =  1000000000 ;<br>const long double EPS =  1e-10L ;<br>const long double PI = 3.1415926535897932384626433832795L ;<br><br>// Types<br>typedef  long double  ld ;<br>typedef  long long ll ;<br>typedef  pair &lt; int , int &gt; pii ;<br>typedef  vector &lt; int &gt; vi ;<br>typedef  vector &lt; pii &gt; vp ;<br>typedef  vector &lt; ld  &gt; vd ;<br>typedef  vector &lt; string  &gt; vs ;<br>typedef  vector &lt; bool &gt;  vb ;<br>typedef  queue &lt;  int  &gt; qi ;<br>typedef  queue &lt;  pii  &gt; qp ;<br>typedef  map  &lt; string , int &gt; msi ;<br>typedef  map  &lt; string , string &gt;  mss  ;<br>typedef  set  &lt; int &gt;  si ;<br>typedef vector &lt; ll &gt; vl ;<br><br>class Equidistance<br>{<br>// Global<br><br>// Functions<br>  ll abs ( ll x )<br>  {<br>    if ( x &lt; 0 )<br>      return - x ;<br>    return x ;<br>  }<br>public :<br>  long long minimumEffort ( vector &lt;int&gt; p )<br>  {<br>    long long res = ll ( INF ) * INF ;<br>    int n = p . size ( ) ;<br>    sort ( p . begin ( ) , p . end ( ) ) ;<br>    for ( int i = 0 ; i &lt; n ; ++ i )<br>    {<br>      for ( int j = 0 ; j &lt; n ; ++ j )<br>      {<br>        if ( i == j )<br>          continue ;<br>        ll k1 = abs ( ll ( p [ j ] ) - p [ i ] ) / abs ( j - i ) ;<br>        if ( k1 == 0 )<br>          ++ k1 ;<br>        vl cur ( n ) ;<br>        for ( int k = 0 ; k &lt; n ; ++ k )<br>          cur [ k ] = p [ i ] + k1 * ( k - i ) ;<br>        ll cres = 0 ;<br>        for ( int k = 0 ; k &lt; n ; ++ k )<br>          cres += abs ( cur [ k ] - p [ k ] ) ;<br>        res = min ( res , cres ) ;<br>        ++ k1 ;<br>        cur = vl ( n ) ;<br>        for ( int k = 0 ; k &lt; n ; ++ k )<br>          cur [ k ] = p [ i ] + k1 * ( k - i ) ;<br>        cres = 0 ;<br>        for ( int k = 0 ; k &lt; n ; ++ k )<br>          cres += abs ( cur [ k ] - p [ k ] ) ;<br>        res = min ( res , cres ) ;<br>      }<br>    }<br>    return res ;<br>  }<br>  <br><br>} ;<br><br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003]<br>// Powered by CodeProcessor<br></td>