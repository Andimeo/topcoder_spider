<td class="problemText" colspan="8" valign="middle" align="left">
            Imports Microsoft.VisualBasic<br>Imports System<br>Imports System.Collections<br>Imports System.Math<br> <br>Public Class RobotTesting<br>    Public Function estimateCommands(ByVal N As Integer, ByVal program As String) As Double<br>        Dim i, j, k, l As Integer<br> <br>        Dim iNum(N - 1, N - 1) As Integer<br>        For i = 0 To N - 1<br>            For j = 0 To N - 1<br>                iNum(i, j) = 50000<br>            Next<br>        Next<br>        Dim bProjected(N - 1, N - 1) As Boolean<br> <br>        Dim aMoves(program.Length - 1, 1) As Integer<br>        For i = 0 To program.Length - 1<br>            If program.Substring(i, 1) = "U" Then<br>                aMoves(i, 1) = -1<br>            End If<br>            If program.Substring(i, 1) = "D" Then<br>                aMoves(i, 1) = 1<br>            End If<br>            If program.Substring(i, 1) = "L" Then<br>                aMoves(i, 0) = -1<br>            End If<br>            If program.Substring(i, 1) = "R" Then<br>                aMoves(i, 0) = 1<br>            End If<br>        Next<br> <br>        Dim x, y As Integer<br>        Dim xMax, yMax, xMin, yMin As Integer<br> <br>        For i = 0 To program.Length - 1<br>            x += aMoves(i, 0)<br>            y += aMoves(i, 1)<br>            If x &gt; xMax Then<br>                If x &lt;= N Then<br>                    For j = 0 To N - 1<br>                        iNum(N - x, j) = Min(iNum(N - x, j), i + 1)<br>                    Next<br>                End If<br>                xMax = x<br>            End If<br>            If y &gt; yMax Then<br>                If y &lt;= N Then<br>                    For j = 0 To N - 1<br>                        iNum(j, N - y) = Min(iNum(j, N - y), i + 1)<br>                    Next<br>                End If<br>                yMax = y<br>            End If<br>            If x &lt; xMin Then<br>                If -x &lt;= N Then<br>                    For j = 0 To N - 1<br>                        iNum(-1 - x, j) = Min(iNum(-1 - x, j), i + 1)<br>                    Next<br>                End If<br>                xMin = x<br>            End If<br>            If y &lt; yMin Then<br>                If -y &lt;= N Then<br>                    For j = 0 To N - 1<br>                        iNum(j, -1 - y) = Min(iNum(j, -1 - y), i + 1)<br>                    Next<br>                End If<br>                yMin = y<br>            End If<br>        Next<br> <br>        Dim iPath As Integer = program.Length<br>        Dim iStart As Integer<br>        Dim iDir As Integer<br>        Dim xStart, yStart, xDir, yDir, xEnd, yEnd As Integer<br>        Dim xPos, yPos As Integer<br> <br>        If x &lt;&gt; 0 Or y &lt;&gt; 0 Then<br>            If x &gt; 0 Then<br>                xStart = N - 1<br>                xEnd = 0<br>                xDir = -1<br>            Else<br>                xStart = 0<br>                xEnd = N - 1<br>                xDir = 1<br>            End If<br>            If y &gt; 0 Then<br>                yStart = N - 1<br>                yEnd = 0<br>                yDir = -1<br>            Else<br>                yStart = 0<br>                yEnd = N - 1<br>                yDir = 1<br>            End If<br>            For xPos = xStart To xEnd Step xDir<br>                For yPos = yStart To yEnd Step yDir<br>                    If Not bProjected(xPos, yPos) Then<br>                        i = xPos - x<br>                        j = yPos - y<br>                        Do While i &gt;= 0 And i &lt;= N - 1 And j &gt;= 0 And j &lt;= N - 1<br>                            iNum(i, j) = Min(iNum(i, j), iNum(i + x, j + y) + iPath)<br>                            bProjected(i, j) = True<br>                            i -= x<br>                            j -= y<br>                        Loop<br>                    End If<br>                Next<br>            Next<br>        End If<br> <br>        Dim lTot As Long = 0<br>        For i = 0 To N - 1<br>            For j = 0 To N - 1<br>                lTot += iNum(i, j)<br>            Next<br>        Next<br>        Return lTot / (N * N)<br> <br>    End Function<br>End Class<br></td>