<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections.Generic;<br><br>public class LogCutter {<br>  int[] x;<br>  int c;<br>  int l;<br>  <br>  public string bestCut(int L, int A, int K, int C) {<br>    c = C;<br>    l = L;<br>    Dictionary&lt;int, object&gt; all = new Dictionary&lt;int, object&gt;();<br>    for (int i = 1; i &lt;= K; ++i)<br>      all[(int) (((long) A * i) % (L - 1) + 1)] = null;<br>    all[0] = null;<br>    all[L] = null;<br>    x = new int[all.Count];<br>    all.Keys.CopyTo(x, 0);<br>    Array.Sort(x);<br>    int left = 0;<br>    for (int i = 0; i &lt; x.Length - 1; ++i)<br>      left = Math.Max(left, x[i + 1] - x[i]);<br>    --left;<br>    int right = L;<br>    int dummy;<br>    while (right - left &gt; 1)<br>    {<br>      int middle = (left + right) / 2;<br>      if (can(middle, out dummy))<br>        right = middle;<br>      else<br>        left = middle;<br>    }<br>    can(right, out dummy);<br>    if (dummy == 0)<br>      dummy = x[1];<br>    return right + " " + dummy;<br>  }<br><br>  private bool can(int maxStep, out int minLeft)<br>  {<br>    int where = l;<br>    int at = x.Length - 1;<br>    for (int i = 0; i &lt; c; ++i)<br>    {<br>      while (at &gt;= 0 &amp;&amp; x[at] &gt;= where - maxStep)<br>        --at;<br>      ++at;<br>      where = x[at];<br>    }<br>    minLeft = x[at];<br>    return minLeft &lt;= maxStep;<br>  }<br><br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003] [modified for C# by Petr]<br>// Powered by CodeProcessor<br></td>