<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br><br>public class FactorialTower {<br>  int factorial(int z, int m)<br>  {<br>    if (z &gt;= m)<br>      return 0;<br>    else<br>    {<br>      int r = 1 % m;<br>      for (int i = 1; i &lt;= z; ++i)<br>        r = (r * i) % m;<br>      return r;<br>    }<br>  }<br><br>  int power(int a, int b, int m)<br>  {<br>    int r = 1 % m;<br>    a %= m;<br>    for (int i = 0; i &lt; b; ++i)<br>    {<br>      r = (r * a) % m;<br>    }<br>    return r;<br>  }<br><br>  public int exprValue(int[] a, int m) <br>  {<br>    if (m == 1)<br>      return 0;<br>    else if (a.Length == 1)<br>    {<br>      return factorial(a[0], m);<br>    }<br>    else<br>    {<br>      int p = factorial(a[0], m);<br>      int before;<br>      int len;<br>      findCycle(p, m, out before, out len);<br>      int[] b = new int[a.Length - 1];<br>      Array.Copy(a, 1, b, 0, b.Length);<br>      int q;<br>      if (isExactGreater(b, before)) <br>      {<br>        q = exprValue(b, len) + before + len - before % len;<br>      }<br>      else<br>      {<br>        q = exactExprValue(b);<br>      }<br>      return power(p, q, m);<br>    }<br>  }<br><br>  double factorialLn(int x)<br>  {<br>    double res = 0;<br>    for (int i = 2; i &lt;= x; ++i)<br>      res += Math.Log(i);<br>    return res;<br>  }<br><br>  bool isExactGreater(int[] a, double what)<br>  {<br>    if (what &lt; 1)<br>      return true;<br>    else <br>    {<br>      if (a.Length == 0 || a[0] &lt;= 1)<br>        return false;<br>      else <br>      {<br>        if (a[0] &gt; 8)<br>          return true;<br>        double baseln = factorialLn(a[0]);<br>        double whatln = Math.Log(what);<br>        int[] b = new int[a.Length - 1];<br>        Array.Copy(a, 1, b, 0, b.Length);<br>        return isExactGreater(b, whatln / baseln);<br>      }<br>    }<br>  }<br><br>  int exactFactorial(int z)<br>  {<br>    int r = 1;<br>    for (int i = 1; i &lt;= z; ++i)<br>      r *= i;<br>    return r;<br>  }<br><br>  int exactPower(int a, int b)<br>  {<br>    int r = 1;<br>    for (int i = 0; i &lt; b; ++i)<br>      r *= a;<br>    return r;<br>  }<br><br>  int exactExprValue(int[] a)<br>  {<br>    if (a.Length == 0)<br>      return 1;<br>    else <br>    {<br>      int[] b = new int[a.Length - 1];<br>      Array.Copy(a, 1, b, 0, b.Length);<br>      int z = exactFactorial(a[0]);<br>      if (z &lt;= 1)<br>        return z;<br>      else<br>        return exactPower(z, exactExprValue(b));<br>    }<br>  }<br><br>  void findCycle(int p, int m, out int before, out int len)<br>  {<br>    int[] was = new int[m];<br>    int at = 1;<br>    int val = p % m;<br>    while (was[val] == 0)<br>    {<br>      was[val] = at;<br>      val = (val * p) % m;<br>      ++at;<br>    }<br>    before = was[val];<br>    len = at - before;<br>  }<br><br><br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003] [modified for C# by Petr]<br>// Powered by CodeProcessor<br></td>