<td class="problemText" colspan="8" valign="middle" align="left">
            Imports Microsoft.VisualBasic<br>Imports System<br>Imports System.Collections<br>Imports System.Math<br> <br>Public Class SnailRace<br>    Private iSnails, iDistance, iSnailSpeed, iGeorgeSpeed As Integer<br>    Private dTT As Double<br>    Public Function shortestTime(ByVal snails As Integer, ByVal distance As Integer, ByVal snailSpeed As Integer, ByVal georgeSpeed As Integer) As Double<br>        Dim i, j, k, l As Integer<br>        If georgeSpeed &lt;= snailSpeed Then Return (distance - 1) / snailSpeed<br>        iSnails = snails<br>        iDistance = distance - 1<br>        iSnailSpeed = snailSpeed<br>        iGeorgeSpeed = georgeSpeed<br> <br>        Dim xMin, xMax, xtry As Double<br>        xMin = 0<br>        xMax = iDistance<br>        Dim dRes As Double<br>        For i = 0 To 1000<br>            xtry = (xMax + xMin) / 2<br>            dRes = dOffset(xtry)<br>            If dRes &gt; iDistance Then<br>                xMax = xtry<br>            Else<br>                xMin = xtry<br>            End If<br>        Next<br>        Return dTT<br>    End Function<br> <br>    Private Function dOffset(ByVal xCarry As Double) As Double<br>        Dim dCarryTime, dTTM, dTTWB, dDTWB, dTWB As Double<br>        dCarryTime = xCarry / iGeorgeSpeed<br>        dTTM = iSnails * dCarryTime<br>        dTWB = xCarry - dCarryTime * iSnailSpeed<br>        dDTWB = dTWB * iGeorgeSpeed / (iGeorgeSpeed + iSnailSpeed)<br>        dTTWB = (dDTWB / iGeorgeSpeed) * (iSnails - 1)<br>        dTT = dTTM + dTTWB<br>        dOffset = iSnails * xCarry - (iSnails - 1) * dDTWB<br>    End Function<br>End Class<br></td>