<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br> <br>public class PowerSupply {<br>    boolean between(int x, int y, int z) {<br>        return (x &lt;= y &amp;&amp; y &lt;= z) || (z &lt;= y &amp;&amp; y &lt;= x);<br>    }<br> <br>    public int calc(int[] x, int[] y, double D) {<br>        int n = x.length;<br>        int best = 0;<br>        for (int i = 0; i &lt; n; i++) {<br>            for (int j = 0; j &lt; n; j++) {<br>                if (Math.abs(x[i] - x[j]) &lt;= 2 * D) {<br>                    int r = 0;<br>                    for (int k = 0; k &lt; n; k++) {<br>                        if (between(x[i], x[k], x[j])) {<br>                            r++;<br>                        }<br>                    }<br>                    if (r &gt; best) {<br>                        best = r;<br>                    }<br>                }<br>            }<br>        }<br>        return best;<br>    }<br> <br>    public int maxProfit(int[] x, int[] y, int D) {<br>        int n = x.length;<br>        int best;<br>        best = Math.max(calc(x, y, D), calc(y, x, D));<br>        int[] xp = new int[n];<br>        int[] yp = new int[n];<br>        for (int i = 0; i &lt; n; i++) {<br>            xp[i] = x[i] - y[i];<br>            yp[i] = x[i] + y[i];<br>        }<br>        best = Math.max(best, calc(xp, yp, D * Math.sqrt(2)));<br>        best = Math.max(best, calc(yp, xp, D * Math.sqrt(2)));<br>        return best;<br>    }<br> <br> <br>}<br> <br> <br>// Powered by PopsEdit<br> <br>// Powered by CodeProcessor<br></td>