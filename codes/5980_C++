<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;vector&gt;<br>#include &lt;string&gt;<br>#include &lt;sstream&gt;<br> <br>using namespace std;<br> <br>typedef vector &lt;int&gt; vi;<br>typedef vector &lt;vi&gt; vvi;<br>typedef vector &lt;string&gt; vs;<br>typedef vector &lt;bool&gt; vb;<br> <br>void dfs(vvi&amp; adj, vi&amp; segments, int i)<br>{<br>  for (int j = 0; j &lt; adj[i].size(); ++j)<br>    if (segments[adj[i][j]] &lt; 0) {<br>      segments[adj[i][j]] = segments[i];<br>      dfs(adj, segments, adj[i][j]);<br>    }<br>}<br> <br>class GalaxyTrip<br>{<br>  public:<br>  vi possibleValues (vs dependencies)<br>  {<br>    int n = dependencies.size();<br>    vvi adj(n);<br>    for (int i = 0; i &lt; n; ++i) <br>      if (dependencies[i] != "") {<br>        istringstream iss(dependencies[i]);<br>        int a;<br>        while (!iss.eof()) {<br>          iss &gt;&gt; a;<br>          adj[i].push_back(a);<br>        }<br>      }<br>    vi segments(n, -1);<br>    int s = 0;<br>    for (int i = 0; i &lt; n; ++i)<br>      if (segments[i] &lt; 0) {<br>        segments[i] = s++;<br>        dfs(adj, segments, i);<br>      }<br>    vi sizes(s, 0);<br>    for (int i = 0; i &lt; n; ++i)<br>      ++sizes[segments[i]];<br>    vb poss(n+1, 0);<br>    poss[0] = 1;<br>    for (int i = 0; i &lt; s; ++i)<br>      for (int j = n; j &gt;= sizes[i]; --j)<br>        if (poss[j-sizes[i]])<br>          poss[j] = 1;<br>    vi rez;<br>    for (int i = 1; i &lt;= n; ++i)<br>      if (poss[i])<br>        rez.push_back(i);<br>    return rez;<br>  }<br>};<br></td>