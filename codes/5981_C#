<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br><br>public class GalaxyExpedition {<br>  bool[,] cdep;<br>  int[] deg;<br>  int[] cnum;<br>  int m;<br><br>  public int[] possibleValues(string[] dependencies) {<br>    int n = dependencies.Length;<br>    bool[,] dep = new bool[n, n];<br>    for (int i = 0; i &lt; n; ++i)<br>    {<br>      dep[i, i] = true;<br>      if (dependencies[i].Length == 0)<br>        continue;<br>      string[] p = dependencies[i].Split(' ');<br>      foreach (string d in p)<br>      {<br>        dep[i, int.Parse(d)] = true;<br>      }<br>    }<br>    for (int k = 0; k &lt; n; ++k)<br>      for (int i = 0; i &lt; n; ++i)<br>        for (int j = 0; j &lt; n; ++j)<br>          if (dep[i, k] &amp;&amp; dep[k, j])<br>            dep[i, j] = true;<br>    int[] comp = new int[n];<br>    for (int i = 0; i &lt; n; ++i)<br>      comp[i] = -1;<br>    m = 0;<br>    for (int i = 0; i &lt; n; ++i)<br>      if (comp[i] &lt; 0)<br>      {<br>        for (int j = i; j &lt; n; ++j)<br>          if (dep[i, j] &amp;&amp; dep[j, i])<br>            comp[j] = m;<br>        ++m;<br>      }<br>    cdep = new bool[m, m];<br>    cnum = new int[m];<br>    for (int i = 0; i &lt; n; ++i)<br>    {<br>      ++cnum[comp[i]];<br>      for (int j = 0; j &lt; n; ++j)<br>        if (dep[i, j])<br>          cdep[comp[i], comp[j]] = true;<br>    }<br><br>    deg = new int[m];<br>    for (int i = 0; i &lt; m; ++i)<br>      for (int j = 0; j &lt; m; ++j)<br>        if (i != j &amp;&amp; cdep[i, j])<br>          ++deg[i];<br>    int[] res = new int[]{0};<br>    for (int i = 0; i &lt; m; ++i)<br>      if (deg[i] == 0)<br>        res = combine(res, getFor(i));<br>    int[] nres = new int[res.Length - 1];<br>    for (int i = 1; i &lt; res.Length; ++i)<br>      nres[i - 1] = res[i];<br>    return nres;<br>  }<br><br>  private int[] combine(int[] a, int[] b)<br>  {<br>    bool[] can = new bool[a[a.Length - 1] + b[b.Length - 1] + 1];<br>    for (int i = 0; i &lt; a.Length; ++i)<br>      for (int j = 0; j &lt; b.Length; ++j)<br>        can[a[i] + b[j]] = true;<br>    int num = 0;<br>    for (int i = 0; i &lt; can.Length; ++i)<br>      if (can[i])<br>        ++num;<br>    int[] res = new int[num];<br>    num = 0;<br>    for (int i = 0; i &lt; can.Length; ++i)<br>      if (can[i])<br>      {<br>        res[num++] = i;<br>      }<br>    return res;<br>  }<br><br>  private int[] getFor(int root)<br>  {<br>    int[] res = new int[]{0};<br>    for (int i = 0; i &lt; m; ++i)<br>      if (deg[i] == deg[root] + 1 &amp;&amp; cdep[i, root])<br>        res = combine(res, getFor(i));<br>    int[] nres = new int[res.Length + 1];<br>    for (int i = 0; i &lt; res.Length; ++i)<br>      nres[i + 1] = res[i] + cnum[root];<br>    return nres;<br>  }<br><br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003] [modified for C# by Petr]<br>// Powered by CodeProcessor<br></td>