<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br> <br>public class GalaxyExpedition {<br>    public int[] possibleValues(String[] dependencies) {<br>        int n = dependencies.length;<br>        boolean[][] d = new boolean[n][n];<br>        for (int i = 0; i &lt; n; i++) {<br>            d[i][i] = true;<br>            Scanner sc = new Scanner(dependencies[i]);<br>            while (sc.hasNextInt()) {<br>                int j = sc.nextInt();<br>                d[i][j] = true;<br>            }<br>        }<br> <br>        for (int i = 0; i &lt; n; i++) {<br>            for (int j = 0; j &lt; n; j++) {<br>                for (int k = 0; k &lt; n; k++) {<br>                    d[j][k] = d[j][k] || (d[j][i] &amp;&amp; d[i][k]);<br>                }<br>            }<br>        }<br> <br>        boolean[][] a = new boolean[n + 1][n + 1];<br>        int[] take = new int[n];<br>        Arrays.fill(take, -1);<br>        int[] size = new int[n + 1];<br>        int m = 1;<br>        for (int i = 0; i &lt; n; i++) {<br>            if (take[i] != -1) {<br>                continue;<br>            }<br>            take[i] = m;<br> <br>            for (int j = 0; j &lt; n; j++) {<br>                if (d[i][j] &amp;&amp; d[j][i]) {<br>                    take[j] = m;<br>                    size[m]++;<br>                }<br>            }<br>            a[m][0] = true;<br>            m++;<br>        }<br> <br>        for (int i = 0; i &lt; n; i++) {<br>            for (int j = 0; j &lt; n; j++) {<br>                if (d[i][j]) {<br>                    a[take[i]][take[j]] = true;<br>                }<br>            }<br>        }<br> <br>        int[] p = new int[m];<br>        Arrays.fill(p, 0);<br>        for (int i = 0; i &lt; m; i++) {<br>            for (int j = 0; j &lt; m; j++) {<br>                if (i != j &amp;&amp; a[i][j]) {<br>                    boolean ok = true;<br>                    for (int k = 0; k &lt; m; k++) {<br>                        if (k != i &amp;&amp; a[i][k] &amp;&amp; !a[j][k]) {<br>                            ok = false;<br>                        }<br>                    }<br>                    if (ok) {<br>                        p[i] = j;<br>                    }<br>                }<br>            }<br>        }<br>        p[0] = -1;<br> <br>        boolean[][] sz = new boolean[m][n + 1];<br>        boolean[] u = new boolean[m];<br>        for (int t = 0; t &lt; m; t++) {<br>            for (int i = 0; i &lt; m; i++) {<br>                if (u[i]) {<br>                    continue;<br>                }<br>                boolean can = true;<br>                for (int j = 0; j &lt; m; j++) {<br>                    if (j != i &amp;&amp; a[j][i] &amp;&amp; !u[j]) {<br>                        can = false;<br>                    }<br>                }<br>                if (can) {<br>                    u[i] = true;<br>                    boolean[] reach = new boolean[n + 1];<br>                    reach[size[i]] = true;<br>                    for (int j = 0; j &lt; m; j++) {<br>                        if (p[j] == i) {<br>                            boolean[] nr = new boolean[n + 1];<br>                            for (int k = 0; k &lt;= n; k++) {<br>                                if (sz[j][k]) {<br>                                    for (int l = n; l &gt;= k; l--) {<br>                                        if (reach[l - k]) {<br>                                            nr[l] = true;<br>                                        }<br>                                    }<br>                                }<br>                            }<br>                            reach = nr;<br>                        }<br>                    }<br>                    reach[0] = true;<br> <br>                    for (int k = 0; k &lt;= n; k++) {<br>                       if (reach[k]) {<br>                           sz[i][k] = true;<br>                       }<br>                    }<br> <br>                    break;<br>                }<br>            }<br>        }<br> <br>        int al = 0;<br>        for (int i = 1; i &lt;= n; i++) {<br>            if (sz[0][i]) {<br>                al++;<br>            }<br>        }<br>        int[] answer = new int[al];<br>        al = 0;<br>        for (int i = 1; i &lt;= n; i++) {<br>            if (sz[0][i]) {<br>                answer[al++] = i;<br>            }<br>        }<br> <br>        return answer;<br>    }<br> <br> <br>}<br> <br> <br>// Powered by PopsEdit<br> <br>// Powered by CodeProcessor<br></td>