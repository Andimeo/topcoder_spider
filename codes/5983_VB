<td class="problemText" colspan="8" valign="middle" align="left">
            Public Class RunLengthEncoding<br> <br>    Public Function decode(ByVal text As String) As String<br> <br>        Dim length As Integer = text.Length<br>        Dim position As Integer = 0<br>        Dim temp As String<br>        Dim numbers As New System.Collections.ArrayList<br>        Dim characters As New System.Collections.ArrayList<br> <br>        While position &lt; length<br> <br>            If IsNumeric(text.Chars(position)) Then<br>                temp = ""<br>                While IsNumeric(text.Chars(position))<br>                    temp &amp;= text.Chars(position)<br>                    position += 1<br>                End While<br>                If temp.Length &gt; 3 Then<br>                    Return "TOO LONG"<br>                    Exit Function<br>                End If<br>                numbers.Add(Integer.Parse(temp))<br>                characters.Add(text.Chars(position))<br>            Else<br>                numbers.Add(1)<br>                characters.Add(text.Chars(position))<br>            End If<br> <br>            position += 1<br> <br>        End While<br> <br>        Dim total As Integer = 0<br>        For Each i As Integer In numbers<br>            total += i<br>        Next<br> <br>        If total &gt; 50 Then<br>            Return "TOO LONG"<br>        Else<br>            temp = ""<br>            For i As Integer = 0 To numbers.Count - 1<br>                For j As Integer = 0 To numbers(i) - 1<br>                    temp &amp;= characters(i)<br>                Next<br>            Next<br> <br>            Return temp<br>        End If<br>    End Function<br> <br>    Private Function IsNumeric(ByVal character As Char) As Boolean<br>        Dim reg As String = "[0-9]"<br>        Return System.Text.RegularExpressions.Regex.IsMatch(character, reg)<br>    End Function<br> <br>End Class<br></td>