<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;map&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cstring&gt;<br>#include &lt;cassert&gt;<br>#include &lt;set&gt;<br>#include &lt;iostream&gt;<br>#include &lt;sstream&gt;<br>#include &lt;cstddef&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;utility&gt;<br>#include &lt;iterator&gt;<br>#include &lt;numeric&gt;<br>#include &lt;list&gt;<br> <br>using namespace std;<br> <br>typedef vector&lt;int&gt; vi;<br>typedef vector&lt;int&gt;::iterator vi_i;<br>typedef vector&lt;string&gt; vs;<br>typedef vector&lt;string&gt;::iterator vs_i;<br>typedef pair&lt;int, int&gt; pii;<br> <br>template&lt;class T&gt;<br>void splitstr(const string &amp;s, vector&lt;T&gt; &amp;out)<br>{<br>    istringstream in(s);<br>    T tmp;<br> <br>    out.clear();<br>    while (in &gt;&gt; tmp) out.push_back(tmp);<br>}<br> <br>class IntegerGenerator<br>{<br>public:<br>    string nextInteger(vector &lt;int&gt; allowed, string current);<br>};<br> <br>string IntegerGenerator::nextInteger(vector &lt;int&gt; allowed, string current)<br>{<br>    bool allow[10];<br> <br>    memset(allow, 0, sizeof(allow));<br>    for (size_t i = 0; i &lt; allowed.size(); i++)<br>        allow[allowed[i]] = true;<br> <br>    vector&lt;int&gt; cur;<br>    cur.push_back(0);<br>    for (size_t i = 0; i &lt; current.size(); i++)<br>    {<br>        cur.push_back(current[i] - '0');<br>        if (!allow[cur.back()]) return "INVALID INPUT";<br>    }<br>    if (current[0] == '0') return "INVALID INPUT";<br> <br>    int p = cur.size() - 1;<br>    cur[p]++;<br>    while (true)<br>    {<br>        while (cur[p] &lt; 10 &amp;&amp; !allow[cur[p]]) cur[p]++;<br>        if (cur[p] &lt; 10) break;<br> <br>        cur[p] = 0;<br>        while (!allow[cur[p]]) cur[p]++;<br>        p--;<br>        cur[p]++;<br>    }<br>    while (cur.front() == 0) cur.erase(cur.begin());<br> <br>    ostringstream o;<br>    for (size_t i = 0; i &lt; cur.size(); i++)<br>        o &lt;&lt; cur[i];<br>    return o.str();<br>}<br> <br> <br>// Powered by FileEdit<br></td>