<td class="problemText" colspan="8" valign="middle" align="left">
            // Cry as challange phase is passing by<br><br>#include &lt;algorithm&gt;<br>#include &lt;functional&gt;<br><br>#include &lt;cmath&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cstring&gt;<br><br>#include &lt;set&gt;<br>#include &lt;vector&gt;<br>#include &lt;string&gt;<br>#include &lt;sstream&gt;<br>#include &lt;iostream&gt;<br><br>using namespace std;<br><br>#define FORC(it,v) for( __typeof((v).begin()) it = (v).begin(); it != (v).end(); ++it )<br><br>typedef pair&lt; int, int &gt; point;<br>#define X first<br>#define Y second<br><br>vector&lt; point &gt; V;<br><br>const int inf = 2147483647;<br><br>class EnclosingRectangle {<br>public:<br>    int smallestArea( vector &lt;string&gt; X, vector &lt;string&gt; Y ) {<br>        string Xs = ""; FORC( it, X ) Xs += *it;<br>        string Ys = ""; FORC( it, Y ) Ys += *it;<br><br>        V.clear();<br>        <br>        istringstream in1( Xs );<br>        istringstream in2( Ys );<br>        for( int x, y; in1 &gt;&gt; x &amp;&amp; in2 &gt;&gt; y; )<br>            V.push_back( point( x, y ) );<br><br>        set&lt; int &gt; pq;<br><br>        FORC( it, V ) pq.insert( it-&gt;X );<br><br>        int sol = inf;<br>        int n = V.size();<br>        int need = ( n + 1 ) / 2;<br><br>        vector&lt; int &gt; VY( pq.begin(), pq.end() );<br><br>        for( int i = 0; i &lt; ( int )VY.size(); ++i )<br>            for( int j = i; j &lt; ( int )VY.size(); ++j ) {<br>                vector&lt; int &gt; S;<br><br>                int a = VY[i];<br>                int b = VY[j];<br><br>                for( int k = 0; k &lt; n; ++k )<br>                    if( a &lt;= V[k].X &amp;&amp; V[k].X &lt;= b )<br>                        S.push_back( V[k].Y );<br><br>                sort( S.begin(), S.end() );<br>                <br>                for( int k = 0; k+need-1 &lt; ( int )S.size(); ++k )<br>                    sol &lt;?= ( S[ k+need-1 ] - S[k] + 2 ) * ( b - a + 2 );<br>            }<br>        <br>        return sol;<br>    }<br>};<br><br><br><br><br><br><br><br><br><br>// Powered by FileEdit<br>// Powered by moj 3.0 beta 11 [modified TZTester]<br>// Powered by CodeProcessor<br></td>