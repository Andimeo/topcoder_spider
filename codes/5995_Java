<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br><br>import static java.lang.System.*;<br><br>class Point implements Comparable&lt;Point&gt; {<br>  public Point() {<br>  }<br><br>  int x,y;<br>  public Point(int x, int y) {<br>    this.x = x;<br>    this.y = y;<br>  }<br><br>  public int compareTo(Point o) {<br>    return y-o.y;<br>  }<br>}<br>public class EnclosingRectangle {<br>  Set&lt;Integer&gt; x0 = new TreeSet&lt;Integer&gt; ();<br>  Set&lt;Integer&gt; x1 = new TreeSet&lt;Integer&gt; ();<br>  Set&lt;Integer&gt; y0 = new TreeSet&lt;Integer&gt; ();<br>  public int smallestArea(String[] X, String[] Y) {<br>    int kq = Integer.MAX_VALUE;<br>    String xs = ""; for (String xx:X) xs += xx;<br>    String ys = ""; for (String yy:Y) ys += yy;<br>    X = xs.split("[ ]+");<br>    Y = ys.split("[ ]+");<br>    for (String xx:X) {<br>      int xxx = new Integer(xx);<br>      x0.add( xxx-1 );<br>      x1.add( xxx+1 );<br>    }<br>    for (String yy:Y) {<br>      int yyy = new Integer(yy);<br>      y0.add( yyy-1 );<br>    }<br>    <br>    ArrayList&lt;Point&gt; ps = new ArrayList&lt;Point&gt; ();<br>    for (int i = 0; i &lt; X.length; i++) {<br>      int xxx = new Integer( X[i]), yyy = new Integer( Y[i]);<br>      ps.add( new Point (xxx, yyy));<br>    }<br>    Collections.sort( ps );<br>    int n = X.length;<br>    out.println( x0.size()+" "+ x1.size() + " "+ y0.size() + " "+ n);<br>    for(int i0: x0) {<br>      for (int i1:x1) {<br>        if (i1&gt;i0) { <br>          int dx = i1-i0;<br>          for (int j0:y0) {<br>            int count = 0;<br>            for (Point p: ps) {<br>              if (p.x &gt;i0 &amp;&amp; p.x&lt;i1 &amp;&amp; p.y&gt;j0) {<br>                int temp = dx * Math.abs( p.y+1 - j0);<br>                if (kq&lt;=temp) break;<br>                count ++;<br>                if (count&gt;=n/2) {<br>                  kq = temp;<br>                  break;<br>                }<br>              }<br>            }<br>          }<br>        }<br>      }<br>    }<br>    <br>    return kq;<br>  }<br>}<br><br><br>// Powered by FileEdit<br>// Powered by CodeProcessor<br></td>