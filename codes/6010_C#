<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections.Generic;<br>using System.Collections;<br>using System.Text.RegularExpressions;<br><br>public class ProbabilisticTranslator<br>{<br>    List&lt;string&gt; sourceWords = new List&lt;string&gt;();<br>    List&lt;string&gt; targetWords = new List&lt;string&gt;();<br>    Dictionary&lt;string, string[]&gt; dic = new Dictionary&lt;string, string[]&gt;();<br>    Dictionary&lt;string, int&gt; freq = new Dictionary&lt;string, int&gt;();<br><br>    public int maximumFidelity(string[] text, string[] dictionary, string[] frequencies)<br>    {<br>        for (int i = 0; i &lt; text.Length; i++)<br>        {<br>            string[] val = text[i].Split(' ');<br>            for (int j = 0; j &lt; val.Length; j++)<br>                sourceWords.Add(val[j]);<br>        }<br>        for (int i = 0; i &lt; dictionary.Length; i++)<br>        {<br>            string[] val = dictionary[i].Split(new char[] { ' ', ':'});<br>            string[] x = new string[val.Length - 1];<br>            for (int j = 1; j &lt; val.Length; j++)<br>                x[j-1] = val[j];<br>            dic.Add(val[0], x);<br>        }<br>        for (int i = 0; i &lt; frequencies.Length; i++)<br>        {<br>            string[] val = frequencies[i].Split(' ');<br>            freq.Add(val[0] + " " + val[1], Int32.Parse(val[2]));<br>        }<br><br>        List&lt;int[]&gt; y = new List&lt;int[]&gt;();<br>        string[] trans  = dic[sourceWords[0]];<br>        string[] prevTrans = null;<br>        int[] vall = new int[trans.Length];<br>        y.Add(vall);<br>        prevTrans = trans;<br>        for (int i = 1; i &lt; sourceWords.Count; i++)<br>        {<br>            trans = dic[sourceWords[i]];<br>            int[] val = new int[trans.Length];<br>            for (int j = 0; j &lt; val.Length; j++)<br>            {<br>                int max = -1;<br>                for (int k = 0; k &lt; prevTrans.Length; k++)<br>                {<br>                    int ff ;<br>                    if (!freq.TryGetValue(prevTrans[k] + " " + trans[j], out ff))<br>                        ff = 0;<br>                    if (max &lt; y[i - 1][k] + ff)<br>                        max = y[i - 1][k] + ff;<br>                }<br>                val[j] = max;<br>            }<br>            y.Add(val);<br>            prevTrans = trans;<br>        }<br>        int maxx = -1;<br>        for (int i = 0; i &lt; y[sourceWords.Count - 1].Length; i++)<br>        {<br>            maxx = Math.Max(maxx, y[sourceWords.Count - 1][i]);<br>        }<br>        return maxx;<br><br><br>    }<br><br>};<br></td>