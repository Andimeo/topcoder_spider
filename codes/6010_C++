<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;vector&gt;<br>#include &lt;list&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;deque&gt;<br>#include &lt;stack&gt;<br>#include &lt;bitset&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;functional&gt;<br>#include &lt;numeric&gt;<br>#include &lt;utility&gt;<br>#include &lt;sstream&gt;<br>#include &lt;iostream&gt;<br>#include &lt;iomanip&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;ctime&gt;<br> <br>using namespace std;<br> <br>class ProbabilisticTranslator {<br>public:<br>  int maximumFidelity(vector &lt;string&gt;, vector &lt;string&gt;, vector &lt;string&gt;);<br>};<br> <br>deque &lt;string&gt; org;<br>map &lt;string, set &lt;string&gt; &gt; di;<br>map &lt;string, map &lt;string, int&gt; &gt; fc;<br> <br>int ret;<br> <br>void fun (map &lt;string, int&gt; t, int p)<br>{<br>  if (p &gt;= org.size())<br>  {<br>    for (map &lt;string, int&gt;::iterator j = t.begin(); j != t.end(); j++)<br>    {<br>      ret = max (ret, j-&gt;second);<br>    }<br>    return;<br>  }<br>  map &lt;string, int&gt; cv;<br>  for (set&lt;string&gt;::iterator i = di[org[p]].begin(); i != di[org[p]].end(); i++)<br>  {<br>    cv[*i] = 0;<br>    for (map &lt;string, int&gt;::iterator j = t.begin(); j != t.end(); j++)<br>    {<br>      cv[*i] = max (cv[*i], fc[j-&gt;first][*i] + j-&gt;second);<br>    }<br>  }<br>  <br>  fun (cv, p+1);<br>}<br> <br>int ProbabilisticTranslator::maximumFidelity(vector &lt;string&gt; t, vector &lt;string&gt; d, vector &lt;string&gt; f) {<br>  //int fi = 0;<br>  org.clear();<br>  di.clear();<br>  fc.clear();<br>  <br>  for (int i = 0; i &lt; t.size(); i++)<br>  {<br>    istringstream in(t[i]);<br>    string s;<br>    while (in &gt;&gt; s)<br>    {<br>      org.push_back (s);<br>    }<br>  }<br>  <br>  for (int i = 0; i &lt; d.size(); i++)<br>  {<br>    istringstream in(d[i]);<br>    string so, s;<br>    in &gt;&gt; so;<br>    char c;<br>    in &gt;&gt; c;<br>    while (in &gt;&gt; s)<br>    {<br>      di[so].insert (s);<br>    }<br>  }<br>  <br>  for (int i = 0; i &lt; f.size(); i++)<br>  {<br>    char xt[30], yt[30];<br>    int fr;<br>    sscanf (f[i].c_str(), "%s %s %d", xt, yt, &amp;fr);<br>    string x(xt), y(yt);<br>    fc[x][y] = fr;<br>  }<br>  <br>  map &lt;string, int&gt; cv;<br>  for (set&lt;string&gt;::iterator i = di[org[0]].begin(); i != di[org[0]].end(); i++)<br>  {<br>    cv[*i] = 0;<br>  }<br>  <br>  ret = 0;<br>  fun (cv, 1);<br>  <br>  return ret;<br>}<br> <br> <br>//Powered by [KawigiEdit] 2.0!<br></td>