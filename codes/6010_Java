<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>public class ProbabilisticTranslator {<br>  public int maximumFidelity(String[] text, String[] dict, String[] fr) {<br>    StringBuilder sb = new StringBuilder();<br>    sb.append(text[0]);<br>    for (int i = 1; i &lt; text.length; ++i) sb.append(" ").append(text[i]);<br>    String[] w = sb.toString().split(" ");<br>    int n = w.length;<br>    Map&lt;String, Set&lt;String&gt; &gt; d = new HashMap&lt;String, Set&lt;String&gt; &gt;();<br>    for (int i = 0; i &lt; dict.length; ++i) {<br>      String[] ss = dict[i].split(" ");<br>      Set&lt;String&gt; list = new HashSet&lt;String&gt;();<br>      for (int j = 2; j &lt; ss.length; ++j) list.add(ss[j]);<br>      d.put(ss[0], list);<br>    }<br>    Map&lt;String, Map&lt;String, Integer&gt; &gt; f = new HashMap&lt;String, Map&lt;String, Integer&gt; &gt;(); <br>    for (int i = 0; i &lt; fr.length; ++i) {<br>      String[] ss=fr[i].split(" ");<br>      Map&lt;String, Integer&gt; ff = f.get(ss[0]);<br>      if (ff==null) {<br>        ff = new HashMap&lt;String, Integer&gt;();<br>        f.put(ss[0], ff);<br>      }<br>      ff.put(ss[1], Integer.valueOf(ss[2]));<br>    }<br>    if (n == 1) return 0;<br>    Map&lt;String, Integer&gt;[] a = new HashMap[n];<br>    for (int i = 0; i &lt; n; ++i) {<br>      a[i] = new HashMap&lt;String, Integer&gt;();<br>    }<br>    for (String str : d.get(w[0])) {<br>      a[0].put(str, 0);<br>    }<br>    int bb = 0;<br>    for (int i = 1; i &lt; n; ++i) {<br>      for (String s2 : d.get(w[i])) {<br>        int best = 0;<br>        for (String s1 : d.get(w[i-1])) {<br>          int t1 = 0;<br>          if (f.get(s1) != null &amp;&amp; f.get(s1).get(s2) != null) t1 = f.get(s1).get(s2);<br>          <br>          int t = a[i-1].get(s1) + t1;<br>          if (t&gt;best) best = t;<br>        }<br>        a[i].put(s2, best);<br>        if (i == n-1 &amp;&amp; best &gt; bb) bb = best;<br>      }  <br>    }<br>    <br>    <br>    <br>    return bb;<br>  }<br>}<br> <br>// Powered by PopsEdit<br></td>