<td class="problemText" colspan="8" valign="middle" align="left">
            // I think it is good to submit wrong solutions sometimes to give others challenging opportunities.<br>#include &lt;algorithm&gt;<br>#include &lt;string&gt;<br>#include &lt;ctype.h&gt;<br>using namespace std;<br><br>typedef long long ll;<br><br>// Greatest Common Divisor<br>ll gcd(ll x, ll y) {return x ? gcd(y%x,x) : y;}<br><br>#define please<br>#line 3 "TwoEquations.cc"<br><br>void parseNum(const char* &amp;t, int&amp; x) {<br>  x = 0;<br>  if(*t == '-') {<br>    t++;<br>    parseNum(t, x);<br>    x*=-1;<br>    }<br>  else {<br>    x = 0;<br>    while(isdigit(*t)) {<br>      x *= 10;<br>      x += *t;<br>      x -= '0';<br>      t++;<br>      }<br>    }<br>  }<br><br>void parse(const char *t, int&amp; x, int&amp; y, int&amp; z) {<br>  if(*t == '(') t++;<br>  parseNum(t, x);<br>  while(*t != '-' &amp;&amp; !isdigit(*t)) t++;<br>  parseNum(t, y);<br>  while(*t != '-' &amp;&amp; !isdigit(*t)) t++;<br>  parseNum(t, z);<br>  }<br><br>string none = "NO SOLUTIONS";<br>string mult = "MULTIPLE SOLUTIONS";<br>string z;<br><br>string its(int k) { <br>  char buf[60];<br>  sprintf(buf, "%d", k);<br>  return buf;<br>  }<br>  <br>string reduce(int l, int m) {<br>  int d = gcd(l,m);<br>  l /= d; m /= d;<br>  if(m &lt; 0) {l=-l; m=-m;}<br>  if(l&lt;0) return z + "(" + its(l) + ")/" + its(m);<br>  else return its(l) + "/" + its(m);<br>  }<br><br>class TwoEquations {<br>  public:<br>  string solve(string first, string second) {<br>    // !FDI<br>    int ax, ay, az, bx, by, bz;<br>    parse(first.c_str(), ax, ay, az);<br>    parse(second.c_str(), bx, by, bz);<br>    printf("%d %d %d %d %d %d\n", ax,ay,az,bx,by,bz);<br>    if(ax == 0 &amp;&amp; ay == 0 &amp;&amp; az != 0)<br>      return none;<br>    if(bx == 0 &amp;&amp; by == 0 &amp;&amp; bz != 0)<br>      return none;<br>    if(ax == 0 &amp;&amp; ay == 0 &amp;&amp; az == 0)<br>      return mult;<br>    if(bx == 0 &amp;&amp; by == 0 &amp;&amp; bz == 0)<br>      return mult;<br>    if(ax*by == ay*bx &amp;&amp; ax*bz==az*bx &amp;&amp; ay*bz==by*az)<br>      return mult;<br>    if(ax*by == ay*bx)<br>      return none;<br>    please return z + "X=" + reduce(by*az-ay*bz, by*ax-bx*ay) +<br>      " Y=" + reduce(bx*az-ax*bz, bx*ay-by*ax);<br>    }<br>  };<br><br>// ax x + ay y = az<br>// bx x + by y = bz<br><br>// bx ax x + bx ay y = bx az<br>// bx ax x + by ax y = ax bz<br>// bx az - ax bz = (bx ay - by ax) y<br>//<br><br><br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003]<br>// Powered by CodeProcessor<br></td>