<td class="problemText" colspan="8" valign="middle" align="left">
            Imports Microsoft.VisualBasic<br>Imports System<br>Imports System.Collections<br>Imports System.Math<br> <br>Public Class TwoEquations<br>    Public Function solve(ByVal first As String, ByVal second As String) As String<br>        Dim i, j, k, l As Integer<br>        Dim X(1) As Integer<br>        Dim Y(1) As Integer<br>        Dim C(1) As Integer<br> <br>        Dim s As String<br>        Dim sS() As String<br>        For i = 0 To 1<br>            If i = 0 Then s = first<br>            If i = 1 Then s = second<br>            sS = s.Split(" ")<br>            If sS(4).StartsWith("(") Then<br>                C(i) = CInt(sS(4).Substring(1, sS(4).Length - 2))<br>            Else<br>                C(i) = CInt(sS(4))<br>            End If<br> <br>            If sS(0).StartsWith("(") Then<br>                X(i) = CInt(sS(0).Substring(1, sS(0).Length - 4))<br>            Else<br>                X(i) = CInt(sS(0).Substring(0, sS(0).Length - 2))<br>            End If<br>            If sS(2).StartsWith("(") Then<br>                Y(i) = CInt(sS(2).Substring(1, sS(2).Length - 4))<br>            Else<br>                Y(i) = CInt(sS(2).Substring(0, sS(2).Length - 2))<br>            End If<br>        Next<br> <br>        Dim iDet As Integer<br>        Dim xNum, yNum, xDen, yDen As Integer<br>        iDet = X(0) * Y(1) - X(1) * Y(0)<br>        If iDet = 0 Then<br>            If X(0) = 0 And Y(0) = 0 And C(0) &lt;&gt; 0 Then Return "NO SOLUTIONS"<br>            If X(1) = 0 And Y(1) = 0 And C(1) &lt;&gt; 0 Then Return "NO SOLUTIONS"<br>            If X(0) = 0 And Y(0) = 0 Then Return "MULTIPLE SOLUTIONS"<br>            If Abs(Y(0)) + Abs(Y(1)) &gt; 0 Then<br>                If Y(0) * C(1) = C(0) * Y(1) Then Return "MULTIPLE SOLUTIONS"<br>            Else<br>                If X(0) * C(1) = X(1) * C(0) Then Return "MULTIPLE SOLUTIONS"<br>            End If<br>            Return "NO SOLUTIONS"<br>        Else<br>            xNum = Y(1) * C(0) - Y(0) * C(1)<br>            xDen = iDet<br>            yNum = X(0) * C(1) - X(1) * C(0)<br>            yDen = iDet<br>            j = iGCD(Abs(xNum), Abs(xDen))<br>            xNum \= j<br>            xDen \= j<br>            j = iGCD(Abs(yNum), Abs(yDen))<br>            yNum \= j<br>            yDen \= j<br>            If xDen &lt; 0 Then<br>                xNum = -xNum<br>                xDen = -xDen<br>            End If<br>            If yDen &lt; 0 Then<br>                yNum = -yNum<br>                yDen = -yDen<br>            End If<br>            Dim sRet As String<br>            sRet = "X="<br>            If xNum &lt; 0 Then<br>                sRet &amp;= "(" &amp; xNum &amp; ")/" &amp; xDen &amp; " Y="<br>            Else<br>                sRet &amp;= xNum &amp; "/" &amp; xDen &amp; " Y="<br>            End If<br>            If yNum &lt; 0 Then<br>                sRet &amp;= "(" &amp; yNum &amp; ")/" &amp; yDen<br>            Else<br>                sRet &amp;= yNum &amp; "/" &amp; yDen<br>            End If<br>            Return sRet<br>        End If<br> <br>    End Function<br> <br>    Private Function iGCD(ByVal a As Integer, ByVal b As Integer) As Integer<br>        Dim i As Integer<br>        If a &gt; b Then<br>            i = a<br>            a = b<br>            b = i<br>        End If<br>        If a = 1 Then Return 1<br>        If a = 0 Then Return b<br>        If a = b Then Return a<br>        Return iGCD(b Mod a, a)<br>    End Function<br>End Class<br></td>