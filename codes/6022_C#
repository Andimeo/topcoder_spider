<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections;<br><br>public class DigitByDigit {<br>  Hashtable got;<br>  const int ACCOUNT = 10;<br>  double[] accounted;<br><br>  class State<br>  {<br>    public bool[] used;<br>    public int spare;<br><br>    public State(int num)<br>    {<br>      used = new bool[num];<br>    }<br><br>    public State Clone(int spareDelta, int useId)<br>    {<br>      State s = new State(used.Length);<br>      used.CopyTo(s.used, 0);<br>      s.spare = spare + spareDelta;<br>      if (useId &gt;= 0)<br>        s.used[useId] = true;<br>      return s;<br>    }<br><br>    public override bool Equals(object obj)<br>    {<br>      State s = (State) obj;<br>      if (spare != s.spare)<br>        return false;<br>      for (int i = 0; i &lt; used.Length; ++i)<br>        if (used[i] != s.used[i])<br>          return false;<br>      return true;<br>    }<br><br>    public override int GetHashCode()<br>    {<br>      int res = spare;<br>      for (int i = 0; i &lt; used.Length; ++i)<br>      {<br>        res *= 3137;<br>        if (used[i])<br>          ++res;<br>      }<br>      return res;<br>    }<br><br>  }<br><br>  double calc(State s)<br>  {<br>    if (got.ContainsKey(s))<br>      return (double) got[s];<br><br>    bool any = false;<br>    for (int i = 0; i &lt; accounted.Length; ++i)<br>      if (!s.used[i])<br>        any = true;<br>    double res = 0;<br><br>    if (any) {<br>      for (int k = 0; k &lt; 10; ++k)<br>      {<br>        double cur = 0;<br>        if (s.spare &gt; 0)<br>          cur = Math.Max(cur, calc(s.Clone(-1, -1)));<br>        for (int i = 0; i &lt; accounted.Length; ++i)<br>          if (!s.used[i])<br>            cur = Math.Max(cur, accounted[i] * k + calc(s.Clone(0, i)));<br>        res += cur;<br>      }<br>    }<br>    <br>    res /= 10;<br>    got[s] = res;<br>    return res;<br>  }<br><br>  public double expectedScore(string digits) {<br>    got = new Hashtable();<br>    double res = 0;<br>    double p10 = 1;<br>    ArrayList possibles = new ArrayList();<br>    for (int i = digits.Length - 1; i &gt;= 0; --i)<br>    {<br>      if (digits[i] == '_')<br>        possibles.Add(p10);<br>      else<br>        res += (digits[i] - '0') * p10;<br>      p10 *= 10;<br>    }<br>    double[] poss = new double[possibles.Count];<br>    possibles.CopyTo(poss);<br>    accounted = new double[Math.Min(ACCOUNT, poss.Length)];<br>    for (int i = 0; i &lt; accounted.Length; ++i)<br>      accounted[i] = poss[poss.Length - 1 - i];<br>    State start = new State(accounted.Length);<br>    start.spare = poss.Length - accounted.Length;<br>    return res + calc(start);<br>  }<br><br>  <br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003] [modified for C# by Petr]<br>// Powered by CodeProcessor<br></td>