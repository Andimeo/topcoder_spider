<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Text;<br>using System.Text.RegularExpressions;<br>using System.Collections;<br>using System.Drawing;<br><br>public class CageTheMonster {<br>    public CageTheMonster() {<br>     // UK MI6 also have openings<br>     // http://www.sis.gov.uk/output/Page4.html<br>    }<br><br>    int[] dirX = { 1, -1, 0, 0 };<br>    int[] dirY = { 0, 0, 1, -1 };<br><br>    public bool isJailed(int x, int y, string[] m, int covered)<br>    {<br>        char[][] map = new char[m.Length][];<br>        for (int i = 0; i &lt; m.Length; i++)<br>            map[i] = m[i].ToCharArray();<br>        if (((covered &amp; 1) &gt; 0) &amp;&amp; x &gt; 0)<br>        {<br>            for (int i = 0; i &lt; map[x - 1].Length; i++)<br>                map[x - 1][i] = '#';<br>        }<br>        if (((covered &amp; 2) &gt; 0) &amp;&amp; (x + 1 &lt; map.Length))<br>        {<br>            for (int i = 0; i &lt; map[x + 1].Length; i++)<br>                map[x + 1][i] = '#';<br>        }<br>        if (((covered &amp; 4) &gt; 0) &amp;&amp; y &gt; 0)<br>        {<br>            for (int i = 0; i &lt; map.Length; i++)<br>                map[i][y - 1] = '#';<br>        }<br>        if (((covered &amp; 8) &gt; 0) &amp;&amp; (y + 1 &lt; map[0].Length))<br>        {<br>            for (int i = 0; i &lt; map.Length; i++)<br>                map[i][y + 1] = '#';<br>        }<br>        map[x][y] = 'M';<br>        Queue q = new Queue();<br>        q.Enqueue(new Point(x, y));<br>        while (q.Count &gt; 0)<br>        {<br>            Point cur = (Point)q.Dequeue();<br>            if (cur.X == 0) return false;<br>            if (cur.Y == 0) return false;<br>            if (cur.X + 1 == map.Length) return false;<br>            if (cur.Y + 1 == map[0].Length) return false;<br>            for (int i = 0; i &lt; dirX.Length; i++)<br>            {<br>                char c = map[cur.X + dirX[i]][cur.Y + dirY[i]];<br>                if (c == '^' || c == '.')<br>                {<br>                    map[cur.X + dirX[i]][cur.Y + dirY[i]] = 'M';<br>                    q.Enqueue(new Point(cur.X + dirX[i], cur.Y + dirY[i]));<br>                }<br>            }<br>        }<br>        return true;<br>    }<br><br>    public static int NumBits(int x)<br>    {<br>        int ret = 0;<br>        do<br>        {<br>            if ((x &amp; 1) == 1) ret++;<br>            x &gt;&gt;= 1;<br>        } while (x &gt; 0);<br>        return ret;<br>    }<br>    public int capture(string[] map)<br>    {<br>        int min = 10;<br>        for (int x = 0; x &lt; map.Length; x++)<br>            for (int y = 0; y &lt; map[0].Length; y++)<br>                if (map[x][y] == '^')<br>                    for (int covered = 0; covered &lt;= 1 &lt;&lt; 4; covered++)<br>                        if (isJailed(x, y, map, covered))<br>                        {<br>                            min = Math.Min(min, NumBits(covered));<br>                        }<br><br><br>        if (min &gt; 4) return -1;<br>        return min;<br>    }<br><br>}<br><br><br><br>// Powered by FileEdit<br>// Powered by CodeProcessor<br></td>