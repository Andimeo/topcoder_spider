<td class="problemText" colspan="8" valign="middle" align="left">
            Imports Microsoft.VisualBasic<br>Imports System<br>Imports System.Collections<br>Imports System.Math<br> <br>Public Class CageTheMonster<br>    Public Function capture(ByVal labyrinth As String()) As Integer<br>        Dim i, j, k, l As Integer<br>        Dim bFoundTrap As Boolean<br> <br>        Dim aMap(labyrinth.GetUpperBound(0), labyrinth(0).Length - 1) As Integer<br>        For i = 0 To aMap.GetUpperBound(0)<br>            For j = 0 To aMap.GetUpperBound(1)<br>                Select Case labyrinth(i).Substring(j, 1)<br>                    Case "."<br>                        aMap(i, j) = 0<br>                    Case "#"<br>                        aMap(i, j) = 2<br>                    Case "^"<br>                        If i &gt; 0 And i &lt; aMap.GetUpperBound(0) And j &gt; 0 And j &lt; aMap.GetUpperBound(1) Then bFoundTrap = True<br>                        aMap(i, j) = 1<br>                End Select<br>            Next<br>        Next<br>        If Not bFoundTrap Then Return -1<br>        Dim iWallCount As Integer<br>        Dim x, y As Integer<br>        Dim aMovX() As Integer = {1, 0, -1, 0}<br>        Dim aMovY() As Integer = {0, 1, 0, -1}<br> <br>        Dim xBlock(aMap.GetUpperBound(0)) As Boolean<br>        Dim yBlock(aMap.GetUpperBound(1)) As Boolean<br> <br>        Dim oQueue As Queue<br>        Dim aLen(aMap.GetUpperBound(0), aMap.GetUpperBound(1)) As Integer<br>        Dim aPos(1) As Integer<br>        Dim bEscaped As Boolean<br>        Dim iBest As Integer = 4<br> <br>        For x = 1 To aMap.GetUpperBound(0) - 1<br>            For y = 1 To aMap.GetUpperBound(1) - 1<br>                If aMap(x, y) = 1 Then<br>                    For i = 0 To 15<br>                        System.Array.Clear(xBlock, 0, xBlock.Length)<br>                        System.Array.Clear(yBlock, 0, yBlock.Length)<br>                        System.Array.Clear(aLen, 0, aLen.Length)<br>                        iWallCount = 0<br>                        For j = 0 To 3<br>                            If ((1 &lt;&lt; j) And i) &gt; 0 Then<br>                                iWallCount += 1<br>                                Select Case j<br>                                    Case 0<br>                                        xBlock(x - 1) = True<br>                                    Case 1<br>                                        xBlock(x + 1) = True<br>                                    Case 2<br>                                        yBlock(y - 1) = True<br>                                    Case 3<br>                                        yBlock(y + 1) = True<br>                                End Select<br>                            End If<br>                        Next<br> <br>                        aLen(x, y) = 1<br>                        oQueue = New Queue<br>                        oQueue.Enqueue(New Integer() {x, y})<br>                        bEscaped = False<br> <br>                        Do While oQueue.Count &gt; 0 And Not bEscaped<br>                            aPos = oQueue.Dequeue<br>                            For j = 0 To 3<br>                                If aMap(aPos(0) + aMovX(j), aPos(1) + aMovY(j)) &lt; 2 And Not xBlock(aPos(0) + aMovX(j)) And Not yBlock(aPos(1) + aMovY(j)) And aLen(aPos(0) + aMovX(j), aPos(1) + aMovY(j)) = 0 Then<br>                                    If aPos(0) + aMovX(j) = 0 Then bEscaped = True<br>                                    If aPos(0) + aMovX(j) = aMap.GetUpperBound(0) Then bEscaped = True<br>                                    If aPos(1) + aMovY(j) = 0 Then bEscaped = True<br>                                    If aPos(1) + aMovY(j) = aMap.GetUpperBound(1) Then bEscaped = True<br>                                    If Not bEscaped Then<br>                                        oQueue.Enqueue(New Integer() {aPos(0) + aMovX(j), aPos(1) + aMovY(j)})<br>                                        aLen(aPos(0) + aMovX(j), aPos(1) + aMovY(j)) = aLen(aPos(0), aPos(1)) + 1<br>                                    End If<br>                                End If<br>                            Next<br>                        Loop<br>                        If Not bEscaped Then<br>                            iBest = Min(iBest, iWallCount)<br>                        End If<br>                    Next<br>                End If<br>            Next<br>        Next<br> <br>        Return iBest<br> <br>    End Function<br>End Class<br></td>