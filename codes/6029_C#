<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections;<br> <br>public class FamilyTree<br>{<br>  Hashtable pp;<br>  int n;<br>  <br>  char[] t;<br>  int [,] pairs;<br>  int pc;<br>  bool[] bol;<br>  int[] parita;<br>  <br>  bool[,] xx;<br>  <br>  bool go(int kam, int par)<br>  {<br>    if (bol[kam])<br>      return (parita[kam] == par);<br>    <br>    bol[kam] = true;<br>    parita[kam] = par;<br>    <br>    if (t[kam]=='m')<br>      xx[par, 0] = true;<br>     else<br>    if (t[kam]=='f')<br>      xx[par, 1] = true;<br>    <br>    par = 1 - par;<br>    <br>    for (int i = 0; i &lt; pc; ++i)<br>      if (pairs[i, 0] == kam)<br>    {<br>      if (!go (pairs[i, 1], par))<br>        return false;<br>    }<br>       else<br>      if (pairs[i, 1] == kam)<br>    {<br>      if (!go (pairs[i, 0], par))<br>        return false;<br>    }<br>    <br>    return true;<br>  }<br>  <br>  <br>  bool ok(string[] data, int cnt)<br>  {<br>    bool[,] x = new bool[n,n];<br>    t = new char[n];<br>    pairs = new int[n, 2];<br>    pc = 0;<br>    <br>    for (int i = 0; i &lt; n; ++i)<br>      t[i] = '-';<br>    <br>    for (int i = 0; i &lt; cnt; ++i)<br>    {<br>      string[] ss = data[i].Split(' ');<br>      <br>      if (ss[1]!="f" &amp;&amp; ss[1]!="m")<br>      {<br>        int parent = (int)pp[ss[1]];<br>        int child = (int)pp[ss[0]];<br>        <br>        x[parent, child] = true;<br>      }<br>       else<br>      {<br>        int xx = (int)pp[ss[0]];<br>        <br>        if (t[xx] != '-' &amp;&amp; t[xx] != ss[1][0])<br>          return false;<br>        <br>        t[xx] = ss[1][0];<br>      }<br>    }<br>    <br>    for (int i = 0; i &lt; n; ++i)<br>    {<br>      int m = 0;<br>      int f = 0;<br>      int o = 0;<br>      <br>      int a = -1;<br>      int b = -1;<br>      <br>      for (int j = 0; j &lt; n; ++j)<br>        if (x[j, i])<br>      {<br>        if (t[j] == 'm')<br>          ++m;<br>         else<br>        if (t[j] == 'f')<br>          ++f;<br>         else<br>          ++o;<br>        <br>        if (a==-1)<br>          a = j;<br>         else<br>          b = j;<br>      }<br>      <br>      if (m+f+o &gt;= 3 || m &gt;= 2 || f &gt;= 2)<br>        return false;<br>      <br>      if (a != -1 &amp;&amp; b != -1)<br>      {<br>        pairs[pc, 0] = a;<br>        pairs[pc, 1] = b;<br>        pc++;<br>      }<br>    }<br>    <br>    for (int k = 0; k &lt; n; ++k)<br>      for (int i = 0; i &lt; n; ++i)<br>        for (int j = 0; j &lt; n; ++j)<br>          x[i,j] = x[i,j] || (x[i,k] &amp;&amp; x[k, j]);<br>    <br>    for (int i = 0; i &lt; n; ++i)<br>      if (x[i,i])<br>        return false;<br>    <br>    bol = new bool[n];<br>    parita = new int[n];<br>    <br>    for (int i = 0; i &lt; n; ++i)<br>      if (!bol[i])<br>    {<br>      xx = new bool[2,2];<br>      if (!go(i, 0))<br>        return false;<br>      <br>      if (xx[0,0] &amp;&amp; xx[1,0])<br>        return false;<br>      <br>      if (xx[0,1] &amp;&amp; xx[1,1])<br>        return false;<br>      <br>      if (xx[0,0] &amp;&amp; xx[0,1])<br>        return false;<br>      <br>      if (xx[1,0] &amp;&amp; xx[1,1])<br>        return false;<br>    }<br>    <br>    return true;<br>  }<br>  <br>  public int firstBad(string[] data)<br>  {<br>    pp = new Hashtable ();<br>    n = 0;<br>    <br>    foreach (string s in data)<br>    {<br>      string[] ss = s.Split(' ');<br>      <br>      if (!pp.Contains (ss[0]))<br>        pp.Add (ss[0], n++);<br>      <br>      if (ss[1]!="m" &amp;&amp; ss[1]!="f" &amp;&amp; !pp.Contains(ss[1]))<br>        pp.Add (ss[1], n++);<br>    }<br>    <br>    for (int i = 1; i &lt;= data.Length; ++i)<br>      if (!ok(data, i))<br>        return i - 1;<br>    <br>    return -1;<br>  }<br>}<br> <br> <br>// Powered by FileEdit<br> <br> <br>// Powered by FileEdit<br></td>