<td class="problemText" colspan="8" valign="middle" align="left">
            //////////////////////////////////////////////////////////////////////////<br>// TopCoder<br>// SRM 288<br>//<br>// problem: TurnOffLights<br>//<br>// by Michael Rybak<br>//////////////////////////////////////////////////////////////////////////<br><br><br>#include &lt;iostream&gt;<br>#include "stdio.h"<br>#include &lt;list&gt;<br>#include &lt;vector&gt;<br>#include &lt;map&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;string&gt;<br>#define M_PI       3.14159265358979323846<br>#define M_2PI 2*M_PI<br>#include "math.h"<br>using namespace std;<br><br><br><br>#define FOR(i,a,b) for (int _n(b), i(a); i &lt; _n; i++)<br>#define FORD(i,a,b) for(int i=(a),_b=(b);i&gt;=_b;--i)<br>#define REP(i,n) FOR(i,0,n)<br><br>//////////////////////////////////////////////////////////////////////////<br>//CODE WRITTEN DURING THE CONTEST STARTS HERE<br><br>struct CField <br>{<br>  int data[4][4];<br>  int cross[4][4];<br><br>  int GetCross(long x, long y)<br>  {<br>    if (x &lt; 0 || x &gt;= 4 || y &lt; 0 || y &gt;= 4)<br>      return 0;<br>    else<br>      return cross[x][y];<br>  }<br><br>  int CalcNonZeroesAfterCrosses()<br>  {<br>    int res = 0;<br>    REP(i, 4)<br>      REP(j, 4)<br>        res += (data[i][j] + GetCross(i, j) + <br>                GetCross(i + 1, j) + GetCross(i - 1, j) +<br>                GetCross(i, j + 1) + GetCross(i, j - 1)) % 2;<br>    return res;<br>  }<br>};<br><br>class TurnOffLights {<br>  public:<br>  int fewestMoves(vector &lt;string&gt; board) <br>  {<br>    CField f;<br>    REP(i, 4)<br>      REP(j, 4)<br>        f.data[i][j] = board[i][j] == '0' ? 0 : 1;<br><br>    int res = 32;<br>    int MAX_N = 1 &lt;&lt; 16;<br>    REP(i, MAX_N)<br>    {<br>      //decipher operation<br>      int n = 0;<br>      REP(j, 4)<br>        REP(k, 4)<br>        {<br>          f.cross[j][k] = ((i &amp; (1 &lt;&lt; (j * 4 + k))) &gt; 0) ? 1 : 0;<br>          n += f.cross[j][k];<br>        }<br><br>      //maybe better?<br>      res = std::min(res, n + 2 * f.CalcNonZeroesAfterCrosses());<br>    }<br><br>    return res;<br>  }<br>};<br><br><br>// Powered by FileEdit<br></td>