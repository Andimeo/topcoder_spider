<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br> <br>public class StrangeParticles {<br>  int n;<br>  <br>  <br>  public int remain (String [] interacts) {<br>    n = interacts.length;<br>    //Digraph g = new Digraph(n);<br>    boolean [][] adj = new boolean[n][n];<br>    boolean [][] reaches = new boolean[n][n];<br>    for (int i = 0; i &lt; n; i ++) {<br>      for (int j = 0; j &lt; n; j ++) {<br>        if (interacts[i].charAt(j) == '-') {<br>          //g.addEdge(i,j);<br>          adj[i][j] = true;<br>          reaches[i][j] = true;<br>        }<br>      }<br>    }<br>    <br>    <br>    boolean changed = true;<br>    while (changed) {<br>      changed = false;<br>      for (int i = 0; i &lt; n; i ++)<br>      for (int j = 0; j &lt; n; j ++) {<br>        if (!reaches[i][j]) {<br>          for (int k = 0; k &lt; n; k ++) {<br>            if (reaches[i][k] &amp;&amp; reaches[k][j]) {<br>              reaches[i][j] = true;<br>              changed = true;<br>              break;<br>            }<br>          }<br>        }<br>      }<br>    }<br>    <br>    Vector&lt;Vertex&gt; comps = new Vector&lt;Vertex&gt; ();<br>    BitSet set = new BitSet(n);<br>    for (int i = 0; i &lt; n; i ++) {<br>      if (set.get(i)) continue;<br>      Vertex v = new Vertex(i);<br>      comps.add(v);<br>      set.set(i);<br>      for (int j = 0; j &lt; n; j++) {<br>        if (set.get(j)) continue;<br>        if (reaches[i][j] &amp;&amp; reaches[j][i]) {<br>          set.set(j);<br>        }<br>      }<br>    }<br>    Digraph graph = new Digraph(comps);<br>    for (Vertex v: comps) {<br>      for (Vertex w: comps) {<br>        if (v!=w &amp;&amp; reaches[v.index][w.index]) {<br>          graph.addEdge(v,w);<br>        }<br>      }<br>    }<br>    int count = 0;<br>    for (Vertex v:graph.vertices) {<br>      if (v.indeg() == 0)<br>        count ++;<br>    }<br>    return count;<br>  }<br>  <br>  class Digraph {<br>    Vector&lt;Vertex&gt; vertices;<br>    <br>    Digraph () {<br>      vertices = new Vector&lt;Vertex&gt;();<br>    }<br>    <br>    Digraph (int a) {<br>      vertices = new Vector&lt;Vertex&gt;();<br>      for (int i = 0; i &lt; a; i ++)<br>        vertices.add(new Vertex());<br>    }<br>    <br>    Digraph (Vector&lt;Vertex&gt; v) {<br>      vertices = v;<br>    }<br>    <br>    public void addEdge(Vertex v, Vertex w) {<br>      Edge e = new Edge(v,w);<br>      v.addEdgeOut(e);<br>      w.addEdgeIn(e);<br>    }<br>  }<br>  <br>  <br>  class Edge {<br>    Vertex v, w;<br>    <br>    Edge (Vertex v, Vertex w) {<br>      this.v = v;<br>      this.w = w;<br>    }<br>  }<br>  <br>  class Vertex {<br>    Vector&lt;Edge&gt; in, out;<br>    <br>    int index;<br>    <br>    public Vertex () {<br>      in = new Vector&lt;Edge&gt;();<br>      out = new Vector&lt;Edge&gt;();<br>    }<br>    <br>    public Vertex (int i) {<br>      this();<br>      index = i;<br>    }<br>    <br>    public void addEdgeOut(Edge e) {<br>      out.add(e);<br>    }<br>    <br>    public void addEdgeIn (Edge e) {<br>      in.add(e);<br>    }<br>    <br>    public int indeg() {<br>      return in.size();<br>    }<br>    <br>    public int outdeg() {<br>      return out.size();<br>    }<br>  }<br>}<br></td>