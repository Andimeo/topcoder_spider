<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;vector&gt;<br>#include &lt;list&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;deque&gt;<br>#include &lt;stack&gt;<br>#include &lt;bitset&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;functional&gt;<br>#include &lt;numeric&gt;<br>#include &lt;utility&gt;<br>#include &lt;sstream&gt;<br>#include &lt;iostream&gt;<br>#include &lt;iomanip&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;ctime&gt;<br> <br>using namespace std;<br> <br>const int maxl=3000+5;<br>class PalindromePartition {<br>public:<br>  char s[maxl],rev[maxl];<br>  int f[maxl],L;<br>  bool check(int a,int b)<br>  {<br>    return memcmp(s+a,rev+L+1-b,b-a+1)==0;<br>  }<br>  int partition(vector &lt;string&gt; vs)<br>  {<br>    int i,j,k;<br>    string str="";<br>    for (k=0;k&lt;vs.size();k++)<br>      str+=vs[k];<br>    strcpy(s+1,str.c_str());<br>    L=strlen(s+1);<br>    f[0]=0;<br>    for (i=1;i&lt;=L;i++)<br>      rev[i]=s[L+1-i];<br>    for (i=1;i&lt;=L;i++)<br>    {<br>      f[i]=f[i-1]+1;<br>      for (j=0;j&lt;i;j++)<br>        if (f[j]+1&lt;f[i] &amp;&amp; check(j+1,i))<br>          f[i]=f[j]+1;<br>    }<br>    return f[L];<br>  }<br>};<br></td>