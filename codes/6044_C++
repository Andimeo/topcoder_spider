<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;algorithm&gt;<br>#include &lt;iostream&gt;<br>#include &lt;sstream&gt;<br>#include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;queue&gt;<br>#include &lt;set&gt;<br>#include &lt;map&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cctype&gt;<br>#include &lt;cmath&gt;<br>#include &lt;list&gt;<br>#include &lt;regex.h&gt; <br>using namespace std;<br><br>// LIB CODE<br>typedef vector&lt;string&gt; VS;<br>#define FOR(i,a,b) for(int i=(a);i&lt;int(b);++i)<br>#define REP(i,n) FOR(i,0,n)<br>#define INFINT (999999999)<br>#define SZ(v) ((int)(v).size())<br>// REAL CODE<br><br>int h,w;<br>VS g;<br><br>int mem[1&lt;&lt;20];<br>char act[1&lt;&lt;20];<br><br>int next(int cur,char action) {<br>  int dx,dy;<br>  switch(action) {<br>    case 'L': dx=0,dy=-1; break;<br>    case 'R': dx=0,dy=+1; break;<br>    case 'U': dx=-1,dy=0; break;<br>    case 'D': dx=+1,dy=0; break;<br>    default: assert(false);<br>  }<br>  int ret=0;<br>  REP(i,h) REP(j,w) if(cur&amp;(1&lt;&lt;(4*i+j))) {<br>    int nx=i+dx,ny=j+dy;<br>    if(ny&lt;0) continue;<br>    if(nx&lt;0||nx&gt;=h||ny&gt;=w||g[nx][ny]=='X') ret|=1&lt;&lt;(4*i+j); else ret|=1&lt;&lt;(4*nx+ny);<br>  }<br>  return ret;<br>}<br><br>int go(int mask) {<br>  if(mask==0) return 0;<br>  int &amp;ret=mem[mask];<br>  if(ret==-1) {<br>    ret=INFINT;<br>    int cur;<br>    cur=1+go(next(mask,'D')); if(cur&lt;ret) ret=cur,act[mask]='D';<br>    cur=1+go(next(mask,'L')); if(cur&lt;ret) ret=cur,act[mask]='L';<br>    cur=1+go(next(mask,'R')); if(cur&lt;ret) ret=cur,act[mask]='R';<br>    cur=1+go(next(mask,'U')); if(cur&lt;ret) ret=cur,act[mask]='U';<br>  }<br>  return ret;<br>}<br><br>class BlindMazeSolve {<br>public:<br>  string getSolution(vector &lt;string&gt; G) {<br>    g=G,h=SZ(g),w=SZ(g[0]);<br>    <br>    memset(mem,-1,sizeof(mem));<br>    int start=0; REP(i,h) REP(j,w) if(g[i][j]=='.') start|=1&lt;&lt;(4*i+j);<br>    <br>    int d=go(start);<br>    if(d==INFINT) return "";<br>    <br>    string ret="";<br>    while(start!=0) {<br>      ret+=act[start];<br>      start=next(start,act[start]);<br>    }<br>    return ret;<br>  }<br>  <br>};<br><br><br>// Powered by FileEdit<br>// Powered by CodeProcessor<br></td>