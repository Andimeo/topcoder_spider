<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br><br>public class BlindMazeSolve {<br>    private static boolean[] z;<br>    private static int[] p;<br>    private static char[] pc;<br><br>    public String getSolution(String[] maze) {<br>        int n = maze.length;<br>        int m = maze[0].length();<br>        boolean[] a = new boolean[n*m];<br>        for (int i = 0; i &lt; n; i++) {<br>            for (int j = 0; j &lt; m; j++) {<br>                a[i * m + j] = maze[i].charAt(j) == '.';<br>            }<br>        }<br>        int m0 = 0;<br>        z = new boolean[1 &lt;&lt; (n*m)];<br>        p = new int[1 &lt;&lt; (n*m)];<br>        pc = new char[1 &lt;&lt; (n*m)];<br>        for (int i = 0; i &lt; n*m; i++) {<br>            if (a[i]) m0 |= 1 &lt;&lt; i;<br>        }<br>        Queue&lt;Integer&gt; q = new LinkedList&lt;Integer&gt;();<br>        q.offer(m0);<br>        z[m0] = true;<br>        int[] dx = {1,0,0,-1};<br>        int[] dy = {0,-1,1,0};<br>        char[] cc = {'D','L','R','U'};<br>        while (!q.isEmpty()) {<br>            m0 = q.peek();<br>            q.remove();<br>            for (int d = 0; d &lt; 4; d++) {<br>                int m1 = 0;<br>            for (int i = 0; i &lt; n; i++) {<br>                for (int j = 0; j &lt; m; j++) {<br>                    int ii = i + dx[d];<br>                    int jj = j + dy[d];<br>                    if (jj &gt;= 0) {<br>                        if (ii &lt; 0 || ii == n || jj == m || !a[ii * m + jj]) {<br>                            ii = i;<br>                            jj = j;<br>                        }<br>                        if (((m0 &gt;&gt; (i * m + j)) &amp; 1) == 1) {<br>                            m1 |= 1 &lt;&lt; (ii * m + jj);<br>                        }<br>                    }<br>                }<br>            }<br>                if (!z[m1]) {<br>                    z[m1] = true;<br>                    pc[m1] = cc[d];<br>                    p[m1] = m0;<br>                    q.offer(m1);<br>                }<br>            }<br>        }<br>        if (!z[0]) return "";<br>        return getres(0);<br>    }<br><br>    private String getres(int i) {<br>        if (p[i] == 0) {<br>            return "";<br>        } else {<br>            return getres(p[i]) + pc[i];<br>        }<br>    }<br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by RETester [based on ExampleBuilder]<br>// Powered by CodeProcessor<br></td>