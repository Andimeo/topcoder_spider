<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>import java.util.regex.*;<br> <br> <br>public class MaxKTrace {<br> <br>  <br>  private int[][][] best = new int[100][100][100];<br>  private boolean[][][] computed = new boolean[100][100][100];<br>  int[][] vals;<br> <br>  public int getLargest(String[] mat, int k) {<br>    vals = new int[mat.length][mat[0].length()];<br>    for (int i = 0; i &lt; mat.length; i++) {<br>      for (int j = 0; j &lt; mat[0].length(); j++) {<br>        vals[i][j] = mat[i].charAt(j) - '0';<br>      }<br>    }<br>    return best(k, mat.length - 1, mat[0].length() - 1);<br>  }<br>  <br>  private int best(int toPick, int maxRow, int maxColumn) {<br>    if (toPick == 0) {<br>      return 0;<br>    }<br>    if (maxColumn &lt; 0 || maxRow &lt; 0) {<br>      return -10000;<br>    }<br>    if (computed[toPick][maxColumn][maxRow]) {<br>      return best[toPick][maxColumn][maxRow];<br>    }<br>    computed[toPick][maxColumn][maxRow] = true;<br>    int max = -10000;<br>    for (int i = 0; i &lt;= maxRow; i++) {<br>      for (int j = 0; j &lt;= maxColumn; j++) {<br>        max = Math.max(best(toPick - 1, i - 1, j - 1) + vals[i][j], max);<br>      }<br>    }<br>    best[toPick][maxColumn][maxRow] = max;<br>    return max;<br>  }<br> <br> <br> <br>}<br> <br> <br> <br> <br> <br>// Powered by CodeProcessor<br></td>