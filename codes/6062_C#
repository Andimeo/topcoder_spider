<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections;<br>using System.Text.RegularExpressions;<br><br>public class FourBears {<br>    int[,] w,a1,a2,b1,b2;<br>    int[] dx = { 0, 0, 1, -1 },<br>        dy = { 1, -1, 0, 0 };<br>    static int Main(string[] args)<br>    {<br>        int x =new FourBears().clearPassages(new string[] {<br> "B...B",<br> ".....",<br> "B...B"<br>});<br>        return 0;<br>    }<br>    int N,M;<br>    string[] field;<br>  public int clearPassages(string[] field) {<br>        this.field  = field;<br>    N= field.Length;<br>        M=field[0].Length;        <br>        for (int i=0; i&lt;N; i++)<br>        {<br>            if (field[i][0]=='B')<br>            {<br>                w= new int[N,M];                <br>                go(i,0);<br>                if (a1==null)<br>                    a1=w;<br>                else a2 =w;<br>            }<br>            if (field[i][M-1]=='B')<br>            {<br>                w= new int[N,M];                <br>                go(i,M-1);<br>                if (b1==null)<br>                    b1=w;<br>                else b2 =w;<br>            }<br>        }<br>        int res = int.MaxValue;<br>        w = new int[N, M];<br>        for (int i=0; i&lt;N; i++)<br>            for (int j = 1; j &lt; M - 1; j++)<br>            {<br>                go(i, j);<br>                for (int ii = 0; ii &lt; N; ii++)<br>                    for (int jj = 1; jj &lt; M - 1; jj++)<br>                    {<br>                        res = Math.Min(res, <br>                            a1[i,j]+a2[i,j]+b1[ii,jj]+b2[ii,jj]+w[ii,jj]-<br>                            (field[i][j]=='.'?1:0) -(field[ii][jj]=='.'?2 :0)<br>                            );<br>                        res = Math.Min(res, a1[i, j] + a2[ii, jj] + b1[i, j] + b2[ii, jj] + w[ii, jj] -<br>                            (field[i][j] == '.' ? 1 : 0) - (field[ii][jj] == '.' ? 2  : 0)<br>                            );<br>                    }<br>            }<br>        return res;<br>  }<br>    public void go(int x, int y)<br>    {<br>        for (int i = 0; i &lt; N; i++)<br>            for (int j = 0; j &lt; M; j++)<br>                w[i, j] = int.MaxValue;<br>        w[x, y] = 0;<br>        Queue q = new Queue();<br>        q.Enqueue(x * M + y);<br>        while (q.Count != 0)<br>        {<br>            x = (int)q.Peek() / M;<br>            y = (int)q.Dequeue() % M;<br>            for (int i = 0; i &lt; 4; i++)<br>                if ((x + dx[i] &gt;= 0) &amp;&amp; (x + dx[i] &lt; N) &amp;&amp;<br>                    (y + dy[i] &gt;= 0) &amp;&amp; (y + dy[i] &lt; M) &amp;&amp;<br>                    w[x, y] + (field[x + dx[i]][ y + dy[i]] != '.' ? 0 : 1+(y+dy[i]==0||y+dy[i]==(M-1)?10000:0)) &lt; w[x + dx[i], y + dy[i]])<br>                {<br>                    w[x + dx[i], y + dy[i]] = w[x, y] + (field[x + dx[i]][y + dy[i]] != '.' ? 0 : 1 + (y+dy[i] == 0 || y+dy[i] == (M - 1) ? 10000 : 0));<br>                    q.Enqueue((x + dx[i]) * M + y + dy[i]);<br>                }<br>        }<br>    }<br>}<br><br><br>// Powered by FileEdit<br></td>