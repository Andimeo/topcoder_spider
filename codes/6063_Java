<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br> <br>public class PrimePalindromic<br>{<br>    public int count (int A, int B)<br>    {<br>        int result = 0;<br>        <br>        for (int i = A; i &lt;= B; i++)<br>            if (isPrimePalindromic (i))<br>            {<br>                result++;<br>            }<br>        <br>        return result;<br>    }<br>    <br>    private boolean isPrimePalindromic (int x)<br>    {<br>        int [] factors = getFactors (x);<br> <br>        int count = factors.length;<br>        String [] parts = new String [count];<br>        for (int i = 0; i &lt; count; i++)<br>            parts [i] = Integer.toString (factors [i]);<br>        <br>        return isPalindromic (parts);<br>    }<br>    <br>    private boolean isPalindromic (String [] parts)<br>    {<br>        return isPalindromic (parts, parts.length, "", "");<br>    }<br>    <br>    private Map cache = new HashMap ();<br>    private boolean isPalindromic (String [] parts, int count, String prefix, String postfix)<br>    {<br>        int m = Math.min (prefix.length (), postfix.length ());<br>        prefix = prefix.substring (m);<br>        postfix = postfix.substring (0, postfix.length () - m);<br> <br>        String [] x = new String [count];<br>        System.arraycopy (parts, 0, x, 0, count);<br>        Arrays.sort (x);<br>        StringBuffer sb = new StringBuffer ();<br>        for (int i = 0; i &lt; count; i++)<br>        {<br>            sb.append (x [i]);<br>            sb.append (" ");<br>        }<br>        sb.append (":" + prefix + ":" + postfix);<br>        String key = new String (sb);<br>        Boolean b = (Boolean)cache.get (key);<br>        if (b != null)<br>            return b.booleanValue ();<br>    <br>        if (count == 0)<br>        {<br>            boolean result = isPalindrome (prefix + postfix); <br>            cache.put (key, Boolean.valueOf (result));<br>            return result;<br>        }<br>       <br>        for (int i = 0; i &lt; count; i++)<br>        {<br>            String part = parts [i];<br>            parts [i] = parts [count - 1];<br>            <br>            if (prefix.length () == 0 &amp;&amp; isCoPol (prefix + part, postfix))<br>                if (isPalindromic (parts, count - 1, prefix + part, postfix))<br>                {<br>                    parts [i] = part;<br>                    cache.put (key, Boolean.TRUE);<br>                    return true;<br>                }<br>            <br>            if (postfix.length () == 0 &amp;&amp; isCoPol (prefix, part + postfix))<br>                if (isPalindromic (parts, count - 1, prefix, part + postfix))<br>                {<br>                    parts [i] = part;<br>                    cache.put (key, Boolean.TRUE);<br>                    return true;<br>                }<br>            <br>            parts [i] = part;<br>        }<br>        <br>        cache.put (key, Boolean.FALSE);<br>        return false;<br>    }<br>    <br>    private boolean isCoPol (String a, String b)<br>    {<br>        int l = b.length ();<br>        for (int count = Math.min (a.length (), l), i = 0; i &lt; count; i++)<br>            if (a.charAt (i) != b.charAt (l - i - 1))<br>                return false;<br>        <br>        return true;<br>    }<br>    <br>    private boolean isPalindrome (String str)<br>    {<br>        for (int count = str.length (), i = 0; i &lt; count / 2; i++)<br>        {<br>            if (str.charAt (i) != str.charAt (count - i - 1))<br>                return false;<br>        }<br>        return true;<br>    }<br>    <br>    private int [] getFactors (int x)<br>    {<br>        List r = new ArrayList ();<br> <br>        for (int count = primes.length, i = 0; i &lt; count; i++)<br>        {<br>            int prime = primes [i];<br>            <br>            if (prime &gt; x) break;<br>            <br>            while (x % prime == 0)<br>            {<br>                r.add (Integer.valueOf (prime));<br>                x /= prime;<br>            }<br>        }<br> <br>        int count = r.size ();       <br>        int [] result = new int [count];<br>        for (int i = 0; i &lt; count; i++)<br>            result [i] = ((Integer)r.get (i)).intValue ();<br>        return result;<br>    }<br>    <br>    private int [] primes = getPrimes ();<br>        <br>    private int [] getPrimes ()<br>    {<br>        List r = new ArrayList ();<br>    <br>        for (int i = 2; i &lt; 10000; i++)<br>        {<br>            boolean isPrime = true;<br>            for (int j = 0; j &lt; r.size (); j++)<br>                if (i % ((Integer)r.get (j)).intValue () == 0)<br>                {<br>                    isPrime = false;<br>                    break;<br>                }<br>            <br>            if (isPrime)<br>                r.add (Integer.valueOf (i));<br>        }<br>        <br>        int count = r.size ();<br>        int [] result = new int [count];<br>        for (int i = 0; i &lt; count; i++)<br>            result [i] = ((Integer)r.get (i)).intValue ();<br>        return result;<br>    }<br>}<br></td>