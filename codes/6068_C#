<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Text;<br>using System.Text.RegularExpressions;<br>using System.Collections;<br><br>public class CountryWar {<br><br>    double[,,] p = new double[30,30,30];<br>    double[,] v = new double[1 &lt;&lt; 16, 30];<br>    int n;<br><br>    class node<br>    {<br>        public char type;<br>        public int unit;<br>        public int border;<br>    }<br><br>    node[] c;<br><br>    public double defeatAll(string[] armies) {<br>        double res = 0;<br><br>        for (int i = 1; i &lt;= 20; i++)<br>        {<br>            p[i, 0, i] = 1.0;<br>            for (int j = 1; j &lt;= 20; j++)<br>            {<br>                for (int k = 1; k &lt;= i; k++)<br>                {<br>                    double t = 1.0*i*i/(i*i+i*j+j*j);<br>                    p[i, j, k] = p[i, j - 1, k] * t + p[i - 1, j, k] * (1 - t);<br>                }<br>            }<br>        }<br><br>        n = armies.Length;<br>        c = new node[n];<br>        int start = -1;<br>        int enemy = 0;<br>        for (int i = 0; i &lt; n; i++)<br>        {<br>            string[] buf = armies[i].Split(' ');<br>            c[i] = new node();<br>            c[i].type = buf[0][0];<br>            c[i].unit = int.Parse(buf[1]);<br>            c[i].border = 0;<br>            for (int j = 2; j &lt; buf.Length; j++)<br>            {<br>                int k = int.Parse(buf[j]);<br>                c[i].border |= 1&lt;&lt;k;<br>            }<br><br>            if (c[i].type == 'Y') start = i;<br>            if (c[i].type == 'E') enemy++;<br>        }<br><br>        for (int i = 0; i &lt; (1 &lt;&lt; n); i++)<br>        {<br>            for (int j = 0; j &lt;= 20; j++)<br>                v[i, j] = -1;<br>        }<br>        res = dp(1&lt;&lt;start, c[start].unit, enemy);<br>        return res;<br>    }<br><br>    double dp(int mask, int unit, int enemy)<br>    {<br>        if (enemy == 0) return v[mask, unit] = 1.0;<br>        if (unit == 0) return v[mask, unit] = 0.0;<br>        double res = v[mask, unit];<br>        if (res &gt;= 0) return res;<br>        res = 0;<br>        for (int i = 0; i &lt; n; i++)<br>        {<br>            if ((mask &amp; (1 &lt;&lt; i)) != 0) continue;<br>            if ((mask &amp; c[i].border) == 0) continue;<br>            double prob = 0;<br>            for (int left = 1; left &lt;= unit; left++)<br>            {<br>                int leftEnemy = c[i].type == 'E' ? enemy - 1 : enemy;<br>                prob += dp(mask|(1&lt;&lt;i), left, leftEnemy) * p[unit, c[i].unit, left];<br>            }<br>            res = Math.Max(res, prob);<br>        }<br>        return v[mask, unit] = res;<br>    }<br><br><br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by CodeProcessor<br></td>