<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Text;<br>using System.Text.RegularExpressions;<br>using System.Collections;<br>using System.Collections.Generic;<br>using System.Collections.Specialized;<br><br>public class Knights {<br><br>    int[,] a = new int[26, 26];<br>    int[,] b = new int[26, 26];<br>    int[,] rel = new int[26, 26];<br>    bool[,] used = new bool[26, 26];<br>    int n;<br><br>    int[] dx = { 2, 2, -2, -2, 1, 1, -1, -1 };<br>    int[] dy = { 1, -1, 1, -1, 2, -2, 2, -2 };<br><br><br>    bool dfs(int x, int y)<br>    {<br>        used[x, y] = true;<br>        for (int i = 0; i &lt; 8; i++)<br>        {<br>            int nx = x + dx[i];<br>            int ny = y + dy[i];<br>            if (nx &lt; 0 || ny &lt; 0 || nx &gt;= n || ny &gt;= n || a[nx,ny] != 1) continue;<br>            if (0 == b[nx, ny])<br>            {<br>                //Console.WriteLine(x + "," + y + " " + nx + " " + ny + " " + a[nx,ny]);<br>                b[x, y] = 1;<br>                b[nx, ny] = 1;<br>                rel[nx, ny] = x * n + y;<br>                return true;<br>            }<br>            else<br>            {<br>                int rx = rel[nx, ny] / n;<br>                int ry = rel[nx, ny] % n;<br>                if (!used[rx, ry] &amp;&amp; dfs(rx, ry))<br>                {<br>                    //Console.WriteLine(x + "," + y + " " + nx + " " + ny);<br>                    rel[nx, ny] = x * n + y;<br>                    b[x, y] = 1;<br>                    return true;<br>                }<br>            }<br>        }<br>        return false;<br>    }<br><br>    int solve()<br>    {<br>        int res = 0;<br>        for (int i = 0; i &lt; n; i++)<br>            for (int j = 0; j &lt; n; j++)<br>            {<br>                if ((i + j) % 2 == 1) continue;<br>                if (a[i, j] == 1 &amp;&amp; b[i, j] == 0)<br>                {<br>                    for (int k = 0; k &lt; n; k++)<br>                        for (int l = 0; l &lt; n; l++)<br>                            used[k, l] = false;<br>                    if (dfs(i, j))<br>                    {<br>                        //Console.WriteLine(i + " " + j);<br>                        res++;<br>                    }<br>                }<br>            }<br>        return res;<br>    }<br><br>    public int makeFriendly(int N, string[] pos)<br>    {<br>        int res = 0;<br>        n = N;<br>        foreach (string str in pos)<br>        {<br>            string[] buf = str.Split(' ');<br>            foreach (string s in buf)<br>            {<br>                int x = s[0] - 'A';<br>                int y = int.Parse(s.Substring(1)) - 1;<br>                //Console.WriteLine(x + " " + y);<br>                a[x, y] = 1;<br>                res++;<br>            }<br>        }<br>        res = solve();<br>        return res;<br>    }<br><br><br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by CodeProcessor<br></td>