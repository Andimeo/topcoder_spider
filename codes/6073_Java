<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>public class NotchedWoodBarsPuzzle {<br>    int N;<br>    HashSet hs = new HashSet();<br>    char [][] B;<br>    char [][] cur;<br>    char [][] q = new char[256][256];<br>    boolean [] pal;<br>    public int countSolutions(String[] bars) {<br>  q[0]['D'] = 'D';<br>  q[0]['S'] = 'S';<br>  q[1]['D'] = 'S';<br>  q[1]['S'] = 'D';<br>  N = bars.length;<br>  pal = new boolean[N];<br>  Arrays.fill(pal, true);<br>  B = new char[N][];<br>  cur = new char[N/2][N/2];<br>  for (int i=0; i&lt;N; i++) B[i] = bars[i].toCharArray();<br>  for (int i=0; i&lt;N; i++) {<br>      for (int j=0; j&lt;B[i].length/2; j++) {<br>    pal[i] = pal[i] &amp;&amp; (B[i][j] == B[i][B[i].length-1-j]);<br>      }<br>  }<br>  doit(0, 0);<br>  return hs.size();<br>    }<br><br>    void doit(int fillpos, int mask) {<br>//   System.out.println(fillpos + " " + mask);<br>  if (fillpos == N) {<br>      regit();<br>      return;<br>  } else if (fillpos &lt; N/2) {<br>      for (int i=0; i&lt;N; i++) {<br>    if ((mask &amp; (1&lt;&lt;i)) == 0) {<br>        for (int j=0; j&lt;N/2; j++) {<br>      cur[fillpos][j] = B[i][j];<br>        }<br>        doit(fillpos+1, mask | (1&lt;&lt;i));<br>        if (!pal[i]) {<br>      for (int j=0; j&lt;N/2; j++) {<br>          cur[fillpos][j] = B[i][N/2-1-j];<br>      }<br>      doit(fillpos+1, mask | (1&lt;&lt;i));<br>        }<br>    }<br>      }<br>  } else {<br>//       showb();<br>      outer:<br>      for (int i=0; i&lt;N; i++) {<br>    if ((mask &amp; (1&lt;&lt;i)) == 0) {<br>        for (int j=0; j&lt;N/2; j++) {<br>      if (cur[j][fillpos-N/2] == B[i][j])<br>          continue outer;<br>        }<br>//         System.out.println(fillpos + " " + i);<br>//         showb();<br>        doit(fillpos+1, mask | (1&lt;&lt;i));<br>    }<br>      }<br>      outer2:<br>      for (int i=0; i&lt;N; i++) {<br>    if ((mask &amp; (1&lt;&lt;i)) == 0 &amp;&amp; !pal[i]) {<br>        for (int j=0; j&lt;N/2; j++) {<br>      if (cur[j][fillpos-N/2] == B[i][N/2-1-j])<br>          continue outer2;<br>        }<br>        doit(fillpos+1, mask | (1&lt;&lt;i));<br>    }<br>      }<br>  }<br>    }<br><br>    void regit() {<br>  String tv = "";<br>  String ins = "";<br>  for (int j=0; j&lt;N/2; j++) {<br>      for (int k=0; k&lt;N/2; k++) {<br>    ins = ins + q[0][cur[j][k]];<br>      }<br>  }<br>  if (tv.compareTo(ins) &lt; 0) tv = ins;<br>  ins = "";<br>  for (int j=0; j&lt;N/2; j++) {<br>      for (int k=0; k&lt;N/2; k++) {<br>    ins = ins + q[0][cur[N/2-1-j][N/2-1-k]];<br>      }<br>  }<br>  if (tv.compareTo(ins) &lt; 0) tv = ins;<br>  ins = "";<br>  for (int j=0; j&lt;N/2; j++) {<br>      for (int k=0; k&lt;N/2; k++) {<br>    ins = ins + q[1][cur[k][j]];<br>      }<br>  }<br>  if (tv.compareTo(ins) &lt; 0) tv = ins;<br>  ins = "";<br>  for (int j=0; j&lt;N/2; j++) {<br>      for (int k=0; k&lt;N/2; k++) {<br>    ins = ins + q[1][cur[N/2-1-k][N/2-1-j]];<br>      }<br>  }<br>  if (tv.compareTo(ins) &lt; 0) tv = ins;<br>//   System.out.println(tv);<br>  hs.add(tv);<br>    }<br><br>    void showb() {<br>  for (int i=0; i&lt;N/2; i++) {<br>      for (int j=0; j&lt;N/2; j++) {<br>    System.out.print(cur[i][j]);<br>      }<br>      System.out.println();<br>  }<br>    }<br>}<br><br><br>// Powered by FileEdit<br></td>