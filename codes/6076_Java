<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>import java.util.regex.*;<br>import java.io.*;<br><br>public class TakeBus {<br>  static int ID;<br>  class par implements Comparable&lt;par&gt; {<br>    int t, w, id=++ID;<br>    public int compareTo(par p) {<br>      int d = t - p.t;<br>      if (d==0) d = w - p.w;<br>      if (d==0) d = id - p.id;<br>      return d;<br>    }<br>  }<br>  double[] dp = new double[101];<br>  void print() {<br>    for (int i=0; i&lt;dp.length; ++i) {<br>      System.out.printf("%.2f ",dp[i]);<br>    }<br>    System.out.println();<br>  }<br>  public double expectedTime(int[] tripTime, int[] waitTime) {<br>    ut = System.out;<br>    int n = tripTime.length;<br>    par[] bus = new par[n];<br>    for (int i=0; i&lt;n; ++i) {<br>      bus[i] = new par();<br>      bus[i].t = tripTime[i];<br>      bus[i].w = waitTime[i];<br>    }<br>    Arrays.sort(bus);<br>    Arrays.fill(dp,9999);<br>    double[] leftP = new double[101];<br>    double[] leftV = new double[101];<br>    for (par p:bus) {<br>      for (int t=p.w-1; t&gt;=0; --t) {<br>        double P = 1.0/(p.w-t);<br>        double vent = dp[t+1]+1;<br>        if (vent &gt; p.t) {<br>          leftV[t] = (leftV[t]*leftP[t] + p.t*(1-leftP[t])*P)/(leftP[t]+(1-leftP[t])*P);<br>          leftP[t] += (1-leftP[t])*P;<br>          dp[t] = leftP[t]*leftV[t] + (1-leftP[t])*(dp[t+1]+1);<br>//          double alt = P*p.t + (1-P) * vent;<br>//          if (alt&lt;dp[t]) dp[t] = alt;<br>        }<br>      }<br>//      print();<br>    }<br>    return dp[0];<br>  }<br><br>  PrintStream ut;<br>  void print(Object... a) {<br>    for (Object o:a) {<br>      ut.print(o+" ");<br>    }<br>    ut.println();<br>  }<br><br>  <br><br>}<br><br><br><br>// Powered by FileEdit<br>// Powered by CodeProcessor<br></td>