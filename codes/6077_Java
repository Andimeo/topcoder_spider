<td class="problemText" colspan="8" valign="middle" align="left">
            import java.math.BigInteger;<br>import java.util.HashMap;<br>public class BigFibonacci<br>{<br>  int [] p=new int[1000];<br>  BigInteger s1000=new BigInteger("1000");<br>  BigInteger b2=new BigInteger("2");<br>  BigInteger b1=new BigInteger("1");<br>  HashMap&lt;String,Long&gt; msi=new HashMap&lt;String,Long&gt;();<br>  public int fibNumber(String index,int m)<br>  {<br>    g(m);<br>    return (int)rec(index,m);<br>  }<br>  public long rec(String index,int m)<br>  {<br>    BigInteger bin=new BigInteger(index);<br>    if(bin.compareTo(s1000)&lt;0)<br>      return p[bin.intValue()];<br>    if(msi.containsKey(index))<br>      return msi.get(index);<br>    if((index.charAt(index.length()-1)-'0')%2==0)<br>    {<br>      long t1=rec(bin.divide(b2).toString(),m);<br>      long t2=rec(bin.divide(b2).subtract(b1).toString(),m);<br>      long re=((t1*t1)%m+(2*t1*t2)%m)%m;<br>      msi.put(index,re);<br>      return re;<br>    }<br>    else<br>    {<br>      long t1=rec(bin.subtract(b1).divide(b2).toString(),m);<br>      long t2=rec(bin.add(b1).divide(b2).toString(),m);<br>      long re=((t1*t1)%m+(t2*t2)%m)%m;<br>      msi.put(index, re);<br>      return re;<br>    }<br>    <br>  }<br>  public void g(int m)<br>  {<br>    p[0]=0;<br>    p[1]=1%m;<br>    for(int i=2;i&lt;1000;i++)<br>      p[i]=(p[i-1]+p[i-2])%m;<br>  }<br>   <br>}<br><br><br>// Powered by FileEdit<br></td>