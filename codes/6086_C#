<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br><br>public class StringReplacements {<br>  int[] res;<br>  int[,][] full;<br>  long[] p3;<br><br>  void doit(int what, long left, long right, int depth)<br>  {<br>    if (left &gt; right)<br>      return;<br><br>    int[] tmp = null;<br>    if (left == 0 &amp;&amp; right == p3[depth] - 1) <br>    {<br>      if (full[what, depth] == null)<br>      {<br>        tmp = new int[3];<br>        res.CopyTo(tmp, 0);<br>      } else<br>      {<br>        tmp = full[what, depth];<br>        for (int i = 0; i &lt; 3; ++i)<br>          res[i] += tmp[i];<br>        return;<br>      }<br>    }<br><br>    if (depth == 0)<br>    {<br>      ++res[what];<br>    } <br>    else <br>    {<br>      long step = p3[depth - 1];<br>      switch (what)<br>      {<br>        case 0:<br>          doit(0, Math.Max(left, 0), Math.Min(right, step - 1), depth - 1);<br>          doit(2, Math.Max(left - step, 0), Math.Min(right - step, step - 1), depth - 1);<br>          doit(1, Math.Max(left - 2 * step, 0), Math.Min(right - 2 * step, step - 1), depth - 1);<br>          break;<br>        case 1:<br>          doit(1, Math.Max(left, 0), Math.Min(right, step - 1), depth - 1);<br>          doit(0, Math.Max(left - step, 0), Math.Min(right - step, step - 1), depth - 1);<br>          doit(0, Math.Max(left - 2 * step, 0), Math.Min(right - 2 * step, step - 1), depth - 1);<br>          break;<br>        case 2:<br>          doit(1, Math.Max(left, 0), Math.Min(right, step - 1), depth - 1);<br>          doit(2, Math.Max(left - step, 0), Math.Min(right - step, step - 1), depth - 1);<br>          doit(1, Math.Max(left - 2 * step, 0), Math.Min(right - 2 * step, step - 1), depth - 1);<br>          break;<br>      }<br>    }<br><br>    if (tmp != null)<br>    {<br>      full[what, depth] = new int[3];<br>      for (int i = 0; i &lt; 3; ++i)<br>        full[what, depth][i] = res[i] - tmp[i];<br>    }<br>  }<br><br>  public int[] substringCounter(string letter, int left, int right, int nSeconds) {<br>    res = new int[3];<br>    p3 = new long[nSeconds + 1];<br>    p3[0] = 1;<br>    for (int i = 1; i &lt; p3.Length; ++i)<br>      p3[i] = 3 * p3[i - 1];<br>    full = new int[3, nSeconds + 1][];<br>    int start = letter[0] - 'a';<br>    doit(start, left, right, nSeconds);<br>    return res;<br>  }<br><br>  <br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003] [modified for C# by Petr]<br>// Powered by CodeProcessor<br></td>