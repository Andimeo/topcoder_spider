<td class="problemText" colspan="8" valign="middle" align="left">
            Imports Microsoft.VisualBasic<br>Imports System<br>Imports System.Collections<br>Imports System.Math<br> <br>Public Class StringReplacements<br>    Private aCount(2, 2, 20) As Integer<br>    Private aTrans(2, 2) As Integer<br>    Private aLen(20) As Long<br>    Public Function substringCounter(ByVal letter As String, ByVal left As Integer, ByVal right As Integer, ByVal nSeconds As Integer) As Integer()<br>        Dim i, j, k, l As Integer<br> <br>        aCount(0, 0, 0) = 1<br>        aCount(1, 1, 0) = 1<br>        aCount(2, 2, 0) = 1<br>        aTrans(0, 0) = 0<br>        aTrans(0, 1) = 2<br>        aTrans(0, 2) = 1<br>        aTrans(1, 0) = 1<br>        aTrans(1, 1) = 0<br>        aTrans(1, 2) = 0<br>        aTrans(2, 0) = 1<br>        aTrans(2, 1) = 2<br>        aTrans(2, 2) = 1<br> <br>        aLen(0) = 1<br>        For i = 1 To 20<br>            aLen(i) = aLen(i - 1) * CLng(3)<br>        Next<br> <br>        Dim m, n As Integer<br> <br>        For i = 1 To 20<br>            For j = 0 To 2<br>                ' j = what array are we updating<br>                For k = 0 To 2<br>                    ' k = what letter are we considering<br>                    For l = 0 To 2<br>                        'l = which part of the transformation<br>                        aCount(j, aTrans(k, l), i) += aCount(j, k, i - 1)<br>                    Next<br>                Next<br>            Next<br>        Next<br> <br>        Return iRet(Asc(letter) - 97, left, right, nSeconds)<br> <br>    End Function<br> <br>    Private Function iRet(ByVal iString As Integer, ByVal iLeft As Integer, ByVal iRight As Integer, ByVal iNumber As Integer) As Integer()<br>        Dim aRet(2) As Integer<br>        If iNumber = 0 Then<br>            aRet(iString) += 1<br>            Return aRet<br>        End If<br>        Dim i, j, k, l As Integer<br>        Dim iL, iR As Long<br>        Dim bNone As Boolean<br>        Dim bPartial As Boolean<br>        Dim bWhole As Boolean<br>        Dim aPar(2) As Integer<br> <br>        For i = 0 To 2<br>            k = aTrans(iString, i)<br>            iL = i * aLen(iNumber - 1)<br>            iR = (i + 1) * aLen(iNumber - 1) - 1<br>            bWhole = False<br>            bNone = False<br>            If iL &gt;= iLeft And iR &lt;= iRight Then bWhole = True<br>            If iLeft &gt; iR Then bNone = True<br>            If iRight &lt; iL Then bNone = True<br>            If bWhole Then<br>                For l = 0 To 2<br>                    aRet(l) += aCount(k, l, iNumber - 1)<br>                Next<br>            End If<br>            If Not bWhole And Not bNone Then<br>                aPar = iRet(k, iLeft - iL, iRight - iL, iNumber - 1)<br>                For l = 0 To 2<br>                    aRet(l) += aPar(l)<br>                Next<br>            End If<br>        Next<br>        Return aRet<br> <br>    End Function<br>End Class<br></td>