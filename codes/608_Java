<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>import java.math.*;<br>public class Billboard {<br>  public String[] enlarge(String message, String[] letters) {<br>    HashMap h = new HashMap();<br>    for (int i=0; i&lt;letters.length; i++) {<br>      String l = letters[i].charAt(0)+"";<br>      String s = letters[i].substring(2);<br>      h.put(l,s);        <br>    }<br>    String[]ret = new String[5];<br>    for (int i=0; i&lt;ret.length; i++) { ret[i]="";<br>    }<br>    for (int i=0; i&lt;message.length(); i++) { <br>      String l = message.charAt(i)+"";<br>      String s = (String)h.get(l);<br>      int w=0;<br>        for (StringTokenizer st= new StringTokenizer(s,"-"); st.hasMoreTokens();) {<br>          String x = st.nextToken();<br>          ret[w]+=x;<br>          if (i&lt;message.length()-1) ret[w]+=".";<br>          w++;<br>        }<br>      }<br>      return ret;<br> <br>  }<br> <br>  public final static void main(String[] args)<br>  {<br>    try {<br>      validateExample("1", new Billboard().enlarge("TOPCODER",new String[] {"T:#####-..#..-..#..-..#..-..#.." ,"O:#####-#...#-#...#-#...#-#####" ,"P:####.-#...#-####.-#....-#...." ,"C:.####-#....-#....-#....-.####" ,"D:####.-#...#-#...#-#...#-####." ,"E:#####-#....-####.-#....-#####" ,"R:####.-#...#-####.-#.#..-#..##"}), new String[] { "#####.#####.####...####.#####.####..#####.####.",  "..#...#...#.#...#.#.....#...#.#...#.#.....#...#",  "..#...#...#.####..#.....#...#.#...#.####..####.",  "..#...#...#.#.....#.....#...#.#...#.#.....#.#..",  "..#...#####.#......####.#####.####..#####.#..##" }, "enlarge(\"TOPCODER\",new String[] {\"T:#####-..#..-..#..-..#..-..#..\" ,\"O:#####-#...#-#...#-#...#-#####\" ,\"P:####.-#...#-####.-#....-#....\" ,\"C:.####-#....-#....-#....-.####\" ,\"D:####.-#...#-#...#-#...#-####.\" ,\"E:#####-#....-####.-#....-#####\" ,\"R:####.-#...#-####.-#.#..-#..##\"})");<br>      validateExample("2", new Billboard().enlarge("DOK",new String[] {"D:####.-#...#-#...#-#...#-####." ,"O:#####-#...#-#...#-#...#-#####" ,"K:#...#-#..#.-###..-#..#.-#...#"}), new String[] { "####..#####.#...#",  "#...#.#...#.#..#.",  "#...#.#...#.###..",  "#...#.#...#.#..#.",  "####..#####.#...#" }, "enlarge(\"DOK\",new String[] {\"D:####.-#...#-#...#-#...#-####.\" ,\"O:#####-#...#-#...#-#...#-#####\" ,\"K:#...#-#..#.-###..-#..#.-#...#\"})");<br>      validateExample("3", new Billboard().enlarge("RANDOMNESS",new String[] {"S:##.##-#####-#.#.#-#.#.#-####." ,"N:#####-#####-#####-#####-#####" ,"R:#####-#####-##.##-#####-#####" ,"A:.....-.....-.....-.....-....." ,"D:#.#.#-.#.#.-#.#.#-.#.#.-#.#.#" ,"O:#####-#...#-#.#.#-#...#-#####" ,"E:#....-.#...-..#..-...#.-....#" ,"M:#....-.....-.....-.....-....." ,"X:#...#-.#.#.-..#..-.#.#.-#...#"}), new String[] { "#####.......#####.#.#.#.#####.#.....#####.#.....##.##.##.##",  "#####.......#####..#.#..#...#.......#####..#....#####.#####",  "##.##.......#####.#.#.#.#.#.#.......#####...#...#.#.#.#.#.#",  "#####.......#####..#.#..#...#.......#####....#..#.#.#.#.#.#",  "#####.......#####.#.#.#.#####.......#####.....#.####..####." }, "enlarge(\"RANDOMNESS\",new String[] {\"S:##.##-#####-#.#.#-#.#.#-####.\" ,\"N:#####-#####-#####-#####-#####\" ,\"R:#####-#####-##.##-#####-#####\" ,\"A:.....-.....-.....-.....-.....\" ,\"D:#.#.#-.#.#.-#.#.#-.#.#.-#.#.#\" ,\"O:#####-#...#-#.#.#-#...#-#####\" ,\"E:#....-.#...-..#..-...#.-....#\" ,\"M:#....-.....-.....-.....-.....\" ,\"X:#...#-.#.#.-..#..-.#.#.-#...#\"})");<br>    } catch (Exception e) {<br>      System.out.println(e);<br>      e.printStackTrace(System.out);<br>    }<br>  }<br> <br>  private static void validateExample(String exampleNum, String[] returned, String[] expected, String methodInvocation) {<br>    print(exampleNum);<br>    print("  ");<br>    if (!eq(returned,expected)) {<br>      print("FAIL");<br>    } else {<br>      print("SUCCESS");<br>    }<br>    print(" ");  <br>    print(methodInvocation);<br>    print("\tGot:[");<br>    print(returned);<br>    print("]\t");<br>    print("Expected:[");<br>    print(expected);<br>    print("]");<br>    print("\n");<br>  }<br> <br>  public static void print(boolean a) {<br>    System.out.print(a);<br>  }<br> <br>  public static void print(long a) {<br>    System.out.print(a);<br>  }<br> <br>  public static void print(int a) {<br>    System.out.print(a);<br>  }<br> <br>  public static void print(char a) {<br>    System.out.print(a);<br>  }<br> <br>  public static void print(String a) {<br>    System.out.print(a);<br>  }<br> <br>  public static void print(int[] a) {<br>    if (a==null) {System.out.print("null"); return;} <br>    for (int i=0; i&lt;a.length; i++) System.out.print(a[i]+(i&lt;a.length-1?",":"")); <br>  }<br> <br>  public static void print(int[][] a) {<br>    if (a==null) {System.out.print("null"); return;} <br>    for (int i=0; i&lt;a.length; i++) { print(a[i]); print("\n"); }<br>  }<br> <br>  public static void print(String[] a) {<br>    if (a==null) {System.out.print("null"); return;} <br>    for (int i=0; i&lt;a.length; i++) System.out.print(a[i]+(i&lt;a.length-1?",":"")); <br>  }<br> <br>  public static boolean eq(boolean a, boolean b) {<br>    return a==b;<br>  }<br> <br>  public static boolean eq(long a, long b) {<br>    return a==b;<br>  }<br> <br>  public static boolean eq(int a, int b) {<br>    return a==b;<br>  }<br> <br>  public static boolean eq(char a, char b) {<br>    return a==b;<br>  }<br> <br>  public static boolean eq(String a, String b) {<br>    return a.equals(b);<br>  }<br> <br>  public static boolean eq(int[] a, int[] b) { return Arrays.equals(a,b); }<br>  public static boolean eq(String[] a, String[] b) { return Arrays.equals(a,b); }<br> <br>}<br>//RonProc v1.00b13b October 16, 2002 -- unofficial<br> <br>// Powered by CodeProcessor<br></td>