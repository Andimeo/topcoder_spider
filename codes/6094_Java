<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.ArrayList;<br>import java.util.Arrays;<br>import java.util.HashMap;<br>import java.util.Map;<br> <br>// horrible<br> <br>public class TribbloTrouble {<br>  char map[][] ;<br>  int xd[] = new int[]{1,0,-1,0};<br>  int yd[] = new int[]{0,-1,0,1};<br>  Map&lt;State,State&gt; intern = new HashMap&lt;State, State&gt;();<br>  class State {    <br>    int x,y,dir;<br>    public State(int a,int b,int c) { x=a;y=b;dir=c; }<br>    public String toString() { return x+"/"+y+"/"+"&gt;^&lt;v*WL".charAt(dir); }<br>    public int hashCode() {<br>      return toString().hashCode();<br>    }<br>    public boolean equals(Object o) {<br>      return toString().equals(o.toString());<br>    }<br>    java.util.List&lt;State&gt; next = new ArrayList&lt;State&gt;();<br> <br>    State mush() {<br>      if((x|y)&lt;0 || y &gt;= map.length || x &gt;= map[y].length) return LOSE;<br>      if(intern.get(this) != null) return intern.get(this);<br>      intern.put(this,this);<br>      if(dir==4) {<br>        for(int i=4;i--&gt;0;) leave(i);<br>      } else {<br>        switch(map[y][x]) {<br>        case '.': leave(dir); break;<br>        case '/': leave(dir^1); break;<br>          case '\\': leave(dir^3); break;<br>          case 'W': <br>            leave(dir ^ 1); <br>            leave(dir ^ 3);<br>            break;<br>          case 'T':<br>            next.add(WIN);<br>            break;<br>          case 'S': // die<br>            next.add(LOSE);<br>            break;<br>        }<br>      }<br>      if(next.size() == 1) return next.get(0);<br>      return this;<br>    }<br>    private void leave(int d) {<br>      next.add(new State(x+xd[d], y+yd[d], d).mush());<br>    }<br>    int no = -1;<br>    public void number() {<br>      if(no&lt;0) {<br>        no = nn++;<br>        for(State s : next) s.number();<br>      }<br>    }<br>    boolean x1;<br>    public void dump() {<br>      if(!x1) {<br>        x1 = true;<br>        for(State s : next) {<br>          //System.out.println(this+" -&gt; "+s+" "+s.no+": "+1.0/next.size());<br>          tra[no][s.no] += 1.0/next.size();<br>          s.dump();<br>        }<br>      }<br>    }<br>  }<br>  double tra[][];<br>  int nn = 0;<br>  State WIN = new State(0,0,5);<br>  State LOSE = new State(0,0,6);<br>  public double terminates(String[] code) {<br>    map = new char[code.length][];<br>    State root = null;<br>    for(int i=code.length; i --&gt; 0; ) {<br>      map[i] = code[i].toCharArray();<br>      int t = code[i].indexOf("S");<br>      if(t&gt;=0) root = new State(t, i, 4);<br>    }<br>    root.mush();<br>    root.number();<br>    WIN.number();<br>    tra = new double[nn][nn];<br>    root.dump();<br>    tra[WIN.no][WIN.no] = 1;<br>    //System.out.println(Arrays.deepToString(tra));<br>    for(int i=30;i--&gt;0;) {<br>      for(int m = nn;m--&gt;0; ) <br>        for(int f = nn;f--&gt;0; ) {<br>          if(f==m) continue;<br>          double share = tra[f][m]; tra[f][m] = 0;<br>          for(int t = nn;t--&gt;0; ) {<br>            tra[f][t] += share * tra[m][t];<br>          }<br>        }<br>    }<br>    //System.out.println(Arrays.deepToString(tra));<br>    return tra[root.no][WIN.no];<br>  }<br>  public static void main(String[] args) {<br>    System.out.println(new TribbloTrouble().terminates(args));<br>  }<br>}<br></td>