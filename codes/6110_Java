<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.Arrays;<br>import java.util.ArrayList;<br> <br>public class TreeReconstruct {<br>    int[][] d;<br>    int[][] da;<br>    int l;<br>    int n;<br>    int[] leaf;<br>    int[] leafr;<br>    boolean fail;<br>    boolean[] u;<br>    ArrayList&lt;Integer&gt;[] children;<br>    ArrayList&lt;Integer&gt;[] chlv;<br>    ArrayList&lt;Integer&gt;[] chv;<br>    int[] p;<br> <br>    void insert(int v, int i, int h) {<br>        if (children[v] == null) {<br>            children[v] = new ArrayList&lt;Integer&gt;();<br>            chlv[v] = new ArrayList&lt;Integer&gt;();<br>            chv[v] = new ArrayList&lt;Integer&gt;();<br>        }<br> <br>        if (h == d[0][i]) {<br>            leaf[i] = v;<br>            if (leafr[v] != -1) {<br>                fail = true;<br>            }<br>            leafr[v] = i;<br>            return;<br>        }<br> <br>        for (int k = 0; k &lt; children[v].size(); k++) {<br>            int j = children[v].get(k);<br>            int x = d[0][i] + d[0][j] - d[i][j];<br>            if (x &gt; 2 * h) {<br>                children[v].add(i);<br>                chlv[v].add(chlv[v].get(k));<br>                insert(chlv[v].get(k), i, h + 1);<br>                return;<br>            }<br>        }<br> <br>        children[v].add(i);<br>        n++;<br>        chv[v].add(n - 1);<br>        chlv[v].add(n - 1);<br>        p[n - 1] = v;<br>        insert(n - 1, i, h + 1);<br>    }<br> <br>    void search(int v, int start, int len) {<br>        u[v] = true;<br>        if (leafr[v] != -1) {<br>            da[start][leafr[v]] = len;<br>        }<br> <br>        if (p[v] != -1 &amp;&amp; !u[p[v]]) {<br>            search(p[v], start, len + 1);<br>        }<br>        for (int k : chv[v]) {<br>            if (!u[k]) {<br>                search(k, start, len + 1);<br>            }<br>        }<br>    }<br> <br>    public int reconstruct(String[] g1, String[] g2) {<br>        l = g1.length;<br>        d = new int[l][l];<br>        for (int i = 0; i &lt; l; i++) {<br>            for (int j = 0; j &lt; l; j++) {<br>                d[i][j] = Integer.parseInt("" + g1[i].charAt(j), 16) * 16 + Integer.parseInt("" + g2[i].charAt(j), 16);<br>            }<br>        }<br> <br>        leaf = new int[65536];<br>        leafr = new int[65536];<br>        Arrays.fill(leafr, -1);<br>        children = new ArrayList[65536];<br>        chlv = new ArrayList[65536];<br>        chv = new ArrayList[65536];<br>        p = new int[65536];<br> <br>        n = 1;<br>        leaf[0] = 0;<br>        leafr[0] = 0;<br>        p[0] = -1;<br> <br>        fail = false;<br> <br>        for (int i = 1; i &lt; l; i++) {<br>            insert(0, i, 0);<br>        }<br> <br>        if (fail) {<br>            return -1;<br>        }<br> <br>        da = new int[l][l];<br>        u = new boolean[n];<br>        for (int i = 0; i &lt; l; i++) {<br>            Arrays.fill(u, false);<br>            search(leaf[i], i, 0);<br>        }<br> <br>        for (int i = 0; i &lt; l; i++) {<br>            for (int j = 0; j &lt; l; j++) {<br>                if (da[i][j] != d[i][j]) {<br>                    return -1;<br>                }<br>            }<br>        }<br> <br>        int ans = 0;<br>        for (int i = 0; i &lt; n; i++) {<br>            if (leafr[i] == -1 &amp;&amp; chv[i].size() == 1) {<br>                continue;<br>            }<br>            ans++;<br>        }<br> <br>        return ans;<br>    }<br> <br>}<br> <br> <br>// Powered by PopsEdit<br> <br>// Powered by CodeProcessor<br></td>