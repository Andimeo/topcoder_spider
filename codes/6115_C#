<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br><br>public class Palindromist {<br>  bool check(string fullText, string[] words, out string best)<br>  {<br>    string[] bestAt = new string[fullText.Length + 1];<br>    bestAt[fullText.Length] = "!";<br>    for (int i = fullText.Length - 1; i &gt;= 0; --i)<br>    {<br>      string cbest = "";<br>      foreach (string word in words)<br>      {<br>        if (i + word.Length &lt;= fullText.Length) <br>        {<br>          string next = bestAt[i + word.Length];<br>          if (next.Length &gt; 0 &amp;&amp; fullText.Substring(i, word.Length) == word)<br>          {<br>            string cur = word + " " + next;<br>            if (cbest.Length == 0 || cur.CompareTo(cbest) &lt; 0)<br>              cbest = cur;<br>          }<br>        }<br>      }<br>      bestAt[i] = cbest;<br>    }<br>    best = bestAt[0];<br>    if (best.Length &gt; 0)<br>      best = best.Substring(0, best.Length - 2);<br>    return (best.Length &gt; 0);<br>  }<br><br>  public string palindrome(string text, string[] words) {<br>    string rev = "";<br>    foreach (char ch in text)<br>      rev = ch + rev;<br>    string best1;<br>    bool can1 = check(text + rev, words, out best1);<br>    string best2;<br>    bool can2 = check(text + rev.Substring(1), words, out best2);<br>    if (can1 &amp;&amp; can2)<br>      return best1.CompareTo(best2) &lt; 0 ? best1 : best2;<br>    if (can1)<br>      return best1;<br>    if (can2)<br>      return best2;<br>    return "";<br>  }<br><br>  <br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003] [modified for C# by Petr]<br>// Powered by CodeProcessor<br></td>