<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>public class Manhattan {<br>  public int[] furthestPair(int n, int a, int b, int m) {<br>    int[] r = furthestPair2(n, a, b, m);<br>    if (r[0]==r[1]) return new int[]{0, 1};<br>    return r;<br>  }<br>  public int[] furthestPair2(int n, int a, int b, int m) {<br>    long mins=2000000000L, maxs=-mins, mind=mins, maxd=maxs;<br>    int sl=0, sh=0, dl=0, dh=0;<br>    long T = 0;<br>    for (int i=0; i&lt;n; i++) {<br>      if (i&gt;0) T = (a*T+b)%m;<br>      long U = (a*T+b)%m;<br>      //if (i==0 || i==54) System.out.println(i+" "+T+" "+U);<br>      long s = T+U;<br>      long d = (T-U+2000000000L);<br>      if (s &gt; maxs) {maxs = s; sh = i;}<br>      if (s &lt; mins) {mins = s; sl = i;}<br>      if (d &gt; maxd) {maxd = d; dh = i;}<br>      if (d &lt; mind) {mind = d; dl = i;}<br>      T = U;<br>    }<br>    //System.out.println(mins+" "+maxs+" "+mind+" "+maxd);<br>    int[] s = new int[]{sl, sh};<br>    int[] d = new int[]{dl, dh};<br>    Arrays.sort(s);<br>    Arrays.sort(d);<br>    if (maxd-mind &gt; maxs-mins) return d;<br>    if (maxd-mind &lt; maxs-mins) return s;<br>    if (s[0] &lt; d[0]) return s;<br>    if (s[0] &gt; d[0]) return d;<br>    if (s[1] &lt; d[1]) return s;<br>    return d;<br>  }<br>}<br> <br>// Powered by PopsEdit<br></td>