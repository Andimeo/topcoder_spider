<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br><br>public class OrderDoesMatter {<br>  boolean[][] adj = new boolean[1001][1001];<br>  int[] inDeg = new int[1001], outDeg = new int[1001];<br>  boolean[] used = new boolean[1001];<br>  boolean find = false;<br>  <br>  void dfs(int x) {    <br>    used[x] = true;<br>    for (int i=1; i &lt;= 1000; i++)<br>      if (adj[x][i] &amp;&amp; !used[i])<br>        dfs(i);<br>  }<br>  <br>  boolean isIsolated(int x) {<br>    for (int i=1; i &lt;= 1000; i++)<br>      if (adj[x][i])<br>        return false;<br>    return true;<br>  }<br>  <br>    public int getOrder(int[] N, int[] M) {<br>      for (int i=0; i &lt; 1001; i++)<br>        Arrays.fill(adj[i], false);<br>      Arrays.fill(inDeg, 0);<br>      Arrays.fill(outDeg, 0);<br>      <br>      for (int i=0; i &lt; N.length; i++) {<br>        adj[N[i]][M[i]] = true;<br>        adj[M[i]][N[i]] = true;<br>        outDeg[N[i]]++;<br>        inDeg[M[i]]++;<br>      }<br>      <br>      int sum=0;<br>      for (int i=1; i &lt;= 1000; i++)<br>        sum += Math.abs(inDeg[i] - outDeg[i]);<br>      <br>      if (sum &gt; 2)<br>        return -1;<br>      <br>      Arrays.fill(used, false);      <br>      for (int i=1; i&lt;=1000; i++)<br>        if (!used[i] &amp;&amp; !isIsolated(i)) {<br>          if (find) return -1;<br>          find = true;<br>          dfs(i);<br>        }<br>      <br>      if (sum == 0) {<br>        int max = 1000;<br>        while (isIsolated(max)) max--;<br>        return max * max;<br>      } else {<br>        int a = -1, b = -1;<br>        for (int i=1; i &lt;= 1000; i++) {<br>          if (inDeg[i] &lt; outDeg[i])<br>            a = i;<br>          if (inDeg[i] &gt; outDeg[i])<br>            b = i;<br>        }<br>        return a * b;<br>      }      <br>    }<br><br>}<br><br><br><br>// Powered by FileEdit<br>// Powered by CodeProcessor<br></td>