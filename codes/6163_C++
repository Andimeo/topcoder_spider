<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;vector&gt;<br>#include &lt;cmath&gt;<br><br>using namespace std;<br><br>class MixedUpPrimes<br>{<br>  int minv, maxv;<br>  int v[8];<br>  int m, prs[10000];<br><br>  bool isprime(int v)<br>  {<br>    int sq=int(sqrt(double(v))+0.1);<br>    for (int i = 0; prs[i] &lt;= sq; i ++)<br>    {<br>      if (v % prs[i] == 0) return false;<br>    }<br>    return true;<br>  }<br><br>  void search(int v[], int n)<br>  {<br>    if (n == 1)<br>    {<br>      if (v[0]&lt;2) return;<br>      if (v[0]&lt;minv)<br>      {<br>        if (isprime(v[0])) minv = v[0];<br>      }<br>      if (v[0]&gt;maxv)<br>      {<br>        if (isprime(v[0])) maxv = v[0];<br>      }<br>    }<br>    for (int i=0;i&lt;n;i++)<br>    {<br>      for (int j=i+1;j&lt;n;j++)<br>      {<br>        int a = v[i], b = v[j];<br>        v[j]=v[n-1];<br><br>        v[i]=a+b;<br>        search(v, n-1);<br>        v[i]=a-b;<br>        search(v, n-1);<br>        v[i]=b-a;<br>        search(v, n-1);<br>        v[i]=a*b;<br>        search(v, n-1);<br>        if (b!=0) { v[i]=a/b; search(v,n-1); }<br>        if (a!=0) { v[i]=b/a; search(v,n-1); }<br><br>        v[n-1]=v[j];<br>        v[i] = a; v[j] = b;<br>      }<br>    }<br>  }<br>public:<br>  vector &lt;int&gt; findPrimes(vector &lt;int&gt; values)<br>  {<br>    const int P=30000;<br>    bool isp[P];<br>    memset(isp, 1, sizeof(isp));<br>    for (int i = 2; i &lt;= sqrt(double(P)); i++)<br>    {<br>      if (isp[i])<br>      {<br>        int k = i*i;<br>        while (k&lt;P)<br>        {<br>          isp[k]=false;<br>          k+=i;<br>        }<br>      }<br>    }<br>    m = 0;<br>    for (int i = 2; i &lt; P; i ++)<br>    {<br>      if (isp[i]) { prs[m++] = i; }<br>    }<br><br>    minv = INT_MAX, maxv = - 1;<br>    int n = values.size();<br>    for (int i=0;i&lt;n; i++) v[i] = values[i];<br>    search(v, n);<br>    vector&lt;int&gt; ret;<br>    if (maxv != -1)<br>    {<br>      ret.push_back(minv);<br>      ret.push_back(maxv);<br>    }<br>    return ret;<br>  }<br>};<br></td>