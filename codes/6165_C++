<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;iostream&gt;<br>#include &lt;math.h&gt;<br>using namespace std;<br><br>typedef vector&lt;string&gt; VS;<br>typedef vector&lt;int&gt; VI;<br>typedef long long LL;<br>#define FU(var, lo, hi)   for (size_t var = (lo); var &lt; (hi); ++var)<br>#define FI(var, lo, hi)   for (int var = (lo); var &lt; (hi); ++var)<br>#define DSP(var)  cout &lt;&lt; "|" &lt;&lt; var &lt;&lt; "|" &lt;&lt; endl;<br><br>class TrafficMonitor {<br>public:<br>  bool adj[60][60];<br>  int N;<br>  int getMin(vector &lt;string&gt; links) {<br>    N = links.size();<br>    FI (a, 0, N) FI (b, 0, N) {<br>      if (links[a][b] == 'Y')<br>  adj[a][b] = true;<br>      else<br>  adj[a][b] = false;<br>    }<br><br>    // find leaf<br>    bool did;<br>    int tgt;<br>    int ans = 0;<br>    do {<br>      did = false;<br>      FI (x, 0, N) {<br>  int deg = 0;<br>  FI (y, 0, N)<br>    if (y != x &amp;&amp; adj[x][y]) {<br>      ++deg;<br>      tgt = y;<br>    }<br>  if (deg == 1) {<br>    did = true;<br>    // drop on tgt<br>    FI (z, 0, N) {<br>      adj[tgt][z] = false;<br>      adj[z][tgt] = false;<br>    }<br>    ++ans;<br>    break;<br>  }<br>      }<br>    } while (did);<br><br>    return ans;<br>  }<br>};<br><br><br>// Powered by FileEdit<br></td>