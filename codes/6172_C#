<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections;<br>using System.Collections.Specialized;<br>using System.Text;<br>using System.Text.RegularExpressions;<br> <br>public class IndicatorMotionReverse<br>{<br>  public string getMinProgram(string[] actions)<br>  {<br>        string a = string.Join("", actions);<br>        if (a.Length &lt;= 1) return string.Empty;<br>        StringBuilder sb = new StringBuilder();<br>        for (int i = 1; i &lt; a.Length; i++)<br>        {<br>            sb.Append(GetMove(a[i - 1], a[i]));<br>        }<br>        string s = sb.ToString();<br>        sb = new StringBuilder();<br>        for (int i = 0; i &lt; s.Length; )<br>        {<br>            int k = -1;<br>            for (int j = i; j &lt; s.Length; j++)<br>                if (s[j] != s[i])<br>                {<br>                    k = j;<br>                    break;<br>                }<br>            if (k == -1) k = s.Length;<br>            sb.Append(GetStr(s[i], k - i));<br>            i = k;<br>        }<br>        if (sb.Length &gt; 100)<br>        {<br>            sb[97] = sb[98] = sb[99] = '.';<br>            sb.Remove(100, sb.Length - 100);<br>        }<br>        return sb.ToString();<br>  }<br> <br>    private string GetStr(char c, int count)<br>    {<br>        StringBuilder sb = new StringBuilder();<br>        while (count &gt;= 99)<br>        {<br>            sb.Append(c).Append("99");<br>            count -= 99;<br>        }<br>        if (count &gt; 0)<br>        {<br>            sb.Insert(0, count % 10).Insert(0, count / 10).Insert(0, c);<br>        }<br>        return sb.ToString();<br>    }<br> <br>    private char GetMove(char a, char b)<br>    {<br>        int ia = GetValue(a);<br>        int ib = GetValue(b);<br>        ib -= ia;<br>        if (ib &lt; 0) ib += 4;<br>        if (ib == 2) return 'F';<br>        if (ib == 1) return 'L';<br>        if (ib == 3) return 'R';<br>        if (ib == 0) return 'S';<br>        return '0';<br>    }<br> <br>    private int GetValue(char b)<br>    {<br>        switch (b)<br>        {<br>            case '-':<br>                return 0;<br>            case '/':<br>                return 1;<br>            case '|':<br>                return 2;<br>            case 'N':<br>                return 3;<br>            default:<br>                return -1;<br>        }<br>    }<br>}<br> <br>//Powered by [Zigger]<br></td>