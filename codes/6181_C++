<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;map&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cstring&gt;<br>#include &lt;cassert&gt;<br>#include &lt;set&gt;<br>#include &lt;iostream&gt;<br>#include &lt;sstream&gt;<br>#include &lt;cstddef&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;utility&gt;<br>#include &lt;iterator&gt;<br>#include &lt;numeric&gt;<br>#include &lt;list&gt;<br> <br>using namespace std;<br> <br>typedef vector&lt;int&gt; vi;<br>typedef vector&lt;int&gt;::iterator vi_i;<br>typedef vector&lt;string&gt; vs;<br>typedef vector&lt;string&gt;::iterator vs_i;<br>typedef pair&lt;int, int&gt; pii;<br> <br>template&lt;class T&gt;<br>void splitstr(const string &amp;s, vector&lt;T&gt; &amp;out)<br>{<br>    istringstream in(s);<br>    T tmp;<br> <br>    out.clear();<br>    while (in &gt;&gt; tmp) out.push_back(tmp);<br>}<br> <br>class Wardrobe<br>{<br>public:<br>    int countUnscrewedHoles(vector &lt;int&gt; bolts);<br>};<br> <br>struct dps<br>{<br>    int dp[55][55][2];<br>};<br> <br>int Wardrobe::countUnscrewedHoles(vector &lt;int&gt; bolts)<br>{<br>    int B = bolts.size();<br>    int freq[110] = {0};<br> <br>    for (int i = 0; i &lt; B; i++)<br>        freq[bolts[i]]++;<br> <br>    dps *dp[2];<br>    dp[0] = new dps;<br>    dp[1] = new dps;<br>    memset(&amp;dp[0]-&gt;dp, 127, sizeof(dp[0]-&gt;dp));<br>    memset(&amp;dp[1]-&gt;dp, 127, sizeof(dp[1]-&gt;dp));<br>    dp[0]-&gt;dp[0][0][0] = 0;<br>    dp[0]-&gt;dp[0][0][1] = 0;<br>    dp[0]-&gt;dp[0][0][2] = 0;<br> <br>    for (int i = 100; i &gt;= 0; i--)<br>    {<br>        for (int b = 0; b &lt;= freq[i]; b++)<br>            for (int h = 0; h &lt;= freq[i]; h++)<br>            {<br>                int (&amp;cur)[2] = dp[1]-&gt;dp[b][h];<br>                cur[0] = cur[1] = 0x7f7f7f7f;<br> <br>                if (b &amp;&amp; h)<br>                {<br>                    cur[0] = dp[1]-&gt;dp[b - 1][h - 1][0] + 1;<br>                    cur[1] = dp[1]-&gt;dp[b - 1][h - 1][1] + 1;<br>                }<br>                if (b &lt;= freq[i + 1])<br>                {<br>                    cur[0] &lt;?= dp[0]-&gt;dp[freq[i + 1]][freq[i + 1] - b][0] + b;<br>                    if (!h)<br>                        cur[0] &lt;?= dp[0]-&gt;dp[freq[i + 1]][freq[i + 1] - b][1] + b;<br>                }<br>                if (h &lt;= freq[i + 1])<br>                {<br>                    cur[1] &lt;?= dp[0]-&gt;dp[freq[i + 1] - h][freq[i + 1]][1] + h;<br>                    if (!b)<br>                        cur[1] &lt;?= dp[0]-&gt;dp[freq[i + 1] - h][freq[i + 1]][0] + h;<br>                }<br>            }<br>        swap(dp[0], dp[1]);<br>    }<br>    return B - min(dp[0]-&gt;dp[0][0][0], dp[0]-&gt;dp[0][0][1]);<br>}<br> <br> <br>// Powered by FileEdit<br></td>