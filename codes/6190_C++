<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;map&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cstring&gt;<br>#include &lt;cassert&gt;<br>#include &lt;set&gt;<br>#include &lt;iostream&gt;<br>#include &lt;sstream&gt;<br>#include &lt;cstddef&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;utility&gt;<br>#include &lt;iterator&gt;<br>#include &lt;numeric&gt;<br>#include &lt;complex&gt;<br>#include &lt;list&gt;<br> <br>using namespace std;<br> <br>typedef vector&lt;int&gt; vi;<br>typedef vector&lt;int&gt;::iterator vi_i;<br>typedef vector&lt;string&gt; vs;<br>typedef vector&lt;string&gt;::iterator vs_i;<br>typedef pair&lt;int, int&gt; pii;<br> <br>class PolyMove<br>{<br>public:<br>    double addedArea(vector &lt;int&gt; x, vector &lt;int&gt; y);<br>};<br> <br>typedef complex&lt;double&gt; ci;<br> <br>double dodp(ci *xy, int f, int l)<br>{<br>    double dp[60];<br> <br>    if (l &lt;= f + 1) return 0.0;<br>    dp[f] = 0.0;<br>    dp[f + 1] = abs(xy[f] - xy[f + 2]);<br>    for (int j = f + 2; j &lt; l; j++)<br>        dp[j] = max(dp[j - 1], dp[j - 2] + abs(xy[j - 1] - xy[j + 1]));<br>    return dp[l - 1];<br>}<br> <br>double PolyMove::addedArea(vector &lt;int&gt; x, vector &lt;int&gt; y)<br>{<br>    int N = x.size();<br>    ci xy[N + 1];<br>    for (int i = 0; i &lt; N; i++)<br>        xy[i] = ci(x[i], y[i]);<br>    xy[N] = xy[0];<br> <br>    return 0.5 * max(dodp(xy, 0, N), dodp(xy, 1, N - 1) + abs(xy[1] - xy[N - 1]));<br>}<br> <br> <br>// Powered by FileEdit<br></td>