<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections;<br><br>public class ColoredBricks {<br>  class Brick<br>  {<br>    public int[] colors;<br><br>    public Brick()<br>    {<br>      colors = new int[6];<br>    }<br><br>    public Brick(string desc) : this()<br>    {<br>      for (int i = 0; i &lt; 6; ++i)<br>        colors[i] = desc[i] - '0';<br>    }<br><br>    public bool SameBrick(Brick x)<br>    {<br>      for (int i = 0; i &lt; 6; ++i)<br>        if (colors[i] != x.colors[i])<br>          return false;<br>      return true;<br>    }<br><br>    public Brick RotateA()<br>    {<br>      Brick x = new Brick();<br>      x.colors[0] = colors[3];<br>      x.colors[1] = colors[0];<br>      x.colors[2] = colors[1];<br>      x.colors[3] = colors[2];<br>      x.colors[4] = colors[4];<br>      x.colors[5] = colors[5];<br>      return x;<br>    }<br><br>    public Brick RotateB()<br>    {<br>      Brick x = new Brick();<br>      x.colors[0] = colors[5];<br>      x.colors[1] = colors[1];<br>      x.colors[2] = colors[4];<br>      x.colors[3] = colors[3];<br>      x.colors[4] = colors[0];<br>      x.colors[5] = colors[2];<br>      return x;<br>    }<br>  }<br><br>  class BrickCollection<br>  {<br>    ArrayList bricks = new ArrayList();<br><br>    public void AddBrick(Brick x)<br>    {<br>      foreach (Brick b in bricks)<br>        if (x.SameBrick(b))<br>          return;<br><br>      bricks.Add(x);<br>    }<br><br>    public Brick[] Contents<br>    {<br>      get<br>      {<br>        Brick[] res = new Brick[bricks.Count];<br>        bricks.CopyTo(res);<br>        return res;<br>      }<br>    }<br>  }<br><br>  Brick[] makeAllRotations(Brick x)<br>  {<br>    BrickCollection c = new BrickCollection();<br>    for (int i = 0; i &lt; 4; ++i) <br>    {<br>      for (int j = 0; j &lt; 4; ++j)<br>      {<br>        c.AddBrick(x);<br>        x = x.RotateA();<br>      }<br>      x = x.RotateB();<br>    }<br>    x = x.RotateA().RotateB();<br>    for (int j = 0; j &lt; 4; ++j)<br>    {<br>      c.AddBrick(x);<br>      x = x.RotateA();<br>    }<br>    x = x.RotateB().RotateB();<br>    for (int j = 0; j &lt; 4; ++j)<br>    {<br>      c.AddBrick(x);<br>      x = x.RotateA();<br>    }<br>    return c.Contents;<br>  }<br><br>  public int minRepaints(string[] bricks) {<br>    Brick[][] need = new Brick[bricks.Length][];<br>    for (int i = 0; i &lt; bricks.Length; ++i)<br>      need[i] = makeAllRotations(new Brick(bricks[i]));<br><br>    int res = int.MaxValue;<br><br>    for (int i0 = 0; i0 &lt;= 6; ++i0)<br>      for (int i1 = i0; i1 &lt;= 6; ++i1)<br>        for (int i2 = i0; i2 &lt;= 6; ++i2)<br>          for (int i3 = i1; i3 &lt;= 6; ++i3)<br>            for (int i4 = i1; i4 &lt;= 6; ++i4)<br>              for (int i5 = i1; i5 &lt;= 6; ++i5)<br>              {<br>                int cur = 0;<br>                foreach (Brick[] exam in need)<br>                {<br>                  int min = int.MaxValue;<br>                  foreach (Brick b in exam)<br>                  {<br>                    int diff = 0;<br>                    if (i0 != b.colors[0])<br>                      ++diff;<br>                    if (i1 != b.colors[1])<br>                      ++diff;<br>                    if (i2 != b.colors[2])<br>                      ++diff;<br>                    if (i3 != b.colors[3])<br>                      ++diff;<br>                    if (i4 != b.colors[4])<br>                      ++diff;<br>                    if (i5 != b.colors[5])<br>                      ++diff;<br>                    if (diff &lt; min)<br>                      min = diff;<br>                  }<br>                  cur += min;<br>                }<br>                if (cur &lt; res)<br>                  res = cur;<br>              }<br><br>    return res;<br>  }<br><br>  <br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003] [modified for C# by Petr]<br>// Powered by CodeProcessor<br></td>