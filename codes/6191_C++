<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;sstream&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cmath&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;queue&gt;<br>using namespace std;<br><br>int perm[24][6] = {<br>{0,1,2,3,4,5},{0,2,3,4,1,5},{0,3,4,1,2,5},{0,4,1,2,3,5},<br>{1,5,2,0,4,3},{1,2,0,4,5,3},{1,0,4,5,2,3},{1,4,5,2,0,3},<br>{5,3,2,1,4,0},{5,2,1,4,3,0},{5,1,4,3,2,0},{5,4,3,2,1,0},<br>{2,5,3,0,1,4},{2,3,0,1,5,4},{2,0,1,5,3,4},{2,1,5,3,0,4},<br>{3,5,4,0,2,1},{3,4,0,2,5,1},{3,0,2,5,4,1},{3,2,5,4,0,1},<br>{4,5,1,0,3,2},{4,1,0,3,5,2},{4,0,3,5,1,2},{4,3,5,1,0,2},<br>};<br><br>int best;<br>typedef vector&lt;int&gt; VI;<br>int b[60][6];<br>int n;<br>int a[6];<br><br>class ColoredBricks {<br>  public:<br>  void backtrack(int act) {<br>    if (act == 6) {<br>      int res = 0;<br>      for (int i=1; i&lt;24; ++i) {<br>        for (int j=0; j&lt;6; ++j) {<br>          if (a[j] != a[perm[i][j]]) {<br>            if (a[j] &gt; a[perm[i][j]])<br>              return;<br>            break;<br>          }<br>        }<br>      }<br>      for (int i=0; i&lt;n; ++i) {<br>        int add = 6;<br>        for (int j=0; j&lt;24; ++j) {<br>          int cnt = 0;<br>          for (int k=0; k&lt;6; ++k)<br>            if (a[k] != b[i][perm[j][k]])<br>              ++cnt;<br>          add = min(add,cnt);<br>        }<br>        res += add;<br>      }<br>      if (res &lt; best)<br>        best = res;<br>      return;<br>    }<br>    for (int i=0; i&lt;=6; ++i) {<br>      a[act] = i;<br>      backtrack(act+1);<br>    }<br>  }<br>  int minRepaints(vector &lt;string&gt; bricks) {<br>    n = bricks.size();<br>    best = n*6;<br>    int p[6] = {0,4,5,2,1,3};<br>    for (int i=0; i&lt;n; ++i) {<br>      for (int j=0; j&lt;6; ++j)<br>        b[i][p[j]] = bricks[i][j]-'0';<br>    }<br>    backtrack(0);<br>    return best;<br>  }<br>};<br><br><br>// Powered by FileEdit<br></td>