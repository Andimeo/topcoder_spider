<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br><br>public class ProductsMatrix<br>{<br>  public long nthElement (int n, int k)<br>  {<br>    if (k == 1)<br>      return 1;<br>    int min = 1, max = n;<br>    long minV = 1, maxV = n*n;<br>    while (max-min &gt; 1)<br>    {<br>      int mid = (max+min)/2;<br>      long midV = 1-(mid-1)*(mid-1);<br>      for (int i = 1; i &lt; mid; i++)<br>        midV += 2*(int)(Math.min(((long)mid)*mid, ((long)i)*n) / i);<br>      //System.out.println(mid + " " + midV);<br>      if (midV == k)<br>      {<br>        //System.out.println("meep");<br>        return ((long)mid)*mid;<br>      }<br>      if (midV &lt; k)<br>      {<br>        min = mid;<br>        minV = midV;<br>      }<br>      else<br>      {<br>        max = mid;<br>        maxV = midV;<br>      }<br>    }<br>    //System.out.println(min + " " + max);<br>    long[] x = new long [(int)(maxV-minV)];<br>    int c = 0;<br>    for (int i = 1; i &lt;= maxV*maxV &amp;&amp; i &lt;= n; i++)<br>      for (long j = ((long)min*min/i+1)*i; j &lt;= ((long)max)*max &amp;&amp; j &lt;= ((long)n)*i; j += i)<br>      {<br>        //System.out.println(j);<br>        x[c++] = j;<br>      }<br>    <br>    Arrays.sort(x);<br>    return x[(int)(k-minV-1)];<br>  }<br>}<br></td>