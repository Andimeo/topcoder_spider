<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;iostream&gt;<br>#include &lt;sstream&gt;<br>#include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;utility&gt;<br>#include &lt;cmath&gt;<br>#include &lt;limits&gt;<br>using namespace std;<br> <br>#define mset(A,B) memset(A, B, sizeof(A))<br>#define mcpy(A,B) memcpy(A, B, sizeof(B))<br>typedef long long ll;<br>typedef long double ld;<br>typedef vector&lt;int&gt; vint;<br>typedef vector&lt;string&gt; vstr;<br> <br>int group[26];<br>bool b[26];<br>bool d[26][26];<br>bool selfcir[26];<br> <br>class FactCount<br>{<br>public:<br>  int minFacts(vector &lt;string&gt; known)<br>  {<br>    //numeric_limits&lt;int&gt;::min();<br>    mset(d,0);<br>    mset(selfcir,0);<br>    int i,j,k;<br>    for (i = 0; i &lt; known.size(); i++)<br>    {<br>      istringstream strin(known[i]);<br>      string str;<br>      while (strin &gt;&gt; str)<br>      {<br>        int p = str[0]-'A', q = str[1]-'A';<br>        if (p == q) selfcir[p] = true;<br>        else d[p][q] = true;<br>      }<br>    }<br>    for (k = 0; k &lt; 26; k++)<br>      for (i = 0; i &lt; 26; i++) if (d[i][k])<br>        for (j = 0; j &lt; 26; j++) if (d[k][j]) d[i][j] = true;<br>        <br>    int ans = 0;<br>    mset(group, 255);<br>    mset(b, 0);<br>    for (i = 0; i &lt; 26; i++) if (group[i] &lt; 0)<br>    {<br>      b[i] = true;<br>      //cout &lt;&lt; i &lt;&lt; 'b' &lt;&lt; endl;<br>      int tot = 1;<br>      group[i] = i;<br>      for (j = i+1; j &lt; 26; j++)<br>        if (d[i][j] &amp;&amp; d[j][i])<br>        {<br>          group[j] = i;<br>          tot++;  <br>        }<br>      if (tot == 1)<br>      {<br>        if (selfcir[i]) ans++;<br>      }<br>      else ans += tot;<br>    }<br>    //cout &lt;&lt; ans &lt;&lt; endl;<br>    <br>    int dfs[26];<br>    int dfs_c = 0;<br>    mset(dfs, 255);<br>    while (1)<br>    {<br>      for (i = 0; i &lt; 26; i++) if (b[i] &amp;&amp; dfs[i] &lt; 0)<br>      {<br>        k = 0;<br>        for (j = 0; j &lt; 26; j++)<br>          if (b[j] &amp;&amp; dfs[j] &lt; 0 &amp;&amp; d[j][i])<br>          {<br>            k = 1; break;<br>          }<br>        if (k == 0) break;<br>      }<br>      if (i &gt;= 26) break;<br>      dfs[i] = ++dfs_c;<br>    }<br>    for (i = 0; i &lt; 26; i++) if (b[i])<br>    for (j = 0; j &lt; 26; j++) if (b[j] &amp;&amp; d[i][j] &amp;&amp; i != j)<br>    {<br>      bool ok = false;<br>      for (k = 0; k &lt; 26; k++) if (k != i &amp;&amp; k != j &amp;&amp; b[k] &amp;&amp; d[i][k] &amp;&amp; d[k][j])<br>      {<br>        //cout &lt;&lt; i &lt;&lt; ' ' &lt;&lt; j &lt;&lt; ' ' &lt;&lt; k &lt;&lt; endl;<br>        ok = true; break;<br>      }<br>      if (!ok) ans++;<br>    }<br>    return ans;<br>  }<br>};<br></td>