<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br> <br>public class ContextFreeGrammars {<br>    final long INF = 1000000001;<br> <br>    public int countParsingTrees(String[] rules, char seed, String word) {<br>        ArrayList&lt;ArrayList&lt;int[]&gt;&gt; rr = new ArrayList&lt;ArrayList&lt;int[]&gt;&gt;();<br>        ArrayList&lt;ArrayList&lt;Integer&gt;&gt; rd = new ArrayList&lt;ArrayList&lt;Integer&gt;&gt;();<br>        for (char c = 'A'; c &lt;= 'Z'; c++) {<br>            rr.add(new ArrayList&lt;int[]&gt;());<br>            rd.add(new ArrayList&lt;Integer&gt;());<br>        }<br>        for (char c = 'A'; c &lt;= 'Z'; c++) {<br>            rr.add(new ArrayList&lt;int[]&gt;());<br>            ArrayList&lt;Integer&gt; r = new ArrayList&lt;Integer&gt;();<br>            r.add(c - 'A');<br>            rd.add(r);<br>        }<br> <br>        int m = 26 + 26;<br> <br>        for (int i = 0; i &lt; rules.length; i++) {<br>            StringTokenizer st = new StringTokenizer(rules[i], " :=|");<br>            char left = st.nextToken().charAt(0);<br>            while (st.hasMoreTokens()) {<br>                String z = st.nextToken();<br>                if (z.length() == 1) {<br>                    ArrayList&lt;Integer&gt; r = rd.get(left - 'A');<br>                    r.add(z.charAt(0) - 'a');<br>                } else {<br>                    int k = left - 'A';<br>                    ArrayList&lt;int[]&gt; r;<br>                    for (int j = 0; j &lt; z.length() - 2; j++) {<br>                        int j1 = z.charAt(j);<br>                        if (j1 &gt;= 'a' &amp;&amp; j1 &lt;= 'z') {<br>                            j1 = j1 - 'a' + 26;<br>                        } else {<br>                            j1 -= 'A';<br>                        }<br>                        r = rr.get(k);<br>                        r.add(new int[]{j1, m});<br>                        //System.out.println(k + " -&gt; " + j1 + " " + m);<br>                        k = m;<br>                        m++;<br>                        rr.add(new ArrayList&lt;int[]&gt;());<br>                    }<br>                    int j1 = z.charAt(z.length() - 2);<br>                    if (j1 &gt;= 'a' &amp;&amp; j1 &lt;= 'z') {<br>                        j1 = j1 - 'a' + 26;<br>                    } else {<br>                        j1 -= 'A';<br>                    }<br>                    int j2 = z.charAt(z.length() - 1);<br>                    if (j2 &gt;= 'a' &amp;&amp; j2 &lt;= 'z') {<br>                        j2 = j2 - 'a' + 26;<br>                    } else {<br>                        j2 -= 'A';<br>                    }<br>                    r = rr.get(k);<br>                    //System.out.println(k + " -&gt; " + j1 + " " + j2);<br>                    r.add(new int[]{j1, j2});<br>                }<br>            }<br>        }<br> <br>        int n = word.length();<br>        long[][][] cnt = new long[m][n][n];<br>        for (int i = 0; i &lt; 52; i++) {<br>            for (int j : rd.get(i)) {<br>                for (int k = 0; k &lt; n; k++) {<br>                    if (word.charAt(k) - 'a' == j) {<br>                        cnt[i][k][k]++;<br>                    }<br>                }<br>            }<br>        }<br> <br>        int[][] exp = new int[m][];<br>        for (int i = 52; i &lt; m; i++) {<br>            exp[i] = rr.get(i).get(0);<br>        }<br> <br>        System.out.println("!");<br>        boolean[] was = new boolean[m];<br>        for (int i = 0; i &lt; 52; i++) {<br>            was[i] = true;<br>        }<br>        for (int l = 1; l &lt; n; l++) {<br>            for (int i = 0; i &lt; n - l; i++) {<br>                for (int k = 0; k &lt; 26; k++) {<br>                    for (int[] z : rr.get(k)) {<br>                        for (int j = i; j &lt; i + l; j++) {<br>                            //System.out.println(z[0] + " " + z[1]);<br>                            cnt[k][i][i + l] += cnt[z[0]][i][j] * cnt[z[1]][j + 1][i + l];<br>                            if (cnt[k][i][i + l] &gt; INF) {<br>                                cnt[k][i][i + l] = INF;<br>                            }<br>                        }<br>                    }<br>                }<br>                for (int k = 52; k &lt; m; k++) {<br>                    int[] z = exp[k];<br>                    if (!was[z[0]] || !was[z[1]]) {<br>                        continue;<br>                    }<br> <br>                    for (int j = i; j &lt; i + l; j++) {<br>                        //System.out.println(z[0] + " " + z[1]);<br>                        cnt[k][i][i + l] += cnt[z[0]][i][j] * cnt[z[1]][j + 1][i + l];<br>                        if (cnt[k][i][i + l] &gt; INF) {<br>                            cnt[k][i][i + l] = INF;<br>                        }<br>                        if (cnt[k][i][i + l] &gt; 0) {<br>                            was[k] = true;<br>                        }<br>                    }<br>                }<br>            }<br>        }<br> <br>        int ss = seed - 'A';<br>        if (cnt[ss][0][n - 1] == INF) {<br>            return -1;<br>        } else {<br>            return (int) cnt[ss][0][n - 1];<br>        }<br>    }<br> <br>}<br> <br> <br>// Powered by PopsEdit<br> <br>// Powered by CodeProcessor<br></td>