<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections.Generic;<br><br>public class JoinedString {<br>  string[] w;<br>  int[,] common;<br>  int[,] best;<br>  string[,] bsol;<br>  int[] len;<br>  <br>  int rec(int first, int set)<br>  {<br>    if (best[first, set] &gt; 0)<br>      return best[first, set];<br>    if (set == (1 &lt;&lt; first))<br>    {<br>      best[first, set] = len[first];<br>      bsol[first, set] = w[first];<br>    } <br>    else<br>    {<br>      int nset = set ^ (1 &lt;&lt; first);<br>      int res = int.MaxValue;<br>      string rsol = "";<br>      for (int second = 0; second &lt; w.Length; ++second)<br>        if ((nset &amp; (1 &lt;&lt; second)) &gt; 0)<br>        {<br>          int cur = len[first] + rec(second, nset) - common[first, second];<br>          string csol = "";<br>          if (cur &lt;= res)<br>          {<br>            csol = w[first].Substring(0, len[first] - common[first, second]) + bsol[second, nset];<br>          }<br>          if (cur &lt; res || ((cur == res) &amp;&amp; better(csol, rsol)))<br>          {<br>            res = cur;<br>            rsol = csol;<br>          }<br>        }<br>      bsol[first, set] = rsol;<br>      best[first, set] = res;<br>    }<br>    return best[first, set];<br>  }<br>  <br>  public string joinWords(string[] words) {<br>    List&lt;string&gt; filteredWords = new List&lt;string&gt;();<br>    foreach (string word in words)<br>    {<br>      bool ok = true;<br>      foreach (string big in words)<br>        if (word.Length &lt; big.Length &amp;&amp; big.IndexOf(word) &gt;= 0)<br>          ok = false;<br>      foreach (string old in filteredWords)<br>        if (word.CompareTo(old) == 0)<br>          ok = false;<br>      if (ok)<br>        filteredWords.Add(word);<br>    }<br>    w = filteredWords.ToArray();<br>    common = new int[w.Length, w.Length];<br>    len = new int[w.Length];<br>    for (int i = 0; i &lt; w.Length; ++i)<br>      len[i] = w[i].Length;<br>    for (int i = 0; i &lt; w.Length; ++i)<br>      for (int j = 0; j &lt; w.Length; ++j)<br>      {<br>        string w1 = w[i];<br>        string w2 = w[j];<br>        for (int k = 1; k &lt;= Math.Min(w1.Length, w2.Length); ++k)<br>          if (w1.Substring(w1.Length - k).CompareTo(w2.Substring(0, k)) == 0)<br>            common[i, j] = k;<br>      }<br>    bsol = new string[w.Length, 1 &lt;&lt; w.Length];<br>    best = new int[w.Length, 1 &lt;&lt; w.Length];<br>    string res = "";<br>    for (int i = 0; i &lt; w.Length; ++i)<br>    {<br>      rec(i, (1 &lt;&lt; w.Length) - 1);<br>      string cur = bsol[i, (1 &lt;&lt; w.Length) - 1];<br>      if (better(cur, res))<br>        res = cur;<br>    }<br>    return res;<br>  }<br><br>  bool better(string a, string b)<br>  {<br>    if (b.Length == 0 &amp;&amp; a.Length &gt; 0)<br>      return true;<br>    if (a.Length != b.Length)<br>      return a.Length &lt; b.Length;<br>    else<br>      return a.CompareTo(b) &lt; 0;<br>  }<br><br><br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003] [modified for C# by Petr]<br>// Powered by CodeProcessor<br></td>