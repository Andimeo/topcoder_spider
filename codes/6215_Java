<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br> <br>public class JoinedString {<br>    int[][] next;<br>    int[] par;<br>    int[] edge;<br>    int[] mark;<br>    int[] suf;<br>    int s;<br> <br>    int[] from;<br>    char[] with;<br> <br>    void fill(int x) {<br>        if (suf[x] != -1) {<br>            return;<br>        }<br> <br>        if (x == 0) {<br>            suf[x] = 0;<br>            for (int i = 0; i &lt; s; i++) {<br>                if (next[x][i] == -1) {<br>                    next[x][i] = 0;<br>                }<br>            }<br>        } else {<br>            if (par[x] == 0) {<br>                suf[x] = 0;<br>            } else {<br>                suf[x] = next[suf[par[x]]][edge[x]];<br>            }<br>            fill(suf[x]);<br> <br>            for (int i = 0; i &lt; s; i++) {<br>                if (next[x][i] == -1) {<br>                    next[x][i] = next[suf[x]][i];<br>                }<br>            }<br>        }<br>    }<br> <br>    String generate(int v) {<br>        if (v == 0) {<br>            return "";<br>        }<br> <br>        return generate(from[v]) + with[v];<br>    }<br> <br>    public String joinWords(String[] words) {<br>        int n = words.length;<br> <br>        next = new int[601][26];<br>        par = new int[601];<br>        edge = new int[601];<br>        suf = new int[601];<br>        Arrays.fill(suf, -1);<br>        mark = new int[601];<br>        s = 26;<br>        int nd = 1;<br>        Arrays.fill(next[0], -1);<br>        int z = 0;<br>        for (String word : words) {<br>            int cur = 0;<br>            for (int j = 0; j &lt; word.length(); j++) {<br>                if (next[cur][word.charAt(j) - 'A'] == -1) {<br>                    Arrays.fill(next[nd], -1);<br>                    next[cur][word.charAt(j) - 'A'] = nd;<br>                    par[nd] = cur;<br>                    edge[nd] = word.charAt(j) - 'A';<br>                    nd++;<br>                }<br>                cur = next[cur][word.charAt(j) - 'A'];<br>            }<br>            mark[cur] |= 1 &lt;&lt; z;<br>            z++;<br>        }<br> <br>        for (int i = 0; i &lt; nd; i++) {<br>            fill(i);<br>        }<br> <br>        boolean changed = true;<br>        while (changed) {<br>            changed = false;<br>            for (int i = 0; i &lt; nd; i++) {<br>                int save = mark[i];<br>                mark[i] |= mark[suf[i]];<br>                if (save != mark[i]) {<br>                    changed = true;<br>                }<br>            }<br>        }<br> <br>        from = new int[601 * (1 &lt;&lt; n)];<br>        boolean[] u = new boolean[601 * (1 &lt;&lt; n)];<br>        int[] q = new int[601 * (1 &lt;&lt; n)];<br>        with = new char[601 * (1 &lt;&lt; n)];<br>        int h = 0;<br>        int t = 1;<br>        q[h] = 0;<br>        u[0] = true;<br> <br>        int ans = -1;<br> <br>        search:<br>        while (h &lt; t) {<br>            int v = q[h++];<br>            int x = v &gt;&gt; n;<br>            int mask = v &amp; ((1 &lt;&lt; n) - 1);<br> <br>            for (int i = 0; i &lt; 26; i++) {<br>                int y = next[x][i];<br>                int nm = mask | mark[y];<br>                int nv = (y &lt;&lt; n) + nm;<br>                if (!u[nv]) {<br>                    u[nv] = true;<br>                    from[nv] = v;<br>                    with[nv] = (char) (i + 'A');<br>                    q[t++] = nv;<br>                }<br>                if (nm == (1 &lt;&lt; n) - 1) {<br>                    ans = nv;<br>                    break search;<br>                }<br>            }<br>        }<br> <br>        return generate(ans);<br>    }<br> <br> <br>}<br> <br> <br>// Powered by PopsEdit<br> <br>// Powered by CodeProcessor<br></td>