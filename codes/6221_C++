<td class="problemText" colspan="8" valign="middle" align="left">
            // some includes<br>#include &lt;algorithm&gt; <br>#include &lt;numeric&gt; <br><br>#include &lt;iostream&gt; <br>#include &lt;sstream&gt; <br>#include &lt;string&gt; <br>#include &lt;vector&gt; <br>#include &lt;queue&gt; <br>#include &lt;set&gt; <br>#include &lt;map&gt; <br><br>#include &lt;cstdio&gt; <br>#include &lt;cstdlib&gt; <br>#include &lt;cctype&gt; <br>#include &lt;cassert&gt; <br><br>#include &lt;cmath&gt; <br>#include &lt;complex&gt;<br><br>using namespace std;<br><br>// useful defines<br>#define Size(x) (int)(x).size()<br>#define For(i,a,b) for(int i=(int)(a);i&lt;=(int)(b);++i)<br>#define Ford(i,a,b) for(int i=(int)(a);i&gt;=(int)(b);--i) <br>#define Rep(i,n) for (int i=0;i&lt;(n);++i)<br>#define RepV(i,v) for (int i=0;i&lt;Size(v);++i)<br>#define All(c) (c).begin(),(c).end()<br>#define Fill(a,b) memset(&amp;a,b,sizeof(a))   <br>                                   <br>// code, written during competition<br><br>string a;<br>int h[100][100];<br><br>int find(int l, int r){<br>  if ( (r&lt;l) || ((r-l)%2==0) ) return 0;<br>  if (h[l][r]&gt;0) return h[l][r];<br>  int ress=10000000;<br>  <br>  For(i,l+1,r)<br>    if ((i-l)%2==1) {<br>      int res = 0;<br>      if (a[l]=='(' &amp;&amp; a[i]!=')') ++res;<br>      else if (a[l]=='[' &amp;&amp; a[i]!=']') ++res;<br>      else if (a[l]=='{' &amp;&amp; a[i]!='}') ++res;<br>      else if (a[l]==']' &amp;&amp; (a[i]==']' || a[i]==')' || a[i]=='}')) ++res;<br>      else if (a[l]=='}' &amp;&amp; (a[i]==']' || a[i]==')' || a[i]=='}')) ++res;<br>      else if (a[l]==')' &amp;&amp; (a[i]==']' || a[i]==')' || a[i]=='}')) ++res;<br>      else if (a[l]==']' &amp;&amp; (a[i]=='[' || a[i]=='(' || a[i]=='{')) res+=2;<br>      else if (a[l]=='}' &amp;&amp; (a[i]=='[' || a[i]=='(' || a[i]=='{')) res+=2;<br>      else if (a[l]==')' &amp;&amp; (a[i]=='[' || a[i]=='(' || a[i]=='{')) res+=2;<br>      res += find(l+1,i-1)+find(i+1,r);<br>      ress = min(ress,res);<br>  }<br>  h[l][r]=ress;<br>  return ress;<br>  <br>}<br><br>class CorrectingParenthesization{<br>  public: <br>  int getMinErrors(string s) { <br>    int res=0;<br><br>    if (Size(s)==0) return 0;<br>      <br>    int n=Size(s);<br>    Fill(h,0);<br>    a=s;<br>    res = find(0,n-1);<br>    //cout &lt;&lt; h[4][5];<br><br>    return res;<br>  } <br>  <br> <br>}; <br><br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003]<br>// Powered by CodeProcessor<br></td>