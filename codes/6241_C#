<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Text;<br>using System.Text.RegularExpressions;<br>using System.Collections;<br>using System.Collections.Generic;<br>using System.Collections.Specialized;<br><br>public class ScoreRecomposition {<br><br>    int n, best;<br>    bool[] flag;<br>    int[] s;<br><br><br>    public int minError(string questions, int score) {<br>        n = questions.Length;<br>        flag = new bool[n + 1];<br>        s = new int[n];<br><br>        best = int.MaxValue;<br>        dfs(questions, score, 0, 0, 0);<br><br>        if (best == int.MaxValue) best = -1;<br>        return best;<br>    }<br><br>    void dfs(string questions, int score, int pos, int sum, int p)<br>    {<br>        if (pos == n)<br>        {<br>            if(sum != score) return;<br>            <br>            best = Math.Min(best, p);<br>            return;<br>        }<br>        if (sum &gt; score) return;<br>        for(int i=1; i&lt;=n; i++)<br>        {<br>            if(!flag[i])<br>            {<br>                flag[i] = true;<br>                s[pos] = i;<br>                if (questions[pos] == 'C') sum += i;<br>                dfs(questions, score, pos+1, sum, Math.Max(p, Math.Abs(pos+1-i)));<br>                if (questions[pos] == 'C') sum -= i;                <br>                flag[i] = false;<br>            }<br>        }<br>    }<br><br><br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by CodeProcessor<br></td>