<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;vector&gt;<br>#include &lt;map&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;functional&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;iostream&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;ctime&gt;<br> <br>using namespace std;<br> <br>#define ll long long<br>#define ABS(a,b) (a)&gt;(b)?((a)-(b)):((b)-(a))<br> <br>class SynchronizingGuideposts {<br>  int n;<br> <br>ll calcCost(vector&lt;ll&gt;&amp;p, vector&lt;ll&gt;&amp;l,ll x, int C ){<br>  ll result=0;<br>  for (int i=0;i&lt;n;i++){<br>    ll cha = ABS(p[i],x);<br>    result += cha;<br>    if (cha&gt;l[i]){<br>      result += C*(cha-l[i]);<br>    }<br>  }<br>  return result;<br>}<br>  <br>public:<br>  long long minCost(vector &lt;string&gt;, int);<br>};<br> <br> <br>long long SynchronizingGuideposts::minCost(vector &lt;string&gt; gps, int C) {<br>  vector&lt;ll&gt; p;<br>  vector&lt;ll&gt; l;<br>  n = gps.size();<br>  p.resize(n);<br>  l.resize(n);<br>  <br>  int t1,t2,t3;<br>  for (int i=0;i&lt;n;i++){<br>    string s = gps[i];<br>    const char * ps = s.c_str();<br>    sscanf(ps,"%d %d %d", &amp;t1,&amp;t2,&amp;t3);<br>    p[i]=t1+t2;<br>    l[i]=t3;<br>  }<br>  <br>  <br>  ll minC = calcCost(p,l,0,C);<br>  for (int i=0;i&lt;n;i++){<br>    ll r;<br>    if (p[i]&gt;0){<br>      r = calcCost(p,l,p[i],C);<br>      if (r&lt;minC) minC = r;<br>    }<br>    <br>    if (p[i]-l[i]&gt;0){<br>      r = calcCost(p,l,p[i]-l[i],C);<br>      if (r&lt;minC) minC = r;<br>    }<br>    if (p[i]+l[i]&gt;0){<br>      r = calcCost(p,l,p[i]+l[i],C);<br>      if (r&lt;minC) minC = r;<br>    }<br>  }<br>  return minC;<br>}<br></td>