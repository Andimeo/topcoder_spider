<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br> <br>public class SynchronizingGuideposts<br>{<br>   long [] A = new long [50];<br>   long [] B = new long [50];<br>   long [] C = new long [50];<br>   int N;<br>      <br>   String [] T;<br>   long Tax, Best;<br>   <br>   private void Check(long X) <br>   {<br>      if (X &lt; 0) return;<br>      long Sum = 0;<br>      for (int i = 0; i &lt; N; i++)<br>      {<br>        long D = X - A[i];<br>        long S = D - B[i]; if (S &lt; 0) S = -S;<br>        Sum = Sum + S;<br>        if (S &gt; C[i]) Sum += (S - C[i])*Tax;<br>      }<br>      if (Best &gt; Sum) Best = Sum;<br>   }<br>   <br>   public long minCost(String[] pT, int pTax)<br>   {<br>     Tax = pTax; T = pT; N = T.length;<br>     for (int i = 0; i &lt; N; i++)<br>     {<br>        StringTokenizer Tok = new StringTokenizer(T[i]);<br>        A[i] = Long.parseLong(Tok.nextToken());<br>        B[i] = Long.parseLong(Tok.nextToken());<br>        C[i] = Long.parseLong(Tok.nextToken());<br>     }<br>     Best = 100000000000000000L; Check(0);<br>     for (int i = 0; i &lt; N; i++)          <br>     {<br>       Check(A[i]);<br>       Check(A[i] - B[i]);<br>       Check(A[i] + B[i]);<br>       Check(A[i] - B[i] - C[i]);<br>       Check(A[i] - B[i] + C[i]);<br>       Check(A[i] + B[i] - C[i]);<br>       Check(A[i] + B[i] + C[i]);<br>       Check(A[i] - C[i]);<br>       Check(A[i] + C[i]);<br>   <br>     }<br>          <br>     return Best;<br>   }<br>}<br></td>