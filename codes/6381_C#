<td class="problemText" colspan="8" valign="middle" align="left">
            class BlockCounter<br>{<br>  bool compressed(string s)<br>  {<br>    int c=0;<br>    for (int i=0;i&lt;s.Length;i++)<br>    {<br>      if (s[i]=='(') <br>        c++;<br>      if (s[i]==')')<br>        c--;<br>      if (c&lt;0)<br>        return false;<br>    }<br>    return true;<br>  }<br>  long count(string s,out char p,out char q)<br>  {<br>    if (s.Length==1)<br>    {<br>      p=q=s[0];<br>      return 1;<br>    }<br>    for (int i=1;i&lt;s.Length;i++)<br>      if (compressed(s.Substring(0,i)) &amp;&amp; compressed(s.Substring(i,s.Length-i)))<br>      {<br>        char m1,m2;<br>        long c1=count(s.Substring(0,i),out p,out m1);<br>        long c2=count(s.Substring(i,s.Length-i),out m2,out q);<br>        if (m1==m2)<br>          return c1+c2-1;<br>        else<br>          return c1+c2;<br>      }<br>    int X=(int)(s[1])-(int)('0');<br>    string s0=s.Substring(3,s.Length-4);<br>    long c0=count(s0,out p,out q);<br>    if (p==q)<br>      return (c0-1)*(long)X+(long)1;<br>    else<br>      return c0*(long)X;<br>  }<br>  public long countBlocks(string word)<br>  {<br>    char p,q;<br>    return count(word,out p,out q);<br>  }<br>}<br></td>