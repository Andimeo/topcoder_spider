<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br><br>public class SeatingPlan {<br>  long[,,,] numWays;<br>  bool[, , ,] got;<br>  int n;<br>  int m;<br>  public string expectedTrial(int m, int n, int k) {<br>    if (m &gt; n)<br>      return expectedTrial(n, m, k);<br><br>    this.m = m;<br>    this.n = n;<br>    <br>    numWays = new long[n, m, (1 &lt;&lt; m), k + 1];<br>    got = new bool[n, m, (1 &lt;&lt; m), k + 1];<br>    long a = get(0, 0, 0, k);<br>    if (a == 0)<br>      return "Impossible!";<br>    cCache = new long[n * m + 1, k + 1];<br>    gotC = new bool[n * m + 1, k + 1];<br>    long b = C(n * m, k);<br>    long z = gcd(a, b);<br>    return (b / z) + "/" + (a / z);<br>  }<br><br>  private long gcd(long a, long b)<br>  {<br>    while (a &gt; 0 &amp;&amp; b &gt; 0)<br>      if (a &gt; b) a %= b; else b %= a;<br>    return a + b;<br>  }<br><br>  long[,] cCache;<br>  bool[,] gotC;<br><br>  private long C(int n, int k)<br>  {<br>    if (k == 0 || k == n)<br>      return 1;<br>    if (gotC[n, k])<br>      return cCache[n, k];<br>    gotC[n, k] = true;<br>    cCache[n, k] = C(n - 1, k - 1) + C(n - 1, k);<br>    return cCache[n, k];<br>  }<br><br>  private long get(int y, int x, int mask, int k)<br>  {<br>    if (x &gt;= m)<br>      return get(y + 1, 0, mask, k);<br>    if (y &gt;= n)<br>    {<br>      return k == 0 ? 1 : 0;<br>    }<br>    if (got[y, x, mask, k])<br>      return numWays[y, x, mask, k];<br>    long res = 0;<br>    res += get(y, x + 1, mask &amp; ~(1 &lt;&lt; x), k);<br>    if (k &gt; 0 &amp;&amp; ((mask &amp; (1 &lt;&lt; x)) == 0) &amp;&amp; ((x == 0) || ((mask &amp; (1 &lt;&lt; (x - 1))) == 0)))<br>      res += get(y, x + 1, mask | (1 &lt;&lt; x), k - 1);<br>    numWays[y, x, mask, k] = res;<br>    got[y, x, mask, k] = true;<br>    return res;<br>  }<br><br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003] [modified for C# by Petr]<br>// Powered by CodeProcessor<br></td>