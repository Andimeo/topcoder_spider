<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;vector&gt;<br>#include &lt;list&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;deque&gt;<br>#include &lt;stack&gt;<br>#include &lt;bitset&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;functional&gt;<br>#include &lt;numeric&gt;<br>#include &lt;utility&gt;<br>#include &lt;sstream&gt;<br>#include &lt;iostream&gt;<br>#include &lt;iomanip&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;ctime&gt;<br><br>using namespace std;<br><br>typedef long long __int64;<br><br>class SeatingPlan<br>{<br>public:<br>  int m,n,k;<br>  __int64 f[100][256][25];<br>  bool vis[100][256][25];<br>  bool valid[256];<br>  int countbit[256];<br>  __int64 p,q;<br>  void init()<br>  {<br>    for (int set=0;set&lt;256;set++)<br>    {<br>      valid[set]=true;<br>      countbit[set]=0;<br>      for (int i=0;i&lt;8;i++)<br>        if ((set&amp;(1&lt;&lt;i))&gt;0)<br>        {<br>          countbit[set]++;<br>          if (i&gt;0 &amp;&amp; (set&amp;(1&lt;&lt;(i-1)))&gt;0)<br>            valid[set]=false;<br>        }<br>    }<br>  }<br>  __int64 gcd(__int64 a,__int64 b)<br>  {<br>    if (a&lt;b)<br>      return gcd(b,a);<br>    if (b==0)<br>      return a;<br>    else<br>      return gcd(b,a%b);<br>  }<br>  __int64 solve(int r,int data,int used)<br>  {<br>    if (r&gt;m)<br>      return (int)(used==k);<br>    if (vis[r][data][used])<br>      return f[r][data][used];<br>    vis[r][data][used]=true;<br>    __int64 &amp;res=f[r][data][used];<br>    res=0;<br>    for (int set=0;set&lt;(1&lt;&lt;n);set++)<br>      if (valid[set] &amp;&amp; (set&amp;data)==0 &amp;&amp; countbit[set]+used&lt;=k)<br>      {<br>        res+=solve(r+1,set,used+countbit[set]);<br>      }<br>    return res;<br>  }<br>  string out(__int64 v)<br>  {<br>    string s;<br>    if (v&lt;10)<br>      s="";<br>    else<br>      s=out(v/10);<br>    s+=char((int)(v%10)+'0');<br>    return s;<br>  }<br>  string expectedTrial(int _m, int _n, int _k)<br>  {<br>    if (_m&lt;_n)<br>      return expectedTrial(_n,_m,_k);<br>    m=_m;<br>    n=_n;<br>    k=_k;<br>    memset(vis,false,sizeof(vis));<br>    q=1;<br>    init();<br>    for (int i=1;i&lt;=k;i++)<br>    {<br>      __int64 t=gcd(q,i);<br>      q=q/t*((m*n+1-i)/(i/t));<br>    }<br>    p=solve(1,0,0);<br>    if (p==0)<br>      return "Impossible!";<br>    else<br>    {<br>      __int64 d=gcd(p,q);<br>      p/=d;<br>      q/=d;<br>      return out(q)+"/"+out(p);<br>    }<br>  }<br>};<br></td>