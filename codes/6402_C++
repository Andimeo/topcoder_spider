<td class="problemText" colspan="8" valign="middle" align="left">
            #include&lt;vector&gt;<br>#include&lt;list&gt;<br>#include&lt;map&gt;<br>#include&lt;set&gt;<br>#include&lt;stack&gt;<br>#include&lt;algorithm&gt;<br>#include&lt;numeric&gt;<br>#include&lt;sstream&gt;<br>#include&lt;iostream&gt;<br>#include&lt;cstdio&gt;<br>#include&lt;cmath&gt;<br>#include&lt;cstdlib&gt;<br> <br>using namespace std;<br> <br>typedef long long int64;<br>typedef vector&lt;int&gt; vi;<br>#define FOR(i,n) for (int i=0; i&lt;(n); i++)<br> <br>struct RestoringPolygon {<br>  int p[16];<br>  int find(int x) { return p[x]==x?x:p[x]=find(p[x]); }<br>  int restore(vector &lt;int&gt; x1, vector &lt;int&gt; x2, vector &lt;int&gt; y) {<br>    typedef pair&lt;int,int&gt; p2;<br>    typedef pair&lt;int,p2&gt; p3;<br>    vector&lt;p3&gt; t;<br>    FOR(i,y.size()) if (x1[i]&gt;x2[i]) swap(x1[i],x2[i]);<br>    FOR(i,y.size()) t.push_back(p3(y[i],p2(x1[i],x2[i])));<br>    sort(t.begin(),t.end());<br>    int ans=0,first=0;<br>    for (int take=1; take&lt;(1&lt;&lt;t.size()); take++) {<br>      bool dead1[16]={},dead2[16]={},taken[16]={};<br>      int cnt=0;<br>      FOR(i,t.size()) if (take&amp;1&lt;&lt;i) taken[i]=true;<br>      FOR(i,t.size()) p[i]=i;<br>      FOR(i,t.size()) if (taken[i]) {<br>        if (!dead1[i]) {<br>          for (int j=i+1; j&lt;t.size(); j++) if (taken[j])<br>            if (t[j].second.first==t[i].second.first) {<br>              dead1[j]=dead1[i]=true;<br>              p[find(j)]=find(i);<br>              break;<br>            } else if (t[j].second.second==t[i].second.first) {<br>              dead2[j]=dead1[i]=true;<br>              p[find(j)]=find(i);<br>              break;<br>            } else if (t[j].second.first&lt;=t[i].second.first &amp;&amp; t[i].second.first&lt;=t[j].second.second) goto next;<br>          if (!dead1[i]) goto next;<br>        }<br>        if (!dead2[i]) {<br>          for (int j=i+1; j&lt;t.size(); j++) if (taken[j])<br>            if (t[j].second.first==t[i].second.second) {<br>              dead1[j]=dead2[i]=true;<br>              p[find(j)]=find(i);<br>              break;<br>            } else if (t[j].second.second==t[i].second.second) {<br>              dead2[j]=dead2[i]=true;<br>              p[find(j)]=find(i);<br>              break;<br>            } else if (t[j].second.first&lt;=t[i].second.second &amp;&amp; t[i].second.second&lt;=t[j].second.second) goto next;<br>          if (!dead2[i]) goto next;<br>        }                    <br>      }<br>//      cout&lt;&lt;take&lt;&lt;endl;<br>      while (!taken[first]) first++;<br>      FOR(i,t.size()) if (taken[i] &amp;&amp; find(i)!=find(first)) goto next;<br>      FOR(i,t.size()) cnt+=taken[i];<br>      ans&gt;?=2*cnt;<br>next:;      <br>    }<br>    return ans;<br>  }<br>};<br> <br>//Powered by [KawigiEdit] 2.0!<br></td>