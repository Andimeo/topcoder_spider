<td class="problemText" colspan="8" valign="middle" align="left">
            /*<br>* @author nik<br>*/<br><br>import java.util.*;<br><br>public class RestoringPolygon {<br><br>  public int restore(int[] x1, int[] x2, int[] y) {<br>    boolean[] w = new boolean[y.length];<br><br>    int m = 0;<br><br>    main: <br>    while (true) {<br>      int i = 0;<br>      while (i &lt; w.length &amp;&amp; w[i]) {<br>        w[i] = false;<br>        i++;<br>      }<br>      if (i &gt;= w.length) break;<br>      w[i] = true;<br><br>      List&lt;P&gt; ps = new ArrayList&lt;P&gt;();<br>      for (int j = 0; j &lt; w.length; j++) {<br>        if (w[j]) {<br>          P p1 = new P(x1[j], y[j]);<br>          ps.add(p1);<br>          P p2 = new P(x2[j], y[j]);<br>          ps.add(p2);<br>          p1.np.add(p2);<br>          p2.np.add(p1);<br>        }<br>      }<br>      if (ps.size() &lt; 4) continue main;<br><br>      Collections.sort(ps, new Comparator&lt;P&gt;() {<br>        public int compare(P o1, P o2) {<br>          return o1.y - o2.y;<br>        }<br>      });<br><br>      for (int j = 0; j &lt; ps.size(); j++) {<br>        P p = ps.get(j);<br>        if (p.np.size() == 1) {<br>          for (int k = j+1; k &lt; ps.size(); k++) {<br>            P p2 = ps.get(k);<br>            if (p2.x == p.x &amp;&amp; p2.y &gt; p.y) {<br>              if (p2.np.size() &gt; 1) continue main;<br>              p2.np.add(p);<br>              p.np.add(p2);<br>              break;<br>            }<br>          }<br>          if (p.np.size() == 1) continue main;<br>        }<br>      }<br><br>      for (P p1 : ps) {<br>        for (P p2 : ps) {<br>          P p3 = p1.np.get(0);<br>          P p4 = p2.np.get(1);<br>          if (p1 != p2 &amp;&amp; p3 != p2 &amp;&amp; p4 != p1 &amp;&amp; p4 != p3) {<br>            if (p1.x &lt;= p2.x &amp;&amp; p2.x &lt;= p3.x || p1.x &gt;= p2.x &amp;&amp; p2.x &gt;= p3.x) {<br>              if (p2.y &lt;= p1.y &amp;&amp; p1.y &lt;= p4.y || p2.y &gt;= p1.y &amp;&amp; p1.y &gt;= p4.y) {<br>                continue main;<br>              }<br>            }<br>          }<br>        }<br>      }<br><br>      Set&lt;P&gt; vp = new HashSet&lt;P&gt;();<br>      go(vp, ps.get(0));<br>      if (vp.size() == ps.size()) {<br>        m = Math.max(m, ps.size());<br>      }<br>    }<br>    return m;<br>  }<br><br>  private void go(Set&lt;P&gt; vp, P p) {<br>    vp.add(p);<br>    for (P nn : p.np) {<br>      if (!vp.contains(nn)) {<br>        go(vp, nn);<br>      }<br>    }<br>  }<br><br>  private class P {<br>    int x, y;<br>    List&lt;P&gt; np = new ArrayList&lt;P&gt;();<br><br>    public P(int x, int y) {<br>      this.x = x;<br>      this.y = y;<br>    }<br>  }<br>}<br></td>