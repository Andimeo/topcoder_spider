<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;vector&gt;<br>#include &lt;list&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;deque&gt;<br>#include &lt;queue&gt;<br>#include &lt;stack&gt;<br>#include &lt;bitset&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;functional&gt;<br>#include &lt;numeric&gt;<br>#include &lt;utility&gt;<br>#include &lt;sstream&gt;<br>#include &lt;iostream&gt;<br>#include &lt;iomanip&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cctype&gt;<br>#include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;list&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;deque&gt;<br>#include &lt;queue&gt;<br>#include &lt;stack&gt;<br>#include &lt;cstring&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;ctime&gt;<br><br>using namespace std;<br><br>typedef long long int64;<br>typedef unsigned long long uint64;<br>#define two(X) (1&lt;&lt;(X))<br>#define twoL(X) (((int64)(1))&lt;&lt;(X))<br>#define contain(S,X) (((S)&amp;two(X))!=0)<br>#define containL(S,X) (((S)&amp;twoL(X))!=0)<br>const double pi=acos(-1.0);<br>const double eps=1e-11;<br>template&lt;class T&gt; inline void checkmin(T &amp;a,T b){if(b&lt;a) a=b;}<br>template&lt;class T&gt; inline void checkmax(T &amp;a,T b){if(b&gt;a) a=b;}<br>template&lt;class T&gt; inline T sqr(T x){return x*x;}<br>typedef pair&lt;int,int&gt; ipair;<br><br>const int maxsize=1500;<br><br>class WebsiteRank<br>{<br>public:<br>  int n;<br>  bool G[maxsize][maxsize],R[maxsize][maxsize];<br>  int deg[maxsize];<br>  int64 ID[maxsize];<br>  map&lt;string,int&gt; M;<br>  int index(string s)<br>  {<br>    if (M.find(s)==M.end())<br>      M[s]=(++n);<br>    return M[s];<br>  }<br>  int64 countVotes(vector &lt;string&gt; votes, string website)<br>  {<br>    n=0;<br>    M.clear();<br>    int dest=index(website);<br>    memset(G,false,sizeof(G));<br>    for (int i=0;i&lt;votes.size();i++)<br>    {<br>      istringstream sin(votes[i]);<br>      string headstr,str;<br>      sin&gt;&gt;headstr;<br>      for (;sin&gt;&gt;str;G[index(str)][index(headstr)]=true);<br>    }<br>    for (int i=1;i&lt;=n;i++) G[i][i]=true;<br>    memcpy(R,G,sizeof(R));<br>    for (int k=1;k&lt;=n;k++)<br>      for (int i=1;i&lt;=n;i++)<br>        for (int j=1;j&lt;=n;j++)<br>          R[i][j]=R[i][j] || R[i][k] &amp;&amp; R[k][j];<br>    for (int i=1;i&lt;=n;i++)<br>      for (int j=1;j&lt;=n;j++)<br>        if (G[i][j] &amp;&amp; R[j][i])<br>          G[i][j]=false;<br>    memset(deg,0,sizeof(deg));<br>    for (int i=1;i&lt;=n;i++)<br>      for (int j=1;j&lt;=n;j++)<br>        if (G[i][j])<br>          deg[j]++;<br>    for (int i=1;i&lt;=n;i++) ID[i]=1;<br>    for (int step=1;step&lt;=n;step++)<br>      for (int i=1;i&lt;=n;i++) if (deg[i]==0)<br>      {<br>        deg[i]=-1;<br>        for (int j=1;j&lt;=n;j++) if (G[i][j])<br>          ID[j]+=ID[i],deg[j]--;<br>      }<br>    return ID[dest];<br>  }<br>};<br></td>