<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections;<br>using System.Collections.Generic;<br><br>public class UnfairDivision <br>{<br>  int[] assets;<br>  public int albertsShare(int[] assets) <br>  {<br>    this.assets = assets;<br>    int[] shares = new int[3];<br>    int best = -1;<br>    for (int i = 1; i &lt; assets.Length; i++)<br>    {<br>      int betty = -1;<br>      int albert = 99999;<br>      int carla = -1;<br>      for (int j = 1; j &lt; assets.Length; j++)<br>      {<br>        if (j != i)<br>        {<br>          sumsort(i, j, shares);<br>          if (shares[1] &gt; betty)<br>          {<br>            betty = shares[1];<br>            carla = shares[2];<br>            albert = shares[0];<br>          }<br>          else if (shares[1] == betty)<br>          {<br>            if (albert &gt; shares[0])<br>            {<br>              betty = shares[1];<br>              carla = shares[2];<br>              albert = shares[0];<br>            }<br>          }<br>        }<br>      }<br>      best= Math.Max(albert, best);<br>    }<br>    return best;<br>  }<br><br>  void sumsort(int i, int j, int[] shares)<br>  {<br>    shares[0] = 0;<br>    shares[1] = 0;<br>    shares[2] = 0;<br>    for (int k = 0; k &lt; Math.Min(i,j); k++)<br>    {<br>      shares[0] += assets[k];<br>    }<br>    for (int k = Math.Min(i, j); k &lt; Math.Max(i, j); k++)<br>    {<br>      shares[1] += assets[k];<br>    }<br>    for (int k = Math.Max(i, j); k &lt; assets.Length; k++)<br>    {<br>      shares[2] += assets[k];<br>    }<br>    Array.Sort(shares);<br>  }<br><br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by CodeProcessor<br></td>