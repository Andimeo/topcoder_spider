<td class="problemText" colspan="8" valign="middle" align="left">
            public class Cannibals {<br>  <br>  int dp[][][] = new int[101][101][2];<br>  int UNSOLVED = -2, SEEN = -3, HERE=1, THERE=-1, INF = 1000000;<br>  int M,R,C;<br>  <br>  <br>  public int solve(int m, int c, int boat){<br>    //System.out.println("Solving for m="+m+" c="+c+" boat="+boat);<br>    if(c &lt; 0 || m &lt; 0 || c &gt; C || m &gt; M) return INF;<br>    int boatidx = boat &lt; 0 ? 0 : boat;<br>    if(dp[m][c][boatidx] == SEEN) return INF;<br>    if(dp[m][c][boatidx] != UNSOLVED) return dp[m][c][boatidx];<br>    if((c &gt; m &amp;&amp; m &gt; 0) || ( (C-c) &gt; (M-m) &amp;&amp; (M-m)&gt;0 )) return dp[m][c][boatidx] = INF; //cannibals outnumber somewhere<br>    if(m == 0 &amp;&amp; c == 0) return dp[m][c][boatidx] = 0; //done<br>    <br>    dp[m][c][boatidx] = SEEN;<br>    <br>    int best = INF;<br>    int seats,mis;<br>    for(int empty=R-1; empty&gt;=0; empty--){<br>      seats = R-empty;<br>      for(int can=0; can&lt;=seats; can++){<br>        mis = seats-can;<br>        if(mis &gt;= can || mis == 0){<br>          //System.out.println("Sending can="+can+" mis="+mis);<br>          int score = solve(m-mis*boat,c-can*boat,-1*boat);<br>          best = Math.min(1+score,best);<br>          //System.out.println("Score is "+score+" best is "+best);<br>        }<br>        //else break;<br>      }<br>    }<br>    <br>    <br>    return dp[m][c][boatidx] = best;<br>  }<br>  <br>  <br>  public int minCrossings(int M, int C, int R){<br>    this.M=M; this.C=C; this.R = R;<br>    for(int x=0; x&lt;101; x++)for(int y=0; y&lt;101;y++) dp[x][y][0] = dp[x][y][1] = UNSOLVED;<br>    <br>    int res = solve(M,C,HERE);<br>    if(res &gt;= INF) return -1;<br>    return res;<br>  }<br>}<br></td>