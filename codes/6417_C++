<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;iostream&gt;<br>#include &lt;cstring&gt;<br>#include &lt;vector&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;queue&gt;<br>#include &lt;map&gt;<br>#include &lt;cmath&gt;<br>#include &lt;iomanip&gt;<br> <br>using namespace std;<br> <br>#define FU(i,a,b) for (i=a; i&lt;=b; i++)<br>#define FD(i,a,b) for (i=a; i&gt;=b; i--)<br>#define FVU(i,a)  for (i=0; i&lt;a.size(); i++)<br>#define FVD(i,a) for (i=a.size()-1; i&gt;=0; i--)<br>#define SZ(a) a.size()<br>#define NP(a,b) next_permutation(a,b)<br>#define NUL(i,a) for (i=0; i&lt;a,size(); i++) a[i]=0;<br>string str(long i)<br>{<br>  char a[100];<br>  sprintf(a,"%ld",i);<br>  return a;<br>}<br> <br>long a[1001][1001];<br> <br>class BlockDistance {<br>  public:<br>  int minDist(vector &lt;string&gt; t1, vector &lt;string&gt; t2) {<br>    string s1,s2;<br>    long i,j,q,w,e,r,t,n=t1.size()-1,m=t2.size()-1;<br>    s1=""; FU(i,0,n) s1=s1+t1[i];<br>    s2=""; FU(i,0,m) s2=s2+t2[i];<br>    n=s1.size(); m=s2.size();<br>    s1=" "+s1; s2=" "+s2;<br>    FU(i,0,n) FU(j,0,m) a[i][j]=1000000;<br>    FU(i,0,m) a[0][i]=1; a[0][0]=0;<br>    <br>    FU(j,1,m) FU(i,1,n)<br>    {<br>      if (s1[i]==s2[j]) a[i][j]=min(a[i][j],a[i-1][j-1]);<br>      FD(q,j-1,1) a[i][j]=min(a[i][j],a[i][q]+1);<br>    }<br>    if (a[n][m]&gt;2000) return -1;<br>    else return a[n][m];<br>     <br>  }<br>};<br> <br>// Powered by PopsEdit<br></td>