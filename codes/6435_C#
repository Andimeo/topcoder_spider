<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br><br>public class InterleavePal {<br>  const int INF = 1000000;<br>  string s1;<br>  string s2;<br>  bool[, , ,] isCached;<br>  int[, , ,] cache;<br>  <br>  public int longestPal(string s, string t) {<br>    isCached = new bool[s.Length + 1, s.Length + 1, t.Length + 1, t.Length + 1];<br>    cache = new int[s.Length + 1, s.Length + 1, t.Length + 1, t.Length + 1];<br>    s1 = s;<br>    s2 = t;<br><br>    int res = 0;<br>    for (int i = 0; i &lt;= s.Length; ++i)<br>      for (int j = 0; j &lt;= s.Length - i; ++j)<br>        for (int k = 0; k &lt;= t.Length; ++k)<br>          for (int l = 0; l &lt;= t.Length - k; ++l)<br>            res = Math.Max(res, interleave(i, j, k, l));<br><br>    return res;<br>  }<br><br>  private int interleave(int p1, int l1, int p2, int l2)<br>  {<br>    if (isCached[p1, l1, p2, l2])<br>      return cache[p1, l1, p2, l2];<br>    int res = -INF;<br>    if (l1 + l2 &lt;= 1)<br>    {<br>      res = l1 + l2;<br>    } <br>    else<br>    {<br>      for (int first = 0; first &lt; 2; ++first)<br>      {<br>        int np1 = p1;<br>        int nl1 = l1;<br>        int np2 = p2;<br>        int nl2 = l2;<br>        char ch = ' ';<br>        bool ok = true;<br>        <br>        switch (first)<br>        {<br>          case 0:<br>            if (nl1 == 0)<br>              ok = false;<br>            else<br>            {<br>              ch = s1[np1];<br>              ++np1;<br>              --nl1;<br>            }<br>            break;<br>            <br>          case 1:<br>            if (nl2 == 0)<br>              ok = false;<br>            else<br>            {<br>              ch = s2[np2];<br>              ++np2;<br>              --nl2;<br>            }<br>            break;<br>        }<br>        <br>        if (ok)<br>        {<br>          for (int last = 0; last &lt; 2; ++last)<br>          {<br>            int lp1 = np1;<br>            int ll1 = nl1;<br>            int lp2 = np2;<br>            int ll2 = nl2;<br>            char lch = ' ';<br>            bool lok = true;<br><br>            switch (last)<br>            {<br>              case 0:<br>                if (ll1 == 0)<br>                  lok = false;<br>                else<br>                {<br>                  lch = s1[lp1 + ll1 - 1];<br>                  --ll1;<br>                }<br>                break;<br><br>              case 1:<br>                if (ll2 == 0)<br>                  lok = false;<br>                else<br>                {<br>                  lch = s2[lp2 + ll2 - 1];<br>                  --ll2;<br>                }<br>                break;<br>            }<br>            <br>            if (lok &amp;&amp; ch == lch)<br>            {<br>              res = Math.Max(res, 2 + interleave(lp1, ll1, lp2, ll2));<br>            }<br>          }<br>        }<br>      }<br>    }<br>    <br>    cache[p1, l1, p2, l2] = res;<br>    isCached[p1, l1, p2, l2] = true;<br>    return res;<br>  }<br><br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003] [modified for C# by Petr]<br>// Powered by CodeProcessor<br></td>