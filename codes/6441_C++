<td class="problemText" colspan="8" valign="middle" align="left">
            // Cry as challange phase is passing by<br><br>#include &lt;algorithm&gt;<br>#include &lt;functional&gt;<br><br>#include &lt;cmath&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cstring&gt;<br><br>#include &lt;queue&gt;<br>#include &lt;vector&gt;<br>#include &lt;string&gt;<br>#include &lt;sstream&gt;<br>#include &lt;iostream&gt;<br><br>using namespace std;<br><br>#define FORC(it,v) for( __typeof((v).begin()) it = (v).begin(); it != (v).end(); ++it )<br><br>typedef pair&lt; int, int &gt; point;<br>#define X first<br>#define Y second<br><br>int R, S;<br>int bio[ 256 ][ 256 ];<br>vector&lt; string &gt; grid;<br><br>const int dx[4] = { -1, 0, 1, 0 };<br>const int dy[4] = { 0, 1, 0, -1 };<br><br>inline bool valid( int x, int y ) { if( x &lt; 0 || y &lt; 0 || x &gt;= R || y &gt;= S ) return false; return true; }<br><br>class TroytownKeeper {<br>public:<br>    int limeLiters( vector &lt;string&gt; maze ) {<br>        R = maze.size(); S = maze[0].size();<br>        memset( bio, 0, sizeof bio );<br><br>        grid.clear(); grid.push_back( string( S+2, '.' ) );<br>        FORC( it, maze ) grid.push_back( "." + *it + "." );<br>        grid.push_back( string( S+2, '.' ) );<br><br>        queue&lt; point &gt; Q; R += 2, S += 2;<br><br>        for( Q.push( point( 0, 0 ) ), bio[0][0] = true; !Q.empty(); Q.pop() ) {<br>            point ex = Q.front();<br><br>            for( int pc = 0; pc &lt; 4; ++pc ) {<br>                point nov( ex );<br>                nov.X += dx[pc]; nov.Y += dy[pc];<br><br>                if( ! valid( nov.X, nov.Y ) ) continue;<br>                if( bio [nov.X][nov.Y] ) continue;<br>                if( grid [nov.X][nov.Y] == '#' ) continue;<br><br>                Q.push( nov );<br>                bio [nov.X][nov.Y] = true;<br>            }<br>        }<br><br>        int sum = 0;<br><br>        for( int i = 0; i &lt; R; ++i )<br>            for( int j = 0; j &lt; S; ++j ) {<br>                if( !bio[i][j] ) continue;<br>                for( int pc = 0; pc &lt; 4; ++pc ) {<br>                    int nx = i + dx[pc];<br>                    int ny = j + dy[pc];<br><br>                    if( !valid( nx, ny ) ) continue;<br>                    if( grid[ nx ][ ny ] == '#' ) ++sum;<br>                }<br>            }<br><br>        return sum;<br>    }<br>};<br><br><br><br><br><br><br><br><br><br>// Powered by FileEdit<br>// Powered by moj 3.0 beta 11 [modified TZTester]<br>// Powered by CodeProcessor<br></td>