<td class="problemText" colspan="8" valign="middle" align="left">
            import java.awt.Point;<br>import java.util.PriorityQueue;<br> <br>public class TrainRobber {<br> <br>  public double finalPosition(int length, int nCarriages, String[] offset, String[] period, int trainSpeed, int robberSpeed, int nBridges) {<br>    int noffset = 0;<br>    for (int i = 0; i &lt; offset.length; i++) {<br>      String[] parts = offset[i].split(" ");<br>      noffset += parts.length;<br>    }<br>    int[]offsets = new int[noffset];<br>    int[]periods = new int[noffset];<br>    int c = 0;<br>    for (int i = 0; i &lt; offset.length; i++) {<br>      String[] parts = offset[i].split(" ");<br>      for (int j = 0; j &lt; parts.length; j++) {<br>        offsets[c] = Integer.parseInt(parts[j]);<br>        c++;<br>      }<br>    }<br>    c = 0;<br>    for (int i = 0; i &lt; period.length; i++) {<br>      String[] parts = period[i].split(" ");<br>      for (int j = 0; j &lt; parts.length; j++) {<br>        periods[c] = Integer.parseInt(parts[j]);<br>        c++;<br>      }<br>    }<br>    <br>    double wagonLength = (double) length / (double) robberSpeed * (double) trainSpeed + length;<br>    <br>    double l = 0;<br>    int wags = 0;<br>//    double[] x = new double[noffset];<br>    PriorityQueue pq = new PriorityQueue();<br>    for (int i = 0; i &lt; noffset; i++) {<br>//      x[i] = offsets[i];<br>      pq.add(new A(offsets[i], periods[i]));<br>    }<br>    <br>    int br = 0;<br>    <br>    while (br &lt; nBridges) {<br>      double min = 0;<br>      int mini = 0;<br>      A p = (A) pq.poll();<br>      min = p.offset;<br>      p.offset += p.period;<br>      pq.add(p);<br>      <br>      if (min - l &gt;= wagonLength) {<br>        int newwags = (int) ((min - l) / wagonLength);<br>        if (wags + newwags &gt;= nCarriages) {<br>          return l + wagonLength * (nCarriages - wags);<br>        } else {<br>          wags = wags + newwags;<br>        }<br>      }<br>      <br>      l = min;<br>      br++;<br>    }<br>    <br>    return l;<br>    <br>  }<br> <br>  class A implements Comparable {<br>    double offset = 0;<br>    double period = 0;<br>    public A(int offset, int period) {<br>      this.offset = offset;<br>      this.period = period;<br>    }<br>    public boolean equals(Object obj) {<br>      A a = (A) obj;<br>      if (a.offset == offset) {<br>        return true;<br>      }<br>      return false;<br>    }<br>    public int hashCode() {<br>      return (int) offset;<br>    }<br>    public int compareTo(Object o) {<br>      A a = (A) o;<br>      if (a.offset &lt; offset) {<br>        return 1;<br>      }<br>      if (a.offset == offset) {<br>        return 0;<br>      }<br>      return -1;<br>    }<br>    <br>    <br>  }<br>}<br></td>