<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;cstdio&gt;<br>#include &lt;iostream&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;set&gt;<br>#include &lt;map&gt;<br>#include &lt;stack&gt;<br>#include &lt;list&gt;<br>#include &lt;queue&gt;<br>#include &lt;deque&gt;<br>#include &lt;cctype&gt;<br>#include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;sstream&gt;<br>#include &lt;iterator&gt;<br>#include &lt;numeric&gt;<br>using namespace std;<br> <br>#define MP(a,b) make_pair(a,b)<br> <br>typedef vector &lt;int &gt; VI;<br>typedef vector&lt;VI&gt; VVI;<br>#define REP(i,n) for (int i=0; i&lt;n; ++i)<br>#define FOREACH(it,x) for(__typeof((x).begin()) it=(x.begin()); it!=(x).end(); ++it)<br>#define FOR(i,p,k) for (int i=p; i&lt;=k; ++i)<br>#define PB push_back<br>#define ALL(x) x.begin(),x.end()<br>#define SIZE(x) (int)x.size()<br> <br>map&lt;VI,int&gt; mapa[2];<br>VVI q[2];<br>VVI pom;<br> <br>    class SplitAndMergeGame<br>        { <br>        public: <br>        int minMoves(vector &lt;int&gt; start, vector &lt;int&gt; end){ <br>              sort(ALL(start));<br>              sort(ALL(end));<br>              if (accumulate(ALL(start),0)!=accumulate(ALL(end),0)) return -1;<br>              if (start==end) return 0;<br>              <br>              mapa[0][start]=0; mapa[1][end]=0;<br>              q[0].PB(start); q[1].PB(end);<br>              int res=0;<br>              while (1){<br>                res++;<br>                REP(co,2){<br>                  pom.clear(); swap(q[co],pom);<br>                  FOREACH(it,pom){<br>                    VI v=*it;<br>                    int n=SIZE(v);<br>                    REP(i,n) REP(j,i){<br>                      VI foo=v;<br>                      foo[j]+=foo[i];<br>                      swap(foo[i],foo.back());<br>                      foo.pop_back();<br>                      sort(ALL(foo));<br>                      if (mapa[1^co].count(foo)) return res+mapa[1^co][foo];<br>                      if (mapa[co].count(foo)==0){<br>                        mapa[co].insert(MP(foo,res)); q[co].PB(foo);<br>                      }<br>                    }<br>                  }         <br>                } <br>              }<br>              return -1; <br>            } <br>        <br> <br>         }; <br> <br>    <br> <br> <br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003]<br>// Powered by CodeProcessor<br></td>