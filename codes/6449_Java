<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>public class SplitAndMergeGame {<br><br>    class State {<br><br>        int[] a;<br>        int hashCode;<br><br>        public State(int[] a) {<br>            Arrays.sort(a);<br>            this.a = a;<br>            hashCode = 19;<br>            for (int i = 0; i &lt; a.length; i++)<br>                hashCode = hashCode * 239 + a[i] * 7;<br>        }<br><br>        public boolean equals(Object o) {<br>            if (this == o) return true;<br>            State that = (State) o;<br>            return Arrays.equals(a, that.a);<br>        }<br><br>        public int hashCode() {<br>            return hashCode;<br>        }<br>    }<br><br>    Map&lt;State, Integer&gt; merge(int[] values) {<br>        State src = new State(values);<br>        Map&lt;State, Integer&gt; was = new HashMap&lt;State, Integer&gt;();<br>        LinkedList&lt;State&gt; list = new LinkedList&lt;State&gt;();<br>        list.add(src);<br>        was.put(src, 0);<br>        while (list.size() &gt; 0) {<br>            State state = list.removeFirst();<br><br>            int dist = was.get(state);<br>            int n = state.a.length;<br><br>            // Merge<br>            for (int i = 0; i &lt; n; i++)<br>                for (int j = i + 1; j &lt; n; j++) {<br>                    int[] data = new int[n - 1];<br>                    int count = 0;<br>                    for (int k = 0; k &lt; n; k++)<br>                        if (k != i &amp;&amp; k != j) data[count++] = state.a[k];<br>                    data[count] = state.a[i] + state.a[j];<br><br>                    State current = new State(data);<br>                    if (was.get(current) == null) {<br>                        was.put(current, dist + 1);<br>                        list.add(current);<br>                    }<br>                }<br>        }<br>        return was;<br>    }<br><br>    public int minMoves(int[] startState, int[] finishState) {<br><br>        Map&lt;State, Integer&gt; a = merge(startState);<br>        Map&lt;State, Integer&gt; b = merge(finishState);<br>        int res = Integer.MAX_VALUE;<br>        for (State state : a.keySet()) {<br>            Integer x = a.get(state);<br>            Integer y = b.get(state);<br>            if (x != null &amp;&amp; y != null)<br>                res = Math.min(res, x + y);<br>        }<br><br>        if (res &gt;= Integer.MAX_VALUE) res = -1;<br><br>        return res;<br>    }<br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by CodeProcessor<br></td>