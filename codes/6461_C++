<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;string.h&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;algorithm&gt;<br><br>using namespace std;<br>typedef vector&lt;int&gt; VI;<br>typedef vector&lt;VI&gt; VII;<br>typedef vector&lt;string&gt; VS;<br><br>VS split(string a, string spl)<br>{<br>  int last = -1;<br>  VS res;<br>  for(int i=0;i&lt;=a.size();i++)<br>    {<br>      if(i == a.size() || spl.find(a[i]) != string::npos)<br>  {<br>    if(last != i-1)<br>      {<br>        res.push_back(a.substr(last+1,i-last));<br>      }<br>    last = i;<br>  }<br>    }<br>  return res;<br>}<br><br>struct Ev<br>{<br>  int s, e;<br>  int operator&lt;(const Ev &amp; b) const<br>  {<br>    if(s != b.s)<br>      return s &lt; b.s;<br>    return e &lt; b.e;<br>  }<br>};<br><br>int possible(int n, vector&lt;Ev&gt; evs, int endTime)<br>{<br>  VI covered;<br>  for(int i=0;i&lt;n;i++)<br>    covered.push_back(0);<br>  int curTime = 0;<br>  int index = 0;<br>  while(curTime &lt; endTime)<br>    {<br>      sort(covered.begin(), covered.end());<br><br>      for(int i=0;i&lt;n;i++)<br>  while(covered[i] &lt;= curTime)<br>    {<br>      if(index &gt;= evs.size() || evs[index].s &gt; curTime)<br>        return 0;<br>      covered[i] &gt;?= evs[index].e;<br>      index ++;<br>    }<br>      sort(covered.begin(), covered.end());<br>      curTime = covered[0];<br>    }<br>  return 1;<br>}<br>  <br>class OlympicsBroadcasting {<br>  public:<br>  int getMaxChannels(vector &lt;int&gt; startingTime, vector &lt;int&gt; endingTime, int totalUnits) {<br>    vector&lt;Ev&gt; evs;<br>    for(int i=0;i&lt;startingTime.size();i++)<br>      evs.push_back((Ev){startingTime[i], endingTime[i]});<br>    sort(evs.begin(),evs.end());<br>    int best = 0;<br>    for(int i=1;i&lt;=evs.size();i++)<br>      if(possible(i, evs, totalUnits))<br>        best = i;<br>    return best;<br>  }<br>};<br><br><br>// Powered by FileEdit<br></td>