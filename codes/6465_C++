<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;vector&gt;<br>#include &lt;cstring&gt;<br><br>using namespace std;<br><br>typedef long long ll;<br><br>#define repr(i,a,b) for(int i=(a),_b=(b);i&lt;=_b;i++)<br>#define repd(i,a,b) for(int i=(a),_b=(b);i&gt;=_b;i--)<br>#define rep(i,n) repr(i,0,n-1)<br>#define haskey(c,x) (c.find(x)!=c.end())<br>#define pb push_back<br><br>#define maxst 10000<br><br>double ans[2][50][maxst];<br>char solved[2][50][maxst];<br><br>struct CrazyRunning {<br><br>  double v0,v1;<br>  int n;<br><br>  double f(int last, int vis, int st) {<br>    if (st&gt;=maxst)<br>      return 0;<br>    if (vis==n)<br>      return 0;<br>      <br>    if (solved[last][vis][st])<br>      return ans[last][vis][st];<br>      <br>    solved[last][vis][st] = 1;<br>    double&amp; ret = ans[last][vis][st];<br>      <br>    if (last==0) {<br>      if (vis+1==n)<br>        return ret = (vis-1)/(n-1.0)*(2*v1+f(1,vis,st+1)) + (n-vis)/(n-1.0)*(v1+f(1,vis+1,st+1));<br>      else<br>        return ret = (vis-1)/(n-1.0)*(2*v1+f(1,vis,st+1)) + (n-vis)/(n-1.0)*(2*v1+f(1,vis+1,st+1));<br>    } else {<br>      if (vis+1==n)<br>        return ret = 1/(n-1.0)*(2*v0+f(0,vis,st+1)) + (vis-2)/(n-1.0)*(2*v1+f(1,vis,st+1)) <br>          + (n-vis)/(n-1.0)*(v1+f(1,vis+1,st+1));<br>      else<br>        return ret = 1/(n-1.0)*(2*v0+f(0,vis,st+1)) + (vis-2)/(n-1.0)*(2*v1+f(1,vis,st+1)) <br>          + (n-vis)/(n-1.0)*(2*v1+f(1,vis+1,st+1));<br>    }<br>  }<br><br>  double expectedTime(vector&lt;int&gt; v) {<br>  <br>    n = v.size();<br>  <br>    v0 = v[0];<br>    v1 = 0;<br>    repr(i,1,v.size()-1)<br>      v1 += v[i];<br>    v1 /= v.size()-1;<br>  <br>    memset(solved,0,sizeof(solved));<br>    <br>    return v0+f(0,1,0);<br>  }<br>};<br></td>