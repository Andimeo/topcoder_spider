<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br> <br>public class CornersGame {<br>    int[][] d;<br> <br>    int[] dx = new int[]{0, 1, 0, -1};<br>    int[] dy = new int[]{1, 0, -1, 0};<br> <br>    long encode(int[][] f) {<br>        long r = 0;<br>        for (int i = 0; i &lt; 6; i++) {<br>            for (int j = 0; j &lt; 6; j++) {<br>                r = r &lt;&lt; 1;<br>                if (f[i][j] == 1) {<br>                    r |= 1L;<br>                }<br>            }<br>        }<br>        return r;<br>    }<br> <br>    int[][] decode(long t) {<br>        int[][] a = new int[6][6];<br>        long f = 1L &lt;&lt; 35;<br>        for (int i = 0; i &lt; 6; i++) {<br>            for (int j = 0; j &lt; 6; j++) {<br>                if ((t &amp; f) != 0) {<br>                    a[i][j] = 1;<br>                } else {<br>                    a[i][j] = d[i][j];<br>                }<br>                f &gt;&gt;= 1;<br>            }<br>        }<br>        return a;<br>    }<br> <br>    int[][] cln(int[][] b) {<br>        int[][] a = new int[6][6];<br>        for (int i = 0; i &lt; 6; i++) {<br>            for (int j = 0; j &lt; 6; j++) {<br>                a[i][j] = b[i][j];<br>            }<br>        }<br>        return a;<br>    }<br> <br>    boolean isOk(int[][] a) {<br>        return (a[0][0] == 1) &amp;&amp; (a[0][1] == 1) &amp;&amp; (a[1][0] == 1) &amp;&amp; (a[1][1] == 1);<br>    }<br> <br>    public int countMoves(String[] board) {<br>        d = new int[6][6];<br>        for (int i = 0; i &lt; 6; i++) {<br>            for (int j = 0; j &lt; 6; j++) {<br>                switch (board[i].charAt(j)) {<br>                    case '.': d[i][j] = 0; break;<br>                    case 'r': d[i][j] = 2; break;<br>                    case 's': d[i][j] = 3; break;<br>                }<br>            }<br>        }<br> <br>        int[][] b = cln(d);<br>        b[4][4] = b[4][5] = b[5][4] = b[5][5] = 1;<br>        long[] q = new long[1679616];<br>        int[] d = new int[1679616];<br>        HashSet&lt;Long&gt; was = new HashSet&lt;Long&gt;();<br>        int h = 0;<br>        int t = 1;<br>        q[0] = encode(b);<br>        d[0] = 0;<br>        was.add(q[0]);<br>        while (h &lt; t) {<br>            int[][] a = decode(q[h]);<br> <br>            if (isOk(a)) {<br>                return d[h];<br>            }<br> <br>            for (int i = 0; i &lt; 6; i++) {<br>                for (int j = 0; j &lt; 6; j++) {<br>                    if (a[i][j] == 1) {<br>                        for (int k = 0; k &lt; 4; k++) {<br>                            int ni = i + dx[k];<br>                            int nj = j + dy[k];<br>                            if (ni &lt; 0 || ni &gt; 5 || nj &lt; 0 || nj &gt; 5) {<br>                                continue;<br>                            }<br>                            if ((a[ni][nj] &amp; 1) == 1) {<br>                                ni = ni + dx[k];<br>                                nj = nj + dy[k];<br>                                if (ni &lt; 0 || ni &gt; 5 || nj &lt; 0 || nj &gt; 5) {<br>                                    continue;<br>                                }<br>                            }<br>                            if (a[ni][nj] != 0) {<br>                                continue;<br>                            }<br>                            a[ni][nj] = 1;<br>                            a[i][j] = 0;<br>                            long nn = encode(a);<br>                            if (!was.contains(nn)) {<br>                                q[t] = nn;<br>                                d[t] = d[h] + 1;<br>                                was.add(nn);<br>                                t++;<br>                            }<br>                            a[ni][nj] = 0;<br>                            a[i][j] = 1;<br>                        }<br>                    }<br>                }<br>            }<br> <br>            h++;<br>        }<br> <br>        return -1;<br>    }<br> <br> <br>}<br> <br> <br>// Powered by PopsEdit<br> <br>// Powered by CodeProcessor<br></td>