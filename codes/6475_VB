<td class="problemText" colspan="8" valign="middle" align="left">
            imports System<br>imports Microsoft.VisualBasic<br>imports System.Collections<br>imports System.Text<br> <br> <br>Public Class State<br>    Public x(3) As Integer, y(3) As Integer<br>    Public moves As Integer<br>End Class<br> <br>Public Class CornersGame<br> <br>    Dim tt(1800000) As Integer<br>    Dim g(5, 5) As Integer<br> <br>    Public Function countMoves(ByVal board() As String) As Integer<br>        Dim y As Integer, x As Integer<br>        For y = 0 To 5<br>            For x = 0 To 5<br>                If board(y).Chars(x) = "r" Then<br>                    g(x, y) = 1<br>                ElseIf board(y).Chars(x) = "s" Then<br>                    g(x, y) = 2<br>                End If<br>            Next<br>        Next<br> <br>        Dim q As New ArrayList<br>        Dim ss As New State<br>        ss.x(0) = 4 : ss.y(0) = 4<br>        ss.x(1) = 4 : ss.y(1) = 5<br>        ss.x(2) = 5 : ss.y(2) = 4<br>        ss.x(3) = 5 : ss.y(3) = 5<br>        ss.moves = 0<br> <br>        q.Add(ss)<br> <br>        tt(NumberState(ss)) = -1<br> <br>        Dim i As Integer, tx As Integer, ty As Integer, bGood As Boolean, iBest As Integer<br> <br>        iBest = 10000000<br>        While q.Count &gt; 0<br>            ss = q(0)<br> <br>            bGood = True<br>            For i = 0 To 3<br>                g(ss.x(i), ss.y(i)) = 2<br>                If ss.x(i) &gt; 1 Or ss.y(i) &gt; 1 Then bGood = False<br>            Next<br>            If bGood Then<br>                If ss.moves &lt; iBest Then iBest = ss.moves<br>            End If<br> <br>            For i = 0 To 3<br>                tx = ss.x(i) : ty = ss.y(i)<br> <br>                If tx &gt; 0 Then<br>                    If tx &gt; 1 Then<br>                        If g(tx - 2, ty) = 0 Then<br>                            If g(tx - 1, ty) = 2 Then<br>                                AddState(q, ss, i, tx - 2, ty)<br>                            End If<br>                        End If<br>                    End If<br> <br>                    If g(tx - 1, ty) = 0 Then<br>                        AddState(q, ss, i, tx - 1, ty)<br>                    End If<br>                End If<br> <br> <br>                If tx &lt; 5 Then<br>                    If tx &lt; 4 Then<br>                        If g(tx + 2, ty) = 0 Then<br>                            If g(tx + 1, ty) = 2 Then<br>                                AddState(q, ss, i, tx + 2, ty)<br>                            End If<br>                        End If<br>                    End If<br> <br>                    If g(tx + 1, ty) = 0 Then<br>                        AddState(q, ss, i, tx + 1, ty)<br>                    End If<br>                End If<br> <br> <br>                If ty &gt; 0 Then<br>                    If ty &gt; 1 Then<br>                        If g(tx, ty - 2) = 0 Then<br>                            If g(tx, ty - 1) = 2 Then<br>                                AddState(q, ss, i, tx, ty - 2)<br>                            End If<br>                        End If<br>                    End If<br> <br>                    If g(tx, ty - 1) = 0 Then<br>                        AddState(q, ss, i, tx, ty - 1)<br>                    End If<br>                End If<br> <br>                If ty &lt; 5 Then<br>                    If ty &lt; 4 Then<br>                        If g(tx, ty + 2) = 0 Then<br>                            If g(tx, ty + 1) = 2 Then<br>                                AddState(q, ss, i, tx, ty + 2)<br>                            End If<br>                        End If<br>                    End If<br> <br>                    If g(tx, ty + 1) = 0 Then<br>                        AddState(q, ss, i, tx, ty + 1)<br>                    End If<br>                End If<br> <br>            Next<br> <br>            For i = 0 To 3<br>                g(ss.x(i), ss.y(i)) = 0<br>            Next<br> <br>            q.RemoveAt(0)<br>        End While<br> <br>        If iBest = 10000000 Then<br>            Return -1<br>        Else<br>            Return iBest<br>        End If<br> <br>    End Function<br> <br>    Private Sub AddState(ByVal q As ArrayList, ByVal ss As State, ByVal im As Integer, ByVal tx As Integer, ByVal ty As Integer)<br>        Dim ns As New State<br>        Dim i As Integer<br> <br>        For i = 0 To 3<br>            ns.x(i) = ss.x(i)<br>            ns.y(i) = ss.y(i)<br>        Next<br>        ns.x(im) = tx<br>        ns.y(im) = ty<br>        ns.moves = ss.moves + 1<br> <br>        Dim v As Integer, vi As Integer<br>        v = NumberState(ns)<br> <br>        vi = tt(v)<br>        If vi = 0 Or vi &gt; ns.moves Then<br>            tt(v) = ns.moves<br>            q.Add(ns)<br>        End If<br>    End Sub<br> <br>    Private Function NumberState(ByVal ns As State)<br>        Dim i1 As Integer, i2 As Integer, it As Integer<br>        For i1 = 0 To 2<br>            For i2 = i1 To 3<br>                If ns.x(i1) &gt; ns.x(i2) Or (ns.x(i1) = ns.x(i2) And ns.y(i1) &gt; ns.y(i2)) Then<br>                    it = ns.x(i1)<br>                    ns.x(i1) = ns.x(i2)<br>                    ns.x(i2) = it<br> <br>                    it = ns.y(i1)<br>                    ns.y(i1) = ns.y(i2)<br>                    ns.y(i2) = it<br>                End If<br>            Next<br>        Next<br> <br>        Dim i As Integer, v As Integer, m As Integer<br>        m = 1<br>        For i = 0 To 3<br>            v = v + ns.x(i) * m + ns.y(i) * 6 * m<br>            m = m * 36<br>        Next<br>        Return v<br> <br>    End Function<br> <br> <br>End Class<br></td>