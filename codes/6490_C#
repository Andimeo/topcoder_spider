<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br><br>public class BracketMaze<br>{<br>  string S;<br>  int N;<br>  int[,,,] D;<br>  char what(int x, int y, int z)<br>  {<br>    return S[x*N*N + y*N + z];<br>  }<br>  const int INF = 1000000001;<br>  bool ok(int i, int j, int k, int p)<br>  {<br>    return i&gt;=0 &amp;&amp; j&gt;=0 &amp;&amp; k&gt;=0 &amp;&amp; p&gt;=0 &amp;&amp; i&lt;N &amp;&amp; j&lt;N &amp;&amp; k&lt;N &amp;&amp; p&lt;50;<br>  }<br><br>  int add(int i, int j)<br>  {<br>    int res = i+j;<br>    if(res&gt;INF)<br>      res = INF;<br>    return res;<br>  }<br><br>  int calc(int i, int j, int k, int p)<br>  {<br>    if(!ok(i,j,k,p))<br>      return 0;<br>    if(D[i,j,k,p]&gt;-1)<br>      return D[i,j,k,p];<br>    char c = what(i, j, k);<br>    int res = 0;<br>    if(c=='.')<br>    {<br>      res = add(res, calc(i-1, j, k, p));<br>      res = add(res, calc(i, j-1, k, p));<br>      res = add(res, calc(i, j, k-1, p));<br>    }<br>    else if(c=='(')<br>    {<br>      res = add(res, calc(i-1, j, k, p-1));<br>      res = add(res, calc(i, j-1, k, p-1));<br>      res = add(res, calc(i, j, k-1, p-1));<br>    }<br>    else<br>    {<br>      res = add(res, calc(i-1, j, k, p+1));<br>      res = add(res, calc(i, j-1, k, p+1));<br>      res = add(res, calc(i, j, k-1, p+1));<br>    }<br>    return D[i,j,k,p] = res;<br>  }<br>  <br>  public int properPaths(string[] maze, int n)<br>  {<br>    S = "";<br>    for(int i = 0; i&lt;maze.Length; i++)<br>      S+=maze[i];<br>    N = n;<br>    D = new int[N, N, N, 50];<br>    <br>    for(int i = 0; i&lt;N; i++)<br>      for(int j = 0; j&lt;N; j++)<br>        for(int k = 0; k&lt;N; k++)<br>          for(int p = 0; p&lt;50; p++)<br>            D[i,j,k,p] = -1;<br>    <br>    for(int p = 0; p&lt;50; p++)<br>      D[0,0,0,p] = 0;<br>    <br>    if(what(0,0,0)=='.')<br>      D[0,0,0,0] = 1;<br>    else if(what(0,0,0)=='(')<br>      D[0,0,0,1] = 1;<br><br>    int Res = 0;<br>    if(what(0,0,0)==')' || what(N-1,N-1,N-1)=='(')<br>      return Res;<br>    Res = calc(N-1, N-1, N-1, 0);<br>    if(Res == INF)<br>      Res = -1;<br><br>    return Res;<br>  }<br>}<br></td>