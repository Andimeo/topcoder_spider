<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;vector&gt;<br>#include &lt;string&gt;<br>#include &lt;cstring&gt;<br><br>using namespace std;<br><br>char A[15][15][15];<br>int D[15][15][15][50];<br><br>void Goto( int x, int y, int z, int k, int d )<br>{<br>  if (k == 0 &amp;&amp; A[x][y][z] == ')')<br>    return;<br>  if (A[x][y][z] == '(')<br>    k++;<br>  if (A[x][y][z] == ')')<br>    k--;<br>  D[x][y][z][k] += d;<br>  if (D[x][y][z][k] &gt; 1000000000)<br>    D[x][y][z][k] = 1000000001;<br>}<br><br>class BracketMaze<br>{<br>  public: int properPaths( vector &lt;string&gt; maze, int N )<br>  {<br>    int i = 0, j = 0;<br>    for (int x = 0; x &lt; N; x++)<br>      for (int y = 0; y &lt; N; y++)<br>        for (int z = 0; z &lt; N; z++)<br>        {<br>          A[x][y][z] = maze[i][j];<br>          if (++j == maze[i].length())<br>            j = 0, i++;<br>        }<br>    memset(D, 0, sizeof(D));<br>    if (A[0][0][0] == '(')<br>      D[0][0][0][1] = 1;<br>    else if (A[0][0][0] == '.')<br>      D[0][0][0][0] = 1;<br>    for (int x = 0; x &lt; N; x++)<br>      for (int y = 0; y &lt; N; y++)<br>        for (int z = 0; z &lt; N; z++)<br>          for (int k = 0; k &lt;= N * 3; k++)<br>            if (D[x][y][z][k])<br>            {<br>              if (x &lt; N - 1)<br>                Goto(x + 1, y, z, k, D[x][y][z][k]);<br>              if (y &lt; N - 1)<br>                Goto(x, y + 1, z, k, D[x][y][z][k]);<br>              if (z &lt; N - 1)<br>                Goto(x, y, z + 1, k, D[x][y][z][k]);<br>            }<br>    return (D[N - 1][N - 1][N - 1][0] &gt; 1000000000) ? -1 : D[N - 1][N - 1][N - 1][0];<br>  }<br>};<br></td>