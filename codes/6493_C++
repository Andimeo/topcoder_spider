<td class="problemText" colspan="8" valign="middle" align="left">
            /** Solution template by user Dyatlov **/<br>/** BEGIN PRE-WRITTEN CODE **/<br>#include &lt;stdio.h&gt;<br>#include &lt;string.h&gt;<br>#include &lt;math.h&gt;<br><br>#include &lt;algorithm&gt;<br>#include &lt;set&gt;<br>#include &lt;string&gt;<br>#include &lt;vector&gt;<br><br>#define FUP(i,l,r) for (int i=(l);i&lt;=(r);i++)<br>#define FOR(i,n) for (int i=0;i&lt;(n);i++)<br><br>#define SORT(a) stable_sort((a).begin(), (a).end())<br><br>using namespace std;<br>/** END PRE-WRITTEN CODE **/<br><br>const double EPS = 1e-9;<br><br>struct Point<br>{<br>  double x, y;<br>  bool operator&lt;(const Point &amp;a) const<br>  {<br>    return x + EPS &lt; a.x || (x - EPS &lt; a.x &amp;&amp; y + EPS &lt; a.y);<br>  }<br>  bool operator!=(const Point &amp;a) const<br>  {<br>    return fabs(x - a.x) + fabs(y - a.y) &gt; EPS;<br>  }<br>  void norm()<br>  {<br>    if (x &lt; - EPS || (x &lt; EPS &amp;&amp; y &lt; -EPS))<br>    {<br>      x = -x;<br>      y = -y;<br>    }<br>  }<br>};<br><br>double sqr(double a) {return a * a;}<br><br>class PizzaDivision<br>{<br>  int n, x[50], y[50], res;<br>  vector&lt;Point&gt; v1, v2, P;<br>  void check(Point p)<br>  {<br>    v2.clear();<br>    FOR(i,n)<br>    {<br>      Point q;<br>      double t = p.x * x[i] + p.y * y[i];<br>      q.x = x[i] - 2 * t * p.x;<br>      q.y = y[i] - 2 * t * p.y;<br>      v2.push_back(q);<br>    }<br>    SORT(v2);<br>    FOR(i,n)<br>      if (v1[i] != v2[i])<br>        return;<br>    printf("%lf %lf\n", p.x, p.y);<br>    ++res;<br>  }<br>public:<br>  int howMany(vector &lt;string&gt; toppings)  <br>  {<br>    n = toppings.size();<br>    FOR(i,n)<br>      sscanf(toppings[i].c_str(), "%d%d", &amp;x[i], &amp;y[i]);<br>    if (n == 1)<br>    {<br>      if (!x[0] &amp;&amp; !y[0])<br>        return -1;<br>      return 1;<br>    }<br>    res = 0;<br>    v1.clear();<br>    FOR(i,n)<br>    {<br>      Point p;<br>      p.x = x[i];<br>      p.y = y[i];<br>      v1.push_back(p);<br>    }<br>    SORT(v1);<br>    int k = (x[0] || y[0]) ? 0 : 1;<br>    <br>    P.clear();<br>    FOR(i,n)<br>      if (i == k)<br>      {<br>        double l = sqrt(sqr(x[i]) + sqr(y[i]));<br>        Point z;<br>        z.x = y[i] / l;<br>        z.y = - x[i] / l;<br>        z.norm();<br>        P.push_back(z);<br>      }<br>      else<br>      {<br>        double l = sqrt(sqr(x[i] - x[k]) + sqr(y[i] - y[k]));<br>        Point z;<br>        z.x = (x[i] - x[k]) / l;<br>        z.y = (y[i] - y[k]) / l;<br>        z.norm();<br>        P.push_back(z);<br>      }<br>    SORT(P);<br>    FOR(i,P.size())<br>      if (!i || P[i] != P[i - 1])<br>        check(P[i]);<br>    return res;<br>  }<br>};<br><br>/** END SOLUTION **/<br></td>