<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>import java.util.regex.*;<br>import java.text.*;<br>import java.math.*;<br>import java.awt.geom.*;<br> <br>public class AntarcticaPolice<br>{<br>  int N = 0;<br>  boolean[][] mat = null;<br>  int[] mark = null;<br>  <br>  int markId = 0;<br>  int[] q = null;<br>  <br>  public double minAverageCost(int[] costs, String[] roads)<br>  {<br>    N = costs.length;<br>    mat = new boolean[N][N];<br>    mark = new int[N];<br>    q = new int[N];<br>    for (int i = 0; i &lt; N; ++i)<br>    {<br>      char[] x = roads[i].toCharArray();<br>      for (int j = 0; j &lt; N; ++j)<br>        mat[i][j] = x[j] == 'Y';<br>    }<br>    markId = 0;<br>    for (int i = 0; i &lt; N; ++i)<br>      if (mark[i] == 0)<br>        dfs1(i);<br>    markId = 0;<br>    for (int i = N - 1; i &gt;= 0; --i)<br>      if (mark[q[i]] == -1)<br>      {<br>        dfs2(q[i]);<br>        ++markId;<br>      }<br>    int[] ord = new int[N];<br>    for (int i = 0; i &lt; N; ord[i] = i, ++i);<br>    for (int i = 0; i &lt; N; ++i)<br>      for (int j = 1; j &lt; N; ++j)<br>        if (costs[ord[j - 1]] &gt; costs[ord[j]])<br>        {<br>          int k = ord[j - 1];<br>          ord[j - 1] = ord[j];<br>          ord[j] = k;<br>        }<br>    int[] best = new int[markId];<br>    int[] deg = new int[markId];<br>    for (int i = 0; i &lt; markId; best[i++] = -1);<br>    for (int i = 0; i &lt; N; ++i)<br>      if (best[mark[i]] == -1 || costs[i] &lt; costs[best[mark[i]]])<br>        best[mark[i]] = i;<br>    for (int i = 0; i &lt; N; ++i)<br>      for (int j = 0; j &lt; N; ++j)<br>        if (mark[i] != mark[j] &amp;&amp; mat[i][j])<br>          ++deg[mark[j]];<br>    int sum = 0;<br>    int count = 0;<br>    for (int i = 0; i &lt; markId; ++i)<br>      if (deg[i] == 0)<br>      {<br>        sum += costs[best[i]];<br>        costs[best[i]] = -1;<br>        ++count;<br>      }<br>    for (int i = 0; i &lt; N; ++i)<br>      if (costs[ord[i]] != -1 &amp;&amp; costs[ord[i]] * count &lt; sum)<br>      {<br>        sum += costs[ord[i]];<br>        ++count;<br>      }<br>    return 1.0 * sum / count;<br>  }<br>  <br>  void dfs1(int v0)<br>  {<br>    mark[v0] = -1;<br>    for (int i = 0; i &lt; N; ++i)<br>      if (mat[i][v0] &amp;&amp; mark[i] == 0)<br>        dfs1(i);<br>    q[markId++] = v0;<br>  }<br>  <br>  void dfs2(int v0)<br>  {<br>    mark[v0] = markId;<br>    for (int i = 0; i &lt; N; ++i)<br>      if (mat[v0][i] &amp;&amp; mark[i] == -1)<br>        dfs2(i);<br>  }<br>  <br>  <br>}<br>//Powered by [KawigiEdit] 2.0!<br></td>