<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;vector&gt;<br>#include &lt;list&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;deque&gt;<br>#include &lt;stack&gt;<br>#include &lt;bitset&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;functional&gt;<br>#include &lt;numeric&gt;<br>#include &lt;utility&gt;<br>#include &lt;sstream&gt;<br>#include &lt;iostream&gt;<br>#include &lt;iomanip&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;ctime&gt;<br> <br>using namespace std;<br> <br>#define FOR(i,a,b) for(int i=(a);i&lt;(b);++i)<br>#define REP(i,n) FOR(i,0,n)<br>#define ALL(a) (a).begin(),a.end()<br>#define SORT(a) sort(ALL(a))<br>#define SZ(a) ((int) a.size())<br>#define pb push_back<br> <br>class CommutePlan {<br>public:<br>  int shortestRoute(int, vector &lt;int&gt;, vector &lt;int&gt;, vector &lt;int&gt;);<br>};<br> <br>int CommutePlan::shortestRoute(int distance, vector &lt;int&gt; c1, vector &lt;int&gt; c2, vector &lt;int&gt; c3) {<br>  vector&lt;int&gt; d(distance + 1);<br>  fill(ALL(d), 1000000000);<br>  d[0] = 0;<br>  REP(i, SZ(d) - 1) {<br>    REP(j, SZ(c1))<br>      if (c1[j] == i &amp;&amp; c2[j] &lt;= distance)<br>        d[c2[j]] &lt;?= d[i] + c3[j];<br>    d[i + 1] &lt;?= d[i] + 1;        <br>  }<br>  return d[distance];<br>}<br> <br> <br>//Powered by [KawigiEdit] 2.0!<br></td>