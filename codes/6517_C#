<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections;<br>using System.Collections.Generic;<br>using System.Collections.Specialized;<br>using System.Text;<br>using System.Text.RegularExpressions;<br> <br>public class ParallelProgramming<br>{<br>  public int minTime(int[] time, string[] prec)<br>  {<br>    int tot = 0;<br>    <br>    int[] work = new int[time.Length];<br>    bool[] done = new bool[time.Length];<br>    bool[] canDo = new bool[time.Length];<br>    bool allDone = false;<br>    bool working = true;<br>    for(tot = 0; tot &lt; 50001 &amp;&amp; !allDone &amp;&amp; working; tot++){  <br>      working = false;<br>      for(int i = 0; i &lt; done.Length; i++){<br>        //check if it can be supported.<br>        canDo[i] = true;<br>        for(int j = 0; j &lt; prec.Length; j++){<br>          if(prec[i][j] == 'Y' &amp;&amp; !done[j]){<br>            canDo[i] = false;<br>            break;<br>          }<br>        }<br>      }  <br>      for(int i = 0; i &lt; done.Length; i++){<br>        if(!done[i]){<br>          if(canDo[i]){<br>            work[i]++;<br>            working = true;<br>            if(work[i] == time[i]){<br>              done[i] = true;<br>            }<br>          }<br>        }<br>      }      <br>      allDone = true;<br>      for(int i = 0; i &lt; done.Length; i++){<br>        allDone = allDone &amp;&amp; done[i];<br>      }<br>    }<br>    if(!allDone){<br>      return -1;<br>    }<br>    else{<br>      return tot;<br>    }<br>  }<br> <br> <br>}<br>//Powered by [KawigiEdit] 2.0!<br></td>