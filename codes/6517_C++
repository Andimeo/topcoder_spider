<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;cstdio&gt;<br>#include &lt;cstring&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cctype&gt;<br>#include &lt;cmath&gt;<br>#include &lt;iostream&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;vector&gt;<br>#include &lt;string&gt;<br>#include &lt;sstream&gt;<br>using namespace std;<br><br>int    cost  [100];<br>bool    mat  [100][100];<br>int    n;<br><br>int    f  [100];<br>int    mark  [100];<br>bool    flag ;<br><br>int  dfs( int u )<br>{<br>  if( mark[u] == 0 ){ flag = 1; return 0; }<br>  if( mark[u] == 1 ) return f[u];<br><br>  mark[u] = 0;<br>  f[u] = cost[u];<br>  for(int v = 0; v &lt; n; v ++)<br>    if( mat[v][u] )<br>      f[u] &gt;?= dfs( v ) + cost[u];<br><br>  mark[u] = 1;<br>  return  f[u];<br>}<br><br>class  ParallelProgramming<br>{<br>  public  :<br>    <br>  int minTime(vector &lt;int&gt; time, vector &lt;string&gt; prec)<br>  {<br>    n = time.size();<br>    <br>    int  i , j;<br>    for(i = 0; i &lt; n; i ++)<br>      for(j = 0; j &lt; n; j ++)<br>        mat[i][j] = (prec[i][j] == 'Y');<br>    for(i = 0; i &lt; n; i ++)<br>      cost[i] = time[i];<br><br><br>    int  ret = 0;<br>    flag = 0;<br><br>    memset(mark , 0xff , sizeof(mark));<br>    for(i = 0; i &lt; n; i ++)<br>    {<br>      ret &gt;?= dfs( i );<br>    }<br><br>    if( flag ) return -1;<br><br>    return  ret;<br>  }<br>};<br></td>