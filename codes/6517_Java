<td class="problemText" colspan="8" valign="middle" align="left">
            public class ParallelProgramming<br>{<br>  public boolean allZero(int[] time)<br>  {<br>    for(int i = 0; i &lt; time.length; i++)<br>    {<br>      if(time[i] != 0)<br>      {<br>        return false;<br>      }<br>    }<br>    return true;<br>  }<br>  public int minTime(int[] time, String[] prec)<br>  {<br>  int curTotal = 0;<br>  while(!allZero(time))<br>  {<br>    int minTimeToRun = 1001;<br>    int N = time.length;<br>    boolean[] canRun = new boolean[N];<br>    for(int i = 0; i &lt; N; i++)<br>    {<br>      canRun[i] = true;<br>      if(time[i] == 0)<br>      {<br>        canRun[i] = false;<br>      } else<br>      {<br>        for(int j = 0; j &lt; N; j++)<br>        {<br>          if(prec[i].charAt(j) == 'Y' &amp;&amp; time[j] != 0)<br>          {<br>            canRun[i] = false;<br>          }<br>        }<br>      }<br>    }<br>    for(int i = 0; i &lt; N; i++)<br>    {<br>      if(canRun[i])<br>      {<br>        if(time[i] &lt; minTimeToRun)<br>        {<br>          minTimeToRun = time[i];<br>        }<br>      }<br>    }<br>    if(minTimeToRun == 1001)<br>    {<br>      if(!allZero(time))<br>      {<br>        return -1;<br>      } else<br>      {<br>        return curTotal;<br>      }<br>    }<br>    for(int i = 0; i &lt; N; i++)<br>    {<br>      if(canRun[i])<br>      {<br>        time[i] -= minTimeToRun;<br>      }<br>    }<br>    curTotal += minTimeToRun;<br>  }<br>  return curTotal;<br>  }<br>}<br></td>