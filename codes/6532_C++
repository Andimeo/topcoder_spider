<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;algorithm&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cstring&gt;<br>#include &lt;vector&gt;<br>#include &lt;string&gt;<br>#include &lt;sstream&gt;<br>#include &lt;iostream&gt;<br>using namespace std;<br>#define FORC( V, it ) for( __typeof( (V).begin() ) it = (V).begin(); it != (V).end(); ++it )<br>const int MAXL = 1000;<br>const int MAXN = 50;<br>char buff[MAXL+1];<br><br><br>class LatticeCrossword {<br>public:<br>    int crossword( string a, string b, string c, string d ) {<br>        vector&lt; string &gt; A( 4 );<br>        A[0] = a;<br>        A[1] = b;<br>        A[2] = c;<br>        A[3] = d;<br><br>        int cnt = 0;<br>        sort( A.begin(), A.end() );<br>        do {<br>            for( int a = 0; a &lt; ( int )A[0].size(); ++a )<br>                for( int b = 0; b &lt; ( int )A[1].size(); ++b ) {<br>                    if ( A[0][a] != A[1][b] ) continue;<br>                    <br>                    for( int c = b + 2; c &lt; ( int )A[1].size(); ++c )<br>                        for( int d = 0; d &lt; ( int )A[2].size(); ++d ) {<br>                            if ( A[1][c] != A[2][d] ) continue;<br>                            <br>                            for( int e = a + 2; e &lt; ( int )A[0].size(); ++e ) // n - 1 - d + a<br>                                for( int f = 0; f &lt; ( int )A[3].size(); ++f ) {<br>                                    if ( A[0][e] != A[3][f] ) continue;<br>                                    int x2 = e + d - a;<br>                                    int x3 = f + c - b;<br>                                    if ( x2 &lt; 0 || x2 &gt;= ( int )A[2].size() || x3 &lt; 0 || x3 &gt;= ( int )A[3].size() || A[2][x2] != A[3][x3] ) continue;<br>                                    ++cnt;<br>                                }<br>                        }<br>                }<br>        } while( next_permutation( A.begin(), A.end() ) );<br>        return cnt;<br>    }<br>};<br><br><br><br><br><br><br><br><br>// Powered by FileEdit<br>// Powered by moj 3.0 beta 11 [modified TZTester]<br>// Powered by CodeProcessor<br></td>