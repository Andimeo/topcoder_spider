<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;vector&gt;<br>#include &lt;list&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;deque&gt;<br>#include &lt;stack&gt;<br>#include &lt;bitset&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;functional&gt;<br>#include &lt;numeric&gt;<br>#include &lt;utility&gt;<br>#include &lt;sstream&gt;<br>#include &lt;iostream&gt;<br>#include &lt;iomanip&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;ctime&gt;<br> <br>using namespace std;<br> <br>string dp[51];<br> <br>class MatchNumbersEasy {<br>public:<br>  string maxNumber(vector &lt;int&gt;, int);<br>};<br> <br>string MatchNumbersEasy::maxNumber(vector &lt;int&gt; matches, int n) {<br>  int n1 = matches.size();<br>  for (int i = 0; i &lt; n1; ++i) {<br>    dp[matches[i]] = char(i + '0');<br>  }<br>  <br>  for (int i = 2; i &lt;= n; ++i) {<br>    for (int j = 1; j &lt;= i / 2; ++j) {<br>      string temp = dp[j] + dp[i - j];<br>      sort(temp.begin(), temp.end());<br>      reverse(temp.begin(), temp.end());<br>      if ((temp.size() &gt; dp[i].size() &amp;&amp; temp[0] != '0') || (temp.size() == dp[i].size() &amp;&amp; temp &gt; dp[i])) {<br>        dp[i] = temp;<br>      }<br>    }<br>  }<br>  <br>  string res = dp[n];<br>  <br>  if (count(res.begin(), res.end(), '0') == res.size()) return "0";<br>  else return res;<br>}<br> <br> <br>//Powered by [KawigiEdit] 2.0!<br></td>