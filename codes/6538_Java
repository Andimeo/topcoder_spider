<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>public class SpreadingNews {<br>  <br>  int n;<br>  boolean[] have;<br>  int[] ans;<br>  int[] deg;<br>  int[][] child;<br>  <br>  private class Pair implements Comparable&lt;Pair&gt;  {<br>    int a;<br>    int b;<br>    <br>    public Pair(int a, int b) {<br>      this.a = a;<br>      this.b = b;<br>    }<br><br>    public int compareTo(Pair other) {<br>      if (other.b == this.b) return 0;<br>      if (other.b &gt; this.b) return -1;<br>      return +1;<br>    }<br>  }<br>  <br>  private int calc(int v) {<br>    if (have[v]) return ans[v];<br>    if (deg[v] == 0) return 0;<br>    int res = 0;<br>    <br>    Pair[] tmp = new Pair[deg[v]]; <br>    <br>    for (int i = 0; i &lt; deg[v]; i++) {<br>      tmp[i] = new Pair(child[v][i], calc(child[v][i]));<br>    }<br>    <br>    Arrays.sort(tmp);<br>    <br>    for (int i = 0; i &lt; deg[v]; i++) {<br>      res = Math.max(res, tmp[deg[v] - i - 1].b + i + 1);<br>    }<br>    <br>    have[v] = true;<br>    ans[v] = res;<br>    return res;<br>  }<br>  <br>    public int minTime(int[] supervisors) {<br>        n = supervisors.length;<br>        have = new boolean[n];<br>        deg = new int[n];<br>        child = new int[n][];<br>        ans = new int[n];<br>        <br>        for (int i = 0; i &lt; n; i++) {<br>          if (supervisors[i] != -1) deg[supervisors[i]]++;<br>        }<br>        <br>        for (int i = 0; i &lt; n; i++) {<br>          child[i] = new int[deg[i]];<br>        }<br>        <br>        deg = new int[n];<br>        <br>        for (int i = 0; i &lt; n; i++) {<br>          if (supervisors[i] != -1) {<br>            child[supervisors[i]][deg[supervisors[i]]] = i;<br>            deg[supervisors[i]]++;<br>          }<br>        }<br>        <br>        return calc(0);<br>    }<br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by CodeProcessor<br></td>