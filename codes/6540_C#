<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br><br>public class PlacingPieces {<br>  public int optimalPlacement(int L, int[] pieces) {<br>    int res = pieces.Length;<br>    foreach (int bound in pieces)<br>    {<br>      bool[,] best = new bool[pieces.Length + 1, L + 1];<br>      best[0, 0] = true;<br>      foreach (int item in pieces)<br>      {<br>        if (item &lt; bound)<br>        {<br>          for (int i = pieces.Length; i &gt;= 0; --i)<br>            for (int j = L; j &gt;= 0; --j)<br>              best[i, j] = (i &gt; 0) &amp;&amp; (j &gt;= item) &amp;&amp; best[i - 1, j - item];<br>        }<br>        else<br>        {<br>          for (int i = pieces.Length; i &gt;= 0; --i)<br>            for (int j = L; j &gt;= 0; --j)<br>              best[i, j] |= (i &gt; 0) &amp;&amp; (j &gt;= item) &amp;&amp; best[i - 1, j - item];<br>        }<br>      }<br>      for (int i = 0; i &lt;= pieces.Length; ++i)<br>      {<br>        int minSum = Math.Max(L - bound * (i + 1) + 1, 0);<br>        for (int j = minSum; j &lt;= L; ++j)<br>          if (best[i, j])<br>            res = Math.Min(res, i);<br>      }<br>    }<br>    return res;<br>  }<br><br>  <br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003] [modified for C# by Petr]<br>// Powered by CodeProcessor<br></td>