<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;cstring&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdio&gt;<br> <br>#define MAX(A, B) (((A) &gt;= (B)) ? (A) : (B))<br>#define MIN(A, B) (((A) &lt;= (B)) ? (A) : (B))<br>#define ABS(X) (((X) &gt;= 0) ? (X) : -(X))<br>#define SWAP(A, B, C) ((C) = (A), (A) = (B), (B) = (C))<br> <br>using namespace std;<br> <br>char D[31][31][1001][31];<br> <br>class PlacingPieces<br>{<br>  public: int optimalPlacement( int L, vector &lt;int&gt; P )<br>  {<br>    int N = P.size();<br>    P.push_back(L + 1);<br>    memset(D, 0, sizeof(D));<br>    D[0][0][L][N] = 1;<br>    for (int i = 0; i &lt; N; i++)<br>      for (int j = 0; j &lt;= i; j++)<br>        for (int k = 0; k &lt;= L; k++)<br>          for (int t = 0; t &lt;= N; t++)<br>            if (D[i][j][k][t])<br>            {<br>              int f = t;<br>              if (P[i] &lt; P[t])<br>                f = i;<br>              D[i + 1][j][k][f] = 1;<br>              if (k &gt;= P[i])<br>                D[i + 1][j + 1][k - P[i]][t] = 1;<br>            }<br>    int Ans = N;<br>    int i = N;<br>    for (int j = 0; j &lt;= i; j++)<br>      for (int k = 0; k &lt;= L; k++)<br>        for (int t = 0; t &lt;= N; t++)<br>          if (D[i][j][k][t] &amp;&amp; P[t] * (j + 1) &gt; k)<br>          {<br>            Ans = MIN(Ans, j);<br>/*<br>            if (!Ans)<br>            {<br>              printf("i = %d, j = %d, k = %d, t = %d\n", i, j, k, t);<br>            }<br>*/<br>          }<br>    return Ans;<br>  }<br>};<br> <br>// Code by Burunduk3<br>// Powered by PopsEdit<br></td>