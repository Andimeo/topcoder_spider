<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br><br>public class BasketballStrategy {<br>  struct Point<br>  {<br>    public readonly int x;<br>    public readonly int y;<br><br>    public Point(int x, int y)<br>    {<br>      this.x = x;<br>      this.y = y;<br>    }<br>    <br>    public static Point Convert(string at)<br>    {<br>      string[] p = at.Split(' ');<br>      int x = int.Parse(p[0]);<br>      int y = int.Parse(p[1]);<br>      return new Point(x, y);<br>    }<br><br>    public static Point operator-(Point a, Point b) {<br>      return new Point(a.x - b.x, a.y - b.y);<br>    }<br><br>    public static int operator^(Point a, Point b) {<br>      return a.x * b.y - a.y * b.x;<br>    }<br><br>    public static int operator*(Point a, Point b) {<br>      return a.x * b.x + a.y * b.y;<br>    }<br>  }<br>  <br>  public double scoreProbability(string[] team, string[] rivals, double Cp, double Cs) {<br>    Point basket = new Point(50, 0);<br>    Point[] we = Array.ConvertAll&lt;string, Point&gt;(team, Point.Convert);<br>    Point[] they = Array.ConvertAll&lt;string, Point&gt;(rivals, Point.Convert);<br>    <br>    double[,] passProb = new double[we.Length, we.Length];<br>    for (int i = 0; i &lt; we.Length; ++i)<br>      for (int j = 0; j &lt; we.Length; ++j)<br>        if (i != j)<br>        {<br>          Point v = we[i] - we[j];<br>          double len = Math.Sqrt(v * v) / 150;<br>          double c = catchProb(we[i], we[j], they);<br>          passProb[i, j] = Cp * (1 - len * len) * c;<br>        }<br>    double[] hitProb = new double[we.Length];<br>    for (int i = 0; i &lt; we.Length; ++i)<br>    {<br>      Point v = we[i] - basket;<br>      double c = catchProb(we[i], basket, they);<br>      double len = Math.Sqrt(v * v);<br>      hitProb[i] = Math.Pow(Cs * c, Math.Log(len));<br>    }<br>    <br>    double[] best = new double[we.Length];<br>    best[0] = 1;<br>    bool[] mark = new bool[we.Length];<br>    for (int i = 0; i &lt; we.Length; ++i)<br>    {<br>      double max = -1;<br>      int mj = -1;<br>      for (int j = 0; j &lt; we.Length; ++j)<br>        if (best[j] &gt; max &amp;&amp; !mark[j])<br>        {<br>          max = best[j];<br>          mj = j;<br>        }<br>      mark[mj] = true;<br>      for (int k = 0; k &lt; we.Length; ++k)<br>        if (!mark[k])<br>        {<br>          double cur = best[mj] * passProb[mj, k];<br>          if (cur &gt; best[k])<br>            best[k] = cur;<br>        }<br>    }<br><br>    double res = 0;<br>    for (int i = 0; i &lt; we.Length; ++i)<br>    {<br>      double cur = best[i] * hitProb[i];<br>      if (cur &gt; res)<br>        res = cur;<br>    }<br>    return res;<br>  }<br><br>  double catchProb(Point p1, Point p2, Point[] they)<br>  {<br>    double dr = 1e10;<br>    foreach (Point he in they) {<br>      Point v = p2 - p1;<br>      if ((he - p1) * v &lt; 0 || (he - p2) * v &gt; 0)<br>        continue;<br>      double d = Math.Abs((he - p1) ^ v);<br>      d /= Math.Sqrt(v * v);<br>    if (d &lt; dr)<br>      dr = d;<br>    }<br>    if (dr &gt; 1e9)<br>      return 1;<br>     else<br>       return dr / (dr + 1);<br>  }<br><br><br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003] [modified for C# by Petr]<br>// Powered by CodeProcessor<br></td>