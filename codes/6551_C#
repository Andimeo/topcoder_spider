<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br><br>public class FloatingMedian {<br>  int[] fTree;<br>  const int MAX = 65536;<br>  <br>  void change(int x, int by)<br>  {<br>    int i = 1;<br>    fTree[x] += by;<br>    while (true)<br>    {<br>      if ((x &amp; i) == 0)<br>      {<br>        x |= i;<br>        if (x &gt;= MAX)<br>          break;<br>        fTree[x] += by;<br>      }<br>      i &lt;&lt;= 1;<br>    }<br>  }<br>  <br>  int sum(int x)<br>  {<br>    int res = 0;<br>    while (x &gt;= 0)<br>    {<br>      res += fTree[x];<br>      x = (x &amp; (x + 1)) - 1;<br>    }<br>    return res;<br>  }<br>  <br>  int findWhere(int k)<br>  {<br>    int left = -1;<br>    int right = MAX - 1;<br>    while (right - left &gt; 1)<br>    {<br>      int middle = (left + right) / 2;<br>      if (sum(middle) &lt; k)<br>        left = middle;<br>      else<br>        right = middle;<br>    }<br>    return right;<br>  }<br>  <br>  public long sumOfMedians(int seed, int mul, int add, int N, int K) {<br>    fTree = new int[MAX];<br>    int[] seq = new int[N];<br>    int cur = seed;<br>    for (int i = 0; i &lt; N; ++i)<br>    {<br>      seq[i] = cur;<br>      cur = (int) (((long) cur * mul + add) % MAX);<br>    }<br>    int median = (K + 1) / 2;<br>    for (int i = 0; i &lt; K; ++i)<br>      change(seq[i], 1);<br>    long res = 0;<br>    for (int i = K; i &lt;= N; ++i)<br>    {<br>      res += findWhere(median);<br>      if (i &lt; N)<br>      {<br>        change(seq[i - K], -1);<br>        change(seq[i], 1);<br>      }<br>    }<br>    return res;<br>  }<br><br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003] [modified for C# by Petr]<br>// Powered by CodeProcessor<br></td>