<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;algorithm&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cstring&gt;<br>#include &lt;iostream&gt;<br>#include &lt;string&gt;<br>#include &lt;vector&gt;<br>using namespace std;<br> <br>#define FOR(I, L, R) for (typeof((L)) I = (L), TMP_##I = (R); I &lt; TMP_##I; ++I)<br> <br>class FloatingMedian {<br>public:<br>  long long sumOfMedians(int seed, int mul, int add, int N, int K);<br>};<br> <br>long long _seed, _mul, _add;<br> <br>long long next()<br>{<br>  long long res = _seed;<br>  _seed *= _mul;<br>  _seed += _add;<br>  _seed %= 65536;<br>  return res;<br>}<br> <br>int size[2*65536];<br>int off;<br> <br>void update(int x, int d)<br>{<br>  while (x &gt; 0) {<br>    size[x] += d;<br>    x /= 2;<br>  }<br>}<br> <br>int get(int x, int i)<br>{<br>  if (x &gt;= off) return x-off;<br>  if (i &gt; size[2*x]) return get(2*x+1, i-size[2*x]);<br>  else return get(2*x, i);<br>}<br> <br>long long FloatingMedian::sumOfMedians(int seed, int mul, int add, int N, int K)<br>{<br>  _seed = seed;<br>  _mul = mul;<br>  _add = add;<br> <br>  int tab[255000];<br> <br>  FOR(i, 0, N) tab[i] = next();<br> <br>  long long sum = 0;<br> <br>  off = 65536;<br> <br>  FOR(i, 0, N) {<br>    update(off+tab[i], 1);<br>    if (i &gt;= K-1) {<br>      sum += get(1, (K+1)/2);<br>      update(off+tab[i-K+1], -1);     <br>    }<br>  }<br> <br>  return sum;<br>}<br> <br>// Powered by MBMagic 0.12<br>// Powered by PopsEdit<br></td>