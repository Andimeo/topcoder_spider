<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>public class FloatingMedian {<br>    private long seed;<br>    private long mult;<br>    private long add;<br>    private long cur;<br>    private boolean first = true;<br>    public long nextRand() {<br>        if (first) {<br>            first = false;<br>            this.cur = seed;<br>            return seed;<br>        } else {<br>            this.cur = (cur * mult + add) % 65536;<br>            return cur;<br>        }<br>    }<br>    public long sumOfMedians(int seed, int mul, int add, int N, int K) {<br>        this.add = add;<br>        this.mult = mul;<br>        this.seed = seed;<br><br>        long[] blah = new long[K + 2];<br>        blah[0] = -1;<br>        blah[K + 1] = 65536;<br>        long sum = 0;<br>        LinkedList&lt;Long&gt; list = new LinkedList&lt;Long&gt;();<br>        ArrayList&lt;Long&gt; nums = new ArrayList&lt;Long&gt;();<br>        for (int i = 0; i &lt; K; i++) {<br>            long next = nextRand();<br>            list.addLast(next);<br>            nums.add(next);<br>        }<br>        Collections.sort(nums);<br>        int median = (K + 1) / 2 - 1;<br>        sum += nums.get(median);<br>        for (int i = 1; i &lt; N - K + 1; i++) {<br>            long remove = list.removeFirst();<br>            int index = Collections.binarySearch(nums, remove);<br>            nums.remove(index);<br>            long next = nextRand();<br>            index = Collections.binarySearch(nums, next);<br>            if (index &lt; 0) {<br>                index = -index - 1;<br>            }<br>            nums.add(index, next);<br>            list.addLast(next);<br>            sum += nums.get(median);<br>        }<br>        return sum;<br>    }<br>}<br><br><br>// Powered by FileEdit<br></td>