<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;vector&gt;<br>#include &lt;list&gt;<br>#include &lt;map&gt;<br>#include &lt;queue&gt;<br>#include &lt;set&gt;<br>#include &lt;deque&gt;<br>#include &lt;stack&gt;<br>#include &lt;bitset&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;functional&gt;<br>#include &lt;numeric&gt;<br>#include &lt;utility&gt;<br>#include &lt;sstream&gt;<br>#include &lt;iostream&gt;<br>#include &lt;iomanip&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;ctime&gt;<br> <br>using namespace std;<br> <br>class Trainyard {<br>  int R, C;<br>public:<br>  int reachableSquares(vector &lt;string&gt;, int);<br>  bool Valid(int i, int j) { return 0 &lt;= i &amp;&amp; i &lt; R &amp;&amp; 0 &lt;= j &amp;&amp; j &lt; C; }<br>};<br> <br>int Trainyard::reachableSquares(vector &lt;string&gt; layout, int fuel) {<br>  queue&lt;pair&lt;pair&lt;int,int&gt;,int&gt; &gt; Q;<br>  vector&lt;vector&lt;int&gt; &gt; reachable(layout.size(), vector&lt;int&gt;(layout[0].size()));<br>  <br>  R = layout.size();<br>  C = layout[0].size();<br>  <br>  for (int i = 0; i &lt; layout.size(); i++)<br>  for (int j = 0; j &lt; layout[i].size(); j++)<br>  if (layout[i][j] == 'S') {<br>    Q.push(make_pair(make_pair(i,j),fuel));<br>  }<br>  <br>  while (!Q.empty()) {<br>    int i = Q.front().first.first;<br>    int j = Q.front().first.second;<br>    int f = Q.front().second;<br>    Q.pop();<br>    if (reachable[i][j]) continue;<br>    reachable[i][j] = 1;<br>    <br>    if (f &gt; 0) {<br>      if (layout[i][j] == '+' || layout[i][j] == 'S') {<br>        if (Valid(i-1,j) &amp;&amp; (layout[i-1][j] == '|' || layout[i-1][j] == '+')) Q.push(make_pair(make_pair(i-1,j),f-1));<br>        if (Valid(i+1,j) &amp;&amp; (layout[i+1][j] == '|' || layout[i+1][j] == '+')) Q.push(make_pair(make_pair(i+1,j),f-1));<br>        if (Valid(i,j-1) &amp;&amp; (layout[i][j-1] == '-' || layout[i][j-1] == '+')) Q.push(make_pair(make_pair(i,j-1),f-1));<br>        if (Valid(i,j+1) &amp;&amp; (layout[i][j+1] == '-' || layout[i][j+1] == '+')) Q.push(make_pair(make_pair(i,j+1),f-1));<br>      } else if (layout[i][j] == '|' || layout[i][j] == 'S') {<br>        if (Valid(i-1,j) &amp;&amp; (layout[i-1][j] == '|' || layout[i-1][j] == '+')) Q.push(make_pair(make_pair(i-1,j),f-1));<br>        if (Valid(i+1,j) &amp;&amp; (layout[i+1][j] == '|' || layout[i+1][j] == '+')) Q.push(make_pair(make_pair(i+1,j),f-1));<br>      } else if (layout[i][j] == '-' || layout[i][j] == 'S') {<br>        if (Valid(i,j-1) &amp;&amp; (layout[i][j-1] == '-' || layout[i][j-1] == '+')) Q.push(make_pair(make_pair(i,j-1),f-1));<br>        if (Valid(i,j+1) &amp;&amp; (layout[i][j+1] == '-' || layout[i][j+1] == '+')) Q.push(make_pair(make_pair(i,j+1),f-1));<br>      }<br>    }<br>    <br>    <br>  }<br> <br> <br>    int ct = 0;<br>    for (int i = 0; i &lt; layout.size(); i++) for (int j = 0; j &lt; layout[0].size(); j++) ct += reachable[i][j];<br>    return ct;<br> <br>}<br> <br> <br>//Powered by [KawigiEdit] 2.0!<br></td>