<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>import java.util.regex.*;<br>import java.text.*;<br>import java.math.*;<br>import java.awt.geom.*;<br> <br>public class Trainyard<br>{<br>  char mat[][];<br>  int a[][];<br>  <br>  boolean cando(char c, char d, int dir)<br>  {<br>    if(dir==0 || dir==2)<br>    {<br>      if((c=='|' || c=='+') &amp;&amp; (d=='|' || d=='+')) return true;<br>    }<br>    if(dir==1 || dir==3)<br>    {<br>      if((c=='-' || c=='+') &amp;&amp; (d=='-' || d=='+')) return true;      <br>    }<br>    return false;<br>  }<br>  <br>  public boolean bounds(int r, int c)<br>  {<br>    if(r&lt;0 || r &gt;=mat.length) return false;<br>    if(c&lt;0 || c &gt;= mat[0].length) return false;<br>    return true;<br>  }<br>  <br>  public void doit(int r, int c, int usedFuel)<br>  {<br>    if(!bounds(r, c)) return;<br>    if(mat[r][c]=='.') return;<br>    if(a[r][c] &lt;= usedFuel) return;<br>    a[r][c] = usedFuel;<br>    if(bounds(r-1, c) &amp;&amp; cando(mat[r][c], mat[r-1][c], 0)) doit(r-1,c,usedFuel+1);    <br>    if(bounds(r, c+1) &amp;&amp; cando(mat[r][c], mat[r][c+1], 1)) doit(r,c+1,usedFuel+1);    <br>    if(bounds(r+1, c) &amp;&amp; cando(mat[r][c], mat[r+1][c], 2)) doit(r+1,c,usedFuel+1);<br>    if(bounds(r, c-1) &amp;&amp; cando(mat[r][c], mat[r][c-1], 3)) doit(r,c-1,usedFuel+1);<br>  }<br>  <br>  public int reachableSquares(String[] layout, int fuel)<br>  {<br>    <br>    mat = new char[layout.length][layout[0].length()];<br>    a = new int [layout.length][layout[0].length()];<br>    int Sr = 0, Sc=0;<br>    for(int i = 0; i&lt; layout.length; i++)<br>      for(int j = 0; j &lt; layout[i].length(); j++)<br>      {<br>        a[i][j] = 2000000000;<br>        mat[i][j] = layout[i].charAt(j);<br>        if(mat[i][j] == 'S'){Sr = i; Sc=j;} <br>      }<br>    a[Sr][Sc] = 0;<br>    int r = Sr, c = Sc;<br>    if(bounds(r-1, c) &amp;&amp; cando('+', mat[r-1][c], 0)) doit(r-1,c,1);    <br>    if(bounds(r, c+1) &amp;&amp; cando('+', mat[r][c+1], 1)) doit(r,c+1,1);    <br>    if(bounds(r+1, c) &amp;&amp; cando('+', mat[r+1][c], 2)) doit(r+1,c,1);<br>    if(bounds(r, c-1) &amp;&amp; cando('+', mat[r][c-1], 3)) doit(r,c-1,1);<br>    int ret = 0;<br>    for(int i = 0; i &lt; layout.length; i++)<br>      for(int j = 0; j &lt; layout[0].length(); j++)<br>        if(a[i][j] &lt;= fuel) ret++;<br>    return ret;<br>  }<br>  <br>  <br>}<br>//Powered by [KawigiEdit] 2.0!<br></td>