<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;cstdio&gt;<br>#include &lt;sstream&gt;<br>#include &lt;queue&gt;<br>#include &lt;iostream&gt;<br>#include &lt;set&gt;<br>#include &lt;cmath&gt;<br>#include &lt;vector&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;cstring&gt;<br>#include &lt;map&gt;<br>#include &lt;string&gt;<br>#include &lt;cmath&gt;<br>using namespace std;<br><br>#define rep(i, a, b) for(int i=a;i&lt;=b;i++)<br>#define fori(i, n) for(int i=0;i&lt;n;i++) <br>#define fori1(i, n) for(int i=1;i&lt;=n;i++) <br>#define forv(i, v) fori(i, v.size())<br>#define V(s) vector&lt;s&gt;<br><br> <br>int w[55][101][101];<br>int n;<br>V(int) times;<br>V(int) costs;<br>class ProductionOptimization<br>{ <br>public: <br>  int go(int g, int cost, int time){<br>    int &amp;s = w[g][cost][time];<br>    if(s!=-1) return s;<br>    s=0;<br>    if(time&lt;times[g] || cost&lt;costs[g]) return s=0;<br>    int v = cost-costs[g];<br>    <br>    if(g==n-1) {<br>      return s = min(time/times[g], cost/costs[g]);<br>    }<br>    <br>    rep(t, 0, cost-costs[g]) {<br>      s &gt;?= go(g+1, t, time-times[g]) + go(g, v-t, time-times[g]);<br>//      printf("%d %d %d %d %d\n", g, cost , time, go(g+1, t, time-times[g]), go(g, v-t, time);<br>    }<br>    return s;<br>  }<br>  <br>  int getMost(vector &lt;int&gt; costs1, vector &lt;int&gt; times1, int totCost, int totTime) <br>  { <br>    n = costs1.size();<br>    costs=costs1;<br>    times=times1;<br>    memset(w, -1, sizeof(w));<br>    return go(0, totCost, totTime);<br>  } <br>  <br> <br>}; <br><br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003]<br>// Powered by CodeProcessor<br></td>