<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br> <br>public class TextEditorNavigation<br>{<br>  public int keystrokes(String[] so, int[] s, int[] f)<br>  {<br>    s[0]++;<br>    s[1]++;<br>    f[0]++;<br>    f[1]++;<br>    int[][] distances=new int[so.length+2][];<br>    int maxlen=0;<br>    for(int i=0;i&lt;so.length;i++)<br>      maxlen=Math.max(maxlen,so[i].length());<br>    for(int i=0;i&lt;distances.length;i++)<br>      distances[i]=new int[10+maxlen];<br>    int[][] nw=new int[so.length+2][10+maxlen],<br>      lw=new int[so.length+2][10+maxlen];<br>    for(int i=0;i&lt;so.length;i++)<br>    {<br>      String sa=so[i];<br>      sa=" "+sa;<br>      while(sa.length()&lt;maxlen+10)<br>        sa+=" ";<br>      char[] c=sa.toCharArray();<br>      boolean[] begins=new boolean[c.length];<br>      for(int j=1;j&lt;c.length;j++)<br>        begins[j]=(c[j]!=' '&amp;&amp;c[j-1]==' ');<br>      int last=0;<br>      for(int j=0;j&lt;c.length;j++)<br>      {<br>        if(last==0)<br>          lw[i+1][j]=j;<br>        else<br>          lw[i+1][j]=last;<br>        if(begins[j])<br>          last=j;<br>      }<br>      last=0;<br>      for(int j=c.length-1;j&gt;0;j--)<br>      {<br>        if(last==0)<br>          nw[i+1][j]=j;<br>        else<br>          nw[i+1][j]=last;<br>        if(begins[j])<br>          last=j;<br>      }<br>    }<br>    LinkedList&lt;Integer&gt; x=new LinkedList&lt;Integer&gt;(),<br>      y=new LinkedList&lt;Integer&gt;();<br>    x.addLast(s[0]);<br>    y.addLast(s[1]);<br>    for(int i=1;i&lt;distances.length-1;i++)<br>    {<br>      int[] a=distances[i];<br>      for(int j=1;j&lt;a.length-1;j++)<br>        a[j]=-1;<br>    }<br>    while(!x.isEmpty())<br>    {<br>      int cx=x.removeFirst();<br>      int cy=y.removeFirst();<br>      int newD=distances[cx][cy]+1;<br>      if(distances[cx][cy+1]==-1)<br>      {<br>        distances[cx][cy+1]=newD;<br>        x.addLast(cx);<br>        y.addLast(cy+1);<br>      }<br>      if(distances[cx][cy-1]==-1)<br>      {<br>        distances[cx][cy-1]=newD;<br>        x.addLast(cx);<br>        y.addLast(cy-1);<br>      }<br>      if(distances[cx+1][cy]==-1)<br>      {<br>        distances[cx+1][cy]=newD;<br>        x.addLast(cx+1);<br>        y.addLast(cy);<br>      }<br>      if(distances[cx-1][cy]==-1)<br>      {<br>        distances[cx-1][cy]=newD;<br>        x.addLast(cx-1);<br>        y.addLast(cy);<br>      }<br>      //home<br>      if(distances[cx][1]==-1)<br>      {<br>        distances[cx][1]=newD;<br>        x.addLast(cx);<br>        y.addLast(1);<br>      }<br>      //end<br>      if(distances[cx][so[cx-1].length()]==-1)<br>      {<br>        distances[cx][so[cx-1].length()]=newD;<br>        x.addLast(cx);<br>        y.addLast(so[cx-1].length());<br>      }<br>      //top<br>      if(distances[1][cy]==-1)<br>      {<br>        distances[1][cy]=newD;<br>        x.addLast(1);<br>        y.addLast(cy);<br>      }<br>      //bottom<br>      if(distances[distances.length-2][cy]==-1)<br>      {<br>        distances[distances.length-2][cy]=newD;<br>        x.addLast(distances.length-2);<br>        y.addLast(cy);<br>      }<br>      //lw<br>      if(distances[cx][lw[cx][cy]]==-1)<br>      {<br>        distances[cx][lw[cx][cy]]=newD;<br>        x.addLast(cx);<br>        y.addLast(lw[cx][cy]);<br>      }<br>      //nw<br>      if(distances[cx][nw[cx][cy]]==-1)<br>      {<br>        distances[cx][nw[cx][cy]]=newD;<br>        x.addLast(cx);<br>        y.addLast(nw[cx][cy]);<br>      }<br>    }<br>    if(Arrays.equals(s,f))<br>      return 0;<br>    return distances[f[0]][f[1]]+1;<br>  }<br>}<br></td>