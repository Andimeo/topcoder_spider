<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Text;<br><br>public class RestoreExpression {<br>  public string restore(string expression) {<br>    string[] p = expression.Split('+', '=');<br>    StringBuilder a = new StringBuilder(p[0]);<br>    StringBuilder b = new StringBuilder(p[1]);<br>    StringBuilder c = new StringBuilder(p[2]);<br>    if (!possible(a, b, c))<br>      return "no solution";<br>    for (int i = 0; i &lt; c.Length; ++i)<br>    {<br>      if (c[i] == '?')<br>      {<br>        for (int j = 9; j &gt;= 0; --j)<br>        {<br>          c[i] = (char) ('0' + j);<br>          if (possible(a, b, c))<br>            break;<br>        }<br>      }<br>    }<br>    for (int i = 0; i &lt; a.Length; ++i)<br>    {<br>      if (a[i] == '?')<br>      {<br>        for (int j = 9; j &gt;= 0; --j)<br>        {<br>          a[i] = (char)('0' + j);<br>          if (possible(a, b, c))<br>            break;<br>        }<br>      }<br>    }<br>    for (int i = 0; i &lt; b.Length; ++i)<br>    {<br>      if (b[i] == '?')<br>      {<br>        for (int j = 9; j &gt;= 0; --j)<br>        {<br>          b[i] = (char)('0' + j);<br>          if (possible(a, b, c))<br>            break;<br>        }<br>      }<br>    }<br>    return a + "+" + b + "=" + c;<br>  }<br><br>  bool possible(StringBuilder a, StringBuilder b, StringBuilder c)<br>  {<br>    int mx = Math.Max(a.Length, Math.Max(b.Length, c.Length));<br>    bool[] can = new bool[2];<br>    bool[] ncan = new bool[2];<br>    can[0] = true;<br>    for (int i = 0; i &lt; mx; ++i)<br>    {<br>      char ach = i &lt; a.Length ? a[a.Length - 1 - i] : '0';<br>      char bch = i &lt; b.Length ? b[b.Length - 1 - i] : '0';<br>      char cch = i &lt; c.Length ? c[c.Length - 1 - i] : '0';<br>      int amin;<br>      int amax;<br>      int bmin;<br>      int bmax;<br>      int cmin;<br>      int cmax;<br>      ncan[0] = false;<br>      ncan[1] = false;<br>      if (ach == '?')<br>      {<br>        amin = 0;<br>        amax = 9;<br>      }<br>      else<br>        amin = amax = ach - '0';<br>      if (bch == '?')<br>      {<br>        bmin = 0;<br>        bmax = 9;<br>      }<br>      else<br>        bmin = bmax = bch - '0';<br>      if (cch == '?')<br>      {<br>        cmin = 0;<br>        cmax = 9;<br>      }<br>      else<br>        cmin = cmax = cch - '0';<br>      if (i == a.Length - 1 &amp;&amp; a.Length &gt; 1)<br>        amin = Math.Max(amin, 1);<br>      if (i == b.Length - 1 &amp;&amp; b.Length &gt; 1)<br>        bmin = Math.Max(bmin, 1);<br>      if (i == c.Length - 1 &amp;&amp; c.Length &gt; 1)<br>        cmin = Math.Max(cmin, 1);<br>      for (int prev = 0; prev &lt;= 1; ++prev)<br>        if (can[prev])<br>          for (int av = amin; av &lt;= amax; ++av)<br>            for (int bv = bmin; bv &lt;= bmax; ++bv)<br>            {<br>              int cv = prev + av + bv;<br>              int np = 0;<br>              if (cv &gt;= 10)<br>              {<br>                cv -= 10;<br>                np = 1;<br>              }<br>              if (cv &gt;= cmin &amp;&amp; cv &lt;= cmax)<br>                ncan[np] = true;<br>            }<br>      bool[] tmp = ncan;<br>      ncan = can;<br>      can = tmp;<br>    }<br>    return can[0];<br>  }<br><br><br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003] [modified for C# by Petr]<br>// Powered by CodeProcessor<br></td>