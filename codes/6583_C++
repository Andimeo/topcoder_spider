<td class="problemText" colspan="8" valign="middle" align="left">
            // Cry as challenge phase is passing by<br><br>#include &lt;algorithm&gt;<br>#include &lt;functional&gt;<br><br>#include &lt;cmath&gt;<br>#include &lt;cctype&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cstring&gt;<br><br>#include &lt;vector&gt;<br>#include &lt;string&gt;<br>#include &lt;sstream&gt;<br>#include &lt;iostream&gt;<br><br>using namespace std;<br><br>#define FORC(it,v) for( __typeof((v).begin()) it = (v).begin(); it != (v).end(); ++it )<br><br>int R, S;<br>int bio[ 11 ];<br>int can[ 11 ];<br><br>int cR[ 11 ][ 11 ];<br><br>vector&lt; string &gt; grid;<br><br>int SS;<br><br>int solve_it( vector&lt; string &gt; &amp;grid )<br>{<br>    int cnt = 0;<br>    <br>    for( int i = 0; i &lt; R; ++i ) {<br>        int comp = 0;<br>        int f = -1;<br>        int l = -1;<br><br>        for( int j = 0; j &lt; S; ++j ) {<br>            if( grid[i][j] == '*' ) {<br>                ++comp;<br><br>                if( bio[j] == false ) {<br>                    if( f == -1 ) f = j;<br>                    l = j;<br>                }<br>            }<br><br>            else {<br>                if( f != -1 ) {<br>                    if( comp &lt; 5 ) return 10000;<br>                    cnt += ( l-f+5 ) / 5;<br>                }<br><br>                comp = 0;<br>                f = -1;<br>            }<br>        }<br><br>        if( f != -1 ) {<br>            if( comp &lt; 5 ) return 10000;<br>            cnt += ( l-f+5 ) / 5;<br>        }<br>    }<br><br>    return cnt;<br>}<br><br>bool check( string S )<br>{<br>    if( S.size() != 5 ) return false;<br><br>    for( int i = 0; i &lt; 5; ++i )<br>        if( S[i] != '*' )<br>            return false;<br><br>    return true;<br>}<br><br>class FiveStarPatterns {<br>public:<br>    int leastLines( vector &lt;string&gt; layout ) {<br>        grid = layout;<br><br>        R = ( int )grid.size();<br>        S = ( int )grid[0].size();<br><br>        memset( bio, 0, sizeof bio );<br><br>        for( int j = 0; j &lt; S; ++j ) {<br>            can[j] = true;<br><br>            for( int i = 0; i &lt; R; ++i )<br>                if( grid[i][j] == '.' )<br>                    can[j] = false;<br>        }       <br><br>        for( int i = 0; i &lt; R; ++i )<br>            for( int j = 0; j &lt; S; ++j )<br>                if( check( grid[i].substr( j, 5 ) ) )<br>                    cR[i][j] = true;<br><br>        if( R &lt; 5 ) {<br>            int tmp = solve_it( grid );<br>            if( tmp &gt;= 1000 ) return -1;<br>            return tmp;<br>        }<br><br>        int mini = 1000000000;<br><br>        for( int i = 0, l = (1&lt;&lt;S); i &lt; l; ++i ) {<br>            int cnt = 0;<br>            int ok = true;<br>            SS = i;<br><br>            for( int j = 0; j &lt; S; ++j ) {                <br>                bio[j] = (i&gt;&gt;j) &amp; 1;<br>                cnt += bio[j];<br><br>                if( bio[j] &amp;&amp; can[j] == false ) ok = false;<br>            }<br><br>            if( !ok ) continue;<br><br>            mini &lt;?= solve_it( grid ) + cnt;<br>        }<br><br>        if( mini &gt;= 1000 ) return -1;<br>        return mini;<br>    }<br>};<br><br><br><br><br><br><br><br><br><br>// Powered by FileEdit<br>// Powered by moj 3.0 beta 11 [modified TZTester]<br>// Powered by CodeProcessor<br></td>