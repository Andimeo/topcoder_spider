<td class="problemText" colspan="8" valign="middle" align="left">
            // another fine solution by misof<br>// #includes {{{<br>#include &lt;algorithm&gt;<br>#include &lt;numeric&gt;<br> <br>#include &lt;iostream&gt;<br>#include &lt;sstream&gt;<br>#include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;queue&gt;<br>#include &lt;set&gt;<br>#include &lt;map&gt;<br> <br>#include &lt;cstdio&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cctype&gt;<br>#include &lt;cassert&gt;<br> <br>#include &lt;cmath&gt;<br>#include &lt;complex&gt;<br>using namespace std;<br>// }}}<br> <br>/////////////////// PRE-WRITTEN CODE FOLLOWS, LOOK DOWN FOR THE SOLUTION ////////////////////////////////<br> <br>// pre-written code {{{<br>#define FOR(i,a,b) for(int i=(int)(a);i&lt;=(int)(b);++i)<br>#define FORD(i,a,b) for(int i=(int)(a);i&gt;=(int)(b);--i)<br>#define REP(i,n) for(int i=0;i&lt;(int)(n);++i)<br>#define SIZE(t) ((int)((t).size()))<br>// }}}<br> <br>/////////////////// CODE WRITTEN DURING THE COMPETITION FOLLOWS ////////////////////////////////<br> <br>long long cost[12];<br>int D;<br>long long N;<br> <br>typedef pair&lt;int, long long&gt; PIL;<br> <br>string toString(vector&lt;PIL&gt; V) {<br>  stringstream res;<br>  REP(i,SIZE(V)) {<br>    int co = V[i].first;<br>    long long kolko = V[i].second;<br>    while (kolko--) { res &lt;&lt; co; if (res.str().size() == 50) return res.str(); }<br>  }<br>  return res.str();<br>}<br> <br>class MatchNumbersHard {<br>public:<br>  vector &lt;string&gt; maxNumber(vector &lt;string&gt; matches, string _n) {<br>    D = SIZE(matches);<br>    REP(i,D) stringstream(matches[i]) &gt;&gt; cost[i];<br>    stringstream(_n) &gt;&gt; N;<br>    <br>    vector &lt;string&gt; res;<br> <br>    int vieme = 0;<br>    REP(i,D) if (cost[i] &lt;= N) vieme = 1;<br>    if (!vieme) { res.push_back("0"); res.push_back(""); res.push_back(""); return res; }<br> <br>    int canPositive = 0;<br>    FOR(i,1,D-1) if (cost[i] &lt;= N) canPositive = 1;<br>    if (!canPositive) { res.push_back("1"); res.push_back("0"); res.push_back("0"); return res; }<br> <br>    long long cheapestNonzero = 1000000000123456789LL;<br>    long long cheapestDigit = 1000000000123456789LL;<br>    REP(i,D) cheapestDigit &lt;?= cost[i];<br>    FOR(i,1,D-1) cheapestNonzero &lt;?= cost[i];<br> <br>    long long mostDigits = 1 + (N-cheapestNonzero) / cheapestDigit;<br> <br>    stringstream _ss; _ss &lt;&lt; mostDigits; res.push_back(_ss.str());<br> <br>    vector&lt;PIL&gt; pocty;<br>    FORD(x,D-1,0) {<br>      if (cost[x] == cheapestDigit) {<br>        pocty.push_back(PIL(x,mostDigits));<br>        mostDigits = 0;<br>        break;<br>      } else {<br>        int canAfford = (N - mostDigits*cheapestDigit) / (cost[x] - cheapestDigit);<br>        // just for sure<br>        canAfford &lt;?= mostDigits;<br>        pocty.push_back(PIL(x,canAfford));<br>        N -= canAfford * cost[x];<br>        mostDigits -= canAfford;<br>      }<br>    }<br> <br>    string A = toString(pocty);<br>    reverse(pocty.begin(), pocty.end());<br>    string B = toString(pocty);<br>    reverse(B.begin(), B.end());<br>    res.push_back(A);<br>    res.push_back(B);<br>    <br>    return res;<br>  }<br> <br> <br>};<br> <br> <br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003]<br>// Powered by CodeProcessor<br></td>