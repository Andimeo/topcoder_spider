<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections;<br>using System.Collections.Generic;<br>using System.Text;<br><br>public class SetOfBoxes <br>{<br>    double area(int x1, int y1, int x2, int y2, int x3, int y3)<br>    {<br>        int ax = x1 - x2;<br>        int ay = y1 - y2;<br>        int bx = x1 - x3;<br>        int by = y1 - y3;<br>        return Math.Abs(ax * by - ay * bx) / 2.0;<br>    }<br><br>    bool[,] inside;<br>    int n;<br>    int[] label;<br><br>  public double countThrow(string[] boxes, int inBox) <br>  {<br>        n = boxes.Length;<br>        int[] x1 = new int[n];<br>        int[] y1 = new int[n];<br>        int[] x2 = new int[n];<br>        int[] y2 = new int[n];<br>        int[] x3 = new int[n];<br>        int[] y3 = new int[n];<br>        double[] a = new double[n];<br>        for (int i = 0; i &lt; n; i++)<br>        {<br>            string[] s = boxes[i].Split(new char[] { ' ', '.' }, StringSplitOptions.RemoveEmptyEntries);<br>            x1[i] = int.Parse(s[0]);<br>            y1[i] = int.Parse(s[1]);<br>            x2[i] = int.Parse(s[2]);<br>            y2[i] = int.Parse(s[3]);<br>            x3[i] = int.Parse(s[4]);<br>            y3[i] = int.Parse(s[5]);<br>            a[i] = area(x1[i], y1[i], x2[i], y2[i], x3[i], y3[i]);<br>        }<br>        if (inBox &gt; n) return 0;<br><br>        inside = new bool[n, n];<br>        int[] b = new int[n];<br>        for (int i = 0; i &lt; n; i++)<br>        {<br>            b[i] = i;<br>        }<br>        Array.Sort(b, delegate(int i, int j) { return a[i].CompareTo(a[j]); });<br>        inside = new bool[n, n];<br>        for (int i = 0; i &lt; n; i++)<br>        {<br>            int u1 = x2[b[i]] - x1[b[i]];<br>            int v1 = y2[b[i]] - y1[b[i]];<br>            int u2 = x3[b[i]] - x1[b[i]];<br>            int v2 = y3[b[i]] - y1[b[i]];<br><br>            int h1 = x1[b[i]] - x2[b[i]];<br>            int l1 = y1[b[i]] - y2[b[i]];<br>            int h2 = x3[b[i]] - x2[b[i]];<br>            int l2 = y3[b[i]] - y2[b[i]];<br><br>            for (int j = 0; j &lt; i; j++)<br>            {<br>                int u3 = x1[b[j]] - x1[b[i]];<br>                int v3 = y1[b[j]] - y1[b[i]];<br><br>                int h3 = x1[b[j]] - x2[b[i]];<br>                int l3 = y1[b[j]] - y2[b[i]];<br><br>                int k1 = u1 * v3 - v1 * u3;<br>                int k2 = u2 * v3 - v2 * u3;<br><br>                int k3 = h1 * l3 - l1 * h3;<br>                int k4 = h2 * l3 - l2 * h3;<br>                if (k1*k2 &lt; 0 &amp;&amp; k3*k4 &lt; 0) inside[j,i] = true;<br>            }<br>        }<br>        label = new int[n];<br>        for (int i = n-1; i &gt;= 0; i--)<br>        {<br>            label[i] = 1;<br>            for (int j = i+1; j &lt; n; j++)<br>            {<br>                if (inside[i, j]) label[i] = Math.Max(label[i], label[j] + 1);<br>            }<br>        }<br><br>        double total = 0;<br>        if (inBox == 0)<br>        {<br>            total = 100 * 100;<br>        }<br>        else for (int i = 0; i &lt; n; i++)<br>            {<br>                if (label[i] == inBox) total += a[b[i]];<br>            }<br>        for (int i = 0; i &lt; n; i++)<br>        {<br>            if (label[i] == inBox+1) total -= a[b[i]];<br>        }<br>        return total/(100*100.0);<br>  }<br><br><br><br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003] [modified for C# by Petr]<br>// Powered by CodeProcessor<br></td>