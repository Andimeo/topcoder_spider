<td class="problemText" colspan="8" valign="middle" align="left">
            public class SetOfBoxes<br>{<br>  public static class Triangle<br>  {<br>    double x0, y0, x1, y1, x2, y2;<br><br>    public Triangle(double x0, double y0, double x1, double y1, double x2, double y2)<br>    {<br>      super();<br>      this.x0 = x0;<br>      this.y0 = y0;<br>      this.x1 = x1;<br>      this.y1 = y1;<br>      this.x2 = x2;<br>      this.y2 = y2;<br>    }<br><br>    double Sq()<br>    {<br>      double res = (x1 - x0) * (y2 - y0) - (y1 - y0) * (x2 - x0);<br>      res = Math.abs(res * 0.5);<br>      return res;<br>    }<br><br>    boolean inside(Triangle t)<br>    {<br>      if ( t.Sq() &gt; Sq() ) return false;<br>      double x = (t.x0 + t.x1 + t.x2) / 3.0;<br>      double y = (t.y0 + t.y1 + t.y2) / 3.0;<br>      return inside(x, y);<br>    }<br><br>    private boolean inside(double x, double y)<br>    {<br>      Triangle t0 = new Triangle(x0, y0, x1, y1, x, y);<br>      Triangle t1 = new Triangle(x0, y0, x, y, x2, y2);<br>      Triangle t2 = new Triangle(x, y, x1, y1, x2, y2);<br><br>      double sq = t0.Sq() + t1.Sq() + t2.Sq();<br>      return Math.abs(sq - Sq()) &lt; 1e-9;<br>    }<br>  }<br><br>  public double countThrow(String A[], int inBox)<br>  {<br>    Triangle T[] = new Triangle[A.length];<br>    for ( int i = 0; i &lt; A.length; ++i )<br>    {<br>      String S[] = A[i].split("[.\\s]");<br>      int T1[] = new int[6];<br>      for ( int j = 0; j &lt; 6; ++j )<br>        T1[j] = Integer.parseInt(S[j]);<br>      T[i] = new Triangle(T1[0], T1[1], T1[2], T1[3], T1[4], T1[5]);<br>    }<br>    double res = 0;<br><br>    if ( inBox == 0 )<br>      res = 100.0 * 100.0;<br>    for ( int i = 0; i &lt; T.length; ++i )<br>    {<br>      int c = 1;<br>      for ( int j = 0; j &lt; T.length; ++j )<br>        if ( i != j &amp;&amp; T[j].inside(T[i]) )<br>        {<br>          if ( i == 2 )<br>            i = i;<br>          ++c;<br>        }<br>      if ( c == inBox )<br>        res += T[i].Sq();<br>      if ( c == inBox + 1 )<br>        res -= T[i].Sq();<br>    }<br>    return res * 0.0001;<br>  }<br>}<br></td>