<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br><br>public class BerryPacker {<br>  public double bestPacking(int[] first, int[] period, int berries) {<br>    int n = first.Length;<br>    int[] am = new int[1 &lt;&lt; n];<br>    int[] cnt = new int[n];<br>    int[] rem = new int[n];<br>    for (int i = 0; i &lt; n; ++i)<br>      rem[i] = first[i] + 1;<br>    double res = 0;<br>    for (long boxes = 1; boxes &lt;= berries; ++boxes)<br>    {<br>      int cmask = 0;<br>      for (int i = 0; i &lt; n; ++i)<br>      {<br>        --rem[i];<br>        if (rem[i] == 0)<br>        {<br>          rem[i] = period[i];<br>          ++cnt[i];<br>          cmask |= (1 &lt;&lt; i);<br>        }<br>      }<br>      ++am[cmask];<br>      res = Math.Max(res, check(n, boxes, berries, am, cnt));<br>    }<br>    return res / n;<br>  }<br><br>  double check(int n, long boxes, int berries, int[] am, int[] cnt)<br>  {<br>    double[] cost = new double[am.Length];<br>    for (int i = 0; i &lt; am.Length; ++i)<br>    {<br>      for (int j = 0; j &lt; n; ++j)<br>        if ((i &amp; (1 &lt;&lt; j)) != 0)<br>          if (cnt[j] &gt; 0)<br>            cost[i] += (double) boxes / cnt[j];<br>    }<br>    int[] p = new int[am.Length];<br>    for (int i = 0; i &lt; p.Length; ++i)<br>      p[i] = i;<br>    Array.Sort(p, delegate(int a, int b)<br>                  {<br>              return -cost[a].CompareTo(cost[b]);<br>                  });<br>    double res = 0;<br>    for (int i = 0; i &lt; am.Length; ++i)<br>    {<br>      int j = p[i];<br>      res += am[j] * cost[j];<br>      berries -= am[j];<br>    }<br>    for (int i = 0; i &lt; am.Length &amp;&amp; berries &gt;= 0; ++i)<br>    {<br>      int j = p[i];<br>      int by = Math.Min(berries, 8 * am[j]);<br>      berries -= by;<br>      res += by * cost[j];<br>    }<br>    return res;<br>  }<br><br><br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003] [modified for C# by Petr]<br>// Powered by CodeProcessor<br></td>