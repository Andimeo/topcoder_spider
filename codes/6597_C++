<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;algorithm&gt;<br>#include &lt;iostream&gt;<br>#include &lt;sstream&gt;<br>#include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;queue&gt;<br>#include &lt;set&gt;<br>#include &lt;map&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cctype&gt;<br>#include &lt;cmath&gt;<br>#include &lt;list&gt;<br>using namespace std;<br><br>// LIB CODE<br>#define SZ(v) ((int)(v).size())<br>#define FORE(i,a,b) for(int i=(a);i&lt;=int(b);++i)<br>typedef vector&lt;int&gt; VI;<br>#define FOR(i,a,b) for(int i=(a);i&lt;int(b);++i)<br>#define REP(i,n) FOR(i,0,n)<br>typedef vector&lt;double&gt; VD;<br>#define ALL(v) (v).begin(),(v).end()<br>#define SORT(v) sort(ALL(v))<br>// REAL CODE<br><br>int cnt[100001];<br><br>class BerryPacker {<br>public:<br>  double bestPacking(vector &lt;int&gt; next, vector &lt;int&gt; period, int berries) {<br>    double ret=0; int n=SZ(next);<br>    memset(cnt,0,sizeof(cnt)); VI seen(n,0); VI num(1&lt;&lt;n,0);<br>    FORE(boxes,1,berries) {<br>      num[0]++;<br>      REP(i,n) while(next[i]&lt;boxes) {<br>        --num[cnt[next[i]]];<br>        cnt[next[i]]|=1&lt;&lt;i;<br>        ++num[cnt[next[i]]];<br>        ++seen[i];<br>        next[i]+=period[i];<br>      }<br>      VD w(1&lt;&lt;n,0); REP(i,1&lt;&lt;n) REP(j,n) if(i&amp;(1&lt;&lt;j)) if(seen[j]&gt;0) w[i]+=1.0/seen[j]*boxes;<br>      vector&lt;pair&lt;double,int&gt; &gt; x(1&lt;&lt;n); REP(i,1&lt;&lt;n) x[i].first=w[i],x[i].second=num[i]; SORT(x); reverse(ALL(x));<br>      <br>      double cur=0; int left=berries-boxes;<br>      REP(i,1&lt;&lt;n) {<br>        int add=min(left,x[i].second*8); left-=add;<br>        cur+=x[i].first*(x[i].second+add);<br>      }<br>      <br>      ret&gt;?=cur;<br>//      if(boxes&lt;=10) printf("%d: %lf\n",boxes,cur);<br>    }<br>    return ret/n;<br>  }<br>};<br><br><br><br>// Powered by FileEdit<br>// Powered by CodeProcessor<br></td>