<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br><br>public class BerryPacker {<br>  <br>  class Pair implements Comparable&lt;Pair&gt; {<br>    double a;<br>    int cnt;<br>    <br>    public Pair(double a, int cnt) {<br>      this.a = a;<br>      this.cnt = cnt;<br>    }<br>    <br>    public int compareTo(Pair that) {<br>      return -Double.compare(this.a, that.a);<br>    }<br>    <br>  }<br>  <br>    public double bestPacking(int[] first, int[] period, int berries){<br>      int n = first.length;<br>      boolean[][] lookedAt = new boolean[n][berries];<br>      int[] subset = new int[berries];<br>      for (int i = 0; i &lt; n; i++) {<br>        int cur = first[i];<br>        while (cur &lt; berries) {<br>          lookedAt[i][cur] = true;<br>          subset[cur] += 1 &lt;&lt; i;<br>          cur += period[i];<br>        }<br>      }<br>      double ans = 0;<br>      int[] cnt = new int[n];<br>      int[] cntSubset = new int[1 &lt;&lt; n];<br>      Arrays.fill(cnt, 0);<br>      for (int k = 1; k &lt;= berries; k++) {<br>        for (int i = 0; i &lt; n; i++) {<br>          if (lookedAt[i][k - 1]) {<br>            cnt[i]++;<br>          }<br>        }<br>        cntSubset[subset[k - 1]]++;<br>        int left = berries - k;<br>        double cur = 0;<br>        for (int i = 0; i &lt; n; i++) {<br>          if (cnt[i] &gt; 0) {<br>            cur += 1;<br>          }<br>        }<br>//        double cur = n;<br>        <br>        Pair[] a = new Pair[1 &lt;&lt; n];<br>        for (int i = 0; i &lt; (1 &lt;&lt; n); i++) {<br>          double toAdd = 0;<br>          for (int j = 0; j &lt; n; j++) {<br>            if ((i &amp; (1 &lt;&lt; j)) != 0 &amp;&amp; cnt[j] &gt; 0) {<br>              toAdd += (1.0 / cnt[j]);<br>            }<br>          }<br>          a[i] = new Pair(toAdd, cntSubset[i]);<br>        }<br>        Arrays.sort(a);<br>        for (int i = 0; i &lt; (1 &lt;&lt; n); i++) {<br>          if (left == 0) {<br>            break;<br>          }<br>          int count = a[i].cnt;<br>          if (8 * count &gt;= left) {<br>            cur += a[i].a * left;<br>            left = 0;<br>          } else {<br>            left -= 8 * count;<br>            cur += 8 * count * a[i].a;<br>          }<br>        }<br>        ans = Math.max(ans, k * cur * 1.0 / n);<br>      }<br>      return ans;<br>    }<br><br>}<br></td>