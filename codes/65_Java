<td class="problemText" colspan="8" valign="middle" align="left">
            public class IntSplit {<br>  public int maxSplit(int source, int target) {<br>    int i,j,k,m,count,digits[] = new int[10], best=0;<br>    m = source;<br>    count = 0;<br>    while (m&gt;0) {<br>      digits[count] = m % 10;<br>      count++;<br>      m /= 10;<br>    }<br>    //System.out.println(count);<br>    if (source==0) return 0;<br>    if (source &lt; 10) {<br>      if (source &gt; target)<br>        return 0;<br>      else<br>        return source;<br>    }<br>    int temp = count-1;<br>    int max = 1;<br>    while (temp &gt; 0) {<br>      max *= 2;<br>      temp--;<br>    }<br>    boolean split[] = new boolean[10];<br>    for (i=0; i&lt;max; i++) {<br>      temp = i;<br>      for (j=0; j&lt;count-1; j++) {<br>        if (temp % 2 == 0)<br>          split[j] = false;<br>        else<br>          split[j] = true;<br>        temp /= 2;<br>      }<br>      //System.out.println("evaluate: ");<br>      //for (j=0; j&lt;count-1; j++)<br>      //  System.out.println(split[j]);<br>      String s = new String("");<br>      int soFar = 0;<br>      for (m=0; m&lt;count; m++) {<br>        s = s + String.valueOf(digits[count-m-1]);<br>        if (m==count-1) continue;<br>        if (split[m]) {<br>          soFar += Integer.parseInt(s);<br>          s = new String("");<br>        }<br>      }<br>      soFar += Integer.parseInt(s);<br>      if (soFar &gt;= best &amp;&amp; soFar &lt;= target)<br>        best = soFar;<br>    }<br>    return best;<br>  }<br>}<br></td>