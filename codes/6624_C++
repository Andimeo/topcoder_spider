<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;string.h&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;algorithm&gt;<br><br>using namespace std;<br>typedef vector&lt;int&gt; VI;<br>typedef vector&lt;VI&gt; VII;<br>typedef vector&lt;string&gt; VS;<br><br>VS split(string a, string spl)<br>{<br>  int last = -1;<br>  VS res;<br>  for(int i=0;i&lt;=a.size();i++)<br>    {<br>      if(i == a.size() || spl.find(a[i]) != string::npos)<br>  {<br>    if(last != i-1)<br>      {<br>        res.push_back(a.substr(last+1,i-last));<br>      }<br>    last = i;<br>  }<br>    }<br>  return res;<br>}<br><br>int minutes[1&lt;&lt;14];<br>char had[1&lt;&lt;14][14];<br><br>int N;<br><br>int src;<br>VS conn;<br>int bestposs;<br><br>void bestCall(int dest, int caller)<br>{<br>  if(caller &gt;= N)<br>    {<br>      if(minutes[src] &gt; minutes[dest] + 1)<br>  {<br>    minutes[src] = minutes[dest]+1;<br>    //    printf("%d gets %d from %d\n", src, minutes[dest]+1, dest);<br>  }<br>      return;<br>    }<br><br>  if(had[dest][caller])<br>    return;<br>  had[dest][caller] = 1;<br><br>  if(src &amp; (1&lt;&lt;caller))<br>    {<br>      bool ok = false;<br>      for(int i=0;i&lt;N;i++)<br>  if(!(dest &amp; (1&lt;&lt;i)) &amp;&amp; conn[caller][i] == 'Y')<br>    {<br>      bestCall((dest | (1&lt;&lt;i)), caller+1);<br>      ok = true;<br>    }<br>      if(!ok)<br>  bestCall(dest, caller+1);  <br>    }<br>  else<br>    bestCall(dest, caller+1);    <br><br>}<br><br>class FastGossip {<br>  public:<br>  int minTime(vector &lt;string&gt; conn_) {<br>    conn = conn_;<br>    N = conn.size();<br>    memset(minutes, 0x33, sizeof(minutes));<br>    minutes[(1&lt;&lt;N) - 1] = 0;<br>    for(int i=(1&lt;&lt;N)-2;i&gt;=1;i--)<br>      if(i % 2 == 1)<br>      {<br>        memset(had, 0, sizeof(had));<br>        src = i;<br>        bestCall(src, 0);<br>        //        printf("Call %d: %d\n", i, minutes[i]);<br>      }<br>    <br>    if(minutes[1] &gt; 1000)<br>      return -1;<br>    return minutes[1];<br>  }<br>};<br><br><br>// Powered by FileEdit<br></td>