<td class="problemText" colspan="8" valign="middle" align="left">
            imports System<br>imports Microsoft.VisualBasic<br>imports System.Collections<br>imports System.Text<br> <br> <br>Public Class SillySudoku<br> <br>    Dim g(3, 3) As Integer<br> <br>    Public Function countWays(ByVal board() As String) As Integer<br>        Dim y As Integer, x As Integer<br>        For y = 0 To board.Length - 1<br>            For x = 0 To board(0).Length - 1<br>                If board(y).Chars(x) &lt;&gt; "-" Then<br>                    g(x, y) = Val(board(y).Chars(x))<br>                End If<br>            Next<br>        Next<br> <br>        Return GetSolves()<br> <br>    End Function<br> <br>    Private Function GetSolves() As Integer<br>        Dim ip As Integer, t As Integer<br> <br>        Dim y As Integer, x As Integer<br>        For y = 0 To 3<br>            If g(0, y) &lt;&gt; 0 Then<br>                If g(1, y) = g(0, y) Then Return 0<br>                If g(2, y) = g(0, y) Then Return 0<br>                If g(3, y) = g(0, y) Then Return 0<br>            End If<br>            If g(1, y) &lt;&gt; 0 Then<br>                If g(2, y) = g(1, y) Then Return 0<br>                If g(3, y) = g(1, y) Then Return 0<br>            End If<br>            If g(2, y) &lt;&gt; 0 Then<br>                If g(3, y) = g(2, y) Then Return 0<br>            End If<br>        Next<br>        For x = 0 To 3<br>            If g(x, 0) &lt;&gt; 0 Then<br>                If g(x, 1) = g(x, 0) Then Return 0<br>                If g(x, 2) = g(x, 0) Then Return 0<br>                If g(x, 3) = g(x, 0) Then Return 0<br>            End If<br>            If g(x, 1) &lt;&gt; 0 Then<br>                If g(x, 2) = g(x, 1) Then Return 0<br>                If g(x, 3) = g(x, 1) Then Return 0<br>            End If<br>            If g(x, 2) &lt;&gt; 0 Then<br>                If g(x, 3) = g(x, 2) Then Return 0<br>            End If<br>        Next<br>        Dim xb As Integer, yb As Integer<br>        For xb = 0 To 2 Step 2<br>            For yb = 0 To 2 Step 2<br>                If g(xb, yb) &lt;&gt; 0 Then<br>                    If g(xb, yb) = g(xb + 1, yb) Then Return 0<br>                    If g(xb, yb) = g(xb + 1, yb + 1) Then Return 0<br>                    If g(xb, yb) = g(xb, yb + 1) Then Return 0<br>                End If<br>                If g(xb + 1, yb) &lt;&gt; 0 Then<br>                    If g(xb + 1, yb) = g(xb + 1, yb + 1) Then Return 0<br>                    If g(xb + 1, yb) = g(xb, yb + 1) Then Return 0<br>                End If<br>                If g(xb + 1, yb + 1) &lt;&gt; 0 Then<br>                    If g(xb + 1, yb + 1) = g(xb, yb + 1) Then Return 0<br>                End If<br>            Next<br>        Next<br> <br>        For y = 0 To 3<br>            For x = 0 To 3<br>                If g(x, y) = 0 Then<br>                    For ip = 1 To 4<br>                        g(x, y) = ip<br>                        t = t + GetSolves()<br>                        g(x, y) = 0<br>                    Next<br>                    Return t<br>                End If<br>            Next<br>        Next<br> <br>        Return 1<br>    End Function<br> <br>End Class<br></td>