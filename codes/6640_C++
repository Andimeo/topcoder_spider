<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;algorithm&gt;<br>#include &lt;iostream&gt;<br>#include &lt;sstream&gt;<br>#include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;queue&gt;<br>#include &lt;set&gt;<br>#include &lt;map&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cctype&gt;<br>#include &lt;cmath&gt;<br>using namespace std;<br><br><br>const double sqrt2 = sqrt(2.0);<br>class PickupBed {<br>public:<br>    double put(vector&lt;pair&lt;double, double&gt; &gt;&amp; ht) {<br>        vector&lt;double&gt; pos;<br>        pos.push_back(ht[0].first + ht[0].second + ht[0].second);<br>        for (int i = 1, m = ht.size(); i &lt; m; ++i) {<br>            double a = ht[i].first;<br>            double b = ht[i].second;<br>            double len = a + b + b;<br>            double far = len;<br>            for (int j = i - 1; j &gt;= 0; --j) {<br>                double x = pos[j];<br>                double y1 = ht[j].second;<br>                double y2 = y1 + ht[j].first;<br>                if (a + b &lt; y1) {<br>                    x = x - y1 + a + b + len;<br>                } else if (y2 &lt; b) {<br>                    x = x - b + y2 + len;<br>                } else {<br>                    x = x + len;<br>                }<br>                if (x &gt; far) {<br>                    far = x;<br>                }<br>            }<br>            pos.push_back(far);<br>        }<br>        return *max_element(pos.begin(), pos.end());<br>    }<br>    double length(vector&lt;int&gt; ht) {<br>        sort(ht.begin(), ht.end());<br>        vector&lt;pair&lt;double, double &gt; &gt; htt;<br>        for (int i = 0, m = ht.size(); i &lt; m; ++i) {<br>            double a = ht[i] / (1 + sqrt2);<br>            double b = a / sqrt2;<br>            htt.push_back(make_pair(a, b));<br>        }<br>        double res = 1e100;<br>        do {<br>            double tmp = put(htt);<br>            if (tmp &lt; res) {<br>                res = tmp;<br>            }<br>        } while (next_permutation(htt.begin(), htt.end()));<br>        return res;<br>    }<br><br>};<br><br><br>// Powered by FileEdit<br>// Powered by CodeProcessor<br></td>