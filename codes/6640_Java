<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br> <br>public class PickupBed {<br>    int n;<br>    int[] h;<br>    double[] s;<br>    int[] a;<br>    boolean[] u;<br> <br>    double[] lp;<br>    double best;<br> <br>    double lpos(double p, double sp, double s) {<br>        if (sp * Math.sqrt(2.0) / 2 &lt;= s * (1.0 + Math.sqrt(2.0) / 2) &amp;&amp;<br>                s * Math.sqrt(2.0) / 2 &lt;= sp * (1 + Math.sqrt(2.0) / 2)) {<br>            return p + sp * (1.0 + Math.sqrt(2.0));<br>        } else if (sp * Math.sqrt(2.0) / 2 &gt;= s * (1.0 + Math.sqrt(2.0) / 2)) {<br>            return p + sp * (1.0 + Math.sqrt(2.0) / 2) + s * (1.0 + Math.sqrt(2.0) / 2);<br>        } else {<br>            return p + (2 + 3 * Math.sqrt(2.0) / 2) * sp - Math.sqrt(2) / 2 * s;<br>        }<br>    }<br> <br>    void relax() {<br>        lp[0] = 0;<br>        double w = (1 + Math.sqrt(2)) * s[a[0]];<br>        for (int i = 1; i &lt; n; i++) {<br>            double q = 0;<br>            for (int j = 0; j &lt; i; j++) {<br>                q = Math.max(q, lpos(lp[j], s[a[j]], s[a[i]]));<br>            }<br>            lp[i] = q;<br>            if (lp[i] + (1 + Math.sqrt(2)) * s[a[i]] &gt; w) {<br>                w = lp[i] + (1 + Math.sqrt(2)) * s[a[i]];<br>            }<br>        }<br>        best = Math.min(best, w);<br>    }<br> <br>    void bt(int x) {<br>        if (x == n) {<br>            relax();<br>            return;<br>        }<br> <br>        for (int i = 0; i &lt; n; i++) {<br>            if (!u[i]) {<br>                a[x] = i;<br>                u[i] = true;<br>                bt(x + 1);<br>                u[i] = false;<br>            }<br>        }<br>    }<br> <br>    public double length(int[] ht) {<br>        n = ht.length;<br>        h = ht;<br>        s = new double[n];<br>        for (int i = 0; i &lt; n; i++) {<br>            s[i] = h[i] * 1.0 / (1 + Math.sqrt(2.0));<br>        }<br> <br>        best = Double.MAX_VALUE;<br>        a = new int[n];<br>        u = new boolean[n];<br>        lp = new double[n];<br>        bt(0);<br> <br>        return best;<br>    }<br> <br> <br>}<br> <br> <br>// Powered by PopsEdit<br> <br>// Powered by CodeProcessor<br></td>