<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br><br>public class MemorizingPi {<br>  <br>  <br>  boolean r2(String s) {<br>    return s.equals("128") ||<br>    s.equals("256") ||<br>    s.equals("512") ||<br>    s.equals("1024") ||<br>    s.equals("2048") ||<br>    s.equals("4096") ||<br>    s.equals("8192");   <br>  }<br>  <br>  <br>  <br>  <br>  int best(String s) {<br>    int size = s.length();<br>    boolean ok = true;<br>    for(int i = 1; i &lt;size &amp;&amp; ok;++i) {<br>      ok = s.charAt(i) == s.charAt(i-1);<br>    }<br>    if(ok) return 1;<br>    <br>    if(r2(s)) return 2;<br>    ok = true;<br>    for(int i = 1; i &lt; size &amp;&amp; ok; ++i) {<br>      ok = (s.charAt(i) - s.charAt(i-1) == 1);<br>    }<br>    <br>    if(ok) return 4;<br>    <br>    ok = true;<br>    for(int i = 1; i &lt; size &amp;&amp; ok; ++i) {<br>      ok = (s.charAt(i) - s.charAt(i-1) == -1);<br>    }<br>    <br>    if(ok) return 5;<br>    <br>    if(s.charAt(0) == s.charAt(size-1)) return 7;<br>    <br>    for(int i = 0; i &lt; size; ++i)<br>      for(int j = i+1; j &lt; size; ++j)<br>        if(s.charAt(i) == s.charAt(j))<br>          return 8;<br>          <br>    return 10;      <br>    <br>    <br>  }<br>  <br>  int [] mem = new int [10000];<br>  <br>  <br>  <br>  int get(int k, String total) {<br>    if(total.length() == k)<br>      return 0;<br>    if(k &gt; total.length()) return 10000;  <br>    <br>    if(mem[k] &gt; 0)<br>      return mem[k];<br>      <br>    if(total.length() - k &lt; 3) return 10000;  <br>    int best = get(k+3, total) + best(total.substring(k, k+3));<br>    if(total.length() - k &gt;= 4) <br>      best = Math.min(get(k+4, total) +   best(total.substring(k, k+4)), best);<br>    return mem[k] = best;<br>  }<br>  <br>  void construct(String total, int k, List&lt;String&gt; list, String current) {<br>    if(k == total.length()) {<br>    if(current.length() &gt; 0)<br>      list.add(current.trim());<br>    return;<br>    }<br>    int val = get(k, total);<br>    <br>    int best = get(k+3, total) + best(total.substring(k, k+3));<br>    String next = null;<br>    if(best == val) {<br>      next = total.substring(k, k+3);<br>    } else {<br>      next = total.substring(k, k+4);<br>    }<br>    String test = current + " " + next;<br>    test = test.trim();<br>    if(test.length() &gt; 100) {<br>      list.add(current);<br>      construct(total, k + next.length(), list, next);<br>    } else {<br>      construct(total, k + next.length(), list, test);<br>    }<br><br>  }<br>  <br>  <br>  public String [] segmentation(String [] S) {<br>    String total = "";<br>    for(String s : S) {<br>      total += s;<br>    }<br>    List&lt;String&gt; lret = new ArrayList();<br>    construct(total, 0, lret, "");<br>    <br>    String [] ret = new String [lret.size()];<br>    for(int i = 0 ; i &lt; ret.length; ++i)<br>    ret[i] = lret.get(i);<br>    <br>    System.out.println(get(0, total));<br>    return ret;<br>  }<br>}<br></td>