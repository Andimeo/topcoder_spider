<td class="problemText" colspan="8" valign="middle" align="left">
            Imports Microsoft.VisualBasic<br>Imports System<br>Imports System.Collections<br><br>Public Class MemorizingPi<br>    Dim save As New Hashtable()<br>    Dim csave As New Hashtable()<br>    Public Function segmentation(ByVal digits As String()) As String()<br>        Dim s As String<br>        Dim i As Integer<br>        s = ""<br>        For i = 0 To digits.GetUpperBound(0)<br>            s = s &amp; digits(i)<br>        Next<br>        Dim p As Integer, c As Integer<br>        p = 0<br>        Dim ret(100) As String<br>        Do<br>            i = choose(s.Substring(p))<br>            If Len(ret(c)) + i &gt; 100 Then<br>                c = c + 1<br>            End If<br>            ret(c) = ret(c) &amp; s.Substring(p, i) &amp; " "<br>            p = p + i<br><br>        Loop Until p &gt;= Len(s)<br>        ReDim Preserve ret(c)<br>        For i = 0 To c<br>            ret(i) = Trim(ret(i))<br>        Next<br>        segmentation = ret<br>    End Function<br>    Function choose(ByVal s As String) As Integer<br>        'returns 3 or 4<br>        If csave.ContainsKey(s) Then<br>            choose = csave(s)<br>            Exit Function<br>        End If<br>        Dim c3 As Integer, c4 As Integer<br>        Dim r3 As String, r4 As String<br>        Dim t As String<br>        Select Case Len(s)<br>            Case 3, 6, 9<br>                choose = 3<br>                Exit Function<br>            Case 4, 8<br>                choose = 4<br>                Exit Function<br>        End Select<br>        t = s.Substring(0, 3)<br>        c3 = getComplex3(t)<br>        t = s.Substring(0, 4)<br>        c4 = getComplex4(t)<br>        r3 = s.Substring(3)<br>        r4 = s.Substring(4)<br>        c3 = c3 + getComplexity(r3)<br>        c4 = c4 + getComplexity(r4)<br>        If c4 &lt; c3 Then<br>            csave(s) = 4<br>            choose = 4<br>        Else<br>            csave(s) = 3<br>            choose = 3<br>        End If<br>    End Function<br>    Function getComplexity(ByVal s As String) As Integer<br>        Dim c3 As Integer, c4 As Integer<br>        Dim r3 As String, r4 As String<br>        Dim i As Integer<br>        If save.ContainsKey(s) Then<br>            getComplexity = save(s)<br>            Exit Function<br>        End If<br>        If s = "" Then<br>            getComplexity = 0<br>            Exit Function<br>        End If<br>        Dim t As String<br>        i = choose(s)<br><br>        t = s.Substring(0, i)<br>        If i = 3 Then<br>            c3 = getComplex3(t)<br>        Else<br>            c3 = getComplex4(t)<br>        End If<br>        r3 = s.Substring(i)<br>        c3 = c3 + getComplexity(r3)<br><br>        save(s) = c3<br>        getComplexity = c3<br>        <br>    End Function<br>    Function getComplex3(ByVal s As String) As Integer<br>        Dim c(3) As Integer<br>        c(1) = Val(s.Substring(0, 1))<br>        c(2) = Val(s.Substring(1, 1))<br>        c(3) = Val(s.Substring(2, 1))<br>        If c(1) = c(2) And c(1) = c(3) Then<br>            getComplex3 = 1<br>            Exit Function<br>        End If<br>        If s = "256" Or s = "512" Or s = "128" Then<br>            getComplex3 = 2<br>            Exit Function<br>        End If<br>        If c(2) = c(1) + 1 And c(3) = c(2) + 1 Then<br>            getComplex3 = 4<br>            Exit Function<br>        End If<br>        If c(2) = c(1) - 1 And c(3) = c(2) - 1 Then<br>            getComplex3 = 5<br>            Exit Function<br>        End If<br>        If c(3) = c(1) Then<br>            getComplex3 = 7<br>            Exit Function<br>        End If<br>        If c(2) = c(1) Or c(3) = c(2) Then<br><br>            getComplex3 = 8<br>            Exit Function<br><br>        End If<br>        getComplex3 = 10<br>    End Function<br>    Function getComplex4(ByVal s As String) As Integer<br>        Dim c(4) As Integer<br>        c(1) = Val(s.Substring(0, 1))<br>        c(2) = Val(s.Substring(1, 1))<br>        c(3) = Val(s.Substring(2, 1))<br>        c(4) = Val(s.Substring(3, 1))<br>        If c(1) = c(2) And c(1) = c(3) And c(1) = c(4) Then<br>            getComplex4 = 1<br>            Exit Function<br>        End If<br>        If s = "1024" Or s = "2048" Or s = "4096" Or s = "8192" Then<br>            getComplex4 = 2<br>            Exit Function<br>        End If<br>        If c(2) = c(1) + 1 And c(3) = c(2) + 1 And c(4) = c(3) + 1 Then<br>            getComplex4 = 4<br>            Exit Function<br>        End If<br>        If c(2) = c(1) - 1 And c(3) = c(2) - 1 And c(4) = c(3) - 1 Then<br>            getComplex4 = 5<br>            Exit Function<br>        End If<br>        If c(4) = c(1) Then<br>            getComplex4 = 7<br>            Exit Function<br>        End If<br>        If c(2) = c(1) Or c(3) = c(2) Or c(2) = c(4) Or c(3) = c(4) Or c(1) = c(3) Then<br><br>            getComplex4 = 8<br>            Exit Function<br><br>        End If<br>        getComplex4 = 10<br>    End Function<br>End Class<br></td>