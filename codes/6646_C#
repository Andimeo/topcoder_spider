<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections.Generic;<br><br>public class StrawberryFieldsOnFire {<br>  long[] x;<br>  long[] y;<br>  long w;<br>  long h;<br>  int n;<br>  <br>  struct Event : IComparable&lt;Event&gt;<br>  {<br>    public long at;<br>    public long dir;<br><br>    public Event(long at, long dir)<br>    {<br>      this.at = at;<br>      this.dir = dir;<br>    }<br><br>    public int CompareTo(Event other)<br>    {<br>      return at.CompareTo(other.at);<br>    }<br>  }<br>  <br>  public int timeLimit(int w, int h, string need, string[] fire) {<br>    int left = 0;<br>    int right = 1000000001;<br>    long ne = long.Parse(need);<br>    this.w = w;<br>    this.h = h;<br>    n = fire.Length;<br>    x = new long[n];<br>    y = new long[n];<br>    for (int i = 0; i &lt; n; ++i)<br>    {<br>      string[] s = fire[i].Split(' ');<br>      x[i] = long.Parse(s[0]);<br>      y[i] = long.Parse(s[1]);<br>    }<br>    while (right - left &gt; 1)<br>    {<br>      int middle = (left + right) / 2;<br>      if (alive(middle) &gt;= ne)<br>        left = middle;<br>      else<br>        right = middle;<br>    }<br>    return left;<br>  }<br><br>  private long alive(int time)<br>  {<br>    List&lt;long&gt; xs = new List&lt;long&gt;(2 * n);<br>    List&lt;Event&gt; ys = new List&lt;Event&gt;(2 * n);<br>    for (int i = 0; i &lt; n; ++i)<br>    {<br>      xs.Add(Math.Max(x[i] - time, 1));<br>      xs.Add(Math.Min(x[i] + time + 1, w + 1));<br>    }<br>    xs.Sort();<br>    long res = 0;<br>    for (int j = 0; j &lt; xs.Count - 1; ++j)<br>      if (xs[j] &lt; xs[j + 1])<br>      {<br>        long cur = 0;<br>        ys.Clear();<br>        long atx = xs[j] + xs[j + 1];<br>        for (int i = 0; i &lt; n; ++i)<br>          if (2 * (x[i] - time) &lt;= atx &amp;&amp; 2 * (x[i] + time + 1) &gt;= atx)<br>          {<br>            ys.Add(new Event(Math.Max(y[i] - time, 1), 1));<br>            ys.Add(new Event(Math.Min(y[i] + time + 1, h + 1), -1));<br>          }<br>        if (ys.Count == 0)<br>          continue;<br>        ys.Sort();<br>        long sd = ys[0].dir;<br>        for (int k = 1; k &lt; ys.Count; ++k)<br>        {<br>          if (sd &gt; 0)<br>            cur += ys[k].at - ys[k - 1].at;<br>          sd += ys[k].dir;<br>        }<br>        res += cur * (xs[j + 1] - xs[j]);<br>      }<br>    return w * h - res;<br>  }<br><br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003] [modified for C# by Petr]<br>// Powered by CodeProcessor<br></td>