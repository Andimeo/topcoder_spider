<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;vector&gt;<br>#include &lt;list&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;deque&gt;<br>#include &lt;stack&gt;<br>#include &lt;bitset&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;functional&gt;<br>#include &lt;numeric&gt;<br>#include &lt;utility&gt;<br>#include &lt;sstream&gt;<br>#include &lt;iostream&gt;<br>#include &lt;iomanip&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;ctime&gt;<br><br>using namespace std;<br><br>typedef long long __int64;<br><br>class StrawberryFieldsOnFire<br>{<br>public:<br>  int sizeX,sizeY,n;<br>  int X[60],Y[60],X1[60],Y1[60],X2[60],Y2[60];<br>  int min(int a,int b)<br>  {<br>    return (a&lt;b)?a:b;<br>  }<br>  int max(int a,int b)<br>  {<br>    return (a&gt;b)?a:b;<br>  }<br>  __int64 solve(int T)<br>  {<br>    set&lt;int&gt; MX,MY;<br>    MX.clear();<br>    MY.clear();<br>    int i;<br>    for (i=0;i&lt;n;i++)<br>    {<br>      X1[i]=max(1,X[i]-T);<br>      X2[i]=min(sizeX,X[i]+T)+1;<br>      Y1[i]=max(1,Y[i]-T);<br>      Y2[i]=min(sizeY,Y[i]+T)+1;<br>      MX.insert(X1[i]);<br>      MX.insert(X2[i]);<br>      MY.insert(Y1[i]);<br>      MY.insert(Y2[i]);<br>    }<br>    __int64 result=0;<br>    set&lt;int&gt;::iterator it;<br>    for (set&lt;int&gt;::iterator itX=MX.begin();itX!=MX.end();++itX)<br>    for (set&lt;int&gt;::iterator itY=MY.begin();itY!=MY.end();++itY)<br>    {<br>      int sX=*itX,sY=*itY;<br>      it=itX;<br>      ++it;<br>      if (it==MX.end())<br>        continue;<br>      int tX=*it;<br>      it=itY;<br>      ++it;<br>      if (it==MY.end())<br>        continue;<br>      int tY=*it;<br>      __int64 size=tX-sX;<br>      size*=(tY-sY);<br>      for (int i=0;i&lt;n;i++)<br>        if (X1[i]&lt;=sX &amp;&amp; X2[i]&gt;=tX &amp;&amp; Y1[i]&lt;=sY &amp;&amp; Y2[i]&gt;=tY)<br>        {<br>          result+=size;<br>          break;<br>        }<br>    }<br>    return result;<br>  }<br>  int timeLimit(int _w, int _h, string save, vector &lt;string&gt; fire)<br>  {<br>    int i;<br>    sizeX=_w;<br>    sizeY=_h;<br>    n=fire.size();<br>    for (i=0;i&lt;n;i++)<br>      sscanf(fire[i].c_str(),"%d%d",&amp;X[i],&amp;Y[i]);<br>    __int64 Limit=0;<br>    for (i=0;i&lt;save.length();i++)<br>      Limit=Limit*10+(save[i]-'0');<br>    __int64 S=sizeX;<br>    S*=sizeY;<br>    int H=0,T=1000000001;<br>    for (;H+1&lt;T;)<br>    {<br>      int M=(H+T)/2;<br>      __int64 left=S-solve(M);<br>      if (left&gt;=Limit)<br>        H=M;<br>      else<br>        T=M;<br>    }<br>    return H;<br>    <br>  }<br>};<br></td>