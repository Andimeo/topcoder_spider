<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>import java.util.regex.*;<br>import java.text.*;<br>import java.math.*;<br>import java.awt.geom.*;<br> <br>public class SpiralConstruction<br>{<br>  int[] x;<br>  int[] y;<br>  <br>  int vMul(int ai, int aj, int bi, int bj) {<br>    return (x[aj] - x[ai]) * (y[bj] - y[bi]) - (x[bj] - x[bi]) * (y[aj] - y[ai]);<br>  }<br>  <br>  int sMul(int ai, int aj, int bi, int bj) {<br>    return (x[aj] - x[ai]) * (x[bj] - x[bi]) + (y[aj] - y[ai]) * (y[bj] - y[bi]);<br>  }<br>    <br>  public int longestSpiral(String[] points)<br>  {<br>    int n = points.length + 1;<br>    x = new int[n];<br>    y = new int[n];<br>    for (int i = 0; i &lt; n - 1; ++i) {<br>      String[] str = points[i].split(" ");<br>      x[i] = Integer.parseInt(str[0]);<br>      y[i] = Integer.parseInt(str[1]);<br>    }<br>    boolean[][] d = new boolean[1 &lt;&lt; n][n];<br>    d[1 &lt;&lt; (n - 1)][n - 1] = true;<br>    int ans = 1;<br>    for (int m = 0; m &lt; (1 &lt;&lt; n); ++m) {<br>      for (int i = 0; i &lt; n; ++i) {<br>        if (!d[m][i]) {<br>          continue;<br>        }<br>        int cur = 0;<br>        for (int t = 0; t &lt; n; ++t) {<br>          if ((m &amp; (1 &lt;&lt; t)) != 0) {<br>            ++cur;<br>          }<br>        }<br>        ans = Math.max(ans, cur);<br>        int min = -1;<br>        int max = -1;<br>        for (int j = 0; j &lt; n; ++j) {<br>          if ((m &amp; (1 &lt;&lt; j)) == 0 || i == j) {<br>            continue;<br>          }<br>          if (min == -1 || vMul(i, min, i, j) &lt; 0) {<br>            min = j;<br>          }<br>          if (max == -1 || vMul(i, max, i, j) &gt; 0) {<br>            max = j;<br>          }<br>        }<br>        for (int j = 0; j &lt; n; ++j) {<br>          if ((m &amp; (1 &lt;&lt; j)) != 0) {<br>            continue;<br>          }<br>          /*if (m == 9 &amp;&amp; i == 0 &amp;&amp; j == 1) {<br>            System.out.println(min + " " + max);<br>            System.out.println(vMul(i, j, i, min));<br>            System.out.println(sMul(i, j, i, min));<br>          }*/<br>          if ((min == -1 || vMul(i, j, i, min) &gt; 0 || vMul(i, j, i, min) == 0 &amp;&amp; sMul(i, j, i, min) &lt; 0) &amp;&amp; <br>            (max == -1 || vMul(i, j, i, max) &gt; 0 || vMul(i, j, i, max) == 0 &amp;&amp; sMul(i, j, i, max) &lt; 0)) {<br>            d[m | (1 &lt;&lt; j)][j] = true;<br>          }<br>        }<br>      }<br>    }<br>    return ans - 1;<br>  }<br>  <br>  <br>}<br>//Powered by [KawigiEdit] 2.0!<br></td>