<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;iostream&gt;<br>#include &lt;sstream&gt;<br>#include &lt;vector&gt;<br>#include &lt;map&gt;<br>#include &lt;math.h&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;numeric&gt;<br>#include &lt;bitset&gt;<br>#include &lt;stack&gt;<br>#include &lt;queue&gt;<br>#include &lt;set&gt;<br>using namespace std;<br>typedef vector&lt;int&gt; vi;<br>#define zmax(a, b) (((a) &lt; (b))?(b):(a))<br>#define zmin(a, b) (((a) &lt; (b))?(a):(b))<br>#define zabs(a) (((a) &lt; 0)?(-(a)):(a))<br>#define iif(c, t, f) ((c)?(t):(f))<br> <br>long long gcd(long long a, long long b)<br>{<br>  if(b &lt; a) swap(a, b);<br>  while(a)<br>  {<br>    long long c = a;<br>    a = b % a;<br>    b = c;<br>  }<br>  return b;<br>}<br> <br>long long lcm(long long a, long long b)<br>{<br>  return a / gcd(a, b) * b;<br>}<br> <br>vector&lt; string &gt; split(string s, string delim)<br>{<br>  int last = 0;<br>  vector&lt;string&gt; ret;<br>  for(int i = 0; i + delim.size() &lt;= s.size(); i++)<br>  {<br>    bool ok = true;<br>    for(int j = 0; j &lt; delim.size() &amp;&amp; ok; j++)<br>      ok = s[i + j] == delim[j];<br>    if(ok)<br>    {<br>      if(i - last) ret.push_back(s.substr(last, i - last));<br>      last = i + delim.size();<br>    }<br>  }<br>  if(last &lt; s.size()) ret.push_back(s.substr(last));<br>  return ret;<br>}<br> <br>#define PI 3.1415926535897932384626<br> <br>class Curvy<br>{<br>public:<br>  double distance(vector &lt;int&gt; length, vector &lt;int&gt; radius)<br>  {<br>    double x = 0.0;<br>    double y = 0.0;<br>    <br>    double angle = 0.0;<br>    for(int i = 0; i &lt; length.size(); i++)<br>    {<br>      double ln = length[i];<br>      double r = zabs(radius[i]);<br>      if(r == 0.0)<br>      {<br>        x += ln * cos(angle);<br>        y += ln * sin(angle);<br>      }<br>      else if(radius[i] &lt; 0.0)<br>      {<br>        double delta = ln / r;<br>        while(delta &gt; 2 * PI) delta -= 2 * PI;<br>        double cx = x + r * cos(angle + PI / 2.0);<br>        double cy = y + r * sin(angle + PI / 2.0);<br>        x = cx + r * cos(angle - PI / 2 + delta);<br>        y = cy + r * sin(angle - PI / 2 + delta);<br>        cout &lt;&lt; cx &lt;&lt; ", " &lt;&lt; cy &lt;&lt; ", " &lt;&lt; x &lt;&lt; ", " &lt;&lt; y &lt;&lt; ", " &lt;&lt; delta &lt;&lt; ", " &lt;&lt; cos(2 * PI) &lt;&lt; endl;<br>        angle += delta;<br>      }<br>      else<br>      {<br>        double delta = ln / r;<br>        while(delta &gt; 2 * PI) delta -= 2 * PI;<br>        double cx = x + r * cos(angle - PI / 2.0);<br>        double cy = y + r * sin(angle - PI / 2.0);<br>        x = cx + r * cos(angle + PI / 2 - delta);<br>        y = cy + r * sin(angle + PI / 2 - delta);<br>        angle -= delta;<br>      }<br>    }<br>    <br>    return sqrt(x * x + y * y);<br>  }<br>};<br> <br>//Powered by [KawigiEditNonTest] modified by pivanof!<br></td>