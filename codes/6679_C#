<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections.Generic;<br><br>public class DominoesLines {<br>  List&lt;string&gt; res;<br>  <br>  public string[] constructLines(string[] tiles) {<br>    int[,] nums = new int[7, 7];<br>    int total = 0;<br>    foreach (string s in tiles)<br>    {<br>      int[] p = Array.ConvertAll&lt;string, int&gt;(s.Split(':'), int.Parse);<br>      ++nums[p[0], p[1]];<br>      ++nums[p[1], p[0]];<br>      total += 1;<br>    }<br>    int num = getNum(nums, -1);<br>    res = new List&lt;string&gt;();<br>    string cur = "";<br>    int last = -1;<br>    while (total &gt; 0)<br>    {<br>      if (getNum(nums, -1) &lt; num)<br>      {<br>        res.Add(cur.Substring(0, cur.Length - 1));<br>        cur = "";<br>        last = -1;<br>        --num;<br>      }<br>      int amin = last &lt; 0 ? 0 : last;<br>      int amax = last &lt; 0 ? 6 : last;<br>      bool got = false;<br>      for (int a = amin; a &lt;= amax; ++a)<br>      {<br>        for (int b = 0; b &lt; 7; ++b)<br>          if (nums[a, b] &gt; 0)<br>          {<br>            --nums[a, b];<br>            --nums[b, a];<br>            if (getNum(nums, b) &lt;= num)<br>            {<br>              got = true;<br>              cur += a + ":" + b + "-";<br>              last = b;<br>              --total;<br>              break;<br>            }<br>            ++nums[a, b];<br>            ++nums[b, a];<br>          }<br>        if (got)<br>          break;<br>      }<br>      if (!got)<br>      {<br>        Console.WriteLine("!!!");<br>      }<br>    }<br>    if (cur != "")<br>      res.Add(cur.Substring(0, cur.Length - 1));<br>    return res.ToArray();<br>  }<br><br>  bool[] mark;<br>  int[,] nums;<br>  int mustBegin;<br>  int am;<br>  bool anyEdges;<br>  int mustDeg;<br>  <br>  int getNum(int[,] nums, int mustBegin)<br>  {<br>    mark = new bool[7];<br>    this.nums = nums;<br>    this.mustBegin = mustBegin;<br>    int res = 0;<br>    for (int i = 0; i &lt; 7; ++i)<br>      if (!mark[i])<br>      {<br>        am = 0;<br>        anyEdges = false;<br>        mustDeg = -1;<br>        dfs(i);<br>        if (!anyEdges &amp;&amp; mustDeg &lt; 0)<br>          continue;<br>        if (mustDeg &gt;= 0 &amp;&amp; mustDeg % 2 == 0)<br>          am += 2;<br>        if (am == 0)<br>          am += 2;<br>        res += am / 2;<br>      }<br>    return res;<br>  }<br><br>  void dfs(int start)<br>  {<br>    if (mark[start])<br>      return;<br><br>    mark[start] = true;<br><br>    int deg = 0;<br>    for (int i = 0; i &lt; 7; ++i)<br>      if (nums[start, i] &gt; 0)<br>      {<br>        anyEdges = true;<br>        dfs(i);<br>        deg += nums[start, i];<br>      }<br>    if (start == mustBegin)<br>      mustDeg = deg;<br>    if (deg % 2 &gt; 0)<br>      ++am;<br>  }<br><br><br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003] [modified for C# by Petr]<br>// Powered by CodeProcessor<br></td>