<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;vector&gt;<br>#include &lt;string&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;iostream&gt;<br>#include &lt;sstream&gt;<br>#include &lt;cmath&gt;<br><br>using namespace std;<br><br>class DominoesLines  { <br>public: <br><br>  int g[7][7];<br>  int d[7], col[7];<br><br>  int paths[10][100];<br>  int len[10];<br>  int tn, curp, curi;<br><br>  int dfs(int u) {<br>    if (col[u]) return 0; else col[u] = 1;<br>    int ret = 0, i;<br>    if (d[u] % 2 == 1) ret++;<br>    for (i = 0; i &lt; 7; i++) if (g[u][i]) ret += dfs(i);<br>    return ret;<br>  }<br><br>  int count() {<br>    int tot = 0, cur, i;<br>    for (i = 0; i &lt; 7; i++) col[i] = 0;<br>    for (i = 0; i &lt; 7; i++)<br>      if (col[i] == 0 &amp;&amp; d[i] &gt; 0) {<br>        cur = dfs(i) / 2;<br>        if (!cur) cur = 1;<br>        tot += cur;<br>      }<br>    return tot;<br>  }<br><br>  bool canStartWith(int u) {<br>    for (int i = 0; i &lt; 7; i++) col[i] = 0;<br>    return ((dfs(u) == 0 &amp;&amp; d[u] &gt; 0) || (d[u] % 2) == 1);<br>  }<br><br>  void euler(int u) {<br>    paths[curi][len[curi]++] = u;<br>    if (count() &lt; curp) return;<br><br>    for (int v = 0; v &lt; 7; v++) if (g[u][v]) {<br>      --g[u][v]; --g[v][u]; --d[v]; --d[u];<br>      int cnt = count();<br>      if (cnt &gt; curp || (cnt == curp &amp;&amp; !canStartWith(v))) {<br>        ++g[u][v]; ++g[v][u]; ++d[u]; ++d[v];<br>      } else {<br>        euler(v);<br>        return;<br>      }<br>    }<br>  }<br><br>  string getStr(int id) {<br>    stringstream tmp;<br>    for (int i = 0; i &lt; len[id] - 1; i++) {<br>      if (i) tmp &lt;&lt; "-";<br>      tmp &lt;&lt; paths[id][i] &lt;&lt; ":" &lt;&lt; paths[id][i + 1];<br>    }<br>    return tmp.str();<br>  }<br><br>  vector &lt;string&gt; constructLines(vector &lt;string&gt; tiles) { <br>    int i, j;<br>    for (i = 0; i &lt; 7; i++) {<br>      for (j = 0; j &lt; 7; j++)  g[i][j] = 0;<br>      d[i] = 0;<br>    }<br><br>    for (i = 0; i &lt; tiles.size(); i++) {<br>      int u = tiles[i][0] - '0';<br>      int v = tiles[i][2] - '0';<br><br>      ++g[u][v];<br>      ++g[v][u];<br>      ++d[u];<br>      ++d[v];<br>    }<br><br>    tn = count();<br>    for (i = 0; i &lt; tn; i++) {<br>      j = 0;<br>      while (!canStartWith(j)) ++j;<br><br>      curp = tn - i;<br>      curi = i;<br>      len[i] = 0;<br>      euler(j);<br>    }<br><br>    vector &lt;string&gt; ret;<br>    for (i = 0; i &lt; tn; i++) ret.push_back(getStr(i));<br>    return ret;<br>  } <br><br>    <br> <br>}; <br><br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.2 [15-Oct-2005 modified by Revenger]<br>// Powered by CodeProcessor<br></td>