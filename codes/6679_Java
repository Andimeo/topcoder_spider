<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br><br>public class DominoesLines {<br>  private int[][] go;<br>  private boolean[] mark;<br>  private int[] deg;<br>  <br>  private int calc(int start) {<br>    int total = (start &lt; 0) ? 0 : 1;<br>    <br>    for (int i = 0; i &lt; 7; i++) {<br>      if (i == start) {<br>        if (deg[i] % 2 == 0) {<br>          total++;<br>        }<br>      } else {<br>        if (deg[i] % 2 == 1) {<br>          total++;<br>        }<br>      }<br>    }<br>    <br>    total /= 2;<br>    <br>    Arrays.fill(mark, false);<br>    for (int i = 0; i &lt; 7; i++) {<br>      if (deg[i] % 2 == 1 || i == start) {<br>        if (!mark[i]) {<br>          dfsCalc(i);<br>        }<br>      }<br>    }<br>    <br>    for (int i = 0; i &lt; 7; i++) {<br>      if (!mark[i] &amp;&amp; deg[i] &gt; 0) {<br>        dfsCalc(i);<br>        total++;<br>      }<br>    }<br>    <br>    return total;<br>  }<br>  <br>    private void dfsCalc(int u) {<br>      mark[u] = true;<br>      for (int i = 0; i &lt; 7; i++) {<br>        if (go[u][i] &gt; 0 &amp;&amp; !mark[i]) {<br>          dfsCalc(i);<br>        }<br>      }<br>  }<br><br>  public String[] constructLines(String[] tiles){<br>      go = new int[7][7];<br>      deg = new int[7];<br>      for (int i = 0; i &lt; tiles.length; i++) {<br>        Scanner in = new Scanner(tiles[i]);<br>        in.useDelimiter("[\\s:]+");<br>        int x = in.nextInt();<br>        int y = in.nextInt();<br>        go[x][y]++;<br>        go[y][x]++;<br>        deg[x]++;<br>        deg[y]++;<br>      }<br>      <br>    mark = new boolean[7];<br>    int total = calc(-1);<br>    String[] result = new String[total];<br>LOOP:  for (int step = 0; step &lt; total; step++) {<br>      result[step] = "";<br>      boolean found = false;<br>      int prev = -1;<br>      for (int i = 0; i &lt; 7; i++) {<br>        if (found)<br>          break;<br>        <br>        for (int j = 0; j &lt; 7; j++) {<br>          if (go[i][j] == 0)<br>            continue;<br>          <br>          go[i][j]--;<br>          go[j][i]--;<br>          deg[i]--;<br>          deg[j]--;<br>          <br>          int cur = calc(j);<br>          if (cur + step &lt;= total) {<br>            result[step] = result[step] + i + ":" + j;<br>            found = true;<br>            prev = j;<br>            break;<br>          }<br>          <br>          go[i][j]++;<br>          go[j][i]++;<br>          deg[i]++;<br>          deg[j]++;<br>        }<br>      }<br>      <br>      if (calc(-1) + step == total - 1) {<br>        continue;<br>      }<br>      <br>      boolean done = false;<br>      while (!done) {<br>        for (int j = 0; j &lt; 7; j++) {<br>          if (go[prev][j] == 0) {<br>            continue;<br>          }<br>        <br>          go[prev][j]--;<br>          go[j][prev]--;<br>          deg[prev]--;<br>          deg[j]--;<br>          <br>          int cur = calc(j);<br>          if (cur + step == total) {<br>            result[step] = result[step] + "-" + prev + ":" + j;<br>            prev = j;<br>            <br>            if (calc(-1) + step == total - 1) {<br>              done = true;<br>            }<br>            break;<br>          }<br>          <br>          go[prev][j]++;<br>          go[j][prev]++;<br>          deg[prev]++;<br>          deg[j]++;<br>        }<br>      }<br>    }<br>    <br>      return result;<br>    }<br>}<br></td>