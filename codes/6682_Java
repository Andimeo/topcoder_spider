<td class="problemText" colspan="8" valign="middle" align="left">
            public class CheckersBoard {<br>  <br>  private String[] board;<br><br>  public int numMoves(String[] board) {<br>    <br>    this.board = board;<br>    <br>    int freeMovesA = 0;<br>    int freeMovesB = 0;<br>    <br>    int forcedMovesA = 0;<br>    int forcedMovesB = 0;<br>    <br>    for (int i = 0; i &lt; board.length; i++) {<br>      for (int j = 0; j &lt; board[i].length(); j++) {<br>        if (c(i, j) == 'W') {<br>          freeMovesA += check(i,j,i-1,j-1);<br>          freeMovesA += check(i,j,i-1,j+1);<br>          forcedMovesA += check(i,j,i-1,j-1,i-2,j-2,'B');<br>          forcedMovesA += check(i,j,i-1,j+1,i-2,j+2,'B');<br>        } else if (c(i,j) == 'B') {<br>          freeMovesB += check(i,j,i+1,j-1);<br>          freeMovesB += check(i,j,i+1,j+1);<br>          forcedMovesB += check(i,j,i+1,j-1,i+2,j-2,'W');<br>          forcedMovesB += check(i,j,i+1,j+1,i+2,j+2,'W');<br>        }<br>      }<br>    }<br>  <br>    return (forcedMovesA &gt; 0 ? forcedMovesA : freeMovesA) + (forcedMovesB &gt; 0 ? forcedMovesB : freeMovesB);<br>  }<br><br>  private int check(int i, int j, int k, int l, int m, int n, char c) {<br>    return k &gt;= 0 &amp;&amp; k &lt; board.length &amp;&amp;<br>      l &gt;= 0 &amp;&amp; l &lt; board[k].length() &amp;&amp;<br>      m &gt;= 0 &amp;&amp; m &lt; board.length &amp;&amp;<br>      n &gt;= 0 &amp;&amp; n &lt; board[k].length() &amp;&amp;<br>      c(k,l) == c &amp;&amp; c(m,n) == ' ' ? 1 : 0;<br>  }<br><br>  private int check(int i, int j, int k, int l) {<br>    return k &gt;= 0 &amp;&amp; k &lt; board.length &amp;&amp;<br>         l &gt;= 0 &amp;&amp; l &lt; board[k].length() &amp;&amp;<br>         c(k,l) == ' ' ? 1 : 0;<br>  }<br><br>  private char c(int i, int j) {<br>    return board[i].charAt(j);<br>  }<br>  <br>}<br></td>