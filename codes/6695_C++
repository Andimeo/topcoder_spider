<td class="problemText" colspan="8" valign="middle" align="left">
            #line 2 "SnowStorm.cc"<br>#include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;stdio.h&gt;<br>#include &lt;math.h&gt;<br>#include &lt;string.h&gt;<br>#include &lt;ctype.h&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;stdlib.h&gt;<br>using namespace std;<br> <br>int n;<br>int m[16][16];<br> <br>int t[16];<br>int con[1 &lt;&lt; 16];<br> <br>int c;<br> <br>int sub[1 &lt;&lt; 16];<br> <br>void buildsub(void)<br>{<br>    for (int b = 0; b &lt; (1 &lt;&lt; n); b++) {<br>  int mul = 1;<br>  for (int i = 0; i &lt; n; i++)<br>      for (int j = i+1; j &lt; n; j++)<br>    if ((b &amp; (1 &lt;&lt; i)) &amp;&amp; (b &amp; (1 &lt;&lt; j)) &amp;&amp; m[i][j])<br>        mul = (mul * 2) % 10000;<br>  sub[b] = mul;<br>    }<br>}<br> <br>void search(int d)<br>{<br>    if (d == n) {<br>  c++;<br> <br>  // compute contribution of con[1] * sub[2] to con[1,2] <br>  int b1 = 0;<br>  int b2 = 0;<br>  for (int i = 0; i &lt; n; i++) {<br>      if (t[i] == 1)<br>    b1 |= 1 &lt;&lt; i;<br>      if (t[i] == 2)<br>    b2 |= 1 &lt;&lt; i;<br>  }<br>  int mul = sub[b2];<br>  if (b1 == 0) {<br>      int mul2 = sub[1 + b2];<br>      con[b2] = (con[b2] + mul2) % 10000;<br>      //printf("con[%d] = %d\n", b2, con[b2]);<br>  }<br>  if (b2 != 0) {<br>      con[b1 | b2] -= con[b1] * mul;<br>      con[b1 | b2] %= 10000;<br>      if (con[b1 | b2] &lt; 0)<br>    con[b1 | b2] += 10000;<br>  }<br> <br>  //printf("con[%d] = %d (b1 = %d b2 = %d)\n", b1 | b2, con[b1 | b2], b1, b2);<br>  return;<br>    }<br> <br>    if (t[d] == 0)<br>  search(d+1);<br>    else {<br>  search(d+1);<br>  t[d] = 2;<br>  search(d+1);<br>  t[d] = 1;<br>    }<br>}<br> <br>void search2(int d)<br>{<br>    if (d == n)<br>  search(1);<br>    else {<br>  t[d] = 0;<br>  search2(d+1);<br>  t[d] = 1;<br>  search2(d+1);<br>    }<br>}<br> <br>class SnowStorm {<br>public:<br>    int countWays(vector &lt;string&gt; paths) {<br>  n = paths.size();<br>  for (int i = 0; i &lt; n; i++)<br>      for (int j = 0; j &lt; n; j++)<br>    m[i][j] = paths[i][j] == 'Y';<br>  buildsub();<br>  search2(1);<br>  printf("%d\n", c);<br>  return con[(1 &lt;&lt; n) - 2];<br>    }<br>};<br> <br> <br> <br>// Powered by FileEdit<br></td>