<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br><br>public class ContestSchedule {<br>  class Contest : IComparable&lt;Contest&gt;<br>  {<br>    long s;<br>    long t;<br>    int p;<br><br>    public Contest(long s, long t, int p)<br>    {<br>      this.s = s;<br>      this.t = t;<br>      this.p = p;<br>    }<br><br>    public int CompareTo(Contest other)<br>    {<br>      return s.CompareTo(other.s);<br>    }<br><br>    public long S<br>    {<br>      get { return s; }<br>    }<br><br>    public long T<br>    {<br>      get { return t; }<br>    }<br><br>    public int P<br>    {<br>      get { return p; }<br>    }<br>  }<br>  <br>  public double expectedWinnings(string[] contests) {<br>    int n = contests.Length;<br>    Contest[] c = new Contest[n];<br>    for (int i = 0; i &lt; n; ++i)<br>    {<br>      int[] p = Array.ConvertAll&lt;string, int&gt;(contests[i].Split(' '), int.Parse);<br>      c[i] = new Contest(p[0], p[1], p[2]);<br>    }<br>    Array.Sort(c);<br>    int[] best = new int[n + 1];<br>    int res = 0;<br>    for (int i = 0; i &lt; n; ++i)<br>    {<br>      int mx = 0;<br>      for (int j = 0; j &lt; i; ++j)<br>        if (c[j].T &lt;= c[i].S)<br>          mx = Math.Max(mx, best[j + 1]);<br>      best[i + 1] = c[i].P + mx;<br>      res = Math.Max(res, best[i + 1]);<br>    }<br>    return (double) res / 100.0;<br>  }<br><br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003] [modified for C# by Petr]<br>// Powered by CodeProcessor<br></td>