<td class="problemText" colspan="8" valign="middle" align="left">
            imports System<br>imports Microsoft.VisualBasic<br>imports System.Collections<br>imports System.Text<br> <br> <br>'imports System<br>'imports Microsoft.VisualBasic<br>'imports System.Collections<br>'imports System.Text<br> <br>Public Class ContestSchedule<br>    Dim times As New ArrayList<br> <br>    Dim n As Integer<br>    Dim ts() As Integer<br>    Dim te() As Integer<br>    Dim prob() As Double<br> <br>    Dim memo(200) As Double<br> <br>    Public Function expectedWinnings(ByVal contests() As String) As Double<br>        Dim i As Integer<br>        For i = 0 To 200<br>            memo(i) = -1<br>        Next<br> <br>        n = contests.Length<br>        ReDim ts(n - 1)<br>        ReDim te(n - 1)<br>        ReDim prob(n - 1)<br> <br>        times.Add(0)<br> <br>        Dim sp() As String, st As Integer, et As Integer<br>        For i = 0 To n - 1<br>            sp = Split(contests(i), " ")<br> <br>            st = Val(sp(0))<br>            et = Val(sp(1))<br> <br>            If times.IndexOf(st) = -1 Then times.Add(st)<br>            If times.IndexOf(et) = -1 Then times.Add(et)<br>        Next<br>        times.Sort()<br> <br>        For i = 0 To n - 1<br>            sp = Split(contests(i), " ")<br> <br>            st = Val(sp(0))<br>            et = Val(sp(1))<br> <br>            ts(i) = times.IndexOf(st)<br>            te(i) = times.IndexOf(et)<br> <br>            prob(i) = CDbl(Val(sp(2))) / 100<br>        Next<br> <br>        Return GetBest(0)<br>    End Function<br> <br>    Private Function GetBest(ByVal start As Integer) As Double<br>        If memo(start) &lt;&gt; -1 Then Return memo(start)<br> <br>        Dim v, best As Double<br> <br>        Dim i As Integer, c As Integer, tc As Integer<br>        For i = 0 To n - 1<br>            If ts(i) = start Then<br>                c += 1<br>                v = prob(i) + GetBest(te(i))<br>                If v &gt; best Then best = v<br>            ElseIf ts(i) &gt; start Then<br>                tc += 1<br>            End If<br>        Next<br> <br>        If tc &gt; 0 Then<br>            v = GetBest(start + 1)<br>            If v &gt; best Then best = v<br>        End If<br> <br>        memo(start) = best<br>        Return best<br>    End Function<br> <br>End Class<br></td>