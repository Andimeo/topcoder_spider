<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>public class IncompleteBST {<br>    class Node {<br>        char value;<br>        Node left = null;<br>        Node right = null;<br>        char leftRestrict;<br>        char rightRestrict;<br>        int no;<br>    }<br>    class Tree {<br>        Node root = new Node();<br>        Vector&lt;Node&gt; nodes = new Vector&lt;Node&gt;();<br>        Tree() {<br>            nodes.add(root);<br>        }<br>        boolean addNode(int no, char value) {<br>            if (no == 1) {<br>                root.value = value;<br>                root.no = 1;<br>                root.leftRestrict = 'A';<br>                root.rightRestrict = 'Z';<br>                return true;<br>            }<br>            else {<br>                int parentno = no &gt;&gt; 1;<br>                boolean isLeft = (no % 2) == 0;<br>                for (Node node : nodes) {<br>                    if (node.no == parentno) {<br>                        Node newNode = new Node();<br>                        nodes.add(newNode);<br>                        newNode.value = value;<br>                        newNode.no = no;<br>                        if (isLeft) {<br>                            node.left = newNode;<br>                            if ((value != '?') &amp;&amp; (((node.value != '?') &amp;&amp; (value &gt; node.value)) || (value &lt; node.leftRestrict))) throw new RuntimeException("The node " + no + " is not valid");<br>                            newNode.leftRestrict = node.leftRestrict;<br>                            newNode.rightRestrict = (node.value != '?') ? node.value : node.rightRestrict;<br>                        }<br>                        else {<br>                            node.right = newNode;<br>                            if ((value != '?') &amp;&amp; (((node.value != '?') &amp;&amp; (value &lt;= node.value)) || (value &gt; node.rightRestrict))) throw new RuntimeException("The node " + no + " is not valid");<br>                            newNode.rightRestrict = node.rightRestrict;<br>                            newNode.leftRestrict = (node.value != '?') ? (char)(node.value + 1): node.leftRestrict;<br>                        }<br>                        return true;<br>                    }<br>                }<br>            }<br>            return false;<br>        }<br>  char getMaxOf(Node node) {<br>    return (node.right == null) ? node.value : getMaxOf(node.right);<br>  }<br>  char getMinOf(Node node) {<br>    return (node.left == null) ? node.value : getMinOf(node.left);<br>  }<br>        char getLeftMax(Node node) {<br>            if (node.left == null) return node.leftRestrict;<br>            else return getMaxOf(node.left);<br>        }<br><br>        char getRightMin(Node node) {<br>            if (node.right == null) return node.rightRestrict;<br>            else return (char)(getMinOf(node.right) - 1);<br>        }<br>    }<br>    <br>    public String missingValues(String[] tree) {<br>        Vector&lt;String&gt; v = new Vector&lt;String&gt;();<br>        Tree mytree = new Tree();<br>        for (int i = 0; i &lt; tree.length; i++) {<br>            v.add(tree[i]);<br>        }<br>        while (v.size() &gt; 0) {<br>            int oldSize = v.size();<br>            for (int i = v.size() - 1; i &gt; -1; i--) {<br>                char value = v.get(i).charAt(0);<br>                int no = Integer.parseInt(v.get(i).substring(2));<br>                try {<br>                    if (mytree.addNode(no, value)) {<br>                        v.remove(i);<br>                    }<br>                }<br>                catch (RuntimeException e) {<br>//                    System.out.println(e);<br>                    return "";<br>                }<br>            }<br>            if (oldSize == v.size()) {<br>//                System.out.println("Tree is not connected!");<br>                return "";<br>            }<br>        }<br>        for (Node node : mytree.nodes) {<br>            if (node.value == '?') {<br>                char c1 = mytree.getLeftMax(node);<br>                char c2 = mytree.getRightMin(node);<br>                String res = "";<br>                for (char i = c1; i &lt;= c2 ; i++) {<br>                     res += i;<br>                }<br>                return res;<br>            }<br>        }<br>        return "";<br>    }<br>}<br></td>