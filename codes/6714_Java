<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br> <br>public class ConstructBST {<br>    public long numInputs(int[] tree) {<br>        Arrays.sort(tree);<br>        HashMap&lt;Integer, Integer&gt; nodes = new HashMap&lt;Integer, Integer&gt;();<br>        int n = tree.length;<br>        int[] p = new int[n];<br>        int[] l = new int[n];<br>        int[] r = new int[n];<br>        p[0] = -1;<br>        nodes.put(1, 0);<br>        for (int i = 1; i &lt; tree.length; i++) {<br>            nodes.put(tree[i], i);<br>            p[i] = nodes.get(tree[i] / 2);<br>            if (tree[i] % 2 == 0) {<br>                l[p[i]] = i;<br>            } else {<br>                r[p[i]] = i;<br>            }<br>        }<br> <br>        long[][] c = new long[n + 1][n + 1];<br>        c[0][0] = 1;<br>        for (int i = 1; i &lt;= n; i++) {<br>            c[i][0] = 1;<br>            for (int j = 1; j &lt;= n; j++) {<br>                c[i][j] = c[i - 1][j] + c[i - 1][j - 1];<br>            }<br>        }<br>        long[] ans = new long[n];<br>        int[] sl = new int[n];<br>        int[] sr = new int[n];<br>        int[] s = new int[n];<br>        ans[0] = 1;<br>        for (int i = n - 1; i &gt;= 0; i--) {<br>            sl[i] = s[l[i]];<br>            sr[i] = s[r[i]];<br>            s[i] = sl[i] + sr[i] + 1;<br> <br>            ans[i] = c[s[i] - 1][sl[i]] * ans[l[i]] * ans[r[i]];<br>        }<br> <br>        return ans[0];<br>    }<br> <br>}<br> <br> <br>// Powered by PopsEdit<br> <br>// Powered by CodeProcessor<br></td>