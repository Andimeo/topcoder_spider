<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br><br>public class BusSeating {<br>  public double getArrangement(string leftRow, string rightRow) {<br>    int n = leftRow.Length;<br>    bool[,] free = new bool[2, n];<br>    for (int i = 0; i &lt; n; ++i)<br>    {<br>      free[0, i] = leftRow[i] == '-';<br>      free[1, i] = rightRow[i] == '-';<br>    }<br>    <br>    double res = double.MaxValue;<br>    <br>    for (int p1 = 0; p1 &lt; 2 * n; ++p1)<br>    {<br>      int x1 = p1 / n;<br>      int y1 = p1 % n;<br>      if (free[x1, y1])<br>        for (int p2 = p1 + 1; p2 &lt; 2 * n; ++p2)<br>        {<br>          int x2 = p2 / n;<br>          int y2 = p2 % n;<br>          if (free[x2, y2])<br>            for (int p3 = p2 + 1; p3 &lt; 2 * n; ++p3)<br>            {<br>              int x3 = p3 / n;<br>              int y3 = p3 % n;<br>              if (free[x3, y3])<br>                res = Math.Min(res, hypot(x1 - x2, y1 - y2) + hypot(x1 - x3, y1 - y3) + hypot(x2 - x3, y2 - y3));<br>            }<br>        }<br>    }<br><br>    return res;<br>  }<br><br>  private double hypot(int dx, int dy)<br>  {<br>    return Math.Sqrt(2.0 * dx * 2.0 * dx + dy * 1.0 * dy);<br>  }<br><br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003] [modified for C# by Petr]<br>// Powered by CodeProcessor<br></td>