<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections.Generic;<br><br>public class WordGuessingGame {<br>  string[] all;<br>  int n;<br>  int len;<br>  List&lt;string&gt; res;<br>  bool[,] can;<br>  <br>  public string[] possibleWords(string[] even, string[] odd) {<br>    all = new string[even.Length + odd.Length];<br>    int need = 0;<br>    int k = 0;<br>    foreach (string s in even)<br>    {<br>      all[k++] = s;<br>      need = (need &lt;&lt; 1) + 0;<br>    }<br>    foreach (string s in odd)<br>    {<br>      all[k++] = s;<br>      need = (need &lt;&lt; 1) + 1;<br>    }<br>    n = all.Length;<br>    len = all[0].Length;<br>    can = new bool[len + 1, 1 &lt;&lt; n];<br>    can[0, 0] = true;<br>    for (int l = 1; l &lt;= len; ++l)<br>    {<br>      for (char ch = 'A'; ch &lt;= 'Z'; ++ch)<br>      {<br>        int mask = 0;<br>        foreach (string s in all)<br>        {<br>          mask &lt;&lt;= 1;<br>          if (s[l - 1] == ch)<br>            ++mask;<br>        }<br>        for (int i = 0; i &lt; (1 &lt;&lt; n); ++i)<br>          if (can[l - 1, i])<br>            can[l, i ^ mask] = true;<br>      }<br>    }<br>    res = new List&lt;string&gt;();<br>    if (can[len, need])<br>      trackback(len, need, "");<br>    res.Sort();<br>    return res.ToArray();<br>  }<br><br>  private void trackback(int l, int se, string suffix)<br>  {<br>    if (l == 0)<br>      res.Add(suffix);<br>    else<br>    {<br>      for (char ch = 'A'; ch &lt;= 'Z'; ++ch)<br>      {<br>        int mask = 0;<br>        foreach (string s in all)<br>        {<br>          mask &lt;&lt;= 1;<br>          if (s[l - 1] == ch)<br>            ++mask;<br>        }<br>        if (can[l - 1, se ^ mask])<br>          trackback(l - 1, se ^ mask, ch + suffix);<br>      }<br>    }<br>  }<br><br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003] [modified for C# by Petr]<br>// Powered by CodeProcessor<br></td>