<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>public class WordGuessingGame {<br>  int L;<br>  int[][] mask;<br>  int reqMask;<br>  <br>  boolean[][] can;<br>  boolean[][] used;<br>  <br>  List&lt;String&gt; res = new ArrayList&lt;String&gt;();<br>  <br>  char[] s;<br>  <br>  public void findCan(int pos, int msk) {<br>    if (used[pos][msk]) return;<br>    used[pos][msk] = true;<br>    if (pos == L) {<br>      can[pos][msk] = (msk == reqMask ? true : false);<br>      return;<br>    }<br>    can[pos][msk] = false;<br>    for (char c = 'A'; c &lt;= 'Z'; c++) {<br>      findCan(pos+1, msk ^ mask[pos][c - 'A']);<br>      if (can[pos+1][msk ^ mask[pos][c - 'A']])<br>        can[pos][msk] = true;<br>    }<br>  }<br>  <br>  public void findRes(int pos, int msk) {<br>    if (!can[pos][msk]) return;<br>    if (pos == L) {<br>      String next = "";<br>      for (int i=0; i &lt; L; i++)<br>        next += s[i];<br>      res.add(next);<br>      return;<br>    }<br>    for (char c = 'A'; c &lt;= 'Z'; c++) {<br>      s[pos] = c;<br>      findRes(pos+1, msk ^ mask[pos][c - 'A']);      <br>    }<br>  }<br>  <br>    public String[] possibleWords(String[] even, String[] odd) {<br>      int cnt = even.length + odd.length;<br>      String[] words = new String[cnt];<br>      int cur=0;<br>      for (int i=0; i &lt; even.length; i++)<br>        words[cur++] = even[i];<br>      for (int i=0; i &lt; odd.length; i++)<br>        words[cur++] = odd[i];<br>      L = (even.length &gt; 0 ? even[0].length() : odd[0].length());<br>      mask = new int[L][26];<br>      for (int i=0; i &lt; L; i++) Arrays.fill(mask[i], 0);<br>      for (int i=0; i &lt; L; i++)<br>        for (int j=0; j &lt; cnt; j++)<br>          mask[i][words[j].charAt(i) - 'A'] ^= (1 &lt;&lt; j);<br>      reqMask = 0;<br>      for (int i=0; i &lt; cnt; i++)<br>        if (i &gt;= even.length)<br>          reqMask ^= (1 &lt;&lt; i);<br>      can = new boolean[L+1][1 &lt;&lt; cnt];<br>      used = new boolean[L+1][1 &lt;&lt; cnt];<br>      for (int i=0; i &lt;= L; i++) {<br>        Arrays.fill(can[i], false);<br>        Arrays.fill(used[i], false);<br>      }<br>      findCan(0, 0);<br>      s = new char[L];<br>      findRes(0, 0);<br>      String[] ret = new String[res.size()];<br>      for (int i=0; i &lt; res.size(); i++)<br>        ret[i] = res.get(i);<br>      return ret;<br>    }<br><br>}<br><br><br><br>// Powered by FileEdit<br>// Powered by CodeProcessor<br></td>