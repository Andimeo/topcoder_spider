<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;iostream&gt;<br>#include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;functional&gt;<br>#include &lt;numeric&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cmath&gt;<br>#include &lt;queue&gt;<br> <br>using namespace std;<br> <br>class TournamentSchedule<br>{<br>public:<br>int used[10][10];<br>int a[10][10][2];<br>int d[10][10];<br>int n,ans;<br>vector&lt;pair&lt;int,int&gt; &gt; vp[10];<br><br>void search(int x,int y)<br>{<br>  int i,j;<br>  int b1;<br>  if (x==n-1)<br>  {<br>    ans++;<br>    return;<br>  }<br>  if (y==n/2)<br>  {<br>    for (i=0;i&lt;vp[x].size();i++)<br>    {<br>      b1=0;<br>      for (j=0;j&lt;y;j++)<br>        if (((vp[x][i].first==a[x][j][0])&amp;&amp;(vp[x][i].second==a[x][j][1]))||((vp[x][i].first==a[x][j][1])&amp;&amp;(vp[x][i].second==a[x][j][0])))<br>        {<br>          b1=1;break;<br>        }<br>      if (b1==0) return;<br>    }<br>    search(x+1,0);<br>    return;<br>  }<br>  for (i=0;i&lt;n;i++)<br>    if (used[x][i]==0) break;<br>  for (j=i+1;j&lt;n;j++)<br>    if ((used[x][j]==0)&amp;&amp;(d[i][j]==0))<br>    {<br>      a[x][y][0]=i;<br>      a[x][y][1]=j;<br>      used[x][i]=1;<br>      used[x][j]=1;<br>      d[i][j]=1;<br>      d[j][i]=1;<br>      search(x,y+1);<br>      d[i][j]=0;<br>      d[j][i]=0;<br>      used[x][i]=0;<br>      used[x][j]=0;<br>    }<br>}<br><br>int ways(int numTeams, vector &lt;string&gt; p)<br>{<br>  int i,j,pp,x;<br>  string s,s1;<br>  pair&lt;int,int&gt; pa;<br>  n=numTeams;<br>  memset(used,0,sizeof(used));<br>  for (i=0;i&lt;n;i++)<br>    vp[i].clear();<br>  for (i=0;i&lt;p.size();i++)<br>  {<br>    s=p[i];<br>    pp=s.find_first_of(':');<br>    s1=s.substr(0,pp);<br>    s.erase(0,pp+1);<br>    x=atoi(s1.c_str());<br>    pp=s.find_first_of('-');<br>    s1=s.substr(0,pp);<br>    s.erase(0,pp+1);<br>    pa.first=atoi(s1.c_str());<br>    pa.second=atoi(s.c_str());<br>    vp[x].push_back(pa);<br>  }<br>  ans=0;<br>  memset(d,0,sizeof(d));<br>  memset(used,0,sizeof(used));<br>  search(0,0);<br>  return ans;<br>}<br>};<br></td>