<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections;<br>using System.Collections.Generic;<br>using System.Collections.Specialized;<br>using System.Text;<br>using System.Text.RegularExpressions;<br> <br>public class QueenCovering{<br>    bool[,] board;<br>    <br>    public T[,] rotateMatrixClockwise&lt;T&gt;(T[,] matrix) {<br>        int h=matrix.GetLength(0), w=matrix.GetLength(1);<br>        T[,] tmp=new T[w,h];<br>        for(int i=0;i&lt;h;i++) for(int j=0;j&lt;w;j++) tmp[j,i]=matrix[h-i-1,j];<br>        return tmp;<br>    }<br>    <br>    Dictionary&lt;long, bool&gt; visited;<br>    <br>    long getHash(ref bool[,] used) {<br>        long hash=0;<br>        for(int i = 0; i &lt; 8; i++) for(int j=0;j&lt;8;j++)<br>            hash=hash*2 + (used[j,i] ? 1 : 0);<br>        <br>        return hash;<br>    }<br>    <br>  public string getPlacement(string[] sboard)  {<br>      Array.Reverse(sboard);<br>      <br>    board =new bool[8,8];<br>      visited = new Dictionary&lt;long,bool&gt;();<br>      <br>      for(int i=0;i&lt;8;i++)for(int j=0;j&lt;8;j++)<br>          board[i,j]=sboard[i][j]=='#';<br>      <br>      board = rotateMatrixClockwise(board);<br>      <br>      List&lt;string&gt; queens=findFirst((bool[,])board.Clone(), new List&lt;string&gt;());<br>      return TransformAns(queens);<br>  }<br>    <br>    string TransformAns(List&lt;string&gt; queens) {<br>        StringBuilder sb = new StringBuilder();<br>        if(queens == null) return "";<br>        foreach(string s in queens){<br>            sb.Append(s);<br>        }<br>        return sb.ToString();<br>    }<br>    <br>    int[] dx = {1,0,-1,0,   1,-1,-1,1};<br>    int[] dy = {0,1,0,-1,   1,-1,1,-1};<br>    <br>    bool[,] temp = new bool[8,8];<br>    <br>    public List&lt;string&gt; findFirst(bool[,] used, List&lt;string&gt; queens) {<br>        // row i, column j.<br>        <br>        Queue&lt; List&lt;string&gt; &gt; qqueue = new Queue&lt;List&lt;string&gt;&gt;();<br>        Queue&lt; bool[,] &gt; uqueue = new Queue&lt;bool[,]&gt;();<br>        <br>        /*<br>        foreach(string s in queens){<br>            Console.Out.Write(s);<br>        }<br>        Console.Out.WriteLine();<br>        */<br>        qqueue.Enqueue(new List&lt;string&gt;());<br>        uqueue.Enqueue((bool[,])used.Clone());<br>        while(qqueue.Count  &gt; 0){<br>            used=uqueue.Dequeue();<br>            queens=qqueue.Dequeue();<br>            <br>            bool good=true;<br>            for(int i = 0; good &amp;&amp; i &lt; 8; i++){<br>                for(int j = 0; good &amp;&amp; j &lt; 8; j++){<br>                    if(!used[i,j]){<br>                        good=false;<br>                        break;<br>                    }<br>                }<br>            }<br>            if(good){<br>                return queens;<br>            }<br>            <br>            for(int i = 0; i &lt; 8; i++){<br>                for(int j=0; j &lt; 8; j++){<br>                    if(used[j,i]) continue;<br>                <br>                    for(int p = 0; p &lt; 8; p++){<br>                        for(int q = 0; q &lt; 8; q++){<br>                            temp[p,q]=used[p,q];<br>                        }<br>                    }<br>                <br>                    for(int k = 0; k &lt; 8; k++){<br>                        int ci=i;<br>                        int cj=j;<br>                    <br>                        while(true)<br>                        {<br>                            ci+=dx[k]; <br>                            cj+=dy[k];<br>                            if(ci &gt;= 0 &amp;&amp; ci &lt; 8 &amp;&amp; cj &gt;= 0 &amp;&amp; cj &lt; 8){<br>                                temp[cj,ci]=true;<br>                            }else break;<br>                        }<br>                    }<br>                    temp[j,i]=true;<br>                <br>                    long hash=getHash(ref temp);<br>                    if(visited.ContainsKey(hash)){<br>                        continue;<br>                    }else{<br>                        visited.Add(hash,true);<br>                    }<br>                <br>                    List&lt;string&gt; nqueens=new List&lt;string&gt;();<br>                    foreach(string s in queens){<br>                        nqueens.Add(s);<br>                    }<br>                    nqueens.Add(((char)((1+i) + '0')) + "" + ((char)('A' + j)));<br>                    qqueue.Enqueue(nqueens);<br>                    uqueue.Enqueue((bool[,])temp.Clone());<br>                }<br>            }<br>        }<br>        return null;<br>    }<br> <br> <br>}<br>//Powered by [KawigiEdit] 2.0!<br></td>