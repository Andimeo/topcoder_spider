<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br><br>public class InscribedTriangles {<br>    private int n;<br>    private double[] fr;<br>    private double[] to;<br>    private double res;<br>    private static final double EPS = 1e-15;<br><br>    public double findLargest(int[] angleFrom, int[] angleTo) {<br>        n = angleFrom.length;<br>        fr = new double[n];<br>        to = new double[n];<br>        for (int i = 0; i &lt; n; i++) {<br>            fr[i] = angleFrom[i] * Math.PI / 180000;<br>            to[i] = angleTo[i] * Math.PI / 180000;<br>        }<br><br>        res = 0;<br><br>        double[] q = new double[2 * n];<br>        System.arraycopy(fr, 0, q, 0, n);<br>        System.arraycopy(to, 0, q, n, n);<br>        for (int i = 0; i &lt; 2 * n; i++) {<br>            for (int j = 0; j &lt; 2 * n; j++) {<br>                for (int k = 0; k &lt; 2 * n; k++) {<br>                    check(q[i], q[j], q[k]);<br>                }<br>            }<br>        }<br>        for (int i = 0; i &lt; 2 * n; i++) {<br>            double a = q[i];<br>            double b = q[i] + Math.PI * 2 / 3;<br>            double c = q[i] + Math.PI * 4 / 3 ;<br>            check(a, b, c);<br>        }<br>        for (int i = 0; i &lt; 2 * n; i++) {<br>            for (int j = 0; j &lt; 2 * n; j++) {<br>                double a = q[i];<br>                double b = q[j];<br>                double c = (q[i] + q[j]) / 2;<br>                check(a, b, c);<br>                c = c + Math.PI;<br>                check(a, b, c);<br>            }<br>         }<br>         return res * 25;<br>    }<br><br>    private void check(double a, double b, double c) {<br>        if (isValid(a) &amp;&amp; isValid(b) &amp;&amp; isValid(c)) {<br>            double s = Math.abs(getS(a - b) + getS(b - c) + getS(c - a));<br>            if (s &gt; res) res = s;<br>        }<br>    }<br><br>    private double getS(double a) {<br>        return Math.sin(a) / 2;<br>    }<br><br>    private boolean isValid(double a) {<br>        while (a &gt; Math.PI * 2 - EPS) {<br>            a -= Math.PI * 2;<br>        }<br>        while (a &lt; -EPS) {<br>            a += Math.PI * 2;<br>        }<br>        for (int i = 0; i &lt; n; i++) {<br>            if (a &gt;= fr[i] - EPS &amp;&amp; a &lt;= to[i] + EPS) return true;<br>        }<br>        if (a &lt; EPS) {<br>            a = Math.PI * 2;<br>            for (int i = 0; i &lt; n; i++) {<br>                if (a &gt;= fr[i] - EPS &amp;&amp; a &lt;= to[i] + EPS) return true;<br>            }<br>        }<br>        return false;<br>    }<br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by RETester [based on ExampleBuilder]<br>// Powered by CodeProcessor<br></td>