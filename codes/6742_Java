<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>import java.util.regex.*;<br>import java.text.*;<br>import java.math.*;<br>import java.awt.geom.*;<br> <br>public class KnapsackProblem<br>{<br>  public int numberOfWays(int[] x, int C)<br>  {    <br>    int size=x.length;<br>    if(size==1)<br>    {<br>      if(C&lt;x[0]) return 1;<br>      return 2;<br>    }<br>    Arrays.sort(x);<br>    int mid = size/2;<br>    long[] values = new long[(int)Math.pow(2,mid)];<br>    for(int n=0; n&lt;Math.pow(2,mid); n++)<br>      for(int i=0; i&lt;mid; i++)<br>        if((n&amp;(1&lt;&lt;i))&gt;0)values[n]+=x[i];<br>    Arrays.sort(values);<br>    <br>    long[] values2 = new long[(int)Math.pow(2,size-mid)];<br>    for(int n=0; n&lt;Math.pow(2,size-mid); n++)<br>      for(int i=0; i&lt;size-mid; i++)<br>        if((n&amp;(1&lt;&lt;i))&gt;0)values2[n]+=x[i+mid];<br>    Arrays.sort(values2);<br>    int ans = 0;<br>    for(int n=0; n&lt;values2.length; n++)<br>    {<br>      if(C&lt;values2[n]) return ans;<br>      long search = C-values2[n];<br>      int g;<br>      int midd;<br>      int low=0;<br>      int high = values.length-1;<br>      while(low&lt;high)<br>      {<br>        midd=(low+high)/2;<br>        if(search==values[midd]) {break;}<br>        if(search&gt;values[midd]) low=midd+1;<br>        if(search&lt;values[midd]) high=midd-1;<br>      }<br>      g=(low+high)/2;<br>      if(g&gt;0&amp;&amp;values[g]&gt;search) g--;<br>      while(g+1&lt;values.length&amp;&amp;values[g+1]==search) g++;<br>      ans+=g+1;<br>    }<br>    return ans;<br>  }<br>}<br></td>