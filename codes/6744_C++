<td class="problemText" colspan="8" valign="middle" align="left">
            // Cry as challenge phase is passing by<br><br>#include &lt;algorithm&gt;<br>#include &lt;functional&gt;<br><br>#include &lt;cmath&gt;<br>#include &lt;cctype&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cstring&gt;<br><br>#include &lt;vector&gt;<br>#include &lt;string&gt;<br>#include &lt;sstream&gt;<br>#include &lt;iostream&gt;<br><br>using namespace std;<br><br>#define FORC(it,v) for( __typeof((v).begin()) it = (v).begin(); it != (v).end(); ++it )<br><br>int dp[ 100 ][ 2 ][ 4 ][ 2 ];<br><br>int rec( int len, int last, int cnt, int poc )<br>{<br>    if( poc &amp;&amp; cnt == 3 ) return 1 &lt;&lt; len;<br>    if( len == 0 ) return 0;<br><br>    int &amp;ref = dp[len][last][cnt][poc];<br><br>    if( ref != -1 ) return ref;<br><br>    ref = 0;<br><br>    for( int c = 0; c &lt; 2; ++c ) {<br>        if( c == 1 ) poc = 1;<br><br>        if( c == last )<br>            ref += rec( len-1, last, min( cnt+1, 3 ), poc );<br>        else<br>            ref += rec( len-1, c, 1, poc );<br>    }<br><br>    return ref;<br>}<br><br>int solve( int x )<br>{<br>    if( x &lt;= 0 ) return 0;<br><br>    vector&lt; int &gt; V;<br><br>    for( ; x; x &gt;&gt;= 1 ) V.push_back( x &amp; 1 );<br>    reverse( V.begin(), V.end() );<br><br>    int len = V.size();<br>    int last = 0;<br>    int cnt = 0;<br>    int poc = 0;<br><br>    int ok = false;<br>    int sum = 0;<br><br>    for( int i = 0; i &lt; len; ++i ) {<br>        if( V[i] == 0 ) { <br>            if( last == 0 ) cnt = min( cnt + 1, 3 );<br>            else cnt = 1;<br>            last = 0;<br><br>            if( poc &amp;&amp; cnt == 3 ) ok = true;<br>        }<br><br>        else {<br>            int nc = 1;<br>            if( last == 0 ) nc = min( 3, cnt + 1 );<br><br>            if( !ok ) sum += rec( len-i-1, 0, nc, poc );<br>            else sum += 1&lt;&lt;(len-i-1);<br><br>            poc = true;<br>            if( last == 1 ) cnt = min( cnt+1, 3 ); else cnt = 1;<br>            last = 1;<br><br>            if( poc &amp;&amp; cnt == 3 ) ok = true;<br>        }<br>    }<br><br>    return sum + ok;<br>}<br><br>class CoolNumbers {<br>public:<br>    int count( int lowerBound, int upperBound ) {<br>        memset( dp, -1, sizeof dp );<br>        return solve( upperBound ) - solve( lowerBound - 1 );<br>    }<br>};<br><br><br><br><br><br><br><br><br><br>// Powered by FileEdit<br>// Powered by moj 3.0 beta 11 [modified TZTester]<br>// Powered by CodeProcessor<br></td>