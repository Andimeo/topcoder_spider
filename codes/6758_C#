<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections.Generic;<br><br>public class MergingGraph {<br>  bool[,] e;<br>  int n;<br>  bool[] mark;<br>  int[] comp;<br>  int minr;<br>  int maxr;<br>  <br>  public int distanceToCycle(string[] adj) {<br>    n = adj.Length;<br>    e = new bool[n, n];<br>    for (int i = 0; i &lt; n; ++i)<br>    {<br>      if (adj[i] == "")<br>        continue;<br>      int[] z = Array.ConvertAll&lt;string, int&gt;(adj[i].Split(' '), int.Parse);<br>      foreach (int j in z)<br>      {<br>        e[i, j] = true;<br>      }<br>    }<br>    for (int len = n; len &gt;= 1; --len)<br>    {<br>      mark = new bool[n];<br>      comp = new int[n];<br>      List&lt;int&gt; all = new List&lt;int&gt;();<br>      for (int i = 0; i &lt; n; ++i)<br>        if (!mark[i])<br>        {<br>          int z = checkSetup(len, i);<br>          if (z &lt; 0)<br>          {<br>            all = null;<br>            break;<br>          }<br>          all.Add(z);<br>        }<br>      if (all == null)<br>        continue;<br>      int s = 1;<br>      foreach (int x in all)<br>        s += (x - 1);<br>      if (s &gt;= len + 1)<br>        return n - len;<br>    }<br>    return n;<br>  }<br><br>  private int checkSetup(int len, int start)<br>  {<br>    minr = 0;<br>    maxr = 0;<br>    <br>    if (!dfs(start, 0, 0, len))<br>      return -1;<br><br>    return Math.Min(len + 1, maxr - minr + 1);<br>  }<br><br>  private bool dfs(int start, int label, int rlabel, int len)<br>  {<br>    if (rlabel &lt; minr)<br>      minr = rlabel;<br>    if (rlabel &gt; maxr)<br>      maxr = rlabel;<br>    <br>    if (mark[start])<br>    {<br>      if (comp[start] != label)<br>        return false;<br>      return true;<br>    }<br><br>    mark[start] = true;<br>    comp[start] = label;<br>    for (int i = 0; i &lt; n; ++i)<br>    {<br>      if (e[start, i])<br>        if (!dfs(i, (label + 1) % len, rlabel + 1, len))<br>          return false;<br>      if (e[i, start])<br>        if (!dfs(i, (label + len - 1) % len, rlabel - 1, len))<br>          return false;<br>    }<br>    return true;<br>  }<br><br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003] [modified for C# by Petr]<br>// Powered by CodeProcessor<br></td>