<td class="problemText" colspan="8" valign="middle" align="left">
            #include&lt;vector&gt;<br>#include&lt;list&gt;<br>#include&lt;map&gt;<br>#include&lt;set&gt;<br>#include&lt;stack&gt;<br>#include&lt;algorithm&gt;<br>#include&lt;numeric&gt;<br>#include&lt;sstream&gt;<br>#include&lt;iostream&gt;<br>#include&lt;cstdio&gt;<br>#include&lt;cmath&gt;<br>#include&lt;cstdlib&gt;<br> <br>using namespace std;<br> <br>typedef long long int64;<br>typedef vector&lt;int&gt; vi;<br>#define FOR(i,n) for (int i=0; i&lt;(n); i++)<br> <br>struct MergingGraph {<br>  bool e[60][60],b[60],b2[60];<br>  int N,nr[60];<br>  void dfs(int x,int len,int cur=0) {<br>    if (b[x]) return;<br>    b[x]=true;<br>    nr[x]=cur;<br>    FOR(y,N) if (e[x][y]) { b2[cur]=true; dfs(y,len,(cur+1)%len); }<br>    FOR(y,N) if (e[y][x]) { b2[(cur+len-1)%len]=true; dfs(y,len,(cur+len-1)%len); }<br>  }<br>  int distanceToCycle(vector &lt;string&gt; adj) {<br>    memset(e,0,sizeof(e));<br>    N=adj.size();<br>    FOR(i,N) {<br>      istringstream tmp(adj[i]);<br>      int j; while (tmp&gt;&gt;j) e[i][j]=true;<br>    }<br>    for (int len=N; len&gt;=1; len--) {<br>      bool ok=true;<br>      memset(b,0,sizeof(b));<br>      int sum=0;<br>      FOR(start,N) if (!b[start]) {<br>        memset(b2,0,sizeof(b2));<br>        dfs(start,len);<br>        FOR(i,N) sum+=b2[i];<br>      }<br>      ok&amp;=sum&gt;=len;<br>      FOR(i,N) FOR(j,N) ok&amp;=!e[i][j] || nr[j]==(nr[i]+1)%len;<br>      if (ok) return N-len;<br>    }<br>    return N;<br>  }<br>};<br> <br>//Powered by [KawigiEdit] 2.0!<br></td>