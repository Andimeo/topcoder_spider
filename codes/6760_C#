<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections;<br>using System.Collections.Generic;<br>using System.Collections.Specialized;<br>using System.Text;<br>using System.Text.RegularExpressions;<br> <br>public class MatrixPainting{<br>    bool[,] matrix;<br>    bool[] rows;<br>    bool[] cols;<br>    <br>    Dictionary&lt;int, int&gt; memo;<br>    <br>    int minNum;<br>    <br>    int getHash() {<br>        int hash=0;<br>        <br>        for(int i=0;i&lt;9;i++){<br>            hash=(hash*2)+(rows[i]?1:0);<br>        }<br>        <br>        for(int i=0;i&lt;9;i++){<br>            hash=(hash*2)+(cols[i]?1:0);<br>        }<br>        return hash;<br>    }<br>    <br>  public int countRepaints(string[] _matrix)  {<br>    minNum=int.MaxValue;<br>      <br>      matrix = new bool[9,9];<br>      memo = new Dictionary&lt;int,int&gt;();<br>      rows = new bool[9];<br>      cols = new bool[9];<br>      <br>      for(int i = 0; i &lt; 9; i++){<br>          for(int j = 0; j &lt; 9; j++){<br>              matrix[i,j]=_matrix[i][j]=='1';<br>          }<br>      }<br>      <br>      return (DFS(0)==int.MaxValue?-1:DFS(0)); <br>  }<br>    <br>    public int DFS(int num) {<br>        int hash=getHash();<br>        if(memo.ContainsKey(hash)){<br>            return memo[hash];<br>        }<br>        <br>        if(num &gt;= minNum){<br>            return minNum;<br>        }<br>/*<br>        Console.Out.Write("rows = ");<br>        for(int i=0;i&lt;9;i++){<br>            Console.Out.Write(rows[i] ? "X" : "_" );<br>        }<br>        Console.Out.WriteLine("\ncols = ");<br>        for(int i=0;i&lt;9;i++){<br>            Console.Out.Write(cols[i] ? "X" : "_" );<br>        }<br>        Console.Out.WriteLine("\n");<br> * */<br>        <br>        // check<br>        <br>        bool good=true;<br>        for(int i=0;good &amp;&amp; i&lt;9;i++){<br>            if(!rows[i]){<br>                for(int j=0;j&lt;9;j++) {<br>                    if(!matrix[i,j]){<br>                        good=false;<br>                        break;<br>                    }<br>                }<br>            }<br>        }<br>        <br>        if(good){<br>            memo.Add(hash,num);<br>            minNum=Math.Min(num,minNum);<br>            return num;<br>        }<br>        <br>        bool[] remember = new bool[9];<br>        <br>        int min=int.MaxValue;<br>        <br>        for(int k = 0;k &lt; 2;k++){<br>            for(int i=0;i&lt;9;i++) {<br>                if(k == 0){<br>                    if(rows[i]) continue;<br>                    int count=0;<br>                    for(int j=0;j&lt;9;j++) if(matrix[i,j]) count++;<br>                    <br>                    if(count &lt; 5) continue;<br>                    <br>                    for(int j = 0; j &lt; 9; j++) remember[j]=matrix[i,j];<br>                    for(int j = 0; j &lt; 9; j++) matrix[i,j]=true;<br>                    rows[i]=true;<br>                    min=Math.Min(min,DFS(num+1));<br>                    rows[i]=false;<br>                    <br>                    for(int j = 0; j &lt; 9; j++) matrix[i,j]=remember[j];<br>                    <br>                } else{<br>                    if(cols[i]) continue;<br>                    <br>                    int count=0;<br>                    for(int j=0;j&lt;9;j++) if(matrix[j,i]) count++;<br>                    if(count &lt; 5) continue;<br>                    <br>                    for(int j = 0; j &lt; 9; j++) remember[j]=matrix[j,i];<br>                    for(int j = 0; j &lt; 9; j++) matrix[j,i]=true;<br>                    cols[i]=true;<br>                    min=Math.Min(min,DFS(num+1));<br>                    cols[i]=false;<br>                    for(int j = 0; j &lt; 9; j++) matrix[j,i]=remember[j];<br>                }<br>            }<br>        }<br>        <br>        memo.Add(hash,min);<br>        return min;<br>    }<br> <br> <br>}<br>//Powered by [KawigiEdit] 2.0!<br></td>