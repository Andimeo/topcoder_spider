<td class="problemText" colspan="8" valign="middle" align="left">
            /*<br>*/<br>import java.util.*;<br>public class DominoesFalling {<br><br>    public int rearrangeTiles(String[] cells) {<br><br>      int n=1;<br>      for (String s : cells)  n += s.length();<br>      n=2501;<br>      boolean[] full = new boolean[n];<br>      int pos=1;<br>      int dom = 0;<br>      for (String s : cells)  <br>        for (char c : s.toCharArray()) {<br>          boolean r = (c=='X');<br>          full[pos++] = r;<br>          if (r) dom++;<br>        }<br>      <br>       int[][] maxOverlap = new int[n+2550][dom+1];<br>       <br>       for (int i=0; i&lt;n+2550; i++)<br>         maxOverlap[i][1] = (i&lt;n &amp;&amp; full[i])?1:0;<br>       <br>       for (int i=1; i&lt;n+2550; i++)<br>         for (int j=2; j&lt;=dom; j++) {<br>           if (i&lt;n &amp;&amp; full[i]) {<br>             for (int d=2; d&lt;6; d++)<br>               if (i&gt;=d)<br>                 maxOverlap[i][j] = Math.max(maxOverlap[i][j], 1+maxOverlap[i-d][j-1]);<br>           }<br>           else {<br>             for (int d=2; d&lt;6; d++)<br>               if (i&gt;=d)<br>                 maxOverlap[i][j] = Math.max(maxOverlap[i][j], maxOverlap[i-d][j-1]);<br>           }<br>         }<br>       <br>       int mo = 0;<br>       for (int i=0; i&lt;n+2550; i++)<br>         for (int j=0; j&lt;=dom; j++)<br>           mo = Math.max(mo, maxOverlap[i][j]);<br>      <br>        return dom-mo;<br>    }<br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by CodeProcessor<br></td>