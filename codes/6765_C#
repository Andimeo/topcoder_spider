<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br><br>public class ModularInequality {<br>  const long INF = 1000000000000;<br>  <br>  public int countSolutions(int[] A, int P) {<br>    long[] a = Array.ConvertAll&lt;int, long&gt;(A, delegate(int x) {<br>                                                  return x; });<br>    long p = P;<br>    Array.Sort(a);<br>    long res = 0;<br>    for (int i = 0; i &lt;= a.Length; ++i)<br>    {<br>      long left;<br>      long right;<br>      if (i &gt; 0)<br>        left = a[i - 1];<br>      else<br>        left = -INF;<br>      if (i &lt; a.Length)<br>        right = a[i] - 1;<br>      else<br>        right = INF;<br>      if (left &gt; right)<br>        continue;<br><br>      long k = 0;<br>      long b = 0;<br>      for (int j = 0; j &lt; a.Length; ++j)<br>      {<br>        if (j &lt; i)<br>        {<br>          ++k;<br>          b -= a[j];<br>        }<br>        else<br>        {<br>          --k;<br>          b += a[j];<br>        }<br>      }<br>      if (k == 0)<br>      {<br>        if (b &lt;= p)<br>          res += (right - left + 1);<br>      }<br>      else<br>      {<br>        if (k &gt; 0)<br>        {<br>          long mx = Math.Min(right, divide(p - b, k));<br>          if (mx &gt;= left)<br>            res += (mx - left + 1);<br>        }<br>        else<br>        {<br>          long mx = Math.Max(left, -divide(p - b, -k));<br>          if (right &gt;= mx)<br>            res += (right - mx + 1);<br>        }<br>      }<br>    }<br>    return (int) res;<br>  }<br><br>  private long divide(long l, long k)<br>  {<br>    if (l &gt;= 0)<br>      return l / k;<br>    else if (l % k == 0)<br>      return l / k;<br>    else<br>      return l / k - 1;<br>  }<br><br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003] [modified for C# by Petr]<br>// Powered by CodeProcessor<br></td>