<td class="problemText" colspan="8" valign="middle" align="left">
            // my submission accuracy is quite low recently, don't be afraid to challenge me<br><br>#include &lt;algorithm&gt;<br>#include &lt;vector&gt;<br>using namespace std;<br><br>typedef long long ll;<br>typedef vector&lt;int&gt; vi;<br><br>#define LS &lt;<br>#define Size(x) (int(x.size()))<br>#define LET(k,val) typeof(val) k = (val)<br>// execute "act", and return "val" as an expression result<br>#define CLC(act,val) (*({act; static typeof(val) CLCR; CLCR = (val); &amp;CLCR;}))<br><br>// All macros with parameters "k,a,b" run the "k" variable in range [a,b)<br>#define FOR(k,a,b) for(typeof(a) k=(a); k LS (b); ++k)<br><br>// find the first k in [a,b) that satisfies cond, or b if none<br>// using binary search<br>#define BINFIRST(k,a,b,cond)          \<br>  CLC(                                \<br>    LET(k##mIn, a); LET(k##mAx, b);   \<br>    while(k##mIn != k##mAx) {         \<br>      LET(k, (k##mIn&gt;&gt;1)+(k##mAx&gt;&gt;1)+ \<br>      (((k##mIn&amp;1)+(k##mAx&amp;1))&gt;&gt;1)    \<br>      ); \<br>      if(cond) k##mAx = k;            \<br>      else k##mIn = k+1;              \<br>      },                              \<br>    k##mIn                            \<br>    )                                 <br><br>#line 3 "ModularInequality.cc"<br><br>int gP;<br><br>vi gA;<br><br>int min, max;<br><br>bool good(int v) {<br>  ll sum = 0;<br>  FOR(s,0,Size(gA)) sum += v &gt; gA[s] ? v-gA[s] : gA[s]-v;<br>  return sum &lt;= gP;<br>  }<br><br>class ModularInequality {<br>  public:<br>  int countSolutions(vector &lt;int&gt; A, int P) {<br>    // !FDI<br>    sort(A.begin(), A.end());<br>    gA = A; gP = P;<br>    int val = A[Size(A)/2];<br>    if(!good(val)) return 0;<br>    return<br>      BINFIRST(v, val, A[Size(A)-1]+P+10, !good(v))<br>    - BINFIRST(v, A[0]-P-10, val, good(v));<br>    }<br>  };<br><br><br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003]<br>// Powered by CodeProcessor<br></td>