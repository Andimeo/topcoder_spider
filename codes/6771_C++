<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;iostream&gt;<br>#include &lt;string&gt;<br>#include &lt;cmath&gt;<br>using namespace std;<br><br>typedef unsigned long long ull;<br><br>class LexStringWriter {<br>private:<br>    int cache[26][50];<br>    int alphacount[26];<br>    int alphafirst[26], alphalast[26];<br>    int N;<br>public:<br>    int solve(int alpha, int cursor) {<br>        if(alpha == 26) return 0;<br>        if(cache[alpha][cursor] != -1) return cache[alpha][cursor];<br>        int first = alphafirst[alpha];<br>        int last = alphalast[alpha];<br>        if(first == string::npos) {<br>            return solve(alpha + 1, cursor);<br>        }<br>        int minima = min(<br>            solve(alpha + 1, last) + abs(cursor - first) + abs(first - last) + alphacount[alpha],<br>            solve(alpha + 1, first) + abs(cursor - last) + abs(first - last) + alphacount[alpha]);<br>        cache[alpha][cursor] = minima;<br>        return minima;<br>    }<br>    int minMoves(string s) {<br>        N = s.size();<br>        for(int x = 0; x &lt; 26; x++) { <br>            alphacount[x] = 0;<br>            for(int y = 0; y &lt; N; y++) cache[x][y] = -1;<br>        }<br>        for(int y = 0; y &lt; N; y++) {<br>            s[y] -= 'a';<br>            alphacount[(int)s[y]]++;<br>        }<br>        for(int x = 0; x &lt; 26; x++) { <br>            alphafirst[x] = s.find_first_of(x);<br>            alphalast[x] = s.find_last_of(x);<br>        }<br>        return solve(0, 0);<br>    }<br>};<br></td>