<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br><br>public class LexStringWriter<br>{<br>  public int minMoves(String s)<br>  {<br>    int res = 0;<br>    char[] c = s.toCharArray();<br>    int leng = c.length;<br>    int[][] a = new int[27][2];<br>    int[][] pos = new int[27][2];<br>    a[0][0] = 0;<br>    a[0][1] = 0;<br>    pos[0][0] = 0;<br>    pos[0][1] = 0;<br>    for (int i = 1; i &lt; 27; i++)<br>    {<br>      int l = leng;<br>      int r = -1;<br>      for (int j = 0; j &lt; leng; j++)<br>        if (c[j] == ('a' + i - 1))<br>        {<br>          l = Math.min(l, j);<br>          r = Math.max(r, j);<br>        }<br>      if (r == -1)<br>      {<br>        a[i] = a[i - 1];<br>        pos[i] = pos[i - 1];<br>      } else<br>      {<br>        pos[i][0] = l;<br>        pos[i][1] = r;<br>        a[i][0] = Math.min(a[i - 1][0] + Math.abs(pos[i - 1][0] - r) + Math.abs(l - r), a[i - 1][1] + Math.abs(pos[i - 1][1] - r)<br>            + Math.abs(l - r));<br>        a[i][1] = Math.min(a[i - 1][0] + Math.abs(pos[i - 1][0] - l) + Math.abs(l - r), a[i - 1][1] + Math.abs(pos[i - 1][1] - l)<br>            + Math.abs(l - r));<br>      }<br>    }<br>    return Math.min(a[26][0], a[26][1]) + leng;<br>  }<br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by RETester [based on ExampleBuilder]<br>// Powered by CodeProcessor<br></td>