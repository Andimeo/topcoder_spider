<td class="problemText" colspan="8" valign="middle" align="left">
            // my submission accuracy is quite low recently, don't be afraid to challenge me<br><br>#include &lt;algorithm&gt;<br>#include &lt;string&gt;<br>using namespace std;<br><br>typedef long long ll;<br><br>#define LS &lt;<br><br>// All macros with parameters "k,a,b" run the "k" variable in range [a,b)<br>#define FOR(k,a,b) for(typeof(a) k=(a); k LS (b); ++k)<br><br>// Greatest Common Divisor<br>ll gcd(ll x, ll y) {return x ? gcd(y%x,x) : y;}<br><br>#line 3 "BComputation.cc"<br><br>int bin[100][100];<br><br>#define O(P,v) operator P (fll x, fll y) {return v;}<br>#define F(P,d) fll&amp; operator P##= (fll&amp;x, fll y) {d; return x;} fll O(P, x P##= y)<br>#define D(P) bool O(P, (x-y).l P 0)<br><br>struct fll {<br>  ll l; ll m;<br>  void red() {ll a = gcd(l,m); if(a&lt;0) a=-a; if(m&lt;0) a=-a; l/=a; m/=a;}<br>  void unr(ll a) {l*=a; m*=a;}<br>  fll(ll x = 0, ll y = 1) {l=x; m=y; red();}<br>  };<br><br>F(+, ll a = gcd(x.m, y.m); ll b=x.m; x.unr(y.m/a); y.unr(b/a); x.l += y.l; x.red())<br>F(-, y.l = -y.l; x+=y)<br>F(*, x.l *= y.l; x.m *= y.m; x.red())<br>F(/, x.l *= y.m; x.m *= y.l; x.red())<br><br>D(&lt;) D(&lt;=) D(&gt;) D(&gt;=) D(==) D(!=)<br><br>class BComputation {<br>  public:<br>  string getValue(int B0, int pos) {<br>    // !FDI<br>    FOR(k,0,100) bin[0][k] = 0;<br>    bin[0][0] = 1;<br>    FOR(n,1,100) {<br>      FOR(k,1,100) {<br>        bin[n][k] = bin[n-1][k-1] + bin[n-1][k];<br>        }<br>      bin[n][0] = 1;<br>      }<br>    fll Bs[200];<br>    Bs[0] = B0;<br>    FOR(k,1,pos+1) {<br>      fll res;<br>      FOR(m,0,k)<br>        res += Bs[m] * bin[k+1][m];<br>      res.l *= -1;<br>      Bs[k] = res / bin[k+1][k];<br>      }<br>    char buf[64];<br>    sprintf(buf, "%lld/%lld", Bs[pos].l, Bs[pos].m);<br>//  sprintf(buf, "%d/%d", int(Bs[pos].l), int(Bs[pos].m));<br>    return buf;<br>    }<br>  };<br><br><br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003]<br>// Powered by CodeProcessor<br></td>