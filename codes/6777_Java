<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>import java.math.*;<br>import java.io.*;<br>import java.text.*;<br>import java.util.regex.*;<br>import static java.util.Arrays.*;<br>import static java.lang.Math.*;<br>import static java.lang.Integer.parseInt;<br>class Frac{<br>  BigInteger u, d;<br> <br>  public Frac(long up, long down){<br>    u = new BigInteger(Long.toString(up));<br>    d = new BigInteger(Long.toString(down));<br>    reduce();<br>  }<br>  public Frac(BigInteger up, BigInteger down){<br>    u = up;<br>    d = down;<br>    reduce();<br>  }<br>  Frac add(Frac f){<br>    BigInteger gcd = d.gcd(f.d);<br>    BigInteger adjMe = f.d.divide(gcd);<br>    BigInteger adjIt = d.divide(gcd);<br>    BigInteger under = adjMe.multiply(d);<br>    return new Frac(adjMe.multiply(u).add(adjIt.multiply(f.u)), under);<br>  }<br>  Frac multiply(Frac f){<br>    return new Frac(u.multiply(f.u), d.multiply(f.d));<br>  }<br>  Frac divide(Frac f){<br>    return new Frac(u.multiply(f.d), d.multiply(f.u));<br>  }<br>  Frac negate(){<br>    return new Frac(u.negate(), d);<br>  }<br>  public String toString(){<br>    return u+"/"+d;<br>  }<br>  private void reduce(){<br>    if(d.compareTo(BigInteger.ZERO) &lt; 0){<br>      d = d.negate();<br>      u = u.negate();<br>    }<br>    BigInteger gcd = u.gcd(d);<br>    if(!gcd.equals(BigInteger.ONE)){<br>      u = u.divide(gcd);<br>      d = d.divide(gcd);<br>    }<br>  }<br> <br>}<br>public class BComputation {<br>  public String getValue(int B0, int pos) {<br>    Frac[] Bs = new Frac[pos+1];<br>    Bs[0] = new Frac(B0, 1);<br>    for(int i = 1; i &lt;= pos; i++){<br>      Frac pre = new Frac(0,1);<br>      for(int j = 0; j &lt; i; j++){<br>        pre = pre.add(new Frac(nCr(i+1,j),1).multiply(Bs[j]));<br>      }<br>      Frac now = new Frac(nCr(i+1,i),1);<br>      Bs[i] = pre.negate().divide(now);<br>    }<br>    return Bs[pos].toString();<br>  }<br>  <br>  long nCr(int a, int b){<br>    long ret = fac(a);<br>    ret /= fac(b)*fac(a-b);<br>    return ret;<br>  }<br>  long fac(int a){<br>    long ret = 1;<br>    for(int i = 2; i &lt;= a; i++) ret *= i;<br>    return ret;<br>  }<br> <br>}<br> <br>// Powered by PopsEdit<br>// Powered by CodeProcessor<br></td>