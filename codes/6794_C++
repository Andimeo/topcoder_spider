<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;vector&gt;<br>#include &lt;list&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;deque&gt;<br>#include &lt;stack&gt;<br>#include &lt;bitset&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;functional&gt;<br>#include &lt;numeric&gt;<br>#include &lt;utility&gt;<br>#include &lt;sstream&gt;<br>#include &lt;iostream&gt;<br>#include &lt;iomanip&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;ctime&gt;<br> <br>using namespace std;<br> <br>#define FOR(i,a,b) for(int i=(a);i&lt;(b);++i)<br>#define REP(i,n) FOR(i,0,n)<br>#define ALL(a) (a).begin(),a.end()<br>#define SORT(a) sort(ALL(a))<br>#define SZ(a) ((int) a.size())<br>#define pb push_back<br> <br>class PostOffice {<br>public:<br>  int matchAddress(string, string);<br>};<br> <br>int PostOffice::matchAddress(string s1, string s2) {<br>  while (s1.find(' ')!=string::npos) {<br>    s1.erase(s1.find(' '),1);    <br>  }<br>  while (s2.find(' ')!=string::npos) {<br>    s2.erase(s2.find(' '),1);    <br>  }<br>  s1+="$";<br>  s2+="$";<br>  REP(i, SZ(s1)) {<br>    if (tolower(s1[i])!=tolower(s2[i])) return i;<br>  }<br>  return -1;<br>}<br> <br> <br>//Powered by [KawigiEdit] 2.0!<br></td>