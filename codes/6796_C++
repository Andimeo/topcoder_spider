<td class="problemText" colspan="8" valign="middle" align="left">
            // Cry as challenge phase is passing by<br><br>#include &lt;algorithm&gt;<br>#include &lt;functional&gt;<br><br>#include &lt;cmath&gt;<br>#include &lt;cctype&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cstring&gt;<br><br>#include &lt;vector&gt;<br>#include &lt;string&gt;<br>#include &lt;sstream&gt;<br>#include &lt;iostream&gt;<br><br>using namespace std;<br><br>#define FORC(it,v) for( __typeof((v).begin()) it = (v).begin(); it != (v).end(); ++it )<br><br>string S;<br>int len;<br><br>int ml;<br>int dp[ 1024 ][ 1024 ];<br><br>int suma[ 1024 ];<br><br>int SS( int l, int r )<br>{<br>    r &lt;?= len - 1;<br>    if( l ) return suma[r] - suma[l-1];<br><br>    return suma[r];<br>}<br><br>int solve( int x, int k )<br>{<br>    if( k == 0 ) return 0;<br>    if( x &gt;= len ) return 0;<br>    if( dp[x][k] != -1 ) return dp[x][k];<br><br>    return dp[x][k] = max( SS( x, x+ml-1 ) + solve( x+ml, k-1 ), solve( x+1, k ) );<br>}<br><br>class ElectiveSystem {<br>public:<br>    int maximalGoodness( vector &lt;string&gt; values, int D, int K ) {<br>        S = ""; FORC( it, values ) S += *it;<br>        len = ( int )S.size();<br><br>        for( int i = 0; i &lt; len; ++i )<br>            suma[i] = S[i] - 'a' + 1;<br><br>        for( int i = 1; i &lt; len; ++i )<br>            suma[i] += suma[i-1];<br><br>        ml = D;<br>        memset( dp, -1, sizeof dp );<br><br>        return solve( 0, K );<br>    }<br>};<br><br><br><br><br><br><br><br><br><br>// Powered by FileEdit<br>// Powered by moj 3.0 beta 11 [modified TZTester]<br>// Powered by CodeProcessor<br></td>