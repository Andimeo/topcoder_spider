<td class="problemText" colspan="8" valign="middle" align="left">
            public class ElectiveSystem<br>{<br>  int ML, MN;<br>  int[] v;<br>  int[][] mem;<br>  <br>  int dfs (int p, int n)<br>  {<br>    if (p == v.length || n == 0)<br>      return 0;<br>    <br>    if (mem[p][n] != -1)<br>      return mem[p][n];<br>    <br>    int out = dfs(p+1, n);<br>    <br>    int tv = 0;<br>    int i;<br>    for (i = p; i &lt; p + ML &amp;&amp; i &lt; v.length; i++)<br>      tv += v[i];<br>    out = Math.max(out, tv + dfs(i, n-1));<br>    return mem[p][n] = out;<br>  }<br>  <br>  public int maximalGoodness (String[] in, int inML, int inMN)<br>  {<br>    ML = inML;<br>    MN = inMN;<br>    <br>    String t = "";<br>    for (int i = 0; i &lt; in.length; i++)<br>      t += in[i];<br>    <br>    v = new int [t.length()];<br>    for (int i = 0; i &lt; v.length; i++)<br>      v[i] = t.charAt(i) - 'a' + 1;<br>    <br>    mem = new int [v.length+1][MN+1];<br>    for (int i = 0; i &lt; mem.length; i++)<br>      for (int j = 0; j &lt; mem[i].length; j++)<br>        mem[i][j] = -1;<br>    <br>    return dfs(0, MN);<br>  }<br>}<br></td>