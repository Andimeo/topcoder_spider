<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Text;<br>using System.Text.RegularExpressions;<br>using System.Collections;<br><br>public class BattleshipChecker {<br>    public string checkBoard(string[] board) {<br>        return Valid(board) ? GetAccepted(board) : "REJECTED";<br>    }<br><br>    private bool Valid(string[] board)<br>    {<br>        //between 1 and 4 cells arranged in a straight line<br>        return Between14(board) &amp;&amp; NotTouching(board);<br>    }<br><br>    private bool NotTouching(string[] board)<br>    {<br>        for (int i = 0; i &lt; board.Length; i++)<br>        {<br>            for (int j = 0; j &lt; board[i].Length; j++)<br>            {<br>                if (board[i][j] == 'X')<br>                {<br>                    if (IsX(i + 1, j + 1, board) || IsX(i + 1, j - 1, board))<br>                        return false;<br>                }<br>            }<br>        }<br>        return true;<br>    }<br><br>    private bool IsX(int x, int y, string[] board)<br>    {<br>        if (0 &lt;= x &amp;&amp; x &lt; board.Length &amp;&amp; 0 &lt;= y &amp;&amp; y &lt; board[0].Length)<br>        {<br>            return (board[x][y] == 'X');<br>        }<br>        return false;<br>    }<br><br>    private bool Between14(string[] board)<br>    {<br>        bool[][] b = new bool[board.Length][];<br>        for (int i = 0; i &lt; b.Length; i++)<br>        {<br>            b[i] = new bool[board[0].Length];            <br>        }<br><br>        int[] ships = new int[5];<br>        for (int i = 0; i &lt; board.Length; i++)<br>        {<br>            int length = 0;<br>            for (int j = 0; j &lt; board[i].Length; j++)<br>            {<br>                if (board[i][j] == 'X' &amp;&amp; b[i][j]==false)<br>                {<br>                    length = GetLength(i,j, board, b);<br>                    if (length &gt; 4)<br>                        return false;<br>                    ships[length]++;<br>                }<br>            }<br>        }<br><br>        return ships[1] == 4 &amp;&amp; ships[2] == 3 &amp;&amp; ships[3] == 2 &amp;&amp; ships[4] == 1;<br>    }<br><br>    private int GetLength(int x, int y, string[] board, bool[][] b)<br>    {<br>        if (!(0 &lt;= x &amp;&amp; x &lt; board.Length &amp;&amp; 0 &lt;= y &amp;&amp; y &lt; board[0].Length))<br>            return 0;<br>        if (board[x][y] != 'X' || b[x][y])<br>            return 0;<br>        b[x][y] = true;<br>        return 1 + GetLength(x + 1, y, board, b) + GetLength(x, y + 1, board, b) + GetLength(x - 1, y, board, b) + GetLength(x, y - 1, board, b);<br>    }<br><br>    private string GetAccepted(string[] board)<br>    {<br>        int n = 0;<br>        for (int i = 0; i &lt; board.Length; i++)<br>        {<br>            bool isOk = true;<br>            for (int j = 0; j &lt; board[i].Length; j++)<br>            {<br>                if (board[i][j] == 'X')<br>                {<br>                    isOk = false;<br>                    break;<br>                }<br>            }<br>            if (isOk)<br>                n++;<br>        }<br><br>        for (int i = 0; i &lt; board[0].Length; i++)<br>        {<br>            bool isOk = true;<br>            for (int j = 0; j &lt; board.Length; j++)<br>            {<br>                if (board[j][i] == 'X')<br>                {<br>                    isOk = false;<br>                    break;<br>                }<br>            }<br>            if (isOk)<br>                n++;<br>        }<br>        return string.Format("ACCEPTED, {0} POINTS", n);<br>    }<br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by CodeProcessor<br></td>