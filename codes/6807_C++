<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;algorithm&gt;<br>#include &lt;cctype&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdarg&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cstring&gt;<br>#include &lt;functional&gt;<br>#include &lt;iostream&gt;<br>#include &lt;iomanip&gt;<br>#include &lt;limits&gt;<br>#include &lt;list&gt;<br>#include &lt;map&gt;<br>#include &lt;numeric&gt;<br>#include &lt;queue&gt;<br>#include &lt;set&gt;<br>#include &lt;sstream&gt;<br>#include &lt;stack&gt;<br>#include &lt;string&gt;<br>#include &lt;utility&gt;<br>#include &lt;vector&gt;<br><br>using namespace std;<br><br>#define FORI(p, x) for(int i = p; i &lt; (int)(x); ++i)<br>#define S size()<br><br>#define ALL(C) (C).begin(), (C).end()<br><br>struct TournamentPlan{<br>  int getTravelDistance(vector &lt;int&gt; street, vector &lt;int&gt; avenue);<br><br>};<br><br>int TournamentPlan :: getTravelDistance ( vector &lt;int&gt; street, vector &lt;int&gt; avenue ){<br>    sort(ALL(street));<br>    sort(ALL(avenue));<br>    int res = 0;<br>    int n = street.S;<br>    FORI (0, n) res += abs(street[n / 2] - street[i]);<br>    FORI (0, n) res += abs(avenue[n / 2] - avenue[i]);<br>    return res;<br>}<br>// Powered by Krzysan's Cleaner 1.4-6<br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003]<br>// Powered by CodeProcessor<br></td>