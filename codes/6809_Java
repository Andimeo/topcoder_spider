<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>import java.util.regex.*;<br>import java.text.*;<br>import java.math.*;<br>import java.awt.geom.*;<br> <br>public class RubeGoldberg<br>{<br>  int index(String s)<br>  {<br>    if (s.equals("CHEMICAL")) return 0;<br>    if (s.equals("ELECTRIC")) return 1;<br>    if (s.equals("MECHANICAL")) return 2;<br>    if (s.equals("THERMAL")) return 3;<br>    return -1;<br>  }<br>  public int howClose(String[] parts, String last, int target)<br>  {<br>    int[] input=new int[parts.length];<br>    int[] output=new int[parts.length];<br>    int[] time=new int[parts.length];<br>    for (int i=0;i&lt;parts.length;++i)<br>    {<br>      String str=parts[i];<br>      int p1=str.indexOf(" ");<br>      int p2=str.indexOf(" ",p1+1);<br>      output[i]=index(str.substring(0,p1));<br>      input[i]=index(str.substring(p1+1,p2));<br>      time[i]=Integer.parseInt(str.substring(p2+1));<br>    }<br>    int srcPoint=index(last);<br>    boolean f[][]=new boolean[500001][4];<br>    f[0][srcPoint]=true;<br>    for (int i=0;i&lt;=500000;++i)<br>      for (int k=0;k&lt;parts.length;++k)<br>        if (f[i][input[k]] &amp;&amp; i+time[k]&lt;=500000)<br>          f[i+time[k]][output[k]]=true;<br>    int min=target;<br>    for (int i=0;i&lt;=500000;++i)<br>      for (int k=0;k&lt;4;++k)<br>        if (f[i][k] &amp;&amp; Math.abs(i-target)&lt;min)<br>          min=Math.abs(i-target);<br>    return min;<br>  }<br>}<br> <br>//Powered by [KawigiEdit]<br></td>