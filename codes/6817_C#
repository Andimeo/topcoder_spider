<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections;<br>using System.Text;<br><br>public class BrokenElevator<br>{<br>    public int res;<br>    public int n, m;<br>    public string[] sp;<br>    public int[] stair;<br><br>    public int wayTime(string[] plan)<br>    {<br>        n = plan.Length;<br>        m = plan[0].Length;<br>        sp = plan;<br>        stair = new int[n];<br>        int sr = 0, fr = 0;<br>        int sc = 0, fc = 0;<br>        for (int i = 0; i &lt; n; i++)<br>        {<br>            for (int j = 0; j &lt; m; j++)<br>            {<br>                if (plan[i][j] == 'S') { sr = i; sc = j; }<br>                if (plan[i][j] == 'F') { fr = i; fc = j; }<br>                if (plan[i][j] == '|') stair[i] = j;<br>            }<br>        }<br>        int sec = 0;<br><br>        if (sr == fr)<br>        {<br>            sec = Math.Abs(sc - fc) * 2;<br>        }<br>        if (sr &lt; fr) // lefele<br>        {<br>            sec += Math.Abs(stair[sr + 1] - sc) * 2;<br>            sec++;<br>            if ((sr + 1) &lt; (fr - 1))<br>                for (int i = sr + 1; i &lt; fr-1; i += 2)<br>                {<br>                    sec += Math.Abs(stair[i] - stair[i + 2]) * 2;<br>                    sec++;<br>                }<br>            sec += Math.Abs(stair[fr - 1] - fc) * 2;<br>        }<br>        if (sr &gt; fr) // felfele<br>        {<br>            sec += Math.Abs(stair[sr - 1] - sc) * 2;<br>            sec+=3;<br>            if ((sr - 1) &gt; (fr + 1))<br>                for (int i = sr - 1; i &gt; fr + 1; i -= 2)<br>                {<br>                    sec += Math.Abs(stair[i] - stair[i - 2]) * 2;<br>                    sec+=3;<br>                }<br>            sec += Math.Abs(stair[fr + 1] - fc) * 2;<br>        }<br>        return sec;<br>    }<br><br>}<br></td>