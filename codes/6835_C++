<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;vector&gt;<br>#include &lt;string&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;sstream&gt;<br>#include &lt;iostream&gt;<br>#include &lt;queue&gt;<br>#include &lt;set&gt;<br>#include &lt;map&gt;<br><br>#include &lt;stdio.h&gt;<br>#include &lt;stdlib.h&gt;<br>#include &lt;string.h&gt;<br>#include &lt;math.h&gt;<br>#include &lt;ctype.h&gt;<br><br>using namespace std;<br><br>#define PB push_back<br>typedef long long LL;<br>typedef vector &lt;int&gt; VI;<br>typedef pair &lt;int, int&gt; PII;<br>#define SZ(a) (int)((a).size())<br>#define ALL(a) (a).begin(), (a).end()<br>#define REP(i, a) for (i = 0; i &lt; (a); i++)<br>#define REPS(i, a) REP(i, SZ(a))<br><br>template&lt;class T&gt; string str(T a) { ostringstream ss; ss &lt;&lt; a; return ss.str(); }<br><br>class Multifactorial<br>{<br>public:<br>  string calcMultiFact(int n, int k)<br>  {<br>    LL res = 1, ma = (LL)1e18;<br>    int i;<br>    for (i = n; i &gt; 0; i -= k)<br>      if (i &gt; ma / res)<br>        return "overflow";<br>      else<br>        res *= i;  <br>    return str(res);<br>  }<br>};<br></td>