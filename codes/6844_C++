<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;iostream&gt;<br>#include &lt;sstream&gt;<br>#include &lt;vector&gt;<br>#include &lt;string&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;iterator&gt;<br>#include &lt;numeric&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;queue&gt;<br>#include &lt;utility&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cassert&gt;<br>#include &lt;complex&gt;<br>#include &lt;functional&gt;<br>#include &lt;ext/numeric&gt;<br><br>using namespace std;<br><br>typedef long long ll;<br>typedef unsigned long long ull;<br>typedef complex&lt;double&gt; pnt;<br>typedef vector&lt;int&gt; vi;<br>typedef vector&lt;string&gt; vs;<br>typedef istringstream iss;<br><br>#define RA(x) (x).begin(), (x).end()<br>#define FE(i, x) for (typeof((x).begin()) i = (x).begin(); i != (x).end(); i++)<br><br>template&lt;class T&gt; void splitstr(const string &amp;s, vector&lt;T&gt; &amp;out)<br>{<br>    iss in(s);<br>    out.clear();<br>    copy(istream_iterator&lt;T&gt;(in), istream_iterator&lt;T&gt;(), back_inserter(out));<br>}<br><br>template&lt;class T&gt; T mod(T a, T m) { a %= m; if (a &lt; 0) a += m; return a; }<br>template&lt;class T&gt; T gcd(T a, T b) { return b ? gcd(b, a % b) : a; }<br>template&lt;class T&gt; T inverse(T a, T b, T g = 0)<br>{<br>    if (!g) g = gcd(a, b);<br>    if (a == g || b == 0) return 1;<br>    T x = inverse(b % a, a, g);<br>    return mod((g - x * b) / a, b);<br>}<br><br>double dot(const pnt &amp;a, const pnt &amp;b) { return real(conj(a) * b); }<br>double cross(const pnt &amp;a, const pnt &amp;b) { return imag(conj(a) * b); }<br>double area2(const pnt &amp;a, const pnt &amp;b, const pnt &amp;c)<br>{<br>    return cross(b - a, c - a);<br>}<br>pnt isect(const pnt &amp;a1, const pnt &amp;a2, const pnt &amp;b1, const pnt &amp;b2)<br>{<br>    double c1 = area2(a1, a2, b1);<br>    double c2 = area2(a1, a2, b2);<br>    return (b2 * c1 - b1 * c2) / (c1 - c2);<br>}<br><br>struct qitem<br>{<br>    int v;<br>    int p;<br><br>    qitem() {}<br>    qitem(int V, int P) : v(V), p(P) {}<br>    bool operator &lt;(const qitem &amp;x) const { return p &gt; x.p; }<br>};<br><br>class RepeatedAddition <br>{<br>    public:<br>        long long digitsErased(string A, string B, string X) <br>        {<br>            ll a = atoll(A.c_str());<br>            ll b = atoll(B.c_str());<br>            ll x = atoll(X.c_str());<br>            ll reps = (b - a) / x;<br><br>            ll p10 = 1;<br>            ll ans = 0;<br>            for (int p = 0; p &lt; 18; p++, p10 *= 10LL)<br>            {<br>                ll t = 0LL;<br>                ll dx = (x / p10) % 10;<br>                ll px = x / p10;<br>                ll pa = a / p10;<br>                ll pb = b / p10;<br>                if (!pb) break;<br>                ll h = pb - pa - px * reps;<br>                cout &lt;&lt; "h = " &lt;&lt; h &lt;&lt; "  dx = " &lt;&lt; dx &lt;&lt; "\n";<br>                if (dx == 0) t = h;<br>                else if (dx == 9) t = reps - h;<br>                else t = reps;<br>                if (!pa)<br>                {<br>                    ll f = (p10 - a + x - 1) / x * x + a;<br>                    cout &lt;&lt; "f = " &lt;&lt; f &lt;&lt; "\n";<br>                    if ((f / p10) % 10) t--;<br>                }<br>                cout &lt;&lt; t &lt;&lt; "\n";<br>                ans += t;<br>            }<br>            return ans;<br>        }<br>};<br><br><br>// Powered by FileEdit<br></td>