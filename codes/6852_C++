<td class="problemText" colspan="8" valign="middle" align="left">
            #include&lt;vector&gt;<br>#include&lt;list&gt;<br>#include&lt;map&gt;<br>#include&lt;set&gt;<br>#include&lt;stack&gt;<br>#include&lt;algorithm&gt;<br>#include&lt;numeric&gt;<br>#include&lt;sstream&gt;<br>#include&lt;iostream&gt;<br>#include&lt;cstdio&gt;<br>#include&lt;cmath&gt;<br>#include&lt;cstdlib&gt;<br> <br>using namespace std;<br> <br>typedef long long int64;<br>typedef vector&lt;int&gt; vi;<br>#define FOR(i,n) for (int i=0; i&lt;(n); i++)<br> <br>struct BlockEnemy {<br>  typedef pair&lt;int,int&gt; p2;<br>  vector&lt;p2&gt; s[60];<br>  bool occ[60];<br>  int ans;<br>  int dfs(int x,int y=-1) {<br>#define INF 1000000000    <br>    int m=0;<br>    FOR(i,s[x].size()) if (s[x][i].first!=y) {<br>      int tmp=dfs(s[x][i].first,x);<br>      if (tmp&gt;=-1) {<br>         ans+=tmp&lt;?=s[x][i].second;<br>         m&gt;?=tmp;<br>       }<br>    }<br>    if (occ[x]) return INF;<br>    ans-=m;<br>    return m;<br>  }<br>  int minEffort(int N, vector &lt;string&gt; roads, vector &lt;int&gt; occupiedTowns) {<br>    FOR(i,roads.size()) { int x,y,z; sscanf(roads[i].c_str(),"%d %d %d",&amp;x,&amp;y,&amp;z); s[x].push_back(p2(y,z)); s[y].push_back(p2(x,z)); }<br>    FOR(i,N) occ[i]=false;<br>    FOR(i,occupiedTowns.size()) occ[occupiedTowns[i]]=true;<br>    ans=0;<br>    dfs(0);<br>    return ans;<br>  }<br>};<br> <br>//Powered by [KawigiEdit] 2.0!<br></td>