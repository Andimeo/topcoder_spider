<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;algorithm&gt;<br>#include &lt;iostream&gt;<br>#include &lt;sstream&gt;<br>#include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;queue&gt;<br>#include &lt;set&gt;<br>#include &lt;map&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cctype&gt;<br>#include &lt;cmath&gt;<br>using namespace std;<br><br>vector&lt;string&gt; split( const string&amp; s, const string&amp; delim =" " ) {<br>    vector&lt;string&gt; res;<br>    string t;<br>    for ( int i = 0 ; i != s.size() ; i++ ) {<br>        if ( delim.find( s[i] ) != string::npos ) {<br>            if ( !t.empty() ) {<br>                res.push_back( t );<br>                t = "";<br>            }<br>        } else {<br>            t += s[i];<br>        }<br>    }<br>    if ( !t.empty() ) {<br>        res.push_back(t);<br>    }<br>    return res;<br>}<br><br>vector&lt;int&gt; splitInt( const string&amp; s, const string&amp; delim =" " ) {<br>    vector&lt;string&gt; tok = split( s, delim );<br>    vector&lt;int&gt; res;<br>    for ( int i = 0 ; i != tok.size(); i++ )<br>        res.push_back( atoi( tok[i].c_str() ) );<br>    return res;<br>}<br><br><br>#define FORV(i,v) for (int i=0;i&lt;(v).size();++i)<br>#define UPDATEU(a,b) if (a&lt;(b)) a=(b)<br>#define UPDATED(a,b) if (a&gt;(b)) a=(b)<br><br>class ScoreDifference {<br>public:<br>    int maximize(vector &lt;string&gt; board) {<br>        short boards[16];<br>        <br>        for (int i=0;i&lt;4;i++) {<br>            vector&lt;int&gt; p;<br>            p=splitInt(board[i]);<br>            for (int j=0;j&lt;4;j++)<br>                boards[i*4+j]=p[j];<br>        }<br>        <br>        int best[65536];<br>        best[0]=0;<br>        memset(best,0,sizeof(best));<br>        for (int i=1;i&lt;65536;i++) {<br>            best[i]=-200;<br>            for (int j=0;j&lt;16;j++)<br>                if (move(i,j)) UPDATEU(best[i],boards[j]-best[i-(1&lt;&lt;j)]);<br>        }<br>        <br>        return best[65535];<br>    }<br>private:<br>    short place[16];<br>    bool move(int stat,int pos) {<br>        if ((stat&amp;(1&lt;&lt;pos))==0) return false;<br>        memset(place,0,sizeof(place));<br>        fill(stat-(1&lt;&lt;pos),pos);<br>        if (place[0]||place[1]||place[2]||place[3]) return true;<br>        if (place[4]||place[8]||place[7]||place[11]) return true;<br>        if (place[12]||place[13]||place[14]||place[15]) return true;<br>        return false;<br>    }<br>    void fill(int stat,int pos) {<br>        if (place[pos]==1) return;<br>        place[pos]=1;<br>        if (pos&gt;3) if ((stat&amp;(1&lt;&lt;(pos-4)))==0) fill(stat,pos-4);<br>        if (pos&lt;12) if ((stat&amp;(1&lt;&lt;(pos+4)))==0) fill(stat,pos+4);<br>        if (pos%4!=0) if ((stat&amp;(1&lt;&lt;(pos-1)))==0) fill(stat,pos-1);<br>        if (pos%4!=3) if ((stat&amp;(1&lt;&lt;(pos+1)))==0) fill(stat,pos+1);<br>    }<br>};<br><br><br>// Powered by FileEdit<br>// Powered by CodeProcessor<br></td>