<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br><br>public class ScoreDifference {<br>  static final int TOTAL = (1 &lt;&lt; 16);<br>  static final int INF = 1000000000;<br>  int a[] = new int[TOTAL];<br>  boolean used[] = new boolean[TOTAL];<br>  int field[][] = new int[4][4];<br>  <br>  int byteAt(int x, int y) {<br>    return ((x &gt;&gt; y) &amp; 1);<br>  }<br>  <br>  byte[][] getBoard(int x) {<br>    int i, j, cnt = 0;<br>    byte[][] ans = new byte[4][4];<br>    for (i=0;i&lt;4;++i) <br>      for (j=0;j&lt;4;++j) {<br>        if (byteAt(x, cnt) == 1) {<br>          ans[i][j] = (byte) field[i][j];<br>        } else<br>          ans[i][j] = 0;<br>        cnt++;<br>      }<br>    return ans;<br>  }<br>  <br>  int byteAt2(int x, int i, int j) {<br>    return byteAt(x, i*4 + j);<br>  }<br>  <br>  int rec(int x) {<br>    if (used[x]) return a[x];  <br>    used[x] = true;<br>    a[x] = -INF;<br>//    byte[][] board = getBoard(x);<br>//    System.out.println(x);<br>    int i, j, cnt = 0;<br>    for (i=0;i&lt;4;++i)<br>      for (j=0;j&lt;4;++j) {<br>        if (byteAt(x, cnt) == 1) {<br>          if ((i == 0) || (i == 3) || (j == 0) || (j == 3)) {<br>            a[x] = Math.max(a[x], field[i][j] - rec(x - (1 &lt;&lt; cnt)));<br>            cnt++;<br>            continue;<br>          }<br>          if ((byteAt2(x, i+1, j) == 0) || (byteAt2(x, i-1, j) == 0) || (byteAt2(x, i, j-1) == 0) || (byteAt2(x, i, j+1) == 0)) {<br>            a[x] = Math.max(a[x], field[i][j] - rec(x - (1 &lt;&lt; cnt)));<br>            cnt++;<br>            continue;<br>          }<br>        }<br>        cnt++;<br>      }<br>    return a[x];<br>  }<br>  <br>  public int maximize(String[] board) {<br>    Arrays.fill(used, false);<br>    <br>    used[0] = true;<br>    a[0] = 0;<br>    <br>    int i;<br>    StringTokenizer st;<br>    for (i=0;i&lt;4;++i) {<br>      st = new StringTokenizer(board[i]);<br>      field[i][0] = Integer.parseInt(st.nextToken());<br>      field[i][1] = Integer.parseInt(st.nextToken());<br>      field[i][2] = Integer.parseInt(st.nextToken());<br>      field[i][3] = Integer.parseInt(st.nextToken());      <br>    }<br>    return rec(TOTAL - 1);<br>  }<br>}<br></td>