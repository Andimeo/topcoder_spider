<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;iostream&gt;<br>#include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;functional&gt;<br>#include &lt;numeric&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cmath&gt;<br>#include &lt;queue&gt;<br> <br>using namespace std;<br><br>char d[1&lt;&lt;15][5][11];<br>char can[1&lt;&lt;15];<br>int count1[1&lt;&lt;15];<br><br>class Touchdown<br>{<br>public:<br>int howMany(int yardsToGo, vector &lt;int&gt; plays)<br>{<br>  int i,j,k,l,n,best,tot;<br>  n=plays.size();<br>  memset(can,0,sizeof(can));<br>  for (i=0;i&lt;(1&lt;&lt;n);i++)<br>  {<br>    tot=0;<br>    count1[i]=0;<br>    for (j=0;j&lt;n;j++)<br>      if (((1&lt;&lt;j)&amp;i)!=0)<br>      {<br>        tot+=plays[j];<br>        count1[i]++;<br>      }<br>    if ((tot&gt;=yardsToGo)&amp;&amp;(tot&lt;=yardsToGo+10)) can[i]=1;<br>  }<br>  memset(d,0,sizeof(d));<br>/*  for (i=0;i&lt;(1&lt;&lt;n);i++)<br>    for (j=0;j&lt;=4;j++)<br>      for (k=0;k&lt;=10;k++)<br>        d[i][j][k]=-1;<br>*/  d[0][4][10]=1;<br>  best=2000000000;<br>  for (i=0;i&lt;(1&lt;&lt;n);i++)<br>  {<br>    for (j=1;j&lt;=4;j++)<br>      for (k=1;k&lt;=10;k++)<br>        if (d[i][j][k]==1)<br>        {<br>          for (l=0;l&lt;n;l++)<br>            if (((1&lt;&lt;l)&amp;i)==0)<br>            {<br>              if (plays[l]&gt;=k)<br>              {<br>                d[i|(1&lt;&lt;l)][4][10]=1;<br>                if (can[i|(1&lt;&lt;l)]==1)<br>                  if (count1[i|(1&lt;&lt;l)]&lt;best) best=count1[i|(1&lt;&lt;l)];<br>              }<br>              else<br>              {<br>                d[i|(1&lt;&lt;l)][j-1][k-plays[l]]=1;<br>                if (can[i|(1&lt;&lt;l)]==1)<br>                  if (count1[i|(1&lt;&lt;l)]&lt;best) best=count1[i|(1&lt;&lt;l)];<br>              }<br>            }<br>        }<br>  }<br>  if (best==2000000000) return -1;<br>  else return best;<br>}<br>};<br></td>