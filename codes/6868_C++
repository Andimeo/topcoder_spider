<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;vector&gt;<br>#include &lt;string&gt;<br>#include &lt;stdio.h&gt;<br>#include &lt;string.h&gt;<br>#include &lt;stdlib.h&gt;<br><br>using namespace std;<br><br>  int x1[50],y1[50],x2[50],y2[50],n;<br>  int of[50],flag[50],area[50],badness[50],ch[50];<br>  int xb[50],yb[50],xu[50],yu[50],m;<br>  int order[50], op;<br>  <br>  int comp (const void *a, const void *b) {<br>    int aa, bb;<br>    aa = *(int *) a;<br>    bb = *(int *) b;<br>    if ((x2[aa]-x1[aa])*(y2[aa]-y1[aa]) &gt; (x2[bb]-x1[bb])*(y2[bb]-y1[bb]))<br>      return 1;<br>    if ((x2[aa]-x1[aa])*(y2[aa]-y1[aa]) &lt; (x2[bb]-x1[bb])*(y2[bb]-y1[bb]))<br>      return -1;<br>    if (aa &gt; bb)<br>      return 1;<br>    if (aa &lt; bb)<br>      return -1;<br>    return 0;<br>    }<br>  <br>class SuperPasture {<br>  public:<br>  <br>  void color (int x) {<br>    xb[m] &lt;?= x1[x];<br>    yb[m] &lt;?= y1[x];<br>    xu[m] &gt;?= x2[x];<br>    yu[m] &gt;?= y2[x];<br>    area[m] += (x2[x] - x1[x]) * (y2[x] - y1[x]);<br>    flag[x] = m;<br>    <br>    int i;<br><br>    for (i = 0; i &lt; n; i ++)<br>      if (flag[i] == -1 &amp;&amp; <br>        ( (x1[i] == x2[x] || x2[i] == x1[x]) &amp;&amp; (y1[i] &lt; y2[x] &amp;&amp; y2[i] &gt; y1[x]) ||<br>        (y1[i] == y2[x] || y2[i] == y1[x]) &amp;&amp; (x1[i] &lt; x2[x] &amp;&amp; x2[i] &gt; x1[x]) ) )<br>        color(i);<br>    }<br>  <br>  int whichOne(vector &lt;string&gt; pa) {<br>    int i,j,s;<br>    <br>    n = pa.size();<br>    for (i = 0; i &lt; n; i ++)<br>      sscanf(pa[i].c_str(),"%d%d%d%d",x1+i,x2+i,y1+i,y2+i);<br>    memset(flag,-1,sizeof(flag));<br>    m = 0;<br>    for (i = 0; i &lt; n; i ++)<br>      if (flag[i] == -1) {<br>        xb[m] = x1[i];<br>        yb[m] = y1[i];<br>        xu[m] = x2[i];<br>        yu[m] = y2[i];<br>        area[m] = 0;<br>        color(i);<br>        m ++;<br>        }<br>    for (i = 0; i &lt; m; i ++)<br>      badness[i] = (xu[i] - xb[i]) * (yu[i] - yb[i]) - area[i];<br>    int bb = badness[0];<br>    for (i = 0; i &lt; m; i ++)<br>      bb &gt;?= badness[i];<br>    memcpy(of, flag,sizeof(flag));<br>    for (i = 0; i &lt; n; i ++) {<br>      s = 0;<br>      for (j = 0; j &lt; n; j ++)<br>        if (of[j] == of[i])<br>          s ++;<br>      if (s == 1)<br>        ch[i] = 1;<br>      else {<br>        memset(flag,-1,sizeof(flag));<br>        flag[i] = 0;<br>        j = 0;<br>        while (of[j] != of[i] || j == i)<br>          j ++;<br>        color(j);<br>        ch[i] = 1;<br>        for (j = 0; j &lt; n; j ++)<br>          if (of[j] == of[i] &amp;&amp; flag[j] == -1)<br>            ch[i] = 0;<br>        }<br>      if (badness[of[i]] != bb)<br>        ch[i] = 0;<br>      }<br>    op = 0;<br>    for (i = 0; i &lt; n; i ++)<br>      if (ch[i])<br>        order[op ++] = i;<br>    qsort(order, op, sizeof(int), comp);<br>    <br>    return order[0];<br>    }<br>  };<br></td>