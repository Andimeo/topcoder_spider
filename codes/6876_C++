<td class="problemText" colspan="8" valign="middle" align="left">
            #include&lt;stdio.h&gt;<br>#include&lt;stdlib.h&gt;<br>#include&lt;ctype.h&gt;<br>#include&lt;string.h&gt;<br>#include&lt;math.h&gt;<br><br>#include&lt;iostream&gt;<br>#include&lt;sstream&gt;<br>#include&lt;vector&gt;<br>#include&lt;string&gt;<br>#include&lt;set&gt;<br>#include&lt;map&gt;<br>#include&lt;list&gt;<br>#include&lt;utility&gt;<br>#include&lt;algorithm&gt;<br>using namespace std; <br><br>#define FMAX 100000<br>#define ll long long<br>class ValidPlates {<br>public:<br>  int OK[10][10];<br>  vector&lt; vector&lt; long long &gt; &gt; f;<br>  string kako(string s){<br>    if( s.size() &lt;= 50 )<br>      return s;<br>    else{<br>      string r = s.substr( 0, 47 );<br>      r += "...";<br>      return r;<br>    }<br>  }<br>  string get( int a, int n, int seqno ){<br>    if( n &lt;= 0 )<br>      return "";<br>    for( int b = 0; b &lt; 10; b ++ ){<br>      if( !OK[a][b] )<br>        continue;<br>      if( seqno &lt; f[n][b] )<br>        return (char)(b + '0') + get( b, n - 1, seqno );<br>      seqno -= f[n][b];<br>    }<br>    return "??";<br>  }<br>  string getPlate(vector &lt;string&gt; p, int seqno) {<br>    for( int i = 0; i &lt; 10; i ++ )<br>      for( int j = 0; j &lt; 10; j ++ )<br>        OK[i][j] = 1;<br>    for( int i = 0; i &lt; p.size(); i ++ ){<br>      for( int j = 0; j + 1 &lt; p[i].size(); j ++ ){<br>        if( isdigit(p[i][j]) &amp;&amp; isdigit(p[i][j+1]) ){<br>          OK[p[i][j]-'0'][p[i][j+1]-'0'] = 0;<br>        }<br>      }<br>    }<br><br>    vector&lt; int &gt; count;<br>    f.push_back( vector&lt; ll &gt;( 10, 0 ) );<br>    f.push_back( vector&lt; ll &gt;( 10, 1 ) );<br>    count.push_back( seqno );<br>    map&lt; vector&lt; long long &gt;, int &gt; visited;<br>    visited[f[1]] = 1;<br>    int flag = 0;<br><br>    seqno --;<br><br>    {<br>      int i = 1;<br>      for( int a = 1; a &lt; 10; a ++ ){<br>        if( seqno &lt; f[i][a] ){<br>          return kako((char)(a + '0') + get( a, i - 1, seqno ));<br>        }<br>        seqno -= f[i][a];<br>      }<br>    }<br>    count.push_back( seqno );<br><br>    for( int n = 2; ; n ++ ){<br>      int fne = 0;<br>//      printf( "n = %d, seqno = %d\n", n, seqno );<br>      f.push_back( vector&lt; ll &gt;( 10, 0 ) );<br>      for( int a = 0; a &lt; 10; a ++ ){<br>        long long d = 0;<br>        for( int j = 0; j &lt; 10; j ++ )<br>          d += OK[a][j] * f[n-1][j];<br>        f[n][a] = d;<br>        if( d ) fne = 1;<br>      }<br>//      printf( "n = %d, seqno = %d\n", n, seqno );<br><br>      for( int a = 1; a &lt; 10; a ++ ){<br>        if( seqno &lt; f[n][a] ){<br>          return kako((char)(a + '0') + get( a, n - 1, seqno ));<br>        }<br>        seqno -= f[n][a];<br>      }<br><br>      if( !fne )<br>        return "";<br>      if( flag == 0 ){<br>        int &amp;prev = visited[f[n]];<br>        if( prev == 0 )<br>          prev = n;<br>        else{<br>          int sn0 = count[prev];<br>          int T = sn0 - seqno;<br>          if( T == 0 )<br>            return "";<br>          int Tn = n - prev;<br>          // 1 turn Tn keta<br>          int NT = (seqno / T - (100 / Tn)) * T;<br>          if( NT &gt; 0 )<br>            seqno -= NT;<br>          flag = 1;<br>        }<br>        count.push_back( seqno );<br>      }<br>    }<br>    return "";<br>  }<br>  <br><br>};<br><br><br>// Master Spark!<br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003]<br>// Powered by CodeProcessor<br></td>