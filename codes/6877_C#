<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections.Generic;<br>using System.Text;<br><br>public class TurtleGraphics {<br>    struct Desc {<br>  public double[] shiftBy;<br>  public double[,] rotateBy;<br>    }<br><br>    double[,] URotation;<br>    double[,] DRotation;<br>    double[,] LRotation;<br>    double[,] RRotation;<br><br>    void init() {<br>  URotation = new double[3, 3];<br>  URotation[0, 1] = 1;<br>  URotation[1, 0] = -1;<br>  URotation[2, 2] = 1;<br>  DRotation = new double[3, 3];<br>  DRotation[0, 1] = -1;<br>  DRotation[1, 0] = 1;<br>  DRotation[2, 2] = 1;<br>  LRotation = new double[3, 3];<br>  LRotation[0, 2] = -1;<br>  LRotation[1, 1] = 1;<br>  LRotation[2, 0] = 1;<br>  RRotation = new double[3, 3];<br>  RRotation[0, 2] = 1;<br>  RRotation[1, 1] = 1;<br>  RRotation[2, 0] = -1;<br>    }<br><br>    double[,] multiply(double[,] a, double[,] b) {<br>  double[,] res = new double[3, 3];<br>  for (int i = 0; i &lt; 3; ++i)<br>      for (int j = 0; j &lt; 3; ++j)<br>    for (int k = 0; k &lt; 3; ++k)<br>        res[i, j] += a[i, k] * b[k, j];<br>  return res;<br>    }<br><br>    double[] multiply(double[] b, double[,] a) {<br>  double[] res = new double[3];<br>  for (int i = 0; i &lt; 3; ++i)<br>      for (int j = 0; j &lt; 3; ++j)<br>        res[j] += b[i] * a[i, j];<br>  return res;<br>    }<br><br>    double[] addd (double[] a, double[] b) {<br>  double[] res = new double[3];<br>  for (int i = 0; i &lt; 3; ++i)<br>      res[i] = a[i] + b[i];<br>  return res;<br>    }<br><br>    Desc multiply(Desc a, Desc b) {<br>  Desc r = new Desc();<br>  r.shiftBy = addd(a.shiftBy, multiply(b.shiftBy, a.rotateBy));<br>  r.rotateBy = multiply(b.rotateBy, a.rotateBy);<br>  return r;<br>    }<br><br>    Desc parse(string c) {<br>  Desc d = new Desc();<br><br>  d.shiftBy = new double[3];<br>  d.rotateBy = new double[3, 3];<br>  d.rotateBy[0, 0] = 1;<br>  d.rotateBy[1, 1] = 1;<br>  d.rotateBy[2, 2] = 1;<br><br>  int at = 0;<br>  while (at &lt; c.Length) {<br>      Desc cur = new Desc();<br>  cur.shiftBy = new double[3];<br>  cur.rotateBy = new double[3, 3];<br>  cur.rotateBy[0, 0] = 1;<br>  cur.rotateBy[1, 1] = 1;<br>  cur.rotateBy[2, 2] = 1;<br>      switch (c[at]) {<br>    case 'F':<br>        cur.shiftBy[0] = 1;<br>        ++at;<br>        break;<br>    case 'R':<br>        cur.rotateBy = RRotation;<br>        ++at;<br>        break;<br>    case 'L':<br>        cur.rotateBy = LRotation;<br>        ++at;<br>        break;<br>    case 'U':<br>        cur.rotateBy = URotation;<br>        ++at;<br>        break;<br>    case 'D':<br>        cur.rotateBy = DRotation;<br>        ++at;<br>        break;<br>    case '(':<br>        int bal = 1;<br>        int i;<br>        for (i = at + 1; bal &gt; 0; ++i) {<br>      switch (c[i]) {<br>          case '(':<br>        ++bal;<br>        break;<br><br>          case ')':<br>        --bal;<br>        break;<br>      }<br>        }<br>        cur = parse(c.Substring(at + 1, i - at - 2));<br>        at = i;<br>        break;<br>    default:<br>        throw new Exception();<br>      }<br><br>        if (at &lt; c.Length &amp;&amp; c[at] &gt;= '0' &amp;&amp; c[at] &lt;= '9') {<br>      Desc dd = cur;<br>      for (int i = 1; i &lt; c[at] - '0'; ++i) {<br>          dd = multiply(dd, cur);<br>      }<br>      cur = dd;<br>      ++at;<br>        }<br><br>      d = multiply(d, cur);<br>  }<br><br>  return d;<br>    }<br><br>    public double distance(string command) {<br>  init();<br>  Desc d = parse(command);<br>  return Math.Sqrt(d.shiftBy[0] * d.shiftBy[0] + d.shiftBy[1] * d.shiftBy[1] + d.shiftBy[2] * d.shiftBy[2]);<br>    }<br>}<br><br><br>// Powered by FileEdit<br></td>