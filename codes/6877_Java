<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br> <br>public class TurtleGraphics {<br>    double[] dx = new double[] {1, 0, 0, -1, 0, 0};<br>    double[] dy = new double[] {0, 1, 0, 0, -1, 0};<br>    double[] dz = new double[] {0, 0, 1, 0, 0, -1};<br> <br> <br>    String s;<br>    int p;<br> <br>    class Pos {<br>        double x, y, z;<br>        int o;<br>        int r;<br>        int t;<br> <br>        Pos() {<br>            o = 0;<br>            r = 1;<br>            t = 2;<br>        }<br> <br>        void left() {<br>            int tmp = o;<br>            o = (r + 3) % 6;<br>            r = tmp;<br>        }<br> <br>        void right() {<br>            int tmp = o;<br>            o = r;<br>            r = (tmp + 3) % 6;<br>        }<br> <br>        void up() {<br>            int tmp = o;<br>            o = t;<br>            t = (tmp + 3) % 6;<br>        }<br> <br>        void down() {<br>            int tmp = o;<br>            o = (t + 3) % 6;<br>            t = tmp;<br>        }<br> <br>        void add(Pos q) {<br>            switch (o) {<br>                case 0: x += q.x; break;<br>                case 1: y += q.x; break;<br>                case 2: z += q.x; break;<br>                case 3: x -= q.x; break;<br>                case 4: y -= q.x; break;<br>                case 5: z -= q.x; break;<br>            }<br>            switch (r) {<br>                case 0: x += q.y; break;<br>                case 1: y += q.y; break;<br>                case 2: z += q.y; break;<br>                case 3: x -= q.y; break;<br>                case 4: y -= q.y; break;<br>                case 5: z -= q.y; break;<br>            }<br>            switch (t) {<br>                case 0: x += q.z; break;<br>                case 1: y += q.z; break;<br>                case 2: z += q.z; break;<br>                case 3: x -= q.z; break;<br>                case 4: y -= q.z; break;<br>                case 5: z -= q.z; break;<br>            }<br>//            x += q.x * dx[o] + q.y * dy[o] + q.z * dz[o];<br>//            y += q.x * dx[r] + q.y * dy[r] + q.z * dz[r];<br>//            z += q.x * dx[t] + q.y * dy[t] + q.z * dz[t];<br> <br>            Pos u = new Pos();<br>            if (u.t != q.t) {<br>search:<br>                for (int i = 0; i &lt; 4; i++) {<br>                    for (int j = 0; j &lt; 4; j++) {<br>                        u.up();<br>                        up();<br>                        if (u.t == q.t) {<br>                            break search;<br>                        }<br>                    }<br>                    u.right();<br>                    right();<br>                }<br>            }<br>            while (u.r != q.r) {<br>                u.right();<br>                right();<br>            }<br>        }<br>    }<br> <br>    Pos get() {<br>        Pos r = new Pos();<br> <br>        while (s.charAt(p) != ')' &amp;&amp; s.charAt(p) != '$') {<br>            System.out.println(r.x + " " + r.y + " " + r.z + " " + r.o + " " + r.r + " " + r.t);<br> <br>            char c = s.charAt(p);<br>            p++;<br> <br>            int m = 1;<br>            if (c != '(') {<br>                    if (s.charAt(p) &gt;= '1' &amp;&amp; s.charAt(p) &lt;= '9') {<br>                        m = s.charAt(p) - '0';<br>                        p++;<br>                    }<br>            }<br> <br>            switch (c) {<br>                case 'F': <br>                    r.x += dx[r.o] * m;<br>                    r.y += dy[r.o] * m;<br>                    r.z += dz[r.o] * m;<br>                    break;<br>                case 'L': <br>                    for (int i = 0; i &lt; m; i++) {<br>                        r.left();<br>                    }<br>                    break;<br>                case 'R':<br>                    for (int i = 0; i &lt; m; i++) {<br>                        r.right();<br>                    }<br>                    break;<br>                case 'U':<br>                    for (int i = 0; i &lt; m; i++) {<br>                        r.up();<br>                    }<br>                    break;<br>                case 'D':<br>                    for (int i = 0; i &lt; m; i++) {<br>                        r.down();<br>                    }<br>                    break;<br>                case '(':<br>                    Pos q = get();<br>                    p++;<br>                    if (s.charAt(p) &gt;= '1' &amp;&amp; s.charAt(p) &lt;= '9') {<br>                        m = s.charAt(p) - '0';<br>                        p++;<br>                    }<br> <br>            System.out.println("Q " + q.x + " " + q.y + " " + q.z + " " + q.o + " " + q.r + " " + q.t);<br>                    for (int i = 0; i &lt; m; i++) {<br>                        r.add(q);<br>            System.out.println(r.x + " " + r.y + " " + r.z + " " + r.o + " " + r.r + " " + r.t);<br>                    }<br> <br>                    break;<br>            }<br>        }<br> <br>            System.out.println(r.x + " " + r.y + " " + r.z + " " + r.o + " " + r.r + " " + r.t);<br>        return r;<br>    }<br> <br>    public double distance(String command) {<br>        s = command + "$";<br>        p = 0;<br>        Pos m = get();<br>        return Math.sqrt(m.x * m.x + m.y * m.y + m.z * m.z);<br>    }<br>}<br> <br> <br> <br> <br>// Powered by PopsEdit<br></td>