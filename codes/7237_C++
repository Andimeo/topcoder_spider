<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;vector&gt;<br>#include &lt;list&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;deque&gt;<br>#include &lt;stack&gt;<br>#include &lt;bitset&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;functional&gt;<br>#include &lt;numeric&gt;<br>#include &lt;utility&gt;<br>#include &lt;sstream&gt;<br>#include &lt;iostream&gt;<br>#include &lt;iomanip&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;ctime&gt;<br> <br>using namespace std;<br> <br>class BoulderRace {<br>public:<br>  int winner(vector &lt;string&gt;, int);<br>};<br> <br>int BoulderRace::winner(vector &lt;string&gt; boulders, int distance) {<br>  int res = 0;<br>  int bestTime = 999999;<br>  for (int i = 0; i &lt; boulders.size(); i++) {<br>    int curTime = 0;<br>    int curDist = distance; int idx = 0;<br>    while (curDist &gt; 0) {<br>      idx = idx % boulders[i].size();<br>      curDist -= (boulders[i][idx]-'0');<br>      curTime++;<br>      idx++;<br>    }<br>    cout &lt;&lt; curDist &lt;&lt; " : " &lt;&lt; curTime &lt;&lt; endl;<br>    if (bestTime &gt; curTime) {<br>      res = i;<br>      bestTime = curTime;<br>    }<br>  }<br>  <br>  return res;<br>}<br> <br> <br>//Powered by [KawigiEdit] 2.0!<br></td>