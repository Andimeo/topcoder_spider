<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections;<br>using System.Text;<br><br>public class Staircase<br>{<br><br>  public int res;<br>  public int n;<br><br>    public int pow(int k)<br>    {<br>        int r=1;<br>        for (int i = 0; i &lt; k; i++)<br>            r*=2;<br>        return r;<br>    }<br>    public int log(int k)<br>    {<br>        int r = 0;<br>        int kk = k;<br>        while (k != 1) { k /= 2; r++; }<br>        if (pow(r) &lt; kk) r++;<br>        return r;<br>    }<br><br>  public int minimalSteps(int[] stairs)<br>  {<br>    n=stairs.Length;<br>        int[] dp = new int[100];<br>        if (stairs[1] != 1) return -1;<br>        for (int i = 0; i &lt; n; i++)<br>        {<br>            if (i &lt; n - 1)<br>                if (stairs[i+1] &gt; pow(Math.Min(i,30))) return -1;<br>        }<br>        dp[0] = 0;<br>        for (int i = 1; i &lt; n; i++)<br>        {<br>            int min = int.MaxValue;<br>            if (stairs[i - 1] + 1 == stairs[i]) min = Math.Min(dp[i - 1] + 1, min);<br>            int l = log(stairs[i]);<br>            for (int j = 0; j &lt; i; j++)<br>            {<br>                int k = 0;<br>                for (k = j; k &gt;= 0; k--)<br>                {<br>                    int p = pow(j-k);<br>                    if (stairs[k] + p &gt;= stairs[i]) break;<br>                }<br>                l = j - k;<br>                if (l &lt;= j) min = Math.Min(dp[j] +l+ 1, min);<br>            }<br>            dp[i] = min;<br>        }<br><br>        res = dp[n-1];<br>    return res;<br>  }<br><br>}<br></td>