<td class="problemText" colspan="8" valign="middle" align="left">
            // Cry as challenge phase is passing by<br><br>#include &lt;algorithm&gt;<br>#include &lt;functional&gt;<br><br>#include &lt;cmath&gt;<br>#include &lt;cctype&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cstring&gt;<br><br>#include &lt;queue&gt;<br>#include &lt;vector&gt;<br>#include &lt;string&gt;<br>#include &lt;sstream&gt;<br>#include &lt;iostream&gt;<br><br>using namespace std;<br><br>#define FORC(it,v) for( __typeof((v).begin()) it = (v).begin(); it != (v).end(); ++it )<br><br>int dp[ 64 ][ 64 ];<br><br>struct state {<br>    int x;<br>    int k;<br><br>    state( int x, int k ) : x( x ), k( k ) {}<br><br>    int &amp;ref() { return dp[x][k]; }<br>};<br><br>bool push( state nov, int cost )<br>{<br>    if( nov.ref() == -1 ) {<br>        nov.ref() = cost;<br>        return true;<br>    }<br><br>    return false;<br>}<br><br>class Staircase {<br>public:<br>    int minimalSteps( vector &lt;int&gt; V ) {<br>        memset( dp, -1, sizeof dp );<br><br>        queue&lt; state &gt; Q;<br><br>        state nov( 0, 0 );<br><br>        int n = V.size();<br><br>        for( Q.push( nov ), nov.ref() = 0; !Q.empty(); Q.pop() ) {<br>            state ex = Q.front();<br><br>            int cost = ex.ref();<br><br>            if( ex.x == n - 1 ) return cost;<br><br>            if( ex.x &gt; 0 ) {<br>                state nov( ex.x - 1, min( ex.k + 1, 50 ) );<br>                if( push( nov, cost + 1 ) ) Q.push( nov );<br>            }<br><br>            for( int i = ex.x + 1; i &lt; n; ++i ) {<br>                if( V[i] - V[ex.x] &lt;= (1LL &lt;&lt; ex.k) ) {<br>                    state nov( i, 0 );<br><br>                    if( push( nov, cost + 1 ) ) Q.push( nov );<br>                }<br>            }<br>        }<br><br>        return -1;<br>    }<br>};<br><br><br><br><br><br><br><br><br><br>// Powered by FileEdit<br>// Powered by moj 3.0 beta 11 [modified TZTester]<br>// Powered by CodeProcessor<br></td>