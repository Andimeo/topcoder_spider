<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>import java.text.*;<br>import java.math.*;<br>import java.util.regex.*;<br>import java.awt.geom.*;<br>import static java.lang.Math.*;<br>import static java.lang.Character.*;<br>import static java.lang.Integer.*;<br>import static java.lang.Double.*;<br>import static java.lang.Long.*;<br>import static java.lang.System.*;<br>import static java.util.Arrays.*;<br>import java.util.*;<br><br>public class Staircase {<br>  private static final int INF = 10101010;<br>  int kq = INF,n;<br>  int[][] dp = new int[100][100];<br>  int[] a;<br>  public int minimalSteps(int[] stairs) {<br>    a = stairs;<br>    n = a.length;<br>    for (int i = 0; i &lt; dp.length; i++)<br>      Arrays.fill(dp[i], INF);<br>    dp[0][0] = 0;<br>    LinkedList&lt;Integer&gt; queue = new LinkedList&lt;Integer&gt; ();<br>    queue.add(0);<br>    while (!queue.isEmpty()) {<br>      int u = queue.removeFirst();<br>      int x = u/100, y = u%100;<br>      if (x==n-1) {<br>        kq = min (kq,dp[x][y]);<br>      } else {<br>        int temp = dp[x][y]+1;<br>        // di xuong<br>        if (x!=0) {<br>          if (dp[x-1][y+1]&gt;temp) {<br>            dp[x-1][y+1] = temp;<br>            queue.add((x-1)*100 + y+1);<br>          }<br>        }<br>        <br>        // di len<br>        for (int i = x+1; i &lt; n; i++) {<br>          if ((a[i]-a[x]) &lt;= (1&lt;&lt;y)) {<br>            if (dp[i][0]&gt;temp) {<br>              dp[i][0] = temp;<br>              queue.add(i*100);<br>            }<br>          }<br>        }<br>        <br>      }<br>    }<br>    return kq==INF?-1:kq;<br>  }<br>}<br><br><br>// Powered by FileEdit<br>// Powered by CodeProcessor<br></td>