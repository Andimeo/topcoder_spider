<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;algorithm&gt;<br>#include &lt;cassert&gt;<br>#include &lt;cctype&gt;<br>#include &lt;cmath&gt;<br>#include &lt;complex&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cstring&gt;<br>#include &lt;ctime&gt;<br>#include &lt;deque&gt;<br>#include &lt;functional&gt;<br>#include &lt;iterator&gt;<br>#include &lt;iostream&gt;<br>#include &lt;list&gt;<br>#include &lt;map&gt;<br>#include &lt;numeric&gt;<br>#include &lt;queue&gt;<br>#include &lt;set&gt;<br>#include &lt;string&gt;<br>#include &lt;valarray&gt;<br>#include &lt;vector&gt;<br><br>using namespace std;<br><br>const int MAXN = 100;<br>const int inf = 1000000000;<br>const double eps = 1e-8;<br>const double PI = 3.1415926535897932384626433832795;<br><br>typedef vector&lt;int&gt; vi;<br>typedef vector&lt;vi&gt; vvi;<br>typedef long double ld;<br>typedef vector&lt;ld&gt; vd;<br>typedef pair&lt;int,int&gt; pii;<br>typedef vector&lt;pii&gt; vp;<br>typedef queue&lt;int&gt; qi;<br>typedef queue&lt;pii&gt; qp;<br>typedef map&lt;string,int&gt; msi;<br>typedef map&lt;string,string&gt; mss;<br>typedef long long ll;<br><br>#define MP make_pair<br><br>const int num[4] = {1, 3, 4, 6};<br><br>class RailroadSeatNumeration<br> {<br>   bool canbeDom(int n)<br>   {<br>     return n &gt;= 1 &amp;&amp; n &lt;= 36;<br>   }<br>   bool canbeInt(int n)<br>   {<br>     if(n &lt;= 0 || n &gt;= 100)<br>       return false;<br>     int a = n / 10;<br>     int b = n % 10;<br>     return a &gt;= 1 &amp;&amp; a &lt;= 9 &amp;&amp; (b == 1 || b == 3 || b == 4 || b == 6);<br>   }<br>   int toInter(int n)<br>   {<br>     n--;<br>     int a = n / 4;<br>     int b = n % 4;<br>     return (a + 1) * 10 + num[b];<br>   }<br>  public:<br>  string getInternational(vector &lt;int&gt; tickets) <br>  {<br>    string result;<br>    bool dom = true;<br>    bool inter = true;<br>    for(int i = 0; i &lt; tickets.size(); i++)<br>    {<br>      if(!canbeDom(tickets[i]))<br>        dom = false;<br>      if(!canbeInt(tickets[i]))<br>        inter = false;<br>    }<br>    if(dom &amp;&amp; inter)<br>      return "AMBIGUOUS";<br>    if(!dom &amp;&amp; !inter)<br>      return "BAD DATA";<br>    if(dom)<br>    {<br>      ostringstream o;<br>      for(int i = 0; i &lt; tickets.size(); i++)<br>        o &lt;&lt; " " &lt;&lt; toInter(tickets[i]);<br>      return o.str().substr(1);<br>    }<br>    else<br>    {<br>      ostringstream o;<br>      for(int i = 0; i &lt; tickets.size(); i++)<br>        o &lt;&lt; " " &lt;&lt; tickets[i];<br>      return o.str().substr(1);<br>    }<br>    return result;<br>  }<br>  <br><br>};<br><br><br><br>    <br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003]<br>// Powered by CodeProcessor<br></td>