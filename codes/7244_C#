<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br><br>public class ExtendedHappyNumbers {<br>  int[] cache;<br>  int[] stack;<br>  int[] map;<br>  int stackAt;<br>  <br>  public long calcTheSum(int A, int B, int K) {<br>    map = new int[10];<br>    cache = new int[5000000];<br>    stack = new int[5000000];<br>    stackAt = 0;<br>    for (int i = 0; i &lt; 10; ++i)<br>    {<br>      int s = 1;<br>      for (int j = 0; j &lt; K; ++j)<br>        s *= i;<br>      map[i] = s;<br>    }<br><br>    long res = 0;<br>    <br>    for (int i = A; i &lt;= B; ++i)<br>    {<br>      res += get(i);<br>    }<br><br>    return res;<br>  }<br>  <br>  private int get(int a)<br>  {<br>    int b = cache[a];<br>    if (b &gt; 0)<br>      return b;<br>    if (b &lt; 0)<br>    {<br>      int r = a;<br>      for (int i = -b; i &lt; stackAt; ++i)<br>        r = Math.Min(r, stack[i]);<br>      cache[a] = r;<br>      return r;<br>    }<br><br>    stack[stackAt++] = a;<br>    cache[a] = -stackAt;<br>    <br>    b = 0;<br>    int c = a;<br>    while (c &gt; 0)<br>    {<br>      b += map[c % 10];<br>      c /= 10;<br>    }<br><br>    int v = Math.Min(a, get(b));<br>    cache[a] = v;<br><br>    --stackAt;<br>    <br>    return v;<br>  }<br><br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003] [modified for C# by Petr]<br>// Powered by CodeProcessor<br></td>