<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;algorithm&gt;<br>#include &lt;iostream&gt;<br>#include &lt;sstream&gt;<br>#include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;queue&gt;<br>#include &lt;set&gt;<br>#include &lt;map&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cctype&gt;<br>#include &lt;cmath&gt;<br>#include &lt;list&gt;<br>using namespace std; <br> <br>#define M 100<br>#define INF -1<br> <br>#define SORT(v) sort((v).begin(),(v).end())<br>#define FOR(i,a,b) for(int i=(a);i&lt;int(b);++i)<br>#define SIZE(v) ((int)(v).size())<br>#define FV(i,a,v) FOR(i,a,SZ(v))<br>#define FZ(i,v) FV(i,0,v) <br> <br>class KnightTour {<br>        public: <br> <br>  int isValid(int m1, int m2, int n1, int n2) {<br>    int check = 0;<br>     <br>    if (n1 == m1+2 &amp;&amp; (n2 == m2+1 || n2 == m2-1)) check = 1;<br>    if (n1 == m1+1 &amp;&amp; (n2 == m2+2 || n2 == m2-2)) check = 1;<br>    if (n1 == m1-2 &amp;&amp; (n2 == m2+1 || n2 == m2-1)) check = 1;<br>    if (n1 == m1-1 &amp;&amp; (n2 == m2+2 || n2 == m2-2)) check = 1;<br> <br>    return check;<br>  }<br> <br>  <br>        string checkTour(vector &lt;string&gt; cells) {<br>         char board[6][6];<br>         for(int i=0; i&lt;6; ++i) for(int j=0; j&lt;6; ++j) board[i][j] = -1;<br>                    <br>         int lastv1 = cells[0][0]-'A';<br>         int lastv2 = cells[0][1]-49;<br>         board[lastv1][lastv2] = 1;<br> <br>         for(int i=1; i&lt;cells.size(); ++i) <br>         {<br>           int v1 = cells[i][0]-'A';<br>           int v2 = cells[i][1]-49;<br>           if (v1 &gt; 5 || v2 &gt; 5 || v1 &lt; 0 || v2 &lt; 0 || board[v1][v2] == 1) return "Invalid";<br>           <br>           board[v1][v2] = 1;<br>           if (isValid(lastv1, lastv2, v1, v2)) <br>           {<br>             lastv1 = v1;<br>             lastv2 = v2;<br>           }<br>           else <br>             return "Invalid";<br>         } <br> <br>         int v1 = cells[0][0]-'A';<br>         int v2 = cells[0][1]-49;<br>         lastv1 = cells[cells.size()-1][0]-'A';<br>         lastv2 = cells[cells.size()-1][1]-49;<br>         if (isValid(lastv1, lastv2, v1, v2) == 0) return "Invalid";<br>         for(int i=0; i&lt;6; ++i) for(int j=0; j&lt;6; ++j) if (board[i][j] == -1) return "Invalid";<br>         return "Valid";<br>        } <br>        <br> <br>}; <br> <br> <br> <br> <br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003]<br>// Powered by CodeProcessor<br></td>