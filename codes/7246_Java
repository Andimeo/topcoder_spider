<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br><br>public class Terrorists {<br>  public int requiredCost(String[] roads) {<br>    int n = roads.length;<br>    int[][] c = new int[n][n];<br>    for (int i=0; i&lt;n; i++)<br>      for (int j=0; j&lt;n; j++)<br>        c[i][j] = roads[i].charAt(j) - '0';<br>    int[][] f = new int[n][n];<br>    int[] p = new int[n+2];<br>    int[] q = new int[n+2];<br>    int[] r = new int[n+2];<br>    int res = Integer.MAX_VALUE;<br>    for (int s=0; s&lt;n; s++)<br>      for (int t=s+1; t&lt;n; t++) {<br>        for (int i=0; i&lt;n; i++)<br>          for (int j=0; j&lt;n; j++)<br>            f[i][j] = 0;<br>        int flow = 0;<br>        while (true) {<br>          int now = 0;<br>          int all = 1;<br>          q[1] = s;<br>          Arrays.fill(p, -1);<br>          p[s] = s;<br>          r[s] = Integer.MAX_VALUE;<br>          while (now &lt; all) {<br>            now++;<br>            int u = q[now];<br>            for (int v=0; v&lt;n; v++)<br>              if (c[u][v] - f[u][v] &gt; 0 &amp;&amp; p[v] == -1) {<br>                p[v] = u;<br>                r[v] = Math.min(c[u][v] - f[u][v], r[u]);<br>                all++;<br>                q[all] = v;<br>              }<br>          }<br>          if (p[t] == -1)<br>            break;<br>          flow += r[t];<br>          int u = t;<br>          while (u != s) {<br>            f[p[u]][u] += r[t];<br>            f[u][p[u]] -= r[t];<br>            u = p[u];<br>          }<br>        }<br>        if (flow &lt; res)<br>          res = flow;<br>      }<br>    return res;<br>  }<br><br>}<br><br><br><br>// Powered by FileEdit<br>// Powered by RETester [based on ExampleBuilder]<br>// Powered by CodeProcessor<br></td>