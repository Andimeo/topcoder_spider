<td class="problemText" colspan="8" valign="middle" align="left">
            imports System<br>imports Microsoft.VisualBasic<br>imports System.Collections<br>imports System.Text<br> <br> <br>'imports System<br>'imports Microsoft.VisualBasic<br>'imports System.Collections<br>'imports System.Text<br> <br>Public Class Terrorists<br> <br>    Dim n As Integer<br>    Dim qp As New Collections.Generic.Queue(Of Integer)<br>    Private Const INF As Long = 100000000<br>    Dim ttt() As Integer<br>    Dim prev() As Integer<br> <br>    Dim bcc(,) As Integer<br>    Dim cc(,) As Integer<br> <br>    Public Function requiredCost(ByVal roads() As String) As Integer<br>        Dim x As Integer, y As Integer<br> <br>        n = roads.Length<br>        ReDim bcc(n - 1, n - 1)<br>        ReDim cc(n - 1, n - 1)<br>        For y = 0 To roads.Length - 1<br>            For x = 0 To roads.Length - 1<br>                bcc(x, y) = Val(roads(y).Chars(x))<br>            Next<br>        Next<br> <br> <br>        Dim iFrom As Integer, iTo As Integer, best As Integer, v As Integer, tv As Integer<br> <br>        best = 10000000<br> <br>        For iFrom = 0 To n - 1<br>            For iTo = iFrom + 1 To n - 1<br> <br>                For x = 0 To n - 1<br>                    For y = 0 To n - 1<br>                        cc(x, y) = bcc(x, y)<br>                    Next<br>                Next<br> <br>                tv = 0<br>                v = -1<br>                While v &lt;&gt; 0<br>                    v = FindPath(iFrom, iTo, n)<br>                    tv += v<br>                End While<br> <br>                If tv &lt; best Then best = tv<br> <br>            Next<br>        Next<br> <br>        Return best<br>    End Function<br> <br>    Private Function FindPath(ByVal iStart As Integer, ByVal iEnd As Integer, ByVal n As Integer) As Integer<br>        Dim i As Integer<br>        Dim iP As Integer, iT As Integer<br> <br>        ReDim ttt(n - 1)<br>        ReDim prev(n - 1)<br>        For i = 0 To n - 1<br>            ttt(i) = INF<br>        Next<br> <br>        qp.Clear()<br>        prev(iStart) = -1<br>        ttt(iStart) = 0<br>        qp.Enqueue(iStart)<br> <br>        While qp.Count &gt; 0<br>            iP = qp.Dequeue()<br>            iT = ttt(iP)<br> <br>            For i = 0 To n - 1<br>                If cc(iP, i) &gt; 0 Then<br>                    If iT + 1 &lt; ttt(i) Then<br>                        prev(i) = iP<br>                        ttt(i) = iT + 1<br>                        If i = iEnd Then<br>                            Dim am As Integer<br>                            am = FindCap(iEnd)<br>                            DecAll(iEnd, am)<br>                            Return am<br>                        End If<br>                        qp.Enqueue(i)<br>                    End If<br>                End If<br>            Next<br> <br>        End While<br> <br>        Return 0<br>    End Function<br> <br>    Private Sub DecAll(ByVal iTarget As Integer, ByVal am As Integer)<br>        Dim iPrev As Integer<br> <br>        While True<br>            iPrev = prev(iTarget)<br>            If iPrev = -1 Then Exit Sub<br>            cc(iPrev, iTarget) -= am<br>            cc(iTarget, iPrev) += am<br>            iTarget = iPrev<br>        End While<br>    End Sub<br> <br> <br>    Private Function FindCap(ByVal iTarget As Integer) As Integer<br>        Dim amount As Integer, iPrev As Integer<br>        amount = INF<br> <br>        While True<br>            iPrev = prev(iTarget)<br>            If iPrev = -1 Then Return amount<br>            If cc(iPrev, iTarget) &lt; amount Then amount = cc(iPrev, iTarget)<br>            iTarget = iPrev<br>        End While<br> <br>    End Function<br> <br> <br> <br>End Class<br></td>