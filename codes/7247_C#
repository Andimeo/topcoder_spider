<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections.Generic;<br><br>public class NewMagicSquare {<br>  public string[] completeTheSquare(string[] square) {<br>    int[,] sq = new int[5, 5];<br>    bool[] used = new bool[26];<br>    for (int i = 0; i &lt; 5; ++i)<br>      for (int j = 0; j &lt; 5; ++j)<br>      {<br>        string s = square[i].Substring(j * 3, 2);<br>        if (s == "??")<br>          sq[i, j] = -1;<br>        else<br>        {<br>          sq[i, j] = int.Parse(s);<br>          used[sq[i, j]] = true;<br>        }<br>      }<br>    if (!possible(sq, used))<br>      return new string[0];<br>    else<br>    {<br>      for (int i = 0; i &lt; 5; ++i)<br>        for (int j = 0; j &lt; 5; ++j)<br>        {<br>          if (sq[i, j] &lt; 0)<br>          {<br>            for (int a = 1; a &lt;= 25; ++a)<br>              if (!used[a])<br>              {<br>                sq[i, j] = a;<br>                used[a] = true;<br>                if (possible(sq, used))<br>                  break;<br>                used[a] = false;<br>                sq[i, j] = -1;<br>              }<br>          }<br>        }<br>      string[] res = new string[5];<br>      for (int i = 0; i &lt; 5; ++i)<br>      {<br>        string s = "";<br>        for (int j = 0; j &lt; 5; ++j)<br>        {<br>          string t = sq[i, j] + "";<br>          if (t.Length &lt; 2) t = "0" + t;<br>          if (j &gt; 0)<br>            s += " ";<br>          s += t;<br>        }<br>        res[i] = s;<br>      }<br>      return res;<br>    }<br>  }<br>  <br>  class Segment : IComparable&lt;Segment&gt;<br>  {<br>    public int l;<br>    public int r;<br><br>    public Segment(int l, int r)<br>    {<br>      this.l = l;<br>      this.r = r;<br>    }<br><br>    public int CompareTo(Segment other)<br>    {<br>      return l.CompareTo(other.l);<br>    }<br>  }<br><br>  private bool possible(int[,] sq, bool[] used)<br>  {<br>    List&lt;Segment&gt; l = new List&lt;Segment&gt;();<br>    <br>    for (int i = 0; i &lt; 5; ++i)<br>    {<br>      int min = 0;<br>      int sj = 0;<br>      for (int j = 0; j &lt;= 5; ++j)<br>        if (j == 5 || sq[i, j] &gt;= 0)<br>        {<br>          int max = j == 5 ? 26 : sq[i, j];<br>          if (min &gt;= max)<br>            return false;<br>          for (int k = sj; k &lt; j; ++k)<br>            l.Add(new Segment(min, max));<br>          sj = j + 1;<br>          min = max;<br>        }<br>    }<br>    <br>    l.Sort();<br>    int lAt = 0;<br>    int[] nr = new int[27];<br>    <br>    for (int a = 1; a &lt;= 25; ++a)<br>      if (!used[a])<br>      {<br>        while (lAt &lt; l.Count &amp;&amp; l[lAt].l &lt; a)<br>        {<br>          ++nr[l[lAt].r];<br>          ++lAt;<br>        }<br>        bool ok = false;<br>        for (int i = a + 1; i &lt;= 26; ++i)<br>          if (nr[i] &gt; 0)<br>          {<br>            --nr[i];<br>            ok = true;<br>            break;<br>          }<br>        if (!ok)<br>          return false;<br>      }<br>    return true;<br>  }<br><br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003] [modified for C# by Petr]<br>// Powered by CodeProcessor<br></td>