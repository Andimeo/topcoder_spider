<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br> <br>public class NewMagicSquare {<br>    boolean[][] c;<br>    boolean[] u;<br>    int[] p;<br>    int n;<br> <br>    boolean dfs(int x) {<br>        u[x] = true;<br>        for (int i = 0; i &lt; n; i++) {<br>            if (c[x][i]) {<br>                if (p[i] == -1 || (!u[p[i]] &amp;&amp; dfs(p[i])) ) {<br>                    p[i] = x;<br>                    return true;<br>                }<br>            }<br>        }<br>        return false;<br>    }<br> <br>    boolean match(boolean[][] adj) {<br>        n = adj.length;<br>        c = adj;<br>        u = new boolean[n];<br>        p = new int[n];<br>        Arrays.fill(p, -1);<br>        for (int i = 0; i &lt; n; i++) {<br>            Arrays.fill(u, false);<br>            if (!dfs(i)) {<br>                return false;<br>            }<br>        }<br>        return true;<br>    }<br> <br>    boolean valid(int[][] a) {<br>        for (int i = 0; i &lt; 5; i++) {<br>            for (int j = 0; j &lt; 5; j++) {<br>                for (int k = j + 1; k &lt; 5; k++) {<br>                    if (a[i][j] != -1 &amp;&amp; a[i][k] != -1 &amp;&amp; a[i][j] &gt; a[i][k]) {<br>                        return false;<br>                    }<br>                }<br>            }<br>        }<br>        return true;<br>    }<br> <br>    boolean possible(int[][] a) {<br>        boolean[] ex = new boolean[25];<br> <br>        int m = 0;<br>        for (int i = 0; i &lt; 5; i++) {<br>            for (int j = 0; j &lt; 5; j++) {<br>                if (a[i][j] != -1) {<br>                    ex[a[i][j]] = true;<br>                } else {<br>                    m++;<br>                }<br>            }<br>        }<br> <br>        boolean[][] b = new boolean[m][m];<br> <br>        int q = 0;<br>        for (int i = 0; i &lt; 25; i++) {<br>            if (ex[i]) {<br>                continue;<br>            }<br>            int p = 0;<br>            for (int j = 0; j &lt; 5; j++) {<br>                for (int k = 0; k &lt; 5; k++) {<br>                    if (a[j][k] == -1) {<br>                        boolean ok = true;<br>                        for (int v = 0; v &lt; k; v++) {<br>                            if (a[j][v] != -1 &amp;&amp; a[j][v] &gt; i) {<br>                                ok = false;<br>                            }<br>                        }<br>                        for (int v = k + 1; v &lt; 5; v++) {<br>                            if (a[j][v] != -1 &amp;&amp; a[j][v] &lt; i) {<br>                                ok = false;<br>                            }<br>                        }<br> <br>                        b[q][p] = ok;<br> <br>                        p++;<br>                    }<br>                }<br>            }<br>            q++;<br>        }<br> <br>        return match(b);<br>    }<br> <br>    public String[] completeTheSquare(String[] square) {<br>        int[][] a = new int[5][5];<br> <br>        boolean[] ex = new boolean[25];<br>        for (int i = 0; i &lt; 5; i++) {<br>            StringTokenizer st = new StringTokenizer(square[i]);<br>            for (int j = 0; j &lt; 5; j++) {<br>                String s = st.nextToken();<br>                if (s.equals("??")) {<br>                    a[i][j] = -1;<br>                } else {<br>                    a[i][j] = Integer.parseInt(s) - 1;<br>                    ex[a[i][j]] = true;<br>                }<br>            }<br>        }<br> <br>        for (int i = 0; i &lt; 5; i++) {<br>            fill:<br>            for (int j = 0; j &lt; 5; j++) {<br>                if (a[i][j] != -1) {<br>                    continue;<br>                }<br> <br>                for (int k = 0; k &lt; 25; k++) {<br>                    if (!ex[k]) {<br>                        a[i][j] = k;<br>                        if (valid(a) &amp;&amp; possible(a)) {<br>                            ex[k] = true;<br>                            continue fill;<br>                        }<br>                    }<br>                }<br> <br>                return new String[]{};<br>            }<br>        }<br> <br>        String[] res = new String[5];<br>        for (int i = 0; i &lt; 5; i++) {<br>            res[i] = "";<br>            for (int j= 0; j &lt; 5; j++) {<br>                res[i] += "" + ((a[i][j] + 1) / 10) + ((a[i][j] + 1) % 10);<br>                if (j &lt; 4) {<br>                    res[i] += " ";<br>                }<br>            }<br>        }<br>        return res;<br>    }<br> <br> <br>}<br> <br> <br>// Powered by PopsEdit<br> <br>// Powered by CodeProcessor<br></td>