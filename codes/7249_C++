<td class="problemText" colspan="8" valign="middle" align="left">
            #include&lt;algorithm&gt; <br>#include&lt;sstream&gt;<br>#include&lt;string&gt; <br>#include&lt;vector&gt; <br>using namespace std; <br>  <br>#define FOR(i,a,b) for(int i = (a); i &lt; (b); ++i) <br>#define REP(i,n) FOR(i,0,n) <br>#define FORE(it,x) for(typeof(x.begin()) it=x.begin();it!=x.end();++it) <br>#define pb push_back <br>#define all(x) (x).begin(),(x).end() <br>#define CLEAR(x,with) memset(x,with,sizeof(x)) <br>#define sz size() <br>typedef long long ll;<br>struct EncodedSum<br>{<br>  long long maximumSum(vector &lt;string&gt; numbers)<br>  {<br>    long long pow[15];<br>    pow[0] = 1; FOR(i,1,15) pow[i] = pow[i-1] * 10;<br>    ll sum[10]; REP(i,10) sum[i] = 0;<br>    vector&lt;bool&gt; canZero(10, true);<br>    REP(i,numbers.sz)<br>    {<br>      REP(j,numbers[i].sz)<br>      {<br>        sum[numbers[i][j]-'A'] += pow[numbers[i].sz-j-1];<br>      }  <br>      canZero[numbers[i][0]-'A'] = false;<br>    }<br>    vector&lt;int&gt; assign;<br>    REP(i,10) assign.pb(i);<br>    ll ret = 0;<br>    do<br>    {<br>      if(canZero[assign[0]])<br>      {<br>        ll cand = 0;<br>        REP(i,10) cand += sum[assign[i]] * i;<br>        ret &gt;?= cand;        <br>      }<br>    } while(next_permutation(all(assign)));<br>    return ret;<br>  }<br>};<br></td>