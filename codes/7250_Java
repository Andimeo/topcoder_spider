<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>public class LightsCube {<br>    public int[] count(int N, String[] lights) {<br>      int[][][] cube = new int[N][N][N];<br>      int[][][] next = new int[N][N][N];<br>      for (int i=0; i &lt; N; i++)<br>        for (int j=0;j &lt; N; j++)<br>          for (int k=0; k &lt; N; k++)<br>            cube[i][j][k] = -1;<br>      for (int i=0; i &lt; lights.length; i++) {<br>        StringTokenizer st = new StringTokenizer(lights[i]);<br>        int x = Integer.parseInt(st.nextToken());<br>        int y = Integer.parseInt(st.nextToken());<br>        int z = Integer.parseInt(st.nextToken());<br>        cube[x][y][z] = i;<br>      }<br>      <br>      for (int it=0; it&lt;200; it++) {<br>        for (int i=0; i &lt; N; i++)<br>          for (int j=0; j &lt; N; j++)<br>            for (int k=0; k &lt; N; k++) {<br>              if (cube[i][j][k] != -1) {<br>                next[i][j][k] = cube[i][j][k];<br>                continue;<br>              }<br>              int best = 1000;<br>              if (i+1&lt;N &amp;&amp; cube[i+1][j][k] != -1) best = Math.min(best, cube[i+1][j][k]);<br>              if (i-1&gt;=0 &amp;&amp; cube[i-1][j][k] != -1) best = Math.min(best, cube[i-1][j][k]);<br>              if (j+1&lt;N &amp;&amp; cube[i][j+1][k] != -1) best = Math.min(best, cube[i][j+1][k]);<br>              if (j-1&gt;=0 &amp;&amp; cube[i][j-1][k] != -1) best = Math.min(best, cube[i][j-1][k]);<br>              if (k+1&lt;N &amp;&amp; cube[i][j][k+1] != -1) best = Math.min(best, cube[i][j][k+1]);<br>              if (k-1&gt;=0 &amp;&amp; cube[i][j][k-1] != -1) best = Math.min(best, cube[i][j][k-1]);<br>              if (best != 1000) next[i][j][k] = best;<br>              else next[i][j][k] = cube[i][j][k];<br>            }<br>        for (int i=0; i &lt; N; i++)<br>          for (int j=0; j &lt; N; j++)<br>            for (int k=0; k &lt; N; k++)<br>              cube[i][j][k] = next[i][j][k];<br>      }<br>        <br>        int[] res = new int[lights.length];<br>        Arrays.fill(res, 0);<br>        for (int i=0; i &lt; N; i++)<br>          for (int j=0; j &lt; N; j++)<br>            for (int k=0; k &lt; N; k++)<br>              res[cube[i][j][k]]++;<br>        return res;<br>    }<br><br>}<br><br><br><br>// Powered by FileEdit<br>// Powered by CodeProcessor<br></td>