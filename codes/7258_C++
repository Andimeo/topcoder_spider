<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;vector&gt;<br>#include &lt;list&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;deque&gt;<br>#include &lt;stack&gt;<br>#include &lt;bitset&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;functional&gt;<br>#include &lt;numeric&gt;<br>#include &lt;utility&gt;<br>#include &lt;sstream&gt;<br>#include &lt;iostream&gt;<br>#include &lt;iomanip&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;ctime&gt;<br> <br>using namespace std;<br> <br>#define FOR(i,a,b) for(int i=(a);i&lt;(b);++i)<br>#define REP(i,n) FOR(i,0,n)<br>#define ALL(a) (a).begin(),a.end()<br>#define SORT(a) sort(ALL(a))<br>#define SZ(a) ((int) a.size())<br>#define pb push_back<br> <br>class CarParking {<br>public:<br>  int closestShed(int, int);<br>};<br> <br>int CarParking::closestShed(int now, int streets) {<br>  int ans = INT_MAX;<br>  int res = -1;<br>  for(int i = 0; i &lt; 100000; i++) {<br>    for(int j = -1; j&lt; 10;j++) {<br>      long long a = i;<br>      if (j!=-1) a=a*10+j;<br>      int temp = i;<br>      while (temp!=0) {<br>        a=a*10+temp%10;<br>        temp/=10;<br>      }<br>      if (a &lt;= streets &amp;&amp; (ans &gt; abs(now - a) || (ans==abs(now-a) &amp;&amp; a&lt;res))) {<br>        res = a;<br>        ans = abs(now-a);<br>      }<br>    }<br>  }<br>  return res;<br>}<br> <br> <br>//Powered by [KawigiEdit] 2.0!<br></td>