<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br><br>/** <br> * @author Roman Elizarov<br> */<br>public class TableLabel {<br>  String[][] t;<br>  int n;<br>  int m;<br>  String[] sol;<br>  String[] rl;<br>  String[] cl;<br>  boolean multiple;<br><br>  public String[] labels(String[] table) {<br>    n = table.length;<br>    t = new String[n][];<br>    for (int i = 0; i &lt; n; i++) {<br>      StringTokenizer st = new StringTokenizer(table[i]);<br>      int m = st.countTokens();<br>      t[i] = new String[m];<br>      for (int j = 0; j &lt; m; j++) {<br>        t[i][j] = st.nextToken();<br>      }<br>    }<br>    m = t[0].length;<br>    rl = new String[n];<br>    cl = new String[m];<br>  mloop:<br>    for (int sp = 1; sp &lt; t[0][0].length(); sp++) {<br>      rl[0] = t[0][0].substring(0, sp);<br>      cl[0] = t[0][0].substring(sp);<br>      boolean ok = true;<br>      for (int j = 1; j &lt; m; j++) {<br>        ok &amp;= t[0][j].length() &gt; sp &amp;&amp; t[0][j].startsWith(rl[0]);<br>      }<br>      if (!ok)<br>        continue;<br>      for (int j = 1; j &lt; m; j++) {<br>        cl[j] = t[0][j].substring(sp);<br>      }<br>      for (int i = 1; i &lt; n; i++) {<br>        ok &amp;= t[i][0].length() &gt; cl[0].length() &amp;&amp; t[i][0].endsWith(cl[0]);<br>        if (!ok)<br>          continue mloop;<br>        rl[i] = t[i][0].substring(0, t[i][0].length() - cl[0].length());<br>        for (int j = 1; j &lt; m; j++) {<br>          ok &amp;= t[i][j].equals(rl[i] + cl[j]);<br>          if (!ok)<br>            continue mloop;<br>        }<br>      }<br>      if (sol != null) {<br>        multiple = true;<br>        break;<br>      }<br>      sol = new String[n + m];<br>      System.arraycopy(cl, 0, sol, 0, m);<br>      System.arraycopy(rl, 0, sol, m, n);<br>    }<br>    if (multiple)<br>      return new String[] { "multiple" };<br>    if (sol == null)<br>      return new String[] { "none" };<br>    return sol;<br>  }<br><br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by RETester [based on ExampleBuilder]<br>// Powered by CodeProcessor<br></td>