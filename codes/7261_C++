<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;iostream&gt;<br>#include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;queue&gt;<br>#include &lt;sstream&gt;<br> <br>using namespace std;<br> <br>pair&lt;int, int&gt; P[] = { make_pair(0,1), make_pair(1,2), make_pair(0,2) };<br> <br>typedef long long li;<br> <br>inline li newton(int n, int k) {<br>    li res = 1;<br> <br>    for ( int i = 1; i &lt;= k; i++ ) {<br>        res = ( res * (n - i + 1) ) / i;<br>    }<br> <br>    return res;<br>}<br> <br> <br>class ChristmasTree { <br>    private: <br>        long long rek( int N, int red, int green, int blue, int fin ) {<br>            if ( blue &lt; 0 or red &lt; 0 or green &lt; 0 )<br>                return 0;<br>            <br>            if ( N == fin ) <br>                return 1;<br> <br>            long long res = 0;<br>            <br>            if ( N % 3 == 0 ) {<br>                    res += rek( N+1, red - N/3, green - N/3, blue - N/3, fin ) * newton(N, N/3) * newton(N - N/3, (N-N/3)/2);<br>            }<br>            if ( N % 2 == 0 ) {<br>                res += rek( N+1, red - N/2, green - N/2, blue, fin ) * newton( N, N/2 );<br>                res += rek( N+1, red - N/2, green, blue - N/2, fin ) * newton( N, N/2 );<br>                res += rek( N+1, red, green - N/2, blue - N/2, fin ) * newton( N, N/2 );<br>            }<br>            <br>            res += rek( N+1, red - N, green, blue, fin );<br>            res += rek( N+1, red, green - N, blue, fin );<br>            res += rek( N+1, red, green, blue - N, fin );<br> <br>            return res;<br>        }<br>    public: <br>        long long decorationWays(int N, int red, int green, int blue) { <br>            return rek( 1, red, green, blue, N + 1);<br>            <br>        } <br> <br>        <br>        <br> <br>}; <br> <br> <br> <br> <br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003]<br>// Powered by CodeProcessor<br></td>