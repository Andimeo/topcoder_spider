<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections.Generic;<br><br>public class HiddenSquares {<br>  public int count(int[] x1, int[] y1, int[] x2, int[] y2) {<br>    int width;<br>    int height;<br>    int[] deltaX;<br>    int[] deltaY;<br>    compress(x1, x2, out width, out deltaX);<br>    compress(y1, y2, out height, out deltaY);<br>    bool[,] haveRight = new bool[width + 1, height + 1];<br>    bool[,] haveDown = new bool[width + 1, height + 1];<br>    for (int i = 0; i &lt; x1.Length; ++i)<br>    {<br>      for (int j = x1[i]; j &lt; x2[i]; ++j)<br>      {<br>        haveRight[j, y1[i]] = true;<br>        haveRight[j, y2[i]] = true;<br>      }<br>      for (int j = y1[i]; j &lt; y2[i]; ++j)<br>      {<br>        haveDown[x1[i], j] = true;<br>        haveDown[x2[i], j] = true;<br>      }<br>    }<br>    int[,] maxRight = new int[width + 1, height + 1];<br>    int[,] maxDown = new int[width + 1, height + 1];<br>    for (int i = width - 1; i &gt;= 0; --i)<br>      for (int j = height - 1; j &gt;= 0; --j)<br>      {<br>        if (haveRight[i, j]) maxRight[i, j] = deltaX[i] + maxRight[i + 1, j];<br>        if (haveDown[i, j]) maxDown[i, j] = deltaY[j] + maxDown[i, j + 1];<br>      }<br>    int res = 0;<br>    for (int x = 0; x &lt; width; ++x)<br>      for (int y = 0; y &lt; height; ++y)<br>      {<br>        int sx = 0;<br>        int sy = 0;<br>        int xx = x;<br>        int yy = y;<br>        while (true)<br>        {<br>          if (sx &lt; sy)<br>          {<br>            if (!haveRight[xx, y])<br>              break;<br>            sx += deltaX[xx];<br>            ++xx;<br>          }<br>          else<br>          {<br>            if (!haveDown[x, yy])<br>              break;<br>            sy += deltaY[yy];<br>            ++yy;<br>          }<br>          if (sx == sy)<br>            if (maxRight[x, yy] &gt;= sx &amp;&amp; maxDown[xx, y] &gt;= sx)<br>              ++res;<br>        }<br>      }<br>    return res;<br>  }<br><br>  void compress(int[] a1, int[] a2, out int num, out int[] delta)<br>  {<br>    Dictionary&lt;int, int&gt; c = new Dictionary&lt;int, int&gt;();<br>    foreach (int x in a1)<br>      c[x] = 0;<br>    foreach (int x in a2)<br>      c[x] = 0;<br>    int[] all = new int[c.Count];<br>    c.Keys.CopyTo(all, 0);<br>    Array.Sort(all);<br>    for (int i = 0; i &lt; all.Length; ++i)<br>      c[all[i]] = i;<br>    for (int i = 0; i &lt; a1.Length; ++i)<br>      a1[i] = c[a1[i]];<br>    for (int i = 0; i &lt; a2.Length; ++i)<br>      a2[i] = c[a2[i]];<br>    num = all.Length;<br>    delta = new int[num];<br>    for (int i = 0; i &lt; num - 1; ++i)<br>      delta[i] = all[i + 1] - all[i];<br>  }<br><br><br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003] [modified for C# by Petr]<br>// Powered by CodeProcessor<br></td>