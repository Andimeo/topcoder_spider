<td class="problemText" colspan="8" valign="middle" align="left">
            // Powered by MB__ClearCode v3.1-4<br>#include &lt;sstream&gt;<br>#include &lt;string&gt;<br>#include &lt;vector&gt;<br>#define sz size()<br>#define dsz size()-1<br>#define sign (signed int)<br>#define FALL(ii,vv) for ((ii) = 0;sign (ii) &lt;= sign (vv).dsz;(ii)++)<br>template&lt;typename _T, typename _S&gt; _T cast(_S _a) { std::stringstream _s; _s &lt;&lt; _a; _T _r; _s &gt;&gt; _r; return _r; }<br>template&lt;typename end_type&gt; std::vector&lt;end_type&gt; split( const std::string&amp; s, const std::string&amp; delim =" " ){ std::vector&lt;end_type&gt; res; std::string t;for ( int i = 0 ; i != s.size() ; i++ ) { if ( delim.find( s[i] ) != std::string::npos ) { if ( !t.empty() ) { res.push_back(cast&lt;end_type&gt;(t));  t = ""; }} else { t += s[i]; } } if ( !t.empty() ) { res.push_back(cast&lt;end_type&gt;(t)); } return res;}<br>#define vi vector&lt;int&gt;<br>#define vs vector&lt;string&gt;<br>using namespace std;<br><br>class AnswerEvaluation<br>{<br>public:<br>  int getScore(vs keyw, vi scores, string answer) <br>  {<br>    int ret=0,i,j;<br>    vs ans=split&lt;string&gt;(answer);<br>    FALL(i,keyw){<br>      FALL(j,ans)<br>        if (ans[j]==keyw[i])break;<br>      if (j!=ans.sz)ret+=scores[i];      <br>    }<br>    return ret;<br>  }<br>  // TESTCODE<br>};<br>//END<br>// Powered by CodeProcessor<br></td>