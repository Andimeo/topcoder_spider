<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>import java.math.BigInteger;<br> <br>public class RepeatedPatterns {<br>    public long findZeroSegment(String P1, String P2, String zeroCount) {<br>        long z = Long.parseLong(zeroCount);<br> <br>        long p1p = 0;<br>        int i = 0;<br>        while (i &lt; P1.length() &amp;&amp; P1.charAt(i) == '0') {<br>            i++;<br>        }<br>        p1p = i;<br>        long p1s = 0;<br>        i = P1.length() - 1;<br>        while (i &gt;= 0 &amp;&amp; P1.charAt(i) == '0') {<br>            i--;<br>        }<br>        p1s = P1.length() - i - 1;<br> <br>        long p2p = 0;<br>        i = 0;<br>        while (i &lt; P2.length() &amp;&amp; P2.charAt(i) == '0') {<br>            i++;<br>        }<br>        p2p = i;<br>        long p2s = 0;<br>        i = P2.length() - 1;<br>        while (i &gt;= 0 &amp;&amp; P2.charAt(i) == '0') {<br>            i--;<br>        }<br>        p2s = P2.length() - i - 1;<br> <br>        if (p1p == P1.length()) {<br>            if (p2p == P2.length()) {<br>                return 0L;<br>            } else {<br>                if (z &lt;= 1000000L * p1p + p2p) {<br>                    return 0L;<br>                } else if (z &lt;= 1000000L * p1p + p2p + p2s) {<br>                    return 1000000L * p1p + P2.length() - p2s;<br>                } else {<br>                    return -1;<br>                }<br>            }<br>        } else {<br>            if (z &lt;= 2 * P1.length()) {<br>                String q = "";<br>                for (i = 0; i &lt; z; i++) {<br>                    q += "0";<br>                }<br>                if ((P1 + P1).indexOf(q) != -1) {<br>                    return (P1 + P1).indexOf(q);<br>                }<br>            }<br> <br>            if (z &lt;= P1.length() + P2.length() + P1.length()) {<br>                String q = "";<br>                for (i = 0; i &lt; z; i++) {<br>                    q += "0";<br>                }<br>                if ((P1 + P2 + P1).indexOf(q) != -1) {<br>                    return (P1 + P2 + P1).indexOf(q) + 999999L * P1.length();<br>                }<br>            }<br> <br>            if (z &lt;= P1.length() + P2.length() + P2.length() + P1.length()) {<br>                String q = "";<br>                for (i = 0; i &lt; z; i++) {<br>                    q += "0";<br>                }<br>                if ((P1 + P2 + P2 + P1).indexOf(q) != -1) {<br>                    return (P1 + P2 + P2 + P1).indexOf(q) + 1999999L * P1.length() + P2.length();<br>                }<br>            }<br> <br>            if (p2p == P2.length()) {<br>                long x = (z - p1p - p1s + p2p - 1) / p2p;<br>                if (x &lt; 0) {<br>                    x = 0;<br>                }<br> <br>                BigInteger xx = BigInteger.valueOf(x);<br>                BigInteger a = xx.multiply(BigInteger.valueOf(1000000)).multiply(BigInteger.valueOf(P1.length()));<br>                BigInteger b = xx.multiply(xx.subtract(BigInteger.ONE)).divide(BigInteger.valueOf(2)).multiply(BigInteger.valueOf(P2.length()));<br>                a = a.add(b).subtract(BigInteger.valueOf(p1s));<br>                if (a.add(BigInteger.valueOf(z)).compareTo(BigInteger.valueOf(10000000000000000L)) &gt; 0) {<br>                    return -1;<br>                }<br>                return a.longValue();<br>            }<br> <br>            return -1;<br>        }<br>    }<br> <br> <br>}<br> <br> <br>// Powered by PopsEdit<br> <br>// Powered by CodeProcessor<br></td>