<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;algorithm&gt;<br>#include &lt;bitset&gt;<br>#include &lt;cassert&gt;<br>#include &lt;cctype&gt;<br>#include &lt;cmath&gt;<br>#include &lt;complex&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cstring&gt;<br>#include &lt;ctime&gt;<br>#include &lt;deque&gt;<br>#include &lt;fstream&gt;<br>#include &lt;iostream&gt;<br>#include &lt;iterator&gt;<br>#include &lt;list&gt;<br>#include &lt;map&gt;<br>#include &lt;numeric&gt;<br>#include &lt;queue&gt;<br>#include &lt;set&gt;<br>#include &lt;sstream&gt;<br>#include &lt;stack&gt;<br>#include &lt;string&gt;<br>#include &lt;utility&gt;<br>#include &lt;valarray&gt;<br>#include &lt;vector&gt;<br><br>using namespace std;<br><br>//Macroses<br>#define all(v) (v).begin(), (v).end()<br><br>//Types<br>typedef long long ll;<br>typedef pair &lt;int, int&gt; pii;<br>typedef vector &lt;int&gt; vi;<br>typedef vector &lt;bool&gt; vb;<br>typedef vector &lt;pii&gt; vp;<br>typedef vector &lt;double&gt; vd;<br>typedef queue &lt;pii&gt; qp;<br><br>//Constants<br>const int INF = 1000000000;<br>const double EPS = 1e-10;<br>const double PI = 3.1415926535897932384626433832795;<br><br>//Global<br>int n;<br><br>//Functions<br><br>//Main class<br>class ThreeBuses<br>{<br>public:<br>  double getProbability(vector &lt;int&gt; w, vector &lt;int&gt; travel, int tr)<br>    {<br>    double res;<br>    double t = tr;<br>    t -= travel[0] + travel[1] + travel[2];<br>    if (t &lt; -EPS)<br>      return 0;<br>    if (w[0] == 0 &amp;&amp; w[1] == 0 &amp;&amp; w[2] == 0)<br>      return 1;<br>    if (w[0] + w[1] + w[2] &lt; t - EPS)<br>      return 1;<br>    sort(all(w));<br>    if (w[1] == 0)<br>      return double(t) / w[2];<br>    if (w[0] == 0)<br>    {<br>      if (t &lt;= w[1])<br>        return t * t / w[1] / w[2] / 2;<br>      else if (t &lt;= w[2])<br>        return (2 * w[1] * t - w[1] * w[1]) / w[1] / w[2] / 2;<br>      else<br>        return (2 * w[1] * t + 2 * w[2] * t - w[1] * w[1] - w[2] * w[2] - t * t) / w[1] / w[2] / 2;<br>    }<br>    if (t &lt;= w[0])<br>      return t * t * t / 6 / w[0] / w[1] / w[2];<br>    if (t &lt;= w[1])<br>      return t * t * t / 6 / w[0] / w[1] / w[2] - (t - w[0]) * (t - w[0]) * (t - w[0]) / 6 / w[0] / w[1] / w[2];<br>    if (t &lt;= w[2] &amp;&amp; t &lt;= w[0] + w[1])<br>      return t * t * t / 6 / w[0] / w[1] / w[2] - (t - w[0]) * (t - w[0]) * (t - w[0]) / 6 / w[0] / w[1] / w[2] - (t - w[1]) * (t - w[1]) * (t - w[1]) / 6 / w[0] / w[1] / w[2];<br>    if (t &lt;= w[0] + w[1])<br>      return t * t * t / 6 / w[0] / w[1] / w[2] - (t - w[0]) * (t - w[0]) * (t - w[0]) / 6 / w[0] / w[1] / w[2] - (t - w[1]) * (t - w[1]) * (t - w[1]) / 6 / w[0] / w[1] / w[2] - (t - w[2]) * (t - w[2]) * (t - w[2]) / 6 / w[0] / w[1] / w[2];<br>    if (t &lt;= w[2])<br>      return t * t * t / 6 / w[0] / w[1] / w[2] - (t - w[0]) * (t - w[0]) * (t - w[0]) / 6 / w[0] / w[1] / w[2] - (t - w[1]) * (t - w[1]) * (t - w[1]) / 6 / w[0] / w[1] / w[2] + (t - w[0] - w[1]) * (t - w[0] - w[1]) * (t - w[0] - w[1]) / 6 / w[0] / w[1] / w[2];<br>    t = w[0] + w[1] + w[2] - t;<br>    if (t &lt;= w[0])<br>      return 1 - (t * t * t / 6 / w[0] / w[1] / w[2]);<br>    if (t &lt;= w[1])<br>      return 1 - (t * t * t / 6 / w[0] / w[1] / w[2] - (t - w[0]) * (t - w[0]) * (t - w[0]) / 6 / w[0] / w[1] / w[2]);<br>    if (t &lt;= w[2] &amp;&amp; t &lt;= w[0] + w[1])<br>      return 1 - (t * t * t / 6 / w[0] / w[1] / w[2] - (t - w[0]) * (t - w[0]) * (t - w[0]) / 6 / w[0] / w[1] / w[2] - (t - w[1]) * (t - w[1]) * (t - w[1]) / 6 / w[0] / w[1] / w[2]);<br>    if (t &lt;= w[0] + w[1])<br>      return 1 - (t * t * t / 6 / w[0] / w[1] / w[2] - (t - w[0]) * (t - w[0]) * (t - w[0]) / 6 / w[0] / w[1] / w[2] - (t - w[1]) * (t - w[1]) * (t - w[1]) / 6 / w[0] / w[1] / w[2] - (t - w[2]) * (t - w[2]) * (t - w[2]) / 6 / w[0] / w[1] / w[2]);<br>    if (t &lt;= w[2])<br>      return 1 - (t * t * t / 6 / w[0] / w[1] / w[2] - (t - w[0]) * (t - w[0]) * (t - w[0]) / 6 / w[0] / w[1] / w[2] - (t - w[1]) * (t - w[1]) * (t - w[1]) / 6 / w[0] / w[1] / w[2] + (t - w[0] - w[1]) * (t - w[0] - w[1]) * (t - w[0] - w[1]) / 6 / w[0] / w[1] / w[2]);<br>    return -1;<br>    }<br>    <br><br>};<br><br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003]<br>// Powered by CodeProcessor<br></td>