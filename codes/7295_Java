<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>public class ThreeBuses {<br>    public double getProbability(int[] wait, int[] travel, int timeLeft) {<br>      long[] w = new long[3];<br>      for (int i = 0; i &lt; 3; i++) {<br>      w[i] = wait[i];<br>    }<br>      int tl = timeLeft - travel[0] - travel[1] - travel[2];<br>      if (tl &lt; 0)<br>        return 0;<br>      Arrays.sort(w);      <br>      long vi = w[0] * w[1] * w[2];          <br>      if (vi == 0) {<br>        if (w[1] == 0) {<br>          if (tl &gt;= w[2]) {<br>            return 1;<br>          } else {<br>            return (double) tl / w[2]; <br>          }<br>        }<br>        else {<br>          double v = (double) w[1] * w[2];<br>          double v1 = f2(tl);<br>          if (tl &gt; w[1])<br>            v1 -= f2(tl - w[1]);<br>          if (tl &gt; w[2])<br>            v1 -= f2(tl - w[2]);<br>          return Math.min(1, v1 / v);<br>        }        <br>      }<br>      double v1 = f(tl);<br>      for (long i : w) {<br>        if (tl &gt; i) {<br>          v1 -= f(tl - i);<br>        }<br>      }<br>      <br>      double ws = w[0] + w[1] + w[2];<br>      <br>      for (long i : w) {<br>        if (tl &gt; ws - i) {<br>          v1 += f(tl - (ws - i));<br>        }<br>      }            <br><br>    return Math.min(1, v1 / vi);        <br>    }<br><br>    private double f(double tl) {<br>    return tl * tl * tl / 6;<br>  }<br>  <br>  double f2(double tl) {<br>    return tl * tl / 2; <br>  }<br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by RETester [based on ExampleBuilder]<br>// Powered by CodeProcessor<br></td>