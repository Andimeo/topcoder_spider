<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Text;<br>using System.Text.RegularExpressions;<br>using System.Collections.Generic;<br><br>public class Prefixes<br>{<br>    string findCommon(string s1, string s2)<br>    {<br>        string res = "";<br>        for (int i = 0; i &lt; Math.Min(s1.Length, s2.Length); i++)<br>            if (s1[i] == s2[i]) res += s1[i]; else break;<br>        return res;<br>    }<br>    public string[] prefixList(string[] protein)<br>    {<br>        string[] res;<br>        List&lt;string&gt; l = new List&lt;string&gt;();<br>        List&lt;string&gt; p = new List&lt;string&gt;();<br>        foreach (string s in protein) p.Add(s);<br>        while (p.Count &gt; 0)<br>        {<br>            string longest = "";<br>            for (int i = 0; i &lt; p.Count; i++)<br>                for (int j = i + 1; j &lt; p.Count; j++)<br>                {<br>                    string common = findCommon(p[i], p[j]);<br>                    if (common.Length &gt; longest.Length) longest = common;<br>                    else<br>                        if (common.Length == longest.Length)<br>                            if (longest.CompareTo(common) &gt; 0) longest = common;<br>                }<br>            List&lt;string&gt; t = new List&lt;string&gt;();<br>            for (int i = 0; i &lt; p.Count; i++)<br>                if (findCommon(longest, p[i]).Equals(longest))<br>                {<br>                    t.Add(p[i]);<br>                    p.RemoveAt(i);<br>                    i--;<br>                }<br>            t.Sort();<br>            for (int i = 0; i &lt; t.Count; i++) l.Add(t[i]);<br>            string d = "";<br>            for (int i = 0; i &lt; longest.Length; i++) d += "-";<br>            l.Add(d);<br>        }<br>        res = l.ToArray();<br>        return res;<br>    }<br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by CodeProcessor<br></td>