<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;vector&gt;<br>#include &lt;list&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;deque&gt;<br>#include &lt;stack&gt;<br>#include &lt;bitset&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;functional&gt;<br>#include &lt;numeric&gt;<br>#include &lt;utility&gt;<br>#include &lt;sstream&gt;<br>#include &lt;iostream&gt;<br>#include &lt;iomanip&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;ctime&gt;<br> <br>using namespace std;<br> <br>class AdaptiveRouting {<br>public:<br>  int deliveryTime(vector &lt;string&gt;, vector &lt;int&gt;, int, int);<br>};<br> <br>int w[110][110], w1[110][110];<br> <br>int AdaptiveRouting::deliveryTime(vector &lt;string&gt; layout, vector &lt;int&gt; failed, int A, int B) {<br>  int n = layout.size();<br>  vector&lt;int&gt; a(n), b(n), c(n);<br>  for (int i = 0; i &lt; n; i++) {<br>    stringstream ss(layout[i]);<br>    ss &gt;&gt; a[i] &gt;&gt; b[i] &gt;&gt; c[i];    <br>  }<br>  vector&lt;bool&gt; isf(n, false);<br>  int m = failed.size();<br>  for (int i = 0; i &lt; m; i++) {<br>    isf[failed[i]] = true;<br>  }<br>  memset(w, 63, sizeof(w));<br>  for (int i = 0; i &lt; n; i++) if (!isf[i]) {<br>    w[a[i]][b[i]] &lt;?= c[i];<br>    w[b[i]][a[i]] &lt;?= c[i];<br>  }<br>  for (int i = 0; i &lt; 100; i++) w[i][i] = 0;<br>  for (int k = 0; k &lt; 100; k++) {<br>    for (int i = 0; i &lt; 100; i++) {<br>      for (int j = 0; j &lt; 100; j++) {<br>        if (w[i][k] + w[k][j] &lt; w[i][j]) {<br>          w[i][j] = w[i][k] + w[k][j];<br>        }<br>      }<br>    }<br>  }<br>  int where0 = A, total = 0;<br>  for (;;) {<br>    if (where0 == B) break;<br>    vector&lt;bool&gt; delivered(m, false);<br>    for (int i = 0; i &lt; m; i++) {<br>      delivered[i] = min(w[where0][a[failed[i]]], w[where0][b[failed[i]]]) &lt;= total;<br>    }<br>    memset(w1, 63, sizeof(w1));<br>    for (int i = 0; i &lt; n; i++) if (!isf[i]) {<br>      w1[a[i]][b[i]] &lt;?= c[i];<br>      w1[b[i]][a[i]] &lt;?= c[i];<br>    }<br>    for (int i = 0; i &lt; m; i++) if (!delivered[i]) {<br>      w1[a[failed[i]]][b[failed[i]]] &lt;?= c[failed[i]];<br>      w1[b[failed[i]]][a[failed[i]]] &lt;?= c[failed[i]];<br>    }<br>    for (int i = 0; i &lt; 100; i++) w1[i][i] = 0;<br>    vector&lt;int&gt; best(110, 1000000000), last(110);<br>    best[B] = 0;<br>    vector&lt;bool&gt; mark(110, false);<br>    for (int i = 0; i &lt; 100; i++) {<br>      int cnode = -1;<br>      for (int j = 0; j &lt; 100; j++) {<br>        if (!mark[j] &amp;&amp; (cnode == -1 || best[j] &lt; best[cnode])) cnode = j;<br>      }<br>      mark[cnode] = true;<br>      for (int j = 0; j &lt; 100; j++) if (best[cnode] + w1[cnode][j] &lt; best[j]) {<br>        best[j] = best[cnode] + w1[cnode][j];<br>        last[j] = cnode;<br>      }<br>    }<br>    if (best[where0] == 1000000000) return -1;<br>    int next;<br>    for (int i = 0; i &lt; 100; i++) {<br>      if (i != where0 &amp;&amp; best[i] + w1[i][where0] == best[where0]) {<br>        next = i;<br>        break;<br>      }<br>    }<br>    total += w1[where0][next];<br>    where0 = next;<br>  }<br>  return total;<br>}<br> <br> <br>//Powered by [KawigiEdit] 2.0!<br></td>