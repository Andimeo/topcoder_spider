<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br> <br>class Edge {<br>  public int v, w, sp;<br>  <br>  public Edge(String s) {<br>    String[] x = s.split(" ");<br>    v  = Integer.parseInt(x[0]);<br>    w  = Integer.parseInt(x[1]);<br>    sp = Integer.parseInt(x[2]);<br>  }<br>  <br>}<br> <br>public class AdaptiveRouting {<br> <br>  Edge[] E;<br>  int n,m;<br>  int time[][];<br>  int[] d, p, fst;<br>  final int INF = 1000000001;<br>  boolean f[];<br>  <br>  void calcTimes() {<br>    for (int it=0; it&lt;n; it++)<br>      for (int e=0; e&lt;m; e++) if (!f[e]) {<br>        int v = E[e].v, w = E[e].w, sp = E[e].sp;<br>        for (int j=0; j&lt;m; j++) {<br>          time[v][j] = Math.min(time[v][j], time[w][j]+sp);<br>          time[w][j] = Math.min(time[w][j], time[v][j]+sp);<br>        }<br>      }<br>  }<br>  <br>  void bellman_ford(int st, int curTime) {<br>    Arrays.fill(d, INF);<br>    d[st] = 0;<br>    Arrays.fill(p, -1);<br>    Arrays.fill(fst, -1);<br>    for (int it=0; it&lt;n; it++)<br>      for (int j=0; j&lt;m; j++)<br>        if (time[st][j]&gt;curTime) {<br>          int v = E[j].v, w = E[j].w, sp = E[j].sp;<br>          if ((d[v] &gt; d[w]+sp) || (d[v] == d[w]+sp &amp;&amp; fst[v]&gt;fst[w])) {<br>            d[v] = d[w]+sp;<br>            p[v] = w;<br>            fst[v] = fst[w];<br>            if (fst[w]==-1) fst[v] = v;<br>          }<br>          if ((d[w] &gt; d[v]+sp) || (d[w] == d[v]+sp &amp;&amp; fst[w]&gt;fst[v])) {<br>            d[w] = d[v]+sp;<br>            p[w] = v;<br>            fst[w] = fst[v];<br>            if (fst[v]==-1) fst[w] = w;<br>          }          <br>        }<br>  }<br>  <br>  public int deliveryTime(String[] net, int[] failed, int s, int t) {<br>    m = net.length;<br>    E = new Edge[m];<br>    for (int i=0; i&lt;m; i++)<br>      E[i] = new Edge(net[i]);<br>    f = new boolean[m];<br>    for (int i=0; i&lt;failed.length; i++)<br>      f[failed[i]] = true;<br>    n = Math.max(s, t);<br>    for (int i=0; i&lt;m; i++)<br>      n = Math.max(n, Math.max(E[i].v, E[i].w));<br>    n++;<br>    time = new int[n][m];<br>    for (int i=0; i&lt;n; i++)<br>      for (int j=0; j&lt;m; j++)<br>        time[i][j] = INF;<br>    for (int i=0; i&lt;m; i++) {<br>      if (!f[i]) continue;<br>      time[E[i].v][i] = 0;<br>      time[E[i].w][i] = 0;<br>    }<br>    calcTimes();<br>    int time = 0, curV = s;<br>    d = new int[n];<br>    p = new int[n];<br>    fst = new int[n];<br>    while (curV != t) {<br>      bellman_ford(curV, time);<br>      if (d[t]==INF) return -1;<br>      int next = t;<br>      while (p[next]!=curV) next = p[next];<br>      curV = next;<br>      time += d[curV];<br>    }<br>    return time;<br>  }<br> <br>  public static void main(String[] args) {<br>    String[] l = { "10 12 5", "10 11 2", "11 12 3" };<br>    int[] f = { 2 };<br>    int a = 10, b = 12;<br>    System.out.println(new AdaptiveRouting().deliveryTime(l, f, a, b));<br>  }<br> <br>}<br> <br> <br>// Powered by PopsEdit<br></td>