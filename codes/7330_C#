<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections;<br>using System.Collections.Generic;<br><br>public class Armies <br>{<br>    struct element<br>    {<br>        public element(string n, int x)<br>        {<br>            this.name = n;<br>            this.magic = x;<br>        }<br>        public string name;<br>        public int magic;<br>    }<br><br>  public string[] findOrder(string[] army1, string[] army2) <br>  {<br>        List&lt;element&gt; a1 = new List&lt;element&gt;();<br>        List&lt;element&gt; a2 = new List&lt;element&gt;();<br>        List&lt;string&gt; res = new List&lt;string&gt;();<br>        for (int i = 0; i &lt; army1.Length; ++i)<br>        {<br>            string[] temp = army1[i].Split(' ');<br>            int x = int.Parse(temp[1]);<br>            bool ok = true;<br>            for (int j = 0; j &lt; a1.Count; ++j)<br>            {<br>                if (x &gt; a1[j].magic)<br>                {<br>                    a1.Insert(j, new element(temp[0], x));<br>                    ok = false;<br>                    break;<br>                }<br>            }<br>            if (ok)<br>            {<br>                a1.Add(new element(temp[0], x));<br>            }<br>        }<br>        for (int i = 0; i &lt; army2.Length; ++i)<br>        {<br>            string[] temp = army2[i].Split(' ');<br>            int x = int.Parse(temp[1]);<br>            bool ok = true;<br>            for (int j = 0; j &lt; a2.Count; ++j)<br>            {<br>                if (x &gt; a2[j].magic)<br>                {<br>                    a2.Insert(j, new element(temp[0], x));<br>                    ok = false;<br>                    break;<br>                }<br>            }<br>            if (ok)<br>            {<br>                a2.Add(new element(temp[0], x));<br>            }<br>        }<br>        int sumlength = army1.Length + army2.Length;<br>        int prev = 0;<br>        while (res.Count &lt; sumlength)<br>        {<br>            if (a1.Count &gt; 0 &amp;&amp; a2.Count &gt; 0)<br>            {<br>                if (a1[0].magic &gt; a2[0].magic)<br>                {<br>                    res.Add(a1[0].name);<br>                    prev = 1;<br>                    a1.RemoveAt(0);<br>                }<br>                else if (a1[0].magic &lt; a2[0].magic)<br>                {<br>                    res.Add(a2[0].name);<br>                    prev = 2;<br>                    a2.RemoveAt(0);<br>                }<br>                else<br>                {<br>                    if (prev == 1)<br>                    {<br>                        res.Add(a2[0].name);<br>                        prev = 2;<br>                        a2.RemoveAt(0);<br>                    }<br>                    else if (prev == 2)<br>                    {<br>                        res.Add(a1[0].name);<br>                        prev = 1;<br>                        a1.RemoveAt(0);<br>                    }<br>                    else<br>                    {<br>                        res.Add(a1[0].name);<br>                        prev = 1;<br>                        a1.RemoveAt(0);<br>                    }<br>                }<br>            }<br>            else if (a1.Count &gt; 0)<br>            {<br>                res.Add(a1[0].name);<br>                a1.RemoveAt(0);<br>            }<br>            else<br>            {<br>                res.Add(a2[0].name);<br>                a2.RemoveAt(0);<br>            }<br>        }<br>        return res.ToArray();<br>  }<br><br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003] [modified for C# by r1cs1]<br>// Powered by CodeProcessor<br></td>