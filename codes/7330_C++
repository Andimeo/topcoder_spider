<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;iostream&gt;<br>#include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;functional&gt;<br>#include &lt;numeric&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cmath&gt;<br>#include &lt;queue&gt;<br> <br>using namespace std;<br> <br>vector&lt;int&gt; stovi(string s)<br>{<br>  int p;<br>  string s1;<br>  vector&lt;int&gt; ans;<br>  ans.clear();<br>  s=s+" ";<br>  while (s!="")<br>  {<br>    p=s.find_first_of(' ');<br>    s1=s.substr(0,p);<br>    s.erase(0,p+1);<br>    ans.push_back(atoi(s1.c_str()));<br>  }<br>  return ans;<br>}<br><br>vector&lt;vector&lt;int&gt; &gt; vstovvi(vector&lt;string&gt; s)<br>{<br>  int i;<br>  vector&lt;vector&lt;int&gt; &gt; ans;<br>  ans.clear();<br>  for (i=0;i&lt;s.size();i++)<br>    ans.push_back(stovi(s[i]));<br>  return ans;<br>}<br><br>pair&lt;int,int&gt; makepair(int x,int y)<br>{<br>  pair&lt;int,int&gt; p;<br>  p.first=x;<br>  p.second=y;<br>  return p;<br>}<br><br>class Armies<br>{<br>public:<br>vector &lt;string&gt; findOrder(vector &lt;string&gt; army1, vector &lt;string&gt; army2)<br>{<br>  int i,j,n1,n2,p,msp,bi1,bi2,prev;<br>  string s;<br>  vector&lt;string&gt; a1,a2,ans;<br>  vector&lt;int&gt; d1,d2;<br>  n1=army1.size();<br>  a1.clear();<br>  d1.clear();<br>  for (i=0;i&lt;n1;i++)<br>  {<br>    s=army1[i];<br>    p=s.find_first_of(' ');<br>    a1.push_back(s.substr(0,p));<br>    s.erase(0,p+1);<br>    d1.push_back(atoi(s.c_str()));<br>  }<br>  n2=army2.size();<br>  a2.clear();<br>  d2.clear();<br>  for (i=0;i&lt;n2;i++)<br>  {<br>    s=army2[i];<br>    p=s.find_first_of(' ');<br>    a2.push_back(s.substr(0,p));<br>    s.erase(0,p+1);<br>    d2.push_back(atoi(s.c_str()));<br>  }<br>  ans.clear();<br>  prev=2;<br>  while ((n1&gt;0)||(n2&gt;0))<br>  {<br>    msp=-1;<br>    if (prev==2)<br>    {<br>      for (i=0;i&lt;n1;i++)<br>        if (d1[i]&gt;msp)<br>        {<br>          msp=d1[i];<br>          bi1=1;<br>          bi2=i;<br>        }<br>      for (i=0;i&lt;n2;i++)<br>        if (d2[i]&gt;msp)<br>        {<br>          msp=d2[i];<br>          bi1=2;<br>          bi2=i;<br>        }<br>    }<br>    else<br>    {<br>      for (i=0;i&lt;n2;i++)<br>        if (d2[i]&gt;msp)<br>        {<br>          msp=d2[i];<br>          bi1=2;<br>          bi2=i;<br>        }<br>      for (i=0;i&lt;n1;i++)<br>        if (d1[i]&gt;msp)<br>        {<br>          msp=d1[i];<br>          bi1=1;<br>          bi2=i;<br>        }<br>    }<br>    if (bi1==1)<br>    {<br>      ans.push_back(a1[bi2]);<br>      a1.erase(a1.begin()+bi2);<br>      d1.erase(d1.begin()+bi2);<br>      n1--;<br>      prev=1;<br>    }<br>    else<br>    {<br>      ans.push_back(a2[bi2]);<br>      a2.erase(a2.begin()+bi2);<br>      d2.erase(d2.begin()+bi2);<br>      n2--;<br>      prev=2;<br>    }<br>  }<br>  return ans;<br>}<br>};<br></td>