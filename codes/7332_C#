<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections;<br>using System.Collections.Generic;<br>using System.Collections.Specialized;<br>using System.Text;<br>using System.Text.RegularExpressions;<br> <br>public class FairTournament<br>{<br> <br>    public class bigint<br>    {<br>        public int[] data = new int[100];<br>        public int l = 0;<br> <br>        public void add(bigint o)<br>        {<br>            int n = Math.Max(l,o.l);<br>            int s = 0 , g = 0;<br>            for (int i = 0;i&lt;=n;i++)<br>            {<br>                s = data[i] + o.data[i] + g;<br>                data[i] = s % 10;<br>                g = s / 10;<br>            }<br>            while (g &gt; 0) {<br>                n++;<br>                data[n] = g%10;<br>                g/=10;<br>            }<br>            l = n;<br>        }<br> <br>        public String getstring()<br>        {<br>            string s = "";<br>            for (int i = l; i &gt;= 0; i--)<br>                s = s + (char)(data[i] + '0');<br> <br>            return s;<br>        }<br> <br>        public bool zero()<br>        {<br>            return l == 0 &amp;&amp; data[0] == 0;<br>        }<br>    }<br>  public string countPermutations(int n, int k)<br>  {<br>        int pp = 1&lt;&lt;12;<br>        bigint[] olda = new bigint[pp];<br>        bigint[] newa = new bigint[pp];<br>        for (int j = 0; j &lt; pp; j++) olda[j] = newa[j] = new bigint();<br> <br>        newa[0].data[0] = 1;<br> <br>        for (int i = 0; i &lt; n; i++)<br>        {<br>            olda = newa;<br>            newa = new bigint[pp];<br>            for (int j = 0; j &lt; pp; j++) newa[j] = new bigint();<br>            for (int j = 0; j &lt; pp; j++)<br>                if (!olda[j].zero())<br>                {<br>                    int ii = i + 1;<br>                    int v = j;<br>                    if (ii - k &gt;= 1 &amp;&amp; v % 2 == 0)<br>                    { // must<br>                        newa[v / 2].add(olda[j]);<br>                    }<br>                    else<br>                    {<br>                        v = j / 2;<br>                        for (int kk = ii - k + 1; kk &lt;= ii + k; kk++)<br>                            if (kk &gt;= 1 &amp;&amp; kk &lt;= n)<br>                            {<br>                                int id = kk - (ii - k + 1);<br>                                if (((1 &lt;&lt; id) &amp; v) == 0)<br>                                {<br>                                    int newv = v | (1 &lt;&lt; id);<br>                                    newa[newv].add(olda[j]);<br>                                }<br>                            }<br>                    }<br>                }<br>        }<br>        bigint ans = new bigint();<br>        for (int j = 0; j &lt; pp; j++)<br>            ans.add(newa[j]);<br>        return ans.getstring();<br>  }}<br></td>