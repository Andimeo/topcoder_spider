<td class="problemText" colspan="8" valign="middle" align="left">
            import java.lang.*;<br>import java.util.*;<br>import java.math.*;<br><br>public class FairTournament  {<br><br>  BigInteger dp[][];<br>  <br>  public BigInteger calc(int n, int k) {<br>    dp = new BigInteger[n][1&lt;&lt;(2*k+1)];<br>    <br>    int i, j, x, p;<br>    for (j = 0; j &lt; (1&lt;&lt;(2*k+1)); j++) dp[0][j] = BigInteger.ZERO;<br>    for (x = 0; x &lt;= k; x++) dp[0][(1&lt;&lt;(2*k+1)) - 1 - (1&lt;&lt;(k+x)) - (1&lt;&lt;k) + 1] = BigInteger.ONE;<br>    <br>    for (i = 0; i &lt; n - 1; i++) {<br>      for (j = 0; j &lt; (1&lt;&lt;(2*k+1)); j++) dp[i + 1][j] = BigInteger.ZERO;<br>      for (j = 0; j &lt; (1&lt;&lt;(2*k+1)); j++) if (j % 2 == 0) {<br>        p = (j &gt;&gt; 1) + (1 &lt;&lt; (2*k));<br>        for (x = 0; x &lt;= 2 * k + 1; x++)<br>          if ((p &amp; (1&lt;&lt;x)) &gt; 0)<br>            dp[i + 1][p - (1&lt;&lt;x)] = dp[i + 1][p - (1&lt;&lt;x)].add(dp[i][j]);<br>      }<br>    }<br>    <br>    p = ((1&lt;&lt;(2*k+1))-1) - ((1&lt;&lt;(k+1))-1);    <br>    return dp[n - 1][p];<br>  }<br> <br><br>  public String countPermutations(int n, int k) { <br>    return calc(n, k).toString();<br>  }     <br> <br>};<br></td>