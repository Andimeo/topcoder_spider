<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>public class VotingBloc {<br><br>  int x;<br><br>  boolean[][] ally;<br>  boolean[] vote;<br><br>  boolean[] ute;<br><br>  int res() {<br>    int y=0, n=0;<br>    List&lt;Integer&gt; ys = new ArrayList&lt;Integer&gt;();<br>    List&lt;Integer&gt; ns = new ArrayList&lt;Integer&gt;();<br>    for (int i=0; i&lt;x; ++i) {<br>      if (ute[i]) continue;<br>      if (vote[i]) {<br>        ++y;<br>        ys.add(i);<br>      }       else {<br>        ++n;<br>        ns.add(i);<br>      }<br>    }<br>    boolean[][] w = new boolean[y][n];<br>    for (int i=0; i&lt;y; ++i) {<br>      for (int j=0; j&lt;n; ++j) {<br>        if (ally[ys.get(i)][ns.get(j)]) {<br>          w[i][j] = true;<br>        }<br>      }<br>    }<br>    E = w;<br>    int k = bipartitt();<br>    return k;<br>  }<br><br>  void solve(int min) {<br>    int now = res();<br>    for (int j=min; j&lt;x; ++j) {<br>      ute[j] = true;<br>      int r = res();<br>      if (r+1 == now) {<br>        solve(j + 1);<br>        return;<br>      } else {<br>        ute[j] = false;<br>      }<br>    }<br>  }<br><br>  public int[] abstainers(String[] voter) {<br>    x = voter.length;<br>    ally = new boolean[x][x];<br>    vote = new boolean[x];<br>    for (int i=0; i&lt;x; ++i) {<br>      String[] ss = voter[i].split(" ");<br>      vote[i] = ss[0].charAt(0)=='Y';<br>      for (int j=1; j&lt;ss.length; ++j) {<br>        int b = Integer.parseInt(ss[j])-1;<br>        ally[b][i] = ally[i][b] = true;<br>      }<br>    }<br>    ute = new boolean[x];<br>    solve(0);<br>    int a = 0;<br>    for (int i=0; i&lt;x; ++i) if (ute[i]) ++a;<br>    int[] ans = new int[a];<br>    int ind = 0;<br>    for (int i=0; i&lt;x; ++i) {<br>      if (ute[i]) ans[ind++] = i+1;<br>    }<br>    return ans;<br>  }<br><br>  int m,n;<br>  boolean[][] E;<br>  int[] lmatch, rmatch;<br>  boolean[] rbrukt;<br>  int[] lbrukt;<br>  int time = 1;<br><br>  Random rand = new Random(0);<br><br>  boolean sok(int p) {<br>    if (lbrukt[p]&gt;=time) return false;<br>    lbrukt[p] = time;<br>    int i = rand.nextInt(n);<br>    for (int j=0; j&lt;n; ++j) {<br>      if (++i&gt;=n) i=0;<br>      if (E[p][i] &amp;&amp; !rbrukt[i] &amp;&amp; (rbrukt[i]=true) &amp;&amp; (rmatch[i]==-1 || sok(rmatch[i]))) {<br>        lmatch[p] = i;<br>        rmatch[i] = p;<br>        return true;<br>      }<br>    }<br>    return false;<br>  }<br><br>  int bipartitt() {<br>    m = E.length;<br>    if (m == 0) return 0;<br>    n = E[0].length;<br>    if (n == 0) return 0;<br>    lmatch = new int[m];<br>    rmatch = new int[n];<br>    Arrays.fill(lmatch,-1);<br>    Arrays.fill(rmatch,-1);<br>    int svar = 0;<br>    lbrukt = new int[m];<br>    for (int i=0; i&lt;m; ++i) {<br>      rbrukt = new boolean[n];<br>      if (sok(i)) {<br>        ++svar;<br>        ++time;<br>      }<br>    }<br>    return svar;<br>  }<br><br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by CodeProcessor<br></td>