<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;algorithm&gt;<br>#include &lt;iostream&gt;<br>#include &lt;sstream&gt;<br>#include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;queue&gt;<br>#include &lt;set&gt;<br>#include &lt;map&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cctype&gt;<br>#include &lt;cmath&gt;<br>#include &lt;list&gt;<br>using namespace std;<br><br>// LIB CODE<br>#define PB push_back<br>#define SZ(v) ((int)(v).size())<br>#define FOR(i,a,b) for(int i=(a);i&lt;int(b);++i)<br>#define REP(i,n) FOR(i,0,n)<br>int DX[]={-1,0,1,0,0};<br>int DY[]={0,1,0,-1,0};<br>// REAL CODE<br><br>typedef struct S { int x,y,z; } S;<br><br>int best[50][50][2520];<br><br>int cost[10]={-1,2520,1260,840,630,504,420,360,315,280};<br><br>#define ADDBACK(x,y,z,c) if(best[x][y][z]==-1||c&lt;best[x][y][z]) { best[x][y][z]=c; q.PB((S){x,y,z}); }<br>#define ADDFRONT(x,y,z,c) if(best[x][y][z]==-1||c&lt;best[x][y][z]) { best[x][y][z]=c; q.push_front((S){x,y,z}); }<br><br>class ExpensiveTravel {<br>public:<br>  int minTime(vector &lt;string&gt; g, int sx, int sy, int ex, int ey) {<br>    int h=SZ(g),w=SZ(g[0]);<br>    --sx,--sy,--ex,--ey;<br>    <br>    memset(best,-1,sizeof(best));<br>    deque&lt;S&gt; q; ADDBACK(sx,sy,0,0);<br>    while(!q.empty()) {<br>      int x=q.front().x,y=q.front().y,z=q.front().z; q.pop_front();<br>      if(x==ex&amp;&amp;y==ey) return best[x][y][z];<br>      ADDBACK(x,y,2520-cost[g[x][y]-'0'],best[x][y][z]+1);<br>      REP(k,4) {<br>        int nx=x+DX[k],ny=y+DY[k];<br>        if(nx&lt;0||nx&gt;=h||ny&lt;0||ny&gt;=w) continue;<br>        int nz=z-cost[g[nx][ny]-'0'];<br>        if(nz&lt;0) continue;<br>        ADDFRONT(nx,ny,nz,best[x][y][z]);<br>      }<br>    }<br>    return -1;<br>  }<br>};<br><br><br><br>// Powered by FileEdit<br>// Powered by CodeProcessor<br></td>