<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections;<br>using System.Collections.Generic;<br>using System.Collections.Specialized;<br>using System.Text;<br>using System.Text.RegularExpressions;<br> <br>public class WordSplit<br>{<br>  Dictionary&lt;string,string[]&gt; cache = new Dictionary&lt;string,string[]&gt;();<br>  public string[] pieces(string theString)<br>  {<br>    if (cache.ContainsKey(theString)) return cache[theString];<br>    bool b = true;<br>    foreach (char c in theString)<br>      if (theString.IndexOf(c) != theString.LastIndexOf(c)) b = false;<br>    if (b) return new string[] { theString };<br>    string[] res = null;<br>    for (int i = 1; i &lt; theString.Length; i++)<br>      if (theString.IndexOf(theString[i-1]) != i-1) break;<br>      else res = best(res, append(pieces(theString.Substring(i)), theString.Substring(0, i)));<br>    cache[theString] = res;<br>    return res;<br>  }<br>  <br>  string[] best(string[] a, string[] b)<br>  {<br>    if (a == null) return b;<br>    if (b == null) return a;<br>    if (a.Length &lt; b.Length) return a;<br>    if (b.Length &lt; a.Length) return b;<br>    for (int i = 0; i &lt; a.Length; i++)<br>      if (a[i].CompareTo(b[i]) &lt; 0) return a;<br>      else if (a[i].CompareTo(b[i]) &gt; 0) return b;<br>    return a;<br>  }<br>  <br>  string[] append(string[] arr, string s)<br>  {<br>    List&lt;string&gt; lst = new List&lt;string&gt;(arr);<br>    lst.Add(s);<br>    lst.Sort();<br>    return lst.ToArray();<br>  }<br> <br> <br>}<br>//Powered by [KawigiEdit] 2.0!<br></td>