<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>import java.math.*;<br>import java.io.*;<br>import java.text.*;<br>import java.util.regex.*;<br>import static java.util.Arrays.*;<br>import static java.lang.Math.*;<br>import static java.lang.Integer.parseInt;<br>public class WordSplit {<br>  <br>  public String[] pieces(String theString) {<br>    return doit(theString).toArray(new String[0]);<br>  }<br>  <br>  HashMap&lt;String, ArrayList&lt;String&gt;&gt; memo = new HashMap&lt;String, ArrayList&lt;String&gt;&gt;();<br>  ArrayList&lt;String&gt; doit(String s){<br>    if(s.length() == 0) return new ArrayList&lt;String&gt;();<br>    if(memo.containsKey(s)) return memo.get(s);<br>    boolean[] taken = new boolean[26];<br>    ArrayList&lt;String&gt; best = null;<br>    for(int i = 0; i &lt; s.length(); i++){<br>      if(taken[s.charAt(i)-'a']) break;<br>      taken[s.charAt(i)-'a'] = true;<br>      ArrayList&lt;String&gt; tmp = (ArrayList&lt;String&gt;) doit(s.substring(i+1)).clone();<br>      tmp.add(0, s.substring(0, i+1));<br>      Collections.sort(tmp);<br>      best = best(best, tmp);<br>    }<br>    memo.put(s, best);<br>    return best;<br>  }<br>  ArrayList&lt;String&gt; best(ArrayList&lt;String&gt; a, ArrayList&lt;String&gt; b){<br>    if(a == null) return b;<br>    if(b == null) return a;<br>    if(a.size() &lt; b.size()) return a;<br>    if(b.size() &lt; a.size()) return b;<br>    for(int i = 0; i &lt; a.size(); i++){<br>      if(!a.get(i).equals(b.get(i))) return a.get(i).compareTo(b.get(i)) &lt; 0 ? a : b;<br>    }<br>    return a;<br>  }<br> <br>}<br> <br>// Powered by PopsEdit<br>// Powered by CodeProcessor<br></td>