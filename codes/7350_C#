<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections;<br><br>public class MostLikely<br>  {<br>    public class Range<br>    {<br>      public int l = 0;<br>      public int u = 0;<br>      <br>      public Range(int l,int u)<br>      {<br>        this.l = l;<br>        this.u = u;<br>      }<br>      <br>      public int GetScore(int low,int high)<br>      {<br>        if (this.l==-1)<br>        {<br>          if (low&lt;=this.u)<br>          {<br>            if (high&lt;=this.u)<br>            {<br>              return (high-low)+1;<br>            }<br>            else<br>            {<br>              return (this.u-low)+1;              <br>            }<br>          }<br>          else<br>          {<br>            return 0;<br>          }<br>        }<br>        else if (this.u==-1)<br>        {<br>          if (high&gt;=this.l)<br>          {<br>            if (low&gt;=this.l)<br>            {<br>              return (high-low)+1;<br>            }<br>            else<br>            {<br>              return (high-this.l)+1;              <br>            }<br>          }<br>          else<br>          {<br>            return 0;<br>          }<br>        }<br>        else<br>        {<br>          if ((low&lt;=this.l) &amp;&amp; (high&gt;=this.u))<br>          {<br>            return (this.u-this.l)+1;<br>          }<br>          else if ((low&gt;this.u) &amp;&amp; (high&gt;this.u))<br>          {<br>            return 0;<br>          }<br>          else if ((low&lt;this.l) &amp;&amp; (high&lt;this.l))<br>          {<br>            return 0;<br>          }<br>          else if ((low&gt;=this.l) &amp;&amp; (low&lt;=this.u) &amp;&amp; (high&gt;=this.l) &amp;&amp; (high&lt;=this.u))<br>          {<br>            return (high-low)+1;<br>          }<br>          else if ((low&gt;=this.l) &amp;&amp; (low&lt;=this.u))<br>          {<br>            return (this.u-low)+1;<br>          }<br>          else if ((high&gt;=this.l) &amp;&amp; (high&lt;=this.u))<br>          {<br>            return (high-this.l)+1;<br>          }<br>          else<br>          {<br>            return 0;<br>          }<br>        }<br>      }<br>    }<br>    <br>    public int likelyRank(int[] sc, int low, int high)<br>    {<br>      ArrayList scores = new ArrayList(sc);<br>      scores.Sort();<br>      ArrayList ranges = new ArrayList();<br>      ranges.Add(new Range((int)scores[scores.Count-1],-1));<br>      for(int i=scores.Count-2;i&gt;=0;i--)<br>      {<br>        ranges.Add(new Range((int)scores[i],((int)scores[i+1])-1));<br>      }<br>      ranges.Add(new Range(-1,((int)scores[0])-1));<br>      int b = -1;<br>      bool issame = false;<br>      int res = -1;<br>      int ii = 0;<br>      foreach(Range range in ranges)<br>      {<br>        ii++;<br>        int ss = range.GetScore(low,high);<br>        if (ss&gt;b)<br>        {<br>          issame = false;<br>          b = ss;<br>          res = ii;<br>        }<br>        else if (ss==b)<br>        {<br>          issame = true;<br>        }<br>      }<br>      if (issame) return -1;<br>      return res;<br>      <br>    }<br>  }<br></td>