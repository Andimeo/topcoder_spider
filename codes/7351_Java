<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br><br>public class LikelyWord {<br>  long[] pow;<br>  <br>  public int likely(String[] dictionary, int k) {<br>    pow = new long[k + 1];<br>    pow[0] = 1;<br>    for (int i = 1; i &lt;= k; i++)<br>      pow[i] = pow[i - 1] * 26;<br>    int n = dictionary.length;<br>    long[] cb = new long[n + 1];<br>    for (int i = 0; i &lt;= n; i++) {<br>      long c = i &lt; n ? cntBefore(dictionary[i], k) : pow[k];<br>      for (int j = 0; j &lt; i; j++)<br>        if (dictionary[j].length() == k)<br>          c--;<br>      cb[i] = c;<br>    }<br>    long[] lp = new long[n + 1];<br>    lp[0] = cb[0];<br>    for (int i = 1; i &lt;= n; i++)<br>      lp[i] = cb[i] - cb[i - 1];<br>    int mli = 0;<br>    int mlc = 1;<br>    for (int i = 1; i &lt;= n; i++) {<br>      if (lp[i] &gt; lp[mli]) {<br>        mli = i;<br>        mlc = 1;<br>      } else if (lp[i] == lp[mli])<br>        mlc++;<br>    }<br>    return mlc == 1 ? mli : -1;<br>  }<br><br>  private long cntBefore(String s, int k) {<br>    if (s.length() == 0)<br>      return 0;<br>    if (k == 0)<br>      return 1;<br>    char c = s.charAt(0);<br>    return (c - 'a') * pow[k - 1] + cntBefore(s.substring(1), k - 1);<br>  }<br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by RETester [based on ExampleBuilder]<br>// Powered by CodeProcessor<br></td>