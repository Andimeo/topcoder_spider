<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;algorithm&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cctype&gt;<br>#include &lt;cmath&gt;<br>#include &lt;iostream&gt;<br>#include &lt;sstream&gt;<br>#include &lt;string&gt;<br>#include &lt;utility&gt;<br>#include &lt;vector&gt;<br>using namespace std;<br>#define REP(i,n) for(int _n=n, i=0;i&lt;_n;++i)<br>#define FOR(i,a,b) for(int i=(a),_b=(b);i&lt;=_b;++i)<br>#define FORD(i,a,b) for(int i=(a),_b=(b);i&gt;=_b;--i)<br>#define ALL(f,w) ({ bool _ok=true; f { _ok=_ok &amp;&amp; (w);if(!_ok) break;} _ok; })<br>template&lt;class T&gt; inline int size(const T&amp;c) { return c.size(); }<br> <br>struct Number {<br>  int d[2000];<br>  int &amp;operator[](int x) { return d[x];}<br>};<br> <br>Number one;<br> <br>Number div(Number a, int k) {<br>  Number b;<br>  REP(i,k) b[i]=0;<br>  FOR(i,k,1999) b[i]=a[i-k];<br>  return b;<br>}<br> <br>bool operator&lt;(Number a, Number b) {<br>  REP(i,2000) if(a[i]!=b[i]) return a[i]&lt;b[i];<br>  return 0;<br>}<br> <br>bool operator&gt;(Number a, Number b) {<br>  REP(i,2000) if(a[i]!=b[i]) return a[i]&gt;b[i];<br>  return 0;<br>}<br> <br>Number operator+(Number a, Number b) {<br>  Number res;<br>  int p=0;<br>  FORD(i,1999,0) {<br>    p += a[i]+b[i];<br>    res[i] = p%10;<br>    p/=10;<br>  }<br>  return res;<br>}<br> <br>Number operator-(Number a, Number b) {<br>  Number res;<br>  int p=0;<br>  FORD(i,1999,0) {<br>    p += a[i]-b[i];<br>    if(p&lt;0) { res[i]=p+10; p=-1; }<br>    else { res[i]=p; p=0; }<br>  }<br>  if(p) throw 0;<br>  return res;<br>}<br> <br>int choose(Number a, Number b) {<br>  int r = 0;<br>  while(a[r]==b[r]) ++r;<br>  if(r&lt;=999) {<br>    int f = 0;<br>    while(f&lt;1000 &amp;&amp; a[f]==0) ++f;<br>    if(ALL(FOR(i,f,999),a[i]==9)) return 1000-f+1;<br>    else return 1000-f;<br>  }<br>  int f2 = 0;<br>  while(f2&lt;1000 &amp;&amp; a[f2]==0) ++f2;<br>  int res = 1000-f2+1; // dot<br>  int p =1000;<br>  while(a[p]==b[p]) ++p;<br>  res += p-1000+1;<br>  return res;<br>}<br> <br>Number fromString(string s) {<br>  int p=-1;<br>  REP(i,size(s)) if(s[i]=='.') { p=i; break; }<br>  if(p==-1) { p=size(s); s+='.'; }<br>  Number x;<br>  REP(i,2000) x[i]=0;<br>  REP(i,size(s)) {<br>    if(i&lt;p) x[1000-(p-i)] = s[i]-'0';<br>    if(i&gt;p) x[999+(i-p)] = s[i]-'0';<br>  }<br>  return x;<br>}<br> <br>bool zero(Number x) {<br>  REP(i,2000) if(x[i]!=0) return false;<br>  return true;<br>}<br> <br>struct Neaten {<br>int shortest(int k, string number) {<br>  REP(i,2000) one.d[i]=0; one[999] = 1;<br>  Number x = fromString(number);<br>  if(zero(x)) return 1;<br>  Number err;<br>  if(x&gt;one) {<br>    err = x;<br>  } else {<br>    err = one;<br>  }<br>  err = div(err,k);<br>  try {<br>    Number a = x-err;<br>    Number b = x+err;<br>    a[1999]=1;<br>    int p=1999;<br>    while(b[p]==0) { b[p]=9; --p; }<br>    b[p]--;<br>    return choose(a,b);<br>  } catch(int) { return 1; }<br>}<br> <br>};<br> <br>// Powered by FileEdit<br> <br>// Powered by TomekAI<br>// Powered by TZTester 1.01 [25-Feb-2003]<br> <br>// Powered by CodeProcessor<br></td>