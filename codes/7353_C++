<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;algorithm&gt;<br>#include &lt;iostream&gt;<br>#include &lt;sstream&gt;<br>#include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cstring&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cctype&gt;<br> <br>using namespace std;<br>#define iss istringstream<br>#define pb push_back<br>#define cs c_str()<br>#define frr(i,a,b) for(i=(a); i&lt;(b); i++)<br>#define fr(i,n) frr(i,0,(n))<br>#define rrf(i,b,a) for(i=(b)-1; i&gt;=(a); i--)<br>#define rf(i,n) rrf(i,(n),0)<br>#define sq(x,y,z) sqrt((x)*(x)+(y)*(y)+(z)*(z))<br>#define in(x,s) (s.find(x)!=s.end())<br>#define sv(x) sort(x.begin(),x.end())<br> <br>#define   SWAP(X,Y)   { double __TMP__=X; X=Y; Y=__TMP__; }<br>int systemOfLinearEquation(double A[][256], double b[], int n)<br>{<br>   int max, i, j, k;<br>   <br>   for(k=0; k&lt;n; k++)<br>   {<br>      for(max=j=k; j&lt;n; j++)<br>         max=fabs(A[j][k])&gt;fabs(A[max][k])?j:max;<br>      if(fabs(A[max][k])&lt;1e-12)<br>         return 0;<br>      if(max!=k)<br>      {<br>         SWAP(b[k], b[max]);<br>         for(j=k; j&lt;n; j++)<br>            SWAP(A[k][j], A[max][j]);<br>      }<br>      b[k]/=A[k][k];<br>      for(j=n-1; j&gt;=k; A[k][j--]/=A[k][k]);<br>      <br>      for(j=k+1; j&lt;n; j++)<br>         for(b[j]-=b[k]*A[j][k], i=n-1; i&gt;=k; i--)<br>            A[j][i]-=A[k][i]*A[j][k];<br>   }<br>   <br>   for(k=n-1; k&gt;=0; k--)<br>      for(j=0; j&lt;k; j++)<br>         b[j]-=b[k]*A[j][k];<br>   return 1;<br>}<br> <br>vector&lt;string&gt; wrap(vector&lt;string&gt; map, char wall='#')<br>{<br>   vector&lt;string&gt; r;<br>   string s=map[0]+"..";<br>   int m=map.size(), n=map[0].size(), i;<br>   fr(i,n+2) s[i]=wall;<br>   r.pb(s);<br>   fr(i,m) r.pb(wall+map[i]+wall);<br>   r.pb(s);<br>   return r;<br>}<br> <br>int v[64][64], id[64][64];<br>vector&lt;string&gt; J;<br> <br>void dfs(int y, int x)<br>{<br>   if(!v[y][x] &amp;&amp; J[y][x]!='#')<br>   {<br>      v[y][x]=1;<br>      dfs(y-1, x);<br>      dfs(y+1, x);<br>      dfs(y, x-1);<br>      dfs(y, x+1);<br>   }<br>}<br> <br>double A[256][256], b[256];<br> <br>class EscapeTheJail<br>{<br>public:<br>   double findExit(vector&lt;string&gt; jail)<br>   {<br>      int m=jail.size(), n=jail[0].size(), y, x, i, j, ok=0, T=0, k;<br>      J=wrap(jail);<br>      memset(v, 0, sizeof(v));<br>      <br>      frr(j,1,m+1) frr(i,1,n+1) if(J[j][i]=='@') { y=j; x=i; }<br>      dfs(y, x);<br>      frr(j,1,m+1) frr(i,1,n+1) if(J[j][i]=='$' &amp;&amp; v[j][i]) ok=1;<br>      if(!ok) return -1;<br>      <br>      fr(i,256) fr(j,256) A[i][j]=0;<br>      fr(i,256) b[i]=0;<br>      frr(j,1,m+1) frr(i,1,n+1) if(v[j][i]) id[j][i]=T++;;<br>      frr(j,1,m+1) frr(i,1,n+1) if(v[j][i])<br>      {<br>         if(J[j][i]=='$')<br>         {<br>            A[id[j][i]][id[j][i]]=1;<br>            b[id[j][i]]=0;<br>         }<br>         else<br>         {<br>            k=v[j-1][i]+v[j+1][i]+v[j][i-1]+v[j][i+1];<br>            A[id[j][i]][id[j][i]]=1;<br>            if(v[j][i-1]) A[id[j][i]][id[j][i-1]]=-1.0/k;<br>            if(v[j][i+1]) A[id[j][i]][id[j][i+1]]=-1.0/k;<br>            if(v[j-1][i]) A[id[j][i]][id[j-1][i]]=-1.0/k;<br>            if(v[j+1][i]) A[id[j][i]][id[j+1][i]]=-1.0/k;<br>            b[id[j][i]]=1;<br>         }<br>      }<br>      systemOfLinearEquation(A, b, T);<br>      <br>      return b[id[y][x]];<br>   }<br>};<br></td>