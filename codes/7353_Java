<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br><br>public class EscapeTheJail {<br>  boolean[][] reach;<br>  char[][] grid;<br>  boolean go(int x, int y) {<br>    if (reach[x][y]) return false;<br>    reach[x][y] = true;<br>    if (grid[x][y]=='$') return true;<br>    if (x&gt;0 &amp;&amp; grid[x-1][y]!='#' &amp;&amp; !reach[x-1][y]) if (go(x-1,y)) return true;<br>    if (y&gt;0 &amp;&amp; grid[x][y-1]!='#' &amp;&amp; !reach[x][y-1]) if (go(x,y-1)) return true;<br>    if (x&lt;grid.length-1 &amp;&amp; grid[x+1][y]!='#' &amp;&amp; !reach[x+1][y]) if (go(x+1,y)) return true;<br>    if (y&lt;grid[0].length-1 &amp;&amp; grid[x][y+1]!='#' &amp;&amp; !reach[x][y+1]) if (go(x,y+1)) return true;            <br>    return false;<br>  }<br>  public double findExit(String[] jail) {<br>    grid = new char[jail.length][jail[0].length()];<br>    for (int i=0; i&lt;jail.length; i++) grid[i] = jail[i].toCharArray();<br>    double[][] ans = new double[grid.length][grid[0].length];<br>    double[][] next = new double[grid.length][grid[0].length];  <br>    int sx=0, sy=0;<br>    for (int i=0; i&lt;grid.length; i++)<br>    for (int j=0; j&lt;grid[0].length; j++) {<br>      if (grid[i][j]=='@') {<br>        grid[i][j]='.';<br>        sx=i;sy=j;<br>      }<br>    }  <br>    reach = new boolean[grid.length][grid[0].length];<br>    if (!go(sx,sy)) return -1;<br><br>    for (int i=0; i&lt;150000; i++) {<br>      for (int j=0; j&lt;ans.length; j++)<br>      for (int k=0; k&lt;ans[j].length; k++) {<br>        if (grid[j][k]=='#') continue;<br>        if (grid[j][k]=='$') continue;<br>        double xx = 0;<br>        int count = 0;<br>        if (j&gt;0 &amp;&amp; grid[j-1][k]!='#') {count++;xx += ans[j-1][k];}<br>        if (j&lt;grid.length-1 &amp;&amp; grid[j+1][k]!='#') {count++;xx += ans[j+1][k];}<br>        if (k&gt;0 &amp;&amp; grid[j][k-1]!='#') {count++;xx += ans[j][k-1];}<br>        if (k&lt;grid[0].length-1 &amp;&amp; grid[j][k+1]!='#') {count++;xx += ans[j][k+1];}<br>        xx = 1.0/count*xx + 1;<br>        next[j][k] = xx;<br>      }<br>      ans = next;<br>    }<br>  <br>    return ans[sx][sy];<br>  }<br>}<br></td>