<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;vector&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;string&gt;<br>#include &lt;sstream&gt;<br>#include &lt;cmath&gt;<br>#include &lt;iostream&gt;<br>#include &lt;stdio.h&gt;<br>using namespace std;<br><br><br>class MinimumVariancePartition {<br>public:<br>  double minDev(vector &lt;int&gt; mixedSamples, int k) {<br>    vector&lt;int&gt; MS = mixedSamples;<br>    int N = MS.size();<br>    sort(MS.begin(), MS.end());<br>    double S[100][100];<br>    int i,j,l,p;<br>    double sum;<br>    for (i=1;i&lt;=N;i++)<br>      for (j=1;j&lt;=k;j++) <br>        if (j==1) {<br>          sum=0;<br>          for (l=1;l&lt;=i;l++)<br>            sum+=MS[l-1];<br>          sum = sum/i;<br>          S[i][j] = 0;<br>          for (l=1;l&lt;=i;l++)<br>            S[i][j]+=(MS[l-1]-sum)*(MS[l-1]-sum)/i;<br>        } else {<br>          S[i][j]=100000000;<br>          for (p=2;p&lt;=i;p++) {<br>            sum=0;<br>            for (l=p;l&lt;=i;l++)<br>              sum+=MS[l-1];<br>            sum = sum/(i-p+1);<br>            double ans;<br>            ans=S[p-1][j-1];<br>            for (l=p;l&lt;=i;l++)<br>              ans+=(MS[l-1]-sum)*(MS[l-1]-sum)/(i-p+1);<br>            S[i][j]=min(S[i][j],ans);<br>          }<br>        }<br>      return S[N][k];<br>  }<br>};<br></td>