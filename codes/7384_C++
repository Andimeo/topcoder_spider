<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;algorithm&gt;<br>#include &lt;cmath&gt;<br>#include &lt;iostream&gt;<br>#include &lt;iterator&gt;<br>#include &lt;string&gt;<br>#include &lt;vector&gt;<br><br>using namespace std;<br><br><br>class RandomFights {<br>public:<br>   vector&lt;int&gt; decode( vector&lt;int&gt; X, int n )<br>   {<br>      vector&lt;int&gt; R(n);<br>      int j = 0;<br>      int m = X.size();<br>      for ( int i=0; i&lt;n; ++i ) {<br>         R[i] = X[j];<br>         int s = (j+1)%m;<br>         X[j] = ( ( X[j] ^ X[s] ) + 13 ) % 49999;<br>         j = s;<br>      }<br>      return R;<br>   }<br><br>   long double expected( const vector&lt;int&gt; &amp;A, const vector&lt;int&gt; &amp;B )<br>   {<br>      int n = A.size();<br>      vector&lt;long double&gt; cumb(n+1), cumb2(n+1);<br><br>      cumb[0] = cumb2[0];<br>      for ( int i=0; i&lt;n; ++i ) {<br>         cumb[i+1] = cumb[i] + B[i];<br>         cumb2[i+1] = cumb2[i] + (double)B[i]*B[i];<br>      }<br><br>      long double ret = 0;<br>      for ( int i=0; i&lt;n; ++i ) {<br>         int a = A[i];<br>         int winb = distance( B.begin(), lower_bound( B.begin(), B.end(), a ) );<br>         ret +=<br>            (long double)winb * a*a -<br>            (long double)2 * a*cumb[winb] +<br>            cumb2[winb];<br>      }<br>      return ret;<br>   }<br>      <br>   double expectedNrOfPoints( vector &lt;int&gt; inputA, vector &lt;int&gt; inputB, int n ) { // caret here<br>      vector&lt;int&gt;<br>         A = decode( inputA, n ),<br>         B = decode( inputB, n );<br><br>      sort( A.begin(), A.end() );<br>      sort( B.begin(), B.end() );<br><br>      return (double)( expected( A, B ) - expected( B, A ) ) / n;<br>   }<br>};<br><br><br> <br><br><br><br>// Powered by FileEdit<br>// Powered by moj 3.0 beta 11 [modified TZTester]<br>// Powered by CodeProcessor<br></td>