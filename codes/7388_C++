<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;vector&gt;<br>#include &lt;list&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;deque&gt;<br>#include &lt;stack&gt;<br>#include &lt;bitset&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;functional&gt;<br>#include &lt;numeric&gt;<br>#include &lt;utility&gt;<br>#include &lt;sstream&gt;<br>#include &lt;iostream&gt;<br>#include &lt;iomanip&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;ctime&gt;<br> <br>using namespace std;<br> <br>#define FOR(i,a,b) for(int i=(a),_b(b);i&lt;_b;++i)<br>#define REP(i,n) FOR(i,0,n)<br>#define ALL(a) (a).begin(),a.end()<br>#define SORT(a) sort(ALL(a))<br>#define SZ(a) ((int) a.size())<br>#define pb push_back<br> <br>class AcidRain {<br>public:<br>  int saveHarvest(vector &lt;int&gt;, vector &lt;int&gt;, vector &lt;int&gt;);<br>};<br> <br> <br>int d[26][1&lt;&lt;11];<br>const int INF = 1000000000;<br> <br>int AcidRain::saveHarvest(vector &lt;int&gt; b, vector &lt;int&gt; e, vector &lt;int&gt; y) {<br>  set&lt;int&gt; sa;<br>  REP(i, SZ(y)) sa.insert(y[i]);<br>  vector&lt;int&gt; a(ALL(sa));<br>  reverse(ALL(a));<br>  REP(i, SZ(y) + 1)<br>    REP(j, (1 &lt;&lt; 11))<br>      d[i][j] = INF;<br>  int q = 11, w = 0;<br>  REP(i, SZ(b)) {<br>    q &lt;?= b[i];<br>    w &gt;?= e[i];  <br>  }<br>  int mask = 0;<br>  FOR(j, q, w + 1)<br>    mask += 1 &lt;&lt; j;<br>  d[0][mask] = 0;<br>  REP(i, SZ(a)) {<br>    REP(j, mask + 1)<br>      if (d[i][j] != INF) {<br>        vector&lt;int&gt; r(w);        <br>        REP(k, SZ(b)) if (y[k] == a[i]) {<br>          FOR(u, b[k], e[k])<br>            r[u] = 1;          <br>        }        <br>        REP(ms, (1 &lt;&lt; w)) {<br>          bool valid = true;<br>          int yo = ms;<br>          int tt = 0;<br>          REP(f, SZ(r))<br>            if (r[f] == 1 &amp;&amp; (ms &amp; (1 &lt;&lt; f)))<br>              {<br>                valid = false;<br>                break;<br>              } else<br>            if (r[f]) yo += 1 &lt;&lt; f; else<br>            if (ms &amp; (1 &lt;&lt; f)) tt++;<br>          if (!valid) continue;<br>          int will = 0;<br>          FOR(h, q, w + 1) if (j &amp; (1 &lt;&lt; h)) {<br>            int lft = h;<br>            int rgt = h;                        <br>            while (lft &gt; q &amp;&amp; (yo &amp; (1 &lt;&lt; (lft - 1)))) lft--;<br>            while (rgt &lt; w &amp;&amp; (yo &amp; (1 &lt;&lt; rgt))) rgt++;<br>            if (abs(lft - h) &lt;= abs(rgt - h))<br>              will |= (1 &lt;&lt; lft); <br>            if (abs(rgt - h) &lt;= abs(lft - h))<br>              will |= (1 &lt;&lt; rgt); <br>          }<br>          d[i + 1][will] &lt;?= d[i][j] + tt;<br>        }<br>      }<br>  }  <br>  return d[SZ(a)][(1 &lt;&lt; q) + (1 &lt;&lt; w)];<br>}<br> <br> <br>//Powered by [KawigiEdit] 2.0!<br></td>