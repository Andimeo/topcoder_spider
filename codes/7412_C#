<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br><br>public class DrivingAround {<br>  static int SIZE;<br>  const int MODULO = 1000003;<br>  const int MAX_STEP = 5;<br>  <br>  class Matrix<br>  {<br>    public int[,] a = new int[SIZE, SIZE];<br>  }<br>  <br>  public int numberOfWays(string[] adj, int start, int finish, int time) {<br>    int n = adj.Length;<br>    int[,] dist = new int[n, n];<br>    for (int i = 0; i &lt; n; ++i)<br>      for (int j = 0; j &lt; n; ++j)<br>        if (adj[i][j] == '.')<br>          dist[i, j] = -1;<br>        else<br>          dist[i, j] = adj[i][j] - '0';<br>    SIZE = n * MAX_STEP;<br>    Matrix m = new Matrix();<br>    for (int i = 0; i &lt; n * (MAX_STEP - 1); ++i)<br>      m.a[i, i + n] = 1;<br>    for (int i = 0; i &lt; n; ++i)<br>    {<br>      int ii = i + n * (MAX_STEP - 1);<br>      for (int j = 0; j &lt; n; ++j)<br>        if (dist[j, i] &gt; 0)<br>          ++m.a[ii, j + n * (MAX_STEP - dist[j, i])];<br>    }<br>    Matrix mm = Pow(m, time);<br>    return mm.a[finish + n * (MAX_STEP - 1), start + n * (MAX_STEP - 1)];<br>  }<br><br>  Matrix Pow(Matrix a, int k)<br>  {<br>    if (k == 0)<br>    {<br>      Matrix r = new Matrix();<br>      for (int i = 0; i &lt; SIZE; ++i)<br>        r.a[i, i] = 1;<br>      return r;<br>    }<br>    else if (k % 2 == 0)<br>      return Pow(Mul(a, a), k / 2);<br>    else<br>      return Mul(Pow(a, k - 1), a);<br>  }<br><br>  Matrix Mul(Matrix a, Matrix b)<br>  {<br>    Matrix r = new Matrix();<br>    for (int i = 0; i &lt; SIZE; ++i)<br>      for (int j = 0; j &lt; SIZE; ++j)<br>      {<br>        long rr = 0;<br>        for (int k = 0; k &lt; SIZE; ++k)<br>          rr = rr + (long) a.a[i, k] * b.a[k, j];<br>        r.a[i, j] = (int) (rr % MODULO);<br>      }<br>    return r;<br>  }<br><br>  Matrix Add(Matrix a, Matrix b)<br>  {<br>    Matrix r = new Matrix();<br>    for (int i = 0; i &lt; SIZE; ++i)<br>      for (int j = 0; j &lt; SIZE; ++j)<br>        r.a[i, j] = (a.a[i, j] + b.a[i, j]) % MODULO;<br>    return r;<br>  }<br><br><br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003] [modified for C# by Petr]<br>// Powered by CodeProcessor<br></td>