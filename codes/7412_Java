<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>import java.math.*;<br> <br>public class DrivingAround {<br> <br>  static int p = 1000003;<br>  static int N;<br> <br>  long[][] mul(long[][] A, long[][] B) {<br>    long[][] res = new long[N][N];<br>    for (int i=0; i&lt;N; i++)<br>      for (int j=0; j&lt;N; j++)<br>        for (int k=0; k&lt;N; k++) {<br>          res[i][j] += A[i][k]*B[k][j];<br>          res[i][j] %= p;<br>        }<br>    return res;<br>  }<br>  <br>  long[][] pow(long[][] M, int p) {<br>    if (p==1) return M;<br>    else if (p%2==0) {<br>      long[][] T = pow(M, p/2);<br>      return mul(T, T);<br>    }<br>    else {<br>      long[][] T = pow(M, p/2);<br>      return mul(M, mul(T, T));      <br>    }<br>  }<br>  <br>    public int numberOfWays (String[] adj, int start, int finish, int time) {<br><br>      int n = adj.length;<br>      N = 5*n;<br>      <br>      long[][] A = new long[N][N];<br>      for (int i=0; i&lt;n; i++)<br>        for (int j=0; j&lt;4; j++)<br>          A[i*5+j+1][i*5+j] = 1;<br>      <br>      for (int i=0; i&lt;n; i++)<br>        for (int j=0; j&lt;n; j++) {<br>          char c = adj[i].charAt(j);<br>          if (c != '.') <br>            A[i*5][j*5+c-'1'] = 1;<br>        }<br>      <br>      //System.out.println(Arrays.deepToString(A));<br> <br>      long[][] M = pow(A, time);<br>      //System.out.println(Arrays.deepToString(M));<br>      return (int)M[5*start][5*finish];<br>      <br>    }<br> <br> <br>    static void printf (String f, Object... a) {<br>    }<br> <br> <br>}<br><br><br>// Powered by FileEdit<br>// Powered by CodeProcessor<br></td>