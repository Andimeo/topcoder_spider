<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br><br>public class ReverseResources {<br>  const int MODULO = 1000000007;<br>  <br>  public int findDecompositions(string str, string[] resources) {<br>    for (int i = 0; i &lt; resources.Length; ++i)<br>    {<br>      string t = "";<br>      for (int j = 0; j &lt; resources[i].Length; ++j)<br>      {<br>        t += resources[i][j];<br>        if (resources[i][j] == '%')<br>          ++j;<br>      }<br>      resources[i] = t;<br>    }<br><br>    long[,,,] am = new long[str.Length + 1,str.Length + 1,resources.Length,60];<br>    long[,] amTotal = new long[str.Length, str.Length + 1];<br>    for (int at = 0; at &lt;= str.Length; ++at)<br>      for (int i = 0; i &lt; resources.Length; ++i)<br>        am[at, 0, i, 0] = 1;<br>    <br>    for (int len = 1; len &lt;= str.Length; ++len)<br>      for (int at = 0; at &lt;= str.Length - len; ++at)<br>      {<br>        for (int i = 0; i &lt; resources.Length; ++i)<br>        {<br>          int j = resources[i].Length;<br>          char ch = resources[i][j - 1];<br>          if (ch == '%')<br>          {<br>            for (int k = 1; k &lt;= len; ++k)<br>              Increase(ref am[at, len, i, j], Multiply(am[at, len - k, i, j - 1], amTotal[at + len - k, k]));<br>          }<br>          else<br>          {<br>            if (str[at + len - 1] == ch)<br>              Increase(ref am[at, len, i, j], am[at, len - 1, i, j - 1]);<br>          }<br>          Increase(ref amTotal[at, len], am[at, len, i, resources[i].Length]);<br>        }<br>        for (int i = 0; i &lt; resources.Length; ++i)<br>        {<br>          for (int j = 1; j &lt; resources[i].Length; ++j)<br>          {<br>            char ch = resources[i][j - 1];<br>            if (ch == '%')<br>            {<br>              for (int k = 1; k &lt;= len; ++k)<br>                Increase(ref am[at, len, i, j], Multiply(am[at, len - k, i, j - 1], amTotal[at + len - k, k]));<br>            }<br>            else<br>            {<br>              if (str[at + len - 1] == ch)<br>                Increase(ref am[at, len, i, j], am[at, len - 1, i, j - 1]);<br>            }<br>          }<br>        }<br>      }<br>    return (int) amTotal[0, str.Length];<br>  }<br><br>  long Multiply(long a, long b)<br>  {<br>    long r = a * b;<br>    if (r &gt;= MODULO)<br>      r %= MODULO;<br>    return r;<br>  }<br><br>  void Increase(ref long a, long b)<br>  {<br>    a = a + b;<br>    if (a &gt;= MODULO)<br>      a -= MODULO;<br>  }<br><br><br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003] [modified for C# by Petr]<br>// Powered by CodeProcessor<br></td>