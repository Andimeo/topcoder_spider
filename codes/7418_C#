<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections.Generic;<br><br>public class CountPalindromes {<br>  public int count(string[] words, int k) {<br>    int n = words.Length;<br>    int maxLen = 0;<br>    foreach (string x in words)<br>      maxLen = Math.Max(maxLen, x.Length);<br>    int[] am = new int[k + 2 * maxLen + 5];<br>    int[,,] amL = new int[k + 2 * maxLen + 5, n, maxLen];<br>    int[,,] amR = new int[k + 2 * maxLen + 5, n, maxLen];<br><br>    for (int i = 0; i &lt; words.Length; ++i)<br>    {<br>      string wi = words[i];<br>      for (int middle = 0; middle &lt; wi.Length; ++middle)<br>      {<br>        if (middle * 2 + 1 &lt; wi.Length)<br>        {<br>          if (match(wi, 0, wi, middle + 1, middle))<br>            inc(ref amR[wi.Length, i, middle * 2 + 1], 1);<br>        } <br>        else if (middle * 2 + 1 == wi.Length)<br>        {<br>          if (match(wi, 0, wi, middle + 1, middle))<br>            inc(ref am[wi.Length], 1);<br>        }<br>        else<br>        {<br>          if (match(wi, wi.Length - 2 * (wi.Length - middle - 1) - 1, wi, wi.Length - (wi.Length - middle - 1), wi.Length - middle - 1))<br>            inc(ref amL[wi.Length, i, wi.Length - 2 * (wi.Length - middle - 1) - 1], 1);<br>        }<br>        <br>        if (middle * 2 &lt; wi.Length)<br>        {<br>          if (match(wi, 0, wi, middle, middle))<br>            inc(ref amR[wi.Length, i, middle * 2], 1);<br>        } else if (middle * 2 == wi.Length)<br>        {<br>          if (match(wi, 0, wi, middle, middle))<br>            inc(ref am[wi.Length], 1);<br>        } else<br>        {<br>          if (match(wi, wi.Length - 2 * (wi.Length - middle), wi, wi.Length - (wi.Length - middle), (wi.Length - middle)))<br>            inc(ref amL[wi.Length, i, wi.Length - 2 * (wi.Length - middle)], 1);<br>        }<br>      }<br>    }<br>    <br>    for (int cl = 0; cl &lt;= k; ++cl)<br>    {<br>      if (am[cl] != 0)<br>        for (int i = 0; i &lt; words.Length; ++i)<br>        {<br>          inc(ref amR[cl + words[i].Length + 1, i, 0], am[cl]);<br>        }<br>      <br>      for (int i = 0; i &lt; words.Length; ++i)<br>        for (int j = 0; j &lt; words[i].Length; ++j)<br>          if (amR[cl, i, j] != 0)<br>          {<br>            string wi = words[i];<br>            for (int ii = 0; ii &lt; words.Length; ++ii)<br>            {<br>              string wii = words[ii];<br>              if (wii.Length &lt; wi.Length - j)<br>              {<br>                if (match(wii, 0, wi, j, wii.Length))<br>                  inc(ref amR[cl + wii.Length + 1, i, j + wii.Length], amR[cl, i, j]);<br>              } else if (wii.Length == wi.Length - j)<br>              {<br>                if (match(wii, 0, wi, j, wii.Length))<br>                  inc(ref am[cl + wii.Length + 1], amR[cl, i, j]);<br>              } else<br>              {<br>                if (match(wii, wii.Length - (wi.Length - j), wi, j, wi.Length - j))<br>                  inc(ref amL[cl + wii.Length + 1, ii, wii.Length - (wi.Length - j)], amR[cl, i, j]);<br>              }<br>            }<br>          }<br>      <br>      for (int i = 0; i &lt; words.Length; ++i)<br>        for (int j = 0; j &lt; words[i].Length; ++j)<br>          if (amL[cl, i, j] != 0)<br>          {<br>            string wi = words[i];<br>            for (int ii = 0; ii &lt; words.Length; ++ii)<br>            {<br>              string wii = words[ii];<br>              if (wii.Length &lt; j)<br>              {<br>                if (match(wii, 0, wi, j - wii.Length, wii.Length))<br>                  inc(ref amL[cl + wii.Length + 1, i, j - wii.Length], amL[cl, i, j]);<br>              }<br>              else if (wii.Length == j)<br>              {<br>                if (match(wii, 0, wi, 0, wii.Length))<br>                  inc(ref am[cl + wii.Length + 1], amL[cl, i, j]);<br>              }<br>              else<br>              {<br>                if (match(wii, 0, wi, 0, j))<br>                  inc(ref amR[cl + wii.Length + 1, ii, j], amL[cl, i, j]);<br>              }<br>            }<br>          }<br>    }<br><br>    int res = 0;<br>    for (int i = 1; i &lt;= k; ++i)<br>      inc(ref res, am[i]);<br>    return res;<br>  }<br><br>  bool match(string s1, int i1, string s2, int i2, int length)<br>  {<br>    for (int i = 0; i &lt; length; ++i)<br>      if (s1[i1 + i] != s2[i2 + length - 1 - i])<br>        return false;<br>    return true;<br>  }<br><br>  void inc(ref int a, int b)<br>  {<br>    a = (a + b) % 835454957;<br>  }<br><br><br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003] [modified for C# by Petr]<br>// Powered by CodeProcessor<br></td>