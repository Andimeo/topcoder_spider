<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;algorithm&gt;<br>#include &lt;iostream&gt;<br>#include &lt;string&gt;<br>#include &lt;vector&gt;<br><br>using namespace std;<br><br><br>#define MOD 835454957<br><br>int n;<br>vector&lt;string&gt; a;<br><br>int memo[101][3][50][16];<br>int memo_match1[50][16][50];<br>int memo_match2[50][16][50];<br><br>class CountPalindromes {<br>public:<br><br>   int match1( int x, int len, int y ) {<br>      int &amp;ret = memo_match1[x][len][y];<br>      if( ret &gt;= 0 ) return ret;<br>      ret = 0;<br><br>      int L = a[y].size(), i;<br>      for( i = 0; len+i &lt; a[x].size() &amp;&amp; i &lt; a[y].size() ; ++i ) <br>         if( a[x][len+i] != a[y][L-i-1] ) break;<br>      return ret = i;<br>   }<br>   int match2( int y, int len, int x ) {<br>      int &amp;ret = memo_match2[y][len][x];<br>      if( ret &gt;= 0 ) return ret;<br>      ret = 0;<br><br>      int L = a[y].size(), i;<br>      for( i = 0; len+i &lt; a[y].size() &amp;&amp; i &lt; a[x].size() ; ++i ) <br>         if( a[x][i] != a[y][L-len-i-1] ) break;<br>      return ret = i;<br>   }<br><br>   int rec( int k, int side, int x, int len ) {<br>      if( k &lt; 0 ) return 0;<br><br>      int &amp;ret = memo[k][side+1][x][len];<br>      if( ret &gt;= 0 ) return ret;<br>      ret = 0;<br><br>      if( side == -1 ) {<br>         for( x = 0; x &lt; n; ++x ) {<br>            ret += rec( k, 0, x, 0 );<br>            if( ret &gt;= MOD ) ret -= MOD;<br>         }<br>      }<br>      if( side == 0 ) {<br>         for( int y = 0; y &lt; n; ++y ) {<br>            int match = match1( x, len, y );<br><br>            int t1 = len+match == a[x].size();<br>            int t2 = match == a[y].size();<br><br>            if( !t1 &amp;&amp; !t2 ) continue;<br>            if( !t1 &amp;&amp; t2 ) {<br>               ret += rec( k - 2*match - 1, 0, x, len + match );<br>               if( ret &gt;= MOD ) ret -= MOD;<br>            } <br>            if( t1 &amp;&amp; !t2 ) {<br>               ret += rec( k - 2*match - 1, 1, y, match );<br>               if( ret &gt;= MOD ) ret -= MOD;<br>            }<br>            if( t1 &amp;&amp; t2 ) {<br>               if( k - 2*match - 1 &gt;= 0 ) {<br>                  ret += 1;<br>                  if( ret &gt;= MOD ) ret -= MOD;<br>               }<br>               ret += rec( k - 2*match - 2, -1, 0, 0 );<br>               if( ret &gt;= MOD ) ret -= MOD;<br>            }<br>         }<br>         int match = match1( x, len, x );<br>         if( len + match == a[x].size() &amp;&amp; k - match &gt;= 0 ) {<br>            ret += 1;<br>            if( ret &gt;= MOD ) ret -= MOD;<br>         }<br>      }<br>      if( side == 1 ) {<br>         int y = x;<br>         for( x = 0; x &lt; n; ++x ) {<br>            int match = match2( y, len, x );<br><br>            int t1 = len+match == a[y].size();<br>            int t2 = match == a[x].size();<br><br>            if( !t1 &amp;&amp; !t2 ) continue;<br>            if( !t1 &amp;&amp; t2 ) {<br>               ret += rec( k - 2*match - 1, 1, y, len + match );<br>               if( ret &gt;= MOD ) ret -= MOD;<br>            } <br>            if( t1 &amp;&amp; !t2 ) {<br>               ret += rec( k - 2*match - 1, 0, x, match );<br>               if( ret &gt;= MOD ) ret -= MOD;<br>            }<br>            if( t1 &amp;&amp; t2 ) {<br>               if( k - 2*match - 1 &gt;= 0 ) {<br>                  ret += 1;<br>                  if( ret &gt;= MOD ) ret -= MOD;<br>               }<br>               ret += rec( k - 2*match - 2, -1, 0, 0 );<br>               if( ret &gt;= MOD ) ret -= MOD;<br>            }<br>         }<br>         int match = match2( y, len, y );<br>         if( len + match == a[y].size() &amp;&amp; k - match &gt;= 0 ) {<br>            ret += 1;<br>            if( ret &gt;= MOD ) ret -= MOD;<br>         }<br>      }<br>      return ret;<br>   }<br><br>   int count( vector &lt;string&gt; words, int k ) {<br>      a = words;<br>      n = a.size();<br><br>      memset( memo, -1, sizeof memo );<br>      memset( memo_match1, -1, sizeof memo_match1 );<br>      memset( memo_match2, -1, sizeof memo_match2 );<br>      return rec( k, -1, 0, 0 );<br>   }<br><br>   <br> <br>};<br><br><br><br>// Powered by FileEdit<br>// Powered by moj 3.0 beta 7 [modified TZTester]<br>// Powered by CodeProcessor<br></td>