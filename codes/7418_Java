<td class="problemText" colspan="8" valign="middle" align="left">
            //Be the MAN<br>//Challenge it!<br><br>import java.util.Arrays;<br>import java.util.Map;<br>import java.util.HashMap;<br><br>public class CountPalindromes {<br><br>    Map&lt;State, Integer&gt; m = new HashMap&lt;State, Integer&gt;();<br><br>    String[][] w;<br><br>    public int count(String[] words, int k) {<br>        w = new String[2][];<br>        w[0] = words;<br>        w[1] = new String[words.length];<br>        for (int i = 0; i &lt; words.length; i++) {<br>            w[1][i] = "";<br>            String s = words[i];<br>            for (int j = 0; j &lt; s.length(); j++) w[1][i] = s.charAt(j) + w[1][i];<br>        }<br>        int res = get(new State(k, "", 0)) - 1;<br>        if (res &lt; 0) res = 835454956;<br>        return res;<br>    }<br><br>    private int get(State state) {<br>        Integer result = m.get(state);<br>        if (result != null) return result;<br>        int res = 0;<br>        if (isPoly(state.b)) res++;<br>        for (int i = 0; i &lt; w[state.wi].length; i++) {<br>            String s = w[state.wi][i];<br>            if (state.l &gt;= s.length()) {<br>                if (state.b.startsWith(s)) {<br>                    res += get(new State(<br>                            state.l - s.length() - 1,<br>                            state.b.substring(s.length()),<br>                            state.wi));<br>                    res %= 835454957;<br>                } else if (s.startsWith(state.b)) {<br>                    res += get(new State(<br>                            state.l - s.length()- 1,<br>                            s.substring(state.b.length()),<br>                            1 - state.wi<br>                    ));<br>                    res %= 835454957;<br>                }<br>            }<br>        }<br>        res %= 835454957;<br>        m.put(state, res);<br>        return res;<br>    }<br><br>    private boolean isPoly(String s) {<br>        int i = 0;<br>        int j = s.length() - 1;<br>        while (j &gt; i) {<br>            if (s.charAt(i) != s.charAt(j)) return false;<br>            i++;<br>            j--;<br>        }<br>        return true;<br>    }<br><br>    class State {<br>        int l;<br>        String b;<br>        int wi;<br><br>        public State(int l, String b, int wi) {<br>            this.l = l;<br>            this.b = b;<br>            this.wi = wi;<br>        }<br><br>        public boolean equals(Object o) {<br>            if (this == o) return true;<br>            if (o == null || getClass() != o.getClass()) return false;<br><br>            State state = (State) o;<br><br>            if (l != state.l) return false;<br>            if (wi != state.wi) return false;<br>            if (b != null ? !b.equals(state.b) : state.b != null) return false;<br><br>            return true;<br>        }<br><br>        public int hashCode() {<br>            int result;<br>            result = l;<br>            result = 31 * result + (b != null ? b.hashCode() : 0);<br>            result = 31 * result + wi;<br>            return result;<br>        }<br>    }<br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by RETester [based on ExampleBuilder]<br>// Powered by CodeProcessor<br></td>