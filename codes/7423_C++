<td class="problemText" colspan="8" valign="middle" align="left">
            #include&lt;string&gt;<br>#include&lt;vector&gt;<br>#include&lt;queue&gt;<br><br>using namespace std;<br><br>int Cost[10001][50];<br>queue &lt; pair&lt;int, int&gt; &gt; q;<br><br>#define INF 1000000000<br><br>int a[51][5];<br><br>class OnTime<br>{<br>  int l1, l2;<br>public:<br>  int minCost(int n, int t, vector&lt;string&gt; a_)<br>  {<br>    int l1, l2, l3;<br>    for(l1=0;l1&lt;=10000;l1++)<br>    {<br>      for(l2=0;l2&lt;n;l2++)<br>      {<br>        Cost[l1][l2] = INF;<br>      }<br>    }<br>    for(l1=0;l1&lt;a_.size();l1++)<br>    {<br>      sscanf(a_[l1].c_str(),"%d %d %d %d %d",&amp;a[l1][0],&amp;a[l1][1],&amp;a[l1][2],&amp;a[l1][3],&amp;a[l1][4]);<br>    }<br>    Cost[0][0] = 0;<br>    q.push(make_pair(0, 0));<br>    while(!q.empty())<br>    {<br>      l1 = q.front().first;<br>      l2 = q.front().second;<br>//      printf("(%d,%d) : %d\n",l1,l2,Cost[l1][l2]);<br>      q.pop();<br>      for(l3=0;l3&lt;a_.size();l3++)<br>      {<br>        if(l2 == a[l3][0] &amp;&amp; ((l1 == 0) || (l1 &lt; a[l3][2])) &amp;&amp; a[l3][2] + a[l3][3] &lt;= t &amp;&amp; Cost[l1][l2] + a[l3][4] &lt; Cost[a[l3][2]+a[l3][3]][a[l3][1]])<br>        {<br>          q.push(make_pair(a[l3][2]+a[l3][3],a[l3][1]));<br>          Cost[a[l3][2]+a[l3][3]][a[l3][1]] = Cost[l1][l2] + a[l3][4];<br>        }<br>      }<br>    }<br>    int sol = INF;<br>    for(l1=0;l1&lt;=t;l1++)<br>    {<br>      if(Cost[l1][n-1] &lt; sol)<br>      {<br>        sol = Cost[l1][n-1];<br>      }<br>    }<br>    if(sol == INF) sol = -1;<br>    return sol;<br>  }<br>};<br></td>