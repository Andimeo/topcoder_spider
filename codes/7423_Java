<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>public class OnTime<br>{<br>    private static int[] [] places;<br>    private static int T;<br>    private static int N;<br>    private static int[] as;<br>    private static int[] bs;<br>    private static int[] deps;<br>    private static int[] times;<br>    private static int[] costs;<br>    private static boolean[] visited;<br>    private static int minCost;<br>    private static void solve (int st, int time, int cost)<br>    {<br>        if (cost &gt;= minCost)<br>            return;<br>        if (visited [st])<br>            return;<br>        if (time &gt; T)<br>            return;<br>        if (st == N - 1)<br>        {<br>            if (cost &lt; minCost)<br>                minCost = cost;<br>            return;<br>        }<br>        if (places [st].length == 0)<br>            return;<br>        visited [st] = true;<br>        for (int i = 0 ; i &lt; places [st].length ; i++)<br>        {<br>            int bus = places [st] [i];<br>            if (deps [bus] &lt;= time)<br>                continue;<br>            int newTime = deps [bus];<br>            solve (bs [bus], newTime + times [bus], cost + costs [bus]);<br>        }<br>        visited [st] = false;<br>    }<br><br><br>    public static int minCost (int N, int T, String[] buses)<br>    {<br>        OnTime.T = T;<br>        OnTime.N = N;<br>        int[] counts = new int [N];<br>        as = new int [buses.length];<br>        bs = new int [buses.length];<br>        deps = new int [buses.length];<br>        times = new int [buses.length];<br>        costs = new int [buses.length];<br>        for (int i = 0 ; i &lt; buses.length ; i++)<br>        {<br>            StringTokenizer st = new StringTokenizer (buses [i], " ");<br>            as [i] = Integer.parseInt (st.nextToken ());<br>            bs [i] = Integer.parseInt (st.nextToken ());<br>            deps [i] = Integer.parseInt (st.nextToken ());<br>            times [i] = Integer.parseInt (st.nextToken ());<br>            costs [i] = Integer.parseInt (st.nextToken ());<br>            counts [as [i]]++;<br>        }<br>        places = new int [N] [];<br>        for (int i = 0 ; i &lt; places.length ; i++)<br>            places [i] = new int [counts [i]];<br>        Arrays.fill (counts, 0);<br>        for (int i = 0 ; i &lt; buses.length ; i++)<br>            places [as [i]] [counts [as [i]]++] = i;<br>        visited = new boolean [N];<br>        minCost = Integer.MAX_VALUE;<br>        solve (0, -1, 0);<br>        if (minCost == Integer.MAX_VALUE)<br>            return -1;<br>        return minCost;<br>    }<br>}<br></td>