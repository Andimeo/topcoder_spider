<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br><br>public class CakeParty {<br>  string s1 = "CAKE ";<br>  string s2 = " PIECES ";<br>  <br>  public string makeMove(int[] pieces) {<br>    int max = 0;<br>    foreach (int x in pieces)<br>      max = Math.Max(max, x);<br>    int cnt = 0;<br>    foreach (int x in pieces)<br>      if (x == max)<br>        ++cnt;<br>    string mid = null;<br>    for (int id = 0; id &lt; pieces.Length; ++id)<br>      if (pieces[id] == max)<br>        if (mid == null || String.CompareOrdinal(s1 + mid + s2, s1 + id + s2) &gt; 0)<br>          mid = id + "";<br>    <br>    if (cnt % 2 == 0)<br>      return s1 + mid + s2 + 1;<br>    else<br>    {<br>      if (cnt &gt; 1)<br>      {<br>        return s1 + mid + s2 + 1;<br>      }<br>      else<br>      {<br>        int max2 = 0;<br>        foreach (int x in pieces)<br>          if (x != max)<br>            max2 = Math.Max(max2, x);<br>        if (max2 == 0)<br>          return s1 + mid + s2 + max;<br>        else<br>        {<br>          int cnt2 = 0;<br>          foreach (int x in pieces)<br>            if (x == max2)<br>              ++cnt2;<br>          if (cnt2 % 2 == 0)<br>          {<br>            return s1 + mid + s2 + getSmallestInRange(max - max2 + 1, max);<br>          }<br>          else<br>          {<br>            return s1 + mid + s2 + (max - max2);<br>          }<br>        }<br>      }<br>    }<br>  }<br><br>  string getSmallestInRange(long l, long r)<br>  {<br>    long p10 = 1;<br>    while (p10 &lt; l)<br>      p10 *= 10;<br>    string s = l + "";<br>    if (p10 &lt;= r &amp;&amp; String.CompareOrdinal(p10 + "", l + "") &lt; 0)<br>      s = p10 + "";<br>    return s;<br>  }<br><br><br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003] [modified for C# by Petr]<br>// Powered by CodeProcessor<br></td>