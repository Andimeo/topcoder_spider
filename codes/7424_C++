<td class="problemText" colspan="8" valign="middle" align="left">
            // after all, I think you should not try to challenge me<br><br>#include &lt;algorithm&gt;<br>#include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;math.h&gt;<br>using namespace std;<br><br>typedef long long ll;<br><br>#define LS &lt;<br>#define Size(x) (int(x.size()))<br>#define LET(k,val) typeof(val) k = (val)<br>// execute "act", and return "val" as an expression result<br>#define CLC(act,val) (*({act; static typeof(val) CLCR; CLCR = (val); &amp;CLCR;}))<br><br>// All macros with parameters "k,a,b" run the "k" variable in range [a,b)<br>#define FOR(k,a,b) for(typeof(a) k=(a); k LS (b); ++k)<br><br>// Standard mathematical quantifiers, plus tools to implement them<br>// note: the range has to be non-empty here<br>#define FOLD1(k,a,b,init,act) CLC(LET(k, a); LET(R##k, init); for(++k; k LS (b); ++k) act, R##k)<br>#define MAX(k,a,b,x) FOLD1(k,a,b,x, R##k &gt;?= (x))<br><br>#line 3 "CakeParty.cc"<br><br>string itos(int i) {<br>  char buf[64];<br>  sprintf(buf, "%d", i);<br>  return buf;<br>  }<br><br>class CakeParty {<br>  public:<br>  string makeMove(vector &lt;int&gt; pieces) {<br>    // !FDI<br>    int N = Size(pieces);<br>    <br>    int M = MAX(k,0,N, pieces[k]);<br>    <br>    int X = 0;<br>    <br>    FOR(k,0,N) if(pieces[k] == M) X++;<br>    <br>    string xx = "a";<br>    FOR(k,0,N) if(pieces[k] == M &amp;&amp; itos(k) &lt; xx) xx = itos(k);<br><br>    if(X&amp;1) {<br>      // win:<br>      if(X&gt;1) return "CAKE "+xx+" PIECES 1";<br>      int M2 = MAX(k,0,N, pieces[k] == M ? 0 : pieces[k]);<br>      if(M2 == 0) return "CAKE "+xx+" PIECES "+itos(M);<br>      int X2 = 0;<br>      FOR(k,0,N) if(pieces[k] == M2) X2++;<br>//    printf("%d %d: %d\n", M, M2, X);<br>      if(X2&amp;1) return "CAKE "+xx+" PIECES "+itos(M-M2);<br>      <br>      int take = M-M2+1;<br>      ll pow = 1;<br>      while(pow &lt; take) pow *= 10;<br>      if(pow &lt;= M) take = pow;<br>      return "CAKE "+xx+" PIECES "+itos(take);<br>      }<br>    else {<br>      // lose<br>      return "CAKE "+xx+" PIECES 1";<br>      }<br>      <br>//  int X;<br>    <br>    return 0;<br>    }<br>  };<br><br><br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003]<br>// Powered by CodeProcessor<br></td>