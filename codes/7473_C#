<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br><br>public class BuildingAdvertise {<br>  struct Point : IComparable&lt;Point&gt;<br>  {<br>    public int x;<br>    public int y;<br><br>    public Point(int x, int y)<br>    {<br>      this.x = x;<br>      this.y = y;<br>    }<br><br>    public int CompareTo(Point other)<br>    {<br>      return y.CompareTo(other.y);<br>    }<br>  }<br>  <br>  public long getMaxArea(int[] h, int n) {<br>    int[] s = getR(h, n);<br>    int[] r = new int[n];<br>    int[] l = new int[n];<br>    Point[] p = new Point[n];<br>    for (int i = 0; i &lt; n; ++i)<br>      p[i] = new Point(i, s[i]);<br>    Array.Sort(p);<br>    for (int i = 0; i &lt; n; ++i)<br>    {<br>      l[i] = -1;<br>      r[i] = -1;<br>    }<br>    long res = 0;<br>    for (int i = n - 1; i &gt;= 0; --i)<br>    {<br>      Point pp = p[i];<br>      int cl = pp.x;<br>      int cr = pp.x;<br>      if (cr &lt; n - 1 &amp;&amp; r[cr + 1] &gt;= 0)<br>        cr = r[cr + 1];<br>      if (cl &gt; 0 &amp;&amp; l[cl - 1] &gt;= 0)<br>        cl = l[cl - 1];<br>      r[cl] = cr;<br>      l[cr] = cl;<br>      res = Math.Max(res, ((long) (cr - cl + 1)) * pp.y);<br>    }<br>    return res;<br>  }<br><br>  int[] getR(int[] h, int n)<br>  {<br>    int[] R = new int[n];<br>    int j = 0;<br>    int m = h.Length;<br>    for (int i = 0; i &lt; n; ++i)<br>    {<br>      R[i] = h[j];<br>      int s = (j + 1) % m;<br>      h[j] = ((h[j] ^ h[s]) + 13) % 835454957;<br>      j = s;<br>    }<br>    return R;<br>  }<br><br>  <br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003] [modified for C# by Petr]<br>// Powered by CodeProcessor<br></td>