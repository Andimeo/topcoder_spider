<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>public class Alarmed<br>{<br><br>int n;<br>bool[,] rels;<br>bool[] left;<br>bool[] rigt;<br>public bool isOkA( double dA )<br>{<br>  for ( int i = 0; i &lt; n; i++ )<br>    for ( int j = 0; j &lt; n; j++ )<br>  {<br>    rels[ i, j ] = false;<br>  }<br>  for ( int i = 0; i &lt; n; i++ )<br>  {<br>    left[ i ] = false;<br>    rigt[ i ] = false;<br>  }<br>  <br>  for ( int i = 0; i &lt; n; i++ )<br>  {<br>    double dToTop = Math.Sqrt( Math.Pow( x[ i ] - 50, 2 ) + Math.Pow( y[ i ] - 100, 2 ) );<br>    double dToBtm = Math.Sqrt( Math.Pow( x[ i ] - 50, 2 ) + Math.Pow( y[ i ] -   0, 2 ) );<br>    double r = Math.Sqrt( dA / thr[ i ] );<br>    if ( r &gt;= dToTop || r &gt;= dToBtm )<br>    {<br>      return false;<br>    }<br><br>    if ( r &gt;= x[ i ] )<br>    {<br>      left[ i ] = true;<br>    }<br>    else if ( x[ i ] &lt;= 50 )<br>    {<br>      if ( r &gt;= y[ i ] || r &gt;= (100 - y[ i ]) )<br>      {<br>        left[ i ] = true;<br>      }<br>    }<br>    if ( r &gt;= 100 - x[ i ] )<br>    {<br>      rigt[ i ] = true;<br>    }<br>    else if ( x[ i ] &gt;= 50 )<br>    {<br>      if ( r &gt;= y[ i ] || r &gt;= (100 - y[ i ]) )<br>      {<br>        rigt[ i ] = true;<br>      }<br>    }<br>  }<br><br>  for ( int i = 0; i &lt; n; i++ )<br>    for ( int j = i + 1; j &lt; n; j++ )<br>  {<br>    double dist = Math.Sqrt( Math.Pow( x[ i ] - x[ j ], 2 ) + Math.Pow( y[ i ] - y[ j ], 2 ) );<br><br>    double r1 = Math.Sqrt( dA / thr[ i ] );<br>    double r2 = Math.Sqrt( dA / thr[ j ] );<br>    if ( r1 + r2 &gt;= dist )<br>    {<br>      rels[ i, j ] = true;<br>      rels[ j, i ] = true;<br>    }<br>  }<br>  <br>  bool[] tor = new bool[ n ];<br>  for ( int i = 0; i &lt; n; i++ )<br>  {<br>    tor[ i ] = left[ i ];<br>  }<br>  <br>  while( true )<br>  {<br>    bool bfound = false;<br>    for ( int i = 0; i &lt; n; i++ )<br>    {<br>      if ( tor[ i ] ) continue;<br><br>      for ( int j = 0; j &lt; n; j++ )<br>      {<br>        if ( rels[ i, j ] &amp;&amp; tor[ j ] )<br>        {<br>          bfound = true;<br>          tor[ i ] = true;<br>          break;<br>        }<br>      }<br>    }<br>    if ( !bfound ) break;<br>  }<br>  <br>  for ( int i = 0; i &lt; n; i++ )<br>  {<br>    if ( tor[ i ] &amp;&amp; rigt[ i ] )<br>    {<br>      return false;<br>    }<br>  }<br>  <br>  return true;<br>}<br><br>int[] x;<br>int[] y;<br>int[] thr;<br>public double noise(int[] xx, int[] yy, int[] threshold)<br>{<br>  x = xx;<br>  y = yy;<br>  thr = threshold;<br>  n = xx.Length;<br>  rels = new bool[ n, n ];<br>  left = new bool[ n ];<br>  rigt = new bool[ n ];<br><br>  double dMinA = 0;<br>  double dMaxA = + 1E99;<br>  <br>  for ( int i = 0; i &lt; 1000; i++ )<br>  {<br>    double dMid = (dMinA + dMaxA) / 2;<br>    if ( isOkA( dMid ) )<br>    {<br>      dMinA = dMid;<br>    }<br>    else<br>    {<br>      dMaxA = dMid;<br>    }<br>  }<br>  <br>  return (dMinA + dMaxA) / 2;<br>}<br><br>}<br></td>