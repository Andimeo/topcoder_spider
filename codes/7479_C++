<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;algorithm&gt;<br>#include &lt;iostream&gt;<br>#include &lt;sstream&gt;<br>#include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;queue&gt;<br>#include &lt;stack&gt;<br>#include &lt;set&gt;<br>#include &lt;map&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cctype&gt;<br>#include &lt;cmath&gt;<br>#include &lt;ext/hash_map&gt;<br>#include &lt;ext/hash_set&gt;<br>#include &lt;complex&gt;<br> <br>// Library code<br>using namespace std;<br>using namespace __gnu_cxx;<br>#define REP(X,S) for(int X=0;X&lt;(int)S;++X )<br>#define FOREACH(X,C) for(typeof(C.begin()) X=C.begin();X!=C.end();++X)<br>#define ALL(X) X.begin(), X.end()<br>template &lt; class T, class V &gt;<br>inline pair&lt;T,V&gt; mkpair(const T &amp;x,const V &amp;y){return pair &lt; T, V &gt; (x, y);}<br> <br>// *** Solution code starts here<br> <br>bool visited[100];<br> <br>class Alarmed<br>{<br>public:<br>  vector&lt;int&gt; x, y, thresh;<br>  vector&lt;long double&gt; r;<br>  int n;<br>  inline long double dist( int x1, int y1, int x2, int y2 ) {<br>    return sqrt((x1-x2)*(x1-x2)+(y1-y2)*(y1-y2));<br>  }<br>  bool go( long double a, int v ) {<br>    if(visited[v])<br>      return false;<br>    visited[v]=true;<br>    if( x[v]+r[v]&gt;=100-1e-12 || (x[v]&gt;= 50 &amp;&amp; (y[v]-r[v]&lt;=1e-12 || y[v]+r[v] &gt;=100-1e-12 )) )<br>      return true;<br>    REP(u,n) {<br>      if( dist(x[v],y[v],x[u],y[u]) &lt;= r[v]+r[u]-1e-12 &amp;&amp; go(a,u) )<br>        return true;<br>    }<br>    return false;<br>  }<br>  bool closed( long double a ) {<br>    memset(visited,0,sizeof(visited));<br>    REP(v,n) {<br>      r[v]=sqrt(a/thresh[v]);<br>    }<br>    REP(v,n) {<br>      if( dist(x[v],y[v],50,0) &lt;= r[v]-1e-12 || dist(x[v],y[v],50,100) &lt;= r[v]-1e-12 )<br>        return true;<br>      if( x[v]-r[v]&lt;=1e-12 || (x[v]&lt;= 50 &amp;&amp; (y[v]-r[v]&lt;=1e-12 || y[v]+r[v] &gt;=100-1e-12 )) ) {<br>        if(go(a,v))<br>          return true;<br>      }<br>    }<br>    return false;<br>  }<br>  double noise (vector &lt;int&gt; x, vector &lt;int&gt; y, vector &lt;int&gt; threshold)<br>  {<br>    this-&gt;x=x;<br>    this-&gt;y=y;<br>    this-&gt;thresh=threshold;<br>    this-&gt;n=x.size();<br>    this-&gt;r.resize(n);<br>    long double minA=0,maxA=1e20,a;<br>    while(maxA-minA&gt;1e-10) {<br>      a=(maxA+minA)/2;<br>      if( closed(a) )<br>        maxA=a;<br>      else<br>        minA=a;<br>    }<br>    return a;<br>  }<br>};<br> <br> <br> <br>// Powered by FileEdit<br>// Powered by CodeProcessor<br></td>