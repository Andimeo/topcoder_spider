<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br><br>public class FibonacciKnapsack {<br>  class Item : IComparable&lt;Item&gt;<br>  {<br>    public long w;<br>    public long p;<br>    <br>    public Item(string s)<br>    {<br>      string[] pp = s.Split(' ');<br>      w = long.Parse(pp[0]);<br>      p = long.Parse(pp[1]);<br>    }<br><br>    public int CompareTo(Item other)<br>    {<br>      int z = -w.CompareTo(other.w);<br>      if (z != 0)<br>        return z;<br>      else<br>        return -p.CompareTo(other.p);<br>    }<br>  }<br><br>  long res;<br>  <br>  public long maximalCost(string[] items, string C) {<br>    long c = long.Parse(C);<br>    Item[] its = Array.ConvertAll&lt;string, Item&gt;(items, delegate(string s)<br>                                           {<br>                                             return new Item(s);<br>                                           });<br>    Array.Sort(its);<br>    long allWSum = 0;<br>    foreach (Item it in its)<br>      allWSum += it.w;<br>    long allPSum = 0;<br>    foreach (Item it in its)<br>      allPSum += it.p;<br>    res = 0;<br>    rec(c, 0, its, 0, allWSum, allPSum);<br>    return res;<br>  }<br><br>  private void rec(long leftC, long curP, Item[] its, int itAt, long remWSum, long remPSum)<br>  {<br>    res = Math.Max(res, curP);<br>    if (itAt &gt;= its.Length)<br>      return;<br>    if (curP + remPSum &lt;= res)<br>      return;<br>    if (remWSum &lt;= leftC)<br>    {<br>      res = Math.Max(res, curP + remPSum);<br>      return;<br>    }<br>    int i;<br>    for (i = itAt; i &lt; its.Length &amp;&amp; its[i].w == its[itAt].w; ++i)<br>    {<br>      remWSum -= its[i].w;<br>      remPSum -= its[i].p;<br>    }<br>    for (int j = itAt; j &lt;= i &amp;&amp; leftC &gt;= 0; ++j)<br>    {<br>      rec(leftC, curP, its, i, remWSum, remPSum);<br>      if (j &lt; i)<br>      {<br>        curP += its[j].p;<br>        leftC -= its[j].w;<br>      }<br>    }<br>  }<br><br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003] [modified for C# by Petr]<br>// Powered by CodeProcessor<br></td>