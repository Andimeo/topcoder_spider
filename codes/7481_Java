<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>import java.util.regex.*;<br>import java.text.*;<br>import java.math.*;<br>import java.awt.geom.*;<br><br>public class FibonacciKnapsack<br>{<br>  long maxw;<br><br>  static class Item implements Comparable<br>  {<br>    long w;<br>    long c;<br><br>    public int compareTo(Object o)<br>    {<br>      if (w &lt; ((Item)o).w)<br>        return -1;<br>      if (w &gt; ((Item)o).w)<br>        return 1;<br>      if (c &lt; ((Item)o).c)<br>        return -1;<br>      if (c &gt; ((Item)o).c)<br>        return 1;<br>      return 0;<br>    }<br>  }<br><br>  Item[] items;<br>  long[] parsums;<br>  long[] parcosts;<br>  int nitems;<br>  long ans;<br>  int count;<br>  HashMap&lt;Long, Long&gt;[] table;<br><br>  void inittable()<br>  {<br>    table = new HashMap[nitems];<br>    for (int i = 0; i &lt; nitems; i++)<br>      table[i] = new HashMap&lt;Long, Long&gt;();<br>  }<br>  public long rec(int gl, long maxw)<br>  {<br>    count++;<br>    if (gl &lt; 0)<br>    {<br>      return 0;<br>    }<br>    if (maxw &gt;= parsums[gl])<br>    {<br>      return parcosts[gl];<br>    }<br>    if (table[gl].containsKey(maxw))<br>    {<br>      return table[gl].get(maxw);<br>    }<br>    long ans = 0;<br>    if (maxw &gt;= items[gl].w)<br>    {<br>      ans = items[gl].c + rec(gl - 1, maxw - items[gl].w);<br>    }<br>    ans = Math.max(ans, rec(gl - 1, maxw));<br>    table[gl].put(maxw, ans);<br>    return ans;<br>  }<br>  public long maximalCost(String[] Items, String C)<br>  {<br>    maxw = Long.parseLong(C);<br>    nitems = Items.length;<br>    if (nitems == 0)<br>      return 0;<br>    inittable();<br>    items = new Item[nitems];<br>    for (int i = 0; i &lt; nitems; i++)<br>    {<br>      items[i] = new Item();<br>      String[] ss = Items[i].split(" ");<br>      items[i].w = Long.parseLong(ss[0]);<br>      items[i].c = Long.parseLong(ss[1]);<br>    }<br>    Arrays.sort(items);<br>    parsums = new long[nitems];<br>    parcosts = new long[nitems];<br>    parsums[0] = items[0].w;<br>    parcosts[0] = items[0].c;<br>    for (int i = 1; i &lt; nitems; i++)<br>    {<br>      parsums[i] = parsums[i - 1] + items[i].w;<br>      parcosts[i] = parcosts[i - 1] + items[i].c;<br>    }<br>    ans = 0;<br>    count = 0;<br>    ans = rec(nitems - 1, maxw);<br>    System.out.println(count);<br>    return ans;<br>  }<br>}<br></td>