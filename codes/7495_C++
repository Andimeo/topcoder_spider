<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;set&gt;<br>#include &lt;stdio.h&gt;<br>#define maxn 50<br><br>using namespace std;<br><br>class WordConnect {<br>  public:<br>  <br>  int dad[maxn*maxn];<br>  <br>  int anc (int x) {<br>    return dad[x] == -1? x : (dad[x] = anc(dad[x]));<br>    }<br>  <br>  void comb (int a, int b) {<br>    printf("comb %d %d\n",a,b);<br>    a = anc(a);<br>    b = anc(b);<br>    if (a != b)<br>      dad[a] = b;<br>    }<br>  <br>  char data[maxn][maxn];<br>  int flag[maxn][maxn];<br>  int n, m;<br>  <br>  int numComponents(string word, vector &lt;string&gt; table) {<br>    int i,j,k,f;<br>    <br>    n = table.size();<br>    m = table[0].size();<br>    for (i = 0; i &lt; n; i ++)<br>      for (j = 0; j &lt; m; j ++)<br>        data[i][j] = table[i][j];<br>    memset(flag,-1,sizeof(flag));<br>    for (i = 0; i &lt; n; i ++)<br>      for (j = 0; j &lt; m; j ++)<br>        if (data[i][j] == word[0])<br>          flag[i][j] = 0;<br>    for (k = 1 ; k &lt; word.size(); k ++)<br>      for (i = 0; i &lt; n; i ++)<br>        for (j = 0; j &lt; m; j ++)<br>          if (data[i][j] == word[k]) {<br>            f = 0;<br>            f |= (i &gt; 0 &amp;&amp; flag[i - 1][j] == k - 1);<br>            f |= (j &gt; 0 &amp;&amp; flag[i][j - 1] == k - 1);<br>            f |= (i + 1 &lt; n &amp;&amp; flag[i + 1][j] == k - 1);<br>            f |= (j + 1 &lt; m &amp;&amp; flag[i][j + 1] == k - 1);<br>            if (f)<br>              flag[i][j] = k;<br>            }<br>    for (k = word.size() - 2; k &gt;= 0; k --)<br>      for (i = 0; i &lt; n; i ++)<br>        for (j = 0; j &lt; m; j ++)<br>          if (flag[i][j] == k) {<br>            f = 0;<br>            f |= (i &gt; 0 &amp;&amp; flag[i - 1][j] == k + 1);<br>            f |= (j &gt; 0 &amp;&amp; flag[i][j - 1] == k + 1);<br>            f |= (i + 1 &lt; n &amp;&amp; flag[i + 1][j] == k + 1);<br>            f |= (j + 1 &lt; m &amp;&amp; flag[i][j + 1] == k + 1);<br>            if (!f)<br>              flag[i][j] = -1;<br>            }<br>    <br>    memset(dad,-1,sizeof(dad));<br>    for (i = 0; i &lt; n; i ++)<br>      for (j = 0; j &lt; m; j ++)<br>        if (flag[i][j] != -1) {<br>          if (i &gt; 0 &amp;&amp; flag[i-1][j] != -1 &amp;&amp; flag[i-1][j] == flag[i][j] + 1)<br>            comb(i * m + j, (i - 1) * m + j);<br>          if (j &gt; 0 &amp;&amp; flag[i][j-1] != -1 &amp;&amp; flag[i][j-1] == flag[i][j] + 1)<br>            comb(i * m + j, i * m + (j - 1));<br>          if (i + 1 &lt; n &amp;&amp; flag[i+1][j] != -1 &amp;&amp; flag[i+1][j] == flag[i][j] + 1)<br>            comb(i * m + j, (i + 1) * m + j);<br>          if (j + 1 &lt; m &amp;&amp; flag[i][j+1] != -1 &amp;&amp; flag[i][j+1] == flag[i][j] + 1)<br>            comb(i * m + j, i * m + (j + 1));<br>          }<br>    <br>    set&lt;int&gt; res;<br>    <br>    res.clear();<br>    for (i = 0; i &lt; n*m; i ++)<br>      res.insert(anc(i));<br>    return res.size();<br>    }<br>  };<br></td>