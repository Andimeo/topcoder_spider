<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;algorithm&gt;<br>#include &lt;string&gt;<br>#include &lt;set&gt;<br>#include &lt;map&gt;<br>#include &lt;vector&gt;<br>#include &lt;queue&gt;<br>#include &lt;iostream&gt;<br>#include &lt;iterator&gt;<br>#include &lt;math.h&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;sstream&gt;<br> <br>using namespace std;<br> <br>#define FOR(i,a,b) for (int _n(b), i(a); i &lt; _n; i++)<br>#define REP(i,n) FOR(i,0,n)<br> <br>#define VAR(a,b) __typeof(b) a=(b)<br>#define FOREACH(it,c) for(VAR(it,(c).begin());it!=(c).end();++it)<br> <br>#define pb push_back<br>#define SZ(c) (c).size()<br> <br>typedef vector&lt;int&gt; VI;<br>typedef vector&lt;VI&gt; VVI;<br> <br>class Provinces {<br>     VVI adj;<br>     vector&lt;bool&gt; visited;<br>     bool FindWay(int v,int targ) {<br>    visited[v]=true;<br>    if(v==targ)return true;<br>    else {<br>         FOREACH(e,adj[v])<br>        if(!visited[*e]&amp;&amp;FindWay(*e,targ))return true;<br>         return false;<br>    }<br>     }<br>public:<br>     int maximalNumber(int n, vector &lt;string&gt; roads) {<br>    string edgs="";<br>    int res=1;<br>    char chr;<br>    adj=VVI(n+1);<br>    REP(i,n-1)<br>         adj[i+1].pb(i+2);<br>    REP(i,SZ(roads))<br>         edgs+=roads[i];<br>    istringstream is(edgs);<br>    do {<br>         int v1,v2;<br>         if(is&gt;&gt;v1&gt;&gt;v2)<br>        adj[v1].pb(v2);<br>    }while(is&gt;&gt;chr);<br>    for(int cnt=2;cnt&lt;=n;cnt++)<br>         if(n%cnt==0) {<br>        int sz=n/cnt;<br>        bool good=true;<br>        visited=vector&lt;bool&gt;(n+1,false);<br>        for(int i=n-sz+1;i&gt;1&amp;&amp;good;i-=sz) <br>       if(FindWay(i,i-1))good=false;<br>        if(good)res=cnt;<br>         }<br>         <br>    return res;<br>     }<br>      <br> <br>};<br> <br> <br> <br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003]<br>// Powered by CodeProcessor<br></td>