<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Text;<br>using System.Collections;<br>using System.Collections.Generic;<br><br>public class CsCourses<br>{<br>    const int INF = 999999999;<br><br>    int n, bound;<br>    int[] tv, pv;<br>    int[] exp;<br>    int[, ,] f;<br>    bool[, ,] flag;<br><br>    int com(int m, int t, int p)<br>    {<br>        if (flag[m, t, p]) return f[m, t, p];<br>        flag[m, t, p] = true;<br><br>        int res = INF;<br>        if (t &gt;= bound &amp;&amp; p &gt;= bound) res = 0;<br>        else<br>        {<br>            for (int i = 0; i &lt; n; i++) if (m &lt; exp[i] &amp;&amp; t + 1 &gt;= tv[i] &amp;&amp; p + 1 &gt;= pv[i])<br>                {<br>                    if (t &gt;= tv[i] &amp;&amp; p &gt;= pv[i]) continue;<br>                    int w = com(m + 1, Math.Max(t, tv[i]), Math.Max(p, pv[i])) + 1;<br>                    res = Math.Min(res, w);<br>                }<br>        }<br><br>        return f[m, t, p] = res;<br>    }<br><br>    public int[] getOrder(int[] theoreticalValue, int[] practicalValue, int[] expire, int skillBound)<br>    {<br>        bound = skillBound;<br>        tv = theoreticalValue;<br>        pv = practicalValue;<br>        exp = expire;<br>        n = exp.Length;<br><br>        f = new int[n + 1, 51, 51];<br>        flag = new bool[n + 1, 51, 51];<br>        int best = com(0, 0, 0);<br><br>        if (best == INF)<br>        {<br>            return new int[0];<br>        }<br><br>        int[] ans = new int[best];<br>        int pans = 0;<br><br>        int t = 0, p = 0;<br>        for (int i = 0; i &lt; best; i++)<br>        {<br>            int left = best - i - 1;<br>            for (int j = 0; j &lt; n; j++)<br>            {<br>                if (i &lt; exp[j] &amp;&amp; t + 1 &gt;= tv[j] &amp;&amp; p + 1 &gt;= pv[j])<br>                {<br>                    int tt = Math.Max(t, tv[j]), pp = Math.Max(p, pv[j]);<br>                    if (flag[i + 1, tt, pp] &amp;&amp; f[i + 1, tt, pp] == left)<br>                    {<br><br>                        ans[pans++] = j;<br>                        t = tt; p = pp;<br>                        break;<br>                    }<br>                }<br>            }<br>        }<br><br>        return ans;<br>    }<br><br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003] [modified for C# by Petr]<br>// Powered by CodeProcessor<br></td>