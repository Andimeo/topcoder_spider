<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;vector&gt;<br>#include &lt;list&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;deque&gt;<br>#include &lt;stack&gt;<br>#include &lt;bitset&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;functional&gt;<br>#include &lt;numeric&gt;<br>#include &lt;utility&gt;<br>#include &lt;sstream&gt;<br>#include &lt;iostream&gt;<br>#include &lt;iomanip&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;ctime&gt;<br><br>using namespace std;<br><br>//typedef long long __int64;<br><br>class CsCourses<br>{<br>public:<br>  vector&lt;int&gt; A,B,E,result;<br>  int f[60][60][60],L;<br>  int max(int a,int b)<br>  {<br>    return (a&gt;b)?a:b;<br>  }<br>  int solve(int m,int vA,int vB)<br>  {<br>    int &amp;ret=f[m][vA][vB];<br>    if (ret!=-1)<br>      return ret;<br>    if (vA&gt;=L &amp;&amp; vB&gt;=L)<br>      return ret=0;<br>    ret=100000000;<br>    for (int i=0;i&lt;A.size();i++)<br>      if (E[i]&gt;m &amp;&amp; vA&gt;=A[i]-1 &amp;&amp; vB&gt;=B[i]-1)<br>      {<br>        int t=solve(m+1,max(vA,A[i]),max(vB,B[i]))+1;<br>        if (t&lt;ret)<br>          ret=t;<br>      }<br>    return ret;<br>  }<br>  void construct(int m,int vA,int vB)<br>  {<br>    if (vA&gt;=L &amp;&amp; vB&gt;=L)<br>      return;<br>    int r=solve(m,vA,vB);<br>    for (int i=0;i&lt;A.size();i++)<br>      if (E[i]&gt;m &amp;&amp; vA&gt;=A[i]-1 &amp;&amp; vB&gt;=B[i]-1<br>       &amp;&amp; solve(m+1,max(vA,A[i]),max(vB,B[i]))+1==r)<br>      {<br>        result.push_back(i);<br>        construct(m+1,max(vA,A[i]),max(vB,B[i]));<br>        return;<br>      }<br>  }<br>  vector&lt;int&gt; getOrder(vector&lt;int&gt; _A, vector&lt;int&gt; _B, vector &lt;int&gt; _E, int _L)<br>  {<br>    memset(f,255,sizeof(f));<br>    A=_A;<br>    B=_B;<br>    E=_E;<br>    L=_L;<br>    int ret=solve(0,0,0);<br>    result.clear();<br>    if (ret==100000000)<br>      return result;<br>    construct(0,0,0);<br>    return result;<br>  }<br>};<br></td>