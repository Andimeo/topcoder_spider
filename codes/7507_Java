<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>import java.math.*;<br> <br>public class VegetableGarden {<br> <br> <br>    public int[] getMinDistances (String[] garden) {<br>        printf ("\n");<br>        int m = garden[0].length();<br>        int n = garden.length;<br>        char[][] g = new char[n][m];<br>        for (int i=0; i&lt;n; i++) g[i] = garden[i].toCharArray();<br>        <br>        int imp=0;<br>        int[] impx = new int[10];<br>        int[] impy = new int[10];<br>        boolean[] impgood = new boolean[10];<br>        for (int i=0; i&lt;n; i++)<br>          for (int j=0; j&lt;m; j++) {<br>            if (g[i][j] != '.') {<br>              impx[imp]=i;<br>              impy[imp]=j;<br>              impgood[imp] = g[i][j] == 'I';<br>              imp++;<br>            }<br>          }<br>        <br>        LinkedList&lt;int[]&gt; Q = new LinkedList&lt;int[]&gt;();<br>        <br>        int[][][] cando = new int[n+1][m+1][1&lt;&lt;imp];<br>        for (int i=0; i&lt;=n; i++)<br>          for (int j=0; j&lt;=m; j++)<br>            Arrays.fill(cando[i][j], 1000000);<br>        cando[0][0][0] = -1;<br>        <br>        Q.addFirst(new int[]{0, 0, 0});<br>        Q.add(null);<br>        <br>        int[] dx = new int[]{-1, 1, 0, 0};<br>        int[] dy = new int[]{0, 0, -1, 1};<br>        <br>        int round=1;<br>        <br>        while (Q.size() &gt; 1) {<br>          int[] elt = Q.removeFirst();<br>          //System.out.println(Arrays.toString(elt));<br>          if (elt==null) {Q.addLast(null); round++; continue;}<br>          for (int u=0; u&lt;4; u++) {<br>            int x1 = elt[0]+dx[u];<br>            int y1 = elt[1]+dy[u];<br>            int m1 = elt[2];<br>            if (x1 &lt; 0 || x1 &gt; n || y1 &lt; 0 || y1 &gt; m) continue;<br>            for (int v=0; v&lt;imp; v++)<br>              if (u&gt;1 &amp;&amp; x1 &gt; impx[v] &amp;&amp; Math.min(elt[1], y1) == impy[v])<br>                m1 ^= (1&lt;&lt;v);<br>            if (cando[x1][y1][m1] &gt; round) {<br>              cando[x1][y1][m1] = round;<br>              Q.addLast(new int[]{x1, y1, m1});<br>            }<br>          }<br>        }<br>        <br>        //System.out.println(imp+" "+Arrays.toString(impgood));<br>        int rl = 0;<br>        for (int i=0; i&lt;imp; i++) if (impgood[i]) rl++;<br>        <br>        int[] res = new int[rl];<br>        //System.out.println(rl);<br>        Arrays.fill(res, 1000000);<br>        <br>        foo: for (int msk=0; msk&lt;(1&lt;&lt;imp); msk++) {<br>          int cnt=0;<br>          for (int v=0; v&lt;imp; v++) {<br>            if (!impgood[v] &amp;&amp; (((msk &gt;&gt; v)&amp;1)==1)) continue foo;<br>            if (((msk &gt;&gt; v)&amp;1)==1) cnt++;<br>          }<br>          if (cnt&gt;0)<br>            res[cnt-1] = Math.min(res[cnt-1], cando[0][0][msk]);<br>        }<br>        <br>        return res;<br>    }<br> <br> <br>    static void printf (String f, Object... a) {<br>    }<br> <br> <br>}<br><br><br>// Powered by FileEdit<br>// Powered by CodeProcessor<br></td>