<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;vector&gt;<br>#include &lt;list&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;deque&gt;<br>#include &lt;stack&gt;<br>#include &lt;bitset&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;functional&gt;<br>#include &lt;numeric&gt;<br>#include &lt;utility&gt;<br>#include &lt;sstream&gt;<br>#include &lt;iostream&gt;<br>#include &lt;iomanip&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;ctime&gt;<br> <br>using namespace std;<br> <br>typedef long long LL;<br> <br>#define MIN(a,b) (((a)&lt;(b))?(a):(b))<br>#define MAX(a,b) (((a)&gt;(b))?(a):(b))<br> <br>#define FOR(i,n) for(int i = 0; i &lt; (n); ++i)<br>#define FORB(i,n) for(int i = (n) - 1; i &gt;= 0; --i)<br>#define CNT(i,s,n) for(int i = (s); i &lt; (n); ++i)<br>#define CNTB(i,s,n) for(int i = (n) - 1; i &gt;= (s); --i)<br> <br>#define SWAP(a,b) a^=b; b^=a; a^=b<br> <br>#define REV(str) for(int i = 0; i &lt; str.length() / 2; ++i) { char tmp = str[i]; str[i] = str[str.length() - i - 1]; str[str.length() - i - 1] = tmp; }<br> <br>vector &lt;string&gt; R;<br>int Me;<br>int N;<br>int Este[20];<br>int G[20];<br> <br>int SOL;<br> <br>class Mafia {<br>public:<br>  int play(vector &lt;int&gt;, vector &lt;string&gt;, int);<br>};<br> <br>int Remove(){<br>  int dead = -1;<br>  FOR(i, N) if (Este[i]){<br>    if (dead == -1 || G[dead] &lt; G[i]){<br>      dead = i;<br>    }<br>  }<br>  Este[dead] = 0;<br>  return dead;<br>}<br> <br>void GetBack(int pos){<br>  Este[pos] = 1;<br>}<br> <br>void Kill(int pos){<br>  Este[pos] = 0;<br>  FOR(i, N){<br>    if ('a' &lt;= R[pos][i]){<br>      G[i] -= R[pos][i] - 'a' + 1;<br>    }else{<br>      G[i] += R[pos][i] - 'A' + 1;<br>    }<br>  }<br>}<br> <br>void Revive(int pos){<br>  Este[pos] = 1;<br>  FOR(i, N){<br>    if ('a' &lt;= R[pos][i]){<br>      G[i] += R[pos][i] - 'a' + 1;<br>    }else{<br>      G[i] -= R[pos][i] - 'A' + 1;<br>    }<br>  }<br>}<br> <br>void Back(int sol){<br>  int dead;<br>  if (SOL &lt; sol){<br>    SOL = sol;<br>  }<br>  if (N){<br>    FOR(i, N) if (Este[i] &amp;&amp; i != Me){<br>      Kill(i);<br>      if ((dead = Remove()) != Me){<br>        Back(sol + 1);<br>      }<br>      GetBack(dead);<br>      Revive(i);<br>    }<br>  }<br>}<br> <br>int Mafia::play(vector &lt;int&gt; guilt, vector &lt;string&gt; responses, int playerIndex) {<br>  R = responses;<br>  SOL = 0;<br>  Me = playerIndex;<br>  N = guilt.size();<br>  FOR(i, N){<br>    G[i] = guilt[i];<br>    Este[i] = 1;<br>  }<br>  if (N%2){<br>    if (Remove() == Me){<br>      return 0;<br>    }<br>  }<br>  Back(1);<br>  return SOL;<br>}<br> <br> <br>//Powered by [KawigiEdit] 2.0!<br></td>