<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>import java.util.regex.*;<br>import java.text.*;<br>import java.math.*;<br>import java.awt.geom.*;<br> <br>public class Mafia<br>{<br>  <br>  HashMap&lt;Integer, Integer&gt; map;<br>  <br>  int getAns(int[] guilt, String[] responses, int playerIndex, int dead, int kills, int alive)<br>  {<br>    int hash = dead + (kills &lt;&lt; 16);<br>    if (map.containsKey(hash))<br>      return map.get(hash);<br>    <br>    int ans = 0;<br>    <br>    if ((dead &amp; getMask(playerIndex)) != 0)<br>      return 0;<br>    <br>    if (alive % 2 == 1)<br>    {<br>      int cur = 0;<br>      for (int i = 0; i &lt; guilt.length; ++i)<br>      {<br>        if ((dead &amp; getMask(cur)) != 0)<br>          cur = i;<br>        <br>        if (((dead &amp; getMask(i)) == 0) &amp;&amp; (guilt[i] &gt; guilt[cur]))<br>        {<br>          cur = i;<br>        }<br>      }<br>      <br>      dead |= getMask(cur);<br>      --alive;<br>      ans = getAns(guilt, responses, playerIndex, dead, kills, alive);<br>      map.put(hash, ans);<br>      <br>      return ans;<br>    }<br>    else<br>    {<br>      int[] nG = new int[guilt.length];<br>      <br>      for (int i = 0; i &lt; guilt.length; ++i)  <br>      {<br>        if ((i == playerIndex) || ((dead &amp; getMask(i)) != 0))<br>          continue;<br>        <br>        for (int j = 0; j &lt; guilt.length; ++j)<br>        {<br>          nG[j] = guilt[j] + getCh(responses[i], j);<br>        }<br>        <br>        <br>        ans = Math.max(ans, getAns(nG, responses, playerIndex, dead | getMask(i), kills | getMask(i), alive - 1));<br>      }<br>      <br>      ++ans;<br>      map.put(hash, ans);<br>      <br>      return ans;<br>    }<br>  }<br>  <br>  int getMask(int num)<br>  {<br>    return 1 &lt;&lt; num;<br>  }<br>  <br>  int getCh(String s, int index)<br>  {<br>    char c = s.charAt(index);<br>    if (Character.isLowerCase(c))<br>      return ('a' - c  - 1);<br>    <br>    return (c - 'A' + 1);<br>  }<br>  <br>  public int play(int[] guilt, String[] responses, int playerIndex)<br>  {<br>    map = new HashMap&lt;Integer, Integer&gt;();<br>    <br>    return getAns(guilt, responses, playerIndex, 0, 0, guilt.length);<br>  }<br>  <br>  <br> <br>}<br>//Powered by [KawigiEdit] 2.0!<br></td>