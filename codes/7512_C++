<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;iostream&gt;<br>#include &lt;sstream&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cmath&gt;<br>#include &lt;memory&gt;<br>#include &lt;cctype&gt;<br>#include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;list&gt;<br>#include &lt;queue&gt;<br>#include &lt;deque&gt;<br>#include &lt;stack&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;algorithm&gt;<br>using namespace std;<br><br>typedef long long Int;<br>typedef pair&lt;int,int&gt; PII;<br>typedef vector&lt;int&gt; VInt;<br><br>#define FOR(i, a, b) for(i = a; i &lt; b; i++)<br>#define RFOR(i, a, b) for(i = a - 1; i &gt;= b; i--)<br>#define CLEAR(a, b) memset(a, b, sizeof(a))<br>#define COPY(a, b) memcpy(a, b, sizeof(a))<br>#define SIZE(a) int((a).size()) <br>#define ALL(a) (a).begin(),(a).end() <br>#define FOREACH(i, a) for(i = (a).begin(); i != (a).end(); i++) <br>#define PB push_back<br>#define MP make_pair<br><br>vector&lt;string&gt; A;<br>int B[64][64];<br>int N, M;<br><br>int DX[] = {1, -1, 0, 0, 1, 1, -1, -1};<br>int DY[] = {0, 0, 1, -1, 1, -1, 1, -1};<br><br>void dfs(int x, int y, queue&lt;PII&gt;&amp; Q)<br>{<br>  B[x][y] = 1;<br>  int i;<br>  int finish = A[x][y] == '.' ? 4 : 8;<br>  FOR(i, 0, finish)<br>  {<br>    int xx = x + DX[i];<br>    int yy = y + DY[i];<br><br>    if(xx &lt; 0 || xx &gt;= N || yy &lt; 0 || yy &gt;= M || B[xx][yy])<br>      continue;<br><br>    if(A[x][y] == A[xx][yy])<br>      dfs(xx, yy, Q);<br>    else<br>      Q.push(PII(xx, yy));<br>  }<br>}<br><br>class LandAndSea {<br>  VInt Res;<br><br>  int F(int x, int y)<br>  {<br>    queue&lt;PII&gt; Q;<br>    dfs(x, y, Q);<br><br>    int res = -1;<br>    while(!Q.empty())<br>    {<br>      int xx = Q.front().first;<br>      int yy = Q.front().second;<br>      Q.pop();<br>      if(B[xx][yy] == 0)<br>        res = max(res, F(xx, yy));<br>    }<br><br>    if(A[x][y] != '.')<br>    {<br>      res++;<br>      while(SIZE(Res) &lt;= res)<br>        Res.PB(0);<br><br>      Res[res]++;<br>    }<br><br>    return res;<br>  }<br><br>  public:<br>  vector &lt;int&gt; howManyIslands(vector &lt;string&gt; seaMap) {<br>    N = SIZE(seaMap);<br>    M = SIZE(seaMap[0]);<br>    int i;<br>    FOR(i, 0, N)<br>      seaMap[i] = "." + seaMap[i] + ".";<br><br>    seaMap.insert(seaMap.begin(), string(M + 2, '.'));<br>    seaMap.PB(string(M + 2, '.'));<br><br>    N += 2;<br>    M += 2;<br><br>    Res.clear();<br>    A = seaMap;<br>    CLEAR(B, 0);<br>    F(0, 0);<br><br>    return Res;<br>  }<br><br>  <br><br>};<br><br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003]<br>// Powered by CodeProcessor<br></td>