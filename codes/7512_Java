<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br><br>public class LandAndSea {<br>  int n,m,cnt,curd,curo;<br>  int[][] col, r, col2, w;<br>  int[] dep, cdep;<br>  <br>  int[] di;<br>  int[] dj;<br>  <br>  public int[] howManyIslands(String[] seaMap) {<br>    di = new int[] {0,0,1,-1,1,1,-1,-1};<br>    dj = new int[] {1,-1,0,0,1,-1,1,-1};<br>    String[] s = seaMap;<br>    n = s.length;<br>    m = s[0].length();<br>    r = new int[n+2][m+2];<br>    col = new int[n+2][m+2];<br>    col2 = new int[n+2][m+2];<br>    for (int i=0; i&lt;n+2; i++) {<br>      Arrays.fill(r[i], 0);<br>      Arrays.fill(col[i], 0);<br>    }<br>    for (int i=0; i&lt;n; i++)<br>      for (int j=0; j&lt;m; j++)<br>        if (s[i].charAt(j) == 'x')<br>          r[i+1][j+1] = 1;<br>    <br>    n += 2;<br>    m += 2;<br>    cnt = 0;<br>    for (int i=0; i&lt;n; i++)<br>      for (int j=0; j&lt;m; j++)<br>        if (r[i][j] == 1 &amp;&amp; col[i][j] == 0) {<br>          cnt++;<br>          dfs(i, j);<br>        }<br>    dep = new int[cnt+1];<br>    w = new int[cnt+1][cnt+1];<br>    for (int i=0; i&lt;=cnt; i++)<br>      Arrays.fill(w[i], 0);<br>    Arrays.fill(dep, -1);<br>    for (int i=0; i&lt;n; i++)<br>      Arrays.fill(col2[i], 0);<br>    dfs2(0, 0);<br>    curd = 0;<br>    while (true) {<br>      boolean find = false;<br>      curd++;<br>      for (int i=0; i&lt;n; i++)<br>        for (int j=0; j&lt;m; j++)<br>          if (r[i][j] == 0 &amp;&amp; isnear(i, j, curd - 1) &amp;&amp; col2[i][j] == 0) {<br>            dfs2(i, j);<br>            find = true;<br>          }<br>      if (!find)<br>        break;<br>    }<br>    Arrays.fill(dep, -1);<br>    curd = -1;<br>    for (int i=1; i&lt;=cnt; i++)<br>      if (dep[i] == -1)<br>        dfs3(i);<br>    <br>    int[] res = new int[curd+1];<br>    Arrays.fill(res, 0);<br>    for (int i=1; i&lt;=cnt; i++)<br>      res[dep[i]]++;<br><br>    return res;<br>  }<br><br>  private void dfs3(int i) {<br>    dep[i] = 0;<br>    for (int j=1; j&lt;=cnt; j++)<br>      if (w[i][j] == 1) {<br>        if (dep[j] == -1)<br>          dfs3(j);<br>        if (dep[j] + 1 &gt; dep[i])<br>          dep[i] = dep[j] + 1;<br>      }<br>    if (dep[i] &gt; curd)<br>      curd = dep[i];<br>  }<br><br>  private boolean isnear(int i, int j, int d) {<br>    for (int k=0; k&lt;4; k++) {<br>      int ni = i + di[k];<br>      int nj = j + dj[k];<br>      if (ni &gt;= 0 &amp;&amp; ni &lt; n &amp;&amp; nj &gt;= 0 &amp;&amp; nj &lt; m)<br>        if (r[ni][nj] == 1 &amp;&amp; dep[col[ni][nj]] == d) {<br>          curo = col[ni][nj];<br>          return true;<br>        }<br>    }<br>    return false;<br>  }<br><br>  private void dfs2(int i, int j) {<br>    col2[i][j] = 1;<br>    for (int k=0; k&lt;4; k++) {<br>      int ni = i + di[k];<br>      int nj = j + dj[k];<br>      if (ni &gt;= 0 &amp;&amp; ni &lt; n &amp;&amp; nj &gt;= 0 &amp;&amp; nj &lt; m) {<br>        if (col2[ni][nj] == 0 &amp;&amp; r[ni][nj] == 0)<br>          dfs2(ni, nj);<br>        if (r[ni][nj] == 1 &amp;&amp; dep[col[ni][nj]] == -1) {<br>          w[curo][col[ni][nj]] = 1;<br>          dep[col[ni][nj]] = curd;<br>        }<br>      }<br>    }<br>  }<br><br>  private void dfs(int i, int j) {<br>    col[i][j] = cnt;<br>    for (int k=0; k&lt;8; k++) {<br>      int ni = i + di[k];<br>      int nj = j + dj[k];<br>      if (ni &gt;= 0 &amp;&amp; ni &lt; n &amp;&amp; nj &gt;= 0 &amp;&amp; nj &lt; m)<br>        if (col[ni][nj] == 0 &amp;&amp; r[ni][nj] == 1)<br>          dfs(ni, nj);<br>    }<br>  }<br><br>}<br><br><br><br>// Powered by FileEdit<br>// Powered by RETester [based on ExampleBuilder]<br>// Powered by CodeProcessor<br></td>