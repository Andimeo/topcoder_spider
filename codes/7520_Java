<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>public class NavalBattle<br>{<br>  public int firstDishonestMove(int n, int ship, int[] shots,<br>    String answers)<br>  {<br>    this.n = n;<br>    this.ship = ship;<br>    po = new boolean[n];<br>    neg = new boolean[n];<br>    for(int i=0;i&lt;shots.length;i++)<br>    {<br>      if(answers.charAt(i)=='0')<br>        neg[shots[i]] = true;<br>      else<br>        po[shots[i]] = true;<br>      memo = new int[n];<br>      Arrays.fill(memo, -1);<br>      if(solve(0)&lt;1)<br>        return i;<br>    }<br>    return -1;<br>  }<br>  boolean[] po,neg;<br>  int[] memo;<br>  int n,ship, IMP = -20;<br>  int solve(int pos)<br>  {<br>    if(pos&gt;=n)<br>      return 0;<br>    if(memo[pos]==-1)<br>    {<br>      int res = IMP;<br>      boolean found = false;<br>      for(int i=0;i&lt;ship;i++)<br>        if(pos+i&gt;=n || neg[pos+i])<br>          found = true;<br>      if(!found &amp;&amp; (pos+ship&gt;=n || !po[pos+ship]) )<br>      {<br>        int temp = solve(pos+ship+1);<br>        if(temp!=IMP)<br>          res = Math.max(res, 1+temp);<br>      }<br>      if(!po[pos])<br>      {<br>        int temp = solve(pos+1);<br>        if(temp!=IMP)<br>          res = Math.max(res, temp);<br>      }<br>      memo[pos] = res;<br>    }<br>    return memo[pos];<br>  }<br>}<br></td>