<td class="problemText" colspan="8" valign="middle" align="left">
            using System;          <br>using System.Collections;<br>using System.Collections.Generic;<br>using System.Text;<br>using System.Diagnostics;<br><br>public class RoadCrossing {<br>    double eps = 1e-9;<br>  public double passTime(string[] P, int roadWidth, int k, int carArrival) {<br>        int n = P.Length;<br>        int[][] A = new int[n][];int g=-1;<br>        foreach (string item in P) {++g;<br>            int[] ary = Array.ConvertAll&lt;string,int&gt;(item.Split(), int.Parse);<br>            A[g] = ary;<br>        }<br><br>        double ret = 1e9;<br>        List&lt;double&gt; check = new List&lt;double&gt;(); check.Add(carArrival);<br>        for (int i = 0; i &lt; n; i++)<br>            for (int j = 0; j &lt; n; j++) if (i != j) {<br>                    double t1 = A[i][0];    <br>                    double t2 = A[j][0];<br>                    double v1 = A[i][1];<br>                    double v2 = A[j][1];<br><br>                    if (v1 != v2) {<br>                        double t = (k + t1 * v1 - t2 * v2) / (v1 - v2);<br>                        check.Add(t);<br>                    }<br>                }<br>        for (int i = 0; i &lt; n; i++) {<br>            double t1 = A[i][0];<br>            double v1 = A[i][1];<br>            double t = (k + t1 * v1) / v1;<br>            check.Add(t);<br>        }<br>        for (int i = 0; i &lt; n; i++) {<br>            double t1 = A[i][0];<br>            double v1 = A[i][1];<br>            double t = (roadWidth - k + t1 * v1) / v1;<br>            check.Add(t);<br>        }<br>        check.Sort();<br>        foreach (double t in check) {<br>            if (t + eps &lt; carArrival) continue;<br>            if (ok(A, t, roadWidth, n, k)) return t;<br>        }<br><br><br>        return ret;<br>  }<br><br>    private bool ok(int[][] A, double t, int roadWidth, int n, int k) {<br><br>        List&lt;double&gt; G = new List&lt;double&gt;(); G.Add(0); G.Add(roadWidth);<br>        for (int i = 0; i &lt; n; i++) {<br>            double pos = (t - A[i][0]) * A[i][1];<br>            if (pos &lt; 0) continue;<br>            if (pos &gt; roadWidth) continue;<br>            G.Add(pos);<br>        }<br>        G.Sort();<br>        for (int i = 1; i &lt; G.Count; i++) {<br>            double dst = Math.Abs(G[i] - G[i - 1]);<br>            if (dst &gt; k - eps) return true;<br>        }<br><br>        return false;<br>    }      <br>#region TESTCODE     <br>  <br>     <br>#endregion    <br>}<br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003] [modified for C# by Petr]<br>// Powered by CodeProcessor<br></td>