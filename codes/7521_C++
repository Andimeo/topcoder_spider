<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;vector&gt;<br>#include &lt;string&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;sstream&gt;<br>#include &lt;iostream&gt;<br>#include &lt;queue&gt;<br>#include &lt;set&gt;<br>#include &lt;map&gt;<br><br>#include &lt;stdio.h&gt;<br>#include &lt;stdlib.h&gt;<br>#include &lt;string.h&gt;<br>#include &lt;math.h&gt;<br>#include &lt;ctype.h&gt;<br><br>using namespace std;<br><br>#define PB push_back<br>typedef long long LL;<br>typedef vector &lt;int&gt; VI;<br>typedef pair &lt;int, int&gt; PII;<br>#define SZ(a) (int)((a).size())<br>#define ALL(a) (a).begin(), (a).end()<br>#define REP(i, a) for (i = 0; i &lt; (a); i++)<br>#define REPS(i, a) REP(i, SZ(a))<br><br>#define eps 1e-9<br><br>class RoadCrossing<br>{<br>  VI t, v, x;<br>  int n, rw, cw, t0;<br>  double res;<br>  <br>  void Try( double curt )<br>  {<br>    if (curt &lt; t0 - eps)<br>      return;<br>  <br>//    printf("%.20lf\n", curt);<br>    <br>    vector &lt;double&gt; xx;<br>    int i;<br>    REP(i, n)<br>      if (curt &gt;= t[i] - eps)<br>        xx.PB(max(0.0, min(x[i] + (curt - t[i]) * v[i], (double)rw)));<br>    sort(ALL(xx));<br>    for (i = 1; i &lt; SZ(xx); i++)<br>      if (xx[i] - xx[i - 1] &gt; cw - eps)<br>        res &lt;?= curt;<br>  }<br>public:<br>  double passTime(vector &lt;string&gt; s, int _rw, int _cw, int _t0)<br>  {<br>    res = 1e20;<br>    rw = _rw, cw = _cw, t0 = _t0;<br>    n = SZ(s) + 2;<br>    t = VI(n), v = VI(n), x = VI(n);<br>    int i, j;<br>    <br>    REPS(i, s)<br>    {<br>      stringstream ss(s[i]);<br>      ss &gt;&gt; t[i] &gt;&gt; v[i];<br>      x[i] = 0;<br>    }<br>    t[n - 1] = 0, v[n - 1] = 0, x[n - 1] = 0;<br>    t[n - 2] = 0, v[n - 2] = 0, x[n - 2] = rw;<br><br>    Try(t0);<br>    REP(i, n)<br>      Try(t[i]);<br>    REP(i, n)<br>      REP(j, n)<br>        if (fabs(v[i] - v[j]) &gt; eps)<br>          Try((cw - (x[j] - v[j] * t[j] - x[i] + v[i] * t[i])) / (double)(v[j] - v[i]));<br>    return res;<br>  }<br>};<br></td>