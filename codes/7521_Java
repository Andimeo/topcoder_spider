<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>import java.util.regex.*;<br>import java.text.*;<br>import java.math.*;<br>import java.awt.geom.*;<br> <br>public class RoadCrossing<br>{<br> <br>  int n;<br>  int[] t0;<br>  int[] v;<br> <br>  public double passTime(String[] pedestrians, int roadWidth, int carWidth, int carArrival)<br>  {<br>    n =  pedestrians.length;<br>    t0 = new int[n];<br>    v = new int[n];<br>    for (int i = 0; i &lt; n; ++i) {<br>      String[] str = pedestrians[i].split(" ");<br>      t0[i] = Integer.parseInt(str[0]);<br>      v[i] = Integer.parseInt(str[1]);<br>    }<br>    double ans = Double.POSITIVE_INFINITY;<br>    if (check(carArrival, roadWidth, carWidth)) {<br>      ans = carArrival;<br>    }<br>    for (int i = 0; i &lt; n; ++i) {<br>      for (int j = 0; j &lt; n; ++j) {<br>        if (v[i] == v[j]) {<br>          continue;<br>        }<br>        double t = (v[i] * t0[i] - v[j] * t0[j] + carWidth) / ((double)(v[i] - v[j]));<br>        if (t &gt;= carArrival - 1e-10 &amp;&amp; check(t, roadWidth, carWidth)) {<br>          ans = Math.min(ans, t);<br>        }<br>      }<br>      double t = (carWidth + v[i] * t0[i]) / ((double)v[i]);<br>      if (t &gt;= carArrival - 1e-10 &amp;&amp; check(t, roadWidth, carWidth)) {<br>        ans = Math.min(ans, t);<br>      }<br>      t = (roadWidth - carWidth + v[i] * t0[i]) / ((double)v[i]);<br>      if (t &gt;= carArrival - 1e-10 &amp;&amp; check(t, roadWidth, carWidth)) {<br>        ans = Math.min(ans, t);<br>      }<br>    }<br>    return ans;<br>  }<br>  <br>  boolean check(double t, double width, double need) {<br>//    System.out.println(t);<br>    ArrayList&lt;Double&gt; pos = new ArrayList&lt;Double&gt;();<br>    pos.add(0.0);<br>    pos.add(width);<br>    for (int i = 0; i &lt; n; ++i) {<br>      double x = v[i] * (t - t0[i]);<br>      if (x &gt; 0 &amp;&amp; x &lt; width) {<br>        pos.add(x);<br>      }<br>    }<br>    Collections.sort(pos);<br>    double max = 0;<br>    double last = 0;<br>    for (int i = 0; i &lt; pos.size(); ++i) {<br>      max = Math.max(max, pos.get(i) - last);<br>      last = pos.get(i);<br>    }<br>    return max + 1e-10 &gt;= need;<br>  }<br>  <br>  <br> <br>}<br>//Powered by [KawigiEdit] 2.0!<br></td>