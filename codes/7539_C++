<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;algorithm&gt;<br>#include &lt;bitset&gt;<br>#include &lt;cassert&gt;<br>#include &lt;cctype&gt;<br>#include &lt;cmath&gt;<br>#include &lt;complex&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cstring&gt;<br>#include &lt;ctime&gt;<br>#include &lt;deque&gt;<br>#include &lt;functional&gt;<br>#include &lt;iostream&gt;<br>#include &lt;iterator&gt;<br>#include &lt;list&gt;<br>#include &lt;map&gt;<br>#include &lt;numeric&gt;<br>#include &lt;queue&gt;<br>#include &lt;set&gt;<br>#include &lt;sstream&gt;<br>#include &lt;stack&gt;<br>#include &lt;string&gt;<br>#include &lt;valarray&gt;<br>#include &lt;vector&gt;<br>#include &lt;utility&gt;<br><br>using namespace std;<br><br>#define all(v) (v).begin(), (v).end()<br><br>// Types<br>typedef long double ld;<br>typedef long long ll;<br>typedef pair &lt;int, int&gt; pii;<br>typedef vector &lt;int&gt; vi;<br>typedef vector &lt;pii&gt; vp;<br>typedef vector &lt;ld&gt; vd;<br>typedef vector &lt;string&gt; vs;<br>typedef vector &lt;bool&gt; vb;<br>typedef queue &lt;pii&gt; qp;<br>typedef map &lt;string, int&gt; msi;<br><br>// Constants<br>const int INF = 1000000000;<br>const ld EPS = 1e-10L;<br>const ld PI = 3.14159265358979L;<br><br>class Tetrahedron<br>{<br>// Global<br><br>// Functions<br>public:<br>  string exists(vector &lt;string&gt; d)<br>  {<br>    string res;<br>    int n;<br>    int a[4][4];<br>    for (int i = 0; i &lt; 4; ++i)<br>    {<br>      istringstream in(d[i]);<br>      for (int j = 0; j &lt; 4; ++j)<br>        in &gt;&gt; a[i][j];<br>    }<br>    for (int i = 0; i &lt; 4; ++i)<br>    {<br>      for (int j = 0; j &lt; 4; ++j)<br>      {<br>        for (int k = 0; k &lt; 4; ++k)<br>        {<br>          if (a[i][j] + a[j][k] &lt; a[i][k])<br>            return "NO";<br>        }<br>      }<br>    }<br>    double x0 = 0;<br>    double y0 = 0;<br>    double x1 = a[0][1];<br>    double y1 = 0;<br>    double x2 = (a[0][2] * a[0][2] - a[1][2] * a[1][2] + x1 * x1) / (2 * x1);<br>    double y2 = sqrt(a[0][2] * a[0][2] - x2 * x2);<br>    double x3 = (a[0][3] * a[0][3] - a[1][3] * a[1][3] + x1 * x1) / (2 * x1);<br>    double y3 = sqrt(a[0][3] * a[0][3] - x3 * x3);<br>    if (hypot(x2 - x3, y2 - y3) - EPS &lt; a[2][3] &amp;&amp; hypot(x2 - x3, y2 + y3) + EPS &gt; a[2][3])<br>      return "YES";<br>    else<br>      return "NO";<br>    return res;<br>  }<br>  <br><br>};<br><br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003]<br>// Powered by CodeProcessor<br></td>