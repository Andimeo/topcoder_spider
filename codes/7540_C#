<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections;<br>using System.Collections.Generic;<br><br>public class QuantumAlchemy {<br>    public int minSteps(string initial, string[] reactions) {<br><br>        int[] iStock = new int[26];<br>        for (int i = 0; i &lt; initial.Length; i++) {<br>            iStock[initial[i] - 'A']++;<br>        }<br>        int iRet = 0;<br>        if (iStock['X' - 'A'] &gt; 0) return 0;<br>        int[] iNeed = new int[26];<br>        iNeed['X' - 'A'] = 1;<br>        bool bHave = false;<br>        while (!bHave) {<br>            for (int i = 0; i &lt; 26; i++) {<br>                if (iNeed[i] &gt; iStock[i]) {<br>                    bool bFound = false;<br>                    for (int j = 0; j &lt; reactions.Length; j++) {<br>                        if (reactions[j][reactions[j].Length - 1] == (char)('A' + i)) {<br>                            for (int k = 0; k &lt; reactions[j].Length-3; k++) {<br>                                iNeed[reactions[j][k] - 'A']++;<br>                            }<br>                            bFound = true;<br>                        }<br>                    }<br>                    iNeed[i]--;<br>                    iRet++;<br>                    if (!bFound) return -1;<br>                }<br>            }<br>            bHave = true;<br>            int iTotNeed = 0;<br>            for (int i = 0; i &lt; 26; i++) {<br>                if (iNeed[i] &gt; iStock[i]) bHave = false;<br>                iTotNeed += iNeed[i];<br>            }<br>            if (iTotNeed &gt;= 100) return -1;<br>        }<br>        return iRet;<br><br>    }<br>}<br></td>