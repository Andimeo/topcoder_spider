<td class="problemText" colspan="8" valign="middle" align="left">
            #include&lt;vector&gt;<br>#include&lt;list&gt;<br>#include&lt;map&gt;<br>#include&lt;set&gt;<br>#include&lt;stack&gt;<br>#include&lt;algorithm&gt;<br>#include&lt;numeric&gt;<br>#include&lt;sstream&gt;<br>#include&lt;iostream&gt;<br>#include&lt;cstdio&gt;<br>#include&lt;cmath&gt;<br>#include&lt;cstdlib&gt;<br>#include&lt;queue&gt;<br> <br>using namespace std;<br> <br>typedef long long int64;<br>typedef vector&lt;int&gt; vi;<br>#define FOR(i,n) for (int i=0; i&lt;(n); i++)<br> <br>struct MetroNetwork {<br>  void dekoduj(int x,int *t) {<br>    FOR(i,10) t[i]=0;<br>    int p=0;<br>    while (x) {<br>      t[p++]=x%3;<br>      x/=3;<br>    }<br>  }<br>  struct edge {<br>    int line,destination,length[2];<br>    edge(int _line,int _destination,int _length,int _length2) { line=_line; destination=_destination; length[0]=_length; length[1]=_length2; }<br>  };<br>  vector&lt;edge&gt; s[60],s_rev[60];<br>  double m[6561][50],p[10];<br>  double minimizeTime(int start,int destination, vector &lt;string&gt; lines, vector &lt;string&gt; times, vector &lt;int&gt; probabilities, int change, int delay) {<br>    FOR(i,lines.size()) {<br>      istringstream tmp1(lines[i]),tmp2(times[i]);<br>      vi stations,lengths;<br>      int x; while (tmp1&gt;&gt;x) stations.push_back(x); while (tmp2&gt;&gt;x) lengths.push_back(x);<br>      FOR(a,stations.size()) for (int b=a+1; b&lt;stations.size(); b++) {<br>        int length=2*change; for (int c=a; c&lt;b; c++) length+=lengths[c];<br>        s[stations[a]].push_back(edge(i,stations[b],length+(b-a)*delay,length));<br>        s[stations[b]].push_back(edge(i,stations[a],length+(b-a)*delay,length));<br>        s_rev[stations[b]].push_back(edge(i,stations[a],length+(b-a)*delay,length));<br>        s_rev[stations[a]].push_back(edge(i,stations[b],length+(b-a)*delay,length));<br>      }<br>      p[i]=.01*probabilities[i];<br>    }<br>    // uff<br>    int power3[10]={1};<br>    FOR(i,9) power3[i+1]=power3[i]*3;<br>    for (int state=power3[lines.size()]-1; state&gt;=0; state--) {<br>      int cur[10];<br>      dekoduj(state,cur);<br>      typedef pair&lt;double,int&gt; p2;<br>      priority_queue&lt;p2&gt; q;<br>      FOR(place,50) {<br>        m[state][place]=1e30;<br>        if (place==destination) { m[state][place]=0; q.push(p2(0,place)); continue; }<br>        FOR(i,s[place].size()) if (!cur[s[place][i].line]) {<br>          int line=s[place][i].line;<br>          m[state][place]=m[state+power3[line]][place]*p[line]+m[state+2*power3[line]][place]*(1-p[line]);<br>          q.push(p2(-m[state][place],place));<br>          break;<br>        }<br>      }<br>      while (!q.empty()) {<br>        int place=q.top().second; q.pop();<br>        FOR(i,s_rev[place].size()) if (cur[s_rev[place][i].line]) {<br>          int place2=s_rev[place][i].destination;<br>          double time2=m[state][place]+s_rev[place][i].length[cur[s_rev[place][i].line]-1];<br>          if (time2+1e-11&lt;m[state][place2]) {<br>            m[state][place2]=time2;<br>            q.push(p2(-time2,place2));<br>          }<br>        }<br>      }<br>//      FOR(i,10) cout&lt;&lt;m[state][i]&lt;&lt;" "; cout&lt;&lt;endl;<br>    }<br>    return m[0][start]&lt;1e20?m[0][start]:-1.0;<br>  }<br>};<br> <br>//Powered by [KawigiEdit] 2.0!<br></td>