<td class="problemText" colspan="8" valign="middle" align="left">
            #include&lt;algorithm&gt; <br>#include&lt;sstream&gt;<br>#include&lt;string&gt; <br>#include&lt;vector&gt; <br>using namespace std; <br>  <br>#define FOR(i,a,b) for(int i = (a); i &lt; (b); ++i) <br>#define REP(i,n) FOR(i,0,n) <br>#define FORE(it,x) for(typeof(x.begin()) it=x.begin();it!=x.end();++it) <br>#define pb push_back <br>#define all(x) (x).begin(),(x).end() <br>#define CLEAR(x,with) memset(x,with,sizeof(x)) <br>#define sz size() <br>typedef long long ll;<br>struct SortMaterials<br>{<br>  bool passes(int edge, int quality, string color, string req)<br>  {<br>    istringstream inp(req);<br>    string t, a; int b;<br>    inp &gt;&gt; t;<br>    if(t == "EDGE")<br>    {<br>      inp &gt;&gt; b;<br>      return edge == b;<br>    }<br>    if(t == "QUALITY")<br>    {<br>      inp &gt;&gt; b;<br>      return quality &gt;= b;<br>    }<br>    inp &gt;&gt; a;<br>    return color == a;    <br>  }<br>  int totalVolume(vector &lt;string&gt; data, vector &lt;string&gt; R)<br>  {<br>    int ret = 0;<br>    REP(i,R.sz) REP(j,R[i].sz) if(R[i][j] == '=') R[i][j] = ' ';<br>    REP(i,data.sz) <br>    {<br>      int edge, quality; string color;<br>      istringstream inp(data[i]);<br>      inp &gt;&gt; edge &gt;&gt; quality &gt;&gt; color;<br>      bool pass = true;<br>      REP(j,R.sz) if(!passes(edge, quality, color, R[j])) { pass = false; break; }<br>      if(pass) ret += edge*edge*edge;<br>    }<br>    return ret;<br>  }<br>};<br></td>