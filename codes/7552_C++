<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;vector&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;iostream&gt;<br><br>using namespace std;<br><br>vector&lt;int&gt; p;<br>int table[1000];<br>int n;<br><br>class EntertainingSegment<br>{<br>public:<br>int longestEntertainingSegment(vector&lt;int&gt; left, vector&lt;int&gt; right, int k)<br>{<br>  int i, j;<br>  <br>  n = left.size();<br>  for (i = 0; i &lt; n; i++)<br>  {<br>    p.push_back(left[i]);<br>    p.push_back(right[i]);<br>  }<br>  sort(p.begin(), p.end());<br>  p.erase(unique(p.begin(), p.end()), p.end());<br>  <br>  for (i = 0; i &lt; n; i++)<br>  {<br>    int l = lower_bound(p.begin(), p.end(), left[i]) - p.begin();<br>    int r = lower_bound(p.begin(), p.end(), right[i]) - p.begin();<br>    <br>    for (j = l; j &lt; r; j++)<br>    {<br>      table[j]++;<br>    }<br>  }<br>  <br>  int ret = 0;<br>  int l = p[0], calc = 0;<br>  for (i = 0; i &lt; p.size(); i++)<br>  {<br>    if (table[i] &lt; k)<br>    {<br>      if (calc)<br>        ret &gt;?= p[i] - l;<br>      calc = 0;<br>    }<br>    else if (table[i] &gt;= k &amp;&amp; calc == 0)<br>    {<br>      l = p[i];<br>      calc = 1;<br>    }<br>  }<br>  return ret;<br>}<br>};<br></td>