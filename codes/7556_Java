<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br><br>public class ColorfulDisks{<br>  class Disk implements Comparable {<br>    int r;<br>    String c;<br><br>    public Disk(int r, String col) {<br>      this.r = r;<br>      this.c = col;<br>    }<br><br>    public int compareTo(Object o) {<br>      Disk q = (Disk) o;<br>      return Integer.valueOf(this.r).compareTo(Integer.valueOf(q.r));<br>    }<br><br>        /**<br>         * When an object implementing interface &lt;code&gt;Runnable&lt;/code&gt; is used<br>         * to create a thread, starting the thread causes the object's<br>         * &lt;code&gt;run&lt;/code&gt; method to be called in that separately executing<br>         * thread.<br>         * &lt;p/&gt;<br>         * The general contract of the method &lt;code&gt;run&lt;/code&gt; is that it may<br>         * take any action whatsoever.<br>         *<br>         * @see Thread#run()<br>         */<br><br>    }<br><br>  public String[] singleColor(String[] disks) {<br>    String[] colors = new String[50];<br>    int nc = 0;<br>    for (int i = 0; i &lt; disks.length; i++) {<br>      boolean is = false;<br>            String[] tmp = disks[i].split(" ");<br>            for (int j = 0; j &lt; nc; j++) {<br>        if (colors[j].equals(tmp[0])) {<br>          is = true;<br>          break;<br>        }<br>      }<br>      if (!is) {<br>        colors[nc++] = tmp[0];<br>      }<br>    }<br><br>    Disk[] d = new Disk[disks.length];<br>    for (int i = 0; i &lt; disks.length; i++) {<br>      String[] tmp = disks[i].split(" ");<br>      d[i] = new Disk(Integer.parseInt(tmp[1]), tmp[0]);<br>    }<br><br>    Arrays.sort(d);<br><br><br>    ArrayList&lt;String&gt; ans = new ArrayList&lt;String&gt;();<br>    for (int i = 0; i &lt; nc; i++) {<br>      boolean good = true;<br>      for (int j = 0; j &lt; 1001; j++) {<br>        int tot = 0;<br>        boolean has = false;<br>        for (int k = 0 ;k &lt; disks.length; k++) {<br>          if (d[k].r == j) {<br>            tot++;<br>            if (d[k].c.equals(colors[i])) {<br>              has = true;<br>              break;<br>            }<br>          }<br>        }<br>        if (tot &gt; 0 &amp;&amp; !has) {<br>          good = false;<br>          break;<br>        }<br>      }<br>      if (good) ans.add(colors[i]);<br>    }<br>    String[] res = new String[ans.size()];<br>    for (int i = 0; i &lt; ans.size(); i++) {<br>      res[i] = ans.get(i);<br>    }<br>    Arrays.sort(res);<br>    return res;<br>  }<br><br>   <br>}<br></td>