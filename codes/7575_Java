<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>import java.math.*;<br><br>import static java.lang.Math.*;<br><br>public class HittingPerfectTarget {<br>  final double EPS = 1E-9;<br><br>  class Point implements Comparable&lt;Point&gt; {<br>    double x, y;<br>    double fi, d;<br><br><br>    public int compareTo(Point o) {<br>      if (fi &lt; o.fi - EPS) return -1;<br>      if (fi &gt; o.fi + EPS) return 1;<br>      if (d &lt; o.d - EPS) return -1;<br>      if (d &gt; o.d + EPS) return 1;<br>      return 0;<br>    }<br><br>    Point(double x, double y) {<br>      this.x = x;<br>      this.y = y;<br>    }<br><br>  }<br><br>  class Poly {<br>    double[] x, y;<br>    int n;<br>    double xp, yp;<br><br>    Poly(int[] x1, int[] y1) {<br>      n = x1.length;<br>      x = new double[n + 1];<br>      y = new double[n + 1];<br><br>      Point[] a = new Point[n];<br>      int mn = 0;<br>      for(int i = 0; i &lt; n; ++i) {<br>        a[i] = new Point(x1[i], y1[i]);<br>        if (x1[i] &lt; x1[mn] || (x1[i] == x1[mn] &amp;&amp; y1[i] &lt; y1[mn])) mn = i;<br>      }<br><br>      for(int i = 0; i &lt; n; ++i)<br>        if (i == mn) {<br>          a[i].fi = -1E40;<br>        } else {<br>          a[i].fi = atan2(a[i].y - a[mn].y, a[i].x - a[mn].x);<br>          a[i].d = hypot(a[i].y - a[mn].y, a[i].x - a[mn].x);<br>        }<br>      <br>      Arrays.sort(a);<br>      xp = 0;<br>      yp = 0;<br>      for(int i = 0; i &lt; n; ++i) {<br>        x[i] = a[i].x;<br>        y[i] = a[i].y;<br>        xp += x[i];<br>        yp += y[i];<br>      }<br>      x[n] = x[0];<br>      y[n] = y[0];<br>      xp /= (double) n;<br>      yp /= (double) n;<br>    }<br><br>    boolean contains(double xx, double yy) {<br>      for(int i = 0; i &lt; n; ++i) {<br>        if (vpp(x[i + 1] - x[i], y[i + 1] - y[i], xx - x[i], yy - y[i]) * <br>          vpp(x[i + 1] - x[i], y[i + 1] - y[i], xp - x[i], yp - y[i]) &lt; 0) return false;<br>      }<br>      return true;<br>    }<br><br>    int vpp(double x1, double y1, double x2, double y2) {<br>      double res = x1 * y2 - x2 * y1;<br>      if (res &lt; -EPS) return -1;<br>      if (res &gt; EPS) return 1;<br>      return 0;<br>    }<br>  }<br><br>public<br>  double getProbability(int[] x1, int[] y1, int[] x2, int[] y2) {<br>    double ans = 0;<br>    Poly p1 = new Poly(x1, y1);<br>    Poly p2 = new Poly(x2, y2);<br>    for(int x = -100; x &lt;= 100; ++x)<br>      for(int y = -100; y &lt;= 100; ++y) {<br>        if (p1.contains(x, y) &amp;&amp; p2.contains(x, y)) ++ans;        <br>      }<br>       return ans / (201.0 * 201.0);<br>  }<br>}<br></td>