<td class="problemText" colspan="8" valign="middle" align="left">
            #include&lt;cstdio&gt;<br>#include&lt;sstream&gt;<br>#include&lt;cstdlib&gt;<br>#include&lt;cctype&gt;<br>#include&lt;cmath&gt;<br>#include&lt;algorithm&gt;<br>#include&lt;set&gt;<br>#include&lt;queue&gt;<br>#include&lt;stack&gt;<br>#include&lt;list&gt;<br>#include&lt;iostream&gt;<br>#include&lt;fstream&gt;<br>#include&lt;numeric&gt;<br>#include&lt;string&gt;<br>#include&lt;vector&gt;<br>#include&lt;cstring&gt;<br>#include&lt;map&gt;<br>#include&lt;iterator&gt;<br>using namespace std;<br> <br>#define REP(i,n) for(__typeof(n) i=0; i&lt;(n); i++)<br>#define sz size()<br>#define VS vector&lt;string&gt;<br>#define SET(t,v) memset((t), (v), sizeof(t))<br> <br> <br>// here comes the sun!!! :)<br> <br>int n;<br>int memo[1&lt;&lt;15][10][15];<br>VS P;<br> <br>int solve(int mask, int last, int id ) {<br>  int&amp; ret = memo[mask][last][id];<br>  if( ret != -1 ) return ret;<br>  <br>  ret = __builtin_popcount( mask );<br>  REP(i,n) if( !(mask &amp; 1&lt;&lt;i) &amp;&amp; (P[id][i] -'0') &gt;= last ) {<br>    int t = solve( mask | 1&lt;&lt;i , P[id][i] -'0', i );<br>    ret = max( t, ret );<br>  }<br>  return ret;    <br>}<br> <br>class ImageTraders {<br>public:<br>     int maxOwners( vector &lt;string&gt; price ) {<br>       int ret;  <br>       n = price.sz, P = price;<br>       <br>    SET( memo, -1 );    <br>    ret = solve( 1, 0, 0 );    <br>    return ret;<br>     }<br>};<br> <br> <br> <br> <br>// Powered by FileEdit<br>// Powered by moj 4 beta 3 [modified TZTester]<br>// Powered by CodeProcessor<br></td>