<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br><br>public class StarsInGraphs {<br>  const int INF = int.MaxValue / 2;<br>  public int starryPaths(string[] adjacencyMatrix, int C) {<br>    int n = adjacencyMatrix.Length;<br>    int[] deg = new int[n];<br>    for (int i = 0; i &lt; n; ++i)<br>      for (int j = 0; j &lt; n; ++j)<br>        if (adjacencyMatrix[i][j] == '1')<br>          ++deg[i];<br>    int minDeg = 3;<br>    int maxDeg = 3;<br>    while (starNumber(maxDeg + 1) &lt; C + 0.5)<br>      ++maxDeg;<br>    int[] d = new int[n];<br>    for (int i = 0; i &lt; n; ++i)<br>      if (deg[i] &gt;= minDeg &amp;&amp; deg[i] &lt;= maxDeg)<br>        d[i] = -1;<br>      else<br>        d[i] = INF;<br>    for (int step = 0; step &lt;= n + 1; ++step)<br>    {<br>      for (int a = 0; a &lt; n; ++a)<br>        for (int b = 0; b &lt; n; ++b)<br>          if (adjacencyMatrix[a][b] == '1' &amp;&amp; deg[a] &lt;= deg[b] &amp;&amp; deg[a] &gt;= minDeg &amp;&amp; deg[b] &lt;= maxDeg &amp;&amp; d[b] &gt; d[a] - 1)<br>          {<br>            d[b] = d[a] - 1;<br>            if (step == n + 1)<br>              return -1;<br>          }<br>    }<br>    int res = 0;<br>    for (int i = 0; i &lt; n; ++i)<br>      res = Math.Min(res, d[i]);<br>    return -res;<br>  }<br><br>  private double starNumber(int deg)<br>  {<br>    double res = 0;<br>    for (int k = 3; k &lt;= deg; ++k)<br>      res += c(deg, k);<br>    return res;<br>  }<br><br>  private double c(int n, int k)<br>  {<br>    if (k &gt; n - k)<br>      k = n - k;<br>    double res = 1;<br>    for (int i = 0; i &lt; k; ++i)<br>      res = res * (n - i) / (i + 1);<br>    return res;<br>  }<br><br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003] [modified for C# by Petr]<br>// Powered by CodeProcessor<br></td>