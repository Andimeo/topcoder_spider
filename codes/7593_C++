<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;vector&gt;<br>#include &lt;list&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;deque&gt;<br>#include &lt;queue&gt;<br>#include &lt;stack&gt;<br>#include &lt;bitset&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;functional&gt;<br>#include &lt;numeric&gt;<br>#include &lt;utility&gt;<br>#include &lt;sstream&gt;<br>#include &lt;iostream&gt;<br>#include &lt;iomanip&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cctype&gt;<br>#include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;list&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;deque&gt;<br>#include &lt;queue&gt;<br>#include &lt;stack&gt;<br>#include &lt;cstring&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;ctime&gt;<br><br>using namespace std;<br><br>typedef long long int64;<br>typedef unsigned long long uint64;<br>#define two(X) (1&lt;&lt;(X))<br>#define twoL(X) (((int64)(1))&lt;&lt;(X))<br>#define contain(S,X) (((S)&amp;two(X))!=0)<br>#define containL(S,X) (((S)&amp;twoL(X))!=0)<br>const double pi=acos(-1.0);<br>const double eps=1e-11;<br>template&lt;class T&gt; inline void checkmin(T &amp;a,T b){if(b&lt;a) a=b;}<br>template&lt;class T&gt; inline void checkmax(T &amp;a,T b){if(b&gt;a) a=b;}<br>template&lt;class T&gt; inline T sqr(T x){return x*x;}<br>typedef pair&lt;int,int&gt; ipair;<br><br>class StarsInGraphs<br>{<br>public:<br>  int n;<br>  int64 A[60],C[60][60];<br>  int f[60];<br>  int starryPaths(vector &lt;string&gt; G, int L)<br>  {<br>    memset(C,0,sizeof(C));<br>    for (int i=0;i&lt;60;i++)<br>      for (int j=0;j&lt;60;j++)<br>        C[i][j]=(j==0)?1:(C[i-1][j-1]+C[i-1][j]);<br>    n=G.size();<br>    for (int i=0;i&lt;n;i++)<br>    {<br>      int deg=0;<br>      for (int j=0;j&lt;n;j++)<br>        if (G[i][j]=='1')<br>          deg++;<br>      A[i]=0;<br>      for (int k=3;k&lt;=deg;k++)<br>        A[i]+=C[deg][k];<br>    }<br>    memset(f,0,sizeof(f));<br>    for (int i=0;i&lt;n;i++)<br>      if (A[i]&gt;0 &amp;&amp; A[i]&lt;=L)<br>        f[i]=1;<br>    bool changed=false;<br>    for (int step=0;step&lt;n+n;step++)<br>    {<br>      changed=false;<br>      for (int i=0;i&lt;n;i++) if (A[i]&gt;0 &amp;&amp; A[i]&lt;=L)<br>        for (int j=0;j&lt;n;j++) if (A[j]&gt;0 &amp;&amp; A[j]&lt;=L)<br>          if (G[i][j]=='1' &amp;&amp; A[i]&lt;=A[j] &amp;&amp; f[i]+1&gt;f[j])<br>          {<br>            f[j]=f[i]+1;<br>            changed=true;<br>          }<br>      if (!changed) break;<br>    }<br>    if (changed) return -1;<br>    int result=0;<br>    for (int i=0;i&lt;n;i++)<br>      checkmax(result,f[i]);<br>    return result;<br>  }<br>};<br></td>