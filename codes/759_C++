<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;iostream&gt;<br>#include &lt;queue&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;ctype.h&gt;<br>#include &lt;stdio.h&gt;<br>#include &lt;set&gt;<br>#include &lt;map&gt;<br>#include &lt;math.h&gt;<br> <br>using namespace std;<br> <br>const int dirx[]={-1, 0, 1, 0};<br>const int diry[]={0, 1, 0, -1};<br> <br> <br>class RiverHill {<br>  <br>  int m;<br>  int n;<br>  vector&lt;string&gt; map;<br>  int were[100][100];<br>  int maxl;<br>  <br>  int valid (int x, int y)<br>  {<br>    if (x&lt;0 || x&gt;=m) return 0;<br>    if (y&lt;0 || y&gt;=n) return 0;<br>    return 1;<br>  }<br>  <br>  int best (int x, int y)<br>  {<br>    queue&lt;int&gt; qx;<br>    queue&lt;int&gt; qy;        <br> <br>    for (int i=0; i&lt;m; i++)<br>    for (int j=0; j&lt;n; j++)<br>    were[i][j]=-1;    <br> <br>    were[x][y]=maxl;<br>    qx.push(x);<br>    qy.push(y);<br>    while (!qx.empty())<br>    {<br>      x=qx.front(); qx.pop();<br>      y=qy.front(); qy.pop();      <br> <br>      for (int i=0; i&lt;4; i++)<br>      {<br>        int xx=x+dirx[i];<br>        int yy=y+diry[i];<br>        if (valid(xx, yy) &amp;&amp; map[xx][yy]&lt;=map[x][y])<br>        {<br>          int nw;<br>          if (map[xx][yy]&lt;map[x][y]) nw=maxl;<br>          if (map[xx][yy]==map[x][y]) nw=were[x][y]-1;<br>          if (nw&gt;=0 &amp;&amp; (nw&gt;were[xx][yy])) <br>          {<br>            were[xx][yy]=nw;<br>            qx.push(xx);<br>            qy.push(yy);<br>          }<br>        }<br>      }<br>    }  <br>    <br>    int sol=0;<br>    for (int i=0; i&lt;m; i++)<br>    for (int j=0; j&lt;n; j++)<br>    if (were[i][j]!=-1) sol++;<br>    return sol;<br>  }<br>  <br>  public:<br>  int largest(vector &lt;string&gt; a, int b) {<br>    m=a.size();<br>    n=a[0].length();<br>    map=a;<br>    maxl=b;<br>    <br>    int sol=0;<br>    for (int i=0; i&lt;m; i++)<br>    for (int j=0; j&lt;n; j++)<br>    {<br>      int tmp=best(i, j);<br>      if (tmp&gt;sol) sol=tmp;<br>    }<br>    <br>    return sol;<br>  }<br>};<br> <br>// Powered by PopsEdit<br></td>