<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections.Generic;<br><br>public class Defects {<br>  const double EPS = 1e-11;<br>  <br>  public double maxSum(int w, int h, double[] defectw, double[] defecth) {<br>    double len = 2 * w + 2 * h;<br>    List&lt;double&gt; defects = new List&lt;double&gt;();<br>    for (int i = 0; i &lt; defectw.Length; ++i)<br>    {<br>      if (Math.Abs(defectw[i]) &lt; EPS)<br>        defects.Add(defecth[i]);<br>      else if (Math.Abs(defecth[i] - h) &lt; EPS)<br>        defects.Add(h + defectw[i]);<br>      else if (Math.Abs(defectw[i] - w) &lt; EPS)<br>        defects.Add(h + w + (h - defecth[i]));<br>      else<br>        defects.Add(2 * h + w + (w - defectw[i]));<br>    }<br>    double res = 0;<br>    for (int i = 0; i &lt; defects.Count; ++i)<br>      res = Math.Max(res, eval(defects[i], defects, len));<br>    for (int i = 0; i &lt; defects.Count; ++i)<br>      res = Math.Max(res, eval(defects[i] + len / 2, defects, len));<br>    return res;<br>  }<br><br>  private double eval(double at, List&lt;double&gt; defects, double len)<br>  {<br>    double res = 0;<br>    foreach (double x in defects)<br>    {<br>      double diff = x - at;<br>      while (diff &lt; 0)<br>        diff += len;<br>      while (diff &gt; len)<br>        diff -= len;<br>      if (diff &gt; len / 2)<br>        diff = len - diff;<br>      res += diff;<br>    }<br>    return res;<br>  }<br><br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003] [modified for C# by Petr]<br>// Powered by CodeProcessor<br></td>