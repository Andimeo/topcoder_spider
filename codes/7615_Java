<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br><br>public class Defects {<br>  public double maxSum(int w, int h, double[] defectw, double[] defecth) {<br>    int n = defecth.length;<br>    double[] l = new double[n];<br>    for (int i=0; i&lt;n; i++) {<br>      if (Math.abs(defecth[i]) &lt; 1e-9)<br>        l[i] = defectw[i];<br>      else if (Math.abs(defecth[i] - h) &lt; 1e-9)<br>        l[i] = 2*w - defectw[i] + h;<br>      else if (Math.abs(defectw[i]) &lt; 1e-9)<br>        l[i] = 2 * w + 2 * h - defecth[i];<br>      else<br>        l[i] = w + defecth[i];<br>    }<br>    <br>    double res = 0;<br>    for (int i=0; i&lt;n; i++) {<br>      res = Math.max(res, get(n, l, l[i], w, h));<br>      res = Math.max(res, get(n, l, l[i] + w + h, w, h));<br>    }<br>    <br>    return res;<br>  }<br><br>  private double get(int n, double[] l, double d, int w, int h) {<br>    while (d &gt; 2*(w+h))<br>      d = d - 2*(w+h);<br>    double s = 0;<br>    for (int i=0; i&lt;n; i++)<br>      s += Math.min(Math.abs(d - l[i]), 2*(w+h) - Math.abs(d - l[i])); <br>    return s;<br>  }<br><br>}<br><br><br><br>// Powered by FileEdit<br>// Powered by RETester [based on ExampleBuilder]<br>// Powered by CodeProcessor<br></td>