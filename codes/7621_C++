<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;sstream&gt;<br>#include &lt;iostream&gt;<br>#include &lt;algorithm&gt;<br> <br>using namespace std;<br> <br>#define ss stringstream<br>#define sz size()<br>#define pb push_back<br>#define FOR(i,n) for(i=0;i&lt;n;i++)<br>#define SFOR(i,m,n) for(i=m;i&lt;n;i++)<br>#define FORD(i,n) for(i=n-1;i&gt;=0;i--)<br> <br>vector &lt;int&gt; P,MD,D;<br> <br>long long H;<br> <br>void Rec(int q, long long w, long long e) {<br>  if (q == P.sz-1) return ;<br>  if (w &lt;= 1) { if (H &gt; e) H = e; return ; }<br>  if (H &lt;= e + P[q]) return ;<br>  Rec(q+1,w,e);<br>  long long qq = 1;<br>  int i;<br>  FOR(i,MD[q]) qq *= P[q];<br>  long long ww = qq*P[q];<br>  w = (w+P[q]-1)/P[q];<br>  while (qq + e &lt; H) {<br>    Rec(q+1,w,e+ww);<br>    if (ww*1.0*P[q] &gt; H) return ;<br>    ww *= P[q];<br>    w = (w+P[q]-1)/P[q];<br>  }<br>}<br> <br>class ToolingUp {<br>  public:<br>  int cost(string targetLcm, vector &lt;int&gt; sizes) {<br>    long long T;<br>    ss q; q &lt;&lt; targetLcm; q &gt;&gt; T;<br>    P.clear();<br>    int i,j,k;<br>    for(i=2;i&lt;20000;i++) {<br>      FOR(j,P.sz) if (i % P[j] == 0) break;<br>      if (j == P.sz) P.pb(i);<br>    }<br>    MD.assign(P.sz,0);<br>    D.assign(P.sz,0);<br>    FOR(i,sizes.sz) {<br>      FOR(j,P.sz) {<br>        k = 0;<br>        while (sizes[i] % P[j] == 0) { sizes[i] /= P[j]; k++; }<br>        if (MD[j] &lt; k) MD[j] = k;<br>      }<br>    }<br>    FOR(j,P.sz) FOR(i,MD[j]) T = (T+P[j]-1)/P[j];<br>    H = 0;<br>    long long TT = T;<br>    FOR(j,P.sz) if (MD[j] == 0) { H += P[j]; TT = (TT+P[j]-1)/P[j]; if (TT &lt;= 1) break; }<br>    Rec(0,T,0);<br>    return H;<br>  }<br>};<br> <br>// Powered by PopsEdit<br></td>