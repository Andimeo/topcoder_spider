<td class="problemText" colspan="8" valign="middle" align="left">
            #include&lt;iostream&gt;<br>#include&lt;cmath&gt;<br>#include&lt;vector&gt;<br>#include&lt;map&gt;<br>#define REP(i,n) for (int i=0;i&lt;(int) n;i++)<br>#define FOR(i,a,b) for(int i=(int)(a);i&lt;=(int)(b);++i)<br>#define LL long long<br>#define SZ size()<br>#define INF (1&lt;&lt;30)<br>#define vvi vector&lt;vector&lt;int&gt; &gt;<br>#define co continue<br>#define pb push_back<br>#define vi vector&lt;int&gt;<br>#define vs vector&lt;string&gt;<br>#define sf scanf<br>#define pf printf<br>#define br break<br>#define re return<br>#define ever (;;)<br>#define ALL(v) v.begin(),v.end() <br>#include&lt;algorithm&gt;<br>#include&lt;cstdio&gt;<br>#include&lt;cstdlib&gt;<br>#include&lt;string&gt;<br>#include&lt;queue&gt;<br><br>using namespace std;<br> <br>struct BuildATeam<br><br>{<br> <br>       int maximalStrength(vector &lt;int&gt; skills, int teams){<br>           int team[51];<br>           memset(team,0,sizeof(team));<br>           sort(ALL(skills));<br>           int i=0;<br>           while(i&lt;skills.SZ){<br>              <br>                for(int j=0;j&lt;teams;j++){<br>                    if(i&gt;=skills.SZ) br;<br>                    <br>                    team[j]+=skills[i];<br>                    <br>                    i++;<br>                }      <br>                <br>                for(int j=0;j&lt;teams;j++){<br>                    if(i&gt;=skills.SZ) br;<br>                    <br>                    team[teams-1-j]+=skills[i];<br>                    <br>                    i++;<br>                }      <br>           }   <br>           int res=0;<br>           REP(i,teams) res = max(res,team[i]);<br>           re res; <br>       }    <br>   <br>} ;<br></td>