<td class="problemText" colspan="8" valign="middle" align="left">
            #line 2 "StockSales.cpp"<br><br>// Warning: no successful challenges against me yet.<br><br>#include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;ctype.h&gt;<br>#include &lt;math.h&gt;<br>#include &lt;iostream&gt;<br>#include &lt;set&gt;<br>#include &lt;sstream&gt;<br><br>using namespace std;<br>typedef long long ll; typedef long double ld;<br>typedef vector&lt;int&gt; vi; typedef vector&lt;string&gt; vs;<br><br>#define LS &lt;<br>#define FOR(k,start,end) for(typeof(start) k=(start); k LS (end); ++k)<br>#define Size(x) (int(x.size()))<br>#define LET(k,val) typeof(val) k = (val)<br><br>#define CLC(act,val) (*({act; static typeof(val) CLCR; CLCR = (val); &amp;CLCR;}))<br> <br>#define FIRST(k,a,b,cond) CLC(LET(k, a); for(; k LS (b); k++) if(cond) break, k)<br>#define EXISTS(k,a,b,cond) (FIRST(k,a,b,cond) LS (b))<br>#define FORALL(k,a,b,cond) (!EXISTS(k,a,b,!(cond)))<br> <br>#define FOLD0(k,a,b,init,act) CLC(LET(k, a); LET(R##k, init); for(; k LS (b); k++) {act;}, R##k)<br>#define SUMTO(k,a,b,init,x)  FOLD0(k,a,b,init,R##k += (x))<br>#define PRODTO(k,a,b,init,x) FOLD0(k,a,b,init,R##k *= (x))<br>#define MAXTO(k,a,b,init,x)  FOLD0(k,a,b,init,R##k &gt;?= (x))<br>#define MINTO(k,a,b,init,x)  FOLD0(k,a,b,init,R##k &lt;?= (x))<br>#define SUM(k,a,b,x) SUMTO(k,a,b,(typeof(x)) (0), x)<br>#define PROD(k,a,b,x) PRODTO(k,a,b,(typeof(x)) (1), x)<br> <br>#define FOLD1(k,a,b,init,act) CLC(LET(k, a); LET(R##k, init); for(k++; k LS (b); k++) act, R##k)<br>#define MAX(k,a,b,x) FOLD1(k,a,b,x, R##k &gt;?= (x))<br>#define MIN(k,a,b,x) FOLD1(k,a,b,x, R##k &lt;?= (x))<br> <br>#define INF 2000000000<br>int tcize(int n) {return n&lt;INF ? n : -1;}<br><br><br>ll gcd(ll k, ll l) {<br>  return k ? gcd(l%k,k) : l;<br>  }<br><br>ll cd[200];<br><br>bool mod(ll a, ll b, ll c) {<br>  a %= b;<br>  if(a&lt;0) a += b;<br>  return a == c;<br>  }<br><br>class StockSales {<br>  public:<br>  vector &lt;int&gt; getAmounts(vector &lt;int&gt; values) {<br>    // !FDI<br>    int N = Size(values);<br>    cd[N-1] = values[N-1];<br>    for(int k=N-2; k&gt;=0; k--) cd[k] = gcd(cd[k+1], values[k]);<br>    ll curr = 0;<br>    ll min = cd[0];<br>    vector&lt;int&gt; res;<br>    FOR(k,0,N-1) if(cd[k+1] == cd[0]) res.push_back(0); else {<br>      ll cr = 0;<br>      while(true) {<br>        if(mod((curr+cr*values[k]), cd[k+1], cd[0])) {<br>          curr += cr*values[k];<br>          res.push_back(cr);<br>          break;<br>          }<br>        else if(mod((curr-cr*values[k]), cd[k+1], cd[0])) {<br>          curr -= cr*values[k];<br>          res.push_back(-cr);<br>          break;<br>          }<br>        else cr++;<br>        }<br>      }<br>    res.push_back((min-curr) / values[N-1]);<br>    return res;<br>    }<br>  <br> <br>  };<br><br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003]<br>// Powered by CodeProcessor<br></td>