<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections;<br>using System.Collections.Generic;<br><br>public class BalancingGame <br>{<br>  bool[] lut = new bool[1 &lt;&lt; 20];<br>  int[] minlut = new int[1 &lt;&lt; 20];<br>  int[] maxlut = new int[1 &lt;&lt; 20];<br>  int[] xx;<br>  int[] yy;<br>  int[] ww;<br>  long thresh;<br>  public int[] winningMoves(int[] x, int[] y, int[] w, int threshold) <br>  {<br>    thresh = threshold;<br>    thresh *= thresh;<br>    xx = x;<br>    yy = y;<br>    ww = w;<br>    for (int i = 0; i &lt; (1 &lt;&lt; x.Length); i++)<br>    {<br>      lut[i] = IsBalanced(i);<br>    }<br>    int start = (1 &lt;&lt; x.Length) - 1;<br>    if (!IsBalanced(start))<br>    {<br>      return new int[] { -1 };<br>    }<br>    List&lt;int&gt; moves = new List&lt;int&gt;();<br>    for (int i = 0; i &lt; x.Length; i++)<br>    {<br>      if(!min(start ^ (1 &lt;&lt; i)))<br>      {<br>        moves.Add(i);<br>      }<br>    }<br>    return moves.ToArray();<br>  }<br><br>  bool max(int state)<br>  {<br>    if (maxlut[state] != 0) return maxlut[state] == 2;<br>    if(state == 0) return false; // i moved first so i lose<br>    if (!IsBalanced(state)) return true;<br>    for (int i = 0; i &lt; xx.Length; i++)<br>    {<br>      if (((1 &lt;&lt; i) &amp; state) != 0)<br>      {<br>        bool them = min(state ^ (1 &lt;&lt; i));<br>        if (!them)<br>        {<br>          maxlut[state] = 2;<br>          return true;<br>        }<br>      }<br>    }<br>    maxlut[state] = 1;<br>    return false;<br>  }<br><br>  bool min(int state)<br>  {<br>    if (minlut[state] != 0) return minlut[state] == 2;<br>    if (state == 0) return true;<br>    if (!IsBalanced(state)) return true;<br>    for (int i = 0; i &lt; xx.Length; i++)<br>    {<br>      if (((1 &lt;&lt; i) &amp; state) != 0)<br>      {<br>        bool them = max(state ^ ((1 &lt;&lt; i) &amp; state));<br>        if (!them)<br>        {<br>          minlut[state] = 2;<br>          return true;<br>        }<br>      }<br>    }<br><br>    minlut[state] = 1;<br>    return false;<br>  }<br><br>  bool IsBalanced(int state)<br>  {<br>    long tx = 0;<br>    long ty = 0;<br>    for (int i = 0; i &lt; xx.Length; i++)<br>    {<br>      if ((state % 2) == 1)<br>      {<br>        tx += -yy[i] * ww[i];<br>        ty += xx[i] * ww[i];<br>      }<br>      state &gt;&gt;= 1;<br>    }<br>    return tx * tx + ty * ty &lt;= thresh;<br>  }<br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by CodeProcessor<br></td>