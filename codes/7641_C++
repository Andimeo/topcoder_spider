<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;vector&gt;<br>#include &lt;list&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;deque&gt;<br>#include &lt;stack&gt;<br>#include &lt;bitset&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;functional&gt;<br>#include &lt;numeric&gt;<br>#include &lt;utility&gt;<br>#include &lt;sstream&gt;<br>#include &lt;iostream&gt;<br>#include &lt;iomanip&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;ctime&gt;<br> <br>using namespace std;<br> <br>#define FOR(i,a,b) for(int i=(a);i&lt;(b);++i)<br>#define REP(i,n) FOR(i,0,n)<br>#define ALL(a) (a).begin(),a.end()<br>#define SORT(a) sort(ALL(a))<br>#define SZ(a) ((int) a.size())<br>#define pb push_back<br> <br>class BuildTheBestTeam {<br>public:<br>  int maximalStrength(vector &lt;int&gt;, vector &lt;int&gt;, int, int);<br>};<br> <br> <br>int BuildTheBestTeam::maximalStrength(vector &lt;int&gt; us, vector &lt;int&gt; ps, int teams, int ind) {<br>  REP(i, SZ(us)) REP(j, i)<br>    if (us[i] &gt; us[j] || (us[i] == us[j] &amp;&amp; (ps[i] &gt; ps[j]))) <br>      swap(us[i], us[j]),swap(ps[i],ps[j]);<br>  ind--;  <br>  int n = SZ(us);  <br>  vector&lt;vector&lt;int&gt; &gt; a = vector&lt;vector&lt;int&gt; &gt; ((n/teams) + 2, vector&lt;int&gt; (SZ(us) + 1));<br>  REP(j, SZ(us))  <br>    REP(i, (n / teams)+1)     {<br>      if (j &gt;= i * teams + ( i % 2 == 0 ? ind : (teams - ind - 1))) {<br>        a[i + 1][j + 1] &gt;?= a[i][j] + ps[j];<br>      }<br>      a[i][j + 1] &gt;?= a[i][j];<br>    }  <br>  int ans = 0;<br>  REP(i, SZ(a))<br>    REP(j, SZ(a[0]))<br>      ans &gt;?= a[i][j];<br>  return ans;<br>}<br> <br> <br>//Powered by [KawigiEdit] 2.0!<br></td>