<td class="problemText" colspan="8" valign="middle" align="left">
            // Powered by radeclipse!<br>import java.util.* ;<br>public class BuildTheBestTeam {<br>  public int maximalStrength(int[] us, int[] pps, int teams, int ind) {<br>    ind-- ;<br>    int n = us.length ;<br>    for (int i=0; i&lt;n; i++)<br>      us[i] = us[i] * 2000 + pps[i] ;<br>    for (int i=0; i&lt;n; i++)<br>      for (int j=i+1; j&lt;n; j++)<br>  if (us[i] &lt; us[j]) {<br>    int t = us[i] ;<br>    us[i] = us[j] ;<br>    us[j] = t ;<br>    t = pps[i] ;<br>    pps[i] = pps[j] ;<br>    pps[j] = t ;<br>  }<br>    int[][] a = new int[n+1][n+1] ;<br>    int nr = n / teams ;<br>    for (int r=0; r&lt;nr; r++) {<br>      int mp = 0 ;<br>      if ((r &amp; 1) == 0) {<br>  mp = r * teams + ind ;<br>      } else {<br>  mp = r * teams + (teams - ind - 1) ;<br>      }<br>      for (int p=mp; p&lt;n; p++) {<br>  if (r == 0)<br>    a[r][p] = pps[p] ;<br>  else<br>    for (int pp=0; pp&lt;p; pp++)<br>      a[r][p] = Math.max(a[r][p], a[r-1][pp] + pps[p]) ;<br>      }<br>    }<br>    int rv = 0 ;<br>    for (int i=0; i&lt;n; i++)<br>      rv = Math.max(a[nr-1][i], rv) ;<br>    return rv ;<br>  }<br>}<br></td>