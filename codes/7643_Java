<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>import java.util.regex.*;<br>import java.text.*;<br>import java.math.*;<br>import java.awt.geom.*;<br><br>public class CableDonation<br>{<br>  private String[] lengths;<br>  private int[][] graph;<br>  private int n;<br>  private int total;<br>  private Edge[] array;<br><br>  class Edge implements Comparable&lt;Edge&gt;<br>  {<br>    int from;<br>    int to;<br><br>    public int compareTo(Edge edge)<br>    {<br>      int cur = graph[from][to];<br>      int cur1 = graph[edge.from][edge.to];<br>      if (cur &gt; cur1)<br>        return 1;<br>      if (cur &lt; cur1)<br>        return -1;<br>      return 0;<br>    }<br>  }<br><br>  private void buildGraph()<br>  {<br>    total = 0;<br>    graph = new int[n][n];<br>    for (int i = 0; i &lt; n; i++)<br>    {<br>      for (int j = 0; j &lt; n; j++)<br>      {<br>        char c = lengths[i].charAt(j);<br>        if (c == '0')<br>        {<br>          continue;<br>        }<br>        int value;<br>        if (c &gt;= 'a' &amp;&amp; c &lt;= 'z')<br>        {<br>          value = c - 'a' + 1;<br>        } else<br>        {<br>          value = c - 'A' + 27;<br>        }<br>        total += value;<br>        if (i == j)<br>        {<br>          continue;<br>        }<br>        if (graph[i][j] == 0)<br>        {<br>          graph[i][j] = value;<br>          graph[j][i] = value;<br>        } else<br>        {<br>          graph[i][j] = Math.min(graph[i][j], value);<br>          graph[j][i] = Math.min(graph[j][i], value);<br>        }<br>      }<br>    }<br>  }<br>  private void sortEdges()<br>  {<br>    int edges = 0;<br>    for (int i = 0; i &lt; n; i++)<br>    {<br>      for (int j = 0; j &lt; i; j++)<br>      {<br>        if (graph[i][j] &gt; 0)<br>        {<br>          edges++;<br>        }<br>      }<br>    }<br>    array = new Edge[edges];<br>    edges = 0;<br>    for (int i = 0; i &lt; n; i++)<br>    {<br>      for (int j = 0; j &lt; i; j++)<br>      {<br>        if (graph[i][j] &gt; 0)<br>        {<br>          array[edges] = new Edge();<br>          array[edges].from = i;<br>          array[edges].to = j;<br>          edges++;<br>        }<br>      }<br>    }<br>    Arrays.sort(array);<br>  }<br>  private void unionColor(int c1, int c2, int[] colors)<br>  {<br>    for (int i = 0; i &lt; colors.length; i++)<br>    {<br>      if (colors[i] == c2)<br>      {<br>        colors[i] = c1;<br>      }<br>    }<br>  }<br>  private int calcAns()<br>  {<br>    int[] colors = new int[n];<br>    for (int i = 0; i &lt; n; i++)<br>    {<br>      colors[i] = i;<br>    }<br>    int res = 0;<br>    int count = 0;<br>    for (int edge = 0; edge &lt; array.length; edge++)<br>    {<br>      if (colors[array[edge].from] != colors[array[edge].to])<br>      {<br>        res += graph[array[edge].from][array[edge].to];<br>        unionColor(colors[array[edge].from], colors[array[edge].to],<br>            colors);<br>        count++;<br>      }<br>    }<br>    if (count != n - 1)<br>    {<br>      return -1;<br>    }<br>    return res;<br>  }<br>  public int cable(String[] lengths)<br>  {<br>    this.lengths = lengths;<br>    n = lengths.length;<br>    buildGraph();<br>    sortEdges();<br>    int ans = calcAns();<br>    if (ans &lt; 0)<br>    {<br>      return -1;<br>    }<br>    return total - calcAns();<br>  }<br>}<br></td>