<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;algorithm&gt;<br>#include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;sstream&gt;<br>#include &lt;cmath&gt;<br>#include &lt;set&gt;<br>#include &lt;map&gt;<br><br>#define foreach(i,s,w) for(int i=s;i&lt;w.size();++i)<br>#define forX(i,m) for(typeof(m.begin())i=m.begin();i!=m.end();++i)<br><br>using namespace std;<br><br>class SafeDrive {<br>  public:<br>  <br>  double wait(int a, int b, double cur) {<br>    int t = int(floor(cur / (a + b) + 1e-12));<br>    if(cur - t * (a + b) &lt; a)<br>      return a - (cur - t * (a + b));<br>    return 0;<br>  };<br>  <br>  double minSpeed(vector &lt;string&gt; lights, int T, int D) {<br>    double speedMIN = 0;<br>    double speedMAX = 1e200;<br>    vector &lt;int&gt; a, b, pos;<br>    foreach(i, 0, lights) {<br>      istringstream sis (lights[i]);<br>      int t1, t2, t3;<br>      sis &gt;&gt; t1 &gt;&gt; t2 &gt;&gt; t3;<br>      a.push_back(t1);<br>      b.push_back(t2);<br>      pos.push_back(t3);<br>    };<br>    foreach(i, 0, a)<br>      foreach(j, i + 1, a) {<br>        if(pos[i] &gt; pos[j]) {<br>          swap(a[i], a[j]);<br>          swap(b[i], b[j]);<br>          swap(pos[i], pos[j]);<br>        };<br>      };<br>    for(int i = 0; i &lt; 1000; ++i) {<br>      double speedMID = (speedMIN + speedMAX) / 2;<br>      double time = 0;<br>      int loc = 0;<br>      foreach(j, 0, a) {<br>        if(pos[j] &gt; D)<br>          break;<br>        time += (pos[j] - loc) / speedMID;<br>        time += wait(a[j], b[j], time);<br>        loc = pos[j];<br>      };<br>      time += (D - loc) / speedMID;<br>      if(time &gt;= T)<br>        speedMIN = speedMID;<br>      else<br>        speedMAX = speedMID;<br>    };<br>    if(speedMAX == 1e200)<br>      return -1;<br>    return (speedMIN + speedMAX) / 2;<br>  };<br>};<br></td>