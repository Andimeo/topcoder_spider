<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;map&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cstring&gt;<br>#include &lt;cassert&gt;<br>#include &lt;set&gt;<br>#include &lt;iostream&gt;<br>#include &lt;sstream&gt;<br>#include &lt;cstddef&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;utility&gt;<br>#include &lt;iterator&gt;<br>#include &lt;numeric&gt;<br>#include &lt;queue&gt;<br>#include &lt;complex&gt;<br> <br>using namespace std;<br> <br>#define RA(x) (x).begin(), (x).end()<br>#define FE(i, x) for (typeof((x).begin()) i = (x).begin(); i != (x).end(); i++)<br> <br>typedef pair&lt;int, int&gt; pii;<br>typedef long long ll;<br>typedef vector&lt;int&gt; vi;<br>typedef vector&lt;string&gt; vs;<br>typedef complex&lt;double&gt; pnt;<br> <br>template&lt;class T&gt; static void splitstr(const string &amp;s, vector&lt;T&gt; &amp;out)<br>{<br>    istringstream in(s);<br>    out.clear();<br>    copy(istream_iterator&lt;T&gt;(in), istream_iterator&lt;T&gt;(), back_inserter(out));<br>}<br> <br>class DateFormat<br>{<br>public:<br>    string fromEuropeanToUs(vector &lt;string&gt; dateList);<br>};<br> <br>int lens[13] = {0, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};<br> <br>string DateFormat::fromEuropeanToUs(vector &lt;string&gt; dateList)<br>{<br>    vs dates;<br>    string datestr = accumulate(RA(dateList), string());<br>    splitstr(datestr, dates);<br> <br>    int N = dates.size();<br>    string ans;<br>    pii last(-1, -1);<br>    for (int i = 0; i &lt; N; i++)<br>    {<br>        int m, d;<br>        sscanf(dates[i].c_str(), "%d/%d", &amp;m, &amp;d);<br> <br>        bool can_us = pii(m, d) &gt; last &amp;&amp; m &lt;= 12 &amp;&amp; d &lt;= lens[m];<br>        bool can_eu = pii(d, m) &gt; last &amp;&amp; d &lt;= 12 &amp;&amp; m &lt;= lens[d];<br>        if (!can_us &amp;&amp; !can_eu) return "";<br>        if (can_us &amp;&amp; can_eu)<br>            last = min(pii(m, d), pii(d, m));<br>        else if (can_us)<br>            last = pii(m, d);<br>        else<br>            last = pii(d, m);<br>        if (!ans.empty()) ans += " ";<br> <br>        char buf[60];<br>        sprintf(buf, "%02d/%02d", last.first, last.second);<br>        ans += buf;<br>    }<br>    return ans;<br>}<br> <br> <br>// Powered by FileEdit<br></td>