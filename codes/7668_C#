<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Text;<br><br>public class FourSubstrings<br>{<br>  private const int INF = 100000000;<br>  private const int MAXLEN = 52;<br>  private const int MAX = MAXLEN * MAXLEN;<br>  private int n;<br>  private int[][][] f;<br>  private int[][] g;<br>  private string[] str;<br><br>  public int[] getCoverageCount(string[] text2, string a, string b, string c, string d)<br>  {<br>    string text = string.Join("", text2);<br>    n = text.Length;<br>    str = new string[] {a, b, c, d};<br><br>    g = new int[4][];<br>    for (int i = 0; i &lt; 4; i++)<br>    {<br>      g[i] = new int[n];<br>      for (int j = 0; j &lt; n; j++)<br>        g[i][j] = (n - j &gt;= str[i].Length) &amp;&amp; (str[i] == text.Substring(j, str[i].Length)) ? 1 : 0;<br>    }<br><br>    Init();<br>    int min = GetMin(0, 0, 15);<br><br>    Init();<br>    int max = GetMax(0, 0, 15);<br><br>    return new int[] {min, max};<br>  }<br><br>  private void Init()<br>  {<br>    f = new int[MAX][][];<br>    for (int i = 0; i &lt; MAX; i++)<br>    {<br>      f[i] = new int[MAXLEN][];<br>      for (int j = 0; j &lt; MAXLEN; j++)<br>      {<br>        f[i][j] = new int[16];<br>        for (int k = 0; k &lt; 16; k++)<br>          f[i][j][k] = -1;<br>      }<br>    }<br>  }<br><br>  private int GetMin(int begin, int cover, int mask)<br>  {<br>    if (begin &gt;= n) return mask == 0 ? 0 : INF;<br>    if (mask == 0) return cover;<br>    if (f[begin][cover][mask] != -1) return f[begin][cover][mask];<br><br>    int ans = INF;<br>    for (int i = 0; i &lt; 4; i++)<br>    {<br>      if ((mask &amp; (1 &lt;&lt; i)) != 0)<br>      {<br>        if (g[i][begin] != 0)<br>        {<br>          int cur = GetMin(begin, Math.Max(cover, str[i].Length), mask ^ (1 &lt;&lt; i));<br>          ans = Math.Min(ans, cur);<br>        }<br>      }<br>    }<br><br>    int z = GetMin(begin + 1, Math.Max(0, cover - 1), mask);<br>    if (z != INF)<br>    {<br>      if (cover &gt; 0) z++;<br>      ans = Math.Min(ans, z);<br>    }<br><br>    f[begin][cover][mask] = ans;<br>    return ans;<br>  }<br><br>  private int GetMax(int begin, int cover, int mask)<br>  {<br>    if (begin &gt;= n) return mask == 0 ? 0 : -INF;<br>    if (mask == 0) return cover;<br>    if (f[begin][cover][mask] != -1) return f[begin][cover][mask];<br><br>    int ans = -INF;<br><br>    for (int i = 0; i &lt; 4; i++)<br>    {<br>      if ((mask &amp; (1 &lt;&lt; i)) != 0)<br>      {<br>        if (g[i][begin] != 0)<br>        {<br>          int cur = GetMax(begin, Math.Max(cover, str[i].Length), mask ^ (1 &lt;&lt; i));<br>          ans = Math.Max(ans, cur);<br>        }<br>      }<br>    }<br><br>    int z = GetMax(begin + 1, Math.Max(0, cover - 1), mask);<br>    if (z != -INF)<br>    {<br>      if (cover &gt; 0) z++;<br>      ans = Math.Max(ans, z);<br>    }<br><br>    f[begin][cover][mask] = ans;<br>    return ans;<br>  }<br><br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003] [modified for C# by Petr]<br>// Powered by CodeProcessor<br></td>