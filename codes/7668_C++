<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;iostream&gt;<br>#include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;functional&gt;<br>#include &lt;numeric&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cmath&gt;<br>#include &lt;queue&gt;<br> <br>using namespace std;<br><br>int can[3000][4];<br><br>int d[3000][60][1&lt;&lt;4];<br>vector&lt;string&gt; ss;<br><br>class FourSubstrings<br>{<br>public:<br>vector &lt;int&gt; getCoverageCount(vector &lt;string&gt; text, string a, string b, string c, string dd)<br>{<br>  int i,j,k,l,tmp,ans;<br>  vector&lt;int&gt; ret;<br>  string s;<br>  s="";<br>  ss.clear();<br>  ss.push_back(a);<br>  ss.push_back(b);<br>  ss.push_back(c);<br>  ss.push_back(dd);<br>  memset(can,0,sizeof(can));<br>  for (i=0;i&lt;text.size();i++)<br>    s+=text[i];<br>  for (j=0;j&lt;4;j++)<br>    for (i=0;i+ss[j].length()&lt;=s.length();i++)<br>      if (s.substr(i,ss[j].length())==ss[j]) can[i][j]=1;<br>  ret.clear();<br>  memset(d,-1,sizeof(d));<br>  d[0][0][0]=0;<br>  for (i=0;i&lt;s.length();i++)<br>    for (j=0;j&lt;=50;j++)<br>      for (k=0;k&lt;(1&lt;&lt;4);k++)<br>        if (d[i][j][k]!=-1)<br>        {<br>          for (l=0;l&lt;4;l++)<br>            if ((((1&lt;&lt;l)&amp;k)==0)&amp;&amp;(can[i][l]==1))<br>            {<br>              tmp=j;ans=d[i][j][k];<br>              if (ss[l].length()&gt;tmp)<br>              {<br>                ans+=(ss[l].length()-tmp);<br>                tmp=ss[l].length();<br>              }<br>              if ((ans&lt;d[i][tmp][k+(1&lt;&lt;l)])||(d[i][tmp][k+(1&lt;&lt;l)]==-1))<br>                d[i][tmp][k+(1&lt;&lt;l)]=ans;<br>            }<br>          tmp=j-1;<br>          if (tmp&lt;0) tmp=0;<br>          if ((d[i][j][k]&lt;d[i+1][tmp][k])||(d[i+1][tmp][k]==-1))<br>          {<br>            d[i+1][tmp][k]=d[i][j][k];<br>          }<br>        }<br>  ret.push_back(d[s.length()][0][(1&lt;&lt;4)-1]);<br>  memset(d,-1,sizeof(d));<br>  d[0][0][0]=0;<br>  for (i=0;i&lt;s.length();i++)<br>    for (j=0;j&lt;=50;j++)<br>      for (k=0;k&lt;(1&lt;&lt;4);k++)<br>        if (d[i][j][k]!=-1)<br>        {<br>          for (l=0;l&lt;4;l++)<br>            if ((((1&lt;&lt;l)&amp;k)==0)&amp;&amp;(can[i][l]==1))<br>            {<br>              tmp=j;ans=d[i][j][k];<br>              if (ss[l].length()&gt;tmp)<br>              {<br>                ans+=(ss[l].length()-tmp);<br>                tmp=ss[l].length();<br>              }<br>              if (ans&gt;d[i][tmp][k+(1&lt;&lt;l)])<br>                d[i][tmp][k+(1&lt;&lt;l)]=ans;<br>            }<br>          tmp=j-1;<br>          if (tmp&lt;0) tmp=0;<br>          if (d[i][j][k]&gt;d[i+1][tmp][k])<br>          {<br>            d[i+1][tmp][k]=d[i][j][k];<br>          }<br>        }<br>  ret.push_back(d[s.length()][0][(1&lt;&lt;4)-1]);<br>  return ret;<br>}<br>};<br></td>