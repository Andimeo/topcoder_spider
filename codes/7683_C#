<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections.Generic;<br><br>public class Meteorites {<br>    class Segment<br>    {<br>        public double left;<br>        public double right;<br><br><br>        public Segment(double left, double right)<br>        {<br>            this.left = left;<br>            this.right = right;<br>        }<br>    }<br><br>  public double perimeter(int[] x, int[] y, int[] r) {<br>      double res = 0;<br>        for (int i1 = 0; i1 &lt; x.Length; ++i1)<br>        {<br>            List&lt;Segment&gt; cr = new List&lt;Segment&gt;();<br>            bool complete = false;<br>            for (int i2 = 0; i2 &lt; x.Length; ++i2)<br>                if (i2 != i1)<br>                {<br>                    long x1 = x[i1];<br>                    long x2 = x[i2];<br>                    long y1 = y[i1];<br>                    long y2 = y[i2];<br>                    long r1 = r[i1];<br>                    long r2 = r[i2];<br>                    long dx = x2 - x1;<br>                    long dy = y2 - y1;<br>                    if (dx * dx + dy * dy &lt;= (r1 - r2) * (r1 - r2))<br>                    {<br>                        if (r2 &gt; r1)<br>                        {<br>                            complete = true;<br>                            break;<br>                        } else continue;<br>                    }<br>                    if (dx * dx + dy * dy &gt;= (r1 + r2) * (r1 + r2))<br>                        continue;<br><br>                    double alpha = Math.Acos((r1*r1 + dx*dx + dy*dy - r2*r2)/(2*r1*Math.Sqrt(dx*dx + dy*dy)));<br>                    double center = Math.Atan2(dy, dx);<br>                    cr.Add(new Segment(center - alpha, center + alpha));<br>                }<br>            <br>            if (complete)<br>                continue;<br><br>            List&lt;double&gt; all = new List&lt;double&gt;();<br>            foreach (Segment s in cr)<br>            {<br>                double a = s.left;<br>                while (a &gt;= 2 * Math.PI)<br>                    a -= 2*Math.PI;<br>                while (a &lt; 0)<br>                    a += 2*Math.PI;<br>                all.Add(a);<br>                a = s.right;<br>                while (a &gt;= 2 * Math.PI)<br>                    a -= 2 * Math.PI;<br>                while (a &lt; 0)<br>                    a += 2 * Math.PI;<br>                all.Add(a);<br>            }<br>            all.Sort();<br>            if (all.Count == 0)<br>                all.Add(0);<br>            for (int i = 0; i &lt; all.Count; ++i)<br>            {<br>                double a1 = all[i];<br>                double a2;<br>                if (i == all.Count - 1)<br>                    a2 = 2 * Math.PI + all[0];<br>                else<br>                    a2 = all[i + 1];<br>                double a3 = (a1 + a2)/2;<br>                bool ok = true;<br>                foreach (Segment s in cr)<br>                {<br>                    double z = a3;<br>                    while (z &lt; s.left)<br>                        z += 2*Math.PI;<br>                    while (z &gt;= 2 * Math.PI + s.left)<br>                        z -= 2*Math.PI;<br>                    if (z &lt; s.right)<br>                        ok = false;<br>                }<br>                if (ok)<br>                    res += (a2 - a1)*r[i1];<br>            }<br>        }<br><br>      return res;<br>  }<br><br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003] [modified for C# by Petr]<br>// Powered by CodeProcessor<br></td>