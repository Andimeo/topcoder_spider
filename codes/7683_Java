<td class="problemText" colspan="8" valign="middle" align="left">
            import java.io.*;<br>import java.util.*;<br><br>public class Meteorites {<br>  class Event implements Comparable&lt;Event&gt; {<br>    double a;<br>    int open, id;<br>    boolean cover;<br>    <br>    public Event(double x, int op, int i) {<br>      a = x;<br>      open = op;<br>      id = i;<br>      while (a &gt; 2 * Math.PI - eps)<br>        a -= 2 * Math.PI;<br>      while (a &lt; -eps)<br>        a += 2 * Math.PI;<br>    }<br><br>    public int compareTo(Event that) {<br>      if (id == that.id &amp;&amp; Math.abs(a - that.a) &lt; eps)<br>        return that.open - open;<br>      return Double.compare(a, that.a);<br>    }<br>  }<br><br>  private static final double eps = 1e-9;<br><br>  public double perimeter(int[] x, int[] y, int[] r) {<br>    int n = x.length;<br>    boolean[] crap = new boolean[n];<br>    for (int i = 0; i &lt; n; i++) {<br>      for (int j = 0; j &lt; n; j++) {<br>        if (i == j)<br>          continue;<br>        double d = Math.hypot(x[i] - x[j], y[i] - y[j]);<br>        if (r[j] &gt; d + r[i] - eps) {<br>          if (r[i] == r[j]) {<br>            crap[Math.min(i, j)] = true;<br>            continue;<br>          }<br>          crap[i] = true;<br>        }<br>      }<br>    }<br>    double ans = 0;<br>    for (int i = 0; i &lt; n; i++) {<br>      if (crap[i])<br>        continue;<br>      ArrayList&lt;Event&gt; ev = new ArrayList&lt;Event&gt;();<br>      for (int j = 0; j &lt; n; j++) {<br>        if (i == j || crap[j])<br>          continue;<br>        double d = Math.hypot(x[i] - x[j], y[i] - y[j]);<br>        if (d &gt; r[i] + r[j] + eps)<br>          continue;<br>        double a = Math.atan2(y[j] - y[i], x[j] - x[i]);<br>        double le = 0;<br>        double ri = Math.PI;<br>        for (int iter = 0; iter &lt; 100; iter++) {<br>          double mi = (le + ri) * 0.5;<br>          double xx = x[i] + r[i] * Math.cos(a + mi);<br>          double yy = y[i] + r[i] * Math.sin(a + mi);<br>          double dd = Math.hypot(xx - x[j], yy - y[j]);<br>          if (dd &gt; r[j])<br>            ri = mi;<br>          else<br>            le = mi;<br>        }<br>        ev.add(new Event(a - le, +1, j));<br>        ev.add(new Event(a + le, -1, j));<br>      }<br>      Collections.sort(ev);<br>      int l = ev.size();<br>      if (l == 0) {<br>        ans += 2 * Math.PI * r[i];<br>        continue;<br>      }<br>      for (int j = 0; j &lt; l; j++) {<br>        if (ev.get(j).open &gt; 0) {<br>          int id = ev.get(j).id;<br>          for (int k = j;; k = (k + 1) % l) {<br>            if (ev.get(k).id == id &amp;&amp; k != j)<br>              break;<br>            ev.get(k).cover = true;<br>          }<br>        }<br>      }<br>      for (int j = 0; j &lt; l; j++) {<br>        if (ev.get(j).cover)<br>          continue;<br>        double xx = ev.get((j + 1) % l).a - ev.get(j).a;<br>        if (xx &lt; 0)<br>          xx += 2 * Math.PI;<br>        ans += r[i] * xx;<br>      }<br>    }<br>    return ans;<br>  }<br>  <br>  public static void main(String[] args) {<br>    double a = new Meteorites().perimeter(<br>        new int[]{0, 0},<br>        new int[]{0, 0},<br>        new int[]{6, 7}<br>        );<br>    System.out.println(a);<br>  }<br>}<br></td>