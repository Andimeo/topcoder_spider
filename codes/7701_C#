<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections.Generic;<br><br>public class CropCircles {<br>  private class Point<br>  {<br>    public long X, Y;<br><br>    public Point(long x, long y)<br>    {<br>      X = x;<br>      Y = y;<br>    }<br><br>    public static Point operator-(Point a, Point b)<br>    {<br>      return new Point(a.X - b.X, a.Y - b.Y);<br>    }<br><br>    public static Point operator +(Point a, Point b)<br>    {<br>      return new Point(a.X + b.X, a.Y + b.Y);<br>    }<br>  }<br><br>  private class Circle : IEquatable&lt;Circle&gt;<br>  {<br>    public long cx, cy, v;<br>    public double radius;<br><br>    public Circle(long cx, long cy, double radius, long v)<br>    {<br>      if (v &lt; 0)<br>      {<br>        v = -v;<br>        cx = -cx;<br>        cy = -cy;<br>      }<br>      long g = gcd(gcd(cx, cy), v);<br><br>      this.cx = cx/g;<br>      this.cy = cy/g;<br>      this.v = v/g;<br>      this.radius = radius;<br>    }<br><br>    public long gcd(long a, long b)<br>    {<br>      return b == 0 ? a : gcd(b, a % b);<br>    }<br><br>    public bool Equals(Circle circle)<br>    {<br>      if (circle == null) return false;<br>      if (cx != circle.cx) return false;<br>      if (cy != circle.cy) return false;<br>      if (Math.Abs(radius - circle.radius)&gt;1e-8) return false;<br>      if (v != circle.v) return false;<br>      return true;<br>    }<br><br>    public override bool Equals(object obj)<br>    {<br>      if (ReferenceEquals(this, obj)) return true;<br>      return Equals(obj as Circle);<br>    }<br><br>    public override int GetHashCode()<br>    {<br>      long result = cx;<br>      result = 29*result + cy;<br>      result = 29*result + v;<br>      return (int) result;<br>    }<br>  }<br><br>  private long Det(Point a, Point b)<br>  {<br>    return a.X*b.Y - a.Y*b.X;<br>  }<br><br>  private long Dot(Point a, Point b)<br>  {<br>    return a.X*b.X + a.Y*b.Y;<br>  }<br><br>  public int countCircles(int[] x, int[] y) {<br>    int n = x.Length;<br>    Point[] p = new Point[n];<br>    for (int i = 0; i &lt; n; i++)<br>      p[i] = new Point(x[i], y[i]);<br><br>    Dictionary&lt;Circle, object&gt; circles = new Dictionary&lt;Circle, object&gt;();<br>    for (int i = 0; i &lt; n; i++)<br>    {<br>      for (int j = i+1; j &lt; n; j++)<br>      {<br>        for (int k = j+1; k &lt; n; k++)<br>        {<br>          Point a = p[i], b = p[j], c = p[k];<br>          Point ab = b - a, ac = c - a;<br>          long v = 2*Det(ab, c - b);<br>          if (v != 0)<br>          {<br>            Point q = new Point(Dot(ab, a + b), Dot(ac, a + c));<br>            long cx = Det(q, new Point(ab.Y, ac.Y));<br>            long cy = -Det(q, new Point(ab.X, ac.X));<br>            double dx = a.X - (double)cx / v, dy = a.Y - (double)cy / v;<br>            double radius = Math.Sqrt(dx*dx+dy*dy);<br>            Circle circle = new Circle(cx, cy, radius, v);<br>            if (!circles.ContainsKey(circle))<br>              circles.Add(circle, null);<br>          }<br>          <br>        }<br>      }<br>    }<br>    return circles.Count;<br>  }<br><br>}<br><br><br><br><br>// Powered by FileEdit<br></td>