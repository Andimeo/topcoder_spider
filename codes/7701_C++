<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;sstream&gt;<br>#include &lt;vector&gt;<br>#include &lt;set&gt;<br>#include &lt;map&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;string.h&gt;<br>#include &lt;stdio.h&gt;<br>#include &lt;assert.h&gt;<br>#include &lt;ctype.h&gt;<br>#include &lt;math.h&gt;<br>#include &lt;queue&gt;<br>#define foreach(i,c) for(__typeof((c).end())i=(c).begin();i!=(c).end();++i)<br>using namespace std;<br> <br>double EPS = 1e-9;<br>    <br>bool lineIntersect( double x[], double y[], double r[] )<br>{<br>    double n[2]; n[0] = y[3] - y[2]; n[1] = x[2] - x[3];<br>    double denom = n[0] * ( x[1] - x[0] ) + n[1] * ( y[1] - y[0] );<br>    if( fabs( denom ) &lt; EPS ) return false;<br>    double num = n[0] * ( x[0] - x[2] ) + n[1] * ( y[0] - y[2] );<br>    double t = -num / denom;<br>    r[0] = x[0] + t * ( x[1] - x[0] );<br>    r[1] = y[0] + t * ( y[1] - y[0] );<br>    return true;<br>}<br> <br>double circle3pts( double x[], double y[], double r[] )<br>{<br>    double lix[4], liy[4];<br>    lix[0] = 0.5 * ( x[0] + x[1] ); liy[0] = 0.5 * ( y[0] + y[1] );<br>    lix[1] = lix[0] + y[1] - y[0];  liy[1] = liy[0] + x[0] - x[1];<br>    lix[2] = 0.5 * ( x[1] + x[2] ); liy[2] = 0.5 * ( y[1] + y[2] );<br>    lix[3] = lix[2] + y[2] - y[1];  liy[3] = liy[2] + x[1] - x[2];<br>    if( !lineIntersect( lix, liy, r ) ) return -1.0;<br>    return sqrt(<br>        ( r[0] - x[0] ) * ( r[0] - x[0] ) +<br>        ( r[1] - y[0] ) * ( r[1] - y[0] ) );<br>}<br> <br>struct C<br>{<br>  double x, y, r;<br>  C( double X, double Y, double R ) { x = X; y = Y; r = R; }<br>  bool operator&lt;( const C &amp;c ) const <br>  {<br>    if( fabs( x - c.x ) &gt; EPS ) return x &lt; c.x;<br>    if( fabs( y - c.y ) &gt; EPS ) return y &lt; c.y;<br>    if( fabs( r - c.r ) &gt; EPS ) return r &lt; c.r;<br>    return false;<br>  }<br>};<br> <br>class CropCircles<br>{<br>  public:<br>  int countCircles(vector &lt;int&gt; x, vector &lt;int&gt; y) <br>  {<br>    set&lt; C &gt; ans;<br>    int n = x.size();<br>    for( int i = 0; i &lt; n; i++ ) for( int j = i + 1; j &lt; n; j++ ) for( int k = j + 1; k &lt; n; k++ )<br>    {<br>      double X[3] = { x[i], x[j], x[k] }, Y[3] = { y[i], y[j], y[k] }, R[2], r;<br>      if( ( r = circle3pts( X, Y, R ) ) &lt; -0.5 ) continue;<br>      ans.insert( C( R[0], R[1], r ) );<br>    }<br>    return ans.size();<br>  }<br>};<br> <br>// Powered by PopsEdit<br></td>