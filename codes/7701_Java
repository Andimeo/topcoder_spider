<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br><br>public class CropCircles {<br>        static class Circle {<br>            public boolean ok = true;<br>            public long p;<br>            public long q;<br>            public long z;<br>            public long dp;<br><br>            long gcd(long x, long y) {<br>                x = Math.abs(x);<br>                y = Math.abs(y);<br>                while (y != 0) {<br>                    long t = x % y;<br>                    x = y;<br>                    y = t;<br>                }<br>                return x;<br>            }<br><br>            public Circle(long x1, long y1, long x2, long y2, long x3, long y3) {<br>                long a1 = 2 * (x2 - x1);<br>                long b1 = 2 * (y2 - y1);<br>                long c1 = x1 * x1 + y1 * y1 - x2 * x2 - y2 * y2;<br>                long a2 = 2 * (x3 - x1);<br>                long b2 = 2 * (y3 - y1);<br>                long c2 = x1 * x1 + y1 * y1 - x3 * x3 - y3 * y3;<br>                z = a1 * b2 - b1 * a2;<br>                if (z == 0) {<br>                    ok = false;<br>                    return;<br>                }<br>                p = - (c1 * b2 - b1 * c2);<br>                q = - (a1 * c2 - c1 * a2);<br>                long g = gcd(gcd(p, q), z);<br>                if (z &lt; 0)<br>                    g = -g;<br>                p /= g;<br>                q /= g;<br>                z /= g;<br>                dp = (p - x1 * z) * (p - x1 * z) + (q - y1 * z) * (q - y1 * z);<br>            }<br><br>            public boolean equals(Object o) {<br>                Circle circle = (Circle) o;<br><br>                if (dp != circle.dp) return false;<br>                if (ok != circle.ok) return false;<br>                if (p != circle.p) return false;<br>                if (q != circle.q) return false;<br>                if (z != circle.z) return false;<br><br>                return true;<br>            }<br><br>            public int hashCode() {<br>                int result;<br>                result = (ok ? 1 : 0);<br>                result = 31 * result + (int) (p ^ (p &gt;&gt;&gt; 32));<br>                result = 31 * result + (int) (q ^ (q &gt;&gt;&gt; 32));<br>                result = 31 * result + (int) (z ^ (z &gt;&gt;&gt; 32));<br>                result = 31 * result + (int) (dp ^ (dp &gt;&gt;&gt; 32));<br>                return result;<br>            }<br>        }<br><br>        public int countCircles(int[] x, int[] y) {<br>            Set&lt;Circle&gt; s = new HashSet&lt;Circle&gt;();<br>            for (int i = 0; i &lt; x.length; ++i)<br>                for (int j = i + 1; j &lt; x.length; ++j)<br>                    for (int k = j + 1; k &lt; x.length; ++k) {<br>                        Circle c = new Circle(x[i], y[i], x[j], y[j], x[k], y[k]);<br>                        if (c.ok)<br>                            s.add(c);<br>                    }<br>            return s.size();<br>        }<br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by RETester [based on ExampleBuilder]<br>// Powered by CodeProcessor<br></td>