<td class="problemText" colspan="8" valign="middle" align="left">
            #include&lt;algorithm&gt; <br>#include&lt;sstream&gt;<br>#include&lt;string&gt; <br>#include&lt;vector&gt; <br>using namespace std; <br>  <br>#define FOR(i,a,b) for(int i = (a); i &lt; (b); ++i) <br>#define REP(i,n) FOR(i,0,n) <br>#define FORE(it,x) for(typeof(x.begin()) it=x.begin();it!=x.end();++it) <br>#define pb push_back <br>#define all(x) (x).begin(),(x).end() <br>#define CLEAR(x,with) memset(x,with,sizeof(x)) <br>#define sz size() <br>typedef long long ll;<br>struct DriveFailures <br>{<br>  vector &lt;double&gt; failureChances(vector &lt;double&gt; failureProb) <br>  {<br>    int n = failureProb.sz;<br>    vector&lt;double&gt; ret(n+1, 0);<br>    REP(i,(1&lt;&lt;n))<br>    {<br>      double p = 1.0;<br>      REP(j,n) if(i &amp; (1&lt;&lt;j)) p *= failureProb[j]; else p *= (1.0 - failureProb[j]);<br>      ret[ __builtin_popcount(i) ] += p;<br>    }<br>    return ret;<br>  }<br>};<br><br><br>// Powered by FileEdit<br></td>