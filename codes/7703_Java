<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br> <br>public class RaceOrdering {<br>    final static long MOD = 1000003;<br>    long[][] c;<br>    int[] first;<br>    int[] second;<br>    boolean[] mark;<br>    List&lt;Integer&gt; cur;<br>    long res;<br>    long cres;<br>    int rem;<br> <br>    public int countOrders(int n, int[] first, int[] second) {<br>        c = new long[n + 1][n + 1];<br>        c[0][0] = 1;<br>        for (int i = 1; i &lt;= n; ++i) {<br>            c[i][0] = 1;<br>            for (int j = 1; j &lt;= n; ++j)<br>                c[i][j] = (c[i - 1][j - 1] + c[i - 1][j]) % MOD;<br>        }<br>        mark = new boolean[n];<br>        this.first = first;<br>        this.second = second;<br>        res = 1;<br>        rem = n;<br>        for (int i = 0; i &lt; n; ++i)<br>            if (!mark[i]) {<br>                cur = new ArrayList&lt;Integer&gt;();<br>                dfs(i);<br>                process();<br>                res = ((res * cres) % MOD * c[rem][cur.size()]) % MOD;<br>                rem -= cur.size();<br>            }<br>        return (int) res;<br>    }<br> <br>    private void process() {<br>        int n = cur.size();<br>        int[] before = new int[n];<br>        for (int i = 0; i &lt; first.length; ++i)<br>            if (cur.indexOf(second[i]) &gt;= 0) {<br>                int a = cur.indexOf(first[i]);<br>                int b = cur.indexOf(second[i]);<br>                before[b] |= (1 &lt;&lt; a);<br>            }<br>        int[] am = new int[1 &lt;&lt; n];<br>        am[0] = 1;<br>        for (int i = 1; i &lt; (1 &lt;&lt; n); ++i) {<br>            for (int j = 0; j &lt; n; ++j)<br>                if (((i &gt;&gt; j) &amp; 1) != 0 &amp;&amp; ((i &amp; before[j]) == before[j])) {<br>                    am[i] += am[i ^ (1 &lt;&lt; j)];<br>                    if (am[i] &gt;= MOD)<br>                        am[i] -= MOD;<br>                }<br>        }<br>        cres = am[(1 &lt;&lt; n) - 1];<br>    }<br> <br>    private void dfs(int at) {<br>        if (mark[at])<br>            return;<br>        mark[at] = true;<br>        cur.add(at);<br>        for (int i = 0; i &lt; first.length; ++i)<br>            if (first[i] == at)<br>                dfs(second[i]);<br>            else if (second[i] == at)<br>                dfs(first[i]);<br>    }<br> <br>}<br> <br> <br>// Powered by FileEdit<br>// Powered by RETester [based on ExampleBuilder]<br>// Powered by CodeProcessor<br></td>