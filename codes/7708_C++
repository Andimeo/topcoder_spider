<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;vector&gt;<br>#include &lt;list&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;deque&gt;<br>#include &lt;stack&gt;<br>#include &lt;bitset&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;functional&gt;<br>#include &lt;numeric&gt;<br>#include &lt;utility&gt;<br>#include &lt;sstream&gt;<br>#include &lt;iostream&gt;<br>#include &lt;iomanip&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;ctime&gt;<br> <br>using namespace std;<br> <br>#define FOR(i,n) for (int i=0; i&lt;(int)n; i++)<br>typedef vector&lt;int&gt; vi;<br>typedef long long int64;<br> <br>template&lt;typename T&gt; ostream&amp;operator&lt;&lt;(ostream &amp;out,const vector&lt;T&gt; &amp;t) {<br>  out&lt;&lt;"{";<br>  FOR(i,t.size()) out&lt;&lt;t[i]&lt;&lt;",";<br>  return out&lt;&lt;"}";<br>}<br> <br>template&lt;typename T&gt; ostream &amp;operator&lt;&lt;(ostream &amp;out,const pair&lt;T,T&gt; &amp;p) {<br>  return out&lt;&lt;"("&lt;&lt;p.first&lt;&lt;","&lt;&lt;p.second&lt;&lt;")";<br>}<br> <br>struct Factorer {<br>  vi rozloz(int64 x) {<br>    vi ans;<br>    int64 x2=abs(x);<br>    for (int64 i=1; i*i&lt;=x2; i++) if (x%i==0) {<br>      ans.push_back(i);<br>      ans.push_back(x/i);<br>      ans.push_back(-i);<br>      ans.push_back(-x/i);      <br>    }<br>    return ans;<br>  }<br>  int64 abs(int64 x) { return x&gt;0?x:-x; }<br>  string factor(int64 a, int64 b, int64 c) {<br>    vi alfa=rozloz(a),beta=rozloz(c);<br>    string ans="NONE";<br>    int64 best_coeff=0,best_first=0,_alfa1,_beta1;<br>    FOR(i,alfa.size()) if (alfa[i]&gt;0) FOR(j,beta.size()) {<br>      int64 alfa1=alfa[i],alfa2=a/alfa[i],beta1=beta[j],beta2=c/beta[j];<br>      if (alfa1*beta2+alfa2*beta1!=b) continue;<br>      int64 coeff=alfa1,first=beta1;<br>      if (ans=="NONE" || coeff&gt;best_coeff || coeff==best_coeff &amp;&amp; first&gt;best_first) {      <br>        best_coeff=coeff;<br>        best_first=first;<br>        _alfa1=alfa1;<br>        _beta1=beta1;<br>        ans="ok";<br>      }<br>    }<br>    if (ans=="ok") {<br>      int64 alfa1=_alfa1,alfa2=a/alfa1,beta1=_beta1,beta2=c/beta1;<br>        ostringstream tmp;<br>        tmp&lt;&lt;"(";<br>        if (alfa1&gt;1) tmp&lt;&lt;alfa1;<br>        tmp&lt;&lt;"x"&lt;&lt;(beta1&gt;0?'+':'-')&lt;&lt;abs(beta1)&lt;&lt;")(";<br>        if (alfa2==-1) tmp&lt;&lt;"-"; else if (alfa2!=1) tmp&lt;&lt;alfa2;<br>        tmp&lt;&lt;"x"&lt;&lt;(beta2&gt;0?'+':'-')&lt;&lt;abs(beta2)&lt;&lt;")";<br>        ans=tmp.str();<br>    }<br>    return ans;<br>  }<br>};<br> <br>//Powered by [KawigiEditNonTest] modified by pivanof!<br></td>