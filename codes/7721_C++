<td class="problemText" colspan="8" valign="middle" align="left">
            using namespace std;<br><br>#include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;iostream&gt;<br>#include &lt;cctype&gt;<br>#include &lt;cmath&gt;<br>#include &lt;queue&gt;<br>#include &lt;stack&gt;<br>#include &lt;deque&gt;<br>#include &lt;set&gt;<br>#include &lt;map&gt;<br>#include &lt;algorithm&gt;<br><br>#define REP(var, hi) for (int var=0; var&lt;hi; var++)<br>#define REPD(var,hi) for (int var=hi-1; var&gt;=0; var--)<br>#define FOR(var,lo,hi) for (int var=lo; var&lt;hi; var++)<br>#define FORD(var,lo,hi) for (int var=hi-1; var&gt;=lo; var--)<br>#define FORALL(var,x) for (typeof(x.begin()) var=x.begin(); var!=x.end(); var++)<br><br>#define PB push_back<br>#define SZ size()<br><br>typedef vector&lt;int&gt; VI;<br>typedef vector&lt;VI&gt; VVI;<br>typedef vector&lt;VVI&gt; VVVI;<br>typedef vector&lt;VVVI&gt; VVVVI;<br>typedef vector&lt;string&gt; VS;<br>typedef vector&lt;VS&gt; VVS;<br>typedef vector&lt;double&gt; VD;<br>typedef vector&lt;VD&gt; VVD;<br>typedef long long LL;<br>typedef vector&lt;LL&gt; VLL;<br>typedef vector&lt;VLL&gt; VVLL;<br>typedef istringstream ISS;<br><br>double price (VI &amp;t, VI &amp;p, int tt) {<br>  int i=0;<br>  while (i+1&lt;t.SZ &amp;&amp; t[i+1]&lt;tt) i++;<br>  return p[i] + 1.0*(tt-t[i])/(t[i+1]-t[i]) * (p[i+1]-p[i]);<br>}<br><br>class DayTrader {<br>  public:<br>  double earnings(vector &lt;int&gt; tA, vector &lt;int&gt; pA, vector &lt;int&gt; tB, vector &lt;int&gt; pB) {<br>    VI t;<br>    REP(i,tA.SZ) t.PB(tA[i]);<br>    REP(i,tB.SZ) t.PB(tB[i]);<br>    sort(t.begin(),t.end());<br>    t.erase(unique(t.begin(),t.end()),t.end());<br>    int N=t.SZ;<br><br>    VD best(N);<br>    best[0]=1000;<br><br>    FOR(i,1,N) {<br>      best[i] = best[i-1];<br>      best[i] &gt;?= price(tA,pA, t[i]) / price(tA,pA,t[i-1]) * best[i-1];<br>      best[i] &gt;?= price(tB,pB, t[i]) / price(tB,pB,t[i-1]) * best[i-1];<br>    }<br><br>    return best[N-1] - 1000;<br>  }<br>};<br><br><br>// Powered by FileEdit<br></td>