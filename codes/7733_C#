<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections.Generic;<br><br>public class PolishNotation {<br>  private string expr;<br><br>  private long[,] memo;<br><br>  private long Count(int start, int stop)<br>  {<br>    if (memo[start, stop] &gt;= 0)<br>      return memo[start, stop];<br>    long cnt = 0;<br>    if (start == stop)<br>      return 0;<br><br>    int x = start;<br>    if (expr[start] == '-') x++;<br>    bool ok = x &lt; stop;<br>    for (int i = x; i &lt; stop; i++)<br>    {<br>      if (!char.IsDigit(expr[i]))<br>        ok = false;<br>    }<br>    if (ok)<br>      cnt++;<br><br>    if (!char.IsDigit(expr[start]))<br>    {<br>      for (int i = start + 1; i &lt;= stop; i++)<br>      {<br>        long cnt1 = Count(start + 1, i);<br>        long cnt2 = Count(i, stop);<br>        cnt += cnt1*cnt2;<br>      }<br>    }<br><br>    memo[start, stop] = cnt;<br>    return cnt;<br>  }<br><br>  public long waysToDecode(string expression) {<br>    expr = expression;<br>    memo = new long[expr.Length+1,expr.Length+1];<br>    for (int i = 0; i &lt; expr.Length+1; i++)<br>    {<br>      for (int j = 0; j &lt; expr.Length+1; j++)<br>      {<br>        memo[i, j] = -1;<br>      }  <br>    }<br>    return Count(0, expr.Length);<br>  }<br><br>}<br><br><br><br><br>// Powered by FileEdit<br></td>