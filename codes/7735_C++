<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;vector&gt;<br>#include &lt;list&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;deque&gt;<br>#include &lt;stack&gt;<br>#include &lt;bitset&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;functional&gt;<br>#include &lt;numeric&gt;<br>#include &lt;utility&gt;<br>#include &lt;sstream&gt;<br>#include &lt;iostream&gt;<br>#include &lt;iomanip&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;ctime&gt;<br><br>using namespace std;<br><br>//typedef long long __int64;<br><br>class MaximizeSquares<br>{<br>public:<br>  int squareCount(int N)<br>  {<br>    int k = 0;<br>    for (k = 0; (k+1) * (k+1) &lt;= N; k++) {}<br>    int ans = 0;<br>    for (int i = 1; i &lt; k; i++) {<br>      ans += (k-i) * (k-i);<br>    }<br>    int left, now;<br>    left = N - k * k;<br>    now = left;<br>    if (now &gt;= k)<br>      now = k;<br>    ans += (now-1)*(now) / 2;<br>    left -= now;<br>    ans += (left-1)*(left) / 2;<br>    return ans;<br>  }<br>};<br></td>