<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;cstdio&gt;<br>#include &lt;iostream&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;set&gt;<br>#include &lt;map&gt;<br>#include &lt;stack&gt;<br>#include &lt;list&gt;<br>#include &lt;queue&gt;<br>#include &lt;deque&gt;<br>#include &lt;cctype&gt;<br>#include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;sstream&gt;<br>#include &lt;iterator&gt;<br>#include &lt;numeric&gt;<br>using namespace std;<br> <br>typedef long long LL;<br> <br>typedef vector &lt;int &gt; VI;<br>#define REP(i,n) for (int i=0; i&lt;n; ++i)<br>#define FOREACH(it,x) for(__typeof((x).begin()) it=(x.begin()); it!=(x).end(); ++it)<br>#define FOR(i,p,k) for (int i=p; i&lt;=k; ++i)<br>#define PB push_back<br>#define ALL(x) x.begin(),x.end()<br>#define SIZE(x) (int)x.size()<br> <br>const int N=11000,P1=1000000007;<br>int dlug[N];<br>LL hasze[N];<br>string s;<br>int n;<br> <br>void popraw_hasze(int d){<br>  REP(i,n){<br>    char c=i-(d-1)&gt;=0?s[i-(d-1)]:'a';<br>    hasze[i]=P1*hasze[i]+(c-'a');<br>  }<br>}<br> <br>    class SimilarPairs<br>        { <br>        public: <br>        int howManyElements(vector &lt;string&gt; text, int k){ <br>          s=accumulate(ALL(text),string());<br>          n=SIZE(s);<br>          FOR(d,1,n-1){<br>            int a=0,b=0;<br>            int roznice=0;<br>            while (b+d&lt;n){<br>              if (s[b+d]!=s[b]) roznice++;<br>              while (roznice&gt;k || b&gt;=a+d){<br>                if (s[a+d]!=s[a]) roznice--;<br>                a++;<br>              }<br>              b++;<br>              if (a&lt;b){<br>                dlug[b-1]&gt;?=b-a;<br>                dlug[b-1+d]&gt;?=b-a;<br>              }<br>            }<br>          }<br>          int res=0;<br>          vector&lt;LL&gt; slowa;<br>          slowa.reserve(n);<br>          FOR(d,1,n){<br>            popraw_hasze(d);<br>            slowa.clear();<br>            REP(i,n) if (i+1&gt;=d &amp;&amp; dlug[i]&gt;=d) slowa.PB(hasze[i]);<br>            sort(ALL(slowa));<br>            slowa.erase(unique(ALL(slowa)),slowa.end());<br>            res+=SIZE(slowa);<br>          }<br>          return res;<br>        } <br>        <br> <br>         }; <br> <br>    <br> <br> <br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003]<br>// Powered by CodeProcessor<br></td>