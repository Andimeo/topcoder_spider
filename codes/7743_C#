<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections;<br>using System.Collections.Generic;<br>using System.Collections.Specialized;<br>using System.Text;<br>using System.Text.RegularExpressions;<br> <br>public class SortingInIterations<br>{<br>  public long sum(int a0, int X, int Y, int M, int n, int start, int finish)<br>  {<br>        long res = 0;<br>        long[] a = new long[n];<br>        a[0] = a0;<br>        for(int i = 1; i &lt; n; i++)<br>            a[i] = ((a[i - 1]) * X + Y) % M;<br> <br>        int[] be = new int[M];<br>        int[] ne = new int[n];<br> <br>        for (int i = 0; i &lt; M; i++)<br>            be[i] = -1;<br>        for (int i = 0; i &lt; n; i++)<br>            ne[i] = -1;<br> <br>        for (int i = n - 1; i &gt;= 0; i--)<br>        {<br>            ne[i] = be[a[i]];<br>            be[a[i]] = i;<br>        }<br> <br>        int step = 1;<br>        int b = -1;<br>        int last_end = -1;<br>        while (true)<br>        {<br>            b++;<br>            while (b &lt; M &amp;&amp; be[b] == -1)<br>                b++;<br>            if (b == M)<br>                break;<br> <br>            int k = be[b];<br>            long sum_be = 0;<br>            int new_end = -1;<br>            while (k &gt;= 0 &amp;&amp; k &lt; last_end)<br>            {<br>                new_end = k;<br>                sum_be++;<br>                k = ne[k];<br>            }<br>            long sum_en = 0;<br>            while (k &gt;= 0)<br>            {<br>                if (sum_be == 0)<br>                    new_end = k;<br>                sum_en++;<br>                k = ne[k];<br>            }<br> <br>            last_end = new_end;<br>            if (step &gt;= start &amp;&amp; step &lt;= finish)<br>                res += b * sum_en;<br>            if (sum_be &gt; 0)<br>                step++;<br>            if (step &gt;= start &amp;&amp; step &lt;= finish)<br>                res += b * sum_be;<br>        }<br>        if (step &lt; finish)<br>            return -1;<br> <br>        return res;<br>  }<br> <br>    <br>}<br>//Powered by [KawigiEdit] 2.0!<br></td>