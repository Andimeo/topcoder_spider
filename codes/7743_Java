<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>import java.util.regex.*;<br>import java.text.*;<br>import java.math.*;<br>import java.awt.geom.*;<br><br>public class SortingInIterations<br>{<br>  class Data implements Comparable&lt;Data&gt;<br>  {<br>    long value;<br>    int index;<br><br>    public Data(int value, int index)<br>    {<br>      this.value = value;<br>      this.index = index;<br>    }<br>    public int compareTo(Data o)<br>    {<br>      if (value&gt;o.value)<br>        return 1;<br>      if (value&lt;o.value)<br>        return -1;<br>      return 0;<br>    }<br>  }<br><br>  PriorityQueue&lt;Data&gt; queue;<br>  int[] a;<br>  ArrayList&lt;Long&gt; sums;<br><br>  public long sum(int a0, int X, int Y, int M, int n, int start, int finish)<br>  {<br>    a = new int[n];<br>    a[0] = a0;<br>    for (int i = 1; i&lt;n; i++)<br>      a[i] = (int)((a[i-1]*(long)X+Y)%M);<br>    queue = new PriorityQueue&lt;Data&gt;();<br>    for (int i = 0; i&lt;n; i++)<br>      queue.add(new Data(a[i], i));<br>    int curindex = 0;<br>    sums = new ArrayList&lt;Long&gt;();<br>    sums.add(0L);<br>    ArrayList&lt;Data&gt; elems = new ArrayList&lt;Data&gt;();<br>    while (true)<br>    {<br>      Data v = queue.peek();<br>      if (v==null)<br>        break;<br>      elems.clear();<br>      while (queue.peek()!=null &amp;&amp; queue.peek().compareTo(v)==0)<br>      {<br>        elems.add(queue.peek());<br>        queue.poll();<br>      }<br>      int s1 = 0, s2 = 0;<br>      int max2 = -1;<br>      int max1 = -1;<br>      for (int i = 0; i&lt;elems.size(); i++)<br>        if (elems.get(i).index&lt;curindex)<br>        {<br>          s1++;<br>          max1 = Math.max(max1, elems.get(i).index);<br>        } else<br>        {<br>          s2++;<br>          max2 = Math.max(max2, elems.get(i).index);<br>        }<br>      int last = sums.size()-1;<br>      sums.set(last, sums.get(last)+v.value*s2);<br>      if (s1==0)<br>        curindex = max2;<br>      else<br>      {<br>        sums.add(v.value*s1);<br>        curindex = max1;<br>      }<br>    }<br>    start--;<br>    finish--;<br>    if (finish&gt;=sums.size())<br>      return -1;<br>    long res = 0;<br>    for (int i = start; i&lt;=finish; i++)<br>      res += sums.get(i);<br>    return res;<br>  }<br>}<br></td>