<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>import java.math.*;<br>import java.io.*;<br>import java.text.*;<br>import java.util.regex.*;<br>import static java.util.Arrays.*;<br>import static java.lang.Math.*;<br>import static java.lang.Integer.parseInt;<br>public class NormalizingTrees {<br>  boolean[][] g;<br>  public int[] normalize(int[] tree) {<br>    g = new boolean[tree.length][tree.length];<br>    been = new boolean[g.length];<br>    for(int i = 0; i &lt; tree.length; i++){<br>      if(tree[i] != -1){<br>        g[i][tree[i]] = true;<br>        g[tree[i]][i] = true;<br>      }<br>    }<br>    ArrayList&lt;Integer&gt; best = null;<br>    for(int i = 0; i &lt; g.length; i++){<br>      ArrayList&lt;Integer&gt; test = value(i);<br>      if(better(test, best)) best = test;<br>    }<br>    <br>    int[] ans = new int[g.length];<br>    LinkedList&lt;Pair&gt; que = new LinkedList&lt;Pair&gt;();<br>    int at = 1;<br>    que.add(new Pair(0, -1));<br>    while(que.size() &gt; 0){<br>      Pair p = que.removeFirst();<br>      ans[p.x] = p.y;<br>      int ch = best.get(p.x);<br>      for(int i = 0; i &lt; ch; i++) que.add(new Pair(at++, p.x));<br>    }<br>    return ans;<br>  }<br>  boolean[] been;<br>  ArrayList&lt;Integer&gt; value(int at){<br>    been[at] = true;<br>    ArrayList&lt;Integer&gt; ret = new ArrayList&lt;Integer&gt;();<br>    ArrayList&lt;ArrayList&lt;Integer&gt;&gt; childs = new ArrayList&lt;ArrayList&lt;Integer&gt;&gt;();<br>    for(int i = 0; i &lt; been.length; i++){<br>      if(been[i] || !g[at][i]) continue;<br>      childs.add(value(i));<br>    }<br>    ret.add(childs.size());<br>    ArrayList&lt;ArrayList&lt;Integer&gt;&gt; sorted = new ArrayList&lt;ArrayList&lt;Integer&gt;&gt;();<br>    while(childs.size() &gt; 0){<br>      ArrayList&lt;Integer&gt; best = null;<br>      int who = -1;<br>      for(int i = 0; i &lt; childs.size(); i++){<br>        if(better(childs.get(i), best)){<br>          best = childs.get(i);<br>          who = i;<br>        }<br>      }<br>      childs.remove(who);<br>      sorted.add(best);<br>    }<br>    LinkedList&lt;Pair&gt; que = new LinkedList&lt;Pair&gt;();<br>    for(int i = 0; i &lt; sorted.size(); i++) que.add(new Pair(i, 1));<br>    int[] ats = new int[sorted.size()];<br>    while(que.size() &gt; 0){<br>      Pair p = que.removeFirst();<br>      for(int i = 0; i &lt; p.y; i++){<br>        int add = sorted.get(p.x).get(ats[p.x]++);<br>        ret.add(add);<br>        que.add(new Pair(p.x, add));<br>      }<br>    }<br>    been[at] = false;<br>    return ret;<br>  }<br>  boolean better(ArrayList&lt;Integer&gt; a, ArrayList&lt;Integer&gt; b){<br>    if(b == null) return true;<br>    for(int i = 0; i &lt; min(a.size(), b.size()); i++){<br>      if(a.get(i) &gt; b.get(i)) return true;<br>      if(a.get(i) &lt; b.get(i)) return false;<br>    }<br>    if(a.size() &gt; b.size()) return true;<br>    return false;<br>  }<br>  class Pair{<br>    int x, y;<br>    Pair(int xx, int yy){x = xx; y = yy;}<br>  }<br> <br>}<br> <br>// Powered by PopsEdit<br>// Powered by CodeProcessor<br></td>