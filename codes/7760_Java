<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>import java.math.*;<br>import java.io.*;<br>import java.text.*;<br>import java.util.regex.*;<br>import static java.util.Arrays.*;<br>import static java.lang.Math.*;<br>import static java.lang.Integer.parseInt;<br>public class RailwayTickets {<br>  public int minRejects(String[] travel, int seats) {<br>    ArrayList&lt;P&gt; al = new ArrayList&lt;P&gt;();<br>    for(int i = 0; i &lt; travel.length; i++){<br>      StringTokenizer st = new StringTokenizer(travel[i]);<br>      while(st.hasMoreTokens()) al.add(new P(st.nextToken()));<br>    }<br>    Collections.sort(al);<br>    int ret = 0;<br>    TreeSet&lt;D&gt; departs = new TreeSet&lt;D&gt;();<br>    for(P p: al){<br>      while(departs.size() &gt; 0 &amp;&amp; departs.first().to &lt;= p.from) departs.remove(departs.first());<br>      departs.add(new D(p.to));<br>      if(departs.size() &gt; seats){<br>        ret++;<br>        departs.remove(departs.last());<br>      }<br>    }<br>    return ret;<br>  }<br>  class P implements Comparable&lt;P&gt;{<br>    int from, to;<br>    P(String s){<br>      StringTokenizer st = new StringTokenizer(s,"-");<br>      from = Integer.parseInt(st.nextToken());<br>      to = Integer.parseInt(st.nextToken());<br>    }<br>    public int compareTo(P p){<br>      return from-p.from;<br>    }<br>  }<br>  static int sid = 0;<br>  class D implements Comparable&lt;D&gt;{<br>    int to, id;<br>    D(int x){ to = x; id = ++sid;}<br>    public int compareTo(D d){<br>      if(to != d.to) return to-d.to;<br>      return id-d.id;<br>    }<br>  }<br> <br>}<br> <br>// Powered by PopsEdit<br>// Powered by CodeProcessor<br></td>