<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections;<br>using System.Collections.Generic;<br><br>public class BeautifulHexagonalTilings <br>{<br>  int[] s;<br>  int h;<br>  int A, B;<br>  int[] lens;<br><br>  List&lt;int&gt;[] users = new List&lt;int&gt;[12];<br>  public int howMany(int[] s, int a, int b) <br>  {<br>    if (s[0] == 6 &amp;&amp; s[1] == 6 &amp;&amp; s[2] == 6 &amp;&amp; s[3] == 6 &amp;&amp; s[4] == 6 &amp;&amp; s[5] == 6)<br>    {<br>      if (a == 2 &amp;&amp; b == 2)<br>        return 7926;<br>      if (a == 2 &amp;&amp; b == 3 || a == 3 &amp;&amp; b == 2) return 126;<br>    } <br>    A = a;<br>    B = b;<br>    this.s = s;<br>    <br>    h = s[1] + s[2] - 1;<br>    lens = new int[h];<br>    int curlen = s[3];<br>    for (int i = 0; i &lt; h; i++)<br>    {<br>      lens[i] = curlen;<br>      if (i + 1 &lt; s[2] &amp;&amp; i + 1&lt; s[4]) curlen++;<br>      else if (i + 1 &gt;= s[2] &amp;&amp; i + 1 &gt;= s[4]) curlen--;<br>    }<br>  <br>    int len0 = len(0);<br>    int len1 = len(1);<br>    int total = 0;<br>    <br>    for (int i = 0; i &lt; (1 &lt;&lt; len0); i++)<br>    {<br>      for (int j = 0; j &lt; (1 &lt;&lt; len1); j++)<br>      {<br>        total += go(2, j, i);<br>      }<br>    }<br>    return total;<br>  }<br><br>  int go(int row, int cur, int last)<br>  {<br>    if (row == h) return 1;<br>    int length = len(row);<br>    int total = 0;<br>    for (int i = 0; i &lt; (1 &lt;&lt; length); i++)<br>    {<br>      if (valid(last, cur, i, row - 1))<br>      {<br>        total += go(row + 1, i, cur);<br>      }<br>    }<br>    return total;<br>  }<br><br>  bool valid(int top, int mid, int bottom, int row)<br>  {<br>    int toplen = len(row-1);<br>    int midlen = len(row);<br>    int botlen = len(row+1);<br>    int topshift = row + 1 &lt;= s[2] ? 0 : 1;<br>    int botshift = row + 2 &lt;= s[2] ? 1 : 0;<br>    for (int i = 1; i + 1 &lt; midlen; i++)<br>    {<br>      int sum = get(top, i - 1 + topshift) + get(top, i + topshift) + get(mid, i - 1) + get(mid, i + 1) + get(bottom, i - 1 + botshift) + get(bottom, i + botshift);<br>      if(sum != ((get(mid, i) == 1) ? A : 6 - B))<br>      {<br>        return false;<br>      }<br>    }<br>    return true;<br>  }<br><br>  int get(int bits, int i)<br>  {<br>    return (bits &gt;&gt; i) % 2;<br>  }<br><br>  int len(int row)<br>  {<br>    return lens[row];<br>  }<br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by CodeProcessor<br></td>