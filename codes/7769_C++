<td class="problemText" colspan="8" valign="middle" align="left">
            using namespace std;<br><br>#include &lt;cstdio&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cctype&gt;<br>#include &lt;set&gt;<br>#include &lt;map&gt;<br>#include &lt;iostream&gt;<br>#include &lt;sstream&gt;<br>#include &lt;queue&gt;<br>#include &lt;deque&gt;<br>#include &lt;stack&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;string&gt;<br>#include &lt;vector&gt;<br><br>#define REP(var, hi) for (int var=0; var&lt;hi; var++)<br>#define REPD(var, hi) for (int var=hi-1; var&gt;=0; var--)<br>#define FOR(var,lo,hi) for (int var=lo; var&lt;hi; var++)<br>#define FORD(var,lo,hi) for (int var=hi-1; var&gt;=lo; var--)<br>#define FORALL(var, x) for (typeof(x.begin()) var=x.begin(); var!=x.end(); var++)<br><br>#define PB push_back<br>#define SZ size()<br><br>typedef vector&lt;int&gt; VI;<br>typedef vector&lt;VI&gt; VVI;<br>typedef vector&lt;double&gt; VD;<br>typedef vector&lt;VD&gt; VVD;<br>typedef long long LL;<br>typedef vector&lt;LL&gt; VLL;<br>typedef vector&lt;VLL&gt; VVLL;<br>typedef pair&lt;int,int&gt; PII;<br><br>const string CARDS = "23456789TJQKA";<br>const string SUITS = "CDHS";<br><br>int eval5 (VI cards) {<br>  sort(cards.begin(),cards.end());<br>  //  REP(i,5) printf ("%i ",cards[i]);<br>  //  printf ("\n");<br><br>  int flush=1;<br>  REP(i,5) if (cards[i]%4 != cards[0]%4) flush=0;<br><br>  VI cnt(13);<br>  REP(i,5) cnt[cards[i]/4]++;<br><br>  VI high,pair,trip,quad;<br>  REPD(i,13) {<br>    if (cnt[i]==1) high.PB(i);<br>    if (cnt[i]==2) pair.PB(i);<br>    if (cnt[i]==3) trip.PB(i);<br>    if (cnt[i]==4) quad.PB(i);<br>  }<br><br>  if (high.SZ==5) {<br>    if (high[0]-high[4] == 4) {<br>      if (flush) return 9000000 + high[0];<br>      return 4000000 + high[0];<br>    }<br>    if (high[0]==12 &amp;&amp; high[1]==3) {<br>      if (flush) return 9000000 + 3;<br>      return 4000000 + 3;<br>    }<br>  }<br><br>  int eval=0;<br>  REP(i,quad.SZ) eval = 13*eval + quad[i];<br>  REP(i,trip.SZ) eval = 13*eval + trip[i];<br>  REP(i,pair.SZ) eval = 13*eval + pair[i];<br>  REP(i,high.SZ) eval = 13*eval + high[i];<br><br>  if (quad.SZ) return 8000000 + eval;<br>  if (trip.SZ &amp;&amp; pair.SZ) return 7000000 + eval;<br>  if (flush) return 6000000 + eval;<br>  if (trip.SZ) return 3000000 + eval;<br>  if (pair.SZ==2) return 2000000 + eval;<br>  if (pair.SZ) return 1000000 + eval;<br>  return eval;<br>}<br><br>int eval7 (VI cards) {<br>  int res=0;<br>  REP(not1,7) REP(not2,not1) {<br>    VI c;<br>    REP(i,7) if (i!=not1 &amp;&amp; i!=not2) c.PB(cards[i]);<br>    res &gt;?= eval5(c);<br>  }<br>  return res;<br>}<br><br>class DifferentPokerHands {<br>public:<br>  int noDifferentHands(vector &lt;string&gt; comm) {<br>    VI cards;<br>    REP(i,5) {<br>      int C = CARDS.find(comm[i][0]);<br>      int S = SUITS.find(comm[i][1]);<br>      cards.PB(4*C+S);<br>    }<br><br>    set&lt;int&gt; hands;<br><br>    REP(c1,52) REP(c2,c1) {<br>      int ok=1;<br>      REP(i,5) if (cards[i]==c1 || cards[i]==c2) ok=0;<br>      if (!ok) continue;<br>      cards.PB(c1);<br>      cards.PB(c2);<br>      hands.insert(eval7(cards));<br>      cards.pop_back();<br>      cards.pop_back();<br>    }<br><br>    //    FORALL(it,hands) cout&lt;&lt;*it&lt;&lt;endl;<br>    return hands.size();<br>  }<br>};<br><br><br>// Powered by FileEdit<br></td>