<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br><br>public class BoxesArrangement {<br>  const int INF = int.MaxValue / 2;<br>  <br>  int[, ,,] best;<br>  bool[, ,,] got;<br>  int n;<br>  string boxes;<br>  <br>  public int maxUntouched(string boxes) {<br>    n = boxes.Length;<br>    this.boxes = boxes;<br>    best = new int[n + 1, 2 * n + 1, 2 * n + 1, 9];<br>    got = new bool[n + 1, 2 * n + 1, 2 * n + 1, 9];<br>    int res = INF;<br>    for (int i = 0; i &lt; 9; ++i)<br>      res = Math.Min(res, get(n, 0, 0, 0, i));<br>    if (res &lt; INF)<br>      return n - res;<br>    else<br>      return -1;<br>  }<br><br>  private int get(int at, int da, int db, int dc, int l2)<br>  {<br>    if (at == 0)<br>      return (da == 0 &amp;&amp; db == 0 &amp;&amp; dc == 0) ? 0 : INF;<br>    <br>    if (got[at, da + n, db + n, l2])<br>      return best[at, da + n, db + n, l2];<br><br>    int res = INF;<br><br>    int what = l2 % 3;<br>    int cur = boxes[at - 1] - 'A';<br>    int nda = da;<br>    int ndb = db;<br>    int ndc = dc;<br>    int bonus = 0;<br>    if (cur != what)<br>    {<br>      if (cur == 0)<br>        ++nda;<br>      else if (cur == 1)<br>        ++ndb;<br>      else<br>        ++ndc;<br>      if (what == 0)<br>        --nda;<br>      else if (what == 1)<br>        --ndb;<br>      else<br>        --ndc;<br>      ++bonus;<br>    }<br>    <br>    for (int prev = 0; prev &lt; 3; ++prev)<br>    {<br>      if ((prev * 9 + l2) % 13 == 0)<br>        continue;<br>      res = Math.Min(res, get(at - 1, nda, ndb, ndc, prev * 3 + l2 / 3) + bonus);<br>    }<br>    <br>    got[at, da + n, db + n, l2] = true;<br>    best[at, da + n, db + n, l2] = res;<br>    return res;<br>  }<br><br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003] [modified for C# by Petr]<br>// Powered by CodeProcessor<br></td>