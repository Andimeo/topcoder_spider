<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>public class FreeGuitars {<br>    public int minimumCosts(int N, String[] trainRoutes) {<br>        int res;<br>        int[][] map = new int[N+1][N+1];<br>        for (int i=1; i&lt;=N; i++)<br>          for (int j=1; j&lt;=N; j++)<br>            map[i][j] = 100000000;<br>        for (int i=0; i&lt;trainRoutes.length; i++) {<br>          String[] s=trainRoutes[i].split(" ");<br>          try {<br>            int a = Integer.parseInt(s[0]), b = Integer.parseInt(s[1]), c = Integer.parseInt(s[2]);<br>            if (c&lt;map[a][b]) map[a][b] = c;<br>            if (c&lt;map[b][a]) map[b][a] = c;<br>          }<br>          catch (Exception e) {return -1;}<br>        }<br>        <br>        int[] dis = new int[N+1];<br>        boolean[] open = new boolean[N+1];<br>        Arrays.fill(dis, 100000000);<br>        for (int i=1; i&lt;=N; i++)<br>          dis[i] = map[1][i];<br>        Arrays.fill(open, false);<br>        open[1] = true;<br>        int ans = 0;<br>        for (int j=2; j&lt;=N; j++) {<br>          int min = 100000000, dir = -1;<br>          for (int i=1; i&lt;=N; i++)<br>            if (!open[i] &amp;&amp; dis[i]&lt;min)<br>            {<br>              min = dis[i]; dir = i;<br>            }<br>          if (dir==-1) return -1;<br>          ans += dis[dir];<br>          open[dir] = true;<br>          for (int i=1; i&lt;=N; i++)<br>            if (map[dir][i]&lt;dis[i])<br>              dis[i] = map[dir][i];<br>        }<br>        return ans;<br>    }<br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003]<br>// Powered by CodeProcessor<br></td>