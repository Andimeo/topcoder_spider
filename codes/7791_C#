<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections;<br>using System.Collections.Generic;<br><br>public class Shapes<br>{<br>    private struct GG<br>    {<br>        public int X;<br>        public int Y;<br>    }<br><br>    private GG GP(int[,] WW, int L)<br>    {<br>        GG R = new GG();<br>        for (int i = 0; i &lt; L; i++)<br>        {<br>            for (int j = 0; j &lt; L; j++)<br>            {<br>                if (WW[i, j] == 0)<br>                {<br>                    R.X = j;<br>                    R.Y = i;<br>                    return R;<br>                }<br>            }<br>        }<br>        R.X = -1;<br>        R.Y = -1;<br>        return R;<br>    }<br><br>    private void INs(int[,] WW, string[] s, GG P,int g)<br>    {<br>        if (P.X == -1)<br>            throw new Exception(" ");<br>        int d = s[0].IndexOf('#');<br>        for (int i = 0; i &lt; s.Length; i++)<br>        {<br>            for (int j = 0; j &lt; s[i].Length; j++)<br>            {<br>                if (s[i][ j] == '#')<br>                {<br>                    int b = P.X - d + j;<br>                    int a = P.Y + i;<br>                    if (WW[a, b] != 0)<br>                        throw new Exception(" ");<br>                    WW[a, b] = g;<br>                }<br>            }<br>        }<br><br>    }<br><br>    private string[] RS(int L, string[] s1, string[] s2, string[] s3, string[] s4, string[] s5,int[] W)<br>    {<br>        try<br>        {<br>            int[,] RR = new int[L, L];<br>            for (int i = 0; i &lt; L; i++)<br>            {<br>                for (int j = 0; j &lt; L; j++)<br>                {<br>                    RR[i, j] = 0;<br>                }<br>            }<br>            INs(RR, s1, GP(RR, L), W[0]+1);<br>            INs(RR, s2, GP(RR, L), W[1] + 1);<br>            INs(RR, s3, GP(RR, L), W[2] + 1);<br>            INs(RR, s4, GP(RR, L), W[3] + 1);<br>            INs(RR, s5, GP(RR, L), W[4] + 1);<br>            GG QQ = GP(RR, L);<br>            if (QQ.X != -1)<br>            {<br>                return new string[] { "CHEAT" };<br>            }<br>            string[] R = new string[L];<br>            for (int i = 0; i &lt; L; i++)<br>            {<br>                R[i] = "";<br>                for (int j = 0; j &lt; L; j++)<br>                {<br>                    R[i] += RR[i, j].ToString();<br>                }<br>            }<br>            return R;<br>        }<br>        catch<br>        {<br>            return new string[] { "CHEAT" };<br>        }<br>    }<br><br>    private string[] WO(int N, string[] s1, string[] s2, string[] s3, string[] s4, string[] s5)<br>    {<br>        if (N == 0)<br>            return s1;<br>        if (N == 1)<br>            return s2;<br>        if (N == 2)<br>            return s3;<br>        if (N == 3)<br>            return s4;<br>            return s5;<br>    }<br><br>    private void CH(ref List&lt;string&gt; R, string[] RES)<br>    {<br>        if (R[0] == "CHEAT")<br>        {<br>            R = new List&lt;string&gt;(RES);<br>            return;<br>        }<br>        if (RES[0] != "CHEAT")<br>        {<br>            string a = "";<br>            string b = "";<br>            foreach (string s in R)<br>            {<br>                a += s;<br>            }<br>            foreach (string s in RES)<br>            {<br>                b += s;<br>            }<br>            if (a.CompareTo(b) &gt; 0)<br>                R = new List&lt;string&gt;(RES);<br>        }<br>    }<br><br>    public string[] reconstructSquare(int L, string[] s1, string[] s2, string[] s3, string[] s4, string[] s5)<br>    {<br>        int[] W ={ -1, -1, -1, -1, -1 };<br>        int p = 0;<br>        List&lt;string&gt; R = new List&lt;string&gt;();<br>        R.Add("CHEAT");<br>        while (p &gt;=0)<br>        {<br>            W[p]++;<br>            bool b = true;<br>            for (int q = 0; q &lt; p; q++)<br>            {<br>                if (W[q] == W[p])<br>                {<br>                    b = false;<br>                    break;<br>                }<br>            }<br>            if (W[p] == 5)<br>            {<br>                W[p] = -1;<br>                p--;<br>                continue;<br>            }<br>            if (p == 4 &amp;&amp; b)<br>            {<br>                string[] S1 = WO(W[0], s1, s2, s3, s4, s5);<br>                string[] S2 = WO(W[1], s1, s2, s3, s4, s5);<br>                string[] S3 = WO(W[2], s1, s2, s3, s4, s5);<br>                string[] S4 = WO(W[3], s1, s2, s3, s4, s5);<br>                string[] S5 = WO(W[4], s1, s2, s3, s4, s5);<br>                string[] RES = RS(L, S1, S2, S3, S4, S5,W);<br>                CH(ref R, RES);<br><br>                W[p] = -1;<br>                p--;<br>                continue;<br>            }<br>            if (b)<br>                p++;<br>            else<br>                continue;<br>        }<br>        return R.ToArray();<br>    }<br>    <br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003] [modified for C# by r1cs1]<br>// Powered by CodeProcessor<br></td>