<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;map&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cstring&gt;<br>#include &lt;cassert&gt;<br>#include &lt;set&gt;<br>#include &lt;iostream&gt;<br>#include &lt;sstream&gt;<br>#include &lt;cstddef&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;utility&gt;<br>#include &lt;iterator&gt;<br>#include &lt;numeric&gt;<br>#include &lt;list&gt;<br>#include &lt;complex&gt;<br> <br>using namespace std;<br> <br>typedef vector&lt;int&gt; vi;<br>typedef vector&lt;string&gt; vs;<br>typedef long long ll;<br>typedef complex&lt;double&gt; pnt;<br>typedef pair&lt;int, int&gt; pii;<br> <br>#define RA(x) (x).begin(), (x).end()<br>#define FE(i, x) for (typeof((x).begin()) i = (x).begin(); i != (x).end(); i++)<br>#define SZ(x) ((int) (x).size())<br> <br> <br>class DeviceProgramming<br>{<br>public:<br>    long long minBytes(vector &lt;int&gt; offset, vector &lt;int&gt; size, int maxPacketSize, int overhead);<br>};<br> <br>long long DeviceProgramming::minBytes(vector &lt;int&gt; offset, vector &lt;int&gt; size, int maxp, int over)<br>{<br>    ll dp[60];<br>    int N = offset.size();<br>    vector&lt;pii&gt; rngs(N);<br>    for (int i = 0; i &lt; N; i++)<br>        rngs[i] = pii(offset[i], offset[i] + size[i]);<br>    sort(RA(rngs));<br>    maxp -= over;<br> <br>    dp[0] = 0;<br>    for (int i = 1; i &lt;= N; i++)<br>    {<br>        dp[i] = LONG_LONG_MAX;<br>        for (int s = 0; s &lt; i; s++)<br>        {<br>            ll d = rngs[i - 1].second - rngs[s].first;<br>            ll pkts = (d + maxp - 1) / maxp;<br>            ll bytes = d + over * pkts;<br>            dp[i] &lt;?= dp[s] + bytes;<br>        }<br>    }<br>    return dp[N];<br>}<br> <br> <br>// Powered by FileEdit<br></td>