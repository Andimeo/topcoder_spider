<td class="problemText" colspan="8" valign="middle" align="left">
            import java.io.*;<br>import java.util.*;<br><br>public class MutateTree {<br>  int n;<br>  char[] left = new char[260];<br>  char[] right = new char[260];<br>  char root;<br>  <br>  boolean isLeaf(char c) {<br>    return c &gt;= 'A' &amp;&amp; c &lt;= 'Z';<br>  }<br>  <br>  public String newTree(String tree, int root1, int root2) {<br>    int n = tree.length();<br>    char[] stack = new char[n];<br>    int ss = 0;<br>    for (int i = 0; i &lt; n; i++) {<br>      char c = tree.charAt(i);<br>      if (isLeaf(c)) {<br>        stack[ss] = c;<br>        ss++;<br>        continue;<br>      }<br>      if (ss &lt; 2)<br>        return "BADTREE";<br>      ss--;<br>      char c1 = stack[ss];<br>      ss--;<br>      char c2 = stack[ss];<br>      left[c] = c1;<br>      right[c] = c2;<br>      stack[ss] = c;<br>      ss++;<br>    }<br>    if (ss != 1)<br>      return "BADTREE";<br>    root = stack[0];<br>    char rr1 = tree.charAt(root1); <br>    char rr2 = tree.charAt(root2);<br>    if (dfs(rr1, rr2) || dfs(rr2, rr1))<br>      return "OVERLAP";<br>    return trav(root, rr1, rr2);<br>  }<br><br>  private String trav(char v, char rr1, char rr2) {<br>    if (v == rr1 || v == rr2)<br>      v ^= rr1 ^ rr2;<br>    if (isLeaf(v))<br>      return "" + v;<br>    return trav(right[v], rr1, rr2) + trav(left[v], rr1, rr2) + v;<br>  }<br><br>  private boolean dfs(char v, char find) {<br>    if (v == find)<br>      return true;<br>    if (isLeaf(v))<br>      return false;<br>    return dfs(left[v], find) || dfs(right[v], find);<br>  }<br>  <br>  public static void main(String[] args) {<br>    System.out.println(new MutateTree().newTree("ABxCRQgzq", 3, 2));<br>  }<br>}<br></td>