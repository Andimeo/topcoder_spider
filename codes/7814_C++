<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;vector&gt;<br>#include &lt;list&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;deque&gt;<br>#include &lt;queue&gt;<br>#include &lt;stack&gt;<br>#include &lt;bitset&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;functional&gt;<br>#include &lt;numeric&gt;<br>#include &lt;utility&gt;<br>#include &lt;sstream&gt;<br>#include &lt;iostream&gt;<br>#include &lt;iomanip&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cctype&gt;<br>#include &lt;string&gt;<br>#include &lt;cstring&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;ctime&gt;<br><br>using namespace std;<br><br>void gcd(int a, int b, int &amp;x, int &amp;y) {<br>  if (b == 0) {<br>    x = 1; <br>    y = 0;<br>    return;<br>  }<br>  gcd(b, a % b, x, y);<br>  int t = x;<br>  x = y;<br>  y = t - (a / b) * y;<br>}<br><br>int inv[11000];<br>int fac[4300];<br>const int P = 10007;<br>int f[7][4300];<br><br>class LineOfDice<br>{<br>public:<br>  int howMany(vector &lt;int&gt; dice)<br>  {<br>    vector&lt;int&gt; a;<br><br>    int x, y;<br>    for (int i = 1; i &lt; P; i++) {<br>      gcd(i, P, x, y);<br>      inv[i] = (x % P + P) % P;<br>    }<br><br>    memset(fac, 0, sizeof(fac));<br>    fac[0] = 1;<br>    for (int i = 1; i &lt; 4200; i++) {<br>      fac[i] = (fac[i-1] * i) % P; <br>    }<br><br>    int ans = 0;<br>    for (int x = 0; x &lt; 3; x++) {<br>      a.clear();<br>      for (int i = 0; i &lt; 6; i++) {<br>        if (i == x || i + x == 5)<br>          continue;<br>        a.push_back(dice[i]);<br>      }<br>      memset(f, 0, sizeof(f));<br>      f[0][0] = 1;<br><br>      int sum = 0;<br>      for (int i = 1; i &lt;= 4; i++) {<br>        sum += a[i-1];<br>        for (int j = 0; j &lt;= sum; j++) {<br>          for (int now = 0; now &lt;= a[i-1] &amp;&amp; now &lt;= j; now++) {<br>            f[i][j] += f[i-1][j - now] * inv[fac[now]];<br>            f[i][j] = f[i][j] % P;<br>            if (f[i][j] &lt; 0)<br>              f[i][j] += P;<br>          }<br>        }<br>      }<br><br>      for (int j = 1; j &lt;= sum; j++) {<br>        ans += ((f[4][j] * fac[j]) % P);<br>        ans = ans % P;<br>      }<br>    }<br><br>    ans = (ans * 2) % P;<br>    if (ans &lt; 0)<br>      ans += P;<br><br>    return ans;<br>  }<br>};<br></td>