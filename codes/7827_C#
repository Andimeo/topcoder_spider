<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections.Generic;<br><br>public class LateForConcert<br>{<br>    private static int[] dr = new int[] { 0, 1, 0, -1 };<br>    private static int[] dc = new int[] { 1, 0, -1, 0 };<br><br>    public double bestRoute(string[] cityMap, int timeLeft, double speedingTicket, double redLight)<br>    {<br>        int startr = 0;<br>        int startc = 0;<br>        int endr = 0;<br>        int endc = 0;<br>        for (int i = 0; i &lt; cityMap.Length; i++)<br>            for (int j = 0; j &lt; cityMap[0].Length; j++)<br>                if (cityMap[i][j] == 'Y')<br>                {<br>                    startr = i;<br>                    startc = j;<br>                }<br>                else if (cityMap[i][j] == 'C')<br>                {<br>                    endr = i;<br>                    endc = j;<br>                }<br><br>        double[,,] curr = new double[cityMap.Length, cityMap[0].Length, 4];<br>        for (int i = 0; i &lt; cityMap.Length; i++)<br>            for (int j = 0; j &lt; cityMap[0].Length; j++)<br>                for (int k = 0; k &lt; 4; k++)<br>                    curr[i, j, k] = Double.PositiveInfinity;<br><br>        double[,,] next = new double[cityMap.Length, cityMap[0].Length, 4];<br>        for (int i = 0; i &lt; cityMap.Length; i++)<br>            for (int j = 0; j &lt; cityMap[0].Length; j++)<br>                for (int k = 0; k &lt; 4; k++)<br>                    next[i, j, k] = Double.PositiveInfinity;<br><br>        for (int i = 0; i &lt; 4; i++)<br>            curr[startr, startc, i] = 0;<br><br>        for (int t = 0; t &lt; timeLeft; t++)<br>        {<br>            double[,,] next2 = new double[cityMap.Length, cityMap[0].Length, 4];<br>            for (int i = 0; i &lt; cityMap.Length; i++)<br>                for (int j = 0; j &lt; cityMap[0].Length; j++)<br>                    for (int k = 0; k &lt; 4; k++)<br>                        next2[i, j, k] = Double.PositiveInfinity;<br><br>            for (int i = 0; i &lt; cityMap.Length; i++)<br>                for (int j = 0; j &lt; cityMap[0].Length; j++)<br>                    for (int k = 0; k &lt; 4; k++)<br>                        if (!Double.IsInfinity(curr[i, j, k]))<br>                        {<br>                            if (cityMap[i][j] == '.' || cityMap[i][j] == 'Y')<br>                            {<br>                                int r = i + dr[k];<br>                                int c = j + dc[k];<br>                                if (r &gt;= 0 &amp;&amp; r &lt; cityMap.Length &amp;&amp; c &gt;= 0 &amp;&amp; c &lt; cityMap[0].Length)<br>                                    for (int d = 0; d &lt; 4; d++)<br>                                        if ((d + 2) % 4 != k)<br>                                            next[r, c, d] = Math.Min(next[r, c, d], curr[i, j, k]);<br>                            }<br>                            else if (cityMap[i][j] == 'S')<br>                            {<br>                                int r = i + dr[k];<br>                                int c = j + dc[k];<br>                                if (r &gt;= 0 &amp;&amp; r &lt; cityMap.Length &amp;&amp; c &gt;= 0 &amp;&amp; c &lt; cityMap[0].Length)<br>                                    for (int d = 0; d &lt; 4; d++)<br>                                        if ((d + 2) % 4 != k)<br>                                            next[r, c, d] = Math.Min(next[r, c, d], curr[i, j, k] + speedingTicket);<br>                            }<br>                            else if (cityMap[i][j] == 'T')<br>                            {<br>                                int r = i + dr[k];<br>                                int c = j + dc[k];<br>                                if (r &gt;= 0 &amp;&amp; r &lt; cityMap.Length &amp;&amp; c &gt;= 0 &amp;&amp; c &lt; cityMap[0].Length)<br>                                    for (int d = 0; d &lt; 4; d++)<br>                                        if ((d + 2) % 4 != k)<br>                                        {<br>                                            next[r, c, d] = Math.Min(next[r, c, d], curr[i, j, k] + 0.7 * redLight);<br>                                            next2[r, c, d] = Math.Min(next2[r, c, d], curr[i, j, k]);<br>                                        }<br>                            }<br>                        }<br><br>            curr = next;<br>            next = next2;<br>        }<br><br>        double result = Double.PositiveInfinity;<br>        for (int i = 0; i &lt; 4; i++)<br>            result = Math.Min(result, curr[endr, endc, i]);<br><br>        return Double.IsInfinity(result) ? -1 : result;<br>    }<br>}<br></td>