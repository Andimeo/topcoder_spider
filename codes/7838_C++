<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;map&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cstring&gt;<br>#include &lt;cassert&gt;<br>#include &lt;set&gt;<br>#include &lt;iostream&gt;<br>#include &lt;sstream&gt;<br>#include &lt;cstddef&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;utility&gt;<br>#include &lt;iterator&gt;<br>#include &lt;numeric&gt;<br>#include &lt;queue&gt;<br>#include &lt;complex&gt;<br>#include &lt;cctype&gt;<br> <br>using namespace std;<br> <br>#define RA(x) (x).begin(), (x).end()<br>#define FE(i, x) for (typeof((x).begin()) i = (x).begin(); i != (x).end(); i++)<br> <br>typedef pair&lt;int, int&gt; pii;<br>typedef long long ll;<br>typedef vector&lt;int&gt; vi;<br>typedef vector&lt;string&gt; vs;<br>typedef complex&lt;double&gt; pnt;<br> <br> <br>class Glossary<br>{<br>public:<br>    vector &lt;string&gt; buildGlossary(vector &lt;string&gt; items);<br>};<br> <br>bool cmp(const string &amp;a, const string &amp;b)<br>{<br>    return strcasecmp(a.c_str(), b.c_str()) &lt; 0;<br>}<br> <br>string pad(string s, size_t len)<br>{<br>    while (s.size() &lt; len) s += " ";<br>    return s;<br>}<br> <br>vector &lt;string&gt; Glossary::buildGlossary(vector &lt;string&gt; items)<br>{<br>    vector&lt;string&gt; cols[2];<br>    sort(RA(items), cmp);<br>    int N = items.size();<br>    int col = 0;<br> <br>    char last = ' ';<br>    for (int i = 0; i &lt; N; i++)<br>    {<br>        char c = toupper(items[i][0]);<br>        if (c != last)<br>        {<br>            col = (c &gt;= 'N');<br>            cols[col].push_back(pad(string(1, c), 19));<br>            cols[col].push_back("-------------------");<br>            last = c;<br>        }<br>        cols[col].push_back(pad("  " + items[i], 19));<br>    }<br> <br>    while (cols[0].size() &lt; cols[1].size())<br>        cols[0].push_back(string(19, ' '));<br>    while (cols[1].size() &lt; cols[0].size())<br>        cols[1].push_back(string(19, ' '));<br>    for (size_t i = 0; i &lt; cols[0].size(); i++)<br>    {<br>        cols[0][i] += "  ";<br>        cols[0][i] += cols[1][i];<br>    }<br>    return cols[0];<br>}<br> <br> <br>// Powered by FileEdit<br></td>