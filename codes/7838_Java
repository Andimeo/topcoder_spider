<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br> <br>public class Glossary {<br>    class E implements Comparable&lt;E&gt; {<br>        String s;<br>        String k;<br> <br>        public E(String s) {<br>            this.s = s;<br>            this.k = s.toLowerCase();<br>        }<br> <br>        public int compareTo(E o) {<br>            return k.compareTo(o.k);<br>        }<br>    }<br> <br>    String pad(String r) {<br>        while (r.length() &lt; 19) {<br>            r += " ";<br>        }<br>        return r;<br>    }<br> <br>    public String[] buildGlossary(String[] items) {<br>        TreeSet&lt;E&gt;[] a = new TreeSet[26];<br>        for (int i = 0; i &lt; 26; i++) {<br>            a[i] = new TreeSet&lt;E&gt;();<br>        }<br>        for (String s : items) {<br>            E e = new E(s);<br>            a[e.k.charAt(0) - 'a'].add(e);<br>        }<br> <br>        ArrayList&lt;String&gt;[] f = new ArrayList[2];<br>        f[0] = new ArrayList&lt;String&gt;();<br>        f[1] = new ArrayList&lt;String&gt;();<br> <br>        int j = 0;<br>        for (int i = 0; i &lt; 26; i++) {<br>            if (a[i].size() &gt; 0) {<br>                f[j].add(pad("" + (char)('A' + i)));<br>                f[j].add("-------------------");<br>                for (E e : a[i]) {<br>                    f[j].add(pad("  " + e.s));<br>                }<br>            }<br>            if (i == 'M' - 'A') {<br>                j++;<br>            }<br>        }<br> <br>        int l = Math.max(f[0].size(), f[1].size());<br>        String[] r = new String[l];<br>        for (int i = 0; i &lt; l; i++) {<br>            r[i] = "";<br>            if (i &lt; f[0].size()) {<br>                r[i] += f[0].get(i);<br>            } else {<br>                r[i] += pad("");<br>            }<br>            r[i] += "  ";<br>            if (i &lt; f[1].size()) {<br>                r[i] += f[1].get(i);<br>            } else {<br>                r[i] += pad("");<br>            }<br>        }<br>        return r;<br>    }<br> <br> <br>}<br> <br> <br>// Powered by PopsEdit<br> <br>// Powered by CodeProcessor<br></td>