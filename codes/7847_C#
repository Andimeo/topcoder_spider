<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br><br>public class PlatformJumper {<br>  class Platform : IComparable&lt;Platform&gt;<br>  {<br>    public int x;<br>    public int y;<br>    public int c;<br>    public int best = 0;<br><br>    public Platform(int x, int y, int c)<br>    {<br>      this.x = x;<br>      this.y = y;<br>      this.c = c;<br>    }<br><br>    public int CompareTo(Platform other)<br>    {<br>      return y.CompareTo(other.y);<br>    }<br>  }<br>  <br>  public int maxCoins(string[] platforms, int v, int g) {<br>    Platform[] p = Array.ConvertAll&lt;string, Platform&gt;(<br>      platforms,<br>      delegate(string s)<br>        {<br>          string[] pp = s.Split(' ');<br>          return new Platform(int.Parse(pp[0]), int.Parse(pp[1]), int.Parse(pp[2]));<br>        });<br>    Array.Sort(p);<br>    int res = 0;<br>    for (int i = 0; i &lt; p.Length; ++i)<br>    {<br>      Platform cur = p[i];<br>      cur.best = cur.c;<br>      for (int j = 0; j &lt; i; ++j)<br>      {<br>        Platform prev = p[j];<br>        if (canJump(cur, prev, v, g))<br>        {<br>          cur.best = Math.Max(cur.best, cur.c + prev.best);<br>        }<br>      }<br>      res = Math.Max(res, cur.best);<br>    }<br>    return res;<br>  }<br><br>  private bool canJump(Platform a, Platform b, int v, int g)<br>  {<br>    long dx = Math.Abs(a.x - b.x);<br>    long dy = Math.Abs(a.y - b.y);<br>    return dx * dx * g &lt;= 2 * v * v * dy;<br>  }<br><br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003] [modified for C# by Petr]<br>// Powered by CodeProcessor<br></td>