<td class="problemText" colspan="8" valign="middle" align="left">
            import java.io.*;<br>import java.util.*;<br><br>public class PlatformJumper {<br>  class Platform implements Comparable&lt;Platform&gt; {<br>    int x, y, c;<br>    <br>    public Platform(String s) {<br>      Scanner in = new Scanner(s);<br>      x = in.nextInt();<br>      y = in.nextInt();<br>      c = in.nextInt();<br>    }<br>    <br>    public int compareTo(Platform o) {<br>      return o.y - y;<br>    }<br><br>    public boolean poss(Platform o) {<br>      int h = y - o.y;<br>      long mx = V * 1L * V * (h * 2L);<br>      long dx = G * 1L * (x - o.x) * 1L * (x - o.x);<br>      return (dx &lt;= mx);<br>    }<br>  }<br>  <br>  int V, G;<br>  <br>  public int maxCoins(String[] platforms, int v, int g) {<br>    V = v;<br>    G = g;<br>    int n = platforms.length;<br>    Platform[] p = new Platform[n];<br>    for (int i = 0; i &lt; n; i++) {<br>      p[i] = new Platform(platforms[i]);<br>    }<br>    Arrays.sort(p);<br>    int[] a = new int[n];<br>    for (int i = 0; i &lt; n; i++) {<br>      a[i] = Math.max(a[i], p[i].c);<br>      for (int j = i + 1; j &lt; n; j++) {<br>        if (p[i].poss(p[j])) {<br>          a[j] = Math.max(a[j], a[i] + p[j].c);<br>        }<br>      }<br>    }<br>    Arrays.sort(a);<br>    return a[n - 1];<br>  }<br>  <br>  public static void main(String[] args) {<br>    int a = new PlatformJumper().maxCoins(new String[]{"3 10 7", "5 15 7", "8 9 12" }, 2, 10);<br>    System.out.println(a);<br>  }<br>}<br></td>