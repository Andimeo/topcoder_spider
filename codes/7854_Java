<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br><br>public class BubbleSortIterations {<br>    private static final int SIZE = 1000100;<br><br>  public int numIterations(int[] X, int[] Y, int L0, int M, int n){<br>      SegTree tree = new SegTree(SIZE);<br>      int[] a = new int[n];<br>      a[0] = L0;<br>      tree.inc(a[0]);<br>      int answer = 0;<br>      for (int i = 1; i &lt; n; i++) {<br>          a[i] = (int) (((long) a[i - 1] * X[i % X.length] + Y[i % Y.length]) % M);<br>          int tmp = tree.getCnt(a[i] + 1, SIZE);<br>          answer = Math.max(answer, tmp);<br>          tree.inc(a[i]);<br>      }<br>      return answer + 1;<br>    }<br>    <br>    class SegTree {<br>      int nn;<br>      int[] t;<br>      <br>      SegTree(int n) {<br>        for (nn = 1; nn &lt; n; nn *= 2);<br>        t = new int[2 * nn - 1];<br>      }<br>      <br>      void inc(int pos) {<br>        pos += nn;<br>        while (pos &gt; 0) {<br>          t[pos]++;<br>          pos /= 2;<br>        }<br>      }<br>      <br>      int getCnt(int l, int r) {<br>        l += nn;<br>        r += nn;<br>        if (r &gt;= t.length) {<br>          r = t.length - 1;<br>        }<br>        int ans = 0;<br>        while (l &lt;= r) {<br>          if (l == r) {<br>            ans += t[l];<br>            break;<br>          }<br>          if (l % 2 == 1) {<br>            ans += t[l++];<br>          }<br>          if (r % 2 == 0) {<br>            ans += t[r--];<br>          }<br>          l /= 2;<br>          r /= 2;<br>        }<br>        return ans;<br>      }<br>    }<br><br>}<br></td>