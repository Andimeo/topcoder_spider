<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Text;<br>using System.Text.RegularExpressions;<br>using System.Collections;<br>using System.Collections.Generic;<br><br><br><br>public class ArithmeticProgressions<br>  {<br>    public string[] maxAptitude(string[] numbers)<br>    {<br>        long[] t = new long[numbers.Length];<br>        for (int i = 0; i &lt; numbers.Length; i++)<br>            t[i] = long.Parse(numbers[i]);<br>        Array.Sort(t);<br>        long bc = 0;<br>        long bd = 1;<br>        for (int i = 0; i &lt; t.Length; i++)<br>            for (int j = i+1; j &lt; t.Length; j++)<br>                for (int k = j+1; k &lt; t.Length; k++)<br>                {<br>                    long a = t[j] - t[i];<br>                    long b = t[k] - t[j];<br>                    long g = gcd(a, b);<br>                    long c = 0;<br>                    for (int q = 0; q &lt; t.Length; q++)<br>                    {<br>                        if (Math.Abs((t[q] - t[i])) % g == 0) c++;<br>                    }<br>                    long v2 = t[t.Length - 1] - (t[t.Length - 1] - t[i]) % g;<br>                    long v1 = t[0] + Math.Abs(t[0] - t[i]) % g;<br>                    long d = (v2 - v1) / g + 1;<br>                    long ggg = gcd(c, d);<br>                    c /= ggg;<br>                    d /= ggg;<br>                    if (d * bc &lt; bd * c)<br>                    {<br>                        bc = c;<br>                        bd = d;<br>                    }<br>                }<br>        return new string[2] { bc.ToString(), bd.ToString() };<br>    }<br>    private long gcd(long a, long b)<br>    {<br>        if (a &gt; b) return gcd(b, a);<br>        if (a == 0) return b;<br>        return gcd(b % a, a);<br>    }<br><br><br><br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by CodeProcessor<br></td>