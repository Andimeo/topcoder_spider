<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;iostream&gt;<br>#include &lt;sstream&gt;<br>#include &lt;vector&gt;<br>#include &lt;map&gt;<br>#include &lt;math.h&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;numeric&gt;<br>#include &lt;bitset&gt;<br>#include &lt;stack&gt;<br>#include &lt;queue&gt;<br>#include &lt;set&gt;<br>using namespace std;<br>typedef vector&lt;int&gt; vi;<br>#define zmax(a, b) (((a) &lt; (b))?(b):(a))<br>#define zmin(a, b) (((a) &lt; (b))?(a):(b))<br>#define zabs(a) (((a) &lt; 0)?(-(a)):(a))<br>#define iif(c, t, f) ((c)?(t):(f))<br> <br>using namespace std;<br> <br>class ArithmeticProgressions<br>{<br>public:<br>long long gcd(long long a, long long b)<br>{<br>  return iif(a == 0, b, gcd(b % a, a));<br>}<br>vector &lt;string&gt; ArithmeticProgressions::maxAptitude(vector &lt;string&gt; numbers)<br>{<br>  int n = numbers.size();<br>  vector&lt;long long&gt; num;<br>  for(int i = 0; i &lt; n; i++)<br>  {<br>    istringstream sin(numbers[i]);<br>    long long x; sin &gt;&gt; x;<br>    num.push_back(x);<br>  }<br>  sort(num.begin(), num.end());<br>  <br>  long long bn = 0;<br>  long long bd = 1;<br>  for(int a = 0; a &lt; n; a++)<br>  {<br>    for(int b = a + 1; b &lt; n; b++)<br>    {<br>      for(int c = b + 1; c &lt; n; c++)<br>      {<br>        long long md = gcd(num[c] - num[b], num[b] - num[a]);<br>        long long lo = num[a] - md * ((num[a] - num[0]) / md);<br>        long long hi = num[a] + md * ((num[n - 1] - num[a]) / md);<br>        long long cnt = 0;<br>        for(int d = 0; d &lt; n; d++)<br>          if((num[d] - lo) % md == 0)<br>            cnt++;<br>        long long tot = (hi - lo) / md + 1;<br>        <br>        long long div = gcd(cnt, tot);<br>        cnt /= div;<br>        tot /= div;<br>        if(cnt * bd &gt; bn * tot)<br>        {<br>          bn = cnt;<br>          bd = tot;<br>        }<br>      }<br>    }<br>  }<br>  {<br>    ostringstream soutn;<br>    soutn &lt;&lt; bn;<br>    ostringstream soutd;<br>    soutd &lt;&lt; bd;<br>    vector&lt;string&gt; ret;<br>    ret.push_back(soutn.str());<br>    ret.push_back(soutd.str());<br>    return ret;<br>  }<br>}<br>};<br> <br> <br>//Powered by [KawigiEdit] 2.0!!!!11<br></td>