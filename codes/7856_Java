<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>import java.math.BigInteger;<br> <br>public class ArithmeticProgressions {<br>    long gcd(long x, long y) {<br>        while (y != 0) {<br>            long t = x % y; x = y; y = t;<br>        }<br>        return x;<br>    }<br> <br>    public String[] maxAptitude(String[] numbers) {<br>        int n = numbers.length;<br>        long[] a = new long[n];<br>        for (int i = 0; i &lt; n; i++) {<br>            a[i] = Long.parseLong(numbers[i]);<br>        }<br>        Arrays.sort(a);<br> <br>        long bn = 0;<br>        long bd = 1;<br> <br>        for (int i = 0; i &lt; n; i++) {<br>            for (int j = i + 1; j &lt; n; j++) {<br>                for (int k = j + 1; k &lt; n; k++) {<br>                    long d = gcd(a[k] - a[i], a[j] - a[i]);<br> <br>                    long total = (a[i] - a[0]) / d + (a[n - 1] - a[i]) / d + 1;<br>                    long have = 0;<br>                    for (int l = 0; l &lt; n; l++) {<br>                        if ((a[l] - a[i]) % d == 0) {<br>                            have++;<br>                        }<br>                    }<br> <br>                    long dd = gcd(total, have);<br>                    total /= dd;<br>                    have /= dd;<br>                    if (BigInteger.valueOf(bn).multiply(BigInteger.valueOf(total)).compareTo(BigInteger.valueOf(have).multiply(BigInteger.valueOf(bd))) &lt; 0) {<br>                        bn = have;<br>                        bd = total;<br>                    }<br>                }<br>            }<br>        }<br> <br>        return new String[]{Long.toString(bn), Long.toString(bd)};<br>    }<br> <br>}<br> <br> <br>// Powered by PopsEdit<br> <br>// Powered by CodeProcessor<br></td>