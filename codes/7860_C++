<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;cctype&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdarg&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cstring&gt;<br><br>#include &lt;sys/resource.h&gt;<br>#include &lt;sys/time.h&gt;<br>#include &lt;unistd.h&gt;<br><br>#include &lt;algorithm&gt;<br>#include &lt;deque&gt;<br>#include &lt;functional&gt;<br>#include &lt;iostream&gt;<br>#include &lt;iomanip&gt;<br>#include &lt;limits&gt;<br>#include &lt;list&gt;<br>#include &lt;map&gt;<br>#include &lt;numeric&gt;<br>#include &lt;queue&gt;<br>#include &lt;set&gt;<br>#include &lt;sstream&gt;<br>#include &lt;stack&gt;<br>#include &lt;string&gt;<br>#include &lt;utility&gt;<br>#include &lt;vector&gt;<br><br>#include &lt;ext/algorithm&gt;<br>#include &lt;ext/hash_map&gt;<br>#include &lt;ext/hash_set&gt;<br>#include &lt;ext/numeric&gt;<br><br>using namespace std;<br>using namespace __gnu_cxx;<br><br>template&lt;class T, class V&gt;<br>vector&lt;T&gt; operator,(vector&lt;T&gt; v, V t) {<br>    v.push_back(t);<br>    return v;<br>}<br><br>#define VAR(i,e) __typeof(e) i = (e)<br>#define FOREACH(i, C) for (VAR(i, (C).begin()); i != (C).end(); ++i)<br><br>#define FORI(p, x) for (int i = p; i &lt; (int)(x); ++i)<br>#define FORJ(p, x) for (int j = p; j &lt; (int)(x); ++j)<br>#define PB push_back<br>#define S size()<br><br>#define VI vector&lt;int&gt;<br>#define VVI vector&lt;vector&lt;int&gt; &gt;<br><br>struct RelabelingOfGraph{<br>    vector &lt;int&gt; renumberVertices(vector &lt;string&gt; m);<br>    <br>};<br><br>vector &lt;int&gt; RelabelingOfGraph::renumberVertices(vector &lt;string&gt; m) {<br>    int n = m.S;<br>    VVI graph(n);<br>    VI rev(n, 0);<br>    FORI (0, n) {<br>        FORJ (0, n) if (m[i][j] == '1') {<br>            graph[j].PB(i);<br>            rev[i]++;<br>        }<br>    }<br><br>    VI lab(n, -1);<br><br>    for (int l = n - 1; l &gt;= 0; --l) {<br>        int idx = -1;<br>        for (int i = n - 1; i &gt;= 0; --i) {<br>            if (rev[i] == 0 &amp;&amp; lab[i] == -1) {<br>                idx = i;<br>                break;<br>            }<br>        }<br>        if (idx == -1) return VI();<br><br>        lab[idx] = l;<br>        FOREACH (it, graph[idx]) rev[*it]--;<br>    }<br>    return lab;<br>}<br>// Powered by Krzysan's Cleaner 1.4-6a<br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003]<br>// Powered by CodeProcessor<br></td>