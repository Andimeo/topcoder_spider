<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>import java.util.regex.*;<br>import java.text.*;<br>import java.math.*;<br>import java.awt.geom.*;<br> <br>public class NumberOfDivisors<br>{<br>  int[] primes = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97};<br>  <br>  public long smallestNumber(int n)<br>  {<br>    int[] divisors = new int[primes.length];<br>    return searchAll(n, divisors, 0);<br>  }<br>  <br>  long searchAll(int n, int[] divisors, int count)<br>  {<br>    if (n == 1)<br>    {<br>      long answer = 1;<br>      for (int i=0; i&lt;count; i++)<br>        for (int j=1; j&lt;divisors[i]; j++)<br>          if (answer * primes[i] / primes[i] != answer)<br>            return -1;<br>          else<br>            answer *= primes[i];<br>      if (answer &gt; 1000000000000000000L)<br>        return -1;<br>      else<br>        return answer;<br>    }<br>    else<br>    {<br>      divisors[count] = n;<br>      long answer = searchAll(1, divisors, count+1);<br>      for (int i=2; i*i &lt;= n; i++)<br>        if (n%i == 0)<br>        {<br>          divisors[count] = n/i;<br>          if (count == 0 || divisors[count] &lt;= divisors[count-1])<br>          {<br>            long tempanswer = searchAll(i, divisors, count+1);<br>            if (tempanswer != -1 &amp;&amp; (answer == -1 || tempanswer &lt; answer))<br>              answer = tempanswer;<br>          }<br>          divisors[count] = i;<br>          if (count == 0 || divisors[count] &lt;= divisors[count-1])<br>          {<br>            long tempanswer = searchAll(n/i, divisors, count+1);<br>            if (tempanswer != -1 &amp;&amp; (answer == -1 || tempanswer &lt; answer))<br>              answer = tempanswer;<br>          }<br>        }<br>      return answer;<br>    }<br>  }<br>  <br>  <br>}<br>//Powered by [KawigiEdit] 2.0!<br></td>