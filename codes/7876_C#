<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections;<br>using System.Collections.Generic;<br>using System.Text; <br><br>public class PrinceOfPersia<br>{<br>    int[] xx, yy;<br>    bool[,] ex;<br>    int n, m;<br>    char[,] a;<br>    public int minObstacles(string[] maze)<br>    {<br>        a = new char[55, 55];<br>        n = maze.Length;<br>        m = maze[0].Length;<br>        xx = new int[2];<br>        yy = new int[2];<br>        int cnt = 0;<br>        int i, j;<br>        for (i = 0; i &lt; n; i++) for (j = 0; j &lt; m; j++) a[i, j] = maze[i][j];<br>        for (i=0; i&lt;n; i++) for (j=0; j&lt;m; j++)<br>        {<br>            if (maze[i][j] == 'P')<br>            {<br>                xx[cnt] = i;<br>                yy[cnt] = j;<br>                cnt++;<br>            }<br>        }<br>        if (xx[0] + 1 == xx[1] &amp;&amp; yy[0] == yy[1]) return -1;<br>        if (xx[1] + 1 == xx[0] &amp;&amp; yy[0] == yy[1]) return -1;<br>        if (yy[0] + 1 == yy[1] &amp;&amp; xx[0] == xx[1]) return -1;<br>        if (yy[1] + 1 == yy[0] &amp;&amp; xx[0] == xx[1]) return -1;<br>        ex = new bool[11, 11];<br>        dfs(xx[0], yy[0]);<br>        if (!ex[xx[1], yy[1]]) return 0;<br><br>        int i1, i2, i3, j1, j2, j3;<br>        for (i1=0; i1&lt;n; i1++) for (j1=0; j1&lt;m; j1++) if (a[i1, j1]=='.')<br>        {<br>            a[i1, j1] = '#';<br>            ex = new bool[11, 11];<br>            dfs(xx[0], yy[0]);<br>            if (!ex[xx[1], yy[1]]) return 1;<br>            a[i1, j1] = '.';<br>        }<br><br>        for (i1 = 0; i1 &lt; n; i1++) for (j1 = 0; j1 &lt; m; j1++) if (a[i1, j1] == '.')<br>        {<br>            a[i1, j1] = '#';<br>            for (i2 = i1; i2 &lt; n; i2++) for (j2 = 0; j2 &lt; m; j2++) if (a[i2, j2] == '.') if (i2 &gt; i1 || j2 &gt; j1)<br>            {<br>                a[i2, j2] = '#';<br>                ex = new bool[11, 11];<br>                dfs(xx[0], yy[0]);<br>                if (!ex[xx[1], yy[1]]) return 2;<br>                a[i2, j2] = '.';<br>            }<br>            a[i1, j1] = '.';<br>        }<br><br>        for (i1 = 0; i1 &lt; n; i1++) for (j1 = 0; j1 &lt; m; j1++) if (a[i1, j1] == '.')<br>        {<br>            a[i1, j1] = '#';<br>            for (i2 = i1; i2 &lt; n; i2++) for (j2 = 0; j2 &lt; m; j2++) if (a[i2, j2] == '.') if (i2 &gt; i1 || j2 &gt; j1)<br>            {<br>                a[i2, j2] = '#';<br>                for (i3 = i2; i3 &lt; n; i3++) for (j3 = 0; j3 &lt; m; j3++) if (a[i3, j3] == '.') if (i3 &gt; i2 || j3 &gt; j2)<br>                {<br>                    a[i3, j3] = '#';<br>                    ex = new bool[11, 11];<br>                    dfs(xx[0], yy[0]);<br>                    if (!ex[xx[1], yy[1]]) return 3;<br>                    a[i3, j3] = '.';<br>                }<br>                a[i2, j2] = '.';<br>            }<br>            a[i1, j1] = '.';<br>        }<br><br>        return 4;<br>    }<br><br>    private void dfs(int x, int y)<br>    {<br>        ex[x, y] = true;<br>        if (x &gt; 0 &amp;&amp; !ex[x - 1, y] &amp;&amp; a[x - 1, y] != '#') dfs(x - 1, y);<br>        if (x &lt; n-1 &amp;&amp; !ex[x + 1, y] &amp;&amp; a[x + 1, y] != '#') dfs(x + 1, y);<br>        if (y &gt; 0 &amp;&amp; !ex[x, y - 1] &amp;&amp; a[x, y - 1] != '#') dfs(x, y - 1);<br>        if (y &lt; m - 1 &amp;&amp; !ex[x, y + 1] &amp;&amp; a[x, y + 1] != '#') dfs(x, y + 1);<br>    }<br><br>    // helper<br>    void cout(object o) { System.Console.WriteLine(o); } <br><br>};<br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003] [modified for C# by Petr]<br>// Powered by CodeProcessor<br></td>