<td class="problemText" colspan="8" valign="middle" align="left">
            imports System<br>imports Microsoft.VisualBasic<br>imports System.Collections<br>imports System.Text<br> <br> <br>Public Class PrinceOfPersia<br> <br>    Dim w, h As Integer<br>    Dim g(,) As Boolean<br>    Dim cc(200, 200) As Integer<br> <br>    Dim qp As New ArrayList<br>    Private Const INF As Long = 100000000<br>    Dim ttt() As Integer<br>    Dim prev() As Integer<br> <br>    Public Function minObstacles(ByVal maze() As String) As Integer<br>        w = maze(0).Length<br>        h = maze.Length<br> <br>        ReDim g(w - 1, h - 1)<br> <br>        Dim x, y As Integer<br>        Dim bf As Boolean<br>        Dim x1, x2, y1, y2 As Integer<br> <br>        For x1 = 0 To 100<br>            cc(x1, 100 + x1) = 1<br>        Next<br> <br>        For y = 0 To h - 1<br>            For x = 0 To w - 1<br>                If maze(y).Chars(x) = "#" Then<br>                    g(x, y) = True<br>                    cc(x + y * 10, 100 + x + y * 10) = 0<br>                End If<br>                If maze(y).Chars(x) = "P" Then<br>                    If bf Then<br>                        x2 = x : y2 = y<br>                    Else<br>                        bf = True<br>                        x1 = x : y1 = y<br>                    End If<br>                End If<br>            Next<br>        Next<br> <br>        If (Math.Abs(x2 - x1) + Math.Abs(y2 - y1)) = 1 Then Return -1<br> <br>        For x = 0 To w - 1<br>            For y = 0 To h - 1<br>                If Not g(x, y) Then<br>                    If x &gt; 0 AndAlso Not g(x - 1, y) Then<br>                        cc(x + 10 * y + 100, (x - 1) + 10 * y) = 1<br>                    End If<br>                    If y &gt; 0 AndAlso Not g(x, y - 1) Then<br>                        cc(x + 10 * y + 100, x + 10 * (y - 1)) = 1<br>                    End If<br>                    If x &lt; w - 1 AndAlso Not g(x + 1, y) Then<br>                        cc(x + 10 * y + 100, (x + 1) + 10 * y) = 1<br>                    End If<br>                    If y &lt; h - 1 AndAlso Not g(x, y + 1) Then<br>                        cc(x + 10 * y + 100, x + 10 * (y + 1)) = 1<br>                    End If<br>                End If<br>            Next<br>        Next<br> <br>        Dim c As Integer<br>        While FindPath(x1 + y1 * 10 + 100, x2 + y2 * 10, 200)<br>            c += 1<br>        End While<br> <br>        Return c<br>    End Function<br> <br> <br> <br>    Private Function FindPath(ByVal iStart As Integer, ByVal iEnd As Integer, ByVal n As Integer) As Boolean<br>        Dim i As Integer<br>        Dim iP As Integer, iT As Integer<br> <br>        ReDim ttt(n - 1)<br>        ReDim prev(n - 1)<br>        For i = 0 To n - 1<br>            ttt(i) = INF<br>        Next<br> <br>        qp.clear()<br>        prev(iStart) = -1<br>        ttt(iStart) = 0<br>        qp.Add(iStart)<br> <br>        While qp.Count &gt; 0<br>            iP = qp(0)<br>            iT = ttt(iP)<br> <br>            For i = 0 To n - 1<br>                If cc(iP, i) &gt; 0 Then<br>                    If iT + 1 &lt; ttt(i) Then<br>                        prev(i) = ip<br>                        ttt(i) = iT + 1<br>                        If i = iEnd Then<br>                            Dim am As Integer<br>                            am = FindCap(iEnd)<br>                            DecAll(iEnd, am)<br>                            Return True<br>                        End If<br>                        qp.Add(i)<br>                    End If<br>                End If<br>            Next<br> <br>            qp.RemoveAt(0)<br>        End While<br> <br>        Return False<br>    End Function<br> <br>    Private Sub DecAll(ByVal iTarget As Integer, ByVal am As Integer)<br>        Dim iPrev As Integer<br> <br>        While True<br>            iPrev = prev(iTarget)<br>            If iPrev = -1 Then Exit Sub<br>            cc(iPrev, iTarget) -= am<br>            cc(iTarget, iPrev) += am<br>            iTarget = iPrev<br>        End While<br>    End Sub<br> <br>    Private Function FindCap(ByVal iTarget As Integer) As Integer<br>        Dim amount As Integer, iPrev As Integer<br>        amount = INF<br> <br>        While True<br>            iPrev = prev(iTarget)<br>            If iPrev = -1 Then Return amount<br>            If cc(iPrev, iTarget) &lt; amount Then amount = cc(iPrev, iTarget)<br>            iTarget = iPrev<br>        End While<br> <br>    End Function<br> <br> <br> <br>End Class<br></td>