<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections;<br>using System.Collections.Generic;<br>using System.Collections.Specialized;<br>using System.Text;<br>using System.Text.RegularExpressions;<br> <br>public class ConvexArray<br>{<br>  <br>  int ptdt(int x1,int y1,int x2,int y2,int x,int y) {<br>    int t = (x-x1)*(y1-y2) - (y-y1)*(x1-x2);<br>    if(t&lt;0) return -1;<br>    else if(t==0) return 0;<br>    else return 1;<br>  }<br>  <br>  bool check(int[] a) {<br>    if( (a.Length % 2) != 0 ) return false;<br>    int n = a.Length / 2;<br>    for(int i=0;i&lt;n;++i) {<br>      for(int k=0;k&lt;n;++k) if(k!=i) {<br>        if(a[2*i]==a[2*k] &amp;&amp; a[2*i+1]==a[2*k+1]) return false;<br>      }<br>      int j = (i+1)%n;<br>      int tam=22;<br>      for(int k=0;k&lt;n;++k) if(k!=i &amp;&amp; k!=j) {<br>        int t = ptdt(a[2*i],a[2*i+1],a[2*j],a[2*j+1],a[2*k],a[2*k+1]);<br>        if(t==0) return false;<br>        if(tam==22) tam=t;<br>        else if(tam!=t) return false;<br>      }<br>    }<br>    return true;<br>  }<br>  <br>  List&lt;int&gt; TT, TT2;<br>  <br>  void duyet(int i) {<br>    if(TT2!=null) return;<br>    if(i==0) {<br>      if(check(TT.ToArray())) {<br>        TT2=new List&lt;int&gt;(TT);<br>        Console.WriteLine("asdasd");<br>      }<br>      return;<br>    }<br>    for(int x=1;x&lt;=50;++x) {<br>      TT.Add(x);<br>      duyet(i-1);<br>      TT.RemoveAt(TT.Count-1);<br>    }<br>  }<br>  <br>  int[] GG(List&lt;int&gt; T,int st) {<br>    int[] a=new int[T.Count-st];<br>    for(int i=st;i&lt;T.Count;++i) a[i-st]=T[i];<br>    return a;<br>  }<br>  <br>  public int[] getEnding(int[] beginning)<br>  {<br>    <br>    if(beginning.Length&lt;6) {<br>      TT = new List&lt;int&gt;();<br>      for(int i=0;i&lt;beginning.Length;++i) TT.Add(beginning[i]);<br>      duyet(6-beginning.Length);<br>      if(TT2==null) return new int[]{-1};<br>      else return GG(TT2,beginning.Length);<br>    }<br>    else {<br>      TT = new List&lt;int&gt;();<br>      for(int i=0;i&lt;beginning.Length;++i) TT.Add(beginning[i]);<br>      if((beginning.Length%2)==1) {<br>        duyet(1);<br>        if(TT2==null) return new int[]{-1};<br>        else return GG(TT2,beginning.Length);<br>      }<br>      else {<br>        if(check(beginning)) return new int[0];<br>        else return new int[]{-1};<br>      }<br>    }<br>  }<br> <br> <br>}<br>//Powered by [KawigiEdit] 2.0!<br></td>