<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br><br>public class ConvexArray {<br>        public int[] getEnding(int[] beginning) {<br>            int len = getMinAdded(beginning);<br>            if (len &lt; 0 || beginning.length + len &gt; 50)<br>                return new int[]{-1};<br>            int[] res = new int[len];<br>            for (int i = 0; i &lt; len; ++i)<br>                for (res[i] = 1; res[i] &lt;= 50; ++res[i])<br>                {<br>                    int[] tmp = new int[beginning.length + i + 1];<br>                    System.arraycopy(beginning, 0, tmp, 0, beginning.length);<br>                    System.arraycopy(res, 0, tmp, beginning.length, i + 1);<br>                    if (getMinAdded(tmp) == len - i - 1)<br>                        break;<br>                }<br>            return res;<br>        }<br><br>    private int getMinAdded(int[] arr) {<br>        if (arr.length &lt;= 3)<br>            return 6 - arr.length;<br>        if (arr.length == 4) {<br>            if (arr[0] != arr[2] || arr[1] != arr[3])<br>                return 2;<br>            else<br>                return -1;<br>        }<br>        if (arr.length == 5) {<br>            if (arr[0] != arr[2] || arr[1] != arr[3]) {<br>                if (arr[0] != arr[2] || arr[0] != arr[4])<br>                    return 1;<br>                else<br>                    return -1;<br>            } else<br>                return -1;<br>        }<br>        if (arr.length % 2 != 0) {<br>            int res = -1;<br>            for (int nxt = 1; nxt &lt;= 50; ++nxt) {<br>                int[] tmp = new int[arr.length + 1];<br>                System.arraycopy(arr, 0, tmp, 0, arr.length);<br>                tmp[arr.length] = nxt;<br>                int cur = getMinAdded(tmp);<br>                if (cur &gt;= 0)<br>                    if (res &lt; 0)<br>                        res = cur;<br>                    else<br>                        res = Math.min(res, cur);<br>            }<br>            if (res &gt;= 0)<br>                ++res;<br>            return res;<br>        }<br>        int dx1 = arr[2] - arr[0];<br>        int dy1 = arr[3] - arr[1];<br>        int dx2 = arr[4] - arr[2];<br>        int dy2 = arr[5] - arr[3];<br>        int z = sign(dx1 * dy2 - dx2 * dy1);<br>        if (z == 0)<br>            return -1;<br>        double sd = 0;<br>        for (int i = 0; i &lt; arr.length / 2; ++i) {<br>            dx1 = arr[(i * 2 + 2) % arr.length] - arr[(i * 2 + 0) % arr.length];<br>            dy1 = arr[(i * 2 + 3) % arr.length] - arr[(i * 2 + 1) % arr.length];<br>            dx2 = arr[(i * 2 + 4) % arr.length] - arr[(i * 2 + 2) % arr.length];<br>            dy2 = arr[(i * 2 + 5) % arr.length] - arr[(i * 2 + 3) % arr.length];<br>            double cur = Math.atan2(dy2, dx2) - Math.atan2(dy1, dx1);<br>            while (cur &lt; -Math.PI)<br>                cur += 2 * Math.PI;<br>            while (cur &gt; Math.PI)<br>                cur -= 2 * Math.PI;<br>            sd += cur;<br>            if (z != sign(dx1 * dy2 - dx2 * dy1))<br>                return -1;<br>        }<br>        if (Math.abs(Math.abs(sd) - 2 * Math.PI) &lt; 1)<br>            return 0;<br>        else<br>            return -1;<br>    }<br><br>    private int sign(int z) {<br>        if (z &lt; 0) return -1; else if (z &gt; 0) return 1; else return 0;<br>    }<br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by RETester [based on ExampleBuilder]<br>// Powered by CodeProcessor<br></td>