<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;string&gt;<br>#include &lt;cmath&gt;<br>#include &lt;ctime&gt;<br>#include &lt;cstring&gt;<br>#include &lt;vector&gt;<br>#include &lt;list&gt;<br>#include &lt;complex&gt;<br>#include &lt;utility&gt;<br>#include &lt;queue&gt;<br>#include &lt;functional&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;set&gt;<br>#include &lt;map&gt;<br>#include &lt;iostream&gt;<br>#include &lt;sstream&gt;<br>#include &lt;fstream&gt;<br> <br>using namespace std;<br> <br>#define two(X) (1&lt;&lt;(X))<br>#define lowbit(X) (((X)^((X)-1))&amp;(X))<br>#define contain(set,X) (((set)&amp;two(X))&gt;0)<br>const double pi=acos(-1.0);<br>const double eps=1e-11;<br>int countbit(int set) {return (set==0)?0:countbit(set-lowbit(set))+1;}<br>typedef pair&lt;int,int&gt; ipair;<br>typedef pair&lt;string,string&gt; spair;<br>typedef vector&lt;int&gt; VI;<br>typedef vector&lt;string&gt; VS;<br>typedef long long int64;<br>template&lt;class T&gt; void out(T A[],int n){cout&lt;&lt;"{";for (int i=0;i&lt;n;i++){ cout&lt;&lt;A[i];if (i+1&lt;n) cout&lt;&lt;",";} cout&lt;&lt;"}"&lt;&lt;endl;}<br>template&lt;class T&gt; void out(vector&lt;T&gt; A,int n=-1){if (n==-1) n=A.size();cout&lt;&lt;"{";for (int i=0;i&lt;n;i++){ cout&lt;&lt;A[i];if (i+1&lt;n) cout&lt;&lt;",";} cout&lt;&lt;"}"&lt;&lt;endl;  }<br>string toString(int v) {char buf[30];sprintf(buf,"%d",v);return buf;}<br>string toString(int64 v) {char buf[30];sprintf(buf,"%lld",v);return buf;}<br> <br>class CostMatrix<br>{ <br>public:<br>  int G[60][60];<br>  int leastTotalCost(vector &lt;string&gt; matrix)<br>  {<br>    int n=matrix.size();<br>    for (int i=0;i&lt;n;i++)<br>    {<br>      istringstream sin(matrix[i]);<br>      for (int j=0;j&lt;n;j++)<br>        sin&gt;&gt;G[i][j];<br>    }<br>    for (int i=0;i&lt;n;i++)<br>      for (int j=0;j&lt;n;j++)<br>        for (int k=0;k&lt;n;k++)<br>          if (G[i][k]+G[k][j]&lt;G[i][j])<br>            return -1;<br>    int result=0;<br>    for (int i=0;i&lt;n;i++)<br>      for (int j=i+1;j&lt;n;j++)<br>      {<br>        bool fd=false;<br>        for (int k=0;k&lt;n;k++) if (k!=i &amp;&amp; k!=j)<br>          if (G[i][k]+G[k][j]==G[i][j])<br>            fd=true;<br>        if (!fd) result+=G[i][j];<br>      }    <br>    return result;<br>  }<br>};<br> <br>// Powered by PopsEdit<br></td>