<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;vector&gt;<br>#include &lt;list&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;deque&gt;<br>#include &lt;stack&gt;<br>#include &lt;bitset&gt;<br>#include &lt;string&gt;<br>#include &lt;functional&gt;<br>#include &lt;numeric&gt;<br>#include &lt;utility&gt;<br>#include &lt;sstream&gt;<br>#include &lt;iostream&gt;<br>#include &lt;iomanip&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;ctime&gt;<br>#include &lt;algorithm&gt;<br>using namespace std;<br><br>class CrazyComponents<br>{<br>public:<br>  int n;<br>  vector&lt;int&gt; in;<br>  vector&lt;int&gt; out;<br>  int total;<br><br>  double dp[51][1&lt;&lt;15];<br>  char calc[51][1&lt;&lt;15];<br>  int need[20];<br><br>  double proc(int t,int mask)<br>  {<br>    if(t==total)<br>      return 0;<br>    if(calc[t][mask])<br>      return dp[t][mask];<br>    double ret=0;<br>    for(int i=0;i&lt;n;i++)<br>    {<br>      if((need[i]&amp;mask)!=need[i])<br>      {<br>        double temp=proc(t+1,mask);<br>        ret+=temp/n;<br>      }<br>      else<br>      {<br>        double temp=proc(t+1,mask);<br>        double tmp=proc(t+1,mask|(1&lt;&lt;i))-out[i]+in[i];<br>        temp=max(temp,tmp);<br>        ret+=temp/n;<br>      }<br>    }<br>    calc[t][mask]=1;<br>    dp[t][mask]=ret;<br>    return ret;<br>  }<br><br>  double expectedProfit(int k, vector &lt;string&gt; comp, vector &lt;int&gt; income, vector &lt;int&gt; exp)<br>  {<br>    total=k;<br>    in=income;<br>    out=exp;<br>    n=comp.size();<br>    memset(calc,0,sizeof(calc));<br>    for(int i=0;i&lt;n;i++)<br>    {<br>      stringstream ss;<br>      ss&lt;&lt;comp[i];<br>      int m=0;<br>      int temp;<br>      while(ss&gt;&gt;temp)<br>      {<br>        m+=(1&lt;&lt;temp);<br>      }<br>      need[i]=m;<br>    }<br>    return proc(0,0);<br>  }<br>};<br></td>