<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br><br>public class NowhereLand {<br>    int INF = 10000;<br><br>  public int placeGuards(string[] cities, int k, string[] guards, string[] agencies) {<br>        int n = cities.Length;<br>        bool[,] edge = new bool[n, n];<br>        bool[,] present = new bool[n, k];<br>        bool[,] can = new bool[n, k];<br>        for (int i = 0; i &lt; n; ++i)<br>            for (int j = 0; j &lt; n; ++j)<br>                edge[i, j] = cities[i][j] == '1';<br>        for (int i = 0; i &lt; n; ++i)<br>        {<br>            if (guards[i].Length &gt; 0)<br>            {<br>                int[] all = Array.ConvertAll&lt;string, int&gt;(guards[i].Split(' '), int.Parse);<br>                foreach (int j in all)<br>                    present[i, j] = true;<br>            }<br>            if (agencies[i].Length &gt; 0)<br>            {<br>                int[] all = Array.ConvertAll&lt;string, int&gt;(agencies[i].Split(' '), int.Parse);<br>                foreach (int j in all)<br>                    can[i, j] = true;<br>            }<br>        }<br>        int res = 0;<br>        for (int who = 0; who &lt; k; ++who)<br>        {<br>            int m = 2 + n;<br>            int s = m - 2;<br>            int t = m - 1;<br>            int[,] c = new int[m, m];<br>            for (int i = 0; i &lt; n; ++i)<br>            {<br>                for (int j = 0; j &lt; n; ++j)<br>                {<br>                    if (edge[i, j])<br>                    {<br>                        c[i, j] = 1;<br>                    }<br>                }<br>                if (present[i, who])<br>                    c[s, i] = INF;<br>                if (!can[i, who])<br>                    c[i, t] = INF;<br>            }<br>            res += flow(m, c, s, t);<br>        }<br>        return res;<br>  }<br><br>    private int flow(int m, int[,] c, int s, int t)<br>    {<br>        bool[] mark = new bool[m];<br>        int res = 0;<br>        while (dfs(m, c, s, t, mark))<br>        {<br>            for (int i = 0; i &lt; m; ++i)<br>                mark[i] = false;<br>            ++res;<br>        }<br>        return res;<br>    }<br><br>    private bool dfs(int m, int[,] c, int s, int t, bool[] mark)<br>    {<br>        if (s == t)<br>            return true;<br>        if (mark[s])<br>            return false;<br>        mark[s] = true;<br>        for (int i = 0; i &lt; m; ++i)<br>            if (c[s, i] &gt; 0 &amp;&amp; dfs(m, c, i, t, mark)) {<br>                --c[s, i];<br>                ++c[i, s];<br>                return true;<br>            }<br>        return false;<br>    }<br><br><br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003] [modified for C# by Petr]<br>// Powered by CodeProcessor<br></td>