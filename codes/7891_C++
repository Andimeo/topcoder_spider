<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;vector&gt;<br>#include &lt;list&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;deque&gt;<br>#include &lt;queue&gt;<br>#include &lt;stack&gt;<br>#include &lt;bitset&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;functional&gt;<br>#include &lt;numeric&gt;<br>#include &lt;utility&gt;<br>#include &lt;sstream&gt;<br>#include &lt;iostream&gt;<br>#include &lt;iomanip&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cctype&gt;<br>#include &lt;string&gt;<br>#include &lt;cstring&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;ctime&gt;<br> <br>using namespace std;<br> <br>#define SIZE(X) ((int)(X.size()))<br> <br>const int maxnode=20000+5;<br>const int maxedge=1000000+5;<br>const int oo=1000000000;<br> <br>int node,src,dest,nedge;<br>int head[maxnode],point[maxedge],next[maxedge],flow[maxedge],capa[maxedge];<br>int dist[maxnode],Q[maxnode],work[maxnode];<br> <br>void init(int _node,int _src,int _dest)<br>{<br>  node=_node;<br>  src=_src;<br>  dest=_dest;<br>  for (int i=0;i&lt;node;i++) head[i]=-1;<br>  nedge=0;<br>}<br>void addedge(int u,int v,int c1,int c2)<br>{<br>  point[nedge]=v,capa[nedge]=c1,flow[nedge]=0,next[nedge]=head[u],head[u]=(nedge++);<br>  point[nedge]=u,capa[nedge]=c2,flow[nedge]=0,next[nedge]=head[v],head[v]=(nedge++);<br>}<br>bool dinic_bfs()<br>{<br>  memset(dist,255,sizeof(dist));<br>  dist[src]=0;<br>  int sizeQ=0;<br>  Q[sizeQ++]=src;<br>  for (int cl=0;cl&lt;sizeQ;cl++)<br>    for (int k=Q[cl],i=head[k];i&gt;=0;i=next[i])<br>      if (flow[i]&lt;capa[i] &amp;&amp; dist[point[i]]&lt;0)<br>      {<br>        dist[point[i]]=dist[k]+1;<br>        Q[sizeQ++]=point[i];<br>      }<br>  return dist[dest]&gt;=0;<br>}<br>int dinic_dfs(int x,int exp)<br>{<br>  if (x==dest) return exp;<br>  for (int &amp;i=work[x];i&gt;=0;i=next[i])<br>  {<br>    int v=point[i],tmp;<br>    if (flow[i]&lt;capa[i] &amp;&amp; dist[v]==dist[x]+1 &amp;&amp; (tmp=dinic_dfs(v,min(exp,capa[i]-flow[i])))&gt;0)<br>    {<br>      flow[i]+=tmp;<br>      flow[i^1]-=tmp;<br>      return tmp;<br>    }<br>  }<br>  return 0;<br>}<br>int dinic_flow()<br>{<br>  int result=0;<br>  while (dinic_bfs())<br>  {<br>    for (int i=0;i&lt;node;i++) work[i]=head[i];<br>    while (1)<br>    {<br>      int delta=dinic_dfs(src,oo);<br>      if (delta==0) break;<br>      result+=delta;<br>    }<br>  }<br>  return result;<br>}<br> <br>class NowhereLand<br>{<br>public:<br>  bool G[60][60];<br>  int placeGuards(vector &lt;string&gt; cities, int k, vector &lt;string&gt; guards, vector &lt;string&gt; agencies)<br>  {<br>    int n=SIZE(cities);<br>    for (int i=0;i&lt;n;i++) for (int j=0;j&lt;n;j++) G[i][j]=(cities[i][j]=='1');<br>    int R=0;<br>    for (int p=0;p&lt;k;p++)<br>    {<br>      bool E[60],S[60];<br>      memset(E,false,sizeof(E));<br>      memset(S,false,sizeof(S));<br>      for (int i=0;i&lt;n;i++)<br>      {<br>        istringstream sin(guards[i]);<br>        for (int v;sin&gt;&gt;v;)<br>          if (v==p)<br>            E[i]=true;<br>      }<br>      for (int i=0;i&lt;n;i++)<br>      {<br>        istringstream sin(agencies[i]);<br>        for (int v;sin&gt;&gt;v;)<br>          if (v==p)<br>            S[i]=true;<br>      }<br>      init(n+n+2,n+n,n+n+1);<br>      for (int i=0;i&lt;n;i++)<br>        addedge(i,i+n,1000000,1000000);<br>      for (int i=0;i&lt;n;i++)<br>        for (int j=i+1;j&lt;n;j++)<br>          if (G[i][j])<br>          {<br>            addedge(i+n,j,1,1);<br>            addedge(i,j+n,1,1);<br>          }<br>      for (int i=0;i&lt;n;i++)<br>        if (E[i])<br>          addedge(src,i,1000000,0);<br>      for (int i=0;i&lt;n;i++)<br>        if (!E[i] &amp;&amp; !S[i])<br>          addedge(i+n,dest,1000000,0);<br>      int tmp=dinic_flow();<br>      R+=tmp;<br>    }<br>    return R/2;<br>  }<br>};<br></td>