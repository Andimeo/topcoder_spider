<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;vector&gt;<br>#include &lt;list&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;deque&gt;<br>#include &lt;queue&gt;<br>#include &lt;stack&gt;<br>#include &lt;bitset&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;functional&gt;<br>#include &lt;numeric&gt;<br>#include &lt;utility&gt;<br>#include &lt;sstream&gt;<br>#include &lt;iostream&gt;<br>#include &lt;iomanip&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;ctime&gt;<br> <br>#define FOR(i,a,b) for(int i=(int)(a); i&lt;(int)(b); ++i)<br>#define FORD(i,a,b) for(int i=(int)(a-1); i&gt;=(int)(b); --i)<br>#define MP make_pair<br>#define PB push_back<br>#define FI first<br>#define SE second<br>#define SI(a) (int)(a.size())<br>#define LEN(a) (int)(a.length())<br> <br>typedef long long LL;<br>typedef long double LD;<br> <br>using namespace std;<br> <br>class PackageDelivery {<br>public:<br>  long long minimalCost(vector &lt;int&gt;, int, int, int, int);<br>  vector&lt;int&gt; tab;<br>  int N;<br>  LL walk, fuel, park, cap;<br>  LL dp[52][52][52];<br>  LL go(int, int, int);<br>};<br> <br>const LL INF = 4000000000000000000LL;<br> <br>LL PackageDelivery::go(int pos, int last, int truck) {<br>  LL &amp;res = dp[pos][last][truck];<br>  if(res&gt;=0)<br>    return res;<br>  if(last==N)<br>    return res = 0;<br>  //cout &lt;&lt; pos &lt;&lt; " " &lt;&lt; last &lt;&lt; " " &lt;&lt; truck &lt;&lt; "\n";<br>    <br>  res = INF;<br>  if(truck!=cap)<br>    res &lt;?= go(0,last,cap) + tab[pos]*fuel;<br>  if(truck&gt;0) {<br>    res &lt;?= go(pos,last+1,truck-1) + abs(tab[last]-tab[pos])*walk;<br>    FOR(i,pos+1,N)<br>      res &lt;?= go(i,last,truck) + abs(tab[i]-tab[pos])*fuel + park;<br>  }<br>  return res;<br>}<br> <br>long long PackageDelivery::minimalCost(vector &lt;int&gt; pack, int walkCost, int fuelCost, int parkingCost, int truckCapacity) {<br> <br>  tab = pack;<br>  tab.PB(0);<br>  sort(tab.begin(), tab.end());<br>  N = SI(tab);<br>  walk=walkCost; fuel=fuelCost; park=parkingCost; cap=truckCapacity;<br>  memset(dp,-1,sizeof(dp));<br>  <br>  return go(0,0,cap);<br>  <br>}<br> <br> <br>//Powered by [KawigiEdit] 2.0!<br></td>