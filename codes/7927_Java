<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>import java.io.*;<br>import java.text.*;<br>import java.math.*;<br>import java.util.regex.*;<br>import static java.lang.Math.*;<br>import static java.util.Arrays.*;<br>import static java.util.Collections.*;<br>import static java.lang.Integer.*;<br>import static java.lang.Long.*;<br>public class PackageDelivery {<br>  public long minimalCost(int[] packages, int walkCost, int fuelCost, int parkingCost, int truckCapacity) {<br>    sort(packages);<br>    dests = new long[packages.length];<br>    for(int i = 0; i &lt; dests.length; i++){<br>      dests[i] = packages[i];<br>    }<br>    this.fuelCost = fuelCost;<br>    this.parkingCost = parkingCost;<br>    this.walkCost = walkCost;<br>    truckCap = truckCapacity;<br>    long ret = Long.MAX_VALUE;<br>    for(int i = 0; i &lt; dests.length; i++){<br>      ret = min(ret, fuelCost*dests[i] + parkingCost + doit(0, i, truckCap));<br>      <br>      long acc = 0;<br>      for(int j = 0; j &lt; dests.length; j++){<br>        acc += walkCost * dests[j];<br>        ret = min(ret, acc + fuelCost*dests[i] + parkingCost + doit(j+1, i, truckCap));<br>      }<br>      ret = min(ret, acc);<br>    }<br>  <br>    <br>    return ret;<br>  }<br>  long fuelCost, parkingCost, walkCost;<br>  int truckCap;<br>  long[] dests;<br>  long[][][] memo = new long[60][60][60];<br>  long doit(int at, int carAt, int packages){<br>    if(memo[at][carAt][packages] != 0) return memo[at][carAt][packages]-1;<br>    long ret = doit2(at, carAt, packages);<br>    memo[at][carAt][packages] = ret+1;<br>  //  System.out.printf("doit(%d,%d,%d) returns %d%n",at, carAt, packages, ret);<br>    return ret;<br>  }<br>  long doit2(int at, int carAt, int packages){<br>    <br>    if(at == dests.length) return 0;<br>    long ret = Long.MAX_VALUE/2;<br>    if(packages != truckCap){<br>      for(int i = at; i &lt; dests.length; i++){<br>//        if(at == 3 &amp;&amp; carAt == 1 &amp;&amp; packages == 0) System.out.println("Trying to %d for an additional cost of fuelCost*%d + parkingCost + %d%n",i,dests[at]+dests[i])<br>        ret = min(ret, fuelCost*(dests[carAt] + dests[i]) + parkingCost + doit(at, i, truckCap));<br>      }<br>    }<br>    if(packages == 0) return ret;<br>    ret = min(ret, walkCost*abs(dests[at] - dests[carAt]) + doit(at+1, carAt, packages-1));<br>    <br>    for(int i = carAt+1; i &lt; dests.length; i++){<br>      ret = min(ret, fuelCost*(dests[i]-dests[carAt]) + parkingCost + doit(at, i, packages));<br>    }<br>    return ret;<br>  }<br> <br>}<br> <br>// Powered by PopsEdit<br>// Powered by CodeProcessor<br> <br>// Powered by PopsEdit<br>// Powered by CodeProcessor<br></td>