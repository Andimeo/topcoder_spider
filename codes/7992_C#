<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br><br>public class BattleDice {<br>    int[] best;<br>    int bp;<br>    int bq;<br>    int[] cur;<br>    int n;<br>    int range;<br>    int[] die1;<br>    int[] die2;<br><br>  public int[] die3(int[] die1, int[] die2, int range) {<br>        best = null;<br>        n = die1.Length;<br>        bp = -1;<br>        bq = -1;<br>        Array.Sort(die1);<br>        Array.Sort(die2);<br>        this.die1 = die1;<br>        this.die2 = die2;<br>        cur = new int[n];<br>        this.range = range;<br>        rec(0, 1);<br>        return best;<br>  }<br><br>    private void rec(int at, int min)<br>    {<br>        if (at &gt;= n)<br>        {<br>            check();<br>            return;<br>        }<br>        for (int x = min; x &lt;= range; ++x)<br>        {<br>            cur[at] = x;<br>            rec(at + 1, x);<br>        }<br>    }<br><br>    void eval(int[] a1, int[] a2, out int p, out int q)<br>    {<br>        int p1 = 0;<br>        int p2 = 0;<br>        int c1 = a1[0];<br>        int c2 = a2[0];<br>        int na = 0;<br>        int nb = 0;<br>        while (p1 &lt; a1.Length || p2 &lt; a2.Length)<br>        {<br>            if (c1 &lt; c2)<br>            {<br>                ++p1;<br>                na += (a2.Length - p2);<br>                if (p1 == a1.Length)<br>                    c1 = range + 1;<br>                else<br>                    c1 = a1[p1];<br>            }<br>            else if (c1 &gt; c2)<br>            {<br>                ++p2;<br>                if (p2 == a2.Length)<br>                    c2 = range + 1;<br>                else<br>                    c2 = a2[p2];<br>            }<br>            else<br>            {<br>                int r1 = 0;<br>                int r2 = 0;<br>                while (p1 &lt; a1.Length &amp;&amp; a1[p1] == c1)<br>                {<br>                    ++p1;<br>                    ++r1;<br>                }<br>                while (p2 &lt; a2.Length &amp;&amp; a2[p2] == c2)<br>                {<br>                    ++p2;<br>                    ++r2;<br>                }<br>                na += r1 * (a2.Length - p2);<br>                nb += r1 * r2;<br>                if (p1 == a1.Length)<br>                    c1 = range + 1;<br>                else<br>                    c1 = a1[p1];<br>                if (p2 == a2.Length)<br>                    c2 = range + 1;<br>                else<br>                    c2 = a2[p2];<br>            }<br>        }<br>        p = na;<br>        q = a1.Length * a2.Length - nb;<br>    }<br><br>    private void check()<br>    {<br>        int[][] w = new int[3][];<br>        w[0] = die1;<br>        w[1] = die2;<br>        w[2] = cur;<br>        int cp = -1;<br>        int cq = -1;<br>        int p01;<br>        int q01;<br>        int p02;<br>        int q02;<br>        int p12;<br>        int q12;<br>        eval(w[0], w[1], out p01, out q01);<br>        eval(w[0], w[2], out p02, out q02);<br>        eval(w[1], w[2], out p12, out q12);<br>        for (int i = 0; i &lt; 3; ++i)<br>        {<br>            int p1;<br>            int q1;<br>            int p2;<br>            int q2;<br>            if (i == 0)<br>            {<br>                p1 = p01;<br>                q1 = q01;<br>                p2 = p02;<br>                q2 = q02;<br>            }<br>            else if (i == 1)<br>            {<br>                p1 = p12;<br>                q1 = q12;<br>                p2 = q01 - p01;<br>                q2 = q01;<br>            }<br>            else<br>            {<br>                p1 = q12 - p12;<br>                q1 = q12;<br>                p2 = q02 - p02;<br>                q2 = q02;<br>            }<br>            if (p2 * q1 &gt; p1 * q2)<br>            {<br>                p1 = p2;<br>                q1 = q2;<br>            }<br>            if (cq &lt; 0 || p1 * cq &lt; q1 * cp)<br>            {<br>                cp = p1;<br>                cq = q1;<br>            }<br>        }<br>        if (bq &lt; 0 || cp * bq &gt; cq * bp)<br>        {<br>            bp = cp;<br>            bq = cq;<br>            best = (int[]) cur.Clone();<br>        }<br>    }<br><br><br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003] [modified for C# by Petr]<br>// Powered by CodeProcessor<br></td>