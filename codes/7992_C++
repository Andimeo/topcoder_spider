<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;stdlib.h&gt;<br>#include &lt;stdio.h&gt;<br>#include &lt;iostream&gt;<br>#include &lt;sstream&gt;<br>#include &lt;string&gt;<br>#include &lt;vector&gt;<br>using namespace std;<br><br>class BattleDice<br>{<br>int dice[3][10];<br>int bestAns[10];<br>int N, R;<br>double s01, s10, s02, s20, s12, s21;<br>double bestScore;<br>static const double MIN = 1e-9;<br><br>double score(int i1, int i2)<br>{<br>//  printf("Score\n");<br>  int i, j;<br>  int s = 0, t = 0;<br>  for (i = 0; i &lt; N; i++)<br>    for (j = 0; j &lt; N; j++)<br>    {<br>      if (dice[i1][i] != dice[i2][j])<br>      {<br>        t++;<br>        if (dice[i1][i] &gt; dice[i2][j])<br>          s++;<br>      }<br>    }<br>//  printf("Score finished\n");<br>  return s*1.0/t;<br>}<br><br>double max(double a, double b)<br>{<br>  if (a &gt; b) return a;<br>  return b;<br>}<br><br>void search(int curPos)<br>{<br>//  printf("%d\n", curPos);<br>  if (curPos == N)<br>  {<br>    s02 = score(0, 2);<br>    s12 = score(1, 2);<br>    s20 = 1 - s02;<br>    s21 = 1 - s12;<br>    double curBest = max(s02, s12);<br>    if (curBest &gt; max(s10, s20))<br>    {<br>      curBest = max(s10, s20);<br>    }<br>    if (curBest &gt; max(s21, s01))<br>    {<br>      curBest = max(s21, s01);<br>    }<br>    if (curBest &gt; bestScore + MIN)<br>    {<br>      bestScore = curBest;<br>      int i;<br>      for (i = 0; i &lt; N; i++)<br>        bestAns[i] = dice[2][i];<br>    }<br>    return;<br>  }<br>  int min = 1;<br>  if (curPos != 0)<br>    min = dice[2][curPos-1];<br>  int i;<br>  for (i = min; i &lt;= R; i++)<br>  {<br>    dice[2][curPos] = i;<br>    search(curPos+1);<br>  }<br>}<br>public:<br>vector &lt;int&gt; die3(vector &lt;int&gt; die1, vector &lt;int&gt; die2, int range)<br>{<br>  N = die1.size();<br>  R = range;<br>//  printf("%d %d\n", N, R);<br>  int i;<br>  for (i = 0; i &lt; N; i++)<br>  {<br>    dice[0][i] = die1[i];<br>    dice[1][i] = die2[i];<br>  }<br>  s01 = score(0, 1);<br>  s10 = 1 - s01;<br>  bestScore = -1.0;<br>  search(0);<br>  vector&lt;int&gt; result = vector&lt;int&gt; (N);<br>  for (i = 0; i &lt; N; i++)<br>    result[i] = bestAns[i];<br>  return result;<br>}<br><br><br>};<br><br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003]<br>// Powered by CodeProcessor<br></td>