<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>import java.util.regex.*;<br>import java.text.*;<br>import java.math.*;<br>import java.awt.geom.*;<br><br>public class BattleDice<br>{<br>  private int[] die1;<br>  private int[] die2;<br>  private int range;<br>  private int n;<br><br>  class Rational<br>  {<br>    int p, q;<br><br>    public boolean less(Rational r)<br>    {<br>      return p * r.q &lt; q * r.p;<br>    }<br>    public void set(Rational r)<br>    {<br>      p = r.p;<br>      q = r.q;<br>    }<br>    public void flip()<br>    {<br>      p = q - p;<br>    }<br>    public void min(Rational r)<br>    {<br>      if (!less(r))<br>      {<br>        set(r);<br>      }<br>    }<br>    public void max(Rational r)<br>    {<br>      if (less(r))<br>      {<br>        set(r);<br>      }<br>    }<br>  }<br><br>  public void get(int[] p1, int[] p2, Rational r)<br>  {<br>    int plus = 0;<br>    int minus = 0;<br>    for (int i = 0; i &lt; n; i++)<br>    {<br>      for (int j = 0; j &lt; n; j++)<br>      {<br>        if (p1[i] &gt; p2[j])<br>        {<br>          plus++;<br>        } else if (p1[i] &lt; p2[j])<br>        {<br>          minus++;<br>        }<br>      }<br>    }<br>    r.p = plus;<br>    r.q = plus + minus;<br>  }<br><br>  Rational d12;<br>  int[] die1plus;<br>  int[] die1minus;<br>  int[] die2plus;<br>  int[] die2minus;<br><br>  private void preCalc()<br>  {<br>    die1plus = new int[range];<br>    die1minus = new int[range];<br>    die2plus = new int[range];<br>    die2minus = new int[range];<br>    for (int i = 0; i &lt; range; i++)<br>    {<br>      for (int j = 0; j &lt; n; j++)<br>      {<br>        if (i &gt; die1[j])<br>        {<br>          die1plus[i]++;<br>        } else if (i &lt; die1[j])<br>        {<br>          die1minus[i]++;<br>        }<br>        if (i &gt; die2[j])<br>        {<br>          die2plus[i]++;<br>        } else if (i &lt; die2[j])<br>        {<br>          die2minus[i]++;<br>        }<br>      }<br>    }<br>  }<br><br>  Rational opt;<br>  int[] optvalue;<br>  int[] curvalue;<br>  Rational t1, t2, t3;<br><br>  private void rec(int minNumber, int curSide, Rational r1, Rational r2)<br>  {<br>    if (curSide == n)<br>    {<br>      t1.set(r1);<br>      d12.flip();<br>      t1.max(d12);<br>      d12.flip();<br>      t2.set(r2);<br>      t2.max(d12);<br>      r1.flip();<br>      r2.flip();<br>      t3.set(r1);<br>      t3.max(r2);<br>      r1.flip();<br>      r2.flip();<br>      t1.min(t2);<br>      t1.min(t3);<br>      if (opt.less(t1))<br>      {<br>        opt.set(t1);<br>        optvalue = curvalue.clone();<br>      }<br>      return;<br>    }<br>    for (int i = minNumber; i &lt; range; i++)<br>    {<br>      curvalue[curSide] = i;<br>      r1.p += die1plus[i];<br>      r1.q += die1plus[i] + die1minus[i];<br>      r2.p += die2plus[i];<br>      r2.q += die2plus[i] + die2minus[i];<br>      rec(i, curSide + 1, r1, r2);<br>      r1.p -= die1plus[i];<br>      r1.q -= die1plus[i] + die1minus[i];<br>      r2.p -= die2plus[i];<br>      r2.q -= die2plus[i] + die2minus[i];<br>    }<br>  }<br>  public int[] die3(int[] die1, int[] die2, int range)<br>  {<br>    n = die1.length;<br>    this.die1 = die1.clone();<br>    this.die2 = die2.clone();<br>    for (int i = 0; i &lt; n; i++)<br>    {<br>      this.die1[i]--;<br>      this.die2[i]--;<br>    }<br>    this.range = range;<br>    d12 = new Rational();<br>    get(die1, die2, d12);<br>    preCalc();<br>    opt = new Rational();<br>    opt.q = 1;<br>    opt.p = -1;<br>    optvalue = new int[n];<br>    curvalue = new int[n];<br>    t1 = new Rational();<br>    t2 = new Rational();<br>    t3 = new Rational();<br>    rec(0, 0, new Rational(), new Rational());<br>    for (int i = 0; i &lt; n; i++)<br>    {<br>      optvalue[i]++;<br>    }<br>    return optvalue;<br>  }<br>}<br></td>