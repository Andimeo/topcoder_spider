<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections;<br>using System.Collections.Generic;<br>using System.Text;<br>using System.Text.RegularExpressions;<br> <br>public class GameOfEight<br>{<br>    class State<br>    {<br>        public State(string[] vs,int cc)<br>        {<br>            inner = "";<br>            foreach (string s in vs)<br>                inner += s;<br>            cost = cc;<br>        }<br>        State(string s,int cc)<br>        {<br>            inner = s;<br>            cost = cc;<br>        }<br>        void XSwap(ref char a, ref char b)<br>        {<br>            char c = a;<br>            a = b;<br>            b = c;<br>        }<br>        public List&lt;State&gt; NewState()<br>        {<br>            int pos = 0;<br>            for (int i = 0; i &lt; 9; ++i)<br>            {<br>                if ('.' == inner[i])<br>                {<br>                    pos = i;<br>                    break;<br>                }<br>            }<br>            List&lt;State&gt; ls = new List&lt;State&gt;();<br>            foreach (int q in swpos[pos])<br>            {<br>                char[] now = inner.ToCharArray();<br>                XSwap(ref now[q], ref now[pos]);<br>                string ks = new string(now);<br>                ls.Add(new State(ks, cost + 1));<br>            }<br>            return ls;<br>        }<br>        public override bool Equals(object obj)<br>        {<br>            State rhs = (State)obj;<br>            return this.inner == rhs.inner;<br>        }<br>        public string inner;<br>        public int cost;<br>        static State()<br>        {<br>            for(int i=0;i&lt;9;++i)<br>                swpos.Add(i,new List&lt;int&gt;());<br> <br>            swpos[0].Add(1);<br>            swpos[0].Add(3);<br>            //~<br>            swpos[1].Add(0);<br>            swpos[1].Add(2);<br>            swpos[1].Add(4);<br>            //~<br>            swpos[2].Add(1);<br>            swpos[2].Add(5);<br>            //~<br>            swpos[3].Add(0);<br>            swpos[3].Add(4);<br>            swpos[3].Add(6);<br>            //~<br>            swpos[4].Add(1);<br>            swpos[4].Add(3);<br>            swpos[4].Add(5);<br>            swpos[4].Add(7);<br>            //~<br>            swpos[5].Add(2);<br>            swpos[5].Add(4);<br>            swpos[5].Add(8);<br>            //~<br>            swpos[6].Add(3);<br>            swpos[6].Add(7);<br>            //~<br>            swpos[7].Add(4);<br>            swpos[7].Add(6);<br>            swpos[7].Add(8);<br>            //~<br>            swpos[8].Add(5);<br>            swpos[8].Add(7);<br>        }<br>        static Dictionary&lt;int, List&lt;int&gt;&gt; swpos = new Dictionary&lt;int, List&lt;int&gt;&gt;();<br>    }<br> <br>    public int fewestMoves(string[] board)<br>    {<br>        Dictionary&lt;string, bool&gt; visited = new Dictionary&lt;string, bool&gt;();<br>        string[] obj ={ "123", "456", "78." };<br>        State goal = new State(obj, int.MaxValue);<br>        Queue&lt;State&gt; qs = new Queue&lt;State&gt;();<br>        State first = new State(board, 0);<br>        qs.Enqueue(first);<br>        visited.Add(first.inner, true);<br>        int ans = -1;<br>        while (qs.Count&gt;0)<br>        {<br>            State now = qs.Dequeue();<br>            if (goal.Equals(now))<br>            {<br>                ans = now.cost;<br>                break;<br>            }<br>            List&lt;State&gt; nx = now.NewState();<br>            foreach (State newState in nx)<br>            {<br>                if (!visited.ContainsKey(newState.inner))<br>                {<br>                    visited.Add(newState.inner, true);<br>                    qs.Enqueue(newState);<br>                }<br>            }<br>        }<br>        return ans;<br>    }<br>}<br> <br>// Powered by PopsEdit<br>// Powered by TZTester 1.01 [25-Feb-2003] [modified for C# by Petr]<br>// Powered by CodeProcessor<br></td>