<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections.Generic;<br><br>public class ReverseDistance {<br>  long[] p10;<br>  <br>  class State<br>  {<br>    public long diff;<br>    public int l;<br>    public bool sz;<br><br>    public State(long diff, int l, bool sz)<br>    {<br>      this.diff = diff;<br>      this.l = l;<br>      this.sz = sz;<br>    }<br><br>    public override int GetHashCode()<br>    {<br>      int result = (int) (diff * 137);<br>      result = 29 * result + l;<br>      result = 29 * result + sz.GetHashCode();<br>      return result;<br>    }<br><br>    public override bool Equals(object obj)<br>    {<br>      State state = (State) obj;<br>      if (diff != state.diff) return false;<br>      if (l != state.l) return false;<br>      if (!Equals(sz, state.sz)) return false;<br>      return true;<br>    }<br>  }<br>  <br>  Dictionary&lt;State, long&gt; res;<br>  <br>  public string find(int difference) {<br>    res = new Dictionary&lt;State, long&gt;();<br>    p10 = new long[19];<br>    p10[0] = 1;<br>    for (int i = 1; i &lt; 19; ++i)<br>      p10[i] = 10 * p10[i - 1];<br>    for (int len = 1; len &lt;= 17; ++len)<br>    {<br>      long z = get(difference, len, true);<br>      if (z &gt;= 0)<br>        return z.ToString();<br>    }<br>    return "NONE";<br>  }<br><br>  private long get(long difference, int len, bool skipZero)<br>  {<br>    if (len &lt;= 1)<br>    {<br>      if (difference == 0)<br>        return (len == 0 || !skipZero) ? 0 : 1;<br>      else<br>        return -1;<br>    }<br>    if (difference &gt; p10[len] || difference &lt; -p10[len])<br>      return -1;<br>    State cur = new State(difference, len, skipZero);<br>    if (res.ContainsKey(cur))<br>      return res[cur];<br>    long r = -1;<br>    for (int first = (skipZero ? 1 : 0); first &lt; 10; ++first)<br>      for (int last = 0; last &lt; 10; ++last)<br>      {<br>        long nd = difference - (first - last) * p10[len - 1] - (last - first);<br>        if (nd % 10 != 0)<br>          continue;<br>        nd /= 10;<br>        long prev = get(nd, len - 2, false);<br>        if (prev &gt;= 0)<br>        {<br>          long c = first * p10[len - 1] + prev * 10 + last;<br>          if (r &lt; 0 || c &lt; r)<br>            r = c;<br>        }<br>      }<br>    res[cur] = r;<br>    return r;<br>  }<br><br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003] [modified for C# by Petr]<br>// Powered by CodeProcessor<br></td>