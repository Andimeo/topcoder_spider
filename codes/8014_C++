<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;vector&gt;<br>#include &lt;list&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;deque&gt;<br>#include &lt;stack&gt;<br>#include &lt;bitset&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;functional&gt;<br>#include &lt;numeric&gt;<br>#include &lt;utility&gt;<br>#include &lt;sstream&gt;<br>#include &lt;iostream&gt;<br>#include &lt;iomanip&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;ctime&gt;<br> <br>using namespace std;<br> <br>class Election {<br>public:<br>  int votesNeeded(vector &lt;int&gt;, vector &lt;int&gt;);<br>};<br> <br> <br>struct Candidate{<br>  int votes;<br>  int index;<br>  int exp;<br>  Candidate(){<br>    votes = -1;<br>  }<br>  Candidate(int a,int b,int c){<br>    votes = a;<br>    index = b;<br>    exp = c;  <br>  }<br>  bool operator&lt;(const Candidate&amp; c)const{<br>    if(votes != c.votes){<br>      return votes &gt; c.votes;<br>    }<br>    return index &lt; c.index;<br>  }<br>};<br> <br>int Election::votesNeeded(vector &lt;int&gt; votes, vector &lt;int&gt; wishList) {<br>  int n = votes.size();<br>  vector&lt;Candidate&gt; vc(n);<br>  vector&lt;Candidate&gt; un;<br>  for(int i=0;i &lt; n;i++){<br>    Candidate t(votes[i], i, wishList[i]);<br>    if(wishList[i] != -1){<br>      vc[wishList[i]] = t;  <br>    }else{<br>      un.push_back(t);<br>    }<br>  }<br>  sort(un.begin(), un.end());<br>  for(int i=0,j=0;i &lt; n;i++){<br>    if(vc[i].votes == -1){<br>      vc[i] = un[j++];<br>    }<br>  }<br>  int r = 0;<br>  for(int i=n-2;i &gt;= 0;i--){<br>    if(!(vc[i] &lt; vc[i+1])){<br>      int dlta = vc[i+1].votes - vc[i].votes;<br>      vc[i].votes += dlta;<br>      r += dlta;<br>      while(!(vc[i] &lt; vc[i+1])){<br>        vc[i].votes++;<br>        r++;  <br>      }<br>    }<br>  }<br>  return r;<br>}<br></td>