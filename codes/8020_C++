<td class="problemText" colspan="8" valign="middle" align="left">
            // Cry as challenge phase is passing by<br><br>#include &lt;algorithm&gt;<br>#include &lt;functional&gt;<br><br>#include &lt;cmath&gt;<br>#include &lt;cctype&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cstring&gt;<br><br>#include &lt;vector&gt;<br>#include &lt;string&gt;<br>#include &lt;sstream&gt;<br>#include &lt;iostream&gt;<br><br>using namespace std;<br><br>#define FORC(it,v) for( __typeof((v).begin()) it = (v).begin(); it != (v).end(); ++it )<br><br>long long mini;<br><br>vector&lt; long long &gt; X, Y;<br><br>template&lt; typename T &gt; inline T myabs( const T &amp;x ) { if( x &lt; 0 ) return -x; return x; }<br><br>void probaj( long long y )<br>{<br>    long long maks = 0;<br>    int n = X.size();<br><br>    for( int i = 0; i &lt; n; ++i )<br>        for( int j = i+1; j &lt; n; ++j ) {<br>            if( X[i] == X[j] )<br>                maks &gt;?= myabs( Y[i]-Y[j] );<br>            else<br>                maks &gt;?= myabs( X[i]-X[j] ) + myabs( y-Y[i] ) + myabs( y-Y[j] );<br>        }<br><br>    mini &lt;?= maks;<br>}<br><br>class MonkeyTreeDistance {<br>public:<br>    string minimalMaximumDistance( vector &lt;int&gt; x, vector &lt;int&gt; y ) {<br>        X.clear();<br>        Y.clear();<br><br>        FORC( it, x ) X.push_back( *it );<br>        FORC( it, y ) Y.push_back( *it );<br><br>        vector&lt; long long &gt; Rez = Y;<br><br>        int n = X.size();<br><br>        for( int i = 0; i &lt; n; ++i )<br>            for( int j = i+1; j &lt; n; ++j ) {<br>                Rez.push_back( ( Y[i] + Y[j] ) / 2 );<br>                Rez.push_back( ( Y[i] + Y[j] ) / 2 - 1 );<br>                Rez.push_back( ( Y[i] + Y[j] ) / 2 + 1 );<br>            }<br><br>        sort( Rez.begin(), Rez.end() );<br>        Rez.resize( unique( Rez.begin(), Rez.end() ) - Rez.begin() );<br><br>        mini = 9223372036854775807LL;<br><br>        FORC( it, Rez ) probaj( *it );<br><br>        char buffer[ 1000 ];<br>        sprintf( buffer, "%lld", mini );<br><br>        return buffer;<br>    }<br>};<br><br><br><br><br><br><br><br><br><br>// Powered by FileEdit<br>// Powered by moj 3.0 beta 11 [modified TZTester]<br>// Powered by CodeProcessor<br></td>