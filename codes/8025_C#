<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections.Generic;<br><br>public class WeighingScale {<br>  public int[] count(string[] measures, int A, int B) {<br>    int n = measures.Length;<br>    int[,] res = new int[n, n];<br>    for (int i = 0; i &lt; n; ++i)<br>      for (int j = 0; j &lt; n; ++j)<br>        if (i == A || i == B || j == A || j == B || i == j)<br>          res[i, j] = -1;<br>    <br>    char[,] know = new char[n, n];<br>    for (int i = 0; i &lt; n; ++i)<br>      for (int j = 0; j &lt; n; ++j)<br>        know[i, j] = measures[i][j];<br>    for (int i = 0; i &lt; n; ++i)<br>      know[i, i] = '=';<br>    for (int k = 0; k &lt; n; ++k)<br>      for (int i = 0; i &lt; n; ++i)<br>        for (int j = 0; j &lt; n; ++j)<br>          if (know[i, k] == '=' &amp;&amp; know[k, j] == '=')<br>            know[i, j] = '=';<br>    int[] repr = new int[n];<br>    for (int i = 0; i &lt; n; ++i)<br>    {<br>      for (int j = 0; j &lt; n; ++j)<br>        if (know[i, j] == '=')<br>        {<br>          repr[i] = j;<br>          break;<br>        }<br>    }<br>    for (int i = 0; i &lt; n; ++i)<br>      for (int j = 0; j &lt; n; ++j)<br>        if (know[i, j] != '?')<br>          know[repr[i], repr[j]] = know[i, j];<br>    for (int i = 0; i &lt; n; ++i)<br>      for (int j = 0; j &lt; n; ++j)<br>        know[i, j] = know[repr[i], repr[j]];<br>    <br>    List&lt;int&gt; ts = new List&lt;int&gt;();<br>    bool[] used = new bool[n];<br>    for (int i = 0; i &lt; n; ++i)<br>    {<br>      for (int j = 0; j &lt; n; ++j)<br>        if (!used[j])<br>        {<br>          bool ok = true;<br>          for (int k = 0; k &lt; n; ++k)<br>            if (!used[k] &amp;&amp; know[k, j] == '+')<br>              ok = false;<br>          if (ok)<br>          {<br>            ts.Add(j);<br>            used[j] = true;<br>            break;<br>          }<br>        }<br>    }<br>    for (int wA = 1; wA &lt;= 3; ++wA)<br>      for (int wB = 1; wB &lt;= 3; ++wB)<br>        for (int step = 0; step &lt; 2; ++step)<br>        {<br>          int[] w1 = new int[n];<br>          for (int ii = 0; ii &lt; n; ++ii)<br>          {<br>            int i = ts[step == 0 ? ii : n - 1 - ii];<br>            if (know[i, A] == '=')<br>              w1[i] = wA;<br>            else if (know[i, B] == '=')<br>              w1[i] = wB;<br>            else<br>            {<br>              int can = step == 0 ? 3 : 1;<br>              for (int jj = 0; jj &lt; ii; ++jj)<br>              {<br>                int j = ts[step == 0 ? jj : n - 1 - jj];<br>                if (step == 0)<br>                {<br>                  if (know[j, i] == '+')<br>                    can = Math.Min(can, w1[j] - 1);<br>                }<br>                else<br>                {<br>                  if (know[j, i] == '-')<br>                    can = Math.Max(can, w1[j] + 1);<br>                }<br>              }<br>              if (can &lt; 1)<br>                can = 1;<br>              if (can &gt; 3)<br>                can = 3;<br>              w1[i] = can;<br>            }<br>          }<br>          bool ok = true;<br>          for (int i = 0; i &lt; n; ++i)<br>            for (int j = 0; j &lt; n; ++j)<br>              if (know[i, j] != '?')<br>              {<br>                char r = w1[i] &lt; w1[j] ? '-' : w1[i] &gt; w1[j] ? '+' : '=';<br>                if (know[i, j] != r)<br>                  ok = false;<br>              }<br>          if (ok)<br>          {<br>            for (int i = 0; i &lt; n; ++i)<br>              for (int j = 0; j &lt; n; ++j)<br>                if (res[i, j] &gt;= 0)<br>                {<br>                  int z = w1[i] + w1[j] - w1[A] - w1[B];<br>                  int cr = z &lt; 0 ? 1 : z &gt; 0 ? 3 : 2;<br>                  if (res[i, j] == 0)<br>                    res[i, j] = cr;<br>                  else if (res[i, j] != cr)<br>                    res[i, j] = -1;<br>                }<br>          }<br>        }<br>    <br>    int[] ret = new int[3];<br>    for (int i = 0; i &lt; n; ++i)<br>      for (int j = i + 1; j &lt; n; ++j)<br>        if (res[i, j] &gt; 0)<br>          ++ret[res[i, j] - 1];<br>    return ret;<br>  }<br><br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003] [modified for C# by Petr]<br>// Powered by CodeProcessor<br></td>