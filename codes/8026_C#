<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections;<br>    public class TakeSubstringGame<br>    {<br>        public int winningMove(int n)<br>        {<br>            int len;<br>            int[] sl = new int[100];<br>            BitArray ba = new BitArray(1000002,false);<br>            ba[0] = true;<br>            int[] dp = new int[1000002];<br>            for (int i = 0; i &lt; 10; i++)<br>                dp[i] = -1;<br>            len = 2;<br>            for (int i = 10; i &lt;= 1000000;i++)<br>            {<br>                if (i == (int)Math.Pow(10.0, len * 1.0))<br>                    len++;<br>                int[] t = new int[len];<br>                int p = i;<br>                for (int j = 0; j &lt; len; j++)<br>                {<br>                    t[j] = p % 10;<br>                    p /= 10;<br>                }<br>                int cnt = 0;<br>                for (int j = len - 1; j &gt;= 0; j--)<br>                {<br>                    p = 0;<br>                    for (int k = j; k &gt;= 0; k--)<br>                    {<br>                        p = p * 10 + t[k];<br>                        sl[cnt++] = p;<br>                    }<br>                }<br>                Array.Sort(sl, 0, cnt);<br>                for (int j = 0; j &lt; cnt; j++)<br>                {<br>                    if (sl[j] == 0)<br>                        continue;<br>                    if (ba[i - sl[j]] == false)<br>                    {<br>                        dp[i] = sl[j];<br>                        ba[i] = true;<br>                        break;<br>                    }<br>                }<br>                if (!ba[i])<br>                    dp[i] = -1;<br>            }<br>            return dp[n];<br>        }<br>    }<br></td>