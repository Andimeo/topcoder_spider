<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;string&gt;<br>#include &lt;cstring&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;vector&gt;<br>#include &lt;set&gt;<br>#include &lt;map&gt;<br>#include &lt;queue&gt;<br><br>using namespace std;<br><br>#define f first<br>#define s second<br>#define pb push_back<br>#define mp make_pair<br>#define ALL(x) (x).begin(), (x).end()<br>#define sz size()<br>#define INF 0x3f3f3f3f<br><br>int A[40][4][4];<br><br>class BinaryPowerBishop {<br>  public:<br>    int reach(int x, int y, int msk) {<br>        int i, t0, t1, tt0, tt1, a, b, aa, bb, j, k, v[4];<br><br>        if (x &lt; 0) x *= -1;<br>        if (y &lt; 0) y *= -1;<br>        if (x == 0 &amp;&amp; y == 0) return 0;<br>        <br>        memset(A, 0x3f, sizeof(A));<br>        A[0][0][0] = 0;<br>        for (i = 0; i &lt; 31; ++i)<br>        {<br>            a = (x&amp;(1&lt;&lt;i)) &gt; 0;<br>            b = (y&amp;(1&lt;&lt;i)) &gt; 0;<br>            for (t0 = 0; t0 &lt; 2; ++t0)<br>                for (t1 = 0; t1 &lt; 2; ++t1)<br>                {<br>                    if (A[i][t0][t1] == INF) continue;<br>                    aa = -t0; tt0 = 0;<br>                    if (aa &lt; 0) aa += 2, tt0 = 1;<br>                    bb = -t1; tt1 = 0;<br>                    if (bb &lt; 0) bb += 2, tt1 = 1;<br>                    if (aa == a &amp;&amp; bb == b)<br>                        A[i+1][tt0][tt1] = min(A[i+1][tt0][tt1], A[i][t0][t1]);<br>                    <br>                    if (msk&amp;(1&lt;&lt;i)) continue;<br><br>                    for (j = 0; j &lt; 2; ++j) <br>                        for (k = 0; k &lt; 2; ++k)<br>                        {<br>                            v[0] = j ? 1 : 0;<br>                            v[1] = !j ? 1 : 0;<br>                            v[2] = k ? 1 : 0;<br>                            v[3] = !k ? 1 : 0;<br><br>                            aa = v[0]-v[1]-t0; tt0 = 0;<br>                            if (aa &lt; 0) aa += 2, tt0 = 1;<br>                            bb = v[2]-v[3]-t1; tt1 = 0;<br>                            if (bb &lt; 0) bb += 2, tt1 = 1;   <br><br>                            if (aa == a &amp;&amp; bb == b)<br>                                A[i+1][tt0][tt1] = min(A[i+1][tt0][tt1], A[i][t0][t1]+1);<br>                        }                    <br>                }<br>        }             <br>        return A[31][0][0];<br>    }<br>    <br>  vector &lt;string&gt; getPath(int finishX, int finishY) {<br>        vector&lt;string&gt; ret;<br>        int i, j, s1, s2, x, y, msk;<br>        string best = "";<br>        char tmp[256];<br>        <br>      int moves = reach(finishX, finishY, 0);  <br>        if (moves == INF) return ret;<br><br>        ret.pb("0,0"); <br>        x = y = 0; msk = 0;<br>        for (i = 1; i &lt;= moves; ++i)<br>        {<br>            string best = ""; int bst_bit = -1, bst_s1 = -1, bst_s2 = -1;<br>            for (j = 0; j &lt; 31; ++j)<br>            {<br>                if (msk&amp;(1&lt;&lt;j)) continue;<br>                for (s1 = 0; s1 &lt; 2; ++s1)<br>                for (s2 = 0; s2 &lt; 2; ++s2)<br>                {<br>                    x += (1&lt;&lt;j)*(s1 ? +1 : -1); <br>                    y += (1&lt;&lt;j)*(s2 ? +1 : -1); <br>                    if (reach(finishX-x, finishY-y, msk|(1&lt;&lt;j))+i == moves)<br>                    {<br>                        sprintf(tmp, "%d,%d", x, y);<br>                        if (best == "" || best &gt; tmp)<br>                            best = tmp, bst_bit = j, bst_s1 = s1, bst_s2 = s2;<br>                    }<br>                    x -= (1&lt;&lt;j)*(s1 ? +1 : -1); <br>                    y -= (1&lt;&lt;j)*(s2 ? +1 : -1); <br>                }<br>            }<br>            x += (1&lt;&lt;bst_bit)*(bst_s1 ? +1 : -1);<br>            y += (1&lt;&lt;bst_bit)*(bst_s2 ? +1 : -1);<br>            ret.pb(best);<br>            msk |= 1&lt;&lt;bst_bit;<br>        }<br><br>        return ret;<br>  }<br>};<br><br><br>// Powered by FileEdit<br></td>