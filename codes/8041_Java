<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br> <br>public class MountainMap {<br>    static final int MOD = 12345678;<br> <br>    int w;<br>    int h;<br>    int n;<br>    int numTotal;<br>    int answer;<br> <br>    Map&lt;Integer, Integer&gt; xToNum;<br> <br>    private void rec(int r, int c, int more, boolean[][] x) {<br>        if (c &gt;= w)<br>            rec(r + 1, 0, more, x);<br>        else if (r &gt;= h) {<br>            int res = get(x);<br>            if (more % 2 == 0)<br>                answer = (answer + res) % MOD;<br>            else<br>                answer = (answer - res + MOD) % MOD;<br>        } else {<br>            boolean any = !((c &gt; 0 &amp;&amp; x[r][c - 1])<br>                    ||<br>                    (r &gt; 0 &amp;&amp; c &gt; 0 &amp;&amp; x[r - 1][c - 1])<br>                    ||<br>                    (r &gt; 0 &amp;&amp; x[r - 1][c])<br>                    ||<br>                    (c &lt; w - 1 &amp;&amp; r &gt; 0 &amp;&amp; x[r - 1][c + 1])<br>                    ||<br>                    (c &lt; w - 1 &amp;&amp; x[r][c + 1])<br>                    ||<br>                    (r &lt; h - 1 &amp;&amp; c &gt; 0 &amp;&amp; x[r + 1][c - 1])<br>                    ||<br>                    (r &lt; h - 1 &amp;&amp; x[r + 1][c])<br>                    ||<br>                    (r &lt; h - 1 &amp;&amp; c &lt; w - 1 &amp;&amp; x[r + 1][c + 1])<br>                    ||<br>                    x[r][c]<br>            );<br>            if (any) {<br>                x[r][c] = true;<br>                rec(r, c + 1, more + 1, x);<br>                x[r][c] = false;<br>            }<br>            rec(r, c + 1, more, x);<br>        }<br>    }<br> <br>    private int get(boolean[][] x) {<br>        int[][] need = new int[h][w];<br>        int[][] id = new int[h][w];<br>        int at = 0;<br>        for (int r = 0; r &lt; h; ++r)<br>            for (int c = 0; c &lt; w; ++c)<br>                if (x[r][c]) {<br>                    id[r][c] = at;<br>                    for (int rr = r - 1; rr &lt;= r + 1; ++rr)<br>                        for (int cc = c - 1; cc &lt;= c + 1; ++cc)<br>                            if (rr &gt;= 0 &amp;&amp; rr &lt; h &amp;&amp; cc &gt;= 0 &amp;&amp; cc &lt; w &amp;&amp; !x[rr][cc])<br>                                need[rr][cc] |= (1 &lt;&lt; at);<br>                    ++at;<br>                }<br>        int[] am = new int[1 &lt;&lt; at];<br>        for (int r = 0; r &lt; h; ++r)<br>            for (int c = 0; c &lt; w; ++c)<br>                if (!x[r][c])<br>                    ++am[need[r][c]];<br>        for (int xx = (1 &lt;&lt; at) - 1; xx &gt;= 0; --xx) {<br>            for (int yy = xx; true; yy = (yy - 1) &amp; xx) {<br>                if (yy != xx)<br>                    am[xx] += am[yy];<br>                if (yy == 0)<br>                    break;<br>            }<br>        }<br>        int[] num = new int[1 &lt;&lt; at];<br>        for (int i = 0; i &lt; (1 &lt;&lt; at); ++i) {<br>            int j = 0;<br>            int k = i;<br>            while (k &gt; 0) {<br>                ++j;<br>                k = k &amp; (k - 1);<br>            }<br>            num[i] = j;<br>        }<br>        int[] cnt = new int[1 &lt;&lt; at];<br>        int[] nxt = new int[1 &lt;&lt; at];<br>        cnt[0] = 1;<br>        for (int toGo = 0; toGo &lt; n; ++toGo) {<br>            for (int i = 0; i &lt; (1 &lt;&lt; at); ++i) {<br>                nxt[i] = 0;<br>            }<br>            for (int i = 0; i &lt; (1 &lt;&lt; at); ++i) {<br>                if (cnt[i] &gt; 0) {<br>                    if (am[i] &gt; toGo - num[i]) {<br>                        nxt[i] = (nxt[i] + cnt[i] * (am[i] - (toGo - num[i]))) % MOD;<br>                    }<br>                    for (int j = 0; j &lt; at; ++j)<br>                        if (((i &gt;&gt; j) &amp; 1) == 0) {<br>                            nxt[i | (1 &lt;&lt; j)] = (nxt[i | (1 &lt;&lt; j)] + cnt[i]) % MOD;<br>                        }<br>                }<br>            }<br>            int[] tmp = cnt;<br>            cnt = nxt;<br>            nxt = tmp;<br>        }<br>        return cnt[(1 &lt;&lt; at) - 1];<br>    }<br> <br>    public int count(String[] data) {<br>        h = data.length;<br>        w = data[0].length();<br>        n = h * w;<br>        xToNum = new HashMap&lt;Integer, Integer&gt;();<br>        numTotal = 0;<br>        boolean[][] x = new boolean[h][w];<br>        boolean any = false;<br>        for (int i = 0; i &lt; h; ++i)<br>            for (int j = 0; j &lt; w; ++j) {<br>                x[i][j] = data[i].charAt(j) == 'X';<br>                if (x[i][j])<br>                    any = true;<br>            }<br>        for (int i = 0; i &lt; h; ++i)<br>            for (int j = 0; j &lt; w; ++j)<br>                for (int ii = 0; ii &lt; h; ++ii)<br>                    for (int jj = 0; jj &lt; w; ++jj)<br>                        if (Math.abs(i - ii) &lt;= 1 &amp;&amp; Math.abs(j - jj) &lt;= 1 &amp;&amp; (i != ii || j != jj) &amp;&amp; x[i][j] &amp;&amp; x[ii][jj])<br>                            return 0;<br> <br>        answer = 0;<br>        if (any)<br>            rec(0, 0, 0, x);<br>    return answer;<br>  }<br> <br>}<br> <br> <br>// Powered by FileEdit<br>// Powered by RETester [based on ExampleBuilder]<br>// Powered by CodeProcessor<br></td>