<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;stdio.h&gt;<br>#include &lt;ctype.h&gt;<br>#include &lt;map&gt;<br>#include &lt;string&gt;<br>#include &lt;vector&gt;<br>using namespace std;<br><br>typedef long long ll;<br>typedef long double ld;<br>typedef vector&lt;ll&gt; vll;<br>typedef vector&lt;ld&gt; vld;<br>typedef vector&lt;int&gt; vi;<br>typedef vector&lt;string&gt; vs;<br><br>#define LS &lt;<br>#define FOR(k,a,b) for(typeof(a) k = (a); k LS (b); k++)<br>#define Size(s) (int((s).size()))<br><br>#define CLC(act, val) (*({act; static typeof(val) CLCR = (val); &amp;CLCR;}))<br><br>#define FIRST(k,a,b,cond) CLC(typeof(a) k = (a); for(; k LS (b); k++) if(cond) break, k)<br>#define EXISTS(k,a,b,cond) (FIRST(k,a,b,cond) != (b))<br>#define FORALL(k,a,b,cond) (!(EXISTS(k,a,b,!(cond))))<br><br>#define SUM(k,a,b,val) CLC(typeof(a) k = (a); typeof(val) sum##k = (0); for(;k LS (b); k++) sum##k += val, sum##k)<br><br>vi parsevi(string s) {<br>  vi ret;<br>  int tmp = 0;<br>  s += ' ';<br>  FOR(k,0,Size(s)) if(s[k] == ' ') { ret.push_back(tmp); tmp = 0; } else { tmp *= 10; tmp += s[k] - '0'; }<br>  return ret;<br>  }<br><br>vs parsevs(string s) {<br>  vs ret;<br>  string tmp = "";<br>  s += ' ';<br>  FOR(k,0,Size(s)) if(s[k] == ' ') { ret.push_back(tmp); tmp = ""; } else { tmp += s[k]; }<br>  return ret;<br>  }<br><br>typedef pair&lt;int, int&gt; pii;<br><br>int di(pii a) { return a.first*a.first + a.second*a.second; }<br><br>int pcomp(pii a, pii b) {<br>  return a.first*a.first+a.second*a.second &lt; b.first*b.first + b.second * b.second;<br>  }<br><br>int  bs(int a, int b) {<br>  if(a &gt;= 0 &amp;&amp; b &gt;= 0) return a &gt;? b;<br>  if(a &lt;= 0 &amp;&amp; b &lt;= 0) return (-a) &gt;? (-b);<br>  if(a &gt;= 0) return a - b;<br>  return b - a;<br>  } <br><br>class IsoscelesTriangles {<br>  public:<br>  long long count(int N, int M) {<br>    pii tab[401*401+1];<br>    int q = 0;<br>    FOR(x,-N,N+1) FOR(y,-M,M+1) {<br>      tab[q++] = make_pair(x, y);<br>      }<br>    sort(tab, tab+q, pcomp);<br>    <br>    tab[q].first = 0; tab[q].second = 0;<br>    <br>    int tf = 0;<br>    ll count = 0;<br>    while(tf &lt; q) {<br>      int ts = tf;<br>      while(di(tab[tf]) == di(tab[ts])) ts++;<br>      <br>      FOR(u,tf,ts) FOR(v,tf,u) {<br>        if(u == v) continue;<br>        if(tab[u].first == -tab[v].first &amp;&amp; tab[u].second == -tab[v].second) continue;<br>        int xs = bs(tab[u].first, tab[v].first);<br>        int ys = bs(tab[u].second, tab[v].second);<br>        // sprintf("%d,%d: <br>        if(xs &gt; N-1) continue;<br>        if(ys &gt; M-1) continue;<br>        // printf("(%d,%d) vs (%d,%d): %d (%d,%d)\n", tab[u].first, tab[u].second, tab[v].first, tab[v].second, (N-xs)*(M-ys), xs,ys);<br>        count += (N-xs) * (M-ys);<br>        }<br>      <br>      tf = ts;<br>      }<br>    return count;<br>    }<br>  };<br><br><br>// Powered by FileEdit<br></td>