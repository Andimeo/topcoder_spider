<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>import java.io.*;<br><br>public class IsoscelesTriangles {<br><br>  public long count(int N, int M) {<br><br>    int MAX = (2 * N + 1) * (2 * M + 1);<br>    int[] dx = new int[MAX];<br>    int[] dy = new int[MAX];<br>    final int[] d = new int[MAX];<br>    <br>    int q = 0;<br>    <br>    for (int i = -N; i &lt;= N; i++) {<br>      for (int j = -M; j &lt;= M; j++) {<br>        dx[q] = i;<br>        dy[q] = j;<br>        d[q] = i * i + j * j;<br>        q++;<br>      }<br>    }<br>    <br>    Integer[] p = new Integer[MAX];<br>    for (int i = 0; i &lt; MAX; i++) p[i] = i;<br>    Arrays.sort(p, new Comparator&lt;Integer&gt;() {public int compare(Integer a, Integer b) {return d[a] - d[b];}});<br>    <br>    long res = 0;<br>    for (int i = 0; i &lt; MAX; i++) {<br>      if (d[p[i]] &gt; 0) {<br>        int j = i + 1;<br>        while (j &lt; MAX &amp;&amp; d[p[j]] == d[p[i]]) {<br>          if (dx[p[j]] + dx[p[i]] != 0 || dy[p[j]] + dy[p[i]] != 0) {<br>          int r = Math.max(Math.max(dx[p[j]], dx[p[i]]), 0);<br>          int t = Math.max(Math.max(dy[p[j]], dy[p[i]]), 0);<br>          int l = Math.min(Math.min(dx[p[j]], dx[p[i]]), 0);<br>          int b = Math.min(Math.min(dy[p[j]], dy[p[i]]), 0);<br>          int w = r - l;<br>          int h = t - b;<br>          if (w &lt; N &amp;&amp; h &lt; M) {    <br>            //System.out.println("" + dx[p[i]] + " " + dy[p[i]] + " " + dx[p[j]] + " " + dy[p[j]] + " " + w + " " + h);<br>            res += (N - w) * (M - h);<br>          }          <br>          }<br>          j++;<br>        }<br>      }      <br>    }<br><br>    return res;<br>  }<br><br>//  public static void main(String[] args) {<br>//    IsoscelesTriangles temp = new IsoscelesTriangles();<br>//    System.out.println(temp.count(int N, int M));<br>//  }<br>}<br><br><br>// Powered by FileEdit<br></td>