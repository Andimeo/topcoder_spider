<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;string&gt;<br>#include &lt;vector&gt;<br>using namespace std;<br><br>struct State<br>{<br>  long long n[8][8];<br>  int t;<br>  State()<br>  {<br>    memset(n, 0, sizeof(n));<br>  }<br>};<br>int L[8][8];<br>string act[10];<br>int R, C;<br><br>int move[8][8];<br><br>State advance(State cur, int t)<br>{<br>  State next;<br>  for(int i = 0; i&lt;R; i++)<br>  {<br>    for(int j = 0; j&lt;C; j++)<br>    {<br>      char a = act[L[i][j]][t%act[L[i][j]].length()];<br>      if(a=='D')<br>        continue;<br>      else if(a&gt;='0' &amp;&amp; a&lt;='9')<br>      {<br>        next.n[i][j]+=a-'0';<br>      }<br>      int r = i;<br>      int c = j;<br>          if(a=='N')<br>          {<br>            r--;<br>          }<br>          else if(a=='S')<br>          {<br>            r++;<br>          }<br>          else if(a=='E')<br>          {<br>            c++;<br>          }<br>          else if(a=='W')<br>          {<br>            c--;<br>          }    <br>          if(r&lt;0 || r&gt;=R || c&lt;0 || c&gt;=C)<br>          {<br>            continue;<br>          }<br>      next.n[r][c]+=cur.n[i][j];            <br>    }<br>  }<br>  return next;<br>}<br><br><br><br>class MarbleMachine<br>{<br>public:<br>  long long maxMarbles(vector&lt;string&gt; layout, vector&lt;string&gt; actions, int T)<br>  {<br>    for(int i = 0; i&lt;actions.size(); i++)<br>      act[i] = actions[i];<br>    R = layout.size();<br>    C = layout[0].length();<br>    for(int i = 0; i&lt;R; i++)<br>      for(int j= 0; j&lt;C; j++)<br>        L[i][j] = layout[i][j]-'0';<br>    for(int i = 0; i&lt;R; i++)<br>    {<br>      for(int j = 0; j&lt;C; j++)<br>      {<br>        int r = i;<br>        int c = j;<br>        for(int a = 0; a&lt;60; a++)<br>        {<br>          char step = act[L[r][c]][a%act[L[r][c]].length()];<br>          if(step=='D')<br>          {<br>            r = -1;<br>            c = -1;<br>            break;<br>          }<br>          else if(step=='N')<br>          {<br>            r--;<br>          }<br>          else if(step=='S')<br>          {<br>            r++;<br>          }<br>          else if(step=='E')<br>          {<br>            c++;<br>          }<br>          else if(step=='W')<br>          {<br>            c--;<br>          }    <br>          if(r&lt;0 || r&gt;=R || c&lt;0 || c&gt;=C)<br>          {<br>            r = -1;<br>            c = -1;<br>            break;<br>          }                          <br>        }<br>        if(r==-1)<br>          move[i][j] = -1;<br>        else<br>          move[i][j] = r*100+c;<br>      }<br>    }<br>    State change;<br>    for(int i = 0; i&lt;60; i++)<br>      change = advance(change, i);<br>    State start;<br>    int time = 0;<br>    while(T!=0)<br>    {<br>      if(T&gt;=60)<br>      {<br>        State next;<br>        for(int i = 0; i&lt;R; i++)<br>        {<br>          for(int j = 0; j&lt;C; j++)<br>          {<br>            if(move[i][j]==-1)<br>              continue;<br>            int r = move[i][j]/100;<br>            int c = move[i][j]%100;<br>            next.n[r][c]+=start.n[i][j];<br>          }<br>        }<br>        for(int i = 0; i&lt;R; i++)<br>        {<br>          for(int j = 0; j&lt;C; j++)<br>          {<br>            next.n[i][j]+=change.n[i][j];<br>          }<br>        }<br>        start = next;<br>        time+=60;<br>        T-=60;<br>      }<br>      else<br>      {<br>        start = advance(start, time);<br>        time++;<br>        T--;<br>      }<br>    }<br>    long long max = 0;<br>    for(int i = 0; i&lt;R; i++)<br>      for(int j= 0; j&lt;C; j++)<br>        if(start.n[i][j]&gt;max)<br>          max = start.n[i][j];<br>    return max;<br>  }<br>};<br></td>