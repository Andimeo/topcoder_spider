<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br><br>public class MarbleMachine {<br>  public long maxMarbles(String[] layout, String[] actions, int t) {<br>    int n = layout.length;<br>    int m = layout[0].length();<br>    <br>    int[][] l = new int[n][m];<br>    for (int i = 0; i &lt; n; i++) {<br>      for (int j = 0;  j &lt; m; j++) {<br>        l[i][j] = layout[i].charAt(j) - '0';<br>      }<br>    }<br>    <br>    long[][] w = new long[n][m];<br>    long[][] nw = new long[n][m];<br>    int[][] pi = new int[n][m];<br>    int[][] pj = new int[n][m];<br>    int[] p = new int[10];<br>    int d = actions.length;<br>    char[][] r = new char[d][];<br>    for (int i = 0; i &lt; d; i++) {<br>      r[i] = actions[i].toCharArray();<br>    }<br>    for (int i = 0; i &lt; n; i++) {<br>      for (int j = 0; j &lt; m; j++) {<br>        pi[i][j] = i;<br>        pj[i][j] = j;<br>      }<br>    }<br>    <br>    for (int time = 0; time &lt; 2520; time++) {<br>      for (int i = 0; i &lt; n; i++) {<br>        for (int j = 0; j &lt; m; j++) {<br>          if (pi[i][j] == -1) {<br>            continue;<br>          }<br>          int z = l[pi[i][j]][pj[i][j]];<br>          char cur = r[z][p[z]];<br>          if (cur == 'D') {<br>            pi[i][j] = -1;<br>          }<br>          if (cur == 'N') {<br>            if (pi[i][j] == 0) {<br>              pi[i][j] = -1;<br>            } else {<br>              pi[i][j]--;<br>            }<br>          }<br>          if (cur == 'S') {<br>            if (pi[i][j] + 1 == n) {<br>              pi[i][j] = -1;<br>            } else {<br>              pi[i][j]++;<br>            }<br>          }<br>          if (cur == 'W') {<br>            if (pj[i][j] == 0) {<br>              pi[i][j] = -1;<br>            } else {<br>              pj[i][j]--;<br>            }<br>          }<br>          if (cur == 'E') {<br>            if (pj[i][j] + 1 == m) {<br>              pi[i][j] = -1;<br>            } else {<br>              pj[i][j]++;<br>            }<br>          }<br>        }<br>      }<br>      <br>      for (int i = 0; i &lt; n; i++) {<br>        for (int j = 0; j &lt; m; j++) {<br>          int z = l[i][j];<br>          char cur = r[z][p[z]];<br>          if (cur &gt;= '0' &amp;&amp; cur &lt;= '9') {<br>            nw[i][j] += w[i][j] + (cur - '0');<br>          }<br>          if (cur == 'N' &amp;&amp; i &gt; 0) {<br>            nw[i - 1][j] += w[i][j];<br>          }<br>          if (cur == 'S' &amp;&amp; i + 1 &lt; n) {<br>            nw[i + 1][j] += w[i][j];<br>          }<br>          if (cur == 'W' &amp;&amp; j &gt; 0) {<br>            nw[i][j - 1] += w[i][j];<br>          }<br>          if (cur == 'E' &amp;&amp; j + 1 &lt; m) {<br>            nw[i][j + 1] += w[i][j];<br>          }<br>        }<br>      }<br>      <br>      for (int i = 0; i &lt; n; i++) {<br>        for (int j = 0; j &lt; m; j++) {<br>          w[i][j] = nw[i][j];<br>          nw[i][j] = 0;<br>        }<br>      }<br>      <br>      for (int i = 0; i &lt; d; i++) {<br>        p[i]++;<br>        if (p[i] == r[i].length) {<br>          p[i] = 0;<br>        }<br>      }<br>    }<br>    <br>    long[][] cm = new long[n][m];<br>    <br>    int mul = t / 2520;<br>    for (int time = 0; time &lt; mul; time++) {<br>      for (int i = 0; i &lt; n; i++) {<br>        for (int j = 0; j &lt; m; j++) {<br>          if (pi[i][j] == -1) {<br>            continue;<br>          }<br>          nw[pi[i][j]][pj[i][j]] += cm[i][j];<br>        }<br>      }<br>      for (int i = 0; i &lt; n; i++) {<br>        for (int j = 0; j &lt; m; j++) {<br>          cm[i][j] = nw[i][j] + w[i][j];<br>          nw[i][j] = 0;<br>        }<br>      }<br>    }<br>    <br>    for (int time = 0; time &lt; t - mul * 2520; time++) {<br>      for (int i = 0; i &lt; n; i++) {<br>        for (int j = 0; j &lt; m; j++) {<br>          int z = l[i][j];<br>          char cur = r[z][p[z]];<br>          if (cur &gt;= '0' &amp;&amp; cur &lt;= '9') {<br>            nw[i][j] += cm[i][j] + (cur - '0');<br>          }<br>          if (cur == 'N' &amp;&amp; i &gt; 0) {<br>            nw[i - 1][j] += cm[i][j];<br>          }<br>          if (cur == 'S' &amp;&amp; i + 1 &lt; n) {<br>            nw[i + 1][j] += cm[i][j];<br>          }<br>          if (cur == 'W' &amp;&amp; j &gt; 0) {<br>            nw[i][j - 1] += cm[i][j];<br>          }<br>          if (cur == 'E' &amp;&amp; j + 1 &lt; m) {<br>            nw[i][j + 1] += cm[i][j];<br>          }<br>        }<br>      }<br>      for (int i = 0; i &lt; n; i++) {<br>        for (int j = 0; j &lt; m; j++) {<br>          cm[i][j] = nw[i][j];<br>          nw[i][j] = 0;<br>        }<br>      }<br>      <br>      for (int i = 0; i &lt; d; i++) {<br>        p[i]++;<br>        if (p[i] == r[i].length) {<br>          p[i] = 0;<br>        }<br>      }<br>    }<br>    <br>    long res = 0;<br>    for (int i = 0; i &lt; n; i++) {<br>      for (int j = 0; j &lt; m; j++) {<br>        if (cm[i][j] &gt; res) {<br>          res = cm[i][j];<br>        }<br>      }<br>    }<br>                        <br>    return res;<br>  }<br><br>}<br><br><br><br>// Powered by FileEdit<br>// Powered by RETester [based on ExampleBuilder]<br>// Powered by CodeProcessor<br></td>