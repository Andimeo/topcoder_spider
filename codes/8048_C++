<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;sstream&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;cmath&gt;<br>#include &lt;iostream&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;string&gt;<br>#include &lt;vector&gt;<br><br>using namespace std;<br><br>typedef long long ll;<br>typedef pair&lt;int,int&gt; pii;<br>typedef pair&lt;double,double&gt; pdd;<br>typedef vector&lt;int&gt; vi;<br>typedef vector&lt;string&gt; vs;<br>typedef map&lt;string,int&gt; msi;<br><br>int best[1&lt;&lt;15][12][12];<br>vi ser, avail;<br><br>bool Extr(int a, int b, int c) {<br>  return a != 11 &amp;&amp; (a &lt; b &amp;&amp; c &lt; b || a &gt; b &amp;&amp; c &gt; b);<br>}<br><br>int Best(int M, int a, int b, int i) {<br>  if (i == ser.size()) return 0;<br>  if (ser[i] != -1) return Best(M, b, ser[i], i+1) + Extr(a, b, ser[i]);<br>  int &amp;r = best[M][a][b];<br>  if (r == -1) {<br>    r = 1&lt;&lt;28;<br>    for (int j = 0; j &lt; avail.size(); ++j) <br>      if (M &amp; (1&lt;&lt;j))<br>  r &lt;?= Best(M &amp; ~(1&lt;&lt;j), b, avail[j], i+1) + Extr(a, b, avail[j]);<br>  }<br>  return r;<br>}<br><br>struct PartialSeries {<br>   vector &lt;int&gt; getFirst(vector &lt;int&gt; series, vector &lt;int&gt; available) {<br>      vector &lt;int&gt; res;<br>      sort(available.begin(), available.end());<br>      ser = series;<br>      avail = available;<br>      memset(best, -1, sizeof(best));<br>      int M = (1&lt;&lt;available.size())-1;<br>      int a = 11, b = 11;<br>      for (int i = 0; i &lt; ser.size(); ++i) {<br>  if (ser[i] != -1) {<br>    res.push_back(ser[i]);<br>    a = b;<br>    b = ser[i];<br>  } else {<br>    int goal = Best(M, a, b, i);<br>    for (int j = 0; j &lt; avail.size(); ++j) {<br>      if (M &amp; (1&lt;&lt;j)) {<br>        int val = Best(M &amp; ~(1&lt;&lt;j), b, avail[j], i+1) + <br>    Extr(a, b, avail[j]);<br>        if (val == goal) {<br>    res.push_back(avail[j]);<br>    M &amp;= ~(1&lt;&lt;j);<br>    a = b;<br>    b = avail[j];<br>    break;<br>        }<br>      }<br>    }<br>  }<br>      }<br>      return res;<br>   }<br><br>};<br><br><br>// Powered by FileEdit<br>// Powered by CodeProcessor<br></td>