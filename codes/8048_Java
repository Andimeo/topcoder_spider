<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>public class PartialSeries<br>{<br>  public int[] getFirst(int[] val, int[] avail)<br>  {<br>    Arrays.sort(avail);<br>    this.val = val; this.avail = avail;<br>    n = val.length; m = avail.length;<br>    for(char[][][] arr:memo)<br>    for(char[][] arr2:arr)<br>    for(char[] arr3:arr2)<br>      Arrays.fill(arr3, sent);<br>    solve(EQUAL,(1&lt;&lt;m)-1,0,0,0);<br><br>    ret = new int[n];<br>    construct(EQUAL,(1&lt;&lt;m)-1,0,0,0);<br>    return ret;<br>  }<br>  int[] ret;<br>  int n,m;<br>  int[] val, avail;<br>  static char[][][][] memo = new char[3][1&lt;&lt;15][11][15];<br>  char sent = (char)(-1);<br>  int solve(int sig, int mask, int prev, int posIndex, int pos)<br>  {<br>    if(pos&gt;=n)<br>      return 0;<br>    if(val[pos]!=-1)<br>    {<br>      int count = (sign(pos-1,pos-2)|sign(pos,pos-1))==ALL?1:0;<br>      return count + solve(sign(pos,pos-1),mask,val[pos],posIndex,pos+1);<br>    }<br>    if(memo[sig][mask][prev][posIndex]==sent)<br>    {<br>      int res = 100;<br>      for(int i=0;i&lt;m;i++)<br>      {<br>        if((1&lt;&lt;i&amp;mask)==0)<br>          continue;<br>        val[pos] = avail[i];<br>        int count = (sign(pos-1,pos-2)|sign(pos,pos-1))==ALL?1:0;<br>        count += solve(sign(pos,pos-1),mask^1&lt;&lt;i,<br>          val[pos],posIndex+1,pos+1);<br>        res = Math.min(res, count);<br>      }<br>      val[pos] = -1;<br>      memo[sig][mask][prev][posIndex] = (char)res;<br>    }<br>    return memo[sig][mask][prev][posIndex];<br>  }<br>  int sign(int i, int j)<br>  {<br>    if(i&lt;0 || i&gt;=n || j&lt;0 || j&gt;=n)<br>      return EQUAL;<br>    return val[i]-val[j]==0?EQUAL:<br>      val[i]&gt;val[j]?PLUS:MINUS;<br>  }<br>  void construct(int sig, int mask, int prev, int posIndex, int pos)<br>  {<br>    if(pos&gt;=n)<br>      return;<br>    if(val[pos]!=-1)<br>    {<br>      ret[pos] = val[pos];<br>      construct(sign(pos,pos-1),mask,val[pos],posIndex,pos+1);<br>      return;<br>    }<br>    int res = memo[sig][mask][prev][posIndex];<br>    for(int i=0;i&lt;m;i++)<br>    {<br>      if((1&lt;&lt;i&amp;mask)==0)<br>        continue;<br>      val[pos] = avail[i];<br>      int count = (sign(pos-1,pos-2)|sign(pos,pos-1))==ALL?1:0;<br>      count += solve(sign(pos,pos-1),mask^1&lt;&lt;i,<br>        val[pos],posIndex+1,pos+1);<br>      if(count==res)<br>      {<br>        ret[pos] = val[pos];<br>        construct(sign(pos,pos-1),mask^1&lt;&lt;i,<br>          val[pos],posIndex+1,pos+1);<br>        return;<br>      }<br>    }<br>    val[pos] = -1;<br>    return ;<br>  }<br>  static final int PLUS = 1;<br>  static final int MINUS = 2;<br>  static final int EQUAL = 0;<br>  static final int ALL = PLUS|MINUS;<br>}<br></td>