<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;iostream&gt;<br>#include &lt;sstream&gt;<br>#include &lt;set&gt;<br>#include &lt;map&gt;<br>#include &lt;queue&gt;<br>#include &lt;math.h&gt;<br>using namespace std;<br>class Paintball {<br>public:<br>    vector &lt; string &gt; getLeaderboard(vector &lt; string &gt; players,<br>     vector &lt; string &gt; messages);<br>};<br>#define COND(p) if( p)<br>#define SPRINTF(a...) (*({static string _sprintf_s; char _sprintf_b[4096]; sprintf( _sprintf_b, a); _sprintf_s = _sprintf_b; &amp;_sprintf_s;}))<br>#define VS vector&lt;string&gt;<br>#define VALT(c) __typeof(*(c).begin())<br>#define ITER(c) __typeof((c).begin())<br>#define FORE(e,c) for( ITER(c) it_##e = (c).begin(), it2_##e = it_##e; it_##e!=(c).end() &amp;&amp; it_##e==it2_##e; ++it_##e) for( VALT(c) e = *it_##e; it2_##e==it_##e; it2_##e++)<br>#define FOREC(e,c) for( __typeof(c) _t2_##e = c; !_t2_##e.empty(); _t2_##e.clear()) FORE(e,_t2_##e)<br>#define SPLIT(s) (*({string _split_w;static VS _split_vs; _split_vs.clear(); FOREC(_ch,string(s)) if( _ch==' ') { if( _split_w!="") _split_vs.push_back( _split_w); _split_w = ""; } else _split_w+= _ch; if( _split_w!="") _split_vs.push_back( _split_w); &amp;_split_vs;}))<br>vector &lt; string &gt; Paintball::getLeaderboard(vector &lt; string &gt; players,<br> vector &lt; string &gt; messages)<br>{<br>    map &lt; string, string &gt; ptot;<br>    map &lt; string, int &gt;teampoints;<br>    map &lt; string, int &gt;playerpoints;<br>    FORE(p, players) {<br>        VS vs = SPLIT(p);<br>        ptot[vs[0]] = vs[1];<br>        playerpoints[vs[0]] = 0;<br>        teampoints[vs[1]] = 0;<br>    }<br>    FORE(m, messages) {<br>        VS vs = SPLIT(m);<br>        string source = vs[0];<br>        string dest = vs[2];<br>        if (ptot[source] == ptot[dest]) {<br>            teampoints[ptot[source]]--;<br>            playerpoints[source]--;<br>        } else {<br>            playerpoints[source]++;<br>            playerpoints[dest]--;<br>            teampoints[ptot[source]]++;<br>            teampoints[ptot[dest]]--;<br>        }<br>    }<br>    VS ret;<br>    for (int cnt = 100; cnt &gt;= -100; cnt--) {<br>        FORE(e, teampoints) COND(e.second == cnt) {<br>            ret.push_back(SPRINTF("%s %d", e.first.c_str(), cnt));<br>            for (int cnt2 = 100; cnt2 &gt;= -100; cnt2--) {<br>                FORE(e2, playerpoints) COND(ptot[e2.first] == e.first &amp;&amp;<br>                 e2.second == cnt2) {<br>                    ret.push_back(SPRINTF("  %s %d", e2.first.c_str(),<br>                      e2.second));<br>                }<br>            }<br>        }<br>    }<br>    return ret;<br>}<br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003], modified by kp7<br>// Powered by CodeProcessor<br></td>