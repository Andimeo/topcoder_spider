<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;cstdio&gt;<br>#include &lt;iostream&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;set&gt;<br>#include &lt;map&gt;<br>#include &lt;stack&gt;<br>#include &lt;list&gt;<br>#include &lt;queue&gt;<br>#include &lt;deque&gt;<br>#include &lt;cctype&gt;<br>#include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;sstream&gt;<br>#include &lt;iterator&gt;<br>#include &lt;numeric&gt;<br>using namespace std;<br> <br> <br>typedef vector &lt;int &gt; VI;<br>#define REP(i,n) for (int i=0; i&lt;n; ++i)<br>#define FOREACH(it,x) for(__typeof((x).begin()) it=(x.begin()); it!=(x).end(); ++it)<br>#define FOR(i,p,k) for (int i=p; i&lt;=k; ++i)<br>#define PB push_back<br>#define ALL(x) x.begin(),x.end()<br>#define SIZE(x) (int)x.size()<br> <br>const int N=110;<br>int t[N][N][N];<br>string path,forecast;<br>int n;<br> <br>void dfs(int gdzie,int off,int zmoklem){<br>  t[gdzie][off][zmoklem]=1;<br>  FOR(dx,-1,1){<br>    int ngdzie=gdzie+dx;<br>    if (ngdzie&gt;=0 &amp;&amp; ngdzie&lt;n){<br>      int nzmoklem=zmoklem;<br>      if (path[ngdzie]!='C' &amp;&amp; forecast[(off+ngdzie)%n]=='R') nzmoklem++;<br>      if (path[ngdzie]!='C' &amp;&amp; forecast[(off+ngdzie+1)%n]=='R') nzmoklem++;<br>      int noff=(off+1)%n;<br>      if (nzmoklem&lt;N &amp;&amp; !t[ngdzie][noff][nzmoklem]) dfs(ngdzie,noff,nzmoklem);<br>    }<br>  }<br>}<br> <br>    class RainyDay<br>        { <br>        public: <br>        int minimumRainTime(string _path, string _forecast){ <br>          path=_path; forecast=_forecast;<br>          n=SIZE(path);<br>          int gdzie=0,cel=0;<br>          REP(i,n) if (path[i]=='Y') gdzie=i,path[i]='C';<br>          else if (path[i]=='H') cel=i,path[i]='C';<br>          int res=N;<br>          dfs(gdzie,0,0);<br>          REP(i,N) REP(j,N) if (t[cel][i][j]) res=min(res,j);<br>          return res;<br>        } <br>        <br> <br>         }; <br> <br>    <br> <br> <br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003]<br>// Powered by CodeProcessor<br></td>