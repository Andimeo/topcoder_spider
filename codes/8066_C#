<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections.Generic;<br><br>public class CatchTheMice {<br>    public double largestCage(int[] xp, int[] yp, int[] xv, int[] yv) {<br>        int n = xp.Length;<br>        List&lt;double&gt; interesting = new List&lt;double&gt;();<br>        interesting.Add(0);<br>        for (int i = 0; i &lt; n; ++i)<br>            for (int j = i + 1; j &lt; n; ++j)<br>            {<br>                int dx = xp[j] - xp[i];<br>                int vx = xv[j] - xv[i];<br>                if (vx != 0)<br>                {<br>                    double t = -dx / (double)vx;<br>                    if (t &gt; 0)<br>                        interesting.Add(t);<br>                }<br>                int dy = yp[j] - yp[i];<br>                int vy = yv[j] - yv[i];<br>                if (vy != 0)<br>                {<br>                    double t = -dy / (double)vy;<br>                    if (t &gt; 0)<br>                        interesting.Add(t);<br>                }<br>            }<br>        interesting.Sort();<br>        interesting.Add(interesting[interesting.Count - 1] * 3 + 10);<br>        double res = double.MaxValue;<br>        for (int i = 0; i &lt; interesting.Count - 1; ++i)<br>        {<br>            double l = interesting[i];<br>            double r = interesting[i + 1];<br>            double delta = r - l;<br>            if (delta &lt; 1e-10)<br>                continue;<br>            double lsx = eval(l, xp, xv);<br>            double lsy = eval(l, yp, yv);<br>            double rsx = eval(r, xp, xv);<br>            double rsy = eval(r, yp, yv);<br>            res = Math.Min(res, Math.Max(lsx, lsy));<br>            res = Math.Min(res, Math.Max(rsx, rsy));<br>            double dsx = (rsx - lsx) / delta;<br>            double dsy = (rsy - lsy) / delta;<br>            double ds = (dsy - dsx);<br>            if (Math.Abs(ds) &lt; 1e-12)<br>                continue;<br>            double t = (lsx - lsy) / ds;<br>            if (t &lt;= 0)<br>                continue;<br>            if (t &gt;= delta &amp;&amp; i &lt; interesting.Count - 2)<br>                continue;<br>            res = Math.Min(res, Math.Max(lsx + t * dsx, lsy + t * dsy));<br>        }<br>        return res;<br>    }<br><br>    private double eval(double l, int[] xp, int[] xv)<br>    {<br>        double min = double.MaxValue;<br>        double max = double.MinValue;<br>        for (int i = 0; i &lt; xp.Length; ++i)<br>        {<br>            double cur = xp[i] + xv[i] * l;<br>            min = Math.Min(min, cur);<br>            max = Math.Max(max, cur);<br>        }<br>        return max - min;<br>    }<br><br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003] [modified for C# by Petr]<br>// Powered by CodeProcessor<br></td>