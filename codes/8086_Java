<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>import java.util.regex.*;<br>import java.text.*;<br>import java.math.*;<br>import java.awt.geom.*;<br> <br>public class StrangeArray<br>{<br>  final static long p = 1000000007;<br>  final static BigInteger bp = BigInteger.valueOf(p);<br>  <br>  int gcd(int a, int b) {<br>    while (b != 0) {<br>      int tmp = a % b;<br>      a = b;<br>      b = tmp;<br>    }<br>    return a;<br>  }<br>  <br>  long pow(long a, long count) {<br>    return BigInteger.valueOf(a).modPow(BigInteger.valueOf(count), bp).intValue();<br>  }<br>  <br>  long inv(long a) {<br>    return BigInteger.valueOf(a).modInverse(bp).intValue();<br>  }<br>  <br>  long sum(long a, long count) {<br>    if (a == 1) {<br>      return count % p;<br>    }<br>    return ((pow(a, count) - 1) * inv(a - 1)) % p;<br>  }<br> <br>  public int calculateSum(int[] A, int[] B, String N)<br>  {<br>    int n = A.length;<br>    int m = B.length;<br>    long nn = Long.parseLong(N);<br>    int mod = n * m / gcd(n, m);<br>    long ans = 0;<br>    for (int t = 0; t &lt; mod; ++t) {<br>      int i = t % n;<br>      int j = t % m;<br>      // A[i] ^ (B[j] + (t + mod * z) / m) = A[i] ^ (B[j] + t / m) * (A[i] ^ (mod / m)) ^ z<br>      long len = nn / mod + (t &lt; nn % mod ? 1 : 0);<br>      //System.out.println(i + " " + j + " " + len + " " + pow(A[i], B[j] + t / m) + " " + sum(pow(A[i], mod / m), len));<br>      ans = (ans + pow(A[i], B[j] + t / m) * sum(pow(A[i], mod / m), len)) % p;<br>    }<br>    return (int)ans;<br>  }<br>  <br>  <br>}<br>//Powered by [KawigiEdit] 2.0!<br></td>