<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;iostream&gt;<br>#include &lt;strstream&gt;<br>#include &lt;string&gt;<br>#include &lt;vector&gt;<br>using namespace std;<br><br>class StringFragmentation<br>{<br>public:<br>  StringFragmentation(void);<br>  ~StringFragmentation(void);<br><br>  int largestFontSize(string text, int width, int height);<br>};<br><br>StringFragmentation::StringFragmentation(void)<br>{<br>}<br><br>StringFragmentation::~StringFragmentation(void)<br>{<br>}<br><br>int StringFragmentation::largestFontSize(string text, int width, int height)<br>{<br>  int res = -1;<br>  int n;<br>  char words[60][60];<br>  int len[60];<br><br>  istrstream sinput(text.c_str());<br><br>  n = 0;<br>  memset(words, 0 , sizeof(words));<br>  memset(len, 0, sizeof(len));<br>  while (sinput &gt;&gt; words[n])<br>    n++;<br>  for (int i = 0; i &lt; n; i++)<br>    len[i] = strlen(words[i]);<br><br>  for (int m = 8; m &lt;= 10000; m++)<br>  {<br>    int start = 0;<br>    int nowheight = 0;<br>    int nowwidth;<br><br>    bool ok = true;<br>    while (start &lt; n)<br>    {<br>      if (nowheight + 2*m &gt; height) <br>      {<br>        ok = false;<br>        break;<br>      }<br>      nowheight += 2 * m;<br><br>      nowwidth = 0;<br>      if (nowwidth + len[start] * (m+2) &gt; width)<br>      {<br>        ok = false;<br>        break;<br>      }<br><br>      nowwidth = len[start] * (m+2);<br>      start++;<br>      while (start &lt; n &amp;&amp; nowwidth + len[start] * (m+2) + m+2 &lt;= width)<br>      {<br>        nowwidth += len[start] * (m+2) + m+2;<br>        start++;<br>      }<br>    }<br>    if (ok == true &amp;&amp; start == n) res = m;<br>  }<br><br>  return res;<br>}<br></td>