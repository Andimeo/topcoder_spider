<td class="problemText" colspan="8" valign="middle" align="left">
            #include&lt;iostream&gt;<br>#include&lt;algorithm&gt;<br>#include&lt;string&gt;<br>#include&lt;vector&gt;<br>using namespace std;<br>struct node<br>{<br>    int x,y;<br>};<br>class SquareConstruction<br>{<br>public:<br>    node move(int x,int y,int a,int b,int n)<br>    {<br>        node ans;<br>        ans.x=(x+a)%n;<br>        ans.y=(y+b)%n;<br>        return ans;<br>    };<br>    string tostring(int x)<br>    {<br>        string ans="";<br>        bool flag=false;<br>        if (x&lt;0) {flag=true; x=-x;}<br>        while(x)<br>        {<br>            ans=(char)((x%10)+'0')+ans;<br>            x/=10;<br>        }<br>        if (flag) ans="-"+ans;<br>        return ans;<br>    }<br>    vector &lt;string&gt; construct(int n, int a, int b, int c, int d)<br>    {<br>        vector&lt;string&gt;ans;<br>        node nd;<br>        int map[11][11];<br>        int i,j,k,m,cx,cy,cur;<br>        for (i=0;i&lt;10;i++) for (j=0;j&lt;10;j++) map[i][j]=-1;<br>        map[0][0]=1;<br>        m=101;<br>        cx=cy=0;<br>        cur=1;<br>        while (m--)<br>        {<br>            nd=move(cx,cy,a,b,n);<br>            cx=nd.x;<br>            cy=nd.y;<br>            if(map[cx][cy]==-1)<br>                map[cx][cy]=++cur;<br>            else<br>            {<br>                nd=move(cx,cy,c,d,n);<br>                cx=nd.x;<br>                cy=nd.y;<br>                if(map[cx][cy]==-1)<br>                    map[cx][cy]=++cur;<br>                else break;<br>            }<br>        }<br>        string str;<br>        for (i=0;i&lt;n;i++)<br>        {<br>            str="";<br>            for (j=0;j&lt;n;j++)<br>            {<br>                str+=tostring(map[i][j]);<br>                if (j!=n-1) str+=" ";<br>            }<br>            ans.push_back(str);<br>        }<br>        return ans;<br>    };<br>};<br></td>