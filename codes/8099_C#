<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections;<br>using System.Collections.Generic;<br>using System.Collections.Specialized;<br>using System.Text;<br>using System.Text.RegularExpressions;<br> <br>public class ColorApproximation<br>{<br>  public int HexToInt(string s)<br>  {<br>    int a = (int)s[0];<br>    if (a &lt;= (int)'F' &amp;&amp; a &gt;= (int) 'A')<br>      a = a - (int)'A' + 10;<br>    else<br>      a = a - (int)'0';<br>    int b = (int)s[1];<br>    if (b &lt;= (int)'F' &amp;&amp; b &gt;= (int) 'A')<br>      b = b - (int)'A' + 10;<br>    else<br>      b = b - (int)'0';<br>    return a * 16 + b;<br>  }<br> <br>  public string IntToHex(int val)<br>  {<br>    string ans = "";<br>    int a = val / 16;<br>    if (a &gt;= 10)<br>      ans += (char)((int)'A' + a - 10);<br>    else<br>      ans += (char)((int)'0' + a);<br>    int b = val % 16;<br>    if (b &gt;= 10)<br>      ans += (char)((int)'A' + b - 10);<br>    else<br>      ans += (char)((int)'0' + b);<br>    return ans;<br>  }<br> <br>  public string bestApproximation(string[] colors)<br>  {<br>    int rmin = int.MaxValue, rmax = int.MinValue, gmin = int.MaxValue, gmax = int.MinValue, bmin = int.MaxValue, bmax = int.MinValue;<br>    Regex rr = new Regex(@"\w+");<br>    foreach(string ss in colors)<br>    {  <br>      foreach(Match m in rr.Matches(ss))<br>      {<br>        string s = m.Value;<br>      <br>      int r = HexToInt(s.Substring(0, 2));<br>      int g = HexToInt(s.Substring(2, 2));<br>      int b = HexToInt(s.Substring(4, 2));<br>      if (r &lt; rmin)<br>        rmin = r;<br>      if(r &gt; rmax)<br>        rmax = r;<br>      if (g &lt; gmin)<br>        gmin = g;<br>      if (g &gt; gmax)<br>        gmax = g;<br>      if (b &lt; bmin)<br>        bmin = b;<br>      if (b &gt; bmax)<br>        bmax = b;<br>      }<br>    }<br>    int maxd = 0;<br>    if (rmax - rmin &gt; maxd)<br>      maxd = rmax - rmin;<br>    if (gmax - gmin &gt; maxd)<br>      maxd = gmax - gmin;<br>    if (bmax - bmin &gt; maxd)<br>      maxd = bmax - bmin;<br>    maxd = (maxd + 1) / 2;<br>    return IntToHex(Math.Max(rmax - maxd, 0)) + IntToHex(Math.Max(gmax - maxd, 0)) + IntToHex(Math.Max(bmax - maxd, 0));<br>  }<br>}<br></td>