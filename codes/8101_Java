<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>import static java.lang.Math.*;<br><br>public class OptimalGroupMovement {<br>    public int minimumCost(String board) {<br>        int min = Integer.MAX_VALUE;<br>        for (int i = 0; i &lt; board.length(); i++) {<br>            min = Math.min(min, gor(board, i) + gol(board, i));<br>        }<br>        return min;<br>    }<br><br>    private int gol(String board, int c) {<br>        while (c &gt;= 0 &amp;&amp; board.charAt(c) == 'X') c--;<br>        int w = 0;<br>        int s = 0;<br>        while (c &gt;= 0) {<br>            while (c &gt;= 0 &amp;&amp; board.charAt(c) == '.') {<br>                c--;<br>                w++;<br>            }<br>            int l = 0;<br>            while (c &gt;= 0 &amp;&amp; board.charAt(c) == 'X') {<br>                l++;<br>                c--;<br>            }<br>            s += l * l * w;<br>        }<br>        return s;<br><br>    }<br><br>    private int gor(String board, int c) {<br>        while (c &lt; board.length() &amp;&amp; board.charAt(c) == 'X') c++;<br>        int w = 0;<br>        int s = 0;<br>        while (c &lt; board.length()) {<br>            while (c &lt; board.length() &amp;&amp; board.charAt(c) == '.') {<br>                c++;<br>                w++;<br>            }<br>            int l = 0;<br>            while (c &lt; board.length() &amp;&amp; board.charAt(c) == 'X') {<br>                l++;<br>                c++;<br>            }<br>            s += l * l * w;<br>        }<br>        return s;<br>    }<br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by RETester [based on ExampleBuilder]<br>// Powered by CodeProcessor<br></td>