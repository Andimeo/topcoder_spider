<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections.Generic;<br><br>public class RLESum {<br>  const long INF = 2000000000000000000L;<br>  <br>  public int[] getDigits(string a, string b, string[] k) {<br>    List&lt;int&gt; aDigit = new List&lt;int&gt;();<br>    List&lt;long&gt; aAmount = new List&lt;long&gt;();<br>    List&lt;int&gt; bDigit = new List&lt;int&gt;();<br>    List&lt;long&gt; bAmount = new List&lt;long&gt;();<br>    parse(a, aDigit, aAmount);<br>    parse(b, bDigit, bAmount);<br>    long[] need = new long[k.Length];<br>    for (int i = 0; i &lt; k.Length; ++i)<br>      need[i] = long.Parse(k[i]);<br>    int[] perm = new int[k.Length];<br>    for (int i = 0; i &lt; k.Length; ++i)<br>      perm[i] = i;<br>    Array.Sort(need, perm);<br>    int[] res = new int[k.Length];<br>    int aAt = 0;<br>    int bAt = 0;<br>    long aOffs = 0;<br>    long bOffs = 0;<br>    int carry = 0;<br>    int needAt = 0;<br>    long at = 0;<br>    while (true)<br>    {<br>      int pCarry = carry;<br>      int sum = aDigit[aAt] + bDigit[bAt] + pCarry;<br>      while (need[needAt] == at)<br>      {<br>        res[perm[needAt]] = sum % 10;<br>        ++needAt;<br>        if (needAt &gt;= k.Length)<br>          return res;<br>      }<br>      ++at;<br>      carry = sum / 10;<br>      ++aOffs;<br>      if (aOffs &gt;= aAmount[aAt])<br>      {<br>        ++aAt;<br>        aOffs = 0;<br>      }<br>      ++bOffs;<br>      if (bOffs &gt;= bAmount[bAt])<br>      {<br>        ++bAt;<br>        bOffs = 0;<br>      }<br>      if (aOffs &gt;= 3 &amp;&amp; bOffs &gt;= 3 &amp;&amp; carry == pCarry)<br>      {<br>        long jumpBy = Math.Min(aAmount[aAt] - aOffs - 1, bAmount[bAt] - bOffs - 1);<br>        if (jumpBy &gt; 0)<br>        {<br>          at += jumpBy;<br>          aOffs += jumpBy;<br>          bOffs += jumpBy;<br>          while (need[needAt] &lt;= at)<br>          {<br>            res[perm[needAt]] = sum % 10;<br>            ++needAt;<br>            if (needAt &gt;= k.Length)<br>              return res;<br>          }<br>        }<br>      }<br>    }<br>  }<br><br>  private void parse(string a, List&lt;int&gt; digit, List&lt;long&gt; amount)<br>  {<br>    int i = a.Length - 1;<br>    while (i &gt;= 0)<br>    {<br>      int dig = a[i] - '0';<br>      digit.Add(dig);<br>      --i;<br>      if (i &gt;= 0 &amp;&amp; a[i] == ']')<br>      {<br>        int j = i;<br>        while (a[i] != '[')<br>        {<br>          --i;<br>        }<br>        amount.Add(long.Parse(a.Substring(i + 1, j - i - 1)));<br>        --i;<br>      } else amount.Add(1);<br>    }<br>    digit.Add(0);<br>    amount.Add(INF);<br>  }<br><br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003] [modified for C# by Petr]<br>// Powered by CodeProcessor<br></td>