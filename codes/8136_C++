<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;string.h&gt;<br>#include &lt;stdio.h&gt;<br>#include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;algorithm&gt;<br><br>using namespace std;<br><br>class GrandpaField {<br>  public:<br>  <br>  int m;<br>  int x[50],y[50],l[50],f[50];<br>  int xs[102], xp, ys[102], yp;<br>  int color[102][102];<br>  int cs[102][102][8];<br>  int ct[8];<br>  <br>  int test () {<br>    int i, s = 0;<br>    <br>    if (ct[0])<br>      return 0;<br>    for (i = 1; i &lt; 8; i ++)<br>      s += ct[i] &gt; 0;<br>    return s &lt;= 2;<br>    }<br>  <br>  int getArea(int n, vector &lt;string&gt; changes) {<br>    int i, j, k, ll, x1, y1, x2, y2, ans;<br>    <br>    ans = 0;<br>    m = changes.size();<br>    xp = yp = 0;<br>    xs[xp ++] = 0;<br>    xs[xp ++] = n;<br>    ys[yp ++] = 0;<br>    ys[yp ++] = n;<br>    for (i = 0; i &lt; m; i ++) {<br>      sscanf(changes[i].c_str(),"%d%d%d%d",x+i,y+i,l+i,f+i);<br>      xs[xp ++] = x[i];<br>      xs[xp ++] = x[i] + l[i];<br>      ys[yp ++] = y[i];<br>      ys[yp ++] = y[i] + l[i];<br>      }<br>    sort(xs, xs + xp);<br>    sort(ys, ys + yp);<br>    xp = unique(xs, xs + xp) - xs;<br>    yp = unique(ys, ys + yp) - ys;<br>    <br>    memset(color, 0, sizeof(color));<br>    for (i = 0; i &lt; m; i ++) {<br>      x1 = lower_bound(xs, xs + xp, x[i]) - xs;<br>      x2 = lower_bound(xs, xs + xp, x[i] + l[i]) - xs;<br>      y1 = lower_bound(ys, ys + yp, y[i]) - ys;<br>      y2 = lower_bound(ys, ys + yp, y[i] + l[i]) - ys;<br>      for (j = x1; j &lt; x2; j ++)<br>        for (k = y1; k &lt; y2; k ++)<br>          color[j][k] = f[i];<br>      }<br>    <br>    for (i = 0; i &lt; xp; i ++) {<br>      for (k = 0; k &lt; 8; k ++) {<br>        cs[i][0][k] = 0;<br>        for (j = 0; j &lt; yp; j ++)<br>          cs[i][j + 1][k] = cs[i][j][k] + (color[i][j] == k);<br>        }<br>      }<br>    <br>    for (i = 0; i &lt; yp; i ++)<br>      for (j = i + 1; j &lt; yp; j ++) {<br>        for (k = 0; k &lt; 8; k ++)<br>          ct[k] = 0;<br>        ll = 0;<br>        for (k = 0; k &lt; xp - 1; k ++) {<br>          for (int a = 0; a &lt; 8; a ++)<br>            ct[a] += cs[k][j][a] - cs[k][i][a];<br>          while (!test()) {<br>            for (int a = 0; a &lt; 8; a ++)<br>              ct[a] -= cs[ll][j][a] - cs[ll][i][a];<br>            ll ++;<br>            }<br>          ans &gt;?= ((ys[j] - ys[i]) &lt;? (xs[k+1] - xs[ll])) * ((ys[j] - ys[i]) &lt;? (xs[k+1] - xs[ll]));<br>          }<br>        }<br>    return ans;<br>    }<br>  };<br></td>