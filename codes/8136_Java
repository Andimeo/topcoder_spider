<td class="problemText" colspan="8" valign="middle" align="left">
            import java.io.*;<br>import java.util.*;<br><br>public class GrandpaField {<br>  static int I(String s){<br>    return Integer.parseInt(s);<br>  }<br>  static int ok(int x,int y,int z){<br>     if(x==z||y==z) return 1;<br>     else return 0;<br>  }<br>  static int mi(int a,int b,int c){<br>    if(a&lt;=b&amp;&amp;a&lt;=c) return a;<br>    else if(b&lt;=c) return b;<br>    else return c;<br>  }<br>  static int[][] arr = new int[1000][1000];<br>  public static int getArea(int N, String[] changes){<br>    for(int i=0;i&lt;changes.length;i++){<br>      String[] s = changes[i].split("\\s");<br>      int X = I(s[0]), Y = I(s[1]), L = I(s[2]), F = I(s[3]);<br>      for(int j=0;j&lt;L;j++)<br>        for(int k=0;k&lt;L;k++)<br>          arr[X+j][Y+k]=F;<br>    }<br>    <br>    <br>    /*for(int i=0;i&lt;N;i++)<br>      for(int j=0;j&lt;N;j++)<br>        System.out.print(arr[i][j]+(j==N-1?"\n":" "));<br>    */<br>    int best = 0;<br>        int[][] square = new int[N][N];<br>        int[][] up = new int[N][N];<br>        int[][] left = new int[N][N];<br>    for(int i=1;i&lt;=7;i++)<br>      for(int j=i+1;j&lt;=7;j++){<br>        up[0][0]=ok(i,j,arr[0][0]);<br>        left[0][0]=ok(i,j,arr[0][0]);<br>        square[0][0]=ok(i,j,arr[0][0]);<br>        best = Math.max(best,square[0][0]);<br>        for(int k=1;k&lt;N;k++){<br>          left[0][k]=ok(i,j,arr[0][k])*(left[0][k-1]+1);<br>          left[k][0]=ok(i,j,arr[k][0]);<br>          up[k][0]=ok(i,j,arr[k][0])*(up[k-1][0]+1);<br>          up[0][k]=ok(i,j,arr[0][k]);<br>          square[0][k]=ok(i,j,arr[0][k]);<br>          square[k][0]=ok(i,j,arr[k][0]);<br>          best = Math.max(best,square[0][k]);<br>          best = Math.max(best,square[k][0]);<br>        }<br>        for(int a=1;a&lt;N;a++)<br>          for(int b=1;b&lt;N;b++){<br>            left[a][b]=ok(i,j,arr[a][b])*(left[a][b-1]+1);<br>            up[a][b]=ok(i,j,arr[a][b])*(up[a-1][b]+1);<br>            square[a][b]=mi(left[a][b],up[a][b],1+square[a-1][b-1]);<br>            best = Math.max(best,square[a][b]);<br>          <br>          <br>          }<br> /*       System.out.println();<br>    for(int a=0;a&lt;N;a++)<br>      for(int b=0;b&lt;N;b++)<br>        System.out.print(square[a][b]+(b==N-1?"\n":" "));<br>        System.out.println();<br>    for(int a=0;a&lt;N;a++)<br>      for(int b=0;b&lt;N;b++)<br>        System.out.print(up[a][b]+(b==N-1?"\n":" "));<br>        System.out.println();<br>    for(int a=0;a&lt;N;a++)<br>      for(int b=0;b&lt;N;b++)<br>        System.out.print(left[a][b]+(b==N-1?"\n":" "));<br>        System.out.println();<br>   */     <br>      }<br>  <br>  <br>  <br>  <br>    return best*best;<br>  <br>  }<br>}<br></td>