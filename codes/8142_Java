<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>import static java.lang.StrictMath.min;<br>import static java.lang.StrictMath.max;<br><br><br>public class BlackWhiteRectangles {<br>    int n;<br>    int[] x, y;<br><br>    int[] x0, y0, x1, y1, type;<br><br>    /*int[] removeEquals(int[] a) {<br>        List l = new ArrayList(a.length);<br>        l.add(a[0]);<br>        for (int i = 1; i &lt; a.length; ++i) {<br>            if (a[i] != a[i - 1]) {<br>                l.add(a[i]);<br>            }<br>        }<br>        int[] ans = new int[l.size()];<br>        for (int i = 0; i &lt; l.size(); ++i) {<br>            ans[i] = (Integer) l.get(i);<br>        }<br>        return ans;<br>    }*/<br><br>    public int blackCount(String[] rect) {<br>        n = rect.length;<br>        x0 = new int[n];<br>        y0 = new int[n];<br>        x1 = new int[n];<br>        y1 = new int[n];<br>        type = new int[n];<br>        for (int i = 0; i &lt; n; ++i) {<br>            String[] buf = rect[i].split(" ");<br>            x0[i] = Integer.parseInt(buf[0]);<br>            y0[i] = Integer.parseInt(buf[1]);<br>            x1[i] = Integer.parseInt(buf[2]);<br>            y1[i] = Integer.parseInt(buf[3]);<br>            type[i] = Integer.parseInt(buf[4]);<br>        }<br><br>        x = new int[2*n];<br>        y = new int[2*n];<br>        for (int i = 0; i &lt; n; ++i) {<br>            x[2*i] = x0[i];<br>            x[2*i + 1] = x1[i];<br>            y[2*i] = y0[i];<br>            y[2*i + 1] = y1[i];<br>        }<br>        Arrays.sort(x);<br>        Arrays.sort(y);<br>        //x = removeEquals(x);<br>        //y = removeEquals(y);<br><br>        int ans = 0;<br>        for (int i = 0; i &lt; x.length - 1; ++i) {<br>            if (x[i] == x[i + 1]) {<br>                continue;<br>            }<br>            for (int j = 0; j &lt; y.length - 1; ++j) {<br>                if (y[j] == y[j + 1]) {<br>                    continue;<br>                }<br>                //System.out.println(i + " " + j + "       " + x[i] + " " + y[i] + "     " + x[i + 1] + " " + y[i + 1]);<br>                int[][] colors = new int[2][2];<br>                colors[0][0] = 0;<br>                colors[0][1] = 0;<br>                colors[1][0] = 0;<br>                colors[1][1] = 0;<br>                for (int k = 0; k &lt; n; ++k) {<br>                    int xx0 = max(x[i], x0[k]);<br>                    int xx1 = min(x[i + 1], x1[k]);<br>                    int yy0 = max(y[j], y0[k]);<br>                    int yy1 = min(y[j + 1], y1[k]);<br>                    int t = type[k];<br>                    if (xx0 &gt;= xx1 || yy0 &gt;= yy1) {<br>                        continue;<br>                    }<br>                    int dy = yy0 - y0[k];<br>                    int dx = xx0 - x0[k];<br>                    if (t == 1) {<br>                        colors[0][0] = 1;<br>                        colors[0][1] = 1;<br>                        colors[1][0] = 1;<br>                        colors[1][1] = 1;<br>                    } else if (t == 2) {<br>                        if (dy % 2 == 0) {<br>                            colors[0][1] = 1;<br>                            colors[1][1] = 1;<br>                        } else {<br>                            colors[0][0] = 1;<br>                            colors[1][0] = 1;<br>                        }<br>                    } else if (t == 3) {<br>                        if (dx % 2 == 0) {<br>                            colors[1][0] = 1;<br>                            colors[1][1] = 1;<br>                        } else {<br>                            colors[0][0] = 1;<br>                            colors[0][1] = 1;<br>                        }<br>                    } else {<br>                        if ((dx + dy) % 2 == 0) {<br>                            colors[0][0] = 1;<br>                            colors[1][1] = 1;<br>                        } else {<br>                            colors[0][1] = 1;<br>                            colors[1][0] = 1;<br>                        }<br>                    }<br>                }<br>                int ddx = x[i + 1] - x[i];<br>                int ddy = y[j + 1] - y[j];<br>                int num2x = ddx/2;<br>                int num2y = ddy/2;<br>                int num1x = ddx - (ddx/2)*2;<br>                int num1y = ddy - (ddy/2)*2;<br>                ans += num2x*num2y*(colors[0][0] + colors[0][1] + colors[1][0] + colors[1][1]);<br>                ans += num1x*num2y*(colors[0][0] + colors[0][1]);<br>                ans += num2x*num1y*(colors[0][0] + colors[1][0]);<br>                ans += num1x*num1y*(colors[0][0]);<br>            }<br>        }<br><br>        return ans;<br>    }<br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by CodeProcessor<br></td>