<td class="problemText" colspan="8" valign="middle" align="left">
            public class RadarGuns {<br>  public int[] getRange(int[] enterTimes, int[] exitTimes, int speedTime, int fineCap) {<br>    int n = enterTimes.length;<br>    int[][] c = new int[n + n + 2][n + n + 2];<br>    int[][] p = new int[n + n + 2][n + n + 2];<br>    for (int i = 0; i &lt; n; ++i)<br>      for (int j = 0; j &lt; n; ++j) {<br>        if (enterTimes[i] &lt; exitTimes[j]) {<br>          c[i][j + n] = 1;<br>          if (enterTimes[i] + speedTime &gt; exitTimes[j]) {<br>            int z = speedTime - (exitTimes[j] - enterTimes[i]);<br>            p[i][j + n] = Math.min(fineCap, z * z);<br>            p[j + n][i] = -p[i][j + n];<br>          }<br>        }<br>      }<br>    for (int i = 0; i &lt; n; ++i) {<br>      c[n + n][i] = 1;<br>      c[i + n][n + n + 1] = 1;<br>    }<br>    int[][] cc = new int[n + n + 2][n + n + 2];<br>    for (int i = 0; i &lt; n + n + 2; ++i)<br>      for (int j = 0; j &lt; n + n + 2; ++j)<br>        cc[i][j] = c[i][j];<br>    int[] res = new int[2];<br>    res[0] = minCostFlow(n + n + 2, n + n, n + n + 1, n, c, p);<br>    if (res[0] &lt; 0)<br>      return new int[0];<br>    for (int i = 0; i &lt; n; ++i)<br>      for (int j = 0; j &lt; n; ++j) {<br>        p[i][j + n] = -p[i][j + n];<br>        p[j + n][i] = -p[j + n][i];<br>      }<br>    res[1] = -minCostFlow(n + n + 2, n + n, n + n + 1, n, cc, p);<br>    return res;<br>  }<br> <br>  final int INF = 1000000000;<br> <br>  int minCostFlow(int n, int s, int t, int need, int[][] c, int[][] p) {<br>    int cost = 0;<br>    while (need &gt; 0) {<br>      int[] d = new int[n];<br>      int[] prev = new int[n];<br>      for (int i = 0; i &lt; n; ++i)<br>        d[i] = INF;<br>      d[s] = 0;<br>      boolean fix;<br>      do {<br>        fix = false;<br>        for (int i = 0; i &lt; n; ++i)<br>          for (int j = 0; j &lt; n; ++j)<br>            if (c[i][j] &gt; 0) {<br>              if (d[i] + p[i][j] &lt; d[j]) {<br>                d[j] = d[i] + p[i][j];<br>                prev[j] = i;<br>                fix = true;<br>              }<br>            }<br>      } while (fix);<br>      if (d[t] &gt; INF / 2)<br>        return -1;<br>      --need;<br>      int at = t;<br>      while (at != s) {<br>        int a = prev[at];<br>        cost += p[a][at];<br>        --c[a][at];<br>        ++c[at][a];<br>        at = a;<br>      }<br>    }<br>    return cost;<br>  }<br> <br>}<br> <br> <br>// Powered by FileEdit<br>// Powered by RETester [based on ExampleBuilder]<br>// Powered by CodeProcessor<br></td>