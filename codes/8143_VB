<td class="problemText" colspan="8" valign="middle" align="left">
            imports System<br>imports Microsoft.VisualBasic<br>imports System.Collections<br>imports System.Text<br>imports System.Collections.Generic<br> <br> <br>Public Class RadarGuns<br> <br>    Dim qp As New ArrayList<br>    Private Const INF As Long = 100000000<br>    Dim ttt() As Integer<br>    Dim prev() As Integer<br> <br>    Dim nc As Integer<br>    Dim nn As Integer<br>    Dim occ(,) As Integer<br>    Dim cc(,) As Integer<br>    Dim ww(,) As Integer<br> <br>    Public Function getRange(ByVal enterTimes() As Integer, ByVal exitTimes() As Integer, ByVal speedTime As Integer, ByVal fineCap As Integer) As Integer()<br>        nc = enterTimes.Length<br>        nn = nc * 2 + 2<br> <br>        ReDim occ(nn - 1, nn - 1)<br>        ReDim cc(nn - 1, nn - 1)<br>        ReDim ww(nn - 1, nn - 1)<br> <br>        Dim i1, i2 As Integer<br>        Dim st, en As Integer<br> <br>        st = nc * 2<br>        en = nc * 2 + 1<br> <br>        Dim tt As Integer<br>        Dim fine As Integer<br>        For i1 = 0 To nc - 1<br>            cc(st, i1) = 1<br>            ww(st, i1) = 0<br>            cc(i1 + nc, en) = 1<br>            ww(i1 + nc, en) = 0<br> <br>            For i2 = 0 To nc - 1<br>                If enterTimes(i1) &lt; exitTimes(i2) Then<br>                    cc(i1, i2 + nc) = 1<br>                    occ(i1, i2 + nc) = 1<br> <br>                    tt = exitTimes(i2) - enterTimes(i1)<br>                    If tt &gt;= speedTime Then<br>                        ww(i1, i2 + nc) = 0<br>                    Else<br>                        fine = (speedTime - tt) ^ 2<br>                        If fine &gt; fineCap Then fine = fineCap<br>                        ww(i1, i2 + nc) = -fine<br>                        ww(i2 + nc, i1) = fine<br>                    End If<br>                End If<br>            Next<br>        Next<br> <br>        Dim dead(-1) As Integer<br>        For i1 = 0 To nc - 1<br>            If Not ShortPath(st, en, nn) Then<br>                Return dead<br>            End If<br>        Next<br> <br>        Dim tw(1) As Integer<br>        For i1 = 0 To nc - 1<br>            For i2 = 0 To nc - 1<br>                If cc(i1, i2 + nc) &lt;&gt; occ(i1, i2 + nc) Then<br>                    tw(1) -= ww(i1, i2 + nc)<br>                End If<br>            Next<br>        Next<br> <br> <br> <br> <br> <br>        ReDim occ(nn - 1, nn - 1)<br>        ReDim cc(nn - 1, nn - 1)<br>        ReDim ww(nn - 1, nn - 1)<br> <br> <br>        For i1 = 0 To nc - 1<br>            cc(st, i1) = 1<br>            ww(st, i1) = 0<br>            cc(i1 + nc, en) = 1<br>            ww(i1 + nc, en) = 0<br> <br>            For i2 = 0 To nc - 1<br>                If enterTimes(i1) &lt; exitTimes(i2) Then<br>                    cc(i1, i2 + nc) = 1<br>                    occ(i1, i2 + nc) = 1<br> <br>                    tt = exitTimes(i2) - enterTimes(i1)<br>                    If tt &gt;= speedTime Then<br>                        ww(i1, i2 + nc) = 0<br>                    Else<br>                        fine = (speedTime - tt) ^ 2<br>                        If fine &gt; fineCap Then fine = fineCap<br>                        ww(i1, i2 + nc) = fine<br>                        ww(i2 + nc, i1) = -fine<br>                    End If<br>                End If<br>            Next<br>        Next<br> <br>        For i1 = 0 To nc - 1<br>            If Not ShortPath(st, en, nn) Then<br>                Return dead<br>            End If<br>        Next<br> <br> <br>        For i1 = 0 To nc - 1<br>            For i2 = 0 To nc - 1<br>                If cc(i1, i2 + nc) &lt;&gt; occ(i1, i2 + nc) Then<br>                    tw(0) += ww(i1, i2 + nc)<br>                End If<br>            Next<br>        Next<br> <br> <br> <br>        Return tw<br> <br>    End Function<br> <br>    Private Function ShortPath(ByVal iStart As Integer, ByVal iEnd As Integer, ByVal n As Integer) As Boolean<br>        Dim dist(n - 1) As Long<br>        ReDim prev(n - 1)<br> <br>        Dim i As Integer<br>        For i = 0 To n - 1<br>            dist(i) = INF<br>        Next<br> <br>        Dim r, i1, i2 As Integer<br> <br>        prev(iStart) = -1<br>        dist(iStart) = 0<br>        For r = 0 To n - 1<br>            For i1 = 0 To n - 1<br>                For i2 = 0 To n - 1<br> <br>                    If dist(i1) &lt;&gt; INF Then<br>                        If cc(i1, i2) &gt; 0 Then<br>                            If dist(i2) &gt; dist(i1) + ww(i1, i2) Then<br>                                dist(i2) = dist(i1) + ww(i1, i2)<br>                                prev(i2) = i1<br>                            End If<br>                        End If<br>                    End If<br> <br>                Next<br>            Next<br>        Next<br> <br>        If dist(iEnd) &lt;&gt; INF Then<br>            Dim cap As Integer<br>            cap = FindCap(iEnd)<br>            DecAll(iEnd, cap)<br>            Return True<br>        End If<br> <br>        Return False<br>    End Function<br> <br>    Private Sub DecAll(ByVal iTarget As Integer, ByVal am As Integer)<br>        Dim iPrev As Integer<br> <br>        While True<br>            iPrev = prev(iTarget)<br>            If iPrev = -1 Then Exit Sub<br>            cc(iPrev, iTarget) -= am<br>            cc(iTarget, iPrev) += am<br>            iTarget = iPrev<br>        End While<br>    End Sub<br> <br>    Private Function FindCap(ByVal iTarget As Integer) As Integer<br>        Dim amount As Integer, iPrev As Integer<br>        amount = INF<br> <br>        While True<br>            iPrev = prev(iTarget)<br>            If iPrev = -1 Then Return amount<br>            If cc(iPrev, iTarget) &lt; amount Then amount = cc(iPrev, iTarget)<br>            iTarget = iPrev<br>        End While<br> <br>    End Function<br> <br> <br>End Class<br></td>