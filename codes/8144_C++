<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;iostream&gt;<br>#include &lt;vector&gt;<br>#include &lt;string&gt;<br>#include &lt;map&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;sstream&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;set&gt;<br>#include &lt;queue&gt;<br>#include &lt;numeric&gt;<br>#include &lt;complex&gt;<br>#include &lt;climits&gt;<br> <br>using namespace std;<br> <br>template&lt;class T&gt; inline bool fixmin(T &amp;a, T b) {if (a&lt;=b) return false; a=b; return true;}<br>template&lt;class T&gt; inline bool fixmax(T &amp;a, T b) {if (a&gt;=b) return false; a=b; return true;}<br> <br>string yes="POSSIBLE";<br>string no="IMPOSSIBLE";<br> <br>struct MyFriends {<br>string calcFriends(vector &lt;int&gt; sumFriends, int k) {<br>  int n = sumFriends.size();<br>  int tot=accumulate(sumFriends.begin(), sumFriends.end(), 0);<br>  if (tot % (n-2) != 0) return no;<br>  tot /= (n-2);<br>  for (int i=0; i&lt;n; i++) sumFriends[i] = tot-sumFriends[i];<br>  vector&lt;int&gt; ff(n);<br>  for (int i=0; i&lt;n; i++) {<br>    int cur=sumFriends[i];<br>    int next=(i+k) % n;<br>    int mul = -1;<br>    while (next!=i) {<br>      cur += mul*sumFriends[next];<br>      next = (next+k)%n;<br>      mul *=-1;<br>    }<br>    if (cur &lt; 0) return no;<br>    if (cur%2) return no;<br>    ff[i] = cur/2;<br>  }<br>  for (int i=0; i&lt;n; i++) cout &lt;&lt; ff[i] &lt;&lt; ' ' ; cout &lt;&lt; endl;<br>  for (int i=n-1; i&gt;=0; i--) {<br>    sort (ff.begin(), ff.end());<br>    for (int j=0; j&lt;n; j++) cout &lt;&lt; ff[j] &lt;&lt; ' ' ; cout &lt;&lt; endl;<br>    if (ff[i] &gt; i) return no;<br>    if (ff[i] &lt; 0) return no;<br>    for (int j=0; j&lt;ff[i]; j++) ff[i-j-1]--;<br>  }<br>  return yes;<br>}<br>};<br></td>