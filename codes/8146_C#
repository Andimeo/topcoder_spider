<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections;<br>using System.Collections.Generic;<br>using System.Collections.Specialized;<br>using System.Text;<br>using System.Text.RegularExpressions;<br> <br>public class ConstructionFromMatches<br>{<br>  int[] T, B, C;<br>  public int minimumCost(int[] cost, int[] top, int[] bottom)<br>  {<br>    T = top;<br>    B = bottom;<br>    C = cost;<br>    int res = 30000000;<br>    for (int i = 0; i &lt; T.Length; i++)<br>    {<br>      T[i] -= 4;<br>      B[i] -= 4;<br>    }<br>    for (int i = 0; i &lt; cost.Length; i++)<br>      for (int j = 0; j &lt; cost.Length; j++)<br>        res = Math.Min(res, doit(0, i, j));<br>    if (res == 30000000) return -1;<br>    return res;<br>  }<br>  <br>  int?[,,] _doit = new int?[51,13,13];<br>  int doit(int c, int a, int b)<br>  {<br>    if (a &lt; 0 || b &lt; 0 || a &gt;= C.Length || b &gt;= C.Length) return 30000000;<br>    if (c == T.Length) return C[a]+C[b];<br>    if (_doit[c,a,b].HasValue) return _doit[c,a,b].Value;<br>    int res = 30000000;<br>    for (int i = 0; i &lt; C.Length &amp;&amp; i &lt;= T[c]-a; i++)<br>      for (int j = 0; j &lt; C.Length &amp;&amp; j &lt;= T[c]-a-i &amp;&amp; j &lt;= B[c]-b; j++)<br>        for (int k = 0; k &lt; C.Length &amp;&amp; k &lt;= B[c]-b-j; k++)<br>          res = Math.Min(res, C[a]+C[b]+C[i]+C[j]+C[k]+doit(c+1,T[c]-a-i-j,B[c]-b-j-k));<br>    _doit[c,a,b] = res;<br>    return res;<br>  }<br> <br> <br>}<br>//Powered by [KawigiEdit] 2.0!<br></td>