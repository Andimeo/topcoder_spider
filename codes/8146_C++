<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;algorithm&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;set&gt;<br>#include &lt;map&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cstring&gt;<br>#include &lt;vector&gt;<br>#include &lt;queue&gt;<br>#include &lt;deque&gt;<br>#include &lt;string&gt;<br>#include &lt;sstream&gt;<br>#include &lt;iostream&gt;<br>using namespace std;<br>#define FORC( V, it ) for( __typeof( (V).begin() ) it = (V).begin(); it != (V).end(); ++it )<br>const int MAXL = 1000;<br>const int INF = 987654321;<br>const double EPS = 1e-9;<br>char buff[MAXL+1];<br><br><br>vector&lt; int &gt; cost, top, bottom;<br><br>int dp[51][12][12];<br><br>int rek( int work, int a, int b )<br>{<br>    if ( work == ( int )top.size() ) return 0;<br><br>    int &amp;ref = dp[work][a][b];<br>    if ( ref != -1 ) return ref;<br>    <br>    ref = INF;<br>    for( int i = 0; i &lt; ( int )cost.size(); ++i )<br>        for( int j = 0; j &lt; ( int )cost.size(); ++j ) {<br>            int na = top[work] - ( a + 1 ) - ( i + 1 ) - ( j + 1 ) - 1;<br>            if ( na &lt; 0 || na &gt;= ( int )cost.size() ) continue;<br>            <br>            for( int k = 0; k &lt; ( int )cost.size(); ++k )  {<br>                int nb = bottom[work] - ( b + 1 ) - ( j + 1 ) - ( k + 1 ) - 1;<br>                if ( nb &lt; 0 || nb &gt;= ( int )cost.size() ) continue;<br><br>                ref = min( ref, rek( work + 1, na, nb ) + cost[na] + cost[nb] + cost[i] + cost[j] + cost[k] );<br>            }<br>        }<br>    return ref;<br>}<br><br>class ConstructionFromMatches {<br>public:<br>    int minimumCost( vector &lt;int&gt; Cost, vector &lt;int&gt; Top, vector &lt;int&gt; Bottom ) {<br>        cost = Cost;                           <br>        top = Top;<br>        bottom = Bottom;<br><br>        memset( dp, -1, sizeof ( dp ) ); <br>        int sol = INF;<br>        for( int i = 0; i &lt; ( int )cost.size(); ++i )<br>            for( int j = 0; j &lt; ( int )cost.size(); ++j )<br>                sol = min( sol, rek( 0, i, j ) + cost[i] + cost[j] );<br>        if ( sol &gt;= INF ) return -1;<br>        return sol;<br>    }<br>};<br><br><br><br><br><br><br><br><br><br>// Powered by FileEdit<br>// Powered by moj 3.0 beta 11 [modified TZTester]<br>// Powered by CodeProcessor<br></td>