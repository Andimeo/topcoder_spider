<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;vector&gt;<br>#include &lt;list&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;deque&gt;<br>#include &lt;stack&gt;<br>#include &lt;bitset&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;functional&gt;<br>#include &lt;numeric&gt;<br>#include &lt;utility&gt;<br>#include &lt;sstream&gt;<br>#include &lt;iostream&gt;<br>#include &lt;iomanip&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;ctime&gt;<br> <br>using namespace std;<br> <br>class LazyCat {<br>public:<br>  int maxMiceCount(vector &lt;int&gt;, vector &lt;int&gt;, int, vector &lt;int&gt;);<br>};<br> <br>int LazyCat::maxMiceCount(vector &lt;int&gt; pos, vector &lt;int&gt; speed, int d, vector &lt;int&gt; rest) {<br>  sort(rest.begin(), rest.end());<br>  <br>  vector&lt; double &gt; t;<br>  for (int i=0; i &lt; pos.size(); i++)<br>  {<br>    if (pos[i] &gt; d) continue;<br>    double q = (d-pos[i])/speed[i];<br>    <br>    t.push_back(q);<br>  }<br>  sort(t.begin(), t.end());<br>  <br>  int ret = 0;<br>  int curt = 0;<br>  int m = 0;<br>  for (int i=0; i &lt; t.size(); i++)<br>  {<br>    if (m &gt;= rest.size()) break;<br>    if (curt &lt; t[i]+1e-9) { ret++; curt += rest[m]; m++; }<br>  }<br>  <br>  return ret;<br>}<br> <br> <br>//Powered by [KawigiEdit] 2.0!<br></td>