<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br><br>public class FrabonacciTree {<br>  public string shortestPath(int n, int startIndex, int finishIndex) {<br>    if (startIndex == 1)<br>      return pathToRoot(n, finishIndex);<br>    else if (finishIndex == 1)<br>      return goUp(pathToRoot(n, startIndex));<br>    else<br>    {<br>      long nLeft = fibNum(n - 2);<br>      if (startIndex &lt;= nLeft + 1 &amp;&amp; finishIndex &lt;= nLeft + 1)<br>        return shortestPath(n - 2, startIndex - 1, finishIndex - 1);<br>      if (startIndex &gt; nLeft + 1 &amp;&amp; finishIndex &gt; nLeft + 1)<br>        return shortestPath(n - 1, (int) (startIndex - nLeft - 1), (int) (finishIndex - nLeft - 1));<br>      return goUp(pathToRoot(n, startIndex)) + pathToRoot(n, finishIndex);<br>    }<br>  }<br><br>  private string goUp(string s)<br>  {<br>    return s.Replace('L', 'U').Replace('R', 'U');<br>  }<br><br>  private string pathToRoot(int n, int index)<br>  {<br>    if (index == 1)<br>      return "";<br>    long nLeft = fibNum(n - 2);<br>    if (index &lt;= nLeft + 1)<br>      return "L" + pathToRoot(n - 2, index - 1);<br>    else<br>      return "R" + pathToRoot(n - 1, (int) (index - nLeft - 1));<br>  }<br><br>  long fibNum(int n)<br>  {<br>    long a = 1;<br>    long b = 1;<br>    for (int i = 0; i &lt; n; ++i)<br>    {<br>      long c = 1 + a + b;<br>      a = b;<br>      b = c;<br>    }<br>    return a;<br>  }<br><br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003] [modified for C# by Petr]<br>// Powered by CodeProcessor<br></td>