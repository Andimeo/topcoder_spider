<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;cmath&gt;<br>#include &lt;ctime&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;iostream&gt;<br>#include &lt;sstream&gt;<br><br>using namespace std;<br><br>long long cnt[51];<br><br>class FrabonacciTree {<br>public:<br><br>  string getPath(int n, int index) {<br>    if (index == 1) return "";<br>    index -= 1;<br>    if (index &lt;= cnt[n - 2]) return "L" + getPath(n - 2, index);<br>    index -= cnt[n - 2];<br>    return "R" + getPath(n - 1, index);<br>  }<br><br>  string shortestPath(int n, int startIndex, int finishIndex) {<br>    int i;<br>    <br>    cnt[0] = cnt[1] = 1;<br>    for (i = 2; i &lt;= n; i++) cnt[i] = cnt[i - 1] + cnt[i - 2] + 1;<br><br>    string s1 = getPath(n, startIndex);<br>    string s2 = getPath(n, finishIndex);<br><br>    while (s1.length() &gt; 0 &amp;&amp; s2.length() &gt; 0) {<br>      if (s1[0] != s2[0]) break;<br>      s1 = s1.substr(1, s1.length() - 1);<br>      s2 = s2.substr(1, s2.length() - 1);<br>    }<br><br>    string ret = "";<br>    for (i = 0; i &lt; s1.length(); i++) ret += "U";<br>    ret += s2;<br>    return ret;<br>  }<br><br>  <br> <br>}; <br><br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003]                    <br>// Powered by CodeProcessor<br></td>