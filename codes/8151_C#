<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Text;<br><br>public class CommonSubsequence {<br>  public string maxLex(string[] _a, string[] _b, int suffixLength)<br>  {<br>    StringBuilder ba = new StringBuilder();<br>    foreach (string x in _a)<br>      ba.Append(x);<br>    string a = ba.ToString();<br>    StringBuilder bb = new StringBuilder();<br>    foreach (string x in _b)<br>      bb.Append(x);<br>    string b = bb.ToString();<br>    StringBuilder res = new StringBuilder();<br>    int[] aWhere = new int[a.Length];<br>    int[] bWhere = new int[b.Length];<br>    bool[,] aAny = new bool[a.Length, 128];<br>    bool[,] bAny = new bool[b.Length, 128];<br>    int[] aCnt = new int[128];<br>    int[] bCnt = new int[128];<br>    int[,] aRCnt = new int[a.Length + 1, 128];<br>    for (int i = 1; i &lt;= a.Length; ++i)<br>    {<br>      for (int j = 0; j &lt; 128; ++j)<br>        aRCnt[i, j] = aRCnt[i - 1, j];<br>      ++aRCnt[i, a[i - 1]];<br>    }<br>    int[,] bRCnt = new int[b.Length + 1, 128];<br>    for (int i = 1; i &lt;= b.Length; ++i)<br>    {<br>      for (int j = 0; j &lt; 128; ++j)<br>        bRCnt[i, j] = bRCnt[i - 1, j];<br>      ++bRCnt[i, b[i - 1]];<br>    }<br>    for (int i = 0; i &lt; a.Length; ++i)<br>      aAny[0, a[i]] = true;<br>    for (int i = 1; i &lt; a.Length; ++i)<br>      for (int j = 0; j &lt; 128; ++j)<br>        aAny[i, j] = aAny[i - 1, j];<br>    for (int i = 0; i &lt; b.Length; ++i)<br>      bAny[0, b[i]] = true;<br>    for (int i = 1; i &lt; b.Length; ++i)<br>      for (int j = 0; j &lt; 128; ++j)<br>        bAny[i, j] = bAny[i - 1, j];<br>    for (int i = 0; i &lt; a.Length; ++i)<br>      for (int j = 0; j &lt; 128; ++j)<br>        if (aAny[i, j])<br>          ++aCnt[j];<br>    for (int i = 0; i &lt; b.Length; ++i)<br>      for (int j = 0; j &lt; 128; ++j)<br>        if (bAny[i, j])<br>          ++bCnt[j];<br>    while (true)<br>    {<br>      bool ok = false;<br>      for (int j = 127; j &gt;= 0; --j)<br>        if (aCnt[j] &gt; 0 &amp;&amp; bCnt[j] &gt; 0)<br>        {<br>          res.Append((char)j);<br>          for (int aS = 0; aS &lt; a.Length; ++aS)<br>          {<br>            if (aWhere[aS] &gt;= a.Length)<br>              continue;<br>            int at = (aS + aWhere[aS]) % a.Length;<br>            while (aWhere[aS] &lt; a.Length - 1 &amp;&amp; a[at] != j)<br>            {<br>              ++aWhere[aS];<br>              if (!any(aRCnt, a[at], aS, aWhere[aS], a.Length))<br>              {<br>                aAny[aS, a[at]] = false;<br>                --aCnt[a[at]];<br>              }<br>              ++at;<br>              if (at == a.Length)<br>                at = 0;<br>            }<br>            ++aWhere[aS];<br>            if (!any(aRCnt, a[at], aS, aWhere[aS], a.Length))<br>            {<br>              aAny[aS, a[at]] = false;<br>              --aCnt[a[at]];<br>            }<br>          }<br>          for (int bS = 0; bS &lt; b.Length; ++bS)<br>          {<br>            if (bWhere[bS] &gt;= b.Length)<br>              continue;<br>            int at = (bS + bWhere[bS]) % b.Length;<br>            while (bWhere[bS] &lt; b.Length - 1 &amp;&amp; b[at] != j)<br>            {<br>              ++bWhere[bS];<br>              if (!any(bRCnt, b[at], bS, bWhere[bS], b.Length))<br>              {<br>                bAny[bS, b[at]] = false;<br>                --bCnt[b[at]];<br>              }<br>              ++at;<br>              if (at == b.Length)<br>                at = 0;<br>            }<br>            ++bWhere[bS];<br>            if (!any(bRCnt, b[at], bS, bWhere[bS], b.Length))<br>            {<br>              bAny[bS, b[at]] = false;<br>              --bCnt[b[at]];<br>            }<br>          }<br>          ok = true;<br>          break;<br>        }<br>      if (!ok)<br>        break;<br>    }<br>    string z = res.ToString();<br>    if (z.Length &lt;= suffixLength)<br>      return z;<br>    else<br>      return z.Substring(z.Length - suffixLength);<br>  }<br><br>  private bool any(int[,] cnt, int ch, int start, int used, int len)<br>  {<br>    if (start + used &lt;= len)<br>      return cnt[start, ch] &gt; 0 || cnt[len, ch] &gt; cnt[start + used, ch];<br>    else<br>      return cnt[start, ch] &gt; cnt[start + used - len, ch];<br>  }<br><br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003] [modified for C# by Petr]<br>// Powered by CodeProcessor<br></td>