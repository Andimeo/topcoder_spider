<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;map&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cstring&gt;<br>#include &lt;cassert&gt;<br>#include &lt;set&gt;<br>#include &lt;iostream&gt;<br>#include &lt;sstream&gt;<br>#include &lt;cstddef&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;utility&gt;<br>#include &lt;iterator&gt;<br>#include &lt;numeric&gt;<br>#include &lt;list&gt;<br>#include &lt;complex&gt;<br> <br>using namespace std;<br> <br>typedef vector&lt;int&gt; vi;<br>typedef vector&lt;string&gt; vs;<br>typedef long long ll;<br>typedef complex&lt;double&gt; pnt;<br>typedef pair&lt;int, int&gt; pii;<br> <br>#define RA(x) (x).begin(), (x).end()<br>#define FE(i, x) for (typeof((x).begin()) i = (x).begin(); i != (x).end(); i++)<br>#define SZ(x) ((int) (x).size())<br> <br> <br>class CommonSubsequence<br>{<br>public:<br>    string maxLex(vector &lt;string&gt; a, vector &lt;string&gt; b, int suffixLength);<br>};<br> <br>string CommonSubsequence::maxLex(vector &lt;string&gt; _a, vector &lt;string&gt; _b, int slen)<br>{<br>    string s[2];<br>    s[0] = accumulate(RA(_a), string());<br>    s[1] = accumulate(RA(_b), string());<br>    int l[2] = { s[0].size(), s[1].size() };<br>    string ss[2];<br>    ss[0] = s[0] + s[0];<br>    ss[1] = s[1] + s[1];<br> <br>    char best1 = 127;<br>    while (best1 &gt;= 32 &amp;&amp; (count(RA(s[0]), best1) == 0 || count(RA(s[1]), best1) == 0))<br>        best1--;<br>    if (best1 &lt; 32) return "";<br> <br>    int cnt = min(count(RA(s[0]), best1), count(RA(s[1]), best1));<br>    // printf("Found %d of %c\n", cnt, (char) best1);<br>    string common(cnt, (char) best1);<br> <br>    vector&lt;pii&gt; vals[2];<br>    for (int i = 0; i &lt; 2; i++)<br>    {<br>        for (int x0 = 0; x0 &lt; l[i]; x0++)<br>        {<br>            if (ss[i][x0] != best1) continue;<br>            int h = cnt;<br>            int r = x0;<br>            while (h &gt; 0)<br>            {<br>                if (ss[i][r] == best1) h--;<br>                r++;<br>            }<br>            vals[i].push_back(pii(r, x0 + l[i]));<br>        }<br>    }<br> <br>    while (!vals[0].empty() &amp;&amp; !vals[1].empty())<br>    {<br>        int seen[2][256] = {{0}};<br>        for (int p = 0; p &lt; 2; p++)<br>            for (int i = 0; i &lt; SZ(vals[p]); i++)<br>            {<br>                int seen2[256] = {0};<br>                for (int j = vals[p][i].first; j &lt; vals[p][i].second; j++)<br>                    seen2[(int) ss[p][j]]++;<br>                for (int c = 32; c &lt; 130; c++)<br>                    seen[p][c] &gt;?= seen2[c];<br>            }<br>        int best = 128;<br>        while (best &gt; 32 &amp;&amp; (seen[0][best] == 0 || seen[1][best] == 0))<br>            best--;<br>        if (best &lt;= 32) break;<br>        int bestf = min(seen[0][best], seen[1][best]);<br>        common += string(bestf, (char) best);<br>        // printf("Found %d of %c\n", bestf, (char) best);<br> <br>        vector&lt;pii&gt; vals2[2];<br>        for (int p = 0; p &lt; 2; p++)<br>            for (int i = 0; i &lt; SZ(vals[p]); i++)<br>            {<br>                int h = 0;<br>                int last = -1;<br>                for (int j = vals[p][i].first; j &lt; vals[p][i].second; j++)<br>                {<br>                    if (ss[p][j] == best) h++;<br>                    last = j;<br>                    if (h == bestf) break;<br>                }<br>                if (h == bestf) vals2[p].push_back(pii(last + 1, vals[p][i].second));<br>            }<br>        vals[0].swap(vals2[0]);<br>        vals[1].swap(vals2[1]);<br>    }<br> <br>    int L = common.size();<br>    if (L &lt; slen) return common;<br>    else return common.substr(L - slen);<br>}<br> <br> <br>// Powered by FileEdit<br></td>