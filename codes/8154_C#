<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections;<br>using System.Collections.Generic;<br><br>public class KSubstring {<br>    public int[] maxSubstring(int A0, int X, int Y, int M, int n) {<br><br>        long[] seq = new long[n];<br>        seq[0] = A0;<br>        for (int i = 1; i &lt; n; i++) {<br>            seq[i] = (seq[i - 1] * X + Y) % M;<br>        }<br><br>        long bestdiff = int.MaxValue;<br>        int bestk = 0;<br><br>        long[] sums = new long[n];<br>        for (int k = 1; k*2 &lt;=n; k++) {<br>            for (int i = 0; i+k-1 &lt; n; i++) {<br>                sums[i] += seq[i+k-1];<br>            }<br>            Dictionary&lt;long, int&gt; oLeft = new Dictionary&lt;long, int&gt;();<br>            Dictionary&lt;long, int&gt; oRight = new Dictionary&lt;long, int&gt;();<br>            List&lt;long&gt; oSums = new List&lt;long&gt;();<br>            for (int i = 0; i &lt; n-k+1; i++) {<br>                if (oLeft.ContainsKey(sums[i])) {<br>                    oRight[sums[i]] = i;<br>                } else {<br>                    oLeft.Add(sums[i], i);<br>                    oRight.Add(sums[i], i);<br>                    oSums.Add(sums[i]);<br>                }<br>            }<br>            oSums.Sort();<br>            for (int i = 0; i &lt; oSums.Count; i++) {<br>                int j = i;<br>                while (j &lt; oSums.Count &amp;&amp; oSums[j] - oSums[i] &lt;= bestdiff &amp;&amp; oLeft[oSums[i]] + k &gt; oRight[oSums[j]] &amp;&amp; oLeft[oSums[j]] + k &gt; oRight[oSums[i]]) {<br>                    j++;<br>                }<br>                if (j &lt; oSums.Count &amp;&amp; oSums[j] - oSums[i] &lt;= bestdiff) {<br>                    bestdiff = oSums[j] - oSums[i];<br>                    bestk = k;<br>                }<br>            }<br>        }<br>        return new int[] { bestk,(int)bestdiff };<br><br>    }<br>}<br></td>