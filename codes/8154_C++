<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;map&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cstring&gt;<br>#include &lt;cassert&gt;<br>#include &lt;set&gt;<br>#include &lt;iostream&gt;<br>#include &lt;sstream&gt;<br>#include &lt;cstddef&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;utility&gt;<br>#include &lt;iterator&gt;<br>#include &lt;numeric&gt;<br>#include &lt;list&gt;<br>#include &lt;complex&gt;<br> <br>using namespace std;<br> <br>typedef vector&lt;int&gt; vi;<br>typedef vector&lt;string&gt; vs;<br>typedef long long ll;<br>typedef complex&lt;double&gt; pnt;<br>typedef pair&lt;int, int&gt; pii;<br> <br>#define RA(x) (x).begin(), (x).end()<br>#define FE(i, x) for (typeof((x).begin()) i = (x).begin(); i != (x).end(); i++)<br>#define SZ(x) ((int) (x).size())<br> <br> <br>class KSubstring<br>{<br>public:<br>    vector &lt;int&gt; maxSubstring(int A0, int X, int Y, int M, int n);<br>};<br> <br>vector &lt;int&gt; KSubstring::maxSubstring(int A0, int X, int Y, int M, int n)<br>{<br>    ll A[n], B[n + 1];<br>    A[0] = A0;<br>    for (int i = 1; i &lt; n; i++)<br>        A[i] = (A[i - 1] * X + Y) % M;<br> <br>    B[0] = 0;<br>    partial_sum(A, A + n, B + 1);<br> <br>    ll best = LONG_LONG_MAX;<br>    int bestk = 0;<br>    for (int k = n / 2; k &gt; 0; k--)<br>    {<br>        set&lt;ll&gt; have;<br>        ll q[n + 1];<br>        for (int j = 0; j + k &lt;= n; j++)<br>        {<br>            if (j &gt;= k)<br>                have.insert(q[j - k]);<br>            ll d = B[j + k] - B[j];<br>            set&lt;ll&gt;::iterator p = have.lower_bound(d);<br>            if (p != have.end())<br>            {<br>                if (*p - d &lt; best)<br>                {<br>                    bestk = k;<br>                    best = *p - d;<br>                }<br>            }<br>            if (p != have.begin())<br>            {<br>                p--;<br>                if (d - *p &lt; best)<br>                {<br>                    bestk = k;<br>                    best = d - *p;<br>                }<br>            }<br>            q[j] = d;<br>        }<br>        if (best == 0)<br>            break;<br>    }<br>    vi ans;<br>    ans.push_back(bestk);<br>    ans.push_back(best);<br>    return ans;<br>}<br> <br> <br>// Powered by FileEdit<br></td>