<td class="problemText" colspan="8" valign="middle" align="left">
            // I think I have been challenged...<br><br>#include &lt;algorithm&gt;<br>using namespace std;<br><br>typedef long long ll;<br><br>#define LS &lt;<br>#define LET(k,val) typeof(val) k = (val)<br>// execute "act", and return "val" as an expression result<br>#define CLC(act,val) (*({act; static typeof(val) CLCR; CLCR = (val); &amp;CLCR;}))<br><br>// All macros with parameters "k,a,b" run the "k" variable in range [a,b)<br><br>// Standard mathematical quantifiers, plus tools to implement them<br>#define FOLD0(k,a,b,init,act) CLC(LET(k, a); LET(R##k, init); for(; k LS (b); ++k) {act;}, R##k)<br>#define SUMTO(k,a,b,init,x)  FOLD0(k,a,b,init,R##k += (x))<br>#define SUM(k,a,b,x) SUMTO(k,a,b,(typeof(x)) (0), x)<br><br>#line 3 "CountExpressions.cc"<br><br>ll op(ll a, ll b, int o) {<br>  switch(o) {<br>    case 0: return a+b;<br>    case 1: return a-b;<br>    case 2: return a*b;<br>    }<br>  return -1;<br>  }<br> <br>class CountExpressions {<br>  public:<br>  int calcExpressions(int x, int y, int val) {<br>    // !FDI<br>    int t[2];<br>    t[0] = x; t[1] = y;<br>    return SUM(p,0,3, SUM(q,0,3, SUM(r,0,3, <br>      SUM(a,0,2, SUM(b,0,2, SUM(c,0,2, SUM(d,0,2,<br>        (a+b+c+d == 2) &amp;&amp;<br>        (op(op(op(t[a], t[b], p), t[c], q), t[d], r) == val) ? 1 : 0<br>        )))))));<br>    }<br>  };<br><br><br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003]<br>// Powered by CodeProcessor<br></td>