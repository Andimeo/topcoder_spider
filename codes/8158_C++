<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;iostream&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cmath&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;sstream&gt;<br>using namespace std;<br><br>#define pe(x)  cout&lt;&lt;x&lt;&lt;endl;<br>#define p(x)    cout&lt;&lt;x&lt;&lt;" ";<br>#define lm(n,x) (n&lt;&lt;x)<br>#define rm(n,x)    (n&gt;&gt;x)<br>#define two(x)  (1&lt;&lt;x)<br>#define sqr(x)  ((x)*(x))<br><br>int dp[53][53][53][53];<br><br>class CountPaths{<br>    public:  <br>        vector &lt;int&gt; difPaths(int r, int c, vector &lt;int&gt; px, vector &lt;int&gt; py){<br>            int m=px.size(),ind[100][100],mod=1000007;<br>            memset(ind,0xff,sizeof(ind));<br>            for (int i=1;i&lt;=m;i++)   ind[px[i-1]][py[i-1]]=i;<br>            memset(dp,0,sizeof(0));<br>            dp[1][1][(ind[1][1]!=-1)][ind[1][1]==-1?0:ind[1][1]]=1;<br>            for (int i=1;i&lt;=r;i++)<br>                for (int j=1;j&lt;=c;j++)<br>                    for (int t=0;t&lt;=m;t++)<br>                        for (int pred=0;pred&lt;=m;pred++)<br>                            if (dp[i][j][t][pred]){<br>                               if (i+1&lt;=r) {<br>                                    int x=i+1,y=j;<br>                                    if (ind[x][y]==-1){<br>                                        dp[x][y][t][pred]=(dp[x][y][t][pred]+dp[i][j][t][pred])%mod;<br>                                    }<br>                                    if (ind[x][y]!=-1&amp;&amp;ind[x][y]&gt;pred){<br>                                        dp[x][y][t+1][ind[x][y]]=(dp[x][y][t+1][ind[x][y]]+dp[i][j][t][pred])%mod;<br>                                    }<br>                                }<br>                                if (j+1&lt;=c){<br>                                    int x=i,y=j+1;<br>                                    if (ind[x][y]==-1){<br>                                        dp[x][y][t][pred]=(dp[x][y][t][pred]+dp[i][j][t][pred])%mod;<br>                                    }<br>                                    if (ind[x][y]!=-1&amp;&amp;ind[x][y]&gt;pred){<br>                                        dp[x][y][t+1][ind[x][y]]=(dp[x][y][t+1][ind[x][y]]+dp[i][j][t][pred])%mod;<br>                                    }<br>                                }<br>                            }<br>            vector&lt;int&gt; ans;<br>            for (int i=0;i&lt;=m;i++){<br>                int tmp=0;<br>                for (int j=0;j&lt;=m;j++)  tmp=(tmp+dp[r][c][i][j])%mod;<br>                ans.push_back(tmp);<br>            }<br>            return ans;<br>        }<br>};<br></td>