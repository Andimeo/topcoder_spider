<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;string&gt;<br>#include &lt;vector&gt;<br><br>using namespace std;<br><br>#define MOD 123456789<br><br>long long cache[100][100][100];<br><br>int N;<br><br>int len(int x, int y)<br>{<br>  int d = x - y;<br>  while (d &lt; 0) d += N;<br>  if (N - d &lt; d) d = N - d;<br>  return d;<br>}<br><br>bool isis(int p, int q, int r)<br>{<br>  int x = len(p, q);<br>  int y = len(q, r);<br>  int z = len(p, r);<br>  if (x == y || x == z || y == z) return true;<br>  return false;<br>}<br><br>long long get(int L, int R, int K)<br>{<br>  if (L + 1 == R)<br>  {<br>    if (!K) return 1;<br>    return 0;<br>  }<br>  long long &amp;r = cache[L][R][K];<br>  if (r != -1) return r;<br>  r = 0;<br>  for (int i = L + 1; i &lt; R; i++)<br>  {<br>    int cnt = isis(L, i, R);<br>    for (int j = 0; j &lt;= K - cnt; j++)<br>    {<br>      long long p = get(L, i, j);<br>      long long q = get(i, R, K - cnt - j);<br>      r = (r + p * q) % MOD;<br>    }<br>  }<br>  return r;<br>}<br><br>struct IsoscelesTriangulations<br>{<br>  int getCount(int n, int k)<br>  {<br>    N = n;<br>    memset(cache, 255, sizeof(cache));<br>    return get(0, n - 1, k);<br>  }<br>};<br></td>