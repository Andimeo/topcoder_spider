<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br><br>public class ConnectTheCities {<br>  public int minimalRange(int distance, int funds, int[] position) {<br>    int[] p = position;<br>    int n = p.length;<br>    int l = 0;<br>    int r = distance;<br>    Arrays.sort(p);<br>    <br>    int[][] x = new int[n + 1][distance + 1];<br>    <br>    while (l &lt; r) {<br>      int mid = (l + r) / 2;<br>      for (int i = 0; i &lt;= n; i++) {<br>        Arrays.fill(x[i], Integer.MAX_VALUE / 2);<br>      }<br>      x[0][0] = 0;<br>      for (int i = 0; i &lt; n; i++) {<br>        for (int j = 0; j &lt;= distance; j++) {<br>          if (x[i][j] == Integer.MAX_VALUE / 2) {<br>            continue;<br>          }<br>          for (int k = j; k &lt;= Math.min(distance, j + mid); k++) {<br>            x[i + 1][k] = Math.min(x[i + 1][k], x[i][j] + Math.abs(p[i] - k));<br>          }<br>        }<br>      }<br>      boolean can = false;<br>      for (int i = 0; i &lt;= distance; i++) {<br>        if (Math.abs(distance - i) &lt;= mid &amp;&amp; x[n][i] &lt;= funds) {<br>          can = true;<br>        }<br>      }<br>      if (can) {<br>        r = mid;<br>      } else {<br>        l = mid + 1;<br>      }<br>    }<br>    return l;<br>  }<br><br>}<br><br><br><br>// Powered by FileEdit<br>// Powered by RETester [based on ExampleBuilder]<br>// Powered by CodeProcessor<br></td>