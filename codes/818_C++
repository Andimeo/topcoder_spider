<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;iostream&gt;<br>#include &lt;set&gt;<br>#include &lt;map&gt;<br>#include &lt;math.h&gt;<br>#include &lt;sstream&gt;<br>using namespace std;<br>class Average {<br>  public:<br>  int belowAvg(vector &lt;int&gt; math, vector &lt;int&gt; verbal) {<br>    <br>// BEGIN CUT HERE<br>    static bool s_FirstTime = true; if (s_FirstTime) { s_FirstTime = false; run_test(-1); }<br>// END CUT HERE<br> <br>double avg=0;<br>int ret=0;<br>for(int x=0; x&lt;math.size(); x++)<br>{<br>  avg+=math[x];<br>  avg+=verbal[x];<br>}<br>avg/=math.size();<br>for(int x=0; x&lt;math.size(); x++)<br>{<br>  if(math[x]+verbal[x]&lt;avg)<br>  ret++;<br>}<br>return ret;<br>  } // end method<br>  <br>// BEGIN CUT HERE<br>  public:<br>  void run_test(int Case) { if ((Case == -1) || (Case == 0)) test_case_0(); if ((Case == -1) || (Case == 1)) test_case_1(); if ((Case == -1) || (Case == 2)) test_case_2(); if ((Case == -1) || (Case == 3)) test_case_3(); }<br>  private:<br>  template &lt;typename T&gt; string print_array(const vector&lt;T&gt; &amp;V) { ostringstream os; os &lt;&lt; "{ "; for (typename vector&lt;T&gt;::const_iterator iter = V.begin(); iter != V.end(); ++iter) os &lt;&lt; '\"' &lt;&lt; *iter &lt;&lt; "\","; os &lt;&lt; " }"; return os.str(); }<br>  void verify_case(int Case, const int &amp;Expected, const int &amp;Received) { cerr &lt;&lt; "Test Case #" &lt;&lt; Case &lt;&lt; "..."; if (Expected == Received) cerr &lt;&lt; "PASSED" &lt;&lt; endl; else { cerr &lt;&lt; "FAILED" &lt;&lt; endl; cerr &lt;&lt; "\tExpected: \"" &lt;&lt; Expected &lt;&lt; '\"' &lt;&lt; endl; cerr &lt;&lt; "\tReceived: \"" &lt;&lt; Received &lt;&lt; '\"' &lt;&lt; endl; } }<br>  void test_case_0() { int Arr0[] = {200,250,700,700}; vector &lt;int&gt; Arg0(Arr0, Arr0 + (sizeof(Arr0) / sizeof(Arr0[0]))); int Arr1[] = {400,400,400,400}; vector &lt;int&gt; Arg1(Arr1, Arr1 + (sizeof(Arr1) / sizeof(Arr1[0]))); int Arg2 = 2; verify_case(0, Arg2, belowAvg(Arg0, Arg1)); }<br>  void test_case_1() { int Arr0[] = {500,400}; vector &lt;int&gt; Arg0(Arr0, Arr0 + (sizeof(Arr0) / sizeof(Arr0[0]))); int Arr1[] = {300,400}; vector &lt;int&gt; Arg1(Arr1, Arr1 + (sizeof(Arr1) / sizeof(Arr1[0]))); int Arg2 = 0; verify_case(1, Arg2, belowAvg(Arg0, Arg1)); }<br>  void test_case_2() { int Arr0[] = {293}; vector &lt;int&gt; Arg0(Arr0, Arr0 + (sizeof(Arr0) / sizeof(Arr0[0]))); int Arr1[] = {799}; vector &lt;int&gt; Arg1(Arr1, Arr1 + (sizeof(Arr1) / sizeof(Arr1[0]))); int Arg2 = 0; verify_case(2, Arg2, belowAvg(Arg0, Arg1)); }<br>  void test_case_3() { int Arr0[] = {400,400,400,400,400,400,401}; vector &lt;int&gt; Arg0(Arr0, Arr0 + (sizeof(Arr0) / sizeof(Arr0[0]))); int Arr1[] = {400,400,400,400,400,400,400}; vector &lt;int&gt; Arg1(Arr1, Arr1 + (sizeof(Arr1) / sizeof(Arr1[0]))); int Arg2 = 6; verify_case(3, Arg2, belowAvg(Arg0, Arg1)); }<br> <br>// END CUT HERE<br> <br>}; // end class<br> <br>// Powered by PopsEdit<br>// Powered by TZTester 1.01 [25-Feb-2003]<br>// Powered by CodeProcessor<br></td>