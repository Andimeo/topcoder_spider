<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>import java.math.*;<br>import java.io.*;<br>import java.text.*;<br>import java.util.regex.*;<br>import static java.util.Arrays.*;<br>import static java.lang.Math.*;<br>import static java.lang.Integer.parseInt;<br> <br> <br> <br>class Frac implements Comparable{<br>  BigInteger u, d;<br>  public Frac(long up, long down){<br>    u = new BigInteger(Long.toString(up));<br>    d = new BigInteger(Long.toString(down));<br>    reduce();<br>  }<br>  public Frac(BigInteger up, BigInteger down){<br>    u = up;<br>    d = down;<br>    reduce();<br>  }<br>  Frac add(Frac f){<br>    BigInteger gcd = d.gcd(f.d);<br>    if(gcd.equals(BigInteger.ZERO)) gcd = BigInteger.ONE;<br>    BigInteger adjMe = f.d.divide(gcd);<br>    BigInteger adjIt = d.divide(gcd);<br>    BigInteger under = adjMe.multiply(d);<br>    return new Frac(adjMe.multiply(u).add(adjIt.multiply(f.u)), under);<br>  }<br>  Frac mult(Frac f){<br>    return new Frac(u.multiply(f.u), d.multiply(f.d));<br>  }<br>  public int compareTo(Object o){<br>    Frac f = (Frac)o;<br>    return u.multiply(f.d).compareTo(f.u.multiply(d));<br>  }<br>  public String toString(){<br>    return u+"/"+d;<br>  }<br>  private void reduce(){<br>    BigInteger gcd = u.gcd(d);<br>    if(!gcd.equals(BigInteger.ZERO) &amp;&amp; !gcd.equals(BigInteger.ONE)){<br>      u = u.divide(gcd);<br>      d = d.divide(gcd);<br>    }<br>    if(d.signum() &lt; 0){<br>      d = d.negate();<br>      u = u.negate();<br>    }<br>  }<br>  Frac gcd(Frac f){<br>    return new Frac(u.gcd(f.u), d.gcd(f.d));<br>  }<br> <br>}<br> <br>public class KeysInBoxes {<br>  public String getAllKeys(int N, int M) {<br>    Frac ans = go(N,M);<br>    return ans+"";<br>  }<br>  Frac[][] memo = new Frac[30][30];<br>  Frac go(int left, int bs){<br>    if(left == 0) return new Frac(1,1);<br>    if(bs == 0) return new Frac(0,1);<br>    if(memo[left][bs] != null) return memo[left][bs];<br>    <br>    Frac ret = new Frac(0,1);<br>    Frac acc = new Frac(1,1);<br>    for(int i = 1; i &lt;= left; i++){<br>      Frac p = acc.mult(new Frac(1,left-i+1));<br>      ret = ret.add(p.mult(go(left-i, bs-1)));<br>      acc = acc.mult(new Frac(left-i,left-i+1));<br>    }<br>    return memo[left][bs] = ret;<br>  }<br> <br>}<br> <br>// Powered by PopsEdit<br>// Powered by CodeProcessor<br></td>