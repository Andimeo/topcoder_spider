<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;bitset&gt;<br>#include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;map&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cstring&gt;<br>#include &lt;cassert&gt;<br>#include &lt;set&gt;<br>#include &lt;iostream&gt;<br>#include &lt;sstream&gt;<br>#include &lt;cstddef&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;utility&gt;<br>#include &lt;iterator&gt;<br>#include &lt;numeric&gt;<br>#include &lt;list&gt;<br>#include &lt;complex&gt;<br> <br>using namespace std;<br> <br>typedef vector&lt;int&gt; vi;<br>typedef vector&lt;string&gt; vs;<br>typedef long long ll;<br>typedef complex&lt;double&gt; pnt;<br>typedef pair&lt;int, int&gt; pii;<br> <br>#define RA(x) (x).begin(), (x).end()<br>#define FE(i, x) for (typeof((x).begin()) i = (x).begin(); i != (x).end(); i++)<br>#define SZ(x) ((int) (x).size())<br> <br> <br>class SausagesProductionScheduler<br>{<br>public:<br>    int maxCount(vector &lt;string&gt; lowerPercentage, vector &lt;string&gt; upperPercentage, vector &lt;int&gt; limits);<br>};<br> <br>typedef bitset&lt;5001&gt; bs;<br> <br>int SausagesProductionScheduler::maxCount(vector &lt;string&gt; LP, vector &lt;string&gt; UP, vector &lt;int&gt; lims)<br>{<br>    int N = LP.size();<br>    int mins[60];<br>    int maxs[60];<br> <br>    for (int i = 0; i &lt; N; i++)<br>    {<br>        int l1, h1, l2, h2;<br>        sscanf(LP[i].c_str(), "%d %d", &amp;l1, &amp;l2);<br>        sscanf(UP[i].c_str(), "%d %d", &amp;h1, &amp;h2);<br>        mins[i] = max(l1, 100 - h2);<br>        maxs[i] = min(h1, 100 - l2);<br>    }<br> <br>    bs pos[101];<br>    pos[0][0] = true;<br>    for (int i = 0; i &lt; N; i++)<br>        for (int j = 100; j &gt; 0; j--)<br>            for (int k = mins[i]; k &lt;= maxs[i]; k++)<br>                pos[j] |= pos[j - 1] &lt;&lt; k;<br>    for (int i = 100; i &gt;= 0; i--)<br>    {<br>        int low = max(100 * i - lims[1], 0);<br>        int high = lims[0];<br>        for (int j = low; j &lt;= high; j++)<br>            if (pos[i][j]) return i;<br>    }<br>    return 0;<br>}<br> <br> <br>// Powered by FileEdit<br></td>