<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;algorithm&gt;<br>#include &lt;cassert&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cstring&gt;<br>#include &lt;deque&gt;<br>#include &lt;iostream&gt;<br>#include &lt;map&gt;<br>#include &lt;queue&gt;<br>#include &lt;set&gt;<br>#include &lt;sstream&gt;<br>#include &lt;string&gt;<br>#include &lt;utility&gt;<br>#include &lt;vector&gt;<br>using namespace std;<br> <br>#line 20<br>#define FORE(i, a, b)   for(int i = int(a); i &lt;= int(b); ++i)<br>#define REPE(i, n)      FORE(i, 0, n)<br> <br>#line 174<br>struct Barracks {<br>    int attack(int myUnits, int barHp, int unitsPerRound);<br>};<br> <br>#line 317<br>const int inf = 999999999;<br>int U, B, R;<br> <br>int calc(int T)<br>{<br>    int b = B, mu = U, ou = 0, rounds = 0;<br> <br>#line 326<br>    while (b &gt;= T)<br>    {<br>        if (ou &gt;= mu) return inf;<br>        b -= mu - ou;<br>        ou = 0;<br>        if (b &gt; 0) ou += R;<br>        ++rounds;<br>    }<br> <br> <br>    while (b &gt; 0)<br>    {<br>        if (mu &lt;= 0) return inf;<br>        if (b &gt;= mu)<br>        {<br>            b -= mu;<br>        }<br>        else<br>        {<br>            ou -= mu - b;<br>            b = 0;<br>        }<br>        mu -= ou;<br>        if (b &gt; 0) ou += R;<br>        ++rounds;<br>    }<br> <br> <br>    while (ou &gt; 0)<br>    {<br>        if (mu &lt;= 0) return inf;<br>        ou -= mu;<br>        if (ou &gt; 0) mu -= ou;<br>        ++rounds;<br>    }<br> <br>    return rounds;<br>}<br> <br>int Barracks::attack(int myUnits, int barHp, int unitsPerRound)<br>{<br>    U = myUnits;<br>    B = barHp;<br>    R = unitsPerRound;<br> <br>    int res = inf;<br>    REPE(t, barHp) res = min(res, calc(t));<br>    return res == inf ? -1 : res;<br>}<br></td>