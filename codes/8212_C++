<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;vector&gt;<br>#include &lt;list&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;deque&gt;<br>#include &lt;stack&gt;<br>#include &lt;bitset&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;functional&gt;<br>#include &lt;numeric&gt;<br>#include &lt;utility&gt;<br>#include &lt;sstream&gt;<br>#include &lt;iostream&gt;<br>#include &lt;iomanip&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;ctime&gt;<br> <br>using namespace std;<br> <br>class ProgrammingDevice {<br>public:<br>  int minPackets(vector &lt;int&gt;, vector &lt;int&gt;, int);<br>};<br> <br>typedef long long ll;<br>typedef pair&lt;ll, ll&gt; pii;<br>#define mp make_pair<br> <br>int ProgrammingDevice::minPackets(vector &lt;int&gt; offset, vector &lt;int&gt; size, int maxData) {<br>  vector&lt;pii&gt; P;<br>  int N = offset.size();<br>  for (int i = 0; i &lt; N; i++) {<br>    P.push_back(mp(offset[i], size[i]));<br>  }<br>  sort(P.begin(), P.end());<br>  int res = 0;<br>  ll curend = -1;<br>  for (int i = 0; i &lt; N; i++) {<br>    if (curend &gt;= P[i].first) {<br>      if (curend &gt;= P[i].first + P[i].second) continue;<br>      ll K = (P[i].first + P[i].second - curend)/maxData;<br>      res += K;<br>      curend += maxData*K;<br>      while (curend &lt; P[i].first + P[i].second){<br>        curend += maxData;<br>        res++;<br>      }<br>    } else {<br>      curend = P[i].first; i--;<br>    }<br>  }<br>  return res;<br>}<br></td>