<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;algorithm&gt;<br>#include &lt;bitset&gt;<br>#include &lt;cctype&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cstring&gt;<br>#include &lt;ctime&gt;<br>#include &lt;deque&gt;<br>#include &lt;fstream&gt;<br>#include &lt;functional&gt;<br>#include &lt;iomanip&gt;<br>#include &lt;iostream&gt;<br>#include &lt;list&gt;<br>#include &lt;map&gt;<br>#include &lt;numeric&gt;<br>#include &lt;queue&gt;<br>#include &lt;set&gt;<br>#include &lt;sstream&gt;<br>#include &lt;stack&gt;<br>#include &lt;string&gt;<br>#include &lt;utility&gt;<br>#include &lt;vector&gt;<br>using namespace std;<br> <br>typedef long long ll;<br> <br>class ArithmeticalMean<br>{<br>  public:<br>  <br>  int N;<br>  int first, last;<br>  vector &lt;ll&gt; nums;<br>  vector &lt;ll&gt; sums [20];<br>  <br>  long long howMany (vector &lt;int&gt; elements, int L, int H)<br>  {<br>    for (int i = 0; i &lt; elements.size (); i++)<br>      nums.push_back (elements [i]);<br>    <br>    N = nums.size ();<br>    <br>    first = (N &gt;&gt; 1);<br>    last = N - first;<br>    <br>    <br>    for (int mask = 0; mask &lt; (1 &lt;&lt; last); mask++)<br>    {<br>      ll s = 0;<br>      <br>      for (int i = 0; i &lt; last; i++)<br>        if (mask &amp; (1 &lt;&lt; i))<br>          s += nums [first + i];<br>      <br>      sums [__builtin_popcount (mask)].push_back (s);<br>    }<br>    <br>    <br>    for (int i = 0; i &lt; 20; i++)<br>      sort (sums [i].begin (), sums [i].end ());<br>    <br>    <br>    ll total = 0;<br>    <br>    for (int mask = 0; mask &lt; (1 &lt;&lt; first); mask++)<br>    {<br>      ll s = 0;<br>      <br>      for (int i = 0; i &lt; first; i++)<br>        if (mask &amp; (1 &lt;&lt; i))<br>          s += nums [i];<br>      <br>      ll count = __builtin_popcount (mask);<br>      <br>      <br>      if (count &gt; 0 &amp;&amp; s &gt;= L * count &amp;&amp; s &lt;= H * count)<br>        total++;<br>      <br>      <br>      for (int num = 1; num &lt;= last; num++)<br>      {<br>        ll lobound = L * (count + num) - s;<br>        ll hibound = H * (count + num) - s;<br>        <br>        total += upper_bound (sums [num].begin (), sums [num].end (), hibound) - lower_bound (sums [num].begin (), sums [num].end (), lobound);<br>      }<br>    }<br>    <br>    return total;<br>  }<br>};<br> <br> <br>// Powered by [KawigiEdit] 2.0!<br></td>