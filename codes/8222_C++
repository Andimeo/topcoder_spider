<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;string&gt;<br>#include &lt;iostream&gt;<br>#include &lt;sstream&gt;<br>#include &lt;vector&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cctype&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;queue&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;cassert&gt;<br>using namespace std;<br> <br>/*PREWRITTEN CODE BEGINS HERE*/<br>#define SIZE(x) (int)((x).size())<br> <br>#define REP(i,n) for(int i=0,_n=(n); i&lt;_n; ++i)<br>#define FOR(i,a,b) for(int i=(a),_b=(b); i&lt;=_b; ++i)<br>#define RESET(a,c) memset(a,(c),sizeof(a))<br> <br> <br>/*PREWRITTEN CODE ENDS HERE*/<br> <br>typedef long double LD;<br>const int INF = 1010000000;<br>const double EPS = 1e-9;<br>/*SOLUTION BEGINS HERE*/<br> <br> <br>class DietPlan {<br>public:<br>  string chooseDinner(string diet, string breakfast, string lunch) {<br>    int jest[300];<br>  RESET(jest,0);<br>  REP(i, SIZE(diet))<br>    jest[ diet[i] ] ++;<br>  REP(i, SIZE(breakfast))<br>    jest[ breakfast[i] ] --;<br>  REP(i, SIZE(lunch))<br>    jest[ lunch[i] ] --;<br>  <br>  string ret;<br>  FOR(i,'A','Z'){<br>    if(jest[i] &lt; 0) return "CHEATER";<br>    if(jest[i] &gt; 0) ret += string(1,(char)i);<br>  }<br>  <br>  return ret;<br>  }   <br>  <br> <br>};<br> <br> <br> <br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003]<br>// Powered by CodeProcessor<br></td>