<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;cctype&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdarg&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cstring&gt;<br><br>#include &lt;sys/resource.h&gt;<br>#include &lt;sys/time.h&gt;<br>#include &lt;unistd.h&gt;<br><br>#include &lt;algorithm&gt;<br>#include &lt;deque&gt;<br>#include &lt;functional&gt;<br>#include &lt;iostream&gt;<br>#include &lt;iomanip&gt;<br>#include &lt;limits&gt;<br>#include &lt;list&gt;<br>#include &lt;map&gt;<br>#include &lt;numeric&gt;<br>#include &lt;queue&gt;<br>#include &lt;set&gt;<br>#include &lt;sstream&gt;<br>#include &lt;stack&gt;<br>#include &lt;string&gt;<br>#include &lt;utility&gt;<br>#include &lt;vector&gt;<br><br>#include &lt;ext/algorithm&gt;<br>#include &lt;ext/hash_map&gt;<br>#include &lt;ext/hash_set&gt;<br>#include &lt;ext/numeric&gt;<br><br>using namespace std;<br>using namespace __gnu_cxx;<br><br>template&lt;class T, class V&gt;<br>vector&lt;T&gt; operator,(vector&lt;T&gt; v, V t) {<br>    v.push_back(t);<br>    return v;<br>}<br><br>#define FORI(p, x) for (int i = p; i &lt; (int)(x); ++i)<br>#define FORJ(p, x) for (int j = p; j &lt; (int)(x); ++j)<br>#define S size()<br><br>#define VI vector&lt;int&gt;<br><br>struct RoadConstruction{<br>    int getExitTime(vector &lt;string&gt; currentLanes);<br>    <br>};<br><br>int RoadConstruction::getExitTime(vector &lt;string&gt; currentLanes) {<br>    int n = currentLanes.S;<br>    VI vi(currentLanes.S, 0);<br>    int res = 0;<br>    while (true) {<br>        bool ok = false;<br>        FORI (0, n) if (!currentLanes[i].empty() &amp;&amp; vi[i] == 1) {<br>            FORJ (0, i) if (!currentLanes[j].empty()) vi[j]++;<br>            if (currentLanes[i][0] == 'D') return res;<br>            currentLanes[i].erase(currentLanes[i].begin());<br>            vi[i] = 0;<br>            ++res;<br>            ok = true;<br>            break;<br>        }<br>        if (!ok) for (int i = n - 1; i &gt;= 0; --i) if (!currentLanes[i].empty()) {<br>            FORJ (0, i) if (!currentLanes[j].empty()) vi[j]++;<br>            if (currentLanes[i][0] == 'D') return res;<br>            currentLanes[i].erase(currentLanes[i].begin());<br>            vi[i] = 0;<br>            ++res;<br>            ok = true;<br>            break;<br>        }<br>    }<br>}<br>// Powered by Krzysan's Cleaner 1.4-6a<br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003]<br>// Powered by CodeProcessor<br></td>