<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;algorithm&gt;<br>#include &lt;iostream&gt;<br>#include &lt;sstream&gt;<br>#include &lt;vector&gt;<br>#include &lt;cmath&gt;<br>#include &lt;map&gt;<br>using namespace std;<br><br>struct PlayerExtraction {<br>  vector&lt;string&gt; photo;<br>  int seen[64][64], width, height;<br>  int num, minX, maxX, minY, maxY;<br><br>  char get(int y, int x) {<br>    if (y &lt; 0 || y &gt;= (int)photo.size()) return ' ';<br>    if (x &lt; 0 || x &gt;= (int)photo[y].size()) return ' ';<br>    return photo[y][x];<br>  }<br><br>  void dfs(int y, int x, char teamId) {<br>    if (get(y, x) != teamId) return;<br>    if (seen[y][x]) return;<br>    seen[y][x] = 1;<br><br>    num++;<br>    minX &lt;?= x;<br>    maxX &gt;?= x;<br>    minY &lt;?= y;<br>    maxY &gt;?= y;<br><br>    dfs(y - 1, x, teamId);<br>    dfs(y + 1, x, teamId);<br>    dfs(y, x - 1, teamId);<br>    dfs(y, x + 1, teamId);<br>  }<br><br>  vector &lt;string&gt; extractPlayers(vector &lt;string&gt; photo_, int k, int threshold) {<br>    photo = photo_;<br>    height = photo.size();<br>    width = photo[0].size();<br><br>    vector&lt;pair&lt;int, int&gt; &gt; res;<br><br>    memset(seen, 0, sizeof(seen));<br>    for (int y = 0; y &lt; height; y++) {<br>      for (int x = 0; x &lt; width; x++) {<br>        if (get(y, x) != '0'+k) continue;<br>        if (seen[y][x]) continue;<br><br>        num = 0;<br>        minX = maxX = x;<br>        minY = maxY = y;<br>        dfs(y, x, get(y, x));<br><br>        //printf("dfs y0=%d x0=%d: num=%d y=%d..%d x=%d..%d\n", y, x, num, minY, maxY, minX, maxX);<br><br>        if (num*4 &lt; threshold) continue;<br><br>        int avgX = (minX*2 + (maxX+1)*2) / 2;<br>        int avgY = (minY*2 + (maxY+1)*2) / 2;<br>        res.push_back(make_pair(avgX, avgY));<br>      }<br>    }<br><br>    sort(res.begin(), res.end());<br>    vector&lt;string&gt; resS;<br>    for (int i = 0; i &lt; (int)res.size(); i++) {<br>      char buf[100];<br>      sprintf(buf, "%d %d", res[i].first, res[i].second);<br>      resS.push_back(string(buf));<br>    }<br>    return resS;<br>  }<br>};<br><br><br>// Powered by FileEdit<br></td>