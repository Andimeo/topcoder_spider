<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;sstream&gt;<br>#include &lt;iostream&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;math.h&gt;<br>#include &lt;map&gt;<br>using namespace std;<br> <br>#define lint long long<br>#define ss stringstream<br>#define sz size()<br>#define pb push_back<br>#define FOR(i,n) for(i=0;i&lt;n;i++)<br>#define SFOR(i,m,n) for(i=m;i&lt;n;i++)<br>#define FORD(i,n) for(i=n-1;i&gt;=0;i--)<br> <br>class PirateTreasure {<br>  public:<br>  double getDistance(vector &lt;int&gt; steps, vector &lt;string&gt; directions) {<br>    map&lt;string, double&gt; dx, dy;<br>    dx["EAST"] = 1.0;<br>    dy["EAST"] = 0.0;<br>    dx["WEST"] = -1.0;<br>    dy["WEST"] = 0.0;<br>    dx["SOUTH"] = 0.0;<br>    dy["SOUTH"] = -1.0;<br>    dx["NORTH"] = 0.0;<br>    dy["NORTH"] = 1.0;<br>    dx["NORTHEAST"] = 1.0/sqrt(2.0);<br>    dy["NORTHEAST"] = 1.0/sqrt(2.0);<br>    dx["NORTHWEST"] = -1.0/sqrt(2.0);<br>    dy["NORTHWEST"] = 1.0/sqrt(2.0);<br>    dx["SOUTHEAST"] = 1.0/sqrt(2.0);<br>    dy["SOUTHEAST"] = -1.0/sqrt(2.0);<br>    dx["SOUTHWEST"] = -1.0/sqrt(2.0);<br>    dy["SOUTHWEST"] = -1.0/sqrt(2.0);<br>    double x = 0, y = 0;<br>    int i;<br>    FOR(i,steps.sz) {<br>      x += dx[directions[i]]*steps[i];<br>      y += dy[directions[i]]*steps[i];<br>    }<br>    return sqrt(x*x+y*y);<br>  }<br>};<br> <br>// Powered by PopsEdit<br></td>