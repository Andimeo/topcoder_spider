<td class="problemText" colspan="8" valign="middle" align="left">
            using System.Text;<br>using System;<br>using System.Text.RegularExpressions;<br>using System.Collections;<br>using System.Collections.Generic;<br><br>public class Pair<br>{<br>    public int x, y;<br>    public Pair(int x, int y)<br>    {<br>        this.x  = x;<br>        this.y = y;<br>    }<br><br>}<br><br>public class FloodRelief {<br>    int n;<br>    int m;<br>    string[] v;<br><br>    List&lt;Pair&gt; getMin(string [] v)<br>    {<br>        List&lt;Pair&gt; res = new List&lt;Pair&gt;();<br>        int m = 'z';<br>        for (int i = 0; i &lt; n; ++i)<br>        {<br>            for (int j = 0; j &lt; this.m; ++j)<br>            {<br>                m = Math.Min(v[i][j], m);<br>            }<br>        }<br>        for (int i = 0; i &lt; n; ++i)<br>        {<br>            for (int j = 0; j &lt; this.m; ++j)<br>            {<br>                if (m == v[i][j])<br>                    res.Add(new Pair(i, j));<br>            }<br>        }<br>        return res;<br>    }<br><br>    int best = Int32.MaxValue;<br><br>    int dfs(int x, int y, string [] v, char prev)<br>    {<br>        if (x &lt; 0 || x &gt;= n || y &lt; 0 || y &gt;= m)<br>            return 0;<br>        if (v[x][y] == 'z' + 1)<br>            return 0;<br>        if (prev &gt; v[x][y])<br>            return 0;<br>        StringBuilder sb = new StringBuilder(v[x]);<br>        sb[y] = (char)('z'+1);<br>        prev = v[x][y];<br>        v[x] = sb.ToString();<br>        int res = 1;<br>        res += dfs(x+1, y, v, prev);<br>        res += dfs(x - 1, y, v,prev );<br>        res += dfs(x, y + 1, v,prev );<br>        res += dfs(x, y - 1, v,prev );<br>        return res;<br>    }<br><br>    string[] put(Pair p, string[] v, ref int removed )<br>    {<br>        string[] res = new string[n];<br>        removed = dfs(p.x, p.y, v, (char)('a'-1));<br>        return v;<br>    }<br><br>    string [] Copy(string [] v)<br>    {<br>        string[] res = new string[n];<br>        for (int i = 0; i &lt; n; ++i)<br>            res[i] = v[i];<br>        return res;<br>    }<br><br>    void f(int left, string[] v, int used)<br>    {<br>        if (used &gt; best)<br>            return;<br>        if (left == 0)<br>        {<br>            best = used;<br>            return;<br>        }<br>        List&lt;Pair&gt; a = getMin(v);<br>        int t = 0;<br>        for (int i = 0; i &lt; 1; ++i)//!!!; ++i)<br>        {<br>            string[] ns = put(a[i], Copy(v), ref t);<br>            f(left - t, ns, used + 1);<br>        }<br>    }<br><br><br>    public int minimumPumps(string[] heights) <br>    {<br>        n = heights.Length;<br>        m = heights[0].Length;<br>        v = heights;<br>        f(n * m, v, 0);<br>        return best;<br><br>    }<br><br>}<br><br><br><br>// Powered by FileEdit<br>// Powered by CodeProcessor<br></td>