<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;vector&gt;<br>#include &lt;list&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;deque&gt;<br>#include &lt;stack&gt;<br>#include &lt;bitset&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;functional&gt;<br>#include &lt;numeric&gt;<br>#include &lt;utility&gt;<br>#include &lt;sstream&gt;<br>#include &lt;iostream&gt;<br>#include &lt;iomanip&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;ctime&gt;<br> <br>using namespace std;<br> <br>#define FOR(i,a,b) for(int i=(a);i&lt;(b);++i)<br>#define REP(i,n) FOR(i,0,n)<br>#define ALL(a) (a).begin(),a.end()<br>#define SORT(a) sort(ALL(a))<br>#define SZ(a) ((int) a.size())<br>#define pb push_back<br> <br>class JumpingBoard {<br>public:<br>  int maxJumps(vector &lt;string&gt;);<br>};<br> <br>typedef pair &lt;int, int&gt; PII;<br> <br>bool b[100][100];<br>bool c[100][100];<br> <br>int vy[4] = {-1, 1, 0, 0};<br>int vx[4] = {0, 0, -1, 1};<br> <br>int JumpingBoard::maxJumps(vector &lt;string&gt; a) {<br>  memset (b, 0, sizeof (b));<br>  b[0][0] = true;<br>  REP (q, 3000) {<br>    memset (c, 0, sizeof (c));    <br>    bool ha = false;<br>    REP (i, SZ (a))<br>      REP (j, SZ (a[0]))<br>        if (a[i][j] != 'H' &amp;&amp; b[i][j]) {<br>          ha = true;<br>          REP (v, 4) {<br>            int y = i + vy[v] * (a[i][j] - '0');<br>            int x = j + vx[v] * (a[i][j] - '0');<br>            if (y &lt; 0 || x &lt; 0 || y &gt;= SZ (a) || x &gt;= SZ(a[0]))<br>              continue;<br>            c[y][x] = true;<br>          }<br>        }<br>    if (!ha) return q;<br>    memcpy (b, c, sizeof (b));<br>  }<br>  return -1;<br>}<br> <br> <br>//Powered by [KawigiEdit] 2.0!<br></td>