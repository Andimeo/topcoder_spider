<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections.Generic;<br>using System.Text;<br><br>public class UnfriendlyMultiPermutation {<br>  const int MOD = 1000000007;<br><br>  class State {<br>    public int[] z;<br>    public int last;<br><br>    public State() {<br>      z = new int[6];<br>      last = 0;<br>    }<br><br>    public State(State s, int newLast, int change) {<br>      z = (int[]) s.z.Clone();<br>      --z[change];<br>      ++z[change - 1];<br>      last = newLast;<br>    }<br><br>    public override bool Equals(Object o) {<br>      State s = (State) o;<br>      if (last != s.last)<br>  return false;<br>      for (int i = 0; i &lt; 6; ++i)<br>  if (z[i] != s.z[i])<br>    return false;<br>      return true;<br>    }<br><br>    public override int GetHashCode() {<br>      int zz = last;<br>      for (int i = 0; i &lt; 6; ++i)<br>  zz = zz * 3137 + z[i];<br>      return zz;<br>    }<br>  }<br><br>  Dictionary&lt;State, int&gt; ans;<br><br>  int getIt(State s) {<br>    if (ans.ContainsKey(s))<br>      return ans[s];<br>    int res = 0;<br>    bool any = false;<br>    for (int next = 1; next &lt; 6; ++next) {<br>      int cnt = s.z[next];<br>      if (cnt &gt; 0)<br>  any = true;<br>      if (next == s.last)<br>  --cnt;<br>      if (cnt &gt; 0) {<br>  res = (int) ((res + (long) cnt * getIt(new State(s, next - 1, next))) % MOD);<br>      }<br>    }<br>    if (!any)<br>      ++res;<br>    ans[s] = res;<br>    return res;<br>  }<br><br>  public int count(int n, int k) {<br>    ans = new Dictionary&lt;State, int&gt;();<br>    State start = new State();<br>    start.z[k] = n;<br>    return getIt(start);<br>  }<br>}<br><br><br>// Powered by FileEdit<br></td>