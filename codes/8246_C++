<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;cstdio&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;sstream&gt;<br>#include &lt;iostream&gt;<br>#include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;list&gt;<br>#include &lt;queue&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;cmath&gt;<br>#include &lt;algorithm&gt;<br>using namespace std;<br><br>#define PB push_back<br>#define SZ(v) ((int)(v).size())<br>#define MP make_pair<br>#define FOR(i,a,b) for(int i=(a);i&lt;(b);++i)<br>#define REP(i,n) FOR(i,0,n)<br>#define FORE(i,a,b) for(int i=(a);i&lt;=(b);++i)<br>#define REPE(i,n) FORE(i,0,n)<br>#define FORSZ(i,a,v) FOR(i,a,SZ(v))<br>#define REPSZ(i,v) REP(i,SZ(v))<br>#define VAR(a,b) __typeof(b) a=b<br>#define FORIT(i,v) for(VAR(i,(v).begin());i!=(v).end();++i)<br><br>typedef long long ll; typedef pair&lt;int,int&gt; PII;<br>typedef vector&lt;int&gt; VI; typedef vector&lt;VI&gt; VVI;<br>typedef vector&lt;double&gt; VD; typedef vector&lt;VD&gt; VVD;<br>typedef vector&lt;ll&gt; VLL; typedef vector&lt;VLL&gt; VVLL;<br>typedef vector&lt;PII&gt; VPII; typedef vector&lt;VPII&gt; VVPII;<br>typedef vector&lt;string&gt; VS; typedef vector&lt;VS&gt; VVS;<br><br>template&lt;class T&gt; T cast(const string &amp;s) { T ret; ostringstream a; a&lt;&lt;s; istringstream b(a.str()); b&gt;&gt;ret; return ret; }<br>template&lt;class T&gt; vector&lt;T&gt; split(const string &amp;s,const string &amp;x=" ") { vector&lt;T&gt; ret; string cur; REPSZ(i,s) if(x.find(s[i])==string::npos) cur+=s[i]; else if(cur!="") ret.PB(cast&lt;T&gt;(cur)),cur=""; if(cur!="") ret.PB(cast&lt;T&gt;(cur)); return ret; }<br><br>const int MOD=1000000007;<br><br>map&lt;VI,int&gt; mem[6];<br>ll go(VI &amp;x,int last) {<br>//  REPSZ(i,x) printf("%d ",x[i]); printf("(%d)\n",last);<br>  if(mem[last+1].count(x)) return mem[last+1][x];<br>  ll ret=0;<br>  bool done=true;<br>  REPSZ(i,x) if(x[i]&gt;0) {<br>    done=false;<br>    --x[i]; if(i&gt;0) ++x[i-1];<br>    ret+=(i==last?x[i]:x[i]+1)*go(x,i-1);<br>    ++x[i]; if(i&gt;0) --x[i-1];<br>  }<br>  if(done) ret=1;<br>  ret%=MOD;<br>//  REPSZ(i,x) printf("%d ",x[i]); printf("(%d) = %lld\n",last,ret);<br>  if(last!=-1) mem[last+1][x]=ret;<br>  return ret;<br>}<br><br>class UnfriendlyMultiPermutation {<br>public:<br>  int count(int n, int k) {<br>    VI left(k); left[k-1]=n;<br>    return go(left,-1);<br>  }<br>};<br></td>