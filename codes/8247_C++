<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;set&gt;<br>#include &lt;algorithm&gt;<br><br>//#line 126 "BinaryCodes.cpp"<br><br>using namespace std;<br>class BinaryCodes<br>{ <br>  public: <br>  int ambiguous(vector &lt;string&gt; code) <br>  { <br>    set&lt;vector&lt;pair&lt;int, pair&lt;int, char&gt; &gt; &gt; &gt; statedata;<br><br>    for (int i = 0; i &lt; code.size(); i++)<br>    {<br>      if (code[i].length() == 0) return 0;<br>    }<br><br>    <br>    vector&lt;vector&lt;pair&lt;int, pair&lt;int, char&gt; &gt; &gt; &gt; states[2];<br>    vector&lt;pair&lt;int, pair&lt;int, char&gt; &gt; &gt; state;<br>    state.push_back(make_pair(1, make_pair(0, code[0].length() - 1)));    <br><br>    states[0].push_back(state);<br><br>    bool now = 0;<br>    int len = 0;<br>    while (states[now].size())<br>    {<br>      states[!now].clear();<br>      for (int i = 0; i &lt; 2; i++)<br>      {<br>        for (int j = 0; j &lt; states[now].size(); j++)<br>        {<br>          vector&lt;pair&lt;int, pair&lt;int, char&gt; &gt; &gt;&amp; fromstate = states[now][j];<br><br>          state.clear();<br>          long long countstart = 0;<br><br>          for (int k = 0; k &lt; fromstate.size(); k++)<br>          {<br>            countstart +=<br>              fromstate[k].first * (code[fromstate[k].second.first].length() - 1 == fromstate[k].second.second);<br>          }<br><br>          long long sum = 0;<br>          bool ok = false;<br>          if (countstart)<br>          {<br>            for (int k = 0; k &lt; code.size(); k++)<br>            {<br>              if (code[k][0] == i + 48)<br>              {<br>                state.push_back(make_pair(countstart, make_pair(k, 0)));<br>                sum += countstart;<br>                if (sum &gt;= 2) ok = true;<br>              }<br>            }<br>          }<br><br>          for (int k = 0; k &lt; fromstate.size(); k++)<br>          {<br>            if (code[fromstate[k].second.first].length() - 1 != fromstate[k].second.second)<br>            {<br>              if (code[fromstate[k].second.first][fromstate[k].second.second + 1] == i + 48)<br>              {<br>                state.push_back(make_pair(fromstate[k].first, make_pair(fromstate[k].second.first, <br>                  fromstate[k].second.second + 1)));<br><br>                sum += fromstate[k].first;<br>                if (sum &gt;= 2) ok = true;<br>              }<br>            }<br>          }<br><br>          if (ok)<br>          {            <br>            if (statedata.find(state) == statedata.end()) states[!now].push_back(state);<br><br>            if (len) statedata.insert(state);<br>            if (countstart &gt;= 3 &amp;&amp; len) return len;<br><br>          }<br>        }<br>      }<br>      len++;<br>      now = !now;<br>    }<br><br>    return -1;<br>  } <br>  <br> <br>}; <br><br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003]<br>// Powered by CodeProcessor<br></td>