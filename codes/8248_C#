<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections.Generic;<br>using System.Text;<br><br>public class AncientLanguage {<br>  public int minWords(string[] t) {<br>    StringBuilder b = new StringBuilder();<br>    foreach (string x in t)<br>      b.Append(x);<br>    string s = b.ToString();<br>    int n = 26 * 26 + 5;<br>    bool[,] e = new bool[n, n];<br>    for (int i = 0; i &lt; s.Length; ++i) {<br>      char ch = s[i];<br>      char pch = i == 0 ? '?' : s[i - 1];<br>      char nch = i == s.Length - 1 ? '?' : s[i + 1];<br>      int ls = -1;<br>      int le = -1;<br>      int rs = -1;<br>      int re = -1;<br>      if (ch &gt;= 'A' &amp;&amp; ch &lt;= 'Z' &amp;&amp; pch &gt;= 'a' &amp;&amp; pch &lt;= 'z') {<br>  rs = (pch - 'a') * 26 + (ch - 'A');<br>  re = rs;<br>      }<br>      if (ch &gt;= 'a' &amp;&amp; ch &lt;= 'z' &amp;&amp; pch &gt;= 'A' &amp;&amp; pch &lt;= 'Z') {<br>  ls = (pch - 'A') * 26 + (ch - 'a');<br>  le = ls;<br>      }<br>      if (ch &gt;= 'A' &amp;&amp; ch &lt;= 'Z' &amp;&amp; pch == '?') {<br>  rs = n - 5;<br>  re = n - 1;<br>      }<br>      if (ch &gt;= 'a' &amp;&amp; ch &lt;= 'z' &amp;&amp; pch == '?') {<br>  ls = n - 5;<br>  le = n - 1;<br>      }<br>      if (ch &gt;= 'A' &amp;&amp; ch &lt;= 'Z' &amp;&amp; nch &gt;= 'a' &amp;&amp; nch &lt;= 'z') {<br>  ls = (ch - 'A') * 26 + (nch - 'a');<br>  le = ls;<br>      }<br>      if (ch &gt;= 'a' &amp;&amp; ch &lt;= 'z' &amp;&amp; nch &gt;= 'A' &amp;&amp; nch &lt;= 'Z') {<br>  rs = (ch - 'a') * 26 + (nch - 'A');<br>  re = rs;<br>      }<br>      if (ch &gt;= 'A' &amp;&amp; ch &lt;= 'Z' &amp;&amp; nch == '?') {<br>  ls = n - 5;<br>  le = n - 1;<br>      }<br>      if (ch &gt;= 'a' &amp;&amp; ch &lt;= 'z' &amp;&amp; nch == '?') {<br>  rs = n - 5;<br>  re = n - 1;<br>      }<br>      for (int l = ls; l &lt;= le; ++l)<br>  for (int r = rs; r &lt;= re; ++r)<br>    e[l, r] = true;<br>    }<br>    return match(n, e);<br>  }<br><br>  bool[,] e;<br>  int[] m;<br>  int n;<br>  bool[] v;<br><br>  int match(int n, bool[,] e) {<br>    this.e = e;<br>    this.n = n;<br>    m = new int[n];<br>    for (int i = 0; i &lt; n; ++i)<br>      m[i] = -1;<br>    int res = 0;<br>    for (int i = 0; i &lt; n; ++i) {<br>      v = new bool[n];<br>      if (dfs(i)) {<br>  ++res;<br>      }<br>    }<br>    return res;<br>  }<br><br>  bool dfs(int a) {<br>    if (v[a])<br>      return false;<br>    v[a] = true;<br>    for (int i = 0; i &lt; n; ++i)<br>      if (e[a, i]) {<br>  if (m[i] &lt; 0 || dfs(m[i])) {<br>    m[i] = a;<br>    return true;<br>  }<br>      }<br>    return false;<br>  }<br>}<br><br><br>// Powered by FileEdit<br></td>