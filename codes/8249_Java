<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br> <br>public class PolylineUnion {<br>    class Seg {<br>        long x1;<br>        long y1;<br>        long x2;<br>        long y2;<br> <br>        Seg(long x1, long y1, long x2, long y2) {<br>            this.x1 = x1;<br>            this.y1 = y1;<br>            this.x2 = x2;<br>            this.y2 = y2;<br>        }<br> <br>        boolean isect(Seg t) {<br>            if (x1 == x2 &amp;&amp; y1 == y2) {<br>                if (t.x1 == t.x2 &amp;&amp; t.y1 == t.y2) {<br>                    return x1 == t.x1 &amp;&amp; y1 == t.y1;<br>                } else {<br>                    return t.isect(this);<br>                }<br>            } else if (t.x1 == t.x2 &amp;&amp; t.y1 == t.y2) {<br>                return vp(t.x1 - x1, t.y1 - y1, x2 - x1, y2 - y1) == 0 &amp;&amp; inrect(x1, y1, x2, y2, t.x1, t.y1);<br>            }<br> <br>            long a1 = y1 - y2;<br>            long b1 = x2 - x1;<br>            long c1 = a1 * x1 + b1 * y1;<br> <br>            long a2 = t.y1 - t.y2;<br>            long b2 = t.x2 - t.x1;<br>            long c2 = a2 * t.x1 + b2 * t.y1;<br> <br>            if (a1 * b2 == a2 * b1) {<br>                return false;<br>            }<br> <br>            long d1 = a1 * t.x1 + b1 * t.y1 - c1;<br>            long d2 = a1 * t.x2 + b1 * t.y2 - c1;<br> <br>            if (d1 &gt; 0 &amp;&amp; d2 &gt; 0 || d1 &lt; 0 &amp;&amp; d2 &lt; 0) {<br>                return false;<br>            }<br> <br>            d1 = a2 * x1 + b2 * y1 - c2;<br>            d2 = a2 * x2 + b2 * y2 - c2;<br> <br>            if (d1 &gt; 0 &amp;&amp; d2 &gt; 0 || d1 &lt; 0 &amp;&amp; d2 &lt; 0) {<br>                return false;<br>            }<br> <br>            return true;<br>        }<br> <br>    }<br> <br>    long vp(long x1, long y1, long x2, long y2) {<br>        return x1 * y2 - x2 * y1;<br>    }<br> <br>    boolean between(long x, long y, long z) {<br>        return x &lt;= y &amp;&amp; y &lt;= z || z &lt;= y &amp;&amp; y &lt;= x;<br>    }<br> <br>    boolean inrect(long x1, long y1, long x2, long y2, long x, long y) {<br>        return between(x1, x, x2) &amp;&amp; between(y1, y, y2);<br>    }<br> <br>    ArrayList&lt;Seg&gt; s;<br> <br>    int n;<br>    int[] c;<br> <br>    void dfs(int i, int col) {<br>        c[i] = col;<br> <br>        for (int j = 0; j &lt; n; j++) {<br>            if (c[j] == 0 &amp;&amp; s.get(i).isect(s.get(j))) {<br>                dfs(j, col);<br>            }<br>        }<br>    }<br> <br>    public int countComponents(String[] polylines) {<br>        String p = "";<br>        for (String t : polylines) {<br>            p += t;<br>        }<br> <br>        s = new ArrayList&lt;Seg&gt;();<br> <br>        StringTokenizer st = new StringTokenizer(p);<br>        while (st.hasMoreTokens()) {<br>            String pl = st.nextToken();<br>            StringTokenizer ss = new StringTokenizer(pl, "-,");<br> <br>            int xp = Integer.parseInt(ss.nextToken());<br>            int yp = Integer.parseInt(ss.nextToken());<br>            s.add(new Seg(xp, yp, xp, yp));<br>            while (ss.hasMoreTokens()) {<br>                int xn = Integer.parseInt(ss.nextToken());<br>                int yn = Integer.parseInt(ss.nextToken());<br> <br>                s.add(new Seg(xp, yp, xn, yn));<br>                xp = xn;<br>                yp = yn;<br>                s.add(new Seg(xp, yp, xp, yp));<br>            }<br>        }<br> <br>        n = s.size();<br> <br>        c = new int[n];<br>        int cn = 0;<br>        for (int i = 0; i &lt; n; i++) {<br>            if (c[i] == 0) {<br>                cn++;<br>                dfs(i, cn);<br>            }<br>        }<br> <br>        return cn;<br>    }<br> <br> <br>}<br> <br> <br>// Powered by PopsEdit<br> <br>// Powered by CodeProcessor<br></td>