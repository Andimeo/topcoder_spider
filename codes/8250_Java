<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>import java.util.regex.*;<br>import java.text.*;<br>import java.math.*;<br>import java.awt.geom.*;<br>import static java.lang.Math.*;<br> <br> <br>public class DriveCar<br>{<br>  public void sop(String s){System.out.print(s);}<br>  public void sopl(String s){System.out.println(s);}<br>  public int ipi(String s){return Integer.parseInt(s);}<br>  public int gcd(int x, int y){if (y==0) return x; return gcd(y,x%y);}<br>  int INF=2147483647;<br>  <br>  int[][] dp=new int[5][55];<br>  boolean[][] a=new boolean[5][55];<br>  <br>  int n, m;<br>  int[] dx=new int[]{-1,0,1};<br>  int[] dy=new int[]{1,1,1};<br>  int[] k=new int[]{1,0,1};<br>  boolean check(int i, int j)<br>  {<br>    if (i&gt;=0 &amp;&amp; i&lt;n &amp;&amp; j&gt;=0 &amp;&amp; j&lt;m &amp;&amp; a[i][j]) return true;<br>    return false;<br>  }<br>  int solve(int i, int j)<br>  {<br>    if (j==m-1) return dp[i][j]=0;<br>    if (dp[i][j]&gt;=-1) return dp[i][j];<br>    int ret=INF;<br>    for (int x=0;x&lt;3;x++)<br>    {<br>      int ii=i+dx[x], jj=j+dy[x];<br>      if (check(ii,jj))<br>      {<br>        int t=solve(ii,jj);<br>        if (t&gt;=0) ret=Math.min(ret,t+k[x]);<br>      }<br>    }<br>    if (ret==INF) ret=-1;<br>    return dp[i][j]=ret;<br>  }<br>  public int minNumberOfDrifts(String[] r)<br>  {<br>    n=3;<br>    m=r[0].length();<br>    for (int i=0;i&lt;n;i++)<br>      for (int j=0;j&lt;m;j++)<br>        if (r[i].charAt(j)=='.') a[i][j]=true;<br>        else a[i][j]=false;<br>    for (int i=0;i&lt;3;i++)<br>      Arrays.fill(dp[i],-2);<br>    return solve(1,0);<br>  }<br>  <br>  <br>}<br>//Powered by [KawigiEdit] 2.0!<br></td>