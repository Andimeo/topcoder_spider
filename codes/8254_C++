<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;iostream&gt;<br>#include &lt;sstream&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;map&gt;<br>#include &lt;queue&gt;<br> <br>using namespace std;<br> <br>#define REP(i, n) for (int i = 0; i &lt; (n); i++)<br>#define FOR(i, a, b) for (int i = (a); i &lt;= (b); i++)<br>#define FORD(i, a, b) for (int i = (a); i &gt;= (b); i--)<br> <br>typedef vector&lt;int&gt; VI;<br>typedef long long LL;<br> <br>#define INF 1000000000<br> <br> <br>int zajete[60][60];<br>vector&lt;int&gt; pozx;<br>vector&lt;int&gt; pozy;<br> <br>pair&lt;LL, LL&gt; policz(LL co, bool&amp; ww) {<br>  ww = false;<br>      FOR(x1, 0, 51) {<br>        LL szer = 0;<br>        bool pierwsze = false;<br>        cout &lt;&lt; co &lt;&lt; endl;<br>        FOR(x2, 0, 51) { <br>          if (((x1!=0)&amp;&amp;(zajete[x1-1][x2] &gt; 0)) || (zajete[x1][x2] &gt;0)) {<br>          if (!pierwsze) {<br>            pierwsze = true;<br>            co--;<br>            if (co == 0) return make_pair(pozx[x1], pozy[x2-1]);<br>          }<br>          LL teraz = pozy[x2];<br>          if (x2 != 0) teraz -= pozy[x2-1];<br>          if (co &lt;= teraz) {<br>            return make_pair(pozx[x1], pozy[x2-1] + co);<br>          }<br>          co -= teraz;<br>          } else pierwsze = false;<br>        }<br>        cout &lt;&lt; co &lt;&lt; endl;<br>        szer = 0;<br>        pierwsze = false;<br>        FOR(x2, 0, 51) if (zajete[x1][x2] &gt;0) {<br>          if (!pierwsze) {<br>            pierwsze = true;<br>            szer++;<br>          }<br>          LL teraz = pozy[x2];<br>          if (x2 != 0) teraz -= pozy[x2-1];<br>          szer += teraz;<br>        } else { pierwsze = false; }<br>        LL odl = pozx[x1+1] - pozx[x1] - 1;<br>        LL ile = odl * szer;<br>        if (co &lt;= ile) {<br>          LL kt = (co-1)/szer;<br>          kt++;<br>          LL kt2 = (co-1)%szer + 1;<br>          pierwsze = false;<br>          FOR(x2, 0, 51) if (zajete[x1][x2] &gt;0) {<br>            if (!pierwsze) {<br>              pierwsze = true;<br>              kt2--;<br>              if (kt2 == 0) return make_pair(pozx[x1]+kt, pozy[x2-1]);<br>            }<br>            LL teraz = pozy[x2];<br>            if (x2 != 0) teraz -= pozy[x2-1];<br>            if (kt2 &lt;= teraz) {<br>              return make_pair(pozx[x1]+kt, pozy[x2-1] + kt2);<br>            }<br>            kt2 -= teraz;<br>          } else { pierwsze = false;} <br> <br>        }<br>        co -= ile;<br>        <br>        <br>        <br>      }<br>      ww = true;<br>      return make_pair(0,0);<br>    }<br> <br>class Polygon {<br>  public:<br>  vector &lt;string&gt; getKthPoint(vector &lt;int&gt; x, vector &lt;int&gt; y, vector &lt;string&gt; k) {<br>    REP(i, 60) REP(j,60) zajete[i][j] = 0;<br>    <br>    REP(i, x.size()) pozx.push_back(x[i]);<br>    sort(pozx.begin(), pozx.end());<br>    {<br>      VI temp;<br>      temp.push_back(pozx[0]);<br>      FOR(i, 1, pozx.size()-1) if (pozx[i]!=pozx[i-1]) temp.push_back(pozx[i]);<br>      pozx = temp;<br>    }<br>    <br>    REP(i, y.size()) pozy.push_back(y[i]);<br>    sort(pozy.begin(), pozy.end());<br>    {<br>      VI temp;<br>      temp.push_back(pozy[0]);<br>      FOR(i, 1, pozy.size()-1) if (pozy[i]!=pozy[i-1]) temp.push_back(pozy[i]);<br>      pozy = temp;<br>    }<br>    REP(i, x.size()) {<br>      REP(j, pozx.size()) if (x[i] == pozx[j]) { x[i] = j; break;}<br>    }<br>    REP(i, y.size()) {<br>      REP(j, pozy.size()) if (y[i] == pozy[j]) { y[i] = j; break;}<br>    }<br>    <br>    REP(i, x.size()) {<br>      int x1 = x[i];<br>      int y1 = y[i];<br>      int x2 = x[(i+1)%x.size()];<br>      int y2 = y[(i+1)%y.size()];<br>      <br>      if (x1 == x2) {<br>        if (y1 &gt; y2) {<br>          FOR(o1, x1, 55) FORD(o2, y1, y2+1) zajete[o1][o2]++;<br>        } else {<br>          FOR(o1, x1, 55) FOR(o2, y1+1, y2) zajete[o1][o2]--;<br>        }<br>      }<br>    }<br>    vector&lt;string&gt; wynik;<br>    REP(ktore, k.size()) {<br>      stringstream ww;<br>      ww &lt;&lt; k[ktore];<br>      LL wybierz;<br>      ww &gt;&gt; wybierz;<br>      bool pp;<br>      pair&lt;LL,LL&gt; ans = policz(wybierz, pp);<br>      if (pp) wynik.push_back(""); else {<br>        string pow;<br>        {<br>          string aaa;<br>          stringstream pp;<br>          pp &lt;&lt; ans.first;<br>          pp &gt;&gt; aaa;<br>          pow += aaa;<br>        }<br>        pow += " ";<br>        {<br>          string aaa;<br>          stringstream pp;<br>          pp &lt;&lt; ans.second;<br>          pp &gt;&gt; aaa;<br>          pow += aaa;<br>        }<br>        wynik.push_back(pow);<br>      }<br>      <br>      <br>    }<br>    return wynik;<br>    <br>    <br>    <br> <br>    <br>    <br>  }<br>};<br> <br>// Powered by PopsEdit<br></td>