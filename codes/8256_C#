<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections.Generic;<br>using System.Text;<br><br>public class CardsAndSlots {<br>  public string firstValid(int[] values, string letters, int[] required) {<br>    int n = values.Length;<br>    List&lt;int&gt;[] we = new List&lt;int&gt;[26];<br>    for (int i = 0; i &lt; 26; ++i)<br>      we[i] = new List&lt;int&gt;();<br>    for (int i = 0; i &lt; n; ++i) {<br>      we[letters[i] - 'A'].Add(values[i]);<br>    }<br>    for (int i = 0; i &lt; 26; ++i)<br>      we[i].Sort();<br>    if (!possible(we, required, 0, n))<br>      return "";<br>    String res = "";<br>    for (int i = 0; i &lt; n; ++i) {<br>      for (int ch = 0; ch &lt; 26; ++ch) {<br>  int j;<br>  for (j = 0; j &lt; we[ch].Count; ++j)<br>    if (we[ch][j] &gt;= required[i])<br>      break;<br>  if (j &lt; we[ch].Count) {<br>    int was = we[ch][j];<br>    we[ch].RemoveAt(j);<br>    if (possible(we, required, i + 1, n)) {<br>      res += (char) ('A' + ch);<br>      break;<br>    }<br>    we[ch].Add(was);<br>    we[ch].Sort();<br>  }<br>      }<br>    }<br>    return res;<br>  }<br><br>  bool possible(List&lt;int&gt;[] we, int[] req, int a, int n) {<br>    List&lt;int&gt; all = new List&lt;int&gt;();<br>    for (int ch = 0; ch &lt; 26; ++ch)<br>      foreach (int x in we[ch])<br>  all.Add(x);<br>    all.Sort();<br>    List&lt;int&gt; r = new List&lt;int&gt;();<br>    for (int i = a; i &lt; n; ++i)<br>      r.Add(req[i]);<br>    r.Sort();<br>    for (int i = 0; i &lt; all.Count; ++i) {<br>      if (all[i] &lt; r[i])<br>  return false;<br>    }<br>    return true;<br>  }<br>}<br><br><br>// Powered by FileEdit<br></td>