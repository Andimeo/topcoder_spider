<td class="problemText" colspan="8" valign="middle" align="left">
            #line 5 "JollyJumpers.cpp"<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;string&gt;<br>#include &lt;queue&gt;<br>#include &lt;stack&gt;<br>#include &lt;vector&gt;<br>#include &lt;math.h&gt;<br>#include &lt;sstream&gt;<br>#include &lt;iostream&gt;<br>#include &lt;algorithm&gt;<br>using namespace std;<br><br>typedef vector&lt;int&gt; vi;<br>typedef vector&lt;vi&gt; vvi;<br>typedef long long ll;<br>typedef pair&lt;int, int&gt; pii;<br>typedef vector&lt;pii&gt; vpii;<br>typedef vector&lt;double&gt; vf; <br>typedef vector&lt;string&gt; vs;<br>class JollyJumpers {<br>  public:<br>    vs grid, curr;<br>    bool inbounds(int x, int y) {<br>      return !(x &lt; 0 || x &gt;= 4 || y &lt; 0 || y &gt;= 4);<br>    }<br><br>    bool empty(int x, int y) {<br>      if (!inbounds(x, y))<br>        return 0;<br>      return curr[x][y] == '.';<br>    }<br>    <br>  int maxScore(vector &lt;string&gt; vv) {<br>    grid = vv;<br>    set&lt;vs&gt; seen;<br>    int res = 0;<br>    queue&lt;pair&lt;vs, int&gt; &gt; q;<br>    q.push(make_pair(grid, 0));<br>    while (!q.empty()) {<br>      curr = q.front().first;<br>      int score = q.front().second;<br>      q.pop();<br><br>      res = max(res, score);<br>      if (seen.find(curr) != seen.end())<br>        continue;<br>      seen.insert(curr);<br><br>      for (int i = 0; i &lt; 4; i++) {<br>        for (int j = 0; j &lt; 4; j++) {<br>          if (curr[i][j] == '#') {<br>            if (inbounds(i - 1, j)) {<br>              if (empty(i - 1, j)) { <br>//                vs temp(curr); temp[i - 1][j] = '#', temp[i][j] = '.'; q.push(make_pair(temp, score - 1)); <br>              } <br>              else if (empty(i - 2, j)) {<br>                vs temp(curr); temp[i - 2][j] = '#', temp[i - 1][j] = temp[i][j] = '.'; q.push(make_pair(temp, score +2));<br>              }<br>            }<br>            if (inbounds(i + 1, j)) { <br>              if (empty(i + 1, j)) {<br>   //             vs temp(curr); temp[i + 1][j] = '#', temp[i][j] = '.'; q.push(make_pair(temp, score - 1));<br>              } else if (empty(i + 2, j)) {<br>                vs temp(curr); temp[i + 2][j] = '#', temp[i + 1][j] = temp[i][j] = '.'; q.push(make_pair(temp, score + 2));<br>              }<br>            }<br>         if (inbounds(i, j- 1)) {<br>              if (empty(i, j - 1)) {<br>                vs temp(curr); temp[i][j - 1] = '#', temp[i][j] = '.'; q.push(make_pair(temp, score - 1));<br>              } <br>              else if (empty(i, j - 2)) { <br> //               vs temp(curr); temp[i][j - 2] = '#', temp[i][j - 1] = temp[i][j] = '.'; q.push(make_pair(temp, score + 2));<br>              }<br>            }<br>        if (inbounds(i, j + 1)) {<br>              if (empty(i, j + 1)) {<br>                vs temp(curr); temp[i][j + 1] = '#', temp[i][j] = '.'; q.push(make_pair(temp, score - 1));<br>              } <br>              else if (empty(i, j + 2)) {<br>  //              vs temp(curr); temp[i][j + 2] = '#', temp[i][j + 1] = temp[i][j] = '.'; q.push(make_pair(temp, score + 2));<br>              }<br>        }<br>          }<br>        }<br>      }<br>    }<br>    return res;<br>  }<br>};<br><br><br>// Powered by FileEdit<br></td>