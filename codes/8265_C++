<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;set&gt;<br>#include &lt;map&gt;<br>#include &lt;cmath&gt;<br>#include &lt;queue&gt;<br>#include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;cctype&gt;<br>#include &lt;cfloat&gt;<br>#include &lt;climits&gt;<br>#include &lt;sstream&gt;<br>#include &lt;utility&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;functional&gt;<br>using namespace std;<br>typedef long long LL;<br>typedef long double LD;<br>typedef pair&lt;int,int&gt; PII;<br>#define FOR(i,a,b)for(int i=(a);i&lt;(b);i++)<br>#define fst first<br>#define snd second<br>#define sqr(x)((x)*(x))<br><br>class ThreeWatchtowers<br>{<br>private:<br>  int n;<br>  vector&lt;int&gt; a,b,c,x,y;<br>  int calc(int a, int b, int R)<br>  {<br>    if(sqr(2*R)&lt;sqr(x[a]-x[b])+sqr(y[a]-y[b]))return 0;<br>    int ret=0;<br>    double dx=(y[a]-y[b])/2.,dy=(x[b]-x[a])/2.;<br>    double dis=sqr(x[a]-x[b])+sqr(y[a]-y[b]),l=4*R*R-dis;<br>    if(dis&lt;1e-7)return 0;<br>    dx*=sqrt(l/dis);dy*=sqrt(l/dis);<br>    double ox=(x[a]+x[b])/2.+dx,oy=(y[a]+y[b])/2.+dy;<br>    for(int i=0;i&lt;n;i++)<br>      if(sqr(R)&gt;sqr(ox-x[i])+sqr(oy-y[i])-1e-7)<br>        ret|=1&lt;&lt;i;<br>    return ret;<br>  }<br>public:<br>  int maximumCoverage(vector &lt;int&gt; xx, vector &lt;int&gt; yy, vector &lt;int&gt; v)<br>  {<br>    x=xx;y=yy;<br>    n=x.size();<br>    if(n==1)return 1;<br>    a.clear();b.clear();c.clear();<br>    FOR(i,0,n)<br>    {<br>      a.push_back(1&lt;&lt;i);<br>      b.push_back(1&lt;&lt;i);<br>      c.push_back(1&lt;&lt;i);<br>      FOR(j,0,n)if(i!=j)<br>      {<br>        a.push_back(calc(i,j,v[0]));<br>        b.push_back(calc(i,j,v[1]));<br>        c.push_back(calc(i,j,v[2]));<br>      }<br>      int st=1&lt;&lt;i;<br>      FOR(j,0,n)if(i!=j&amp;&amp;sqr(x[i]-x[j])+sqr(y[i]-y[j])==0)st|=1&lt;&lt;j;<br>      a.push_back(st);<br>      b.push_back(st);<br>      c.push_back(st);<br>    }<br>    sort(a.begin(),a.end());<br>    a.resize(unique(a.begin(),a.end())-a.begin());<br>    sort(b.begin(),b.end());<br>    b.resize(unique(b.begin(),b.end())-b.begin());<br>    sort(c.begin(),c.end());<br>    c.resize(unique(c.begin(),c.end())-c.begin());<br>    int ret=0;<br>    for(int i=a.size()-1;i&gt;=0;i--)<br>      for(int j=b.size()-1;j&gt;=0;j--)<br>        for(int k=c.size()-1;k&gt;=0;k--)<br>          ret=max(ret,__builtin_popcount(a[i]|b[j]|c[k]));<br>    return ret;<br>  }<br>};<br></td>