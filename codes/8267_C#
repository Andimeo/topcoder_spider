<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Text;<br>using System.Text.RegularExpressions;<br>using System.Collections.Generic;<br><br>public class DateFieldCorrection<br>{<br>  int[] dm = { 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 };<br>  string[] mo = { "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December" };<br><br>  public string correctDate(string input)<br>  {<br>    MakeGraph();<br><br>    string res = null;<br>    int md = -1;<br>    for (int i = 0; i &lt; mo.Length; i++)<br>    {<br>      for (int j = 1; j &lt;= dm[i]; j++)<br>      {<br>        string typed = mo[i] + " " + j;<br>        if (input.Length == typed.Length)<br>        {<br>          int d = Dist(input, typed);<br>          if (res == null || d &lt; md)<br>          {<br>            res = typed;<br>            md = d;<br>          }<br>        }<br>      }<br>    }<br>    return res;<br>  }<br><br>  const int AM = 37;<br><br>  private int C2I(char c)<br>  {<br>    if (char.IsLetter(c))<br>      return c - 'a';<br>    else if (char.IsDigit(c))<br>      return c - '0' + 26;<br>    else<br>      return 36;<br>  }<br><br>  static int[,] dist = new int[AM, AM];<br>  const int INF = 100000;<br><br>  string[] rows = { "1234567890", "qwertyuiop", "asdfghjkl", "zxcvbnm" };<br><br>  private void MakeGraph()<br>  {<br>    for (int i = 0; i &lt; AM; i++)<br>    {<br>      for (int j = 0; j &lt; AM; j++)<br>        dist[i, j] = INF;<br>      dist[i, i] = 0;<br>    }<br>    for (int i = 0; i &lt; rows.Length; i++)<br>    {<br>      for (int j = 0; j &lt; rows[i].Length; j++)<br>      {<br>        if (j &lt; rows[i].Length - 1)<br>          SetDist(rows[i][j], rows[i][j + 1], 1);<br>        if (i &gt; 0)<br>        {<br>          int lUp = rows[i - 1].Length;<br>          if (j &lt; lUp)<br>            SetDist(rows[i][j], rows[i - 1][j], 1);<br>          if (j + 1 &lt; lUp)<br>            SetDist(rows[i][j], rows[i - 1][j + 1], 1);<br>        }<br>      }<br>    }<br>    foreach (char c in rows[rows.Length - 1])<br>    {<br>      if (c != 'z')<br>        SetDist(' ', c, 3);<br>    }<br>    for (int k = 0; k &lt; AM; k++)<br>    {<br>      for (int i = 0; i &lt; AM; i++)<br>      {<br>        for (int j = 0; j &lt; AM; j++)<br>          dist[i, j] = Math.Min(dist[i, j], dist[i, k] + dist[k, j]);<br>      }<br>    }<br>  }<br><br>  private void SetDist(char a, char b, int d)<br>  {<br>    int f = C2I(a);<br>    int s = C2I(b);<br>    dist[f, s] = dist[s, f] = d;<br>  }<br><br>  private int Dist(string input, string typed)<br>  {<br>    int res = 0;<br>    for (int i = 0; i &lt; typed.Length; i++)<br>      res += dist[C2I(Char.ToLower(input[i])), C2I(Char.ToLower(typed[i]))];<br><br>    return res;<br>  }<br><br>}<br><br><br><br>// Powered by FileEdit<br>// Powered by CodeProcessor<br></td>