<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>import java.math.*;<br>import java.io.*;<br>import java.text.*;<br>public class SolvePolynomial {<br>  <br>  public boolean check(int n, int a[], int root) {<br>    BigInteger cur = BigInteger.valueOf(a[n]);<br>    int i;<br>    for (i = n-1; i &gt;= 0; i--) {<br>      cur = cur.multiply(BigInteger.valueOf(root)).add(BigInteger.valueOf(a[i]));<br>      if (cur.abs().compareTo(BigInteger.valueOf(1000000000000000L)) &gt; 0) return false;<br>    }<br>    if (cur.compareTo(BigInteger.ZERO) == 0) return true; else return false;<br>  }<br>  <br>    public int[] integerRoots(int[] X, int[] Y, int n) {<br>        int[] res;<br>        int lx = X.length;<br>        int ly = Y.length;<br>        int i,j;<br>        int a[] = new int[n+1];<br>        for (i = 0; i &lt;= n; i++) {<br>          int p = i % lx;<br>          int q = (i + Y[i % ly]) % lx;<br>          a[i] = X[p];<br>          X[p] = X[q];<br>          X[q] = a[i];<br>        }<br><br>        int ind = 0;<br>        while (a[ind] == 0) ind++;<br>        Vector &lt;Integer&gt; buf = new Vector();<br>        for (i = 1; i * i &lt;= Math.abs(a[ind]); i++) {<br>          if (a[ind] % i == 0) {<br>            if (check(n,a,i)) buf.add(i);<br>            if (check(n,a,-i)) buf.add(-i);<br>            if (Math.abs(i) != Math.abs(a[ind] / i)) {<br>              if (check(n,a,a[ind]/i)) buf.add(a[ind]/i);<br>              if (check(n,a,-a[ind]/i)) buf.add(-a[ind]/i);<br>            }<br>          }<br>        }<br>        if (a[0] == 0) buf.add(0);<br>        int res1[] = new int[buf.size()];<br>        for (i = 0; i &lt; buf.size(); i++) res1[i] = buf.get(i);<br>        Arrays.sort(res1);<br>        return res1;<br>    }<br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by CodeProcessor<br></td>