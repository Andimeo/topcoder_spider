<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;cstdio&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cmath&gt;<br>#include &lt;iostream&gt;<br>#include &lt;sstream&gt;<br>#include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;queue&gt;<br>#include &lt;set&gt;<br>#include &lt;map&gt;<br>#include &lt;list&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;cctype&gt;<br>using namespace std;<br><br>#define SZ(v) ((int)(v).size())<br>#define PB push_back<br>#define MP make_pair<br>#define FOR(i,a,b) for(int i=(a);i&lt;(b);++i)<br>#define REP(i,n) FOR(i,0,n)<br>#define FORE(i,a,b) for(int i=(a);i&lt;=(b);++i)<br>#define REPE(i,n) FORE(i,0,n)<br>#define REPSZ(i,v) REP(i,SZ(v))<br>#define FORSZ(i,a,v) FOR(i,a,SZ(v))<br>#define VAR(a,b) __typeof(b) a=b<br>#define FORIT(i,v) for(VAR(i,(v).begin());i!=(v).end();++i)<br><br>typedef long long ll;<br>typedef pair&lt;int,int&gt; PII;<br>typedef vector&lt;int&gt; VI; typedef vector&lt;VI&gt; VVI;<br>typedef vector&lt;ll&gt; VLL; typedef vector&lt;VLL&gt; VVLL;<br>typedef vector&lt;double&gt; VD; typedef vector&lt;VD&gt; VVD;<br>typedef vector&lt;PII&gt; VPII; typedef vector&lt;VPII&gt; VVPII;<br>typedef vector&lt;string&gt; VS; typedef vector&lt;VS&gt; VVS;<br><br>template&lt;class T,class U&gt; T cast(U x) { T y; ostringstream a; a&lt;&lt;x; istringstream b(a.str()); b&gt;&gt;y; return y; }<br>template&lt;class T&gt; vector&lt;T&gt; split(string s,string x=" ") { vector&lt;T&gt; ret; string cur; REPSZ(i,s) if(x.find(s[i])==string::npos) cur+=s[i]; else if(cur!="") ret.PB(cast&lt;T&gt;(cur)),cur="";  if(cur!="") ret.PB(cast&lt;T&gt;(cur)),cur=""; return ret; }<br><br>char adj[15][5]={"OBF","AGC","BGD","CHE","DKF","ELA","BIHC","GJD","MJG","MKHI","NLEJ","KNF","INJ","MLK","A"};<br><br>int done[15][15][50];<br><br>class RandomRide {<br>public:<br>  int flipCount(string flips) {<br>    int at='A'-'A',prev='O'-'A',pos=0,ret=0;<br>    while(!done[at][prev][pos]) {<br>//      printf("%d: %c %c\n",ret,'A'+prev,'A'+at);<br>      done[at][prev][pos]=1;<br>      if(at=='O'-'A') return ret;<br>      int cnt=0; while(adj[at][cnt]!='\0') ++cnt;<br>      int me=0; while(adj[at][me]!='A'+prev) ++me;<br>      int nat=-1;<br>      if(cnt==3) {<br>        if(flips[pos]=='H') nat=adj[at][(me+1)%cnt]-'A'; else nat=adj[at][(me+2)%cnt]-'A';<br>        pos=(pos+1)%SZ(flips);<br>        ++ret;<br>      } else {<br>        int npos=(pos+1)%SZ(flips);<br>        if(flips[pos]=='H'&amp;&amp;flips[npos]=='H') nat=adj[at][(me+1)%cnt]-'A'; else if(flips[pos]=='H') nat=adj[at][(me+2)%cnt]-'A'; else if(flips[npos]=='H') nat=adj[at][(me+3)%cnt]-'A';<br>        pos=(pos+2)%SZ(flips);<br>        ret+=2;<br>      }<br>      if(nat!=-1) prev=at,at=nat;<br>    }<br>    return -1;<br>  }<br>};<br></td>