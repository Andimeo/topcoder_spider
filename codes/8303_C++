<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;vector&gt;<br>#include &lt;list&gt;<br>#include &lt;deque&gt;<br>#include &lt;stack&gt;<br>#include &lt;queue&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;functional&gt;<br>#include &lt;numeric&gt;<br>#include &lt;utility&gt;<br>#include &lt;sstream&gt;<br>#include &lt;iostream&gt;<br>#include &lt;iomanip&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cmath&gt;<br>#include &lt;climits&gt;<br> <br>using namespace std;<br> <br>//BEGINTEMPLATE<br>#define FOR(i,a) for(int i=0; i&lt;int(a); ++i)<br>#define FORD(i,a,b) for(int i=(a)-1; i&gt;=int(b); --i)<br>#define LEN(x) (x).length()<br>//ENDTEMPLATE<br>//BEGINPROGRAM<br> <br>class HanoiState {<br>public:<br>  string partwayState(string, int);<br>};<br> <br>const int other[3][3] = { { 0, 2, 1 }, { 2, 0, 0 }, { 1, 0, 0 } };<br> <br>string HanoiState::partwayState(string target, int moves) {<br>  int n=LEN(target);<br>  string src;<br>  FOR(i,n) src+='A';<br>  FORD(i,n,0) {<br>    if (!moves) return src;<br>    if (target[i]==src[i]) continue;<br>    int k=(1&lt;&lt;i);<br>    if (k &lt;= moves) {<br>      FOR(j,i) src[j] = 'A'+other[src[i]-'A'][target[i]-'A'];<br>      src[i] = target[i];<br>      moves -= k;<br>    }<br>    else {<br>      FOR(j,i) target[j] = 'A'+other[src[i]-'A'][target[i]-'A'];<br>    }<br>  }<br>  return src;<br>}<br> <br>//ENDPROGRAM<br> <br>//Powered by [KawigiEdit] 2.0!<br>//Powered by [BWPlugin]<br></td>