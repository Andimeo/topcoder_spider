<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;cstdio&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cstring&gt;<br>#include &lt;vector&gt;<br>#include &lt;iostream&gt;<br>#include &lt;sstream&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;string&gt;<br>#include &lt;cmath&gt;<br>#include &lt;list&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;queue&gt;<br>#include &lt;stack&gt;<br>using namespace std;<br>typedef pair&lt;int,int&gt; PI;<br>#define REP(i,n)  for(int i=0,_n=(n);i&lt;_n;++i)<br>#define FOR(i,s,k)  for(int i=(s),_k=(k);i&lt;=_k;++i)<br>#define FORD(i,s,k)  for(int i=(s),_k=(k);i&gt;=_k;--i)<br>#define FORE(it,q)  for(__typeof((q).begin()) it=(q).begin();it!=(q).end();++it) <br> <br>class TwoRotationCypher { <br> <br>    public: <br>        string encrypt(int firstSize, int firstRotate, int secondRotate, string message) { <br>           string res;<br>          REP(i,message.size()) {<br>            if(message[i]==' ') res += ' ';<br>            else<br>            if(message[i]-'a' &lt; firstSize) res += 'a' + (message[i]-'a'+firstRotate)%firstSize;<br>            else res += 'a' + firstSize + (message[i]-'a'-firstSize+secondRotate)%(26-firstSize);<br>          }<br>          return res;<br>        } <br> <br> <br>    <br> <br>}; <br> <br> <br> <br> <br> <br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003]<br>// Powered by CodeProcessor<br></td>