<td class="problemText" colspan="8" valign="middle" align="left">
            #line 116 "ReliefMeasuring.cc"<br>#include &lt;cstdio&gt;<br>#include &lt;cstring&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;vector&gt;<br>#include &lt;queue&gt;<br>#include &lt;string&gt;<br>#include &lt;sstream&gt;<br><br>using namespace std;<br><br>typedef long long ll;<br>typedef pair&lt;int, int&gt; pii;<br>typedef vector&lt;int&gt; vi;<br>typedef vector&lt;ll&gt; vll;<br>typedef vector&lt;pii&gt; vpii;<br>typedef vector&lt;string&gt; vs;<br>typedef map&lt;string, int&gt; msi;<br>typedef map&lt;string, string&gt; mss;<br><br>int x;<br>int n, m;<br>int h[30][30];<br>int cost[30][30][30];<br>int best[30][30][30][2];<br><br>int Cost(int i, int l, int r) {<br>  int &amp;res = cost[i][l][r];<br>  if (res == -1) {<br>    res = 0;<br>    for (int j = 0; j &lt; m; ++j)<br>      res += h[i][j] ^ (j &gt;= l &amp;&amp; j &lt; r);<br>    //    printf("cost %d %d %d = %d\n", i, l, r, res);<br>  }<br>  return res;<br>}<br><br>int Best(int i, int l, int r, bool g) {<br>  if (i == n) return 0;<br>  int &amp;res = best[i][l][r][g];<br>  if (res == -1) {<br>    res = 1&lt;&lt;28;<br>    for (int nl = 0; nl &lt; m; ++nl)<br>      for (int nr = nl; nr &lt;= m; ++nr) {<br>  if ((nl &lt;= x &amp;&amp; nr &gt; x || nl == x &amp;&amp; nr == x) &amp;&amp;<br>      (nl &gt;= l &amp;&amp; nr &lt;= r ||<br>       g &amp;&amp; (nl &lt;= l &amp;&amp; nr &gt;= r))) {<br>    res &lt;?= Best(i+1, nl, nr, g &amp;&amp; (nl &lt;= l &amp;&amp; nr &gt;= r)) + Cost(i, nl, nr);<br>  }<br>      }<br>    //    printf("r %d %d %d %d = %d\n", i, l, r, g, res);<br>  }<br>  return res;<br>}<br><br>class ReliefMeasuring {<br>  public:<br>  int minValuesToFix(vector &lt;string&gt; heights) {<br>    n = heights.size();<br>    m = heights.front().size();<br>    for (int i = 0; i &lt; n; ++i)<br>      for (int j = 0; j &lt; m; ++j)<br>        h[i][j] = heights[i][j] - '0';<br>    memset(cost, -1, sizeof(cost));<br>    int res = 1&lt;&lt;28;<br>    for (x = 0; x &lt; m; ++x) {<br>      memset(best, -1, sizeof(best));<br>      for (int l = 0; l &lt; m; ++l)<br>        for (int r = l; r &lt;= m; ++r)<br>    if (l &lt;= x &amp;&amp; r &gt; x ||<br>        l == x &amp;&amp; r == x)<br>      res &lt;?= Best(1, l, r, true) + Cost(0, l, r);<br>    }<br>    return res;<br>  }<br>};<br><br><br>// Powered by FileEdit<br></td>