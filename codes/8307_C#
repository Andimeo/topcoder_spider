<td class="problemText" colspan="8" valign="middle" align="left">
            public class SetOfPatterns<br>    {<br>        static int modulo = 1000003;<br><br>        static<br>        bool Matches(char a, char b)<br>        {<br>            return a == '?' || a == b;<br>        }<br><br>        static<br>        void Add(ref int x, int y)<br>        {<br>            x += y;<br>            if (x &gt;= modulo)<br>                x -= modulo;<br>        }<br><br><br>        public int howMany(string[] patterns, int k)<br>        {<br>            int N = patterns[0].Length;<br>            int M = patterns.Length;<br>            int[,] dp = new int[N + 1, (1 &lt;&lt; M)];<br><br>            for (char c = 'a'; c &lt;= 'z'; c++)<br>            {<br>                int s = 0;<br>                for (int j = 0; j &lt; M; j++)<br>                    if (Matches(patterns[j][0], c))<br>                        s |= (1 &lt;&lt; j);<br>                ++dp[0, s];<br>            }<br><br>            for (int i = 0; i+1 &lt; N; i++)<br>            {<br>                for (int s = 0; s &lt; (1 &lt;&lt; M); s++)<br>                {<br>                    if (dp[i, s] == 0) continue;<br>                    for (char c = 'a'; c &lt;= 'z'; c++)<br>                    {<br>                        int t = 0;<br>                        for (int j = 0; j &lt; M; j++)<br>                            if (Matches(patterns[j][i + 1], c))<br>                                t |= (1 &lt;&lt; j);<br><br>                        Add(ref dp[i + 1, t &amp; s], dp[i,s]);<br>                    }<br>                }<br>            }<br><br>            int ret = 0;<br><br>            for (int s = 0; s &lt; (1 &lt;&lt; M); s++)<br>            {<br>                int one = 0;<br>                for (int i = 0; i &lt; M; i++)<br>                    if ((s &amp; (1 &lt;&lt; i))&gt;0)<br>                        ++one;<br>                if (one == k)<br>                    Add(ref ret, dp[N - 1, s]);<br>            }<br><br>            return ret;<br>        }<br>    }<br></td>