<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;iostream&gt;<br>#include &lt;sstream&gt;<br>#include &lt;deque&gt;<br>#include &lt;stack&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cctype&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;climits&gt;<br>#include &lt;set&gt;<br>#include &lt;map&gt;<br>#include &lt;numeric&gt;<br>#include &lt;ctime&gt;<br>#include &lt;functional&gt;<br>#include &lt;queue&gt;<br><br>using namespace std;<br><br>class TowersAttack<br>{<br>    public :<br>    int Step[100];<br>    double maxDamage(vector &lt;int&gt; x, vector &lt;int&gt; y, int r, int d, int ex, int ey)<br>    {<br>        int N = x.size();<br>        memset(Step, -1, sizeof(Step));<br>        queue &lt;int&gt; Q;<br>        for (int I = 0; I &lt; N; I ++)<br>            if ((ex - x[I]) * (ex - x[I]) + (ey - y[I]) * (ey - y[I]) &lt;= r * r)<br>            {<br>                Q.push(I);<br>                Step[I] = 0;<br>            }<br>        while (! Q.empty())<br>        {<br>            int T = Q.front();<br>            //cout &lt;&lt; T &lt;&lt; endl;<br>            for (int I = 0; I &lt; N; I ++)<br>                if (Step[I] == -1 &amp;&amp; (x[T] - x[I]) * (x[T] - x[I]) + (y[T] - y[I]) * (y[T] - y[I]) &lt;= r * r)<br>                {<br>                    Q.push(I);<br>                    Step[I] = Step[T] + 1;<br>                }<br>            Q.pop();<br>        }<br>        double Ans = 0;<br>        for (int I = 0; I &lt; N; I ++)<br>        {<br>            double T = double(d);<br>            if (Step[I] == -1)<br>                continue;<br>            for (int J = 0; J &lt; Step[I]; J ++)<br>                T /= 2.0;<br>            Ans += T;<br>        }<br>        return Ans;<br>    }<br><br>};<br><br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003]<br>// Powered by CodeProcessor<br></td>