<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>import java.util.regex.*;<br>import java.text.*;<br>import java.math.*;<br>import java.awt.geom.*;<br> <br>public class TowersAttack<br>{<br>  public double maxDamage(int[] towersX, int[] towersY, int r, int damage, int enemyX, int enemyY)<br>  {<br>    <br>    boolean[][] graph = new boolean[towersX.length][towersX.length];<br>    for(int i=0;i&lt;towersX.length;i++){<br>      for(int j=0;j&lt;towersX.length;j++){<br>        if(i!=j){<br>          graph[i][j] = (r*r&gt;=(towersX[i]-towersX[j])*(towersX[i]-towersX[j])+(towersY[i]-towersY[j])*(towersY[i]-towersY[j]));<br>        }<br>      }<br>    }<br>    <br>    boolean[] good = new boolean[towersX.length];<br>    for(int i=0;i&lt;towersX.length;i++){<br>      good[i]=(r*r&gt;=(towersX[i]-enemyX)*(towersX[i]-enemyX)+(towersY[i]-enemyY)*(towersY[i]-enemyY));<br>    }<br>    <br>    int[] distances = new int[towersX.length];<br>    int tLen = towersX.length;<br>    for(int i=0;i&lt;tLen;i++) distances[i]=-1;<br>    for(int i=0;i&lt;tLen;i++) if(good[i]) distances[i]=0;<br>    <br>    boolean flag = true;<br>    int curDist=0;<br>    while(flag){<br>      flag=false;<br>      for(int i=0;i&lt;tLen;i++){<br>        if(distances[i]==curDist){<br>          for(int j=0;j&lt;tLen;j++){<br>            if(graph[i][j]&amp;&amp;distances[j]==-1){<br>              distances[j]=curDist+1;<br>              flag=true;<br>            }<br>          }<br>        }<br>      }<br>      curDist++;<br>    }<br>    <br>    double totDamage=0;<br>    for(int i=0;i&lt;tLen;i++){<br>      if(distances[i]!=-1){<br>        totDamage+=damage/(double)Math.pow(2,distances[i]);<br>      }<br>    }<br>    return totDamage;<br>    <br>  }<br>  <br>  <br>}<br>//Powered by [KawigiEdit] 2.0!<br></td>