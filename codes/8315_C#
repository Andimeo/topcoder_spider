<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br><br>public class ParticleCollision {<br>    const double PI = 3.14159265358979323846;<br>    const double EPS = 1e-9;<br>    int sign(double x)<br>    {<br>        if (Math.Abs(x) &lt; EPS)<br>            return 0;<br>        if (x &lt; 0)<br>            return -1;<br>        return 1;<br>    }<br><br>    public double[] collision(int vx, int vy, int vz, int x0, int y0, int z0) {<br>        if (vz == 0)<br>        {<br>            double t = z0;<br>            double x = Math.Cos(PI * t);<br>            double y = Math.Sin(PI * t);<br>            double dx = x - x0;<br>            double dy = y - y0;<br>            if (sign(dx * vy - dy * vx) != 0)<br>                return new double[0];<br>            if (vx == 0 &amp;&amp; vy == 0)<br>            {<br>                if (sign(dx) == 0 &amp;&amp; sign(dy) == 0)<br>                    return new double[] { x, y, t };<br>                else<br>                    return new double[0];<br>            }<br>            return new double[] { x, y, t };<br>        }<br>        if (vx == 0 &amp;&amp; vy == 0)<br>        {<br>            if (x0 * x0 + y0 * y0 == 1)<br>                return new double[] { 0, 0, 0 };<br>            else<br>                return new double[0];<br>        }<br>        long a = vx * vx + vy * vy;<br>        long b = 2 * x0 * vx + 2 * y0 * vy;<br>        long c = x0 * x0 + y0 * y0 - 1;<br>        long d = b * b - 4 * a * c;<br>        if (d &lt; 0)<br>            return new double[0];<br>        if (d == 0)<br>        {<br>            double t0 = (-b + 0.0) / (2 * a);<br>            double x = vx * t0 + x0;<br>            double y = vy * t0 + y0;<br>            double z = vz * t0 + z0;<br>            if (sign(Math.Cos(PI * z) - x) == 0 &amp;&amp; sign(Math.Sin(PI * z) - y) == 0)<br>                return new double[] { x, y, z };<br>            else<br>                return new double[0];<br>        }<br>        double t1 = (-b - Math.Sqrt(d)) / (2 * a);<br>        double x1 = vx * t1 + x0;<br>        double y1 = vy * t1 + y0;<br>        double z1 = vz * t1 + z0;<br>        bool ok1 = sign(Math.Cos(PI * z1) - x1) == 0 &amp;&amp; sign(Math.Sin(PI * z1) - y1) == 0;<br>        double t2 = (-b + Math.Sqrt(d)) / (2 * a);<br>        double x2 = vx * t2 + x0;<br>        double y2 = vy * t2 + y0;<br>        double z2 = vz * t2 + z0;<br>        bool ok2 = sign(Math.Cos(PI * z2) - x2) == 0 &amp;&amp; sign(Math.Sin(PI * z2) - y2) == 0;<br>        if (ok1 &amp;&amp; ok2)<br>            return new double[] { 0, 0, 0 };<br>        if (ok1)<br>            return new double[] { x1, y1, z1 };<br>        if (ok2)<br>            return new double[] { x2, y2, z2 };<br>        return new double[0];<br>    }<br>    <br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003] [modified for C# by Petr]<br>// Powered by CodeProcessor<br></td>