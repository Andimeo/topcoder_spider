<td class="problemText" colspan="8" valign="middle" align="left">
            using namespace std;<br> <br>#include &lt;stdlib.h&gt;<br>#include &lt;stdio.h&gt;<br>#include &lt;math.h&gt;<br>#include &lt;ctype.h&gt;<br>#include &lt;string.h&gt;<br>#include &lt;string&gt;<br>#include &lt;sstream&gt;<br>#include &lt;iostream&gt;<br>#include &lt;vector&gt;<br>#include &lt;queue&gt;<br>#include &lt;stack&gt;<br>#include &lt;set&gt;<br>#include &lt;map&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;functional&gt;<br> <br>#define PB push_back<br>#define SZ size()<br>#define REP(v, hi) for (int v=0; v&lt;(hi); v++)<br>#define REPD(v, hi) for (int v=((hi)-1); v&gt;=0; v--)<br>#define FOR(v, lo, hi) for (int v=(lo); v&lt;(hi); v++)<br>#define FORD(v, lo, hi) for (int v=((hi)-1); v&gt;=(lo); v--)<br> <br>typedef vector&lt;double&gt; VD;<br> <br>/* ############################ THE REAL CODE ############################ */<br> <br>class ParticleCollision {<br>  public:<br>  vector &lt;double&gt; collision(int vx, int vy, int vz, int x0, int y0, int z0) {<br> <br>    double A = vx*vx + vy*vy;<br>    double B = 2*x0*vx + 2*y0*vy;<br>    double C = x0*x0 + y0*y0 - 1;<br>    double D = B*B - 4*A*C;<br> <br>    if (A==0) {<br>      if (x0*x0 + y0*y0 != 1) return VD();<br>      if (vz!=0) return VD(3,0);<br> <br>      if (fabs(cos(M_PI*z0)-x0) + fabs(sin(M_PI*z0)-y0) &gt; 1e-11) return VD();<br> <br>      VD res;<br>      res.PB(x0);<br>      res.PB(y0);<br>      res.PB(z0);<br>      return res;<br>    }<br> <br>    if (D&lt;0) return VD();<br>    <br>    VD s;<br>    s.PB((-B+sqrt(D))/2/A);<br>    if (D!=0) s.PB((-B-sqrt(D))/2/A);<br> <br>    int n=0;<br>    VD res(3);<br>    <br>    REP(i,s.SZ) {<br>      double t = z0 + vz*s[i];<br>      if (fabs(cos(M_PI*t) - x0 - vx*s[i]) + fabs(sin(M_PI*t) - y0 - vy*s[i]) &lt; 1e-11) {<br>  res[0] = x0 + vx*s[i];<br>  res[1] = y0 + vy*s[i];<br>  res[2] = z0 + vz*s[i];<br>  n++;<br>      }<br>    }<br> <br>    if (n==0) return VD();<br>    if (n==1) return res;<br>    if (n==2) return VD(3,0);<br>    return VD();<br>  }<br> <br>  <br> <br>};<br> <br> <br> <br> <br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003]<br>// Powered by CodeProcessor<br></td>