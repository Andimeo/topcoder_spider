<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br><br>public class DukeOnLargeChessBoard {<br>    const int SIZE = 1000000;<br>    int[] min;<br>    int[] max;<br><br>    void add(int x, int mn, int mx)<br>    {<br>        if (mn &gt; mx)<br>        {<br>            int t = mn;<br>            mn = mx;<br>            mx = t;<br>        }<br>        if (max[x] == -1)<br>        {<br>            min[x] = mn;<br>            max[x] = mx;<br>        }<br>        else<br>        {<br>            min[x] = Math.Min(min[x], mn);<br>            max[x] = Math.Max(max[x], mx);<br>        }<br>    }<br><br>    string form(int x, int y)<br>    {<br>        string s = "" + x;<br>        while (s.Length &lt; 6)<br>            s = "0" + s;<br>        string ss = "" + y;<br>        while (ss.Length &lt; 6)<br>            ss = "0" + ss;<br>        return "(" + s + ", " + ss + ")";<br>    }<br><br>  public string lastCell(string initPosition) {<br>        int x = int.Parse(initPosition.Substring(1, 6));<br>        int y = int.Parse(initPosition.Substring(9, 6));<br>        min = new int[SIZE];<br>        max = new int[SIZE];<br>        for (int i = 0; i &lt; SIZE; ++i)<br>        {<br>            min[i] = SIZE;<br>            max[i] = -1;<br>        }<br>        while (true)<br>        {<br>            if (x &lt; SIZE - 1 &amp;&amp; (min[x + 1] &gt; y || max[x + 1] &lt; y))<br>            {<br>                add(x, y, y);<br>                ++x;<br>            }<br>            else if (y &lt; SIZE - 1 &amp;&amp; (max[x] &lt; y || min[x] &gt; y + 1))<br>            {<br>                int ny = SIZE - 1;<br>                if (min[x] &gt; y)<br>                    ny = min[x] - 1;<br>                if (x &lt; SIZE - 1 &amp;&amp; max[x + 1] &lt; ny)<br>                {<br>                    ny = max[x + 1] + 1;<br>                    add(x, y, ny);<br>                    y = ny;<br>                    ++x;<br>                }<br>                else<br>                {<br>                    add(x, y, ny);<br>                    y = ny;<br>                    if (x &gt; 0 &amp;&amp; (min[x - 1] &gt; y || max[x - 1] &lt; y))<br>                    {<br>                        --x;<br>                    }<br>                    else<br>                    {<br>                        return form(x, y);<br>                    }<br>                }<br>            }<br>            else if (y &gt; 0 &amp;&amp; (max[x] &lt; y - 1 || min[x] &gt; y))<br>            {<br>                int ny = 0;<br>                if (max[x] &lt; y)<br>                    ny = max[x] + 1;<br>                if (x &lt; SIZE - 1 &amp;&amp; min[x + 1] &gt; ny)<br>                {<br>                    ny = min[x + 1] - 1;<br>                    add(x, y, ny);<br>                    y = ny;<br>                    ++x;<br>                }<br>                else<br>                {<br>                    add(x, y, ny);<br>                    y = ny;<br>                    if (x &gt; 0 &amp;&amp; (min[x - 1] &gt; y || max[x - 1] &lt; y))<br>                    {<br>                        --x;<br>                    }<br>                    else<br>                    {<br>                        return form(x, y);<br>                    }<br>                }<br>            }<br>            else if (x &gt; 0 &amp;&amp; (min[x - 1] &gt; y || max[x - 1] &lt; y))<br>            {<br>                add(x, y, y);<br>                --x;<br>            }<br>            else return form(x, y);<br>        }<br>    }<br><br><br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003] [modified for C# by Petr]<br>// Powered by CodeProcessor<br></td>