<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;memory&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;string&gt;<br>using namespace std;<br>class DukeOnLargeChessBoard {<br>  public:<br>    int Marked[1000005][2];<br>    int Valid(int a, int b) {<br>      return (a &gt;= 0 &amp;&amp; a &lt; 1000000 &amp;&amp; b &gt;= 0 &amp;&amp; b &lt; 1000000 &amp;&amp; (Marked[a][0] == -1 || !(b &gt;= Marked[a][0] &amp;&amp; b &lt;= Marked[a][1])));<br>    }<br>    int maxUp(int a, int b) {<br>      int ret;<br>      if (Marked[a][0] == -1 || Marked[a][1] &lt; b)<br>        ret = 999999;<br>      else<br>        ret = Marked[a][0] - 1;<br>      if (a &lt; 999999)<br>        ret = min(ret, Marked[a + 1][1] + 1);<br>      return ret;<br>    }<br>    int maxDown(int a, int b) {<br>      int ret;<br>      if (Marked[a][0] == -1 || Marked[a][0] &gt; b)<br>        ret = 0;<br>      else<br>        ret = Marked[a][1] + 1;<br>      if (a &lt; 999999)<br>        ret = max(ret, Marked[a + 1][0] - 1);<br>      return ret;<br>    }<br>    int Merge(int a, int b, int c) {<br>      if (b &gt; c) {<br>        int tmp = b;<br>        b = c;<br>        c = tmp;<br>      }<br>      if (Marked[a][0] == -1) {<br>        Marked[a][0] = b;<br>        Marked[a][1] = c;<br>      }<br>      else {<br>        Marked[a][0] &lt;?= b;<br>        Marked[a][1] &gt;?= c;<br>      }<br>      return 0;<br>    }<br>    string lastCell(string initPosition) {<br>      int i, j, k;<br>      sscanf(&amp;initPosition[1], "%d", &amp;i);<br>      sscanf(&amp;initPosition[9], "%d", &amp;j);<br>      memset(Marked, -1, sizeof(Marked));<br>      while (1) {<br>        if (Valid(i + 1, j)) {<br>          Merge(i, j, j);<br>          i ++;<br>        }<br>        else<br>          if (Valid(i, j + 1)) {<br>            k = maxUp(i, j);<br>            Merge(i, j, k);<br>            j = k;<br>          }<br>          else<br>            if (Valid(i, j - 1)) {<br>              k = maxDown(i, j);<br>              Merge(i, j, k);<br>              j = k;<br>            }<br>            else<br>              if (Valid(i - 1, j)) {<br>                Merge(i, j, j);<br>                i --;<br>              }<br>              else<br>                break;<br>      }<br>      string ret = "(";<br>      for (k = 100000; k &gt;= 1; k /= 10)<br>        ret += i / k % 10 + '0';<br>      ret += ", ";<br>      for (k = 100000; k &gt;= 1; k /= 10)<br>        ret += j / k % 10 + '0';<br>      ret += ")";<br>      return ret;<br>    }<br>};<br></td>