<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;map&gt; <br>#include &lt;set&gt; <br>#include &lt;cmath&gt;<br>#include &lt;vector&gt; <br>#include &lt;string&gt; <br>#include &lt;sstream&gt;<br>#include &lt;iostream&gt;<br>#include &lt;algorithm&gt; <br>using namespace std; <br>#define FOR(i,a,b) for(int i=(a); i&lt;(b); ++i) <br>#define FORE(it,x) for(typeof(x.begin()) it=x.begin(); it!=x.end(); ++it) <br>#define SET(x, v) memset(x, v, sizeof (x)) <br>#define sz size() <br>#define cs c_str() <br>#define pb push_back <br>#define mp make_pair<br> <br>typedef long long i64; <br><br>class   CollectingRiders<br>            { public: <br>  vector&lt;string&gt; dat;<br>  int n, m;<br>  int sum[52][52];<br>  int front,rear,qu[2500];<br>  int chk[52][52];<br>  bool impos;<br>  void add(int x, int y, int cnt) {<br>    if(x&lt;0 || y&lt;0 || x&gt;=n || y&gt;=m)return;<br>    if(chk[x][y])return;<br>    chk[x][y]=cnt+1;<br>    qu[rear++] = x*m + y;<br>  }<br>  void doit(int x, int y, int z) {<br>    front=rear=0;<br>    SET(chk,0);<br>    add(x, y, 0);<br>    for(;front&lt;rear;front++) {<br>      int px = qu[front] / m;<br>      int py = qu[front] % m;<br>      int val = chk[px][py];<br>      add(px+2, py+1,val);<br>      add(px+2, py-1,val);<br>      add(px-2, py+1,val);<br>      add(px-2, py-1,val);<br>      add(px+1, py-2,val);<br>      add(px-1, py-2,val);<br>      add(px+1, py+2,val);<br>      add(px-1, py+2,val);<br>    }<br><br>    FOR(i,0,n) {<br>      FOR(j,0,m) {<br>        if(chk[i][j]==0){<br>          sum[i][j] =1048576;<br>          continue;<br>        }<br>        int v = chk[i][j] - 1;<br>        sum[i][j]+= (v+z-1) / z;<br>        if(sum[i][j]&gt;1048576)<br>          sum[i][j]=1048576;<br>      }<br>    }<br><br>  }<br>  int minimalMoves(vector &lt;string&gt; board) {<br>    dat = board;<br>    n = dat.sz;<br>    m = dat[0].sz;<br>    SET(sum,0);<br>    FOR(i,0,n) {<br>      FOR(j,0,m) {<br>        if(dat[i][j]!='.'){<br>          doit(i,j, dat[i][j]-'0');<br>        }<br>      }<br>    }<br>    int ans = 1000000;<br>    FOR(i,0,n){<br>      FOR(j,0,m){<br>        ans=min(ans, sum[i][j]);<br>        printf("%2d ",sum[i][j]&gt;500000?-1:sum[i][j]);<br>      }<br>      printf("\n");<br>    }<br><br>    return ans&gt;500000?-1:ans;<br>  }<br><br>};<br></td>