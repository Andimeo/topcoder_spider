<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br><br>public class CollectingRiders{<br>  public int minimalMoves(String[] board){<br>    //Parse this junk<br>    int ilength = board.length;<br>    int jlength = board[0].length();<br>    int[][] info = new int[ilength][jlength];<br>    for(int i = 0; i&lt;ilength; i++){<br>      for(int j = 0; j&lt; jlength; j++){<br>        char ba = board[i].charAt(j);<br>        if(ba == '.')<br>          info[i][j] = 0;<br>        else<br>          info[i][j] = Integer.parseInt(ba+"");<br>      }<br>    }<br>    <br>    //Done with that, now run bfs<br>    int minturns = Integer.MAX_VALUE;<br>    <br>    for(int i = 0; i&lt;ilength; i++){<br>      for(int j = 0; j&lt;jlength; j++){<br>        //From ijth square<br>        int[][] labels = new int[ilength][jlength];<br>        for (int l = 0; l&lt;ilength; l++){<br>          for(int ll = 0; ll&lt;jlength; ll++){<br>            labels[l][ll] = -1;<br>          }<br>        }<br>        Queue&lt;int[]&gt; pos = new LinkedList&lt;int[]&gt;();<br>        boolean[] been = new boolean[ilength*jlength+5];<br>        int[] place = new int[3];<br>        place[0] = i;<br>        place[1] = j;<br>        place[2] = 0;<br>        pos.offer(place);<br>        <br>        //go through<br>        while(!pos.isEmpty()){<br>          int[] use = pos.remove();<br>          if(!inbounds(use,ilength,jlength)) continue;<br>          int taaa = use[0]*jlength + use[1];<br>          if(been[taaa]) continue;<br>          <br>          been[taaa] = true;<br>          int x = use[0];<br>          int y = use[1];<br>          int num = use[2];<br>          //System.out.println("BEEN TO " + x + " " + y);<br>          labels[x][y] = num;<br>          <br>          //Try everything<br>          pos.offer(gen(x+1,y+2,num+1));<br>          pos.offer(gen(x+1,y-2,num+1));<br>          pos.offer(gen(x+2,y+1,num+1));<br>          pos.offer(gen(x+2,y-1,num+1));<br>          pos.offer(gen(x-1,y+2,num+1));<br>          pos.offer(gen(x-2,y+1,num+1));<br>          pos.offer(gen(x-1,y-2,num+1));<br>          pos.offer(gen(x-2,y-1,num+1));<br>          <br>        }<br>        <br>        /*for(int pp = 0; pp&lt;ilength; pp++){<br>          for(int qq = 0; qq&lt;jlength; qq++){<br>            System.out.print(labels[pp][qq] + " ");<br>          }<br>          System.out.println();<br>        }*/<br>        //now we have nums; do addition<br>        boolean falseflag = false;<br>        int sumturns = 0;<br>        for(int a=0; a&lt;ilength; a++){<br>          for(int b = 0; b&lt;jlength; b++){<br>            if(info[a][b] &gt; 0){<br>              int pow = info[a][b];<br>              int use = labels[a][b];<br>              if(use % pow == 0)<br>                sumturns += (use/pow);<br>              else<br>                sumturns += ((use/pow)+1);<br>            }<br>            if(labels[a][b] == -1 &amp;&amp; info[a][b] != 0)<br>              falseflag = true;<br>          }<br>        }<br>        //System.out.println("THIS TIME " + i + " " + j + " " + sumturns);<br>        if(sumturns&lt;minturns &amp;&amp; !falseflag){<br>          minturns = sumturns;<br>        }<br>      <br>      }<br>    }<br>    <br>    if(minturns == Integer.MAX_VALUE)<br>      return -1;<br>    else<br>      return minturns;<br>  }<br><br>  public boolean inbounds(int[] thing, int boundone, int boundtwo){<br>    return thing[0] &gt;= 0 &amp;&amp; thing[1] &gt;= 0 &amp;&amp; thing[0] &lt; boundone &amp;&amp; thing[1] &lt; boundtwo;<br>  }<br>  <br>  public int[] gen(int one, int two, int three){<br>    int[] cow = new int[3];<br>    cow[0] = one;<br>    cow[1] = two;<br>    cow[2] = three;<br>    return cow;<br>  }<br>}<br></td>