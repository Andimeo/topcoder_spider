<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections.Generic;<br><br>public class NCool {<br>    const double EPS = 1e-10;<br><br>    public int nCoolPoints(int[] x, int[] y, int N)<br>    {<br>        List&lt;int&gt; xs = new List&lt;int&gt;();<br>        List&lt;int&gt; ys = new List&lt;int&gt;();<br>        List&lt;int&gt; vx = new List&lt;int&gt;();<br>        List&lt;int&gt; vy = new List&lt;int&gt;();<br>        int n = x.Length;<br>        {<br>            int x1 = x[0];<br>            int y1 = y[0];<br>            for (int i = 1; i &lt; n; ++i)<br>                if (x[i] &lt; x1 || x[i] == x1 &amp;&amp; y[i] &lt; y1)<br>                {<br>                    x1 = x[i];<br>                    y1 = y[i];<br>                }<br>            vx.Add(x1);<br>            vy.Add(y1);<br>            int ax = x1;<br>            int ay = y1;<br>            do<br>            {<br>                int px = 0;<br>                int py = 0;<br>                for (int i = 0; i &lt; n; ++i)<br>                {<br>                    int cx = x[i] - ax;<br>                    int cy = y[i] - ay;<br>                    if (cx == 0 &amp;&amp; cy == 0)<br>                        continue;<br>                    if (px == 0 &amp;&amp; py == 0)<br>                    {<br>                        px = cx;<br>                        py = cy;<br>                    }<br>                    else<br>                    {<br>                        int z = cx * py - cy * px;<br>                        if (z &gt; 0 || z == 0 &amp;&amp; cx * cx + cy * cy &gt; px * px + py * py)<br>                        {<br>                            px = cx;<br>                            py = cy;<br>                        }<br>                    }<br>                }<br>                ax += px;<br>                ay += py;<br>                vx.Add(ax);<br>                vy.Add(ay);<br>            } while (ax != x1 || ay != y1);<br>        }<br>        {<br>            List&lt;double&gt; cr = new List&lt;double&gt;();<br>            for (int py = 0; py &lt;= 10000; ++py)<br>            {<br>                cr.Clear();<br>                for (int i = 0; i &lt; vx.Count - 1; ++i)<br>                {<br>                    int x1 = vx[i];<br>                    int y1 = vy[i];<br>                    int x2 = vx[i + 1];<br>                    int y2 = vy[i + 1];<br>                    if (y1 &lt; py &amp;&amp; y2 &lt; py)<br>                        continue;<br>                    if (y1 &gt; py &amp;&amp; y2 &gt; py)<br>                        continue;<br>                    if (y1 == py &amp;&amp; y2 == py)<br>                    {<br>                        cr.Add(x1);<br>                        cr.Add(x2);<br>                        continue;<br>                    }<br>                    cr.Add(x1 + (x2 - x1 + 0.0) * (py - y1) / (y2 - y1 + 0.0));<br>                }<br>                if (cr.Count == 0)<br>                    continue;<br>                cr.Sort();<br>                int l = (int)Math.Ceiling(cr[0] - EPS);<br>                int r = (int)Math.Floor(cr[cr.Count - 1] + EPS);<br>                for (int px = l; px &lt;= r; ++px)<br>                {<br>                    xs.Add(px);<br>                    ys.Add(py);<br>                }<br>            }<br>        }<br>        int res = 0;<br>        {<br>            int m = xs.Count;<br>            Dictionary&lt;long, int&gt; am = new Dictionary&lt;long, int&gt;();<br>            for (int i = 0; i &lt; m; ++i)<br>            {<br>                int dx = ((xs[i] % (N - 1)) + (N - 1)) % (N - 1);<br>                int dy = ((ys[i] % (N - 1)) + (N - 1)) % (N - 1);<br>                long z = (long)dx * (N - 1) + dy;<br>                if (am.ContainsKey(z))<br>                    ++am[z];<br>                else<br>                    am[z] = 1;<br>            }<br>            foreach (KeyValuePair&lt;long, int&gt; pair in am)<br>            {<br>                if (pair.Value &gt; 1)<br>                    res += pair.Value;<br>            }<br>        }<br>        return res;<br>    }<br><br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003] [modified for C# by Petr]<br>// Powered by CodeProcessor<br></td>