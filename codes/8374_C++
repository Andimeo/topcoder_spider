<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;algorithm&gt;<br>#include &lt;iostream&gt;<br>#include &lt;sstream&gt;<br>#include &lt;vector&gt;<br>#include &lt;cmath&gt;<br>#include &lt;map&gt;<br>using namespace std;<br><br>struct MyComparer {<br>  static bool isvowel(int c) {<br>    return c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u';<br>  }<br><br>  static vector&lt;string&gt; decompose(const string &amp;s) {<br>    vector&lt;string&gt; res;<br>    int i = 0, n = s.size();<br>    while (i &lt; n) {<br>      string t = "";<br>      while (i &lt; n &amp;&amp; !isvowel(s[i])) { t += s[i]; i++; }<br>      while (i &lt; n &amp;&amp; isvowel(s[i])) { t += s[i]; i++; }<br>      res.push_back(t);<br>    }<br>    return res;<br>  }<br><br>  bool operator()(string word1, string word2) {<br>    if (word1 == word2)<br>      return false;<br><br>    vector&lt;string&gt; u1 = decompose(word1);   // unsorted<br>    vector&lt;string&gt; s1 = u1;                 // sorted<br>    sort(s1.begin(), s1.end());<br><br>    vector&lt;string&gt; u2 = decompose(word2);<br>    vector&lt;string&gt; s2 = u2;<br>    sort(s2.begin(), s2.end());<br><br>    if (s1 != s2) {<br>      return s1 &lt; s2;<br>    } else {<br>      return u1 &lt; u2;<br>    }<br>  }<br>};<br><br>struct SyllableSorting {<br>  vector &lt;string&gt; sortWords(vector &lt;string&gt; words) {<br>    sort(words.begin(), words.end(), MyComparer());    <br>    return words;<br>  }<br>};<br><br><br><br>// Powered by FileEdit<br></td>