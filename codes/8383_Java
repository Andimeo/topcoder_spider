<td class="problemText" colspan="8" valign="middle" align="left">
            public class HillWalker {<br><br>public int time (int h1,int h2, int thr){<br>  if (Math.abs(h1-h2)&gt;thr) return 0;<br>  if (h2&lt;=h1) return 1;<br>  return (h2-h1)*(h2-h1);<br>}<br>int[][] afst2 = new int[25][25];<br>int[][] afst = new int[25][25];<br>int wi;<br>int he;<br>  int[][][][] dist = new int[25][25][25][25];<br><br><br>public void fill(int x, int y, int afs){<br>  if ((x!=0)||(y!=0))<br>    afst[x][y] = afs;<br>  if ((x==0)&amp;&amp;(y==0)&amp;&amp;(afs&gt;0)) return;<br>  if ((x!=0)&amp;&amp;(dist[x][y][x-1][y]!=0)&amp;&amp;((afst[x-1][y]==0)||(afst[x-1][y]&gt;afs+dist[x][y][x-1][y]))) fill(x-1,y,afs+dist[x][y][x-1][y]);<br>  if ((y!=0)&amp;&amp;(dist[x][y][x][y-1]!=0)&amp;&amp;((afst[x][y-1]==0)||(afst[x][y-1]&gt;afs+dist[x][y][x][y-1]))) fill(x,y-1,afs+dist[x][y][x][y-1]);<br>  if ((x!=wi-1)&amp;&amp;(dist[x][y][x+1][y]!=0)&amp;&amp;((afst[x+1][y]==0)||(afst[x+1][y]&gt;afs+dist[x][y][x+1][y]))) fill(x+1,y,afs+dist[x][y][x+1][y]);<br>  if ((y!=he-1)&amp;&amp;(dist[x][y][x][y+1]!=0)&amp;&amp;((afst[x][y+1]==0)||(afst[x][y+1]&gt;afs+dist[x][y][x][y+1]))) fill(x,y+1,afs+dist[x][y][x][y+1]);<br>}<br><br>public void fill2(int x, int y, int afs){<br>  if (afst2[x][y]!=-1)<br>    afst2[x][y] = afs;<br>  if ((x!=0)&amp;&amp;(dist[x][y][x-1][y]!=0)&amp;&amp;((afst2[x-1][y]==0)||(afst2[x-1][y]&gt;afs+dist[x][y][x-1][y]))) fill2(x-1,y,afs+dist[x][y][x-1][y]);<br>  if ((y!=0)&amp;&amp;(dist[x][y][x][y-1]!=0)&amp;&amp;((afst2[x][y-1]==0)||(afst2[x][y-1]&gt;afs+dist[x][y][x][y-1]))) fill2(x,y-1,afs+dist[x][y][x][y-1]);<br>  if ((x!=wi-1)&amp;&amp;(dist[x][y][x+1][y]!=0)&amp;&amp;((afst2[x+1][y]==0)||(afst2[x+1][y]&gt;afs+dist[x][y][x+1][y]))) fill2(x+1,y,afs+dist[x][y][x+1][y]);<br>  if ((y!=he-1)&amp;&amp;(dist[x][y][x][y+1]!=0)&amp;&amp;((afst2[x][y+1]==0)||(afst2[x][y+1]&gt;afs+dist[x][y][x][y+1]))) fill2(x,y+1,afs+dist[x][y][x][y+1]);<br>}<br><br>public int distance(int x, int y){<br>  for (int i=0; i &lt;he; i++){<br>    for (int k=0; k&lt;wi;k++){  <br>    afst2[k][i]=0;<br>    }<br>    }<br>  afst2[x][y]=-1;<br>  fill2(x,y,0);<br>  if (afst2[0][0]==0) afst2[0][0] = 10000000;<br>  return afst2[0][0];<br>}<br><br>public int highestPoint(String[] landscape, int threshold, int timeToDark) {<br>  int[][] h = new int[25][25];<br>  wi = landscape[0].length();<br>  he = landscape.length;<br>  for (int i=0; i &lt;landscape.length; i++){<br>    for (int k=0; k&lt;wi;k++){<br>      char ch = landscape[i].charAt(k);<br>      int hoog = 0;<br>      if ((ch&gt;='a')&amp;&amp;(ch&lt;='z')) { hoog = 26 + (ch-'a');} else {hoog = (ch-'A');}<br>      h[k][i] = hoog;<br>    }<br>  }<br>  for (int i=0; i &lt;he; i++){<br>    for (int k=0; k&lt;wi;k++){<br>      if (i!=0) dist[k][i][k][i-1] = time(h[k][i], h[k][i-1],threshold);<br>      if (k!=0) dist[k][i][k-1][i] = time(h[k][i], h[k-1][i],threshold);<br>      if (i!=he-1) dist[k][i][k][i+1] = time(h[k][i], h[k][i+1],threshold);<br>      if (k!=wi-1) dist[k][i][k+1][i] = time(h[k][i], h[k+1][i],threshold);<br>    }<br>  }<br>  afst[0][0]=-1;<br>  fill(0,0,0);<br>  int best=h[0][0];<br>  for (int hei=51; hei&gt;h[0][0];hei--){<br>    for (int i=0; i &lt;he; i++){<br>      for (int k=0; k&lt;wi;k++){<br>        if ((h[k][i]==hei)&amp;&amp;(afst[k][i]&lt;timeToDark)&amp;&amp;(afst[k][i]!=0)){<br>          if (afst[k][i]+distance(k,i)&lt;=timeToDark) {<br>   //       System.out.println(k+" "+i+" "+afst[k][i]+" "+distance(k,i));<br>            return hei;<br>          }<br>        }<br>      }<br>    }  <br>  }<br>  return best;<br>}<br><br>}<br></td>