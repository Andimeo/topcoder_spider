<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br><br>public class FloorBoards {<br>    const int INF = 1000;<br><br>  public int layout(string[] room) {<br>        int height = room.Length;<br>        int width = room[0].Length;<br>        int[] cur = new int[1 &lt;&lt; width];<br>        for (int i = 0; i &lt; cur.Length; ++i)<br>            cur[i] = INF;<br>        cur[0] = 0;<br>        for (int y = 0; y &lt; height; ++y)<br>        {<br>            int[] nxt = new int[cur.Length];<br>            for (int i = 0; i &lt; nxt.Length; ++i)<br>                nxt[i] = INF;<br>            int mask = 0;<br>            for (int x = 0; x &lt; width; ++x)<br>                if (room[y][x] == '.')<br>                    mask |= (1 &lt;&lt; x);<br>            for (int prev = 0; prev &lt; cur.Length; ++prev)<br>                if (cur[prev] &lt; INF)<br>                {<br>                    for (int next = 0; next &lt; cur.Length; ++next)<br>                        if ((next &amp; mask) == next)<br>                        {<br>                            int delta = 0;<br>                            bool prevH = false;<br>                            for (int i = 0; i &lt; width; ++i)<br>                            {<br>                                if ((mask &amp; (1 &lt;&lt; i)) == 0)<br>                                {<br>                                    prevH = false;<br>                                }<br>                                else<br>                                {<br>                                    if ((next &amp; (1 &lt;&lt; i)) == 0)<br>                                    {<br>                                        if (!prevH)<br>                                            ++delta;<br>                                        prevH = true;<br>                                    }<br>                                    else<br>                                    {<br>                                        prevH = false;<br>                                        if ((prev &amp; (1 &lt;&lt; i)) == 0)<br>                                            ++delta;<br>                                    }<br>                                }<br>                            }<br>                            nxt[next] = Math.Min(nxt[next], cur[prev] + delta);<br>                        }<br>                }<br>            cur = nxt;<br>        }<br>        int res = INF;<br>        for (int i = 0; i &lt; cur.Length; ++i)<br>            res = Math.Min(res, cur[i]);<br>        return res;<br>    }<br><br><br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003] [modified for C# by Petr]<br>// Powered by CodeProcessor<br></td>