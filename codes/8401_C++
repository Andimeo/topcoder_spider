<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;map&gt; <br>#include &lt;set&gt; <br>#include &lt;cmath&gt;<br>#include &lt;vector&gt; <br>#include &lt;string&gt; <br>#include &lt;sstream&gt;<br>#include &lt;iostream&gt;<br>#include &lt;algorithm&gt; <br>using namespace std; <br>#define FOR(i,a,b) for(int i=(a); i&lt;(b); ++i) <br>#define FORE(it,x) for(typeof(x.begin()) it=x.begin(); it!=x.end(); ++it) <br>#define SET(x, v) memset(x, v, sizeof (x)) <br>#define sz size() <br>#define cs c_str() <br>#define pb push_back <br>#define mp make_pair<br> <br>typedef long long i64; <br> <br>class    TVGameWinnings                   { public: <br>  int n;<br>  int dat[52][52];<br>  int minA, maxA;<br>  bool col[52];<br>  bool chk[52];<br>  int sav[52],from[52];<br>  int front,rear,qu[52];<br>  void doit(int x) {<br>    if(x==n) {<br>      SET(chk, 0);<br>      int gp = 1, cnt=0;<br>      FOR(i,0,n){<br>        if(chk[i])continue;<br>        front=rear=0;<br>        qu[rear++]= i;<br>        chk[i]=1;<br>        for(;front&lt;rear;front++) {<br>          int x = qu[front];<br>          gp *= dat[x][sav[x]];<br>          int y = sav[x];<br>          int z = from[x];<br>          if(!chk[y]){qu[rear++]= y;chk[y]= 1;}<br>          if(!chk[z]){qu[rear++]= z;chk[z]= 1;}<br>        }<br>        cnt++;<br>      }<br>      if(cnt%2==0) gp*=-1;<br>      printf("%d\n",gp);<br>      minA=min(minA, gp);<br>      maxA=max(maxA, gp);<br>      return;<br>    }<br>    FOR(i,0,n) {<br>      if(chk[i])continue;<br>      if(dat[x][i]==0){<br>        minA=min(minA, 0);<br>        maxA=max(maxA, 0);<br>        continue;<br>      }<br>      chk[i]= true;<br>      sav[x]= i;<br>      from[i]= x;<br>      doit(x+1);<br>      chk[i]= false;<br>    }<br>  }<br>  vector &lt;int&gt; getMinMax(vector &lt;string&gt; board) {<br>    n = board.sz;<br>    FOR(i,0,n)<br>      FOR(j,0,n)<br>        if(board[i][j]&lt;='9' &amp;&amp; board[i][j]&gt;='0') dat[i][j]= board[i][j] - '0';<br>        else dat[i][j] =(board[i][j] -'A' + 1)*(-1);<br>    FOR(i,0,n){FOR(j,0,n)printf("%2d ",dat[i][j]); printf("\n"); }<br>    minA = 2147483647;<br>    maxA = -2147483648;<br>    SET(col, 0);<br>    doit(0);<br>    vector&lt;int&gt; ret;<br>    ret.pb(minA);<br>    ret.pb(maxA);<br>    return ret;<br>  }<br><br><br><br>};<br></td>