<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections;<br>using System.Collections.Generic;<br>using System.Collections.Specialized;<br>using System.Text;<br>using System.Text.RegularExpressions;<br> <br>public class WarTransportation<br>{<br>  public int messenger(int n, string[] highways)<br>  {<br>        StringBuilder s = new StringBuilder();<br>        for (int i = 0; i &lt; highways.Length; ++i)<br>        {<br>            s.Append(highways[i]);<br>        }<br>        int[] z = Array.ConvertAll&lt;string, int&gt;(s.ToString().Split(new char[] {' ', ','} ), int.Parse);<br>        int m = z.Length / 3;<br>        int[,] d = new int[m, n];<br>        for (int p = 0; p &lt; m; ++p)<br>        {<br>            for (int i = 0; i &lt; n; ++i)<br>            {<br>                d[p, i] = 100000000;<br>            }<br>            d[p, z[p * 3] - 1] = 0;<br>            for (int i = 0; i &lt; n; ++i)<br>            {<br>                for (int j = 0; j &lt; m; ++j)<br>                {<br>                    if (j != p)<br>                    {<br>                        int a = z[j * 3] - 1;<br>                        int b = z[j * 3 + 1] - 1;<br>                        int c = z[j * 3 + 2];<br>                        if (d[p, a] + c &lt; d[p, b])<br>                        {<br>                            d[p, b] = d[p, a] + c;<br>                        }<br>                    }<br>                }<br>            }<br>        }<br>        int[,] e = new int[n, n];<br>        for (int i = 0; i &lt; n; ++i)<br>        {<br>            for (int j = 0; j &lt; n; ++j)<br>            {<br>                e[i, j] = 100000000;<br>            }<br>        }<br>        for (int j = 0; j &lt; m; ++j)<br>        {<br>            int a = z[j * 3] - 1;<br>            int b = z[j * 3 + 1] - 1;<br>            int c = z[j * 3 + 2];<br>            if (c &lt; e[a, b])<br>            {<br>                e[a, b] = c;<br>            }<br>        }<br>        for (int k = 0; k &lt; n; ++k)<br>        {<br>            for (int i = 0; i &lt; n; ++i)<br>            {<br>                for (int j = 0; j &lt; n; ++j)<br>                {<br>                    if (e[i, k] + e[k, j] &lt; e[i, j])<br>                    {<br>                        e[i, j] = e[i, k] + e[k, j];<br>                    }<br>                }<br>            }<br>        }<br>        int[] f = new int[n];<br>        for (int i = 0; i &lt; n; ++i)<br>        {<br>            f[i] = e[i, 1];<br>            for (int j = 0; j &lt; m; ++j)<br>            {<br>                int a = z[j * 3] - 1;<br>                int b = z[j * 3 + 1] - 1;<br>                int c = z[j * 3 + 2];<br>                if (a == i &amp;&amp; d[j, 1] &gt; f[i])<br>                {<br>                    f[i] = d[j, 1];<br>                }<br>            }<br>            if (f[i] &gt; 100000000)<br>            {<br>                f[i] = 100000000;<br>            }<br>        }<br>        int low = -1;<br>        int high = 100000000;<br>        while (low + 1 &lt; high)<br>        {<br>            int distance = low + (high - low) / 2;<br>            int[] g = new int[n];<br>            bool[] v = new bool[n];<br>            for (int i = 0; i &lt; n; ++i)<br>            {<br>                g[i] = 100000000;<br>                v[i] = false;<br>            }<br>            g[0] = 0;<br>            while (true)<br>            {<br>                int k = -1;<br>                for (int i = 0; i &lt; n; ++i)<br>                {<br>                    if (!v[i] &amp;&amp; (k &lt; 0 || g[i] &lt; g[k]))<br>                    {<br>                        k = i;<br>                    }<br>                }<br>                if (k &lt; 0 || k == 1)<br>                {<br>                    break;<br>                }<br>                v[k] = true;<br>                if (g[k] + f[k] &gt; distance)<br>                {<br>                    continue;<br>                }<br>                for (int j = 0; j &lt; m; ++j)<br>                {<br>                    int a = z[j * 3] - 1;<br>                    int b = z[j * 3 + 1] - 1;<br>                    int c = z[j * 3 + 2];<br>                    if (a == k &amp;&amp; g[k] + c &lt; g[b])<br>                    {<br>                        g[b] = g[k] + c;<br>                    }<br>                }<br>            }<br>            if (g[1] &lt;= distance)<br>            {<br>                high = distance;<br>            }<br>            else<br>            {<br>                low = distance;<br>            }<br>        }<br>        if (high == 100000000)<br>        {<br>            return -1;<br>        }<br>        return high;<br>  }<br>}<br></td>