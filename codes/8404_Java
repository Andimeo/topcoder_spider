<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>import java.util.regex.*;<br>import java.text.*;<br>import java.math.*;<br> <br> <br>public class WarTransportation<br>{<br>  public int messenger(int n, String[] highways)<br>  {<br>    int[][] d = new int[n][n];<br>    for (int[] ar : d) {<br>      Arrays.fill(ar,  1000000000);<br>    }<br>    int[][] d2 = new int[n][n];<br>    for (int[] ar : d2) {<br>      Arrays.fill(ar,  1000000000);<br>    }<br>    StringBuilder sb = new StringBuilder();<br>    for (String s : highways) {<br>      sb.append(s);<br>    }<br>    for (String s : sb.toString().split(",")) {<br>      String[] tmp = s.split(" ");<br>      int a = Integer.parseInt(tmp[0]) - 1;<br>      int b = Integer.parseInt(tmp[1]) - 1;<br>      int c = Integer.parseInt(tmp[2]);<br>      if (d[a][b] &gt; c) {<br>        d2[a][b] = d[a][b];<br>        d[a][b] = c;<br>      } else if (d2[a][b] &gt; c) {<br>        d2[a][b] = c;<br>      }<br>    }<br>    int[] failedDist = new int[n];<br>    boolean[] col = new boolean[n];<br>    int[] dist = new int[n];<br>    for (int i = 0; i &lt; n; ++i) {<br>      if (i == 1) {<br>        continue;<br>      }<br>      Arrays.fill(col, false);<br>      col[i] = true;<br>      Arrays.fill(dist, 1000000000);<br>      dist[1] = 0;<br>      while (true) {<br>        int i_ = -1;<br>        for (int j = 0; j &lt; n; ++j) {<br>          if (!col[j] &amp;&amp; (i_ == -1 || dist[i_] &gt; dist[j])) {<br>            i_ = j;<br>          }<br>        }<br>        if (i_ == -1) {<br>          break;<br>        }<br>        col[i_] = true;<br>        for (int j = 0; j &lt; n; ++j) {<br>          dist[j] = Math.min(dist[j], dist[i_] + d[j][i_]);<br>        }<br>      }<br>      for (int j = 0; j &lt; n; ++j) {<br>        if (j == i) {<br>          continue;<br>        }<br>        int cur = 1000000000;<br>        for (int k = 0; k &lt; n; ++k) {<br>          if (k == i) {<br>            continue;<br>          }<br>          cur = Math.min(cur, dist[k] + (j == k ? d2[i][k] : d[i][k]));<br>        }<br>        failedDist[i] = Math.max(failedDist[i], cur);<br>      }<br>    }<br>    //System.out.println(Arrays.toString(failedDist));<br>    Arrays.fill(col, false);<br>    Arrays.fill(dist, 1000000000);<br>    dist[1] = 0;<br>    while (true) {<br>      int i = -1;<br>      for (int j = 0; j &lt; n; ++j) {<br>        if (!col[j] &amp;&amp; (i == -1 || dist[i] &gt; dist[j])) {<br>          i = j;<br>        }<br>      }<br>      if (i == -1) {<br>        break;<br>      }<br>      col[i] = true;<br>      for (int j = 0; j &lt; n; ++j) {<br>        dist[j] = Math.max(failedDist[j], Math.min(dist[j], dist[i] + d[j][i]));<br>      }<br>    }<br>    //System.out.println(Arrays.toString(dist));<br>    return dist[0] &gt;= 1000000000 ? -1 : dist[0];<br>  }<br>  <br> <br>}<br>//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!<br></td>