<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections.Generic;<br>using System.Text;<br><br>public class CandidateKeys {<br>  public int[] getKeys(string[] table) {<br>        int attrs = table[0].Length;<br>        bool[] super = new bool[1 &lt;&lt; attrs];<br>        Dictionary&lt;string, object&gt; tmp = new Dictionary&lt;string, object&gt;();<br>        int min = attrs + 1;<br>        int max = -1;<br>        for (int i = 0; i &lt; super.Length; ++i)<br>        {<br>            tmp.Clear();<br>            bool ok = true;<br>            foreach (string x in table)<br>            {<br>                StringBuilder b = new StringBuilder();<br>                for (int j = 0; j &lt; attrs; ++j)<br>                    if (((i &gt;&gt; j) &amp; 1) != 0)<br>                        b.Append(x[j]);<br>                string s = b.ToString();<br>                if (tmp.ContainsKey(s))<br>                {<br>                    ok = false;<br>                    break;<br>                }<br>                else<br>                {<br>                    tmp[s] = null;<br>                }<br>            }<br>            super[i] = ok;<br>            if (ok)<br>            {<br>                int cnt = 0;<br>                for (int j = 0; j &lt; attrs; ++j)<br>                    if (((i &gt;&gt; j) &amp; 1) != 0)<br>                    {<br>                        ++cnt;<br>                        if (super[i ^ (1 &lt;&lt; j)])<br>                        {<br>                            ok = false;<br>                            break;<br>                        }<br>                    }<br>                if (ok)<br>                {<br>                    min = Math.Min(min, cnt);<br>                    max = Math.Max(max, cnt);<br>                }<br>            }<br>        }<br>        if (max &lt; 0)<br>            return new int[0];<br>        else<br>            return new int[] { min, max };<br>  }<br><br><br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003] [modified for C# by Petr]<br>// Powered by CodeProcessor<br></td>