<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;vector&gt;<br>#include &lt;list&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;deque&gt;<br>#include &lt;queue&gt;<br>#include &lt;stack&gt;<br>#include &lt;bitset&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;functional&gt;<br>#include &lt;numeric&gt;<br>#include &lt;utility&gt;<br>#include &lt;sstream&gt;<br>#include &lt;iostream&gt;<br>#include &lt;iomanip&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cctype&gt;<br>#include &lt;string&gt;<br>#include &lt;cstring&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;ctime&gt;<br> <br>using namespace std;<br> <br>#define two(X) (1&lt;&lt;(X))<br>#define contain(S,X) (((S)&amp;two(X))!=0)<br>template&lt;class T&gt; inline int countbit(T n){return (n==0)?0:(1+countbit(n&amp;(n-1)));}<br> <br>class CandidateKeys<br>{<br>public:<br>    bool f[two(10)];<br>    vector&lt;string&gt; B;<br>  vector &lt;int&gt; getKeys(vector &lt;string&gt; A)<br>  {<br>    int n=A[0].length();<br>        int m=A.size();<br>        memset(f,false,sizeof(f));<br>        int m1=+100000;<br>        int m2=-100000;<br>        for (int set=0;set&lt;two(n);set++)<br>        {<br>            f[set]=true;<br>            B.clear();<br>            for (int i=0;i&lt;m;i++)<br>            {<br>                string s="";<br>                for (int k=0;k&lt;n;k++) if (contain(set,k)) s+=A[i][k];<br>                B.push_back(s);<br>            }<br>            sort(B.begin(),B.end());<br>            for (int i=0;i&lt;m-1;i++) if (B[i]==B[i+1]) f[set]=false;<br>            if (!f[set]) continue;<br>            int c=countbit(set);<br>            bool good=true;<br>            for (int s0=0;s0&lt;set;s0++) if ((set&amp;s0)==s0 &amp;&amp; f[s0]) good=false;<br>            if (!good) continue;<br>            if (c&lt;m1) m1=c;<br>            if (c&gt;m2) m2=c;<br>        }<br>        vector&lt;int&gt; result;<br>        if (m1&lt;100000)<br>        {<br>            result.push_back(m1);<br>            result.push_back(m2);<br>        }<br>        return result;<br>  }<br>};<br> <br> <br> <br>// Powered by PopsEdit<br></td>