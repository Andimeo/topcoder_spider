<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;vector&gt;<br>#include &lt;list&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;deque&gt;<br>#include &lt;queue&gt;<br>#include &lt;stack&gt;<br>#include &lt;bitset&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;functional&gt;<br>#include &lt;numeric&gt;<br>#include &lt;utility&gt;<br>#include &lt;sstream&gt;<br>#include &lt;iostream&gt;<br>#include &lt;iomanip&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cctype&gt;<br>#include &lt;string&gt;<br>#include &lt;cstring&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;ctime&gt;<br> <br>using namespace std;<br> <br>#define SIZE(X) ((int)(X.size()))<br>#define LENGTH(X) ((int)(X.length()))<br> <br>struct Tnode<br>{<br>  char type;<br>  vector&lt;int&gt; childs;<br>  int size;<br>};<br> <br>class TreeMaps<br>{<br>public:<br>  int n;<br>  Tnode tree[1000];<br>  int solve(int v,double x1,double y1,double x2,double y2,double x0,double y0)<br>  {<br>    if (tree[v].type=='F')<br>    {<br>      tree[v].size=0;<br>      return v;<br>    }<br>    int tmp=-1;<br>    double last=x1;<br>    for (int i=0;i&lt;SIZE(tree[v].childs);i++)<br>    {<br>      double next=last+(x2-x1)/tree[v].size*tree[tree[v].childs[i]].size;<br>      if (x0&gt;=last &amp;&amp; x0&lt;=next)<br>      {<br>        tmp=solve(tree[v].childs[i],y1,last,y2,next,y0,x0);<br>        break;<br>      }<br>      last=next;<br>    }<br>    tree[v].size=0;<br>    for (int i=0;i&lt;SIZE(tree[v].childs);i++)<br>      tree[v].size+=tree[tree[v].childs[i]].size;<br>    return tmp;<br>  }<br>  vector &lt;int&gt; eraseFiles(string type, vector &lt;int&gt; parent, vector &lt;int&gt; size, int width, int height, vector &lt;int&gt; px, vector &lt;int&gt; py)<br>  {<br>    n=LENGTH(type);<br>    for (int i=0;i&lt;n;i++)<br>    {<br>      tree[i].type=type[i];<br>      tree[i].childs.clear();<br>      tree[i].size=size[i];<br>    }<br>    for (int i=0;i&lt;n;i++)<br>      if (parent[i]&gt;=0)<br>        tree[parent[i]].childs.push_back(i);<br>    vector&lt;int&gt; R;<br>    for (int i=0;i&lt;SIZE(px);i++)<br>    {<br>      int ret=solve(0,0,0,width,height,px[i],py[i]);<br>      R.push_back(ret);<br>    }<br>    return R;<br>  }<br>};<br> <br> <br> <br>// Powered by PopsEdit<br></td>