<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections;<br>using System.Collections.Generic;<br><br>public class CandyGame {<br>    public int maximumCandy(string[] graph, int target) {<br>        int N = graph.Length;<br>        bool[,] c = new bool[N, N];<br>        int[,] d = new int[N, N];<br>        for (int i = 0; i &lt; N; i++) {<br>            for (int j = 0; j &lt; N; j++) {<br>                d[i, j] = 999999;<br>                c[i, j] = graph[i][j] == 'Y';<br>                if (c[i, j]) d[i, j] = 1;<br>            }<br>            d[i,i]=0;<br>        }<br><br>        for (int i = 0; i &lt; N; i++) {<br>            for (int j = 0; j &lt; N; j++) {<br>                for (int k = 0; k &lt; N; k++) {<br>                    c[j, k] |= c[j, i] &amp;&amp; c[i, k];<br>                    d[j, k] = Math.Min(d[j, i] + d[i, k], d[j, k]);<br>                }<br>            }<br>        }<br>        for (int i = 0; i &lt; N; i++) {<br>            for (int j = 0; j &lt; N; j++) if (i!=j) {<br>                    if (!c[i, j]) return -1;<br>            }<br>        }<br><br>        long ret = 0;<br>        for (int i = 0; i &lt; N; i++) {<br>            if (d[i, target] &gt; 0) {<br>                int longestleaf = 0;<br>                for (int j = 0; j &lt; N; j++) {<br>                    if (d[j, target] == d[j, i] + d[i, target]) longestleaf = Math.Max(longestleaf, d[j, i]);<br>                }<br>                long valadd = 1;<br>                for (int j = 0; j &lt; longestleaf; j++) {<br>                    valadd *= 2;<br>                }<br>                ret += valadd;<br>            }<br>        }<br>        if (ret &lt;= 2000000000) return (int)ret;<br>        return -1;<br><br><br><br><br>    }<br>}<br></td>