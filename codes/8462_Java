<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>public class CandyGame<br>{<br>  public int maximumCandy(String[] graph, int target)<br>  {<br>    n = graph.length;<br>    a = new boolean[n][n];<br>    for(int i=0;i&lt;n;i++)<br>      for(int j=0;j&lt;n;j++)<br>        a[i][j] = graph[i].charAt(j)=='Y';<br>      <br>    memo = new long[n];<br>    vis = new boolean[n];<br>    <br>    Arrays.fill(memo, -1L);<br>    int ret = (int) recurse(target, 1, -1);<br>    for(int i=0;i&lt;n;i++)<br>      if(!vis[i])<br>        return -1;<br>    return ret &gt; 2000000000?-1:ret;<br>  }<br>  int n; boolean[][] a;<br>  long[] memo; boolean[] vis;<br>  long recurse(int node, int limit, int parent)<br>  {<br>    vis[node] = true;<br>    if(limit==2 &amp;&amp; memo[node]!=-1)<br>      return memo[node];<br>    <br>    long sum = 0, max = 0;<br>    int maxi = -1;<br>    for(int i=0;i&lt;n;i++)<br>    {<br>      if(i!=parent &amp;&amp; a[node][i])<br>      {<br>        long temp = recurse(i, 2, node);<br>        sum += temp;<br>        if(temp&gt;max)<br>        {<br>          maxi = i;<br>          max = temp;<br>        }<br>      }<br>    }<br>    if(maxi!=-1)<br>    {<br>      sum -= max;<br>      sum += recurse(maxi, 2*limit, node);<br>    }<br>    <br>    if(limit==2)<br>      memo[node] = Math.max(sum, limit-1);<br>    return Math.max(sum, limit-1);<br>  }<br>}<br></td>