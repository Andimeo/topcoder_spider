<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;iostream&gt;<br>#include &lt;sstream&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;stack&gt;<br>#include &lt;queue&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cctype&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cstdlib&gt;<br> <br>#define REP(i, T) for(int (i)=0; (i) &lt; T; (i) ++)<br>#define FOR(i, L, R) for(int (i)=L; (i) &lt; R; (i) ++)<br>#define ALL(v) v.begin(), v.end()<br>#define SORT(v) sort(ALL(v))<br>#define SZ(v) (int)v.size()<br>#define PB(v, i) v.push_back(i)<br>#define ERS(v, i) v.erase(v.begin()+i)<br>#define bits(n) __builtin_popcount(n)<br> <br>#define vi vector&lt;int&gt;<br>#define vs vector&lt;string&gt;<br> <br>using namespace std;<br> <br>#define INF -1000000000<br> <br>int dp[51][51];<br>int N, tn;<br>vi p, b;<br> <br>int getMax(int q, int t) {<br>  if(q == N) return 0;<br>  if(dp[q][t] &gt; INF) return dp[q][t];<br>  <br>  if(t == tn-1) dp[q][t] = max(b[q] + p[q] + getMax(q+1, 0), getMax(q+1, t) - p[q]);<br>  else dp[q][t] = max(p[q] + getMax(q+1, t+1), getMax(q+1, t) - p[q]);<br>  <br>  return dp[q][t];<br>}<br> <br> <br>class TriviaGame {<br>  public:<br>  int maximumScore(vector &lt;int&gt; points, int tokensNeeded, vector &lt;int&gt; bonuses) {<br>    N = SZ(points);<br>    tn = tokensNeeded;<br>    p = points;<br>    b = bonuses;<br>    REP(i, 51) REP(j, 51) dp[i][j] = INF;<br>    <br>    return getMax(0, 0);<br>  }<br>  <br> <br>};<br> <br> <br> <br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003]<br>// Powered by CodeProcessor<br></td>