<td class="problemText" colspan="8" valign="middle" align="left">
            // Cry as challenge phase is passing by<br><br>#include &lt;algorithm&gt;<br>#include &lt;functional&gt;<br><br>#include &lt;cmath&gt;<br>#include &lt;cctype&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cstring&gt;<br><br>#include &lt;queue&gt;<br>#include &lt;vector&gt;<br>#include &lt;string&gt;<br>#include &lt;sstream&gt;<br>#include &lt;iostream&gt;<br><br>using namespace std;<br><br>#define FORC(it,v) for( __typeof((v).begin()) it = (v).begin(); it != (v).end(); ++it )<br><br>int R, S;<br>int dp[ 1 &lt;&lt; 7 ][ 1 &lt;&lt; 7 ][ 7 ][ 7 ];<br><br>vector&lt; string &gt; grid;<br><br>struct state {<br>    int x, y;<br>    int row;<br>    int col;<br><br>    state() {}<br>    state( int _x, int _y, int _row, int _col ) : x( _x ), y( _y ), row( _row ), col( _col ) {}<br>    <br>    int &amp;ref() { return dp[row][col][x][y]; }<br>};<br><br>const int dx[4] = { -1, 0, 1, 0 };<br>const int dy[4] = { 0, 1, 0, -1 };<br><br>inline bool valid( int x, int y ) { if( x &lt; 0 || y &lt; 0 || x &gt;= R || y &gt;= S ) return false; return true; }<br><br>inline bool has_door( state ex, int x, int y, int pc )<br>{<br>    int ch = ( ( ex.row &gt;&gt; x ) &amp; 1 ) ^ ( ( ex.col &gt;&gt; y ) &amp; 1 );<br>    if( grid[x][y] == 'A' ) return true;<br>    if( grid[x][y] == 'B' ) return false;<br><br>    if( ( grid[x][y] == 'C' &amp;&amp; ch == 0 ) || ( grid[x][y] == 'D' &amp;&amp; ch == 1 ) ) {<br>        if( pc == 0 || pc == 2 ) return true;<br>        return false;<br>    }<br><br>    if( pc == 1 || pc == 3 ) return true;<br>    return false;<br>}<br><br>class TurningMaze {<br>public:<br>    int minTime( vector &lt;string&gt; maze ) {<br>        grid = maze;<br>        R = ( int )grid.size();<br>        S = ( int )grid[0].size();<br><br>        queue&lt; state &gt; Q;<br><br>        memset( dp, -1, sizeof dp );<br>        state start( 0, 0, 0, 0 );<br><br>        for( Q.push( start ), start.ref() = 0; !Q.empty(); Q.pop() ) {<br>            state ex = Q.front();<br><br>            if( ex.x == R-1 &amp;&amp; ex.y == S-1 ) return ex.ref();<br><br>            for( int pc = 0; pc &lt; 4; ++pc ) {<br>                int nx = ex.x + dx[pc];<br>                int ny = ex.y + dy[pc];<br><br>                if( !valid( nx, ny ) ) continue;<br>                if( !has_door( ex, ex.x, ex.y, pc ) ) continue;<br>                if( !has_door( ex, nx, ny, pc^2 ) ) continue;<br><br>                state nov( nx, ny, ex.row, ex.col );<br><br>                if( nov.ref() != -1 ) continue;<br><br>                nov.ref() = ex.ref() + 1;<br>                Q.push( nov );<br>            }<br><br>            {<br>                state nov( ex.x, ex.y, ex.row ^ (1&lt;&lt;ex.x), ex.col ^ (1&lt;&lt;ex.y) );<br>                if( nov.ref() != -1 ) continue;<br>                nov.ref() = ex.ref() + 1;<br>                Q.push( nov );<br>            }<br>        }<br><br>        return -1;<br>    }<br>};<br><br><br><br><br><br><br><br><br><br>// Powered by FileEdit<br>// Powered by moj 3.0 beta 11 [modified TZTester]<br>// Powered by CodeProcessor<br></td>