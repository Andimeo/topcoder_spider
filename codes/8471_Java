<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>import java.math.*;<br>import java.io.*;<br>import java.text.*;<br>import java.util.regex.*;<br>import static java.util.Arrays.*;<br>import static java.lang.Math.*;<br>import static java.lang.Integer.parseInt;<br>public class TurningMaze {<br>  int[] dx = {1,-1,0,0,0};<br>  int[] dy = {0,0,1,-1,0};<br>  int[] turn = {0,0,0,0,1};<br>  public int minTime(String[] maze) {<br>    int mx = maze.length;<br>    int my = maze[0].length();<br>    LinkedList&lt;State&gt; que = new LinkedList();<br>    que.add(new State(0,0,0,0,0));<br>    boolean[][][][] done = new boolean[mx][my][1&lt;&lt;mx][1&lt;&lt;my];<br>    while(que.size() &gt; 0){<br>      State s = que.removeFirst();<br>      if(s.x == mx-1 &amp;&amp; s.y == my-1) return s.c;<br>      for(int i = 0; i &lt; dx.length; i++){<br>        int nx = s.x+dx[i];<br>        int ny = s.y+dy[i];<br>        int nrow = s.row ^ (turn[i]*(1&lt;&lt;s.x));<br>        int ncol = s.col ^ (turn[i]*(1&lt;&lt;s.y));<br>        if(nx &lt; 0 || ny &lt; 0 || nx &gt;= mx || ny &gt;= my) continue;<br>        if(done[nx][ny][nrow][ncol]) continue;<br>        char atc = maze[s.x].charAt(s.y);<br>        char toc = maze[nx].charAt(ny);<br>        atc = mod(atc, s.row, s.col, s.x, s.y);<br>        toc = mod(toc, s.row, s.col, nx, ny);<br>        if(i &lt; 2 &amp;&amp; (atc == 'B' || atc == 'D' || toc == 'B' || toc == 'D')) continue;<br>        if(i &gt;= 2 &amp;&amp; i &lt; 4 &amp;&amp; (atc == 'B' || atc == 'C' || toc == 'B' || toc == 'C')) continue;<br>        done[nx][ny][nrow][ncol] = true;<br>        que.add(new State(nx, ny, nrow, ncol, s.c+1));<br>      }<br>    }<br>    return -1;<br>  }<br>  char mod(char c, int row, int col, int x, int y){<br>    if(c == 'A' || c == 'B') return c;<br>    boolean isC = c == 'C';<br>    if(((1&lt;&lt;x)&amp;row)!=0) isC = !isC;<br>    if(((1&lt;&lt;y)&amp;col)!=0) isC = !isC;<br>    return isC ? 'C' : 'D';<br>  }<br>  class State{<br>    int x, y, row, col, c;<br>    State(int xx, int yy, int roww, int coll, int cc){<br>      x = xx;<br>      y = yy;<br>      row = roww;<br>      col = coll;<br>      c = cc;<br>    }<br>  }<br> <br>}<br> <br>// Powered by PopsEdit<br>// Powered by CodeProcessor<br></td>