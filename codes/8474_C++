<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;vector&gt;<br>#include &lt;iostream&gt;<br>#include &lt;fstream&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cmath&gt;<br>#include &lt;set&gt;<br>#include &lt;map&gt;<br>using namespace std;<br><br>#define int64 long long<br><br>int64 minnum[6][50];<br><br>class SummingArithmeticProgressions<br>{<br>public:<br>  int howMany(int l, int r, int k)<br>  {<br>    int k2 = k * (k - 1) / 2;<br>    memset(minnum, -1, sizeof(minnum));<br>    int a = (k * (k - 1) / 2 + k);<br>    minnum[a % k][a % k2] = a;<br>    int f = 1;<br>    while (f)<br>    {<br>      f = 0;<br>      int i, j;<br>      for (i = 0; i &lt; k; i++)<br>      {<br>        for (j = 0; j &lt; k2; j++)<br>        {<br>          if (minnum[i][j] == -1) continue;<br>          int a = minnum[i][j] + k;<br>          if ((minnum[a % k][a % k2] == -1) || (minnum[a % k][a % k2] &gt; a))<br>          {<br>            minnum[a % k][a % k2] = a;<br>            f = 1;<br>          }<br>          a = minnum[i][j] + k2;<br>          if ((minnum[a % k][a % k2] == -1) || (minnum[a % k][a % k2] &gt; a))<br>          {<br>            minnum[a % k][a % k2] = a;<br>            f = 1;<br>          }<br>        }<br>      }<br>    }<br>    int i, j;<br>    int64 res = 0;<br>    int64 gdist = k2;<br>    while (! ((gdist % k == 0) &amp;&amp; (gdist % k2 == 0))) gdist++;<br>    cerr &lt;&lt; gdist &lt;&lt; " " &lt;&lt; k &lt;&lt; " " &lt;&lt; k2 &lt;&lt; "\n";<br>    for (i = 0; i &lt; k; i++)<br>    {<br>      for (j = 0; j &lt; k2; j++)<br>      {<br>        if (minnum[i][j] == -1) continue;<br>        int64 cl = l;<br>        int64 cr = r;<br>        while ((cl % k != i) || (cl % k2 != j)) cl++;<br>        while ((cr % k != i) || (cr % k2 != j)) <br>        {<br>          if (cr &lt; 0) break;<br>          cr--;<br>        }<br>        if (cl &lt; minnum[i][j]) cl = minnum[i][j];<br>        if (cl &gt; cr) continue;<br>        //cerr &lt;&lt; i &lt;&lt; " " &lt;&lt; j &lt;&lt; " " &lt;&lt; cl &lt;&lt; " " &lt;&lt; cr &lt;&lt; "\n";<br>        res += (cr - cl + gdist) / gdist;<br>      }<br>    }<br>    return res;<br>  }<br>};<br></td>