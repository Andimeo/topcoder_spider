<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br><br>public class ErrantKnight {<br>    const int MAX_COORD = 6100;<br>    const int MAX_FILL = 4000;<br>    sbyte[,] table;<br><br>    int fill(int a, int b)<br>    {<br>        a = Math.Abs(a);<br>        b = Math.Abs(b);<br>        if (a != b &amp;&amp; a != 0 &amp;&amp; b != 0)<br>        {<br>            return 1;<br>        }<br>        if (table[a, b] != 0)<br>            return table[a, b];<br>        table[a, b] = -1;<br>        for (int dx = -2; dx &lt;= 2; ++dx)<br>        {<br>            for (int dy = -2; dy &lt;= 2; ++dy)<br>                if (Math.Abs(dx * dy) == 2)<br>                {<br>                    if ((a + dx) * (a + dx) + (b + dy) * (b + dy) &lt; a * a + b * b)<br>                    {<br>                        if (a &gt; 0 &amp;&amp; dx &lt; 0 &amp;&amp; a % (-dx) == 0)<br>                        {<br>                            int k = a / (-dx);<br>                            int na = a + dx * k;<br>                            int nb = b + dy * k;<br>                            if (na * na + nb * nb &lt; (na - dx) * (na - dx) + (nb - dy) * (nb - dy))<br>                            {<br>                                if (fill(na, nb) == -1)<br>                                    table[a, b] = 1;<br>                            }<br>                        }<br>                        if (b &gt; 0 &amp;&amp; dy &lt; 0 &amp;&amp; b % (-dy) == 0)<br>                        {<br>                            int k = b / (-dy);<br>                            int na = a + dx * k;<br>                            int nb = b + dy * k;<br>                            if (na * na + nb * nb &lt; (na - dx) * (na - dx) + (nb - dy) * (nb - dy))<br>                            {<br>                                if (fill(na, nb) == -1)<br>                                    table[a, b] = 1;<br>                            }<br>                        }<br>                        if (a != b)<br>                        {<br>                            int need = a - b;<br>                            int step = dy - dx;<br>                            if (need % step == 0 &amp;&amp; need / step &gt; 0)<br>                            {<br>                                int k = need / step;<br>                                int na = a + dx * k;<br>                                int nb = b + dy * k;<br>                                if (na * na + nb * nb &lt; (na - dx) * (na - dx) + (nb - dy) * (nb - dy))<br>                                {<br>                                    if (fill(na, nb) == -1)<br>                                        table[a, b] = 1;<br>                                }<br>                            }<br>                        }<br>                    }<br>                }<br>        }<br>        return table[a, b];<br>    }<br><br>    void buildTable()<br>    {<br>        table = new sbyte[MAX_COORD, MAX_COORD];<br>        for (int i = 0; i &lt;= MAX_FILL; ++i)<br>            for (int j = 0; j &lt;= MAX_FILL; ++j)<br>            {<br>                table[i, j] = (sbyte) fill(i, j);<br>            }<br>    }<br><br>    public string whoWins(int[] x, int[] y)<br>    {<br>        buildTable();<br>        string res = "";<br>        for (int i = 0; i &lt; x.Length; ++i)<br>            if (table[Math.Abs(x[i]), Math.Abs(y[i])] == 1)<br>                res += 'W';<br>            else<br>                res += 'B';<br>        return res;<br>  }<br><br><br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003] [modified for C# by Petr]<br>// Powered by CodeProcessor<br></td>