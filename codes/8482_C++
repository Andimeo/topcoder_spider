<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;vector&gt;<br>#include &lt;iostream&gt;<br>#include &lt;fstream&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cmath&gt;<br>#include &lt;set&gt;<br>#include &lt;map&gt;<br>using namespace std;<br><br><br>class UnderscoreJustification<br>{<br>public:<br>  string justifyLine(vector &lt;string&gt; words, int w)<br>  {<br>    int sum = 0;<br>    int i;<br>    for (i = 0; i &lt; words.size(); i++)<br>    {<br>      sum += words[i].length();<br>    }    <br>    int n = words.size();<br>    int lft = w - sum;<br>    int evr = lft / (n - 1);<br>    int numgr = lft - (evr * (n - 1));<br>    string opt = "";<br>    cerr &lt;&lt; numgr &lt;&lt; "\n";<br>    for (i = 0; i &lt; (1 &lt;&lt; (n - 1)); i++)<br>    {<br>      int j = 0, k = 0;<br>      for (j = 0; j &lt; (n - 1); j++)<br>      {<br>        if ((i &amp; (1 &lt;&lt; j)) != 0) k++;<br>      }<br>      if (k != numgr) continue;<br>      string cur = "";<br>      int curu = 0;<br>      int ii;<br>      for (ii = 0; ii &lt; words.size(); ii++)<br>      {<br>        if (ii &lt; words.size() - 1)<br>        {<br>          if ((i &amp; (1 &lt;&lt; ii)) != 0)<br>          {<br>            curu = evr + 1;<br>          }<br>          else curu = evr;<br>        }<br>        else curu = 0;<br>        int p;<br>        cur += words[ii];<br>        for (p = 0; p &lt; curu; p++)<br>        {<br>          cur += "_";<br>        }<br>      }<br>      //cerr &lt;&lt; cur &lt;&lt; "\n";<br>      if ((opt == "") || (cur &lt; opt))<br>      {<br>        opt = cur;<br>      }<br>    }<br>    return opt;<br>  }<br>};<br></td>