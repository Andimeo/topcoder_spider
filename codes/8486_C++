<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;algorithm&gt;<br>#include &lt;cmath&gt;<br>#include &lt;iostream&gt;<br>#include &lt;limits&gt;<br>#include &lt;list&gt;<br>#include &lt;map&gt;<br>#include &lt;queue&gt;<br>#include &lt;set&gt;<br>#include &lt;sstream&gt;<br>#include &lt;stack&gt;<br>#include &lt;string&gt;<br>#include &lt;vector&gt;<br>using namespace std;<br><br>#define debug(c) cout &lt;&lt; "&gt; " &lt;&lt; #c &lt;&lt; " = " &lt;&lt; c &lt;&lt; endl;<br>#define forn(i, a, b) for (int i = (int)(a); i &lt; int(b); ++i)<br>#define rep(i, n) for (int i = 0; i &lt; (int)(n); ++i)<br>#define repsz(i, c) for (int i = 0; i &lt; (int)(c.size()); ++i)<br>#define all(x) (x).begin(), (x).end()<br>#define mp make_pair<br>#define pb push_back<br>#define inf(type) numeric_limits&lt;type&gt;::max()<br>typedef pair&lt;int, int&gt; PI;<br>typedef vector&lt;PI&gt; VPI;<br>typedef long long ll;<br><br>vector &lt;vector&lt;int&gt; &gt; tbl;<br>vector &lt;int&gt; h;<br>vector &lt;int&gt; len;<br>int val = 0;<br>int norm;<br>void go(int x)<br>{<br>  for (int i = 0; i &lt; tbl[x].size(); ++i)<br>  {<br>    int dst = tbl[x][i];<br>    h[dst] = h[x] + 1;<br>    go(dst);<br>    len[x] = max(len[x], 1 + len[dst]);<br>  }<br>}<br>void go1(int x)<br>{<br>  int maxh = h[x] + len[x];<br>  int need = max(0, maxh - norm);<br>  int can = max(h[x] - 1, 0);<br>  int add = min(can, need);<br>  debug(x);<br>  debug(maxh);<br>  debug(need);<br>  debug(can);<br>  val += add;<br>  h[x] -= add;<br>  for (int i = 0; i &lt; tbl[x].size(); ++i)<br>  {<br>    int dst = tbl[x][i];<br>    h[dst] = h[x] + 1;<br>    go1(dst);<br>  }<br>}<br>class LittleTree<br>{<br>public:<br>  int minCost(int n, vector &lt;string&gt; edges, int height)<br>  {<br>    norm = height;<br>    tbl.resize(n);<br>    string s;<br>    for (int i = 0; i &lt; edges.size(); ++i) s += edges[i];<br>    istringstream c(s);<br>    int f;<br>    while (c &gt;&gt; f)<br>    {<br>      char cc;<br>      c &gt;&gt; cc;<br>      int l;<br>      c &gt;&gt; l;<br>      tbl[f].pb(l);<br>      debug(f);<br>      debug(l);<br>    }<br>    h.resize(n);<br>    len.assign(n, 0);<br>    h[0] = 0;<br>    go(0);<br>    for (int i = 0; i &lt; n; ++i) debug(h[i]);<br>    for (int i = 0; i &lt; n; ++i) debug(len[i]);<br>    go1(0);<br>    return val;<br>  }<br>};<br></td>