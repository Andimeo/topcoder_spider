<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br> <br>public class AirlineInternet {<br>  public double minimumRange(String[] airportLocations, String[] flights) {<br>        int m = airportLocations.length;<br>        double[] x = new double[m];<br>        double[] y = new double[m];<br>        for (int i = 0; i &lt; m; ++i) {<br>            Scanner scanner = new Scanner(airportLocations[i]);<br>            x[i] = scanner.nextInt();<br>            y[i] = scanner.nextInt();<br>        }<br>        int n = flights.length;<br>        int[] src = new int[n];<br>        int[] dst = new int[n];<br>        int[] start = new int[n];<br>        int[] finish = new int[n];<br>        double[] vx = new double[n];<br>        double[] vy = new double[n];<br>        for (int i = 0; i &lt; n; ++i) {<br>            Scanner scanner = new Scanner(flights[i]);<br>            src[i] = scanner.nextInt();<br>            dst[i] = scanner.nextInt();<br>            start[i] = scanner.nextInt();<br>            finish[i] = scanner.nextInt();<br>            double dx = x[dst[i]] - x[src[i]];<br>            double dy = y[dst[i]] - y[src[i]];<br>            dx /= (finish[i] - start[i]);<br>            dy /= (finish[i] - start[i]);<br>            vx[i] = dx;<br>            vy[i] = dy;<br>        }<br>        double left = 0;<br>        double right = 5000;<br>        while ((right - left) / right &gt; 1e-11) {<br>            double middle = (left + right) / 2;<br>            List&lt;Double&gt; important = new ArrayList&lt;Double&gt;();<br>            important.add(0.0);<br>            important.add(1000.0);<br>            for (int i = 0; i &lt; n; ++i) {<br>                important.add(start[i] + 0.0);<br>                important.add(finish[i] + 0.0);<br>                for (int j = 0; j &lt; m; ++j) {<br>                    addImportants(important, x[src[i]] - x[j], y[src[i]] - y[j], vx[i], vy[i], finish[i] - start[i], middle, start[i]);<br>                }<br>                for (int j = i + 1; j &lt; n; ++j) {<br>                    if (start[i] &lt; finish[j] &amp;&amp; start[j] &lt; finish[i]) {<br>                        double tl = Math.max(start[i], start[j]);<br>                        double tr = Math.min(finish[i], finish[j]);<br>                        double xi = x[src[i]] + vx[i] * (tl - start[i]);<br>                        double yi = y[src[i]] + vy[i] * (tl - start[i]);<br>                        double xj = x[src[j]] + vx[j] * (tl - start[j]);<br>                        double yj = y[src[j]] + vy[j] * (tl - start[j]);<br>                        addImportants(important, xi - xj, yi - yj, vx[i] - vx[j], vy[i] - vy[j], tr - tl, middle, tl);<br>                    }<br>                }<br>            }<br>            Collections.sort(important);<br>            boolean[] conn = new boolean[n];<br>            double[] cx = new double[n];<br>            double[] cy = new double[n];<br>            boolean ok = true;<br>            for (int i = 0; i &lt; important.size() - 1; ++i) {<br>                double t = (important.get(i) + important.get(i + 1)) / 2.0;<br>                for (int j = 0; j &lt; n; ++j) {<br>                    conn[j] = false;<br>                    if (t &lt; start[j]) {<br>                        cx[j] = x[src[j]];<br>                        cy[j] = y[src[j]];<br>                    } else if (t &gt; finish[j]) {<br>                        cx[j] = x[dst[j]];<br>                        cy[j] = y[dst[j]];<br>                    } else {<br>                        cx[j] = x[src[j]] + vx[j] * (t - start[j]);<br>                        cy[j] = y[src[j]] + vy[j] * (t - start[j]);<br>                    }<br>                }<br>                for (int j = 0; j &lt; m; ++j)<br>                    mark(x[j], y[j], -1, conn, cx, cy, n, middle);<br>                for (int j = 0; j &lt; n; ++j)<br>                    if (!conn[j]) {<br>                        ok = false;<br>                        break;<br>                    }<br>                if (!ok)<br>                    break;<br>            }<br>            if (ok)<br>                right = middle;<br>            else<br>                left = middle;<br>        }<br>    return right;<br>  }<br> <br>    private void mark(double x, double y, int id, boolean[] conn, double[] cx, double[] cy, int n, double r) {<br>        if (id &gt;= 0) {<br>            conn[id] = true;<br>        }<br>        for (int i = 0; i &lt; n; ++i) {<br>            double dx = x - cx[i];<br>            double dy = y - cy[i];<br>            if (!conn[i] &amp;&amp; (dx * dx + dy * dy &lt;= r * r))<br>                mark(cx[i], cy[i], i, conn, cx, cy, n, r);<br>        }<br>    }<br> <br>    private void addImportants(List&lt;Double&gt; important, double x, double y, double vx, double vy, double t, double r, double delta) {<br>        if (t == 0)<br>            return;<br>        double x2 = x + vx * t;<br>        double y2 = y + vy * t;<br>        int s1 = (int) Math.signum(x * x + y * y - r * r);<br>        int s2 = (int) Math.signum(x2 * x2 + y2 * y2 - r * r);<br>        if (s1 &lt;= 0 &amp;&amp; s2 &lt;= 0)<br>            return;<br>        if (s1 &gt; 0 &amp;&amp; s2 &gt; 0) {<br>            if (x * vx + y * vy &gt;= 0 || x2 * vx + y2 * vy &lt;= 0)<br>                return;<br>            double z = -(x * vx + y * vy) / (vx * vx + vy * vy);<br>            double x3 = x + vx * z;<br>            double y3 = y + vy * z;<br>            int s3 = (int) Math.signum(x3 * x3 + y3 * y3 - r * r);<br>            if (s3 &gt; 0)<br>                return;<br>            important.add(getImportant(x, y, vx, vy, z, r) + delta);<br>            important.add(delta + t - getImportant(x2, y2, -vx, -vy, t - z, r));<br>        } else if (s2 &lt;= 0) {<br>            important.add(getImportant(x, y, vx, vy, t, r) + delta);<br>        } else if (s1 &lt;= 0) {<br>            important.add(delta + t - getImportant(x2, y2, -vx, -vy, t, r));<br>        }<br>    }<br> <br>    private double getImportant(double x, double y, double vx, double vy, double t, double rad) {<br>        double l = 0;<br>        double r = t;<br>        while ((r - l) / r &gt; 1e-12) {<br>            double m = (r + l) / 2;<br>            double cx = x + vx * m;<br>            double cy = y + vy * m;<br>            if (cx * cx + cy * cy - rad * rad &gt; 0)<br>                l = m;<br>            else<br>                r = m;<br>        }<br>        return r;<br>    }<br> <br>}<br> <br> <br>// Powered by FileEdit<br>// Powered by RETester [based on ExampleBuilder]<br>// Powered by CodeProcessor<br></td>