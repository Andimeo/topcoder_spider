<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections;<br>using System.Collections.Generic;<br><br>public class NSegmentDisplay {<br>    public string brokenSegments(string[] symbols, string[] patterns) {<br><br>        int N = symbols[0].Length;<br><br>        bool[] bWorking = new bool[N];<br>        bool[] bBroken = new bool[N];<br><br>        long l1 = 1;<br><br>        for (int i = 0; i &lt; patterns.Length; i++) {<br>            for (int j = 0; j &lt; N; j++) {<br>                if (patterns[i][j] == '1') bWorking[j] = true;<br>            }<br>        }<br><br>        for (int i = 0; i &lt; patterns.Length; i++) {<br>            bool[] bCouldBe = new bool[symbols.Length];<br>            int count = 0;<br>            for (int j = 0; j &lt; symbols.Length; j++) {<br>                bCouldBe[j] = true;<br>                for (int k = 0; k &lt; N; k++) {<br>                    if (patterns[i][k] == '1' &amp;&amp; symbols[j][k] == '0') bCouldBe[j] = false;<br>                    if (patterns[i][k] == '0' &amp;&amp; symbols[j][k] == '1' &amp;&amp; bWorking[k]) bCouldBe[j] = false;<br>                }<br>                if (bCouldBe[j]) count++;<br>            }<br>            if (count == 0) return "INCONSISTENT";<br>            for (int k = 0; k &lt; N; k++) if (patterns[i][k]=='0') {<br>                    bool bMust = true;<br>                    for (int j = 0; j &lt; symbols.Length; j++) if (bCouldBe[j]) {<br>                            if (symbols[j][k] == '0') bMust = false;<br>                    }<br>                if (bMust) bBroken[k] = true;<br>            }<br>        }<br><br>        string sRet = "";<br>        for (int k = 0; k &lt; N; k++) {<br>            if (bWorking[k]) sRet += 'Y';<br>            if (bBroken[k]) sRet += 'N';<br>            if (!bWorking[k] &amp;&amp; !bBroken[k]) sRet += '?';<br>        }<br>        return sRet;<br><br>    }<br>}<br></td>