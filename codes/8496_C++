<td class="problemText" colspan="8" valign="middle" align="left">
            #include&lt;iostream&gt;<br>#include&lt;cstdio&gt;<br>#include&lt;cstring&gt;<br>#include&lt;cstdlib&gt;<br>#include&lt;algorithm&gt;<br>#include&lt;iterator&gt;<br>#include&lt;map&gt;<br>#include&lt;vector&gt;<br>#include&lt;set&gt;<br>#include&lt;queue&gt;<br>#include&lt;sstream&gt;<br>#include&lt;string&gt;<br>#include&lt;cmath&gt;<br>using namespace std;<br>typedef vector&lt;int&gt; VI; <br>typedef pair&lt;int,int&gt; ii; <br>#define pb push_back <br>#define tr(c,i) for(typeof((c).begin()) i = (c).begin(); i != (c).end(); i++) <br>#define FOR(i,a,b) for(int i=a;i&lt;b;i++)<br>#define REP(i,b) FOR(i,0,b)<br>#define pos(a) ((int)(a)&gt;=0?(a):-(a))<br>#define INF 10000000<br>class  NSegmentDisplay{<br>  public:<br>    string brokenSegments(vector&lt;string&gt;v1,vector&lt;string&gt; v2){<br>      bool working[100]={0},subset[100][100]={0},notworking[100]={0};<br>      int l1=v1.size(),l2=v2.size();<br>      int s=v2[0].length();<br>      bool possible=1;<br>      REP(i,l2)REP(k,s)if(v2[i][k]=='1'){<br>        working[k]=1;<br>      }<br>      int cnt[101]={0};<br>      REP(i,l2)REP(j,l1){<br>        bool poss=1;<br>        REP(k,s){<br>          if(v2[i][k]=='1' &amp;&amp; v1[j][k]=='0')poss=0;<br>          if(v2[i][k]=='0' &amp;&amp; v1[j][k]=='1' &amp;&amp; working[k])poss=0;<br>        }<br>        subset[i][j]=poss;<br>        if(poss)cnt[i]++;<br>      }<br>      REP(i,l2)if(cnt[i]==0)return "INCONSISTENT";<br>      REP(i,l2){<br>        bool bits[s];<br>        memset(bits,1,sizeof(bits));<br>        REP(j,l1){<br>          if(!subset[i][j])continue;<br>          REP(k,s)bits[k]=(bits[k]&amp;(v1[j][k]=='1'));<br>        }<br>        REP(k,s){<br>          if(bits[k] &amp;&amp; working[k] &amp;&amp; v2[i][k]=='0')return "INCONSISTENT";<br>          if(bits[k] &amp;&amp; v2[i][k]=='0')notworking[k]=1;<br>        }<br>      }<br>      string ans="";<br>      REP(i,s){<br>        if(working[i])ans+="Y";<br>        else<br>        if(notworking[i])ans+="N";<br>        else ans+="?";<br>        if(working[i] &amp;&amp; notworking[i])return "INCONSISTENT";<br>      }<br>      return ans;<br>    }<br>};<br></td>