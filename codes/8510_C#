<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections.Generic;<br><br>public class BuildCircuit {<br>    static long gcd(long a, long b)<br>    {<br>        while (b &gt; 0)<br>        {<br>            long t = a % b;<br>            a = b;<br>            b = t;<br>        }<br>        return a;<br>    }<br><br>    class Resistor<br>    {<br>        public long p;<br>        public long q;<br><br>        public Resistor(long p, long q)<br>        {<br>            long z = gcd(p, q);<br>            this.p = p / z;<br>            this.q = q / z;<br>        }<br><br>        public static Resistor parallel(Resistor r1, Resistor r2)<br>        {<br>            return new Resistor(r1.p * r2.p, r1.p * r2.q + r1.q * r2.p);<br>        }<br><br>        public static Resistor unparallel(Resistor r1, Resistor r2)<br>        {<br>            long t = - r1.p * r2.q + r1.q * r2.p;<br>            if (t &lt;= 0)<br>                return null;<br>            return new Resistor(r1.p * r2.p, t);<br>        }<br><br>        public static Resistor serial(Resistor r1, Resistor r2)<br>        {<br>            return new Resistor(r1.p * r2.q + r1.q * r2.p, r1.q * r2.q);<br>        }<br><br>        public static Resistor unserial(Resistor r1, Resistor r2)<br>        {<br>            long t = r1.p * r2.q - r1.q * r2.p;<br>            if (t &lt;= 0)<br>                return null;<br>            return new Resistor(t, r1.q * r2.q);<br>        }<br><br>        public override bool Equals(object obj)<br>        {<br>            Resistor r = (Resistor)obj;<br>            return p == r.p &amp;&amp; q == r.q;<br>        }<br><br>        public override int GetHashCode()<br>        {<br>            return (int)(p * 3137 + q);<br>        }<br>    }<br><br>  public int minimalCount(int a, int b) {<br>        List&lt;Resistor&gt;[] all = new List&lt;Resistor&gt;[11];<br>        all[1] = new List&lt;Resistor&gt;();<br>        Resistor r1 = new Resistor(1, 1);<br>        Resistor r2 = new Resistor(2, 1);<br>        all[1].Add(r1);<br>        all[1].Add(r2);<br>        Dictionary&lt;Resistor, int&gt; got = new Dictionary&lt;Resistor,int&gt;();<br>        got[r1] = 1;<br>        got[r2] = 1;<br>        for (int i = 2; i &lt;= 10; ++i)<br>        {<br>            all[i] = new List&lt;Resistor&gt;();<br>            for (int j = i - 1; j &gt;= 1; --j)<br>            {<br>                int k = i - j;<br>                foreach (Resistor rj in all[j])<br>                    foreach (Resistor rk in all[k])<br>                    {<br>                        mark(got, Resistor.serial(rj, rk), i, all[i]);<br>                        mark(got, Resistor.parallel(rj, rk), i, all[i]);<br>                    }<br>            }<br>        }<br>        Resistor need = new Resistor(a, b);<br>        List&lt;Resistor&gt;[] unall = new List&lt;Resistor&gt;[11];<br>        unall[0] = new List&lt;Resistor&gt;();<br>        unall[0].Add(need);<br>        Dictionary&lt;Resistor, int&gt; ungot = new Dictionary&lt;Resistor,int&gt;();<br>        ungot[need] = 0;<br>        for (int i = 1; i &lt;= 10; ++i)<br>        {<br>            unall[i] = new List&lt;Resistor&gt;();<br>            for (int j = i - 1; j &gt;= 0; --j)<br>            {<br>                int k = i - j;<br>                foreach (Resistor rj in unall[j])<br>                    foreach (Resistor rk in all[k])<br>                    {<br>                        Resistor r = Resistor.unserial(rj, rk);<br>                        if (r != null)<br>                        {<br>                            mark(ungot, r, i, unall[i]);<br>                        }<br>                        r = Resistor.unparallel(rj, rk);<br>                        if (r != null)<br>                        {<br>                            mark(ungot, r, i, unall[i]);<br>                        }<br>                    }<br>            }<br>        }<br>        int res = 17;<br>        for (int u = 0; u &lt;= 10; ++u)<br>            foreach (Resistor r in unall[u])<br>                if (got.ContainsKey(r))<br>                    res = Math.Min(res, u + got[r]);<br>        if (res &lt;= 16)<br>            return res;<br>        else<br>            return -1;<br>    }<br><br>    private void mark(Dictionary&lt;Resistor, int&gt; got, Resistor resistor, int num, List&lt;Resistor&gt; list)<br>    {<br>        if (got.ContainsKey(resistor))<br>            return;<br>        got[resistor] = num;<br>        list.Add(resistor);<br>    }<br><br><br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003] [modified for C# by Petr]<br>// Powered by CodeProcessor<br></td>