<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;cstdio&gt;<br>#include &lt;cstring&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cctype&gt;<br>#include &lt;cmath&gt;<br>#include &lt;iostream&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;vector&gt;<br>#include &lt;set&gt;<br>#include &lt;map&gt;<br>#include &lt;string&gt;<br>#include &lt;sstream&gt;<br>using namespace std;<br><br>int      L = 10;<br><br>inline  long long  gcd(long long a , long long b)<br>{<br>  return  b == 0 ? a : gcd(b , a % b);<br>}<br><br>struct    Tfrac<br>{<br>  long long  a , b;<br><br>  Tfrac(){}<br>  Tfrac(long long a0 , long long b0)<br>  {<br>    a = a0; b = b0; fix();<br>  }<br>  void  fix()<br>  {<br>    long long  k = gcd(a &lt; 0 ? - a : a , b &lt; 0 ? - b : b);<br>    a /= k; b /= k;<br>    if (b &lt; 0)<br>    {<br>      a = -a; b = -b;<br>    }<br>  }<br>};<br><br>bool  operator &lt; (const Tfrac&amp; A , const Tfrac&amp; B)<br>{<br>  return  (long long)A.a * B.b &lt; (long long)B.a * A.b;<br>}<br><br><br>set&lt; Tfrac &gt;  canGet[17];<br>Tfrac    list  [11][71493];<br>int    cnt  [11];<br><br>Tfrac    target;<br><br>int    a , b;<br><br>const int LIMIT = 10001234;<br><br>bool  makeSearch(int p , const Tfrac&amp; curt)<br>{<br>    if (curt.a &gt; LIMIT || curt.b &gt; LIMIT || curt.b &lt; - LIMIT) return 0;<br>    if (curt.a &gt; (2LL &lt;&lt;p) || curt.b &gt; (2LL &lt;&lt;p) || curt.b &lt; - (2LL &lt;&lt;p) ) return 0;<br>    <br>  if (p &lt;= L)<br>    return  canGet[p].count( curt );<br>  <br>  int        i , pi;<br><br>  for (i = 1; i + i &lt;= p; i ++)<br>  {<br>    for (pi = 0; pi &lt; cnt[i]; pi ++)<br>    {<br>      <br>      if (makeSearch(p - i , <br>        Tfrac(curt.a * list[i][pi].b - curt.b * list[i][pi].a , curt.b * list[i][pi].b)<br>        )) return 1;<br>      if (makeSearch(p - i , <br>        Tfrac(curt.a * list[i][pi].a , curt.b * list[i][pi].a - curt.a * list[i][pi].b)<br>        )) return 1;<br>    }<br>  }<br><br>  return 0;<br>}<br><br>class BuildCircuit<br>{<br>public:<br>  int minimalCount(int a, int b)<br>  {<br>    canGet[1].insert( Tfrac(1,1) );<br>    canGet[1].insert( Tfrac(2,1) );<br>    target.a = a; target.b = b; target.fix();<br><br>    if (canGet[1].count(target)) return 1;<br><br>    int        i , j , p;<br>    set&lt; Tfrac &gt;::iterator    pi , pj;<br><br>    for (p = 2; p &lt;= L; p ++)<br>    {<br>      for (i = 1; 2 * i &lt;= p; i ++)<br>      {<br>        j = p - i;<br>        for (pi = canGet[i].begin(); pi != canGet[i].end(); pi ++)<br>          for (pj = canGet[j].begin(); pj != canGet[j].end(); pj ++)<br>          {<br>            canGet[p].insert( Tfrac(pi-&gt;a * pj-&gt;b + pi-&gt;b * pj-&gt;a , pi-&gt;b * pj-&gt;b) );<br>            canGet[p].insert( Tfrac(pi-&gt;a * pj-&gt;a , pi-&gt;a * pj-&gt;b + pi-&gt;b * pj-&gt;a) );<br>          }<br>      }<br>      cout &lt;&lt; p &lt;&lt; " " &lt;&lt; canGet[p].size() &lt;&lt; endl;<br>      if (canGet[p].count(target))<br>        return p;<br>    }<br><br>    for (i = 1; i &lt;= L; i ++)<br>    {<br>      cnt[i] = 0;<br>      for (pi = canGet[i].begin(); pi != canGet[i].end(); pi ++)<br>      {<br>        if (canGet[i - 1].count( *pi ) == 0)<br>          list[i][cnt[i]++] = *pi;<br>        canGet[i + 1].insert( *pi );<br>      }<br>      cout &lt;&lt; i &lt;&lt; " " &lt;&lt; cnt[i] &lt;&lt; endl;<br>    }<br><br>    for (int bound = 11; bound &lt;= 16; bound ++)<br>    {<br>      cout &lt;&lt; "search " &lt;&lt; bound &lt;&lt; endl;<br>      if (makeSearch(bound , target))<br>        return bound;<br>    }<br><br>    return -1;<br>  }<br>  <br>  <br><br>};<br><br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003]<br>// Powered by CodeProcessor<br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003]<br>// Powered by CodeProcessor<br></td>