<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>import java.util.regex.*;<br>import java.text.*;<br>import java.math.*;<br>import java.awt.geom.*;<br> <br>public class BuildCircuit<br>{<br>  /*<br>      for (Frac f : d[i]) {<br>        if (solve(f) &gt; i) {<br>          System.out.println("botva: " + f.a + " " + f.b);<br>        }<br>      }<br>  */<br>    <br>  static int GCD(int a, int b) {<br>    while (b != 0) {<br>      int tmp = a % b;<br>      a = b;<br>      b = tmp;<br>    }<br>    return a;<br>  }<br>  <br>  int max = 0;<br> <br>  class Fraction {<br>    int a, b;<br>    <br>    Fraction(int a, int b) {<br>      int gcd = GCD(a, b);<br>      int tmp = gcd;<br>      max = Math.max(max, tmp);<br>      a /= gcd;<br>      b /= gcd;<br>      this.a = a;<br>      this.b = b;<br>    }<br>    <br>    public int hashCode() {<br>      return Arrays.hashCode(new int[] {a, b});<br>    }<br>    <br>    public boolean equals(Object u) {<br>      return a == ((Fraction)u).a &amp;&amp; b == ((Fraction)u).b;<br>    }<br>  }<br>  HashSet&lt;Fraction&gt;[] d = new HashSet[11];<br>  <br>  boolean is(Fraction y, int r) {<br>    if (y.a &lt; 0 || y.b &lt; 0) {<br>      return false;<br>    }<br>    if (r &lt;= 10) {<br>      return d[r].contains(y);<br>    }<br>    for (int i = r / 2; i &gt;= 1; --i) {<br>      for (Fraction x : d[i]) {<br>        if (is(new Fraction(-x.a * y.b + x.b * y.a, x.b * y.b), r - i)) {<br>          return true;<br>        }<br>        if (is(new Fraction(x.a * y.a, x.a * y.b - x.b * y.a), r - i)) {<br>          return true;<br>        }<br>      }<br>    }<br>    return false;<br>  }<br> <br>  public int minimalCount(int a, int b)<br>  {<br>    for (int i = 1; i &lt;= 10; ++i) {<br>      d[i] = new HashSet&lt;Fraction&gt;();<br>    }<br>    d[1].add(new Fraction(1, 1));<br>    d[1].add(new Fraction(2, 1));<br>    for (int i = 2; i &lt;= 10; ++i) {<br>      for (int u = i / 2; u &gt;= 1; --u) {<br>        int v = i - u;<br>        int saved = d[i].size();<br>        for (Fraction x : d[u]) {<br>          for (Fraction y : d[v]) {<br>            d[i].add(new Fraction(x.a * y.b + x.b * y.a, x.b * y.b));<br>            d[i].add(new Fraction(x.a * y.a, x.a * y.b + x.b * y.a));<br>          }<br>        }<br>        if (d[i].size() == saved) {<br>          break;<br>        }<br>      }<br>    }<br>    Fraction x = new Fraction(a, b);<br>    for (int i = 1; i &lt;= 16; ++i) {<br>      if (is(x, i)) {<br>        return i;<br>      }<br>    }<br>    return -1;<br>  }<br>  <br>  <br>}<br>//Powered by [KawigiEdit] 2.0!<br></td>