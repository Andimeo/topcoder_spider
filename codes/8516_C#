<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br><br>public class PaintingBoards {<br>    const double INF = 1e100;<br><br>  public double minimalTime(int[] boardLength, int[] painterSpeed) {<br>        double left = 0;<br>        double right = 1000000.0;<br>        int n = boardLength.Length;<br>        int m = painterSpeed.Length;<br>        while ((right - left) / right &gt; 1e-12)<br>        {<br>            double middle = (left + right) / 2;<br>            int[] best = new int[1 &lt;&lt; m];<br>            int[,] cnt = new int[n + 1, m];<br>            for (int i = 0; i &lt;= n; ++i)<br>            {<br>                for (int j = 0; j &lt; m; ++j)<br>                {<br>                    double may = middle * painterSpeed[j];<br>                    int k;<br>                    for (k = i; k &lt; n; ++k)<br>                    {<br>                        may -= boardLength[k];<br>                        if (may &lt; 0)<br>                            break;<br>                    }<br>                    cnt[i, j] = k;<br>                }<br>            }<br>            best[0] = 0;<br>            for (int i = 1; i &lt; (1 &lt;&lt; m); ++i)<br>            {<br>                int b = -1;<br>                for (int j = 0; j &lt; m; ++j)<br>                    if (((i &gt;&gt; j) &amp; 1) != 0) {<br>                        int pb = best[i ^ (1 &lt;&lt; j)];<br>                        b = Math.Max(b, cnt[pb, j]);<br>                    }<br>                best[i] = b;<br>            }<br>            if (best[(1 &lt;&lt; m) - 1] == n)<br>                right = middle;<br>            else<br>                left = middle;<br>        }<br>        return right;<br>  }<br><br><br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003] [modified for C# by Petr]<br>// Powered by CodeProcessor<br></td>