<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br><br>public class SuperWatch {<br>    bool[,] g;<br>    int[] m1;<br>    int[] m2;<br>    int n;<br>    int am;<br><br>  public int smallestImprecision(string[] _times, int[] zones) {<br>        n = _times.Length;<br>        int[] t = new int[n];<br>        mark = new bool[n];<br>        for (int i = 0; i &lt; n; ++i)<br>        {<br>            t[i] = int.Parse(_times[i].Substring(0, 2)) * 60 + int.Parse(_times[i].Substring(3, 2));<br>        }<br>        int l = 0;<br>        int r = 0;<br>        int len = -1;<br>        g = new bool[n, n];<br>        m1 = new int[n];<br>        m2 = new int[n];<br>        for (int i = 0; i &lt; n; ++i)<br>        {<br>            m1[i] = -1;<br>            m2[i] = -1;<br>        }<br>        am = 0;<br>        int res = 60 * 24 + 1;<br>        while (true)<br>        {<br>            bool any = false;<br>            if (am &lt; n)<br>            {<br>                for (int i = 0; i &lt; n; ++i)<br>                    for (int j = 0; j &lt; n; ++j)<br>                        if ((t[i] - 60 * zones[j] + 60 * 24) % (60 * 24) == r)<br>                        {<br>                            g[i, j] = true;<br>                            any = true;<br>                        }<br>                ++r;<br>                ++len;<br>                if (r &gt;= 60 * 24)<br>                    r = 0;<br>            }<br>            else<br>            {<br>                for (int i = 0; i &lt; n; ++i)<br>                    for (int j = 0; j &lt; n; ++j)<br>                        if ((t[i] - 60 * zones[j] + 60 * 24) % (60 * 24) == l)<br>                        {<br>                            g[i, j] = false;<br>                            if (m1[i] &gt;= 0)<br>                            {<br>                                int p = m1[i];<br>                                m1[i] = -1;<br>                                m2[p] = -1;<br>                                --am;<br>                            }<br>                            if (m2[j] &gt;= 0)<br>                            {<br>                                int p = m2[j];<br>                                m2[j] = -1;<br>                                m1[p] = -1;<br>                                --am;<br>                            }<br>                            any = true;<br>                        }<br>                ++l;<br>                --len;<br>                if (l &gt;= 60 * 24)<br>                    break;<br>            }<br>            if (any)<br>                improve();<br>            if (am == n)<br>            {<br>                res = Math.Min(res, len);<br>            }<br>        }<br>        return res;<br>  }<br><br>    bool[] mark;<br><br>    private void improve()<br>    {<br>        for (int j = 0; j &lt; n; ++j)<br>            mark[j] = false;<br>        for (int i = 0; i &lt; n; ++i)<br>            if (m1[i] &lt; 0)<br>            {<br>                if (dfs(i))<br>                {<br>                    ++am;<br>                    for (int j = 0; j &lt; n; ++j)<br>                        mark[j] = false;<br>                }<br>            }<br>    }<br><br>    private bool dfs(int at)<br>    {<br>        if (mark[at])<br>            return false;<br>        mark[at] = true;<br>        for (int i = 0; i &lt; n; ++i)<br>            if (g[at, i])<br>            {<br>                if (m2[i] &lt; 0 || dfs(m2[i]))<br>                {<br>                    m1[at] = i;<br>                    m2[i] = at;<br>                    return true;<br>                }<br>            }<br>        return false;<br>    }<br><br><br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003] [modified for C# by Petr]<br>// Powered by CodeProcessor<br></td>