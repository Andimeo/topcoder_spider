<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;iostream&gt;<br>#include &lt;vector&gt;<br>#include &lt;string&gt;<br>#include &lt;map&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;sstream&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;set&gt;<br>#include &lt;queue&gt;<br>#include &lt;numeric&gt;<br>#include &lt;complex&gt;<br>#include &lt;climits&gt;<br><br>using namespace std;<br><br>template&lt;class T&gt; inline bool fixmin(T &amp;a, T b) {if (a&lt;=b) return false; a=b; return true;}<br>template&lt;class T&gt; inline bool fixmax(T &amp;a, T b) {if (a&gt;=b) return false; a=b; return true;}<br><br>struct SuperWatch {<br>int smallestImprecision(vector &lt;string&gt; times, vector &lt;int&gt; zones) {<br>  vector&lt;int&gt; tt;<br>  int n=times.size();<br>  for (int i=0; i&lt;n; i++) {<br>    stringstream ss(times[i]);<br>    int a, b;<br>    char c;<br>    ss &gt;&gt; a &gt;&gt; c &gt;&gt; b;<br>    tt.push_back(60*a+b);<br>  }<br>  int ret=144440;<br>  sort(zones.begin(), zones.end());<br>  for (int kk=0; kk&lt;n; kk++) {<br>    sort(tt.begin(), tt.end());<br>    vector&lt;int&gt; t;<br>    for (int j=0; j&lt;n; j++) {<br>      t.push_back(tt[j]-zones[j]*60);<br>    }<br>    sort(t.begin(), t.end());<br>    fixmin(ret, t[n-1]-t[0]);<br>    tt[0]+=60*24;<br>  }<br>  return ret;<br>}<br>};<br></td>