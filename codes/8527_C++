<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;cmath&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;cctype&gt;<br>#include &lt;stack&gt;<br>#include &lt;queue&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cassert&gt;<br>#include &lt;iostream&gt;<br>#include &lt;sstream&gt;<br>#include &lt;cstring&gt;<br>#include &lt;complex&gt;<br><br>using namespace std;<br><br>const int oo = 1000000000;<br>const double eps = 1e-9;<br>const double Pi = 2.0 * acos(0.0);<br><br>typedef complex&lt;double&gt;  tComp;<br>typedef vector&lt;int&gt;  VI;<br>typedef vector&lt;VI&gt;  VVI;<br>typedef pair&lt;int,int&gt;  PII;<br>typedef vector&lt;PII&gt;  VPII;<br>typedef vector&lt;VPII&gt;  VVPII;<br><br>class MarblesRegroupingEasy { public: int minMoves(vector &lt;string&gt; boxes); };<br><br><br>int MarblesRegroupingEasy::minMoves(vector &lt;string&gt; boxes)<br>{<br>  int bad = 0;<br>  int num[64] = {0};<br>  for (int i = 0; i &lt; boxes.size(); i++)<br>  {<br>    int found = -1;<br>    for (int j = 0; j &lt; boxes[i].size(); j++)<br>      if (boxes[i][j] != '0')<br>      {<br>        if (found &gt;= 0)<br>        {<br>          found = -2;<br>          break;<br>        }<br>        else<br>          found = j;<br>      }<br>    if (found == -2)<br>      bad++;<br>    else if (found &gt;= 0)<br>      num[found]++;<br>  }<br><br>  for (int i = 0; i &lt; 64; i++)<br>    bad += (num[i]-1) &gt;? 0;<br>  return (bad-1) &gt;? 0;<br>}<br><br><br>// Powered by FileEdit<br></td>