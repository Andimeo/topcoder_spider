<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br><br>public class EquiDigitNumbers {<br>  public long findNext(string n) {<br>        long t = long.Parse(n);<br>        int len = 0;<br>        while (t &gt; 0)<br>        {<br>            ++len;<br>            t /= 10;<br>        }<br>        string res = null;<br>        for (int rl = len; rl &lt;= len + 1; ++rl)<br>        {<br>            for (int cnt = 1; cnt &lt;= Math.Min(10, rl); ++cnt)<br>                if (rl % cnt == 0)<br>                {<br>                    string u = null;<br>                    if (rl == len)<br>                        for (int i = rl - 1; i &gt;= 0; --i)<br>                        {<br>                            long uu = long.Parse(n.Substring(0, i + 1));<br>                            for (int j = 0; j &lt;= 9 - uu % 10; ++j)<br>                            {<br>                                if (j == 0 &amp;&amp; i &lt; rl - 1)<br>                                    continue;<br>                                u = (uu + j).ToString();<br>                                if (hasEquidigitEnding(u, cnt, rl))<br>                                    break;<br>                                u = null;<br>                            }<br>                            if (u != null)<br>                                break;<br>                        }<br>                    else<br>                    {<br>                        u = "";<br>                    }<br>                    if (u == null)<br>                        continue;<br>                    for (int i = u.Length; i &lt; rl; ++i)<br>                    {<br>                        for (int j = 0; j &lt;= 9; ++j)<br>                        {<br>                            if (u.Length == 0 &amp;&amp; j == 0)<br>                                continue;<br>                            string v = u + j;<br>                            if (hasEquidigitEnding(v, cnt, rl))<br>                            {<br>                                u = v;<br>                                break;<br>                            }<br>                        }<br>                    }<br>                    if (res == null || res.Length &gt; u.Length || res.Length == u.Length &amp;&amp; res.CompareTo(u) &gt; 0)<br>                        res = u;<br>                }<br>        }<br>        return long.Parse(res);<br>  }<br><br>    public bool hasEquidigitEnding(string s, int cnt, int len)<br>    {<br>        int[] hn = new int[10];<br>        int tot = 0;<br>        foreach (char ch in s)<br>        {<br>            if (hn[ch - '0'] == 0)<br>                ++tot;<br>            ++hn[ch - '0'];   <br>        }<br>        if (tot &gt; cnt)<br>            return false;<br>        for (int i = 0; i &lt; 10; ++i)<br>            if (hn[i] &gt; len / cnt)<br>                return false;<br>        return true;<br>    }<br><br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003] [modified for C# by Petr]<br>// Powered by CodeProcessor<br></td>