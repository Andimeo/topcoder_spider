<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;vector&gt;<br>#include &lt;list&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;deque&gt;<br>#include &lt;queue&gt;<br>#include &lt;stack&gt;<br>#include &lt;bitset&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;functional&gt;<br>#include &lt;numeric&gt;<br>#include &lt;utility&gt;<br>#include &lt;sstream&gt;<br>#include &lt;iostream&gt;<br>#include &lt;iomanip&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cctype&gt;<br>#include &lt;string&gt;<br>#include &lt;cstring&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;ctime&gt;<br> <br>using namespace std;<br> <br>typedef long long int64;<br>int64 toInt64(string s){int64 r=0;istringstream sin(s);sin&gt;&gt;r;return r;}<br> <br>class EquiDigitNumbers<br>{<br>public:<br>  bool check(int C[],int L,int M)<br>  {<br>    if (L/M&gt;10) return false;<br>    for (int i=0;i&lt;10;i++) if (C[i]&gt;M) return false;<br>    int C0=0;<br>    for (int i=0;i&lt;10;i++) if (C[i]&gt;0) C0++;<br>    if (C0&gt;L/M) return false;<br>    return true;<br>  }<br>  bool check(string s)<br>  {<br>    int L=s.length();<br>    int C[10];<br>    memset(C,0,sizeof(C));<br>    for (int i=0;i&lt;L;i++) if (s[i]!='*') C[s[i]-'0']++;<br>    for (int d=1;d&lt;=L;d++) if (L%d==0 &amp;&amp; check(C,L,d)) return true;<br>    return false;<br>  }<br>  string construct(string s)<br>  {<br>    int L=s.length();<br>    int pos=s.find("*");<br>    if (pos==-1) return s;<br>    for (int i=0;i&lt;10;i++)<br>    {<br>      s[pos]=(char)(i+'0');<br>      if (check(s)) return construct(s);<br>      s[pos]='*';<br>    }<br>    return s;<br>  }<br>  int64 findNext(string n)<br>  {<br>    int L=(int)n.length();<br>    if (check(n)) return toInt64(construct(n));<br>    for (int i=L-1;i&gt;=0;i--)<br>      for (int k=0;k&lt;10;k++)<br>        if (k&gt;(int)(n[i]-'0'))<br>        {<br>          string s=n;<br>          for (int v=i+1;v&lt;L;v++) s[v]='*';<br>          s[i]=(char)(k+'0');<br>          if (check(s)) <br>            return toInt64(construct(s));<br>        }<br>    string s=string(L+1,'*');<br>    s[0]='1';<br>    return toInt64(construct(s));<br>  }<br>};<br> <br> <br> <br>// Powered by PopsEdit<br></td>