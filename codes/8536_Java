<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br> <br>public class EquiDigitNumbers {<br>    int len;<br> <br>    int[] a;<br>    int[] b;<br>    int[] best;<br> <br>    int cnt;<br>    int[] dig;<br>    int[] dd;<br>    int dn;<br> <br>    void relax() {<br>        search:<br>        for (int k = 0; k &lt;= dn; k++) {<br>            System.arraycopy(dig, 0, dd, 0, 10);<br> <br>            for (int i = 0; i &lt; dn; i++) {<br>                b[i] = -1;<br>                int from = a[i];<br>                if (i == k) {<br>                    from++;<br>                } else if (i &gt; k) {<br>                    from = 0;<br>                }<br> <br>                for (int j = from; j &lt; 10; j++) {<br>                    if (dd[j] &gt; 0) {<br>                        dd[j]--;<br>                        b[i] = j;<br>                        break;<br>                    }<br>                }<br>                if (b[i] == -1) {<br>                    continue search;<br>                }<br>            }<br>            for (int i = 0; i &lt; dn; i++) {<br>                if (b[i] &gt; best[i]) {<br>                    continue search;<br>                }<br>                if (b[i] &lt; best[i]) {<br>                    best = b.clone();<br>                    continue search;<br>                }<br>            }<br>        }<br>    }<br> <br>    void bt(int i, int from) {<br>        if (i == cnt) {<br>            relax();<br>            return;<br>        }<br> <br>        for (int j = from; j &lt; 10; j++) {<br>            dig[j] = len;<br>            bt(i + 1, j + 1);<br>            dig[j] = 0;<br>        }<br>    }<br> <br>    public long findNext(String N) {<br>        long n = Long.parseLong(N);<br> <br>        dn = 0;<br>        long m = n;<br>        while (m &gt; 0) {<br>            dn++;<br>            m /= 10;<br>        }<br> <br>        a = new int[dn];<br>        int p = 0;<br>        while (n &gt; 0) {<br>            a[dn - p - 1] = (int)(n % 10);<br>            n = n / 10;<br>            p++;<br>        }<br> <br>        b = new int[dn];<br>        best = new int[dn];<br>        Arrays.fill(best, 9);<br>        dig = new int[10];<br>        dd = new int[10];<br>        for (len = 1; len &lt;= dn; len++) {<br>            cnt = dn / len;<br>            if (dn % len == 0 &amp;&amp; cnt &lt;= 10) {<br>                bt(0, 0);<br>            }<br>        }<br> <br>        long v = 0;<br>        for (int i = 0; i &lt; dn; i++) {<br>            v = v * 10 + best[i];<br>        }<br>        return v;<br>    }<br> <br> <br>}<br> <br> <br>// Powered by PopsEdit<br> <br>// Powered by CodeProcessor<br></td>