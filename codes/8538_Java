<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.Arrays;<br><br>//We zay ma 2aal el coach "El dehn fe 3ata2y"<br><br>public class MarblesRegroupingHard {<br>    static double EPS = 1e-9;<br>    int [][] vals;<br>    int [][] w;<br>    int [][] mem = new int[51][1 &lt;&lt; 15];<br>    int len;<br>    int wid;<br>    class State {<br>      int mask;<br>      int steps;<br>      State (int mask, int steps) {<br>        this.mask = mask;<br>        this.steps = steps;<br>      }<br>    }<br>    public int minMoves(String[] boxes) {<br>        int res;<br>        vals = new int[boxes.length][];<br>        for(int i=0; i &lt; boxes.length; i++) {<br>          String[] s = boxes[i].split(" ");<br>          vals[i] = new int[s.length];<br>          for(int j=0; j &lt; s.length;j ++)<br>            vals[i][j] = Integer.parseInt(s[j]);<br>        }<br>        <br>        for(int i=0; i &lt; mem.length; i++)<br>          Arrays.fill(mem[i], -1);<br>        <br>        w = new int[vals.length][vals[0].length];<br>        <br>        for(int i=0; i &lt; w.length; i++)<br>          for(int j=0; j &lt; w[i].length; j++) {<br>            for(int k=0; k &lt; w.length; k++) {<br>              if (k != i)<br>                w[i][j] += vals[k][j];<br>            }<br>          }<br>        len = w.length;<br>        wid = w[0].length;<br>        <br>        res = doIt(0, 0, 0);<br>        return res;<br>    }<br><br>    <br>    private int doIt(int idx, int mask, int soFar) {<br>      if (idx &gt;= len) {<br>        if (mask != (1 &lt;&lt; wid)-1)<br>          return Integer.MAX_VALUE;<br>        return 0;<br>      }<br>      <br>      if (mem[idx][mask] != -1)<br>        return mem[idx][mask];<br>      <br>      int best = Integer.MAX_VALUE;<br>      int num;<br>      <br>      for(int i=0; i &lt; wid; i++) {<br>        if ((mask &amp; (1 &lt;&lt; i)) != 0)<br>          continue;<br>        if ((num = doIt(idx + 1, mask | (1&lt;&lt;i), soFar + 50*100)) == Integer.MAX_VALUE)<br>          continue;<br>        best = Math.min(best, w[idx][i] + num);<br>      }<br>      if ((num = doIt(idx + 1, mask, soFar + 50*100)) != Integer.MAX_VALUE)<br>        best = Math.min(best, num);<br>      <br>      return mem[idx][mask] = best;<br>  }<br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by CodeProcessor<br></td>