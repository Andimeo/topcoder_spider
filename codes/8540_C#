<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br><br>public class PolygonCover {<br>  public double getArea(int[] x, int[] y) {<br>        int n = x.Length;<br>        int[] best = new int[1 &lt;&lt; n];<br>        for (int i = 0; i &lt; best.Length; ++i)<br>            best[i] = int.MaxValue;<br>        for (int i = 0; i &lt; n; ++i)<br>            for (int j = i + 1; j &lt; n; ++j)<br>                for (int k = j + 1; k &lt; n; ++k)<br>                {<br>                    int mask = 0;<br>                    for (int l = 0; l &lt; n; ++l)<br>                        if (area(x, y, i, j, k) == area(x, y, i, j, l) + area(x, y, i, k, l) + area(x, y, j, k, l))<br>                            mask |= (1 &lt;&lt; l);<br>                    best[mask] = Math.Min(best[mask], area(x, y, i, j, k));<br>                }<br>        for (int m1 = (1 &lt;&lt; n) - 1; m1 &gt;= 0; --m1) {<br>            int b = best[m1];<br>            if (b &lt; int.MaxValue) {<br>                for (int j = 0; j &lt; n; ++j)<br>                    if (((m1 &gt;&gt; j) &amp; 1) != 0) {<br>                        best[m1 ^ (1 &lt;&lt; j)] = Math.Min(best[m1 ^ (1 &lt;&lt; j)], b);<br>                    }<br>            }<br>        }<br>        for (int m1 = 0; m1 &lt; (1 &lt;&lt; n); ++m1)<br>            for (int m2 = m1; m2 &gt; 0; m2 = (m2 - 1) &amp; m1)<br>            {<br>                int b1 = best[m2];<br>                int b2 = best[m1 ^ m2];<br>                if (b1 &lt; int.MaxValue &amp;&amp; b2 &lt; int.MaxValue)<br>                    best[m1] = Math.Min(best[m1], b1 + b2);<br>            }<br>        return 0.5 * best[(1 &lt;&lt; n) - 1];<br>  }<br><br>    int area(int[] x, int[] y, int a, int b, int c)<br>    {<br>        return Math.Abs(x[a] * y[b] - x[b] * y[a] + x[b] * y[c] - x[c] * y[b] + x[c] * y[a] - x[a] * y[c]); <br>    }<br><br><br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003] [modified for C# by Petr]<br>// Powered by CodeProcessor<br></td>