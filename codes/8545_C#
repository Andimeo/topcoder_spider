<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br><br>public class GuitarChords {<br>    string[] names = new string[]{"A", "A#", "B", "C", "C#", "D", "D#", "E", "F", "F#", "G", "G#"};<br><br>  public int stretch(string[] strings, string[] chord) {<br>        int[] sid = Array.ConvertAll&lt;string, int&gt;(strings, delegate(string s) { return Array.IndexOf(names, s); });<br>        int[] cid = Array.ConvertAll&lt;string, int&gt;(chord, delegate(string s) { return Array.IndexOf(names, s); });<br>        if (ok(sid, cid, 1, 0))<br>            return 0;<br>        for (int len = 0; len &lt; 15; ++len)<br>        {<br>            for (int start = 0; start &lt; 12; ++start)<br>            {<br>                if (ok(sid, cid, start, start + len))<br>                    return len + 1;<br>            }<br>        }<br>        return 15;<br>    }<br><br>    bool ok(int[] sid, int[] cid, int min, int max)<br>    {<br>        int n1 = cid.Length;<br>        int n2 = sid.Length;<br>        bool[,] g = new bool[n1, n2];<br>        for (int j = 0; j &lt; n2; ++j)<br>        {<br>            bool any = false;<br>            for (int i = 0; i &lt; n1; ++i)<br>            {<br>                if (cid[i] == sid[j])<br>                {<br>                    g[i, j] = true;<br>                    any = true;<br>                }<br>                else<br>                    for (int k = min; k &lt;= max; ++k)<br>                        if (cid[i] == ((sid[j] + k) % 12))<br>                        {<br>                            g[i, j] = true;<br>                            any = true;<br>                            break;<br>                        }<br>            }<br>            if (!any)<br>                return false;<br>        }<br>        return match(n1, n2, g);<br>    }<br><br>    bool match(int n1, int n2, bool[,] g)<br>    {<br>        int[] m = new int[n2];<br>        bool[] vis = new bool[n1];<br>        for (int i = 0; i &lt; n2; ++i)<br>            m[i] = -1;<br>        for (int i = 0; i &lt; n1; ++i)<br>        {<br>            for (int j = 0; j &lt; n1; ++j)<br>                vis[j] = false;<br>            if (!improve(i, n2, g, vis, m))<br>                return false;<br>        }<br>        return true;<br>    }<br><br>    bool improve(int at, int n2, bool[,] g, bool[] vis, int[] m)<br>    {<br>        vis[at] = true;<br>        for (int i = 0; i &lt; n2; ++i)<br>            if (g[at, i])<br>                if (m[i] &lt; 0 || (!vis[m[i]] &amp;&amp; improve(m[i], n2, g, vis, m)))<br>                {<br>                    m[i] = at;<br>                    return true;<br>                }<br>        return false;<br>    }<br><br><br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003] [modified for C# by Petr]<br>// Powered by CodeProcessor<br></td>