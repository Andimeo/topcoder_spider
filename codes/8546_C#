<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections.Generic;<br><br>public class CentersOfSymmetry {<br>  public int lineConfigurations(int[] _x1, int[] _y1, int[] _x2, int[] _y2) {<br>        long n = _x1.Length;<br>        long[] dx = new long[n];<br>        long[] dy = new long[n];<br>        long[] x1 = new long[n];<br>        long[] y1 = new long[n];<br>        long[] x2 = new long[n];<br>        long[] y2 = new long[n];<br>        for (long i = 0; i &lt; n; ++i)<br>        {<br>            x1[i] = _x1[i];<br>            x2[i] = _x2[i];<br>            y1[i] = _y1[i];<br>            y2[i] = _y2[i];<br>            dx[i] = x2[i] - x1[i];<br>            dy[i] = y2[i] - y1[i];<br>        }<br>        bool[] mark = new bool[n];<br>        long state = 0;<br>        long la = 0;<br>        long lb = 0;<br>        long lc = 0;<br>        long xp = 0;<br>        long yp = 0;<br>        long q = 0;<br>        for (int i = 0; i &lt; n; ++i)<br>            if (!mark[i]) <br>            {<br>                long cdx = dx[i];<br>                long cdy = dy[i];<br>                List&lt;long&gt; at = new List&lt;long&gt;();<br>                for (int j = 0; j &lt; n; ++j)<br>                    if (dx[j] * cdy == dy[j] * cdx)<br>                    {<br>                        mark[j] = true;<br>                        at.Add(x1[j] * cdy - y1[j] * cdx);<br>                    }<br>                at.Sort();<br>                long sum = at[0] + at[at.Count - 1];<br>                bool ok = true;<br>                for (int j = 0; j &lt; at.Count; ++j)<br>                    if (at[j] + at[at.Count - 1 - j] != sum)<br>                        ok = false;<br>                if (!ok)<br>                    return 0;<br>                long ma = 2 * cdy;<br>                long mb = -2 * cdx;<br>                long mc = -sum;<br>                switch (state)<br>                {<br>                    case 0:<br>                        state = 1;<br>                        la = ma;<br>                        lb = mb;<br>                        lc = mc;<br>                        break;<br><br>                    case 1:<br>                        long z = la * mb - lb * ma;<br>                        q = z;<br>                        xp = -(lc * mb - lb * mc);<br>                        yp = -(la * mc - lc * ma);<br>                        state = 2;<br>                        break;<br><br>                    case 2:<br>                        if (ma * xp + mb * yp + mc * q != 0)<br>                            state = 3;<br>                        break;<br>                }<br>            }<br>        switch (state)<br>        {<br>            case 0:<br>            case 1:<br>                return -1;<br><br>            case 2:<br>                return 1;<br><br>            case 3:<br>                return 0;<br>        }<br>        return 0;<br>  }<br><br><br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003] [modified for C# by Petr]<br>// Powered by CodeProcessor<br></td>