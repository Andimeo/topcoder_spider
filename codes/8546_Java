<td class="problemText" colspan="8" valign="middle" align="left">
            import sun.swing.BakedArrayList;<br> <br>import java.util.*;<br> <br>public class CentersOfSymmetry {<br>    int gcd(int x, int y) {<br>        while (y != 0) {<br>            int t = x % y; x = y; y = t;<br>        }<br>        return x;<br>    }<br> <br>    class Line implements Comparable&lt;Line&gt; {<br>        int a;<br>        int b;<br>        int c;<br> <br>        Line(int a, int b, int c) {<br>            this.a = a;<br>            this.b = b;<br>            this.c = c;<br>        }<br> <br>        Line(int x1, int y1, int x2, int y2) {<br>            a = y1 - y2;<br>            b = x2 - x1;<br>            c = a * x1 + b * y1;<br>            int d = gcd(Math.abs(a), Math.abs(b));<br>            a /= d;<br>            b /= d;<br>            c /= d;<br> <br>            if (a &lt; 0 || (a == 0 &amp;&amp; b &lt; 0)) {<br>                a = -a;<br>                b = -b;<br>                c = -c;<br>            }<br> <br>        }<br> <br>        public int compareTo(Line o) {<br>            if (a != o.a) {<br>                return a - o.a;<br>            }<br>            if (b != o.b) {<br>                return b - o.b;<br>            }<br>            return c - o.c;<br>        }<br> <br>        int[] intersect(Line l) {<br>            int[] r = new int[4];<br>            r[0] = c * l.b - b * l.c;<br>            r[1] = a * l.b - b * l.a;<br>            r[2] = a * l.c - c * l.a;<br>            r[3] = a * l.b - b * l.a;<br>            int d = gcd(r[0], r[1]);<br>            r[0] /= d;<br>            r[1] /= d;<br>            d = gcd(r[2], r[3]);<br>            r[2] /= d;<br>            r[3] /= d;<br>            return r;<br>        }<br>    }<br> <br>    public int lineConfigurations(int[] x1, int[] y1, int[] x2, int[] y2) {<br>        int n = x1.length;<br>        Line[] l = new Line[n];<br>        for (int i = 0; i &lt; n; i++) {<br>            l[i] = new Line(x1[i], y1[i], x2[i], y2[i]);<br>        }<br>        Arrays.sort(l);<br> <br> <br>        int s = 0;<br>        int nax = 0;<br>        ArrayList&lt;Line&gt; ax = new ArrayList&lt;Line&gt;();<br>        while (s &lt; n) {<br>            int t = s;<br>            int sumc = 0;<br>            while (t &lt; n &amp;&amp; l[t].a == l[s].a &amp;&amp; l[t].b == l[s].b) {<br>                sumc += l[t].c;<br>                t++;<br>            }<br>            nax++;<br> <br>            for (int i = s; i &lt; t; i++) {<br>                int j = t - (i - s) - 1;<br>                if ((l[i].c + l[j].c) * (t - s) != sumc * 2) {<br>                    return 0;<br>                }<br>            }<br> <br>            Line line = new Line((t - s) * l[s].a, (t - s) * l[s].b, sumc);<br>            <br>            ax.add(line);<br> <br>            s = t;<br>        }<br> <br>        if (nax == 1) {<br>            return -1;<br>        } else {<br>            int[] ip = null;<br> <br>            for (int i = 0; i &lt; ax.size(); i++) {<br>                for (int j = i + 1; j &lt; ax.size(); j++) {<br>                    Line l1 = ax.get(i);<br>                    Line l2 = ax.get(j);<br>                    int[] is = l1.intersect(l2);<br>                    if (ip == null) {<br>                        ip = is;<br>                    } else {<br>                        if (!Arrays.equals(ip, is)) {<br>                            return 0;<br>                        }<br>                    }<br>                }<br>            }<br> <br>            return 1;<br>        }<br>    }<br> <br>}<br> <br> <br>// Powered by PopsEdit<br> <br>// Powered by CodeProcessor<br></td>