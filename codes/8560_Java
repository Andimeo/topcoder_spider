<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br> <br>public class SpecificPolyominoCovering {<br> <br>    int n;<br>    int m;<br>    boolean[][] a;<br>    private char[][] res;<br> <br>    public String[] findCovering(String[] region) {<br>        n = region.length;<br>        m = region[0].length();<br>        a = new boolean[n][m];<br>        res = new char[n][m];<br>        for (char[] chars : res) {<br>            Arrays.fill(chars, '.');<br>        }<br>        for (int i = 0; i &lt; n; i++) {<br>            for (int j = 0; j &lt; m; j++) {<br>                a[i][j] = region[i].charAt(j) == 'X';<br>            }<br>        }<br>        for (int i = 0; i &lt; n; i++) {<br>            for (int j = 0; j &lt; m; j++) if (a[i][j]) {<br>                boolean q = false;<br>                if (canA(i, j)) {<br>                    setA(i, j, false);<br>                    if (canCover()) {<br>                        resA(i, j);<br>                        q = true;<br>                    } else {<br>                        setA(i, j, true);<br>                    }<br>                }<br>                if (!q &amp;&amp; canB(i, j)) {<br>                    setB(i, j, false);<br>                    if (canCover()) {<br>                        resB(i, j);<br>                        q = true;<br>                    } else {<br>                        setB(i, j, true);<br>                    }<br>                }<br>                if (!q) {<br>                    return new String[0];<br>                }<br>            }<br>        }<br> <br> <br>        String[] r = new String[n];<br>        for (<br>                int i = 0;<br>                i &lt; n; i++)<br> <br>        {<br>            r[i] = "";<br>            for (int j = 0; j &lt; m; j++) {<br>                r[i] += res[i][j];<br>            }<br>            //System.out.println(r[i]);<br>        }<br> <br>        return r;<br>    }<br> <br>    private void resA(int i, int j) {<br>        res[i][j] = 'A';<br>        res[i][j + 3] = 'A';<br>        res[i + 1][j] = 'A';<br>        res[i + 1][j + 1] = 'A';<br>        res[i + 1][j + 2] = 'A';<br>        res[i + 1][j + 3] = 'A';<br>    }<br> <br>    private void resB(int i, int j) {<br>        res[i][j] = 'B';<br>        res[i][j + 1] = 'B';<br>    }<br> <br>    private boolean canCover() {<br>        return cover(0, 0);<br>    }<br> <br>    private boolean cover(int i, int j) {<br>        while (i &lt; n &amp;&amp; !a[i][j]) {<br>            j++;<br>            if (j == m) {<br>                i++;<br>                j = 0;<br>            }<br>        }<br>        if (i == n) return true;<br>        if (canB(i, j)) {<br>            setB(i, j, false);<br>            boolean b = cover(i, j);<br>            setB(i, j, true);<br>            return b;<br>        } else {<br>            if (canA(i, j)) {<br>                setA(i, j, false);<br>                boolean b = cover(i, j);<br>                setA(i, j, true);<br>                return b;<br>            } else {<br>                return false;<br>            }<br>        }<br>    }<br> <br>    private boolean canA(int i, int j) {<br>        return i &lt; n - 1 &amp;&amp; j &lt; m - 3<br>                &amp;&amp; a[i][j] &amp;&amp; a[i][j + 3]<br>                &amp;&amp; a[i + 1][j] &amp;&amp; a[i + 1][j + 1]<br>                &amp;&amp; a[i + 1][j + 2] &amp;&amp; a[i + 1][j + 3];<br>    }<br> <br>    private boolean canB(int i, int j) {<br>        return j &lt; m - 1 &amp;&amp; a[i][j] &amp;&amp; a[i][j + 1];<br>    }<br> <br>    private void setA(int i, int j, boolean b) {<br>        a[i][j] = b;<br>        a[i][j + 3] = b;<br>        a[i + 1][j] = b;<br>        a[i + 1][j + 1] = b;<br>        a[i + 1][j + 2] = b;<br>        a[i + 1][j + 3] = b;<br>    }<br> <br>    private void setB(int i, int j, boolean b) {<br>        a[i][j] = b;<br>        a[i][j + 1] = b;<br>    }<br> <br>}<br> <br> <br>// Powered by FileEdit<br>// Powered by RETester [based on ExampleBuilder]<br>// Powered by CodeProcessor<br></td>