<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;algorithm&gt;<br>#include &lt;cmath&gt;<br>#include &lt;iostream&gt;<br>#include &lt;sstream&gt;<br>#include &lt;string&gt;<br>#include &lt;vector&gt;<br><br>using namespace std;<br><br>#define FOR(i, n) for (int (i)=0; (i)&lt;(n); (i)++)<br>#define DFOR(i, n) for (int (i)=(n)-1; (i)&gt;=0; (i)--)<br>#define ALL(x) (x).begin(), (x).end()<br>#define SZ(s) (s).size()<br>#define SQR(x) ((x)*(x))<br>#define CLR(a) memset(a,0,sizeof(a))<br>#define OO 1000000000<br><br>struct QuasiLatinSquares<br>{<br>  bool V[16][16];<br>  bool H[16][16];<br>  int M[16][16];<br>  int N;<br>  bool dfs(int x, int y)<br>  {<br>    if (y==N)<br>    {<br>      FOR(a,N)<br>      {<br>        FOR(b,N) cout &lt;&lt; M[b][a] &lt;&lt; ", ";<br>        cout &lt;&lt; "\n";<br>      }<br>      return true;<br>    }<br>    FOR(a,N)<br>      if (!H[a][y] &amp;&amp; !V[x][a])<br>      {<br>        M[x][y]=a;<br>        V[x][a]=1;<br>        H[a][y]=1;<br>        int xx=x+1, yy=y;<br>        if (xx==N) { xx=0; yy++; }<br>        if (dfs(xx, yy)) return true;<br>        H[a][y]=0;<br>        V[x][a]=0;<br>        M[x][y]=a;<br>      }<br>    return false;<br>  }<br>  vector &lt;string&gt; makeSquare(int n, int d)<br>  {<br>    N=d;<br>    vector &lt;string&gt; res(n);<br>    int M2[16][16];<br>    CLR(M); CLR(M2); CLR(H); CLR(V);<br>    dfs(0, 0);<br>    FOR(a,n-d) FOR(b,d) { M2[a][b+n-d]=b; M2[b+n-d][a]=b; }<br>    FOR(a,d) FOR(b,d) M2[a+n-d][b+n-d]=M[a][b];<br>    FOR(a,n)<br>    {<br>      res[a]="";<br>      FOR(b,n)<br>      {<br>        res[a]=res[a]+(char)(M2[b][a]+'0');<br>        if (b!=n-1) res[a]=res[a]+' ';<br>      }<br>    }<br>    return res;<br>  }<br>};<br></td>