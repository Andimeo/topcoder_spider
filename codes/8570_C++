<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;vector&gt;<br>#include &lt;list&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;deque&gt;<br>#include &lt;queue&gt;<br>#include &lt;stack&gt;<br>#include &lt;bitset&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;functional&gt;<br>#include &lt;numeric&gt;<br>#include &lt;utility&gt;<br>#include &lt;sstream&gt;<br>#include &lt;iostream&gt;<br>#include &lt;iomanip&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cctype&gt;<br>#include &lt;string&gt;<br>#include &lt;cstring&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;ctime&gt;<br><br>using namespace std;<br><br>#define SZ(X) ((int)(X.size()))<br>typedef long long int64;<br>template&lt;class T&gt; inline void checkmax(T &amp;a,T b){if(b&gt;a) a=b;}<br><br>class CreatureTraining<br>{<br>public:<br>  int n;<br>  int64 C[60],P[60];<br>  int64 f[60][110][110];<br>  int64 solve(int l,int c,int d)<br>  {<br>    int64 nowc=c+C[l];<br>    int64 nowp=P[l];<br>    if (l==n-1) return nowc*nowp;<br>    int64 &amp;ret=f[l][c][d];<br>    if (ret!=-1) return ret;<br>    ret=0;<br>    int md=min(d,(int)nowc);<br>    for (int i=0;i&lt;=md;i++)<br>      checkmax(ret,solve(l+1,i,d-i)+(nowc-i)*nowp);<br>    return ret;<br>  }<br>  int64 maximumPower(vector &lt;int&gt; count, vector &lt;int&gt; power, int D)<br>  {<br>    n=SZ(count);<br>    for (int i=0;i&lt;n;i++) C[i]=count[i];<br>    for (int i=0;i&lt;n;i++) P[i]=power[i];<br>    memset(f,255,sizeof(f));<br>    int64 ret=solve(0,0,D);<br>    return ret;<br>  }<br>};<br></td>