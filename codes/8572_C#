<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections.Generic;<br><br>public class TheLuckySum {<br>    const int INF = 1000000000;<br><br>  public int[] sum(int n) {<br>        int res = getAm(n);<br>        if (res &gt;= INF)<br>            return new int[0];<br>        int[] r = new int[res];<br>        List&lt;long&gt; nums = new List&lt;long&gt;();<br>        for (int len = 1; len &lt;= 10; ++len)<br>            for (int a = 0; a &lt; (1 &lt;&lt; len); ++a)<br>            {<br>                long b = 0;<br>                for (int i = 0; i &lt; len; ++i)<br>                {<br>                    b *= 10;<br>                    if (((a &gt;&gt; i) &amp; 1) != 0)<br>                        b += 7;<br>                    else<br>                        b += 4;<br>                }<br>                nums.Add(b);<br>            }<br>        nums.Sort();<br>        for (int i = 0; i &lt; res; ++i)<br>        {<br>            foreach (long x in nums)<br>            {<br>                if (x &lt;= n &amp;&amp; getAm((int)(n - x)) == res - i - 1)<br>                {<br>                    r[i] = (int) x;<br>                    n = (int)(n - x);<br>                    break;<br>                }<br>            }<br>        }<br>        return r;<br>  }<br><br>    public int getAm(int n)<br>    {<br>        if (n == 0)<br>            return 0;<br>        for (int am = 1; ; ++am)<br>        {<br>            if (am * 4 &gt; n)<br>                return INF;<br>            bool[,] can = new bool[am + 1, am + 1];<br>            can[0, am] = true;<br>            long p10 = 1;<br>            while (p10 &lt;= n)<br>            {<br>                int cur = (int) ((n / p10) % 10);<br>                bool[,] ncan = new bool[am + 1, am + 1];<br>                for (int pc = 0; pc &lt;= am; ++pc)<br>                    for (int pl = 0; pl &lt;= am; ++pl)<br>                        if (can[pc, pl])<br>                        {<br>                            int nc = 0;<br>                            int u = (cur - pc - 4 * pl);<br>                            while (u &lt; 0)<br>                            {<br>                                u += 10;<br>                                ++nc;<br>                            }<br>                            for (int n7 = 0; n7 &lt;= pl; ++n7)<br>                            {<br>                                if (u == 0)<br>                                    ncan[nc, pl] = true;<br>                                u -= 3;<br>                                if (u &lt; 0)<br>                                {<br>                                    u += 10;<br>                                    ++nc;<br>                                }<br>                            }<br>                        }<br>                can = ncan;<br>                for (int c = 0; c &lt;= am; ++c)<br>                    for (int l = am; l &gt;= 1; --l)<br>                        if (can[c, l])<br>                            can[c, l - 1] = true;<br>                p10 *= 10;<br>            }<br>            if (can[0, 0])<br>                return am;<br>        }<br>    }<br><br><br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003] [modified for C# by Petr]<br>// Powered by CodeProcessor<br></td>