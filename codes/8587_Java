<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>import java.math.*;<br>import java.io.*;<br>import java.text.*;<br>import java.util.regex.*;<br>import static java.util.Arrays.*;<br>import static java.lang.Math.*;<br>import static java.lang.Integer.parseInt;<br>public class MoreNim {<br>  public long bestSet(String[] heaps) {<br>    ns = new long[heaps.length];<br>    for(int i = 0; i &lt; heaps.length; i++){<br>      ns[i] = Long.parseLong(heaps[i]);<br>    }<br>    sort(ns);<br>    long msk = (1L&lt;&lt;ns.length)-1;<br>    for(int i = 0; i &lt; ns.length; i++){<br>      if(eqs(msk) == eqs(msk^(1L&lt;&lt;i))) msk ^= 1L&lt;&lt;i;<br>    }<br>    long ret = 0;<br>    for(int i = 0; i &lt; ns.length; i++){<br>      if(((1L&lt;&lt;i)&amp;msk)==0) ret += ns[i];<br>    }<br>    return ret;<br>  }<br>  long[] ns;<br>  int eqs(long msk){<br>    long[] mat = new long[Long.bitCount(msk)];<br>    int at = 0;<br>    for(int i = 0; i &lt; ns.length; i++){<br>      if(((1L&lt;&lt;i)&amp;msk)!=0) mat[at++] = ns[i];<br>    }<br>    long lastHigh = Long.MAX_VALUE;<br>    for(int i = 0; i &lt; mat.length; i++){<br>      long high = 0;<br>      int who = -1;<br>      for(int j = 0; j &lt; mat.length; j++){<br>        long tmp = Long.highestOneBit(mat[j]);<br>        if(tmp &lt; lastHigh &amp;&amp; tmp &gt; high){<br>          high = tmp;<br>          who = j;<br>        }<br>      }<br>      if(high == 0) break;<br>      for(int j = 0; j &lt; mat.length; j++){<br>        if(j == who) continue;<br>        if((high &amp; mat[j]) != 0) mat[j] ^= mat[who];<br>      }<br>      lastHigh = high;<br>    }<br>    int ret = 0;<br>    for(int i = 0; i &lt; mat.length; i++){<br>      if(mat[i] != 0) ret++;<br>    }<br>    return ret;<br>  }<br> <br>}<br> <br>// Powered by PopsEdit<br>// Powered by CodeProcessor<br></td>