<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>import java.math.*;<br>import java.io.*;<br>import java.text.*;<br>import java.util.regex.*;<br>import static java.util.Arrays.*;<br>import static java.lang.Math.*;<br>import static java.lang.Integer.parseInt;<br>public class RandomSort {<br>  TreeMap&lt;int[], Double&gt; memo = new TreeMap&lt;int[], Double&gt;(new Comparator&lt;int[]&gt;(){<br>    public int compare(int[] a, int[] b){<br>      for(int i = 0; i &lt; a.length; i++){<br>        if(a[i] != b[i]) return a[i]-b[i];<br>      }<br>      return 0;<br>    }<br>  });<br>  public double getExpected(int[] permutation) {<br>    if(memo.containsKey(permutation)) return memo.get(permutation);<br>    double ret = 0;<br>    int cnt = 0;<br>    for(int i = 0; i &lt; permutation.length; i++){<br>      for(int j = i+1; j &lt; permutation.length; j++){<br>        if(permutation[i] &lt; permutation[j]) continue;<br>        cnt++;<br>        int[] ar = permutation.clone();<br>        int tmp = ar[i];<br>        ar[i] = ar[j];<br>        ar[j] = tmp;<br>        ret += 1+getExpected(ar);<br>      }<br>    }<br>    if(cnt != 0) ret /= cnt;<br>    memo.put(permutation, ret);<br>    return ret;<br>  }<br> <br>}<br> <br>// Powered by PopsEdit<br>// Powered by CodeProcessor<br></td>