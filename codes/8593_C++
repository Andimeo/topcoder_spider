<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;cmath&gt;<br>#include &lt;queue&gt;<br>#include &lt;vector&gt;<br>#include &lt;string&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cstring&gt;<br>#include &lt;cassert&gt;<br>#include &lt;numeric&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;iostream&gt;<br>#include &lt;sstream&gt;<br>#include &lt;ctime&gt;<br>using namespace std;<br><br>typedef vector&lt;string&gt; vs;<br>typedef vector&lt;double&gt; vd;<br><br>#define For(i,a,b) for (int i(a),_b(b); i &lt;= _b; ++i)<br>#define Ford(i,a,b) for (int i(a),_b(b); i &gt;= _b; --i)<br>#define Rep(i,n) for (int i(0),_n(n); i &lt; _n; ++i)<br>#define Repd(i,n) for (int i((n)-1); i &gt;= 0; --i)<br>#define Fill(a,c) memset(&amp;a, c, sizeof(a))<br>#define Mp(x, y) make_pair((x), (y))<br>#define All(v) (v).begin(), (v).end()<br><br>template&lt;typename T&gt; inline int Size(const T&amp; c) { return (int)c.size(); }<br><br>int n, c, m;<br>bool a[50][50] = {{false}};<br><br>vd solve(int x, int par) {<br>  vd res(m+1, 0.0);<br>  res[0] = 1;<br>  Rep(i, n) {<br>    if (!a[x][i] || i == par)<br>      continue;<br>    vd v = solve(i, x);<br>    Ford(i, m, 0) {<br>      double s = 0;<br>      For(j, 0, c)<br>        if (i-j &gt;= 0)<br>          s += v[i-j]/(c+1);<br>      v[i] = s;<br>    }<br>    vd nres(m+1, 0.0);<br>    For(p, 0, m) For(q, 0, m-p)<br>      nres[max(p, q)] += res[p]*v[q];<br>    res = nres;<br>  }<br>  return res;<br>}<br><br>struct PseudoRandomKingdom {<br>  double probabilityOfHappiness(vs g, int cost, int savings) {<br>    n = Size(g);<br>    c = cost;<br>    m = savings;<br>    Rep(i, n) {<br>      istringstream iss(g[i]);<br>      int j;<br>      while (iss &gt;&gt; j) <br>        a[i][j] = true;<br>    }<br>    vd v = solve(0, -1);<br>    return accumulate(All(v), 0.0);<br>  }<br>};<br></td>