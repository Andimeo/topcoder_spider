<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br><br>public class BoxFilling {<br>  public long getNumber(int _sizeX, int _sizeY, int _sizeZ, int _cubeX, int _cubeY, int _cubeZ) {<br>        long[] size = new long[]{_sizeX, _sizeY, _sizeZ};<br>        long[] cube = new long[]{_cubeX, _cubeY, _cubeZ};<br>        int n1 = 0;<br>        foreach (long x in size)<br>            if (x == 1)<br>                ++n1;<br><br>        long res = 0;<br>        while (n1 == 0)<br>        {<br>            long total = int.MaxValue;<br>            for (int i = 0; i &lt; 3; ++i)<br>                if (size[i] &gt; 1)<br>                    total = Math.Min(total, cube[i]);<br>            total = (total - 2);<br>            if (total &lt; 0)<br>                total = 0;<br>            res += (size[0] * size[1] * size[2] - (size[0] - total) * (size[1] - total) * (size[2] - total));<br>            for (int i = 0; i &lt; 3; ++i)<br>            {<br>                if (size[i] &gt; 1)<br>                {<br>                    size[i] -= total;<br>                    cube[i] -= total;<br>                }<br>            }<br>            for (int coord = 2; coord &gt;= 0; --coord) {<br>                if (cube[coord] == 1) {<br>                    size[coord] = 1;<br>                    ++n1;<br>                } else {<br>                    res += size[(coord + 1) % 3] * size[(coord + 2) % 3];<br>                    --size[coord];<br>                    --cube[coord];<br>                    if (size[coord] == 1)<br>                        ++n1;<br>                }<br>                if (n1 &gt; 0)<br>                    break;<br>            }<br>        }<br><br>        while (n1 == 1)<br>        {<br>            long total = int.MaxValue;<br>            for (int i = 0; i &lt; 3; ++i)<br>                if (size[i] &gt; 1)<br>                    total = Math.Min(total, cube[i]);<br>            total = (total - 2);<br>            if (total &lt; 0)<br>                total = 0;<br><br>            res += size[0] * size[1] * size[2];<br>            for (int i = 0; i &lt; 3; ++i)<br>            {<br>                if (size[i] &gt; 1)<br>                {<br>                    size[i] -= total;<br>                    cube[i] -= total;<br>                }<br>            }<br>            res -= size[0] * size[1] * size[2];<br><br>            for (int coord = 0; coord &lt;= 2; ++coord)<br>            {<br>                if (size[coord] &gt; 1) {<br>                    int c1 = (coord + 1) % 3;<br>                    int c2 = (coord + 2) % 3;<br>                    if (cube[c1] == 1 &amp;&amp; cube[c2] == 1) {<br>                        size[c1] = 1;<br>                        size[c2] = 1;<br>                        ++n1;<br>                    } else {<br>                        res += size[coord];<br>                        if (size[c1] &gt; 1) {<br>                            --size[c1];<br>                            --cube[c1];<br>                            if (size[c1] == 1)<br>                                ++n1;<br>                        }<br>                        if (size[c2] &gt; 1) {<br>                            --size[c2];<br>                            --cube[c2];<br>                            if (size[c2] == 1)<br>                                ++n1;<br>                        }<br>                    }<br>                }<br>                if (n1 &gt; 1)<br>                    break;<br>            }<br>        }<br><br>        return res + cube[1] + cube[2] + cube[0] - 2;<br>  }<br><br>  <br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003] [modified for C# by Petr]<br>// Powered by CodeProcessor<br></td>