<td class="problemText" colspan="8" valign="middle" align="left">
            #define _CRT_SECURE_NO_DEPRECATE<br><br>#include &lt;cstdio&gt;<br>#include &lt;cmath&gt;<br>#include &lt;sstream&gt;<br>#include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;functional&gt;<br>#include &lt;iostream&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br><br>#define fo(a,b,c) for( a = ( b ); a &lt; ( c ); ++ a )<br>#define fr(a,b) fo( a, 0, ( b ) )<br>#define fi(a) fr( i, ( a ) )<br>#define fj(a) fr( j, ( a ) )<br>#define fk(a) fr( k, ( a ) )<br>#define fin fi( n )<br>#define all(v) (v).begin( ), (v).end( )<br>#define pb push_back<br>#define mp make_pair<br><br>using namespace std;<br><br>class BoxFilling <br>{<br>public:<br>  long long moo( long long w, long long h, long long x, long long y )<br>  {<br>    -- x; -- y;<br>    if( x &gt;= y ) return y * h + y * w - y * y + ( x - y );<br>    return x * h + ( x + 1LL ) * w - ( x + 1LL ) * x + ( y - x - 1 );<br>  }<br>  long long twoD( long long thr, int sizeX, int sizeY, int sizeZ, int cubeX, int cubeY, int cubeZ )<br>  {<br>    long long ret = thr + 1;<br>    if( sizeX == 1 ) ret += moo( sizeY, sizeZ, cubeY, cubeZ );<br>    if( sizeY == 1 ) ret += moo( sizeX, sizeZ, cubeX, cubeZ );<br>    if( sizeZ == 1 ) ret += moo( sizeX, sizeY, cubeX, cubeY );<br>    return ret;<br>  }<br>  long long getNumber(int sizeX, int sizeY, int sizeZ, int cubeX, int cubeY, int cubeZ) <br>  {<br>    long long throwed = 0;<br>    int step = 0;<br>    while( 1 )<br>    {<br>      // 1D cube<br>      if( sizeX == 1 &amp;&amp; sizeY == 1 || sizeX == 1 &amp;&amp; sizeZ == 1 || sizeY == 1 &amp;&amp; sizeZ == 1 ) return throwed + ( long long )max( cubeX, max( cubeY, cubeZ ) );<br>      // 2D cube<br>      if( sizeX == 1 || sizeY == 1 || sizeZ == 1 ) return twoD( throwed, sizeX, sizeY, sizeZ, cubeX, cubeY, cubeZ );<br>      // 3D cube<br>      if( step % 3 == 0 )<br>      {<br>        if( cubeZ == 1 ) return twoD( throwed, sizeX, sizeY, 1, cubeX, cubeY, cubeZ );<br>        -- sizeZ;<br>        -- cubeZ;<br>        throwed += ( long long )sizeX * ( long long )sizeY;<br>      }<br>      if( step % 3 == 1 )<br>      {<br>        if( cubeY == 1 ) return twoD( throwed, sizeX, 1, sizeZ, cubeX, cubeY, cubeZ );<br>        -- sizeY;<br>        -- cubeY;<br>        throwed += ( long long )sizeX * ( long long )sizeZ;<br>      }<br>      if( step % 3 == 2 )<br>      {<br>        if( cubeX == 1 ) return twoD( throwed, 1, sizeY, sizeZ, cubeX, cubeY, cubeZ );<br>        -- sizeX;<br>        -- cubeX;<br>        throwed += ( long long )sizeY * ( long long )sizeZ;<br>      }<br>      ++ step;<br>    }<br>  }<br>  <br> <br>};<br><br><br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003]<br>// Powered by CodeProcessor<br></td>