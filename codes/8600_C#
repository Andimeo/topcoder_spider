<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections;<br>using System.Collections.Generic;<br>using System.Collections.Specialized;<br>using System.Text;<br>using System.Text.RegularExpressions;<br> <br>public class MagicFingerprint<br>{<br>    Dictionary&lt;long, bool&gt; dic = new Dictionary&lt;long, bool&gt;();<br> <br>    int max = 1000000000;<br> <br>    int ans = 0;<br>    int aa, bb;<br> <br>    Queue&lt;int&gt; q = new Queue&lt;int&gt;();<br> <br>    void search(int n)<br>    {<br>        string s = n.ToString();<br> <br>        while (s.Length &lt; 10)<br>        {<br>            dfs(s);<br>            s = "0" + s;<br>        }<br>    }<br> <br>    int[] a = new int[20];<br>    int[] b = new int[20];<br>    int len;<br> <br>    void dfs(string s)<br>    {<br>        if (s.Length &gt; 9) return;<br>        len = s.Length;<br>        for (int i = 0; i &lt; len; i++)<br>            a[i] = s[i] - '0';<br>        for (int i = 1; i &lt; 10; i++)<br>        {<br>            b[0] = i;<br>            dfs2(0);<br>        }<br>    }<br> <br>    void dfs2(int level)<br>    {<br>        if (level == len)<br>        {<br>            long v = 0;<br>            for (int i = 0; i &lt;= len; i++)<br>                v = v * 10 + b[i];<br>            if (v &lt;= max)<br>            {<br>                if (!dic.ContainsKey(v))<br>                {<br>                    dic.Add(v, true);<br>                    q.Enqueue((int)v);<br>                }<br>            }<br>        }<br>        else<br>        {<br>            int x = b[level] + a[level];<br>            if (x &lt; 10) { b[level + 1] = x; dfs2(level + 1); }<br>            x = b[level] - a[level];<br>            if (x &gt;= 0) { b[level + 1] = x; dfs2(level + 1); }<br>        }<br>    }<br> <br>    public int countLuckyNumbers(int A, int B)<br>  {<br>        aa = A;<br>        bb = B;<br> <br>        q.Enqueue(7);<br>        dic.Add(7,true);<br> <br>        int cnt = 0;<br>        while (q.Count &gt; 0)<br>        {<br>            int n = q.Dequeue();<br>            if (n &gt;= A &amp;&amp; n &lt;= B) ans++;<br>            search(n);<br>            cnt++;<br>            //if (cnt &lt; 20)  Console.WriteLine(n);<br>        }<br>        return ans;<br>  }}<br></td>