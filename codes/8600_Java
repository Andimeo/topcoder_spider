<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br> <br>public class MagicFingerprint {<br>    final Map&lt;Integer, Set&lt;String&gt;&gt; numbersOfLength=new TreeMap&lt;Integer,Set&lt;String&gt;&gt;();<br>    private void doCalc(int length){<br>        if (numbersOfLength.containsKey(length))<br>            return;<br>        if (length==0)<br>            return;<br>        if (length==1){<br>            numbersOfLength.put(1,new TreeSet&lt;String&gt;());<br>            numbersOfLength.get(1).add("7");<br>            return;<br>        }<br>        doCalc(length-1);<br>        Set&lt;String&gt; prevLength=new TreeSet&lt;String&gt;();<br>        for (int i=1;i&lt;length;i++){<br>            String zeroes="";<br>            for (int j=length-i;j&gt;1;j--)<br>                zeroes+="0";<br>            for (String possibleNumber:numbersOfLength.get(i))<br>                prevLength.add(zeroes+possibleNumber);<br>        }<br>        Set&lt;String&gt; newLengthStrings=new HashSet&lt;String&gt;();<br>        for (final String possibleChild:prevLength){<br>            for (int leadingDigit=1;leadingDigit&lt;=9;leadingDigit++){<br>                addToSet(newLengthStrings,leadingDigit,new StringBuilder().append(leadingDigit),length,possibleChild);<br>            }<br>        }<br>        numbersOfLength.put(length,newLengthStrings);<br>    }<br> <br>    public void addToSet(final Set&lt;String&gt; toAdd,final int prevDigit,final StringBuilder curNumber,final int totalLength,final String parentString){<br>        if (totalLength==curNumber.length()){<br>            toAdd.add(curNumber.toString());<br>            return;<br>        }<br>        int digitInParent=parentString.charAt(curNumber.length()-1)-'0';<br>        {<br>            int newDigitLower=prevDigit-digitInParent;<br>            if (newDigitLower&gt;=0){<br>                addToSet(toAdd,newDigitLower,curNumber.append(newDigitLower),totalLength,parentString);<br>                curNumber.setLength(curNumber.length()-1);<br>            }<br>        }<br> <br>        {<br>            int newDigitUpper=prevDigit+digitInParent;<br>            if (newDigitUpper&lt;=9){<br>                addToSet(toAdd,newDigitUpper,curNumber.append(newDigitUpper),totalLength,parentString);<br>                curNumber.setLength(curNumber.length()-1);<br>            }<br>        }<br>    }<br> <br>    public int countLuckyNumbers(int A, int B) {<br>        final int MAX_SIZE=9;<br>        doCalc(MAX_SIZE);<br>        int count=0;<br>        for (Integer I:numbersOfLength.keySet()){<br>            for (String S:numbersOfLength.get(I)){<br>                int val=Integer.parseInt(S);<br>                if (val&gt;=A &amp;&amp; val&lt;=B)<br>                    count++;<br>            }<br>        }<br>        return count;<br>    }<br>    }<br></td>