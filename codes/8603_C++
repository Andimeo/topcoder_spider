<td class="problemText" colspan="8" valign="middle" align="left">
            // {{{<br>#include &lt;algorithm&gt;<br>#include &lt;cctype&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;iostream&gt;<br>#include &lt;sstream&gt;<br>#include &lt;utility&gt;<br>#include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;stack&gt;<br>#include &lt;queue&gt;<br>using namespace std;<br>#define REP(i,n) for(int i=0;i&lt;(n);++i)<br>#define FOR(i,a,b) for(int i=(a);i&lt;=(b);++i)<br>#define FORD(i,a,b) for(int i=(a);i&gt;=(b);--i)<br>#define FOREACH(it,c) for(typeof((c).begin()) it=(c).begin();it!=(c).end();++it)<br>#define ALL(c) (c).begin(),(c).end()<br>#define debug(x) cerr &lt;&lt; #x &lt;&lt; " = " &lt;&lt; x &lt;&lt; "\n";<br>#define debugv(x) cerr &lt;&lt; #x &lt;&lt; " = "; FOREACH(it,(x)) cerr &lt;&lt; *it &lt;&lt; ","; cerr &lt;&lt; "\n";<br>typedef long long LL; typedef long double ld;<br>typedef vector&lt;int&gt; VI; typedef vector&lt;string&gt; VS;<br>const int INF = 1000000000; const LL INFLL = LL(INF) * LL(INF);<br>template&lt;class T&gt; inline int size(const T&amp;c) { return c.size(); }<br>template&lt;class T&gt; T parse(string s) { istringstream i(s); T x; i&gt;&gt;x; return x; }<br>template&lt;class T&gt; string show(T x) { ostringstream o; o&lt;&lt;x; return o.str(); }<br>VS split(string s, string del=" ") {<br>  string w; VS res; s += del[0];<br>  FOREACH(it,s) {<br>    if(find(ALL(del),*it)==del.end()) w += *it;<br>    else if (w!="") {<br>      res.push_back(w);<br>      w="";<br>    }<br>  }<br>  return res;<br>}<br>VI s2vi(string s, string del=" ") {<br>  VS v = split(s,del);<br>  VI res;<br>  FOREACH(it,v) res.push_back(parse&lt;int&gt;(*it));<br>  return res;<br>}<br>string mergeStrings(VS v) {<br>  string s; FOREACH(it,v) s += *it; return s;<br>}<br>// }}}<br><br>int sx,sy;<br>vector&lt;pair&lt;int,int&gt; &gt; L,R;<br><br>bool close2(pair&lt;int,int&gt; a, pair&lt;int,int&gt; b) {<br>  return abs(a.first-b.first)+abs(a.second-b.second) &lt;=1;<br>}<br><br>bool onedge(pair&lt;int,int&gt; a) {<br>  return a.first==0 || a.second==0 || a.first==sx-1 || a.second==sy-1;<br>}<br><br>const int MAXV = 256;<br><br>int V;<br>int cap[MAXV][MAXV];<br><br>int nrL(int x) { return x+5; }<br>int nrR(int x) { return x+5+size(L); }<br><br>int vis[MAXV];<br><br>bool dfs(int x) {<br>  vis[x]=true;<br>  if(x==1) return true;<br>  REP(y,V) if(!vis[y] &amp;&amp; cap[x][y]&gt;0) {<br>    if(dfs(y)) {<br>      cap[x][y]--;<br>      cap[y][x]++;<br>      return true;<br>    }<br>  }<br>  return false;<br>}<br><br>bool aug() {<br>  REP(i,V) vis[i]=false;<br>  return dfs(0);<br>}<br><br>int calcFlow() {<br>  bool progress = false;<br>  while(aug()) {<br>    progress=true;<br>  }<br>  bool ok = true;<br>  FOR(a,1,V-1) if(cap[0][a]&gt;0) ok=false;<br>  if(ok) return 1;<br>  else if(progress) return 0;<br>  else return -1;<br>}<br><br>struct SnakesOnAPlane {<br>  int snakes(vector &lt;string&gt; grid) {<br>    sy=size(grid); sx=size(grid[0]);<br>    REP(x,sx) REP(y,sy) if(grid[y][x]=='.') {<br>      if((x+y)%2==0)<br>        L.push_back(make_pair(x,y));<br>      else<br>        R.push_back(make_pair(x,y));<br>    }<br>    V = size(L) + size(R)+5;<br>    debug(size(L));<br>    debug(size(R));<br>    REP(a,size(L)) REP(b,size(R)) if(close2(L[a],R[b])) cap[nrL(a)][nrR(b)]++;<br>    REP(a,size(L)) cap[0][nrL(a)]+=2;<br>    REP(a,size(R)) cap[nrR(a)][1]+=2;<br>    int res = 0;<br>    REP(a,size(L)) if(onedge(L[a])) cap[nrL(a)][2]++;<br>    REP(a,size(R)) if(onedge(R[a])) cap[4][nrR(a)]++;<br>    if(size(L)&gt;size(R)) {<br>      int A = size(L)-size(R);<br>      res += A;<br>      cap[2][1] += 2 * A;<br>    }<br>    else if (size(R)&gt;size(L)) {<br>      int A = size(R)-size(L);<br>      res += A;<br>      cap[0][4] += 2 * A;<br>    }<br>    for(int iter=0;;++iter) {<br>      int v = calcFlow();<br>      if(iter&gt;0 &amp;&amp; v==-1) break;<br>      if(v==1) return res;<br>      res++;<br>      ++cap[2][4];<br>    }<br>    return -1;<br>  }<br>};<br><br><br><br>// Powered by FileEdit<br></td>