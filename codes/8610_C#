<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections.Generic;<br><br>public class OlympicGames {<br>  public int worstPlace(string[] medals, int left) {<br>        int n = medals.Length;<br>        int[] g = new int[n];<br>        int[] s = new int[n];<br>        int[] b = new int[n];<br>        for (int i = 0; i &lt; n; ++i)<br>        {<br>            int[] arr = Array.ConvertAll&lt;string, int&gt;(medals[i].Split(), int.Parse);<br>            g[i] = arr[0];<br>            s[i] = arr[1];<br>            b[i] = arr[2];<br>        }<br>        g[0] += left;<br>        int res = 1;<br>        List&lt;int&gt; ls = new List&lt;int&gt;();<br>        List&lt;int&gt; lb = new List&lt;int&gt;();<br>        for (int i = 1; i &lt; n; ++i)<br>        {<br>            if (g[i] &lt; g[0])<br>                continue;<br>            if (g[i] &gt; g[0])<br>            {<br>                ++res;<br>                continue;<br>            }<br>            int cs = s[0] - s[i];<br>            int cb = b[0] - b[i];<br>            if (cs &lt; 0 || (cs == 0 &amp;&amp; cb &lt; 0))<br>            {<br>                ++res;<br>                continue;<br>            }<br>            if (cb &lt; 0)<br>                cb = -1;<br>            ls.Add(cs);<br>            lb.Add(cb);<br>        }<br>        n = ls.Count;<br>        s = ls.ToArray();<br>        b = lb.ToArray();<br>        int[,] best = new int[n + 1, left + 1];<br>        for (int i = 1; i &lt;= n; ++i)<br>            for (int j = 0; j &lt;= left; ++j)<br>                best[i, j] = int.MaxValue;<br>        for (int k = 0; k &lt; n; ++k)<br>        {<br>            int cs = s[k];<br>            int cb = b[k];<br>            for (int i = n - 1; i &gt;= 0; --i)<br>                for (int j = 0; j &lt;= left; ++j)<br>                    if (best[i, j] &lt; int.MaxValue)<br>                    {<br>                        if (j + cs &lt;= left &amp;&amp; (cs + cb + 1 &lt;= left))<br>                            best[i + 1, j + cs] = Math.Min(best[i + 1, j + cs], best[i, j] + (cb + 1));<br>                        if (j + cs + 1 &lt;= left)<br>                            best[i + 1, j + cs + 1] = Math.Min(best[i + 1, j + cs + 1], best[i, j]);<br>                    }<br>        }<br>        for (int i = n; i &gt;= 1; --i)<br>            for (int j = 0; j &lt;= left; ++j)<br>                if (best[i, j] &lt;= left)<br>                    return res + i;<br>        return res;<br>  }<br><br><br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003] [modified for C# by Petr]<br>// Powered by CodeProcessor<br></td>