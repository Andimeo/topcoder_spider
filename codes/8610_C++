<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;cstdio&gt;<br>#include &lt;iostream&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;set&gt;<br>#include &lt;map&gt;<br>#include &lt;stack&gt;<br>#include &lt;list&gt;<br>#include &lt;queue&gt;<br>#include &lt;deque&gt;<br>#include &lt;cctype&gt;<br>#include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;sstream&gt;<br>#include &lt;iterator&gt;<br>#include &lt;numeric&gt;<br>using namespace std;<br> <br>typedef pair&lt;int,int&gt; PII;<br>typedef vector &lt;PII&gt; VPII;<br>#define MP(a,b) make_pair(a,b)<br>#define ST first<br>#define ND second<br> <br>typedef vector &lt;int &gt; VI;<br>#define REP(i,n) for (int i=0; i&lt;n; ++i)<br>#define FOREACH(it,x) for(__typeof((x).begin()) it=(x.begin()); it!=(x).end(); ++it)<br>#define FOR(i,p,k) for (int i=p; i&lt;=k; ++i)<br>#define PB push_back<br>#define ALL(x) x.begin(),x.end()<br>#define SIZE(x) (int)x.size()<br> <br>const int N=110;<br>int medale[N][3];<br> <br>int licz(VPII v,int n,int left){<br>  sort(ALL(v));<br>  reverse(ALL(v));<br>  v.resize(n);<br>  VI brazy;<br>  <br>  int sr=medale[0][1],br=medale[0][2];<br>  int mam_srebra=left;<br>  int mam_brazy=left;<br>  REP(i,n) if (v[i].ST&gt;sr) continue;<br>  else{<br>    int potrzeba=sr-v[i].ST;<br>    mam_srebra-=potrzeba;<br>    if (mam_srebra&lt;0) return 0;<br> <br>    if (v[i].ND&lt;=br){<br>      int chce=br-v[i].ND+1;<br>      if (chce+potrzeba&gt;left){<br> <br>        if (potrzeba+1&gt;left) return 0;<br>        mam_srebra--;<br>        if (mam_srebra&lt;0) return 0;<br>        continue;<br>      }<br>    }<br>    brazy.PB(v[i].ND);<br>  }<br>  sort(ALL(brazy));<br>  FOREACH(it,brazy) if (*it&lt;=br){<br>    if (mam_srebra) mam_srebra--;<br> <br>    else if (*it&gt;br) continue;<br>    else{<br>      int potrzeba=br-*it+1;<br>      mam_brazy-=potrzeba;<br>      if (mam_brazy&lt;0) return 0;<br>    }<br>  }<br>  return 1;<br>}<br> <br>    class OlympicGames<br>        { <br>        public: <br>        int worstPlace(vector &lt;string&gt; medals, int left){ <br>          int n=SIZE(medals);<br>          REP(i,n){<br>            istringstream in(medals[i]);<br>            REP(j,3) in &gt;&gt; medale[i][j];<br>          }<br>          medale[0][0]+=left;<br>          int res=1;<br>          VPII ktore;<br>          FOR(i,1,n-1) if (medale[i][0]&gt;medale[0][0]) res++;<br>          else if (medale[i][0]==medale[0][0]) ktore.PB(MP(medale[i][1],medale[i][2]));<br>          <br>          int l=0,r=SIZE(ktore);<br>          while (l&lt;r){<br>            int m=(l+r+1)/2;<br>            if (licz(ktore,m,left)) l=m;<br>            else r=m-1;<br>          }<br> <br>          return res+l;<br>        } <br>        <br> <br>         }; <br> <br>    <br> <br> <br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003]<br>// Powered by CodeProcessor<br></td>