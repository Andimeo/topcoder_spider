<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;iostream&gt;<br>#include &lt;set&gt;<br>#include &lt;cctype&gt;<br>#include &lt;functional&gt;<br>#include &lt;vector&gt;<br>#include &lt;sstream&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;map&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;cstring&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;queue&gt;<br>#include &lt;cmath&gt;<br>#include &lt;bitset&gt;<br>#include &lt;string&gt;<br><br>using namespace std;<br><br>typedef long long ll;<br>typedef vector&lt;int&gt; vi;<br><br>#define all(X) (X).begin(), (X).end() <br>#define sz(a) int((a).size())<br><br>class MakeSquare {<br>public:<br>  int minChanges(string S);<br>};<br><br>const int MAXN = 55;<br><br>int dp[MAXN][MAXN];<br><br>int calit(string s1, string s2)<br>{<br>  int tot = sz(s1) + sz(s2);<br>  for (int i = 0; i &lt;= sz(s2); ++i) {<br>    dp[0][i] = i;<br>  }<br>  for (int i = 0; i &lt;= sz(s1); ++i) {<br>    dp[i][0] = i;<br>  }<br>  for (int i = 0; i &lt; sz(s1); ++i) {<br>    for (int j = 0; j &lt; sz(s2); ++j) {<br>      if (s1[i] == s2[j]) {<br>        dp[i + 1][j + 1] = dp[i][j];<br>      }<br>      else {<br>        dp[i + 1][j + 1] = min(dp[i][j] + 1, dp[i][j + 1] + 1);<br>        dp[i + 1][j + 1] = min(dp[i + 1][j + 1], dp[i + 1][j] + 1);<br>      }<br>    }<br>  }<br>  return dp[sz(s1)][sz(s2)];<br>}<br><br>int MakeSquare::minChanges(string S) {<br>  int best = 0x7FFFFFFF;<br>  int len = sz(S);<br>  for (int la = 0; la &lt;= len; ++la) {<br>    string s1 = S.substr(0, la);<br>    string s2 = S.substr(la);<br>    best = min(best, calit(s1, s2));<br>  }<br>  return best;<br>}<br><br><br><br>// Powered by FileEdit<br>// Powered by CodeProcessor<br></td>