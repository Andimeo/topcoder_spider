<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections;<br>using System.Collections.Generic;<br><br>public class SentenceDecomposition {<br>    public int decompose(string sentence, string[] validWords) {<br>        int N = sentence.Length;<br>        int M = validWords.Length;<br>        string[] validSorted = new string[M];<br>        for (int i = 0; i &lt; M; i++) {<br>            char[] c = validWords[i].ToCharArray();<br>            Array.Sort(c);<br>            validSorted[i] = new string(c);<br>        }<br><br>        int[] min = new int[N + 1];<br>        for (int i = 0; i &lt; N; i++) {<br>            min[i + 1] = 999999;<br>        }<br>        for (int i = 0; i &lt; N; i++) {<br>            for (int j = 0; j &lt; M; j++) {<br>                if (i + 1 &gt;= validWords[j].Length) {<br>                    string s = sentence.Substring(i - validWords[j].Length + 1, validWords[j].Length);<br>                    char[] c = s.ToCharArray();<br>                    Array.Sort(c);<br>                    string s2 = new string(c);<br>                    if (s2 == validSorted[j]) {<br>                        int cost = 0;<br>                        for (int k = 0; k &lt; validWords[j].Length; k++) {<br>                            if (s[k] != validWords[j][k]) cost++;<br>                        }<br>                        min[i + 1] = Math.Min(min[i + 1], min[i + 1 - validWords[j].Length] + cost);<br>                    }<br>                }<br>            }<br>        }<br><br>        return min[N] &lt; 999999 ? min[N] : -1;<br><br>    }<br>}<br></td>