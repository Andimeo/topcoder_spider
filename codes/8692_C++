<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;cmath&gt;<br>#include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;cstring&gt;<br>#include &lt;iostream&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cmath&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;utility&gt;<br>#include &lt;queue&gt;<br>#include &lt;functional&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;climits&gt;<br>#include &lt;sstream&gt;<br>#include &lt;cctype&gt;<br>#include &lt;complex&gt;<br>#include &lt;numeric&gt;<br>#include &lt;cassert&gt;<br>using namespace std;<br> <br>const int oo = 1000000000;<br>typedef long long LL;<br>typedef vector&lt;int&gt; VI;<br>typedef vector&lt;VI&gt; VVI;<br>typedef vector&lt;string&gt; VS;<br>typedef pair&lt;int, int&gt; PII;<br>#define FORIT(i,c) for (typeof((c).end()) i=(c).begin(); i!=(c).end(); ++i)<br> <br>class SentenceDecomposition { public: int decompose(string sentence, vector &lt;string&gt; validWords); };<br> <br>int SentenceDecomposition::decompose(string sentence, vector &lt;string&gt; validWords)<br>{<br>  int n = sentence.size();<br>  VI dp(n+1, oo);<br>  dp[0] = 0;<br>  for (int i=0; i&lt;n; i++)<br>  {<br>    FORIT(it, validWords)<br>    {<br>      string s = *it, t = *it;<br>      int m = s.size();<br>      if (i + m &gt; n)<br>        continue;<br>      sort(t.begin(), t.end());<br>      string a = sentence.substr(i, m);<br>      string b = a;<br>      sort(b.begin(), b.end());<br>      if (b != t)<br>        continue;<br>      int cost = 0;<br>      for (int j=0; j&lt;m; j++)<br>        if (s[j] != a[j])<br>          cost++;<br>      dp[i+m] &lt;?= dp[i] + cost;<br>    }<br>  }<br>  return dp[n] == oo ? -1 : dp[n];<br>}<br> <br> <br>// Powered by FileEdit<br></td>