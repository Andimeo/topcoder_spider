<td class="problemText" colspan="8" valign="middle" align="left">
            import static java.lang.Math.*;<br>import static java.math.BigInteger.*;<br>import static java.util.Arrays.*;<br>import static java.util.Collections.*;<br>import java.math.*;<br>import java.util.*;<br><br>public class SentenceDecomposition {<br>  public int decompose(String sentence, String[] validWords) {<br>    int n = sentence.length();<br>    int[] dp = new int[n + 1];<br>    fill(dp, Integer.MAX_VALUE);<br>    dp[0] = 0;<br>    for (int i = 0; i &lt; n; i++) if (dp[i] &lt; Integer.MAX_VALUE) {<br>      for (String s : validWords) if (i + s.length() &lt;= n &amp;&amp; can(sentence.substring(i, i + s.length()), s)) {<br>        dp[i + s.length()] = min(dp[i + s.length()], dp[i] + cost(sentence.substring(i, i + s.length()), s));<br>      }<br>    }<br>    if (dp[n] == Integer.MAX_VALUE) return -1;<br>    return dp[n];<br>  }<br>  boolean can(String s, String t) {<br>    char[] cs = s.toCharArray(), ct = t.toCharArray();<br>    sort(cs);<br>    sort(ct);<br>    return Arrays.equals(cs, ct);<br>  }<br>  int cost(String s, String t) {<br>    int n = s.length(), res = 0;<br>    for (int i = 0; i &lt; n; i++) {<br>      if (s.charAt(i) != t.charAt(i)) res++;<br>    }<br>    return res;<br>  }<br>  void debug(Object...os) {<br>    System.err.println(Arrays.deepToString(os));<br>  }<br>}<br></td>