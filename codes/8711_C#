<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br><br>public class BinarySum {<br>  public int rearrange(int a, int b, int c) {<br>        int na, nb, nc, ka, kb, kc;<br>        process(a, out na, out ka);<br>        process(b, out nb, out kb);<br>        process(c, out nc, out kc);<br>        int n = Math.Max(na, Math.Max(nb, nc));<br>        bool[, , ,,] can = new bool[n + 1, 2, ka + 1, kb + 1, kc + 1];<br>        int[,,,,] by = new int[n + 1, 2, ka + 1, kb + 1, kc + 1];<br>        can[0, 0, 0, 0, 0] = true;<br>        int res = int.MaxValue;<br>        for (int len = 1; len &lt;= n; ++len)<br>        {<br>            for (int da = 0; da &lt;= 1; ++da)<br>                for (int db = 0; db &lt;= 1; ++db)<br>                    for (int pcarry = 0; pcarry &lt;= 1; ++pcarry)<br>                    {<br>                        int s = da + db + pcarry;<br>                        int dc = s % 2;<br>                        int carry = s / 2;<br>                        for (int ma = da; ma &lt;= ka; ++ma)<br>                            for (int mb = db; mb &lt;= kb; ++mb)<br>                                for (int mc = dc; mc &lt;= kc; ++mc)<br>                                    if (can[len - 1, pcarry, ma - da, mb - db, mc - dc])<br>                                    {<br>                                        int cby = by[len - 1, pcarry, ma - da, mb - db, mc - dc] + (dc &lt;&lt; (len - 1));<br>                                        if (!can[len, carry, ma, mb, mc] || by[len, carry, ma, mb, mc] &gt; cby) {<br>                                            can[len, carry, ma, mb, mc] = true;<br>                                            by[len, carry, ma, mb, mc] = cby;<br>                                            if (len == n &amp;&amp; ma == ka &amp;&amp; mb == kb &amp;&amp; mc == kc &amp;&amp; carry == 0)<br>                                                res = Math.Min(res, cby);<br>                                        }<br>                                    }<br>                    }<br>        }<br>        if (res == int.MaxValue)<br>            res = -1;<br>        return res;<br>    }<br><br>    void process(int x, out int n, out int k)<br>    {<br>        n = 0;<br>        k = 0;<br>        while (x &gt; 0)<br>        {<br>            ++n;<br>            if (x % 2 != 0)<br>                ++k;<br>            x /= 2;<br>        }<br>    }<br><br>  <br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003] [modified for C# by Petr]<br>// Powered by CodeProcessor<br></td>