<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;vector&gt;<br>#include &lt;algorithm&gt;<br><br>using namespace std;<br><br>class LangfordSequence {<br>  public:<br><br>  int data[8], flag[8], n;<br>  int ans[16], f;<br>  <br>  void dfs (int x) {<br>    if (x == n * 2) {<br>      f = 1;<br>      return;<br>      }<br>    if (ans[x] != -1) {<br>      dfs(x + 1);<br>      return;<br>      }<br>    for (int i = 0; i &lt; n; i ++)<br>      if (flag[i] &amp;&amp; x + data[i] + 1 &lt; n * 2 &amp;&amp; ans[x + data[i] + 1] == -1) {<br>        ans[x] = data[i];<br>        ans[x + data[i] + 1] = data[i];<br>        flag[i] = 0;<br>        dfs(x + 1);<br>        if (f)<br>          return;<br>        ans[x] = -1;<br>        ans[x + data[i] + 1] = -1;<br>        flag[i] = 1;<br>        }<br>    }<br>  <br>  vector &lt;int&gt; getFirst(vector &lt;int&gt; a) {<br>    sort(a.begin(), a.end());<br>    n = a.size();<br>    for (int i = 0; i &lt; n; i ++) {<br>      data[i] = a[i];<br>      flag[i] = 1;<br>      }<br>    f = 0;<br>    for (int i = 0; i &lt; n * 2; i ++)<br>      ans[i] = -1;<br>    dfs(0);<br>    vector&lt;int&gt; re;<br>    if (f) {<br>      for (int i = 0; i &lt; n * 2; i ++)<br>        re.push_back(ans[i]);<br>      return re;<br>      }<br>    return re;<br>    }<br>  };<br></td>