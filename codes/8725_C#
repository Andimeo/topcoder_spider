<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Text;<br>using System.Text.RegularExpressions;<br>using System.Collections;<br>using System.Collections.Generic;<br>using System.Collections.Specialized;<br><br>public class SumOfPowers {<br><br>    const long m = 1000000007;<br>    long[,] c;<br>    Hashtable ht = new Hashtable();<br><br>    public int value(int n, int k) {<br>        c = new long[k + 1, k + 1];<br>        for (int i = 0; i &lt;= k; i++)<br>        {<br>            c[i, 0] = 1;<br>            for (int j = 1; j &lt;= i; j++)<br>                c[i, j] = (c[i - 1, j] + c[i - 1, j - 1]) % m;<br>        }<br>        return (int)calc(n, k);<br>    }<br><br>    long calc(long n, long k)<br>    {<br>        if (n == 0) return 0;<br><br>        long key = n * 100 + k;<br>        if (ht.Contains(key)) return (long)ht[key];<br><br>        long res = 0;<br>        if (n % 2 == 1)<br>        {<br>            res = (calc(n - 1, k) + mod(n, k)) % m;<br>        }<br>        else<br>        {<br>            // (mid+x)^k = Sigma(C(k, i) * mid^(k-i) * x ^ i)<br>            //  Sigma((mid+x)^k) = Sigma(C(k, i) * mid^(k-i) * calc(mid, i))<br>            long mid = n / 2;<br>            res = calc(mid, k);<br>            for (int i = 0; i &lt;= k; i++)<br>            {<br>                res = (res + (c[k, i] * mod(mid, k - i)) % m * calc(mid, i) % m) % m;<br>            }<br>        }<br>        ht.Add(key, res);<br>        return res;<br>    }<br><br>    long mod(long n, long k)<br>    {<br>        long res = 1;<br>        while (k-- &gt; 0) res = res * n % m;<br>        return res;<br>    }<br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by CodeProcessor<br></td>