<td class="problemText" colspan="8" valign="middle" align="left">
            import static java.lang.Math.*;<br>import static java.math.BigInteger.*;<br>import static java.util.Arrays.*;<br>import static java.util.Collections.*;<br>import java.math.*;<br>import java.util.*;<br><br>public class IngredientProportions {<br>  public int[] getMasses(String[] proportions) {<br>    int n = proportions.length + 1;<br>    Rational[][] mat = new Rational[n][n];<br>    for (int i = 0; i &lt; n; i++) mat[i][i] = new Rational(valueOf(1), valueOf(1));<br>    for (String s : proportions) {<br>      int a = s.charAt(1) - '0', b = s.charAt(8) - '0';<br>      int p = s.charAt(13) - '0', q = s.charAt(15) - '0';<br>      mat[a][b] = new Rational(valueOf(q), valueOf(p));<br>      mat[b][a] = new Rational(valueOf(p), valueOf(q));<br>    }<br>    for (int k = 0; k &lt; n; k++) {<br>      for (int i = 0; i &lt; n; i++) {<br>        for (int j = 0; j &lt; n; j++) {<br>          if (mat[i][j] == null &amp;&amp; mat[i][k] != null &amp;&amp; mat[k][j] != null) {<br>            mat[i][j] = mat[i][k].mul(mat[k][j]);<br>          }<br>        }<br>      }<br>    }<br>    BigInteger lcm = ONE;<br>    for (int i = 0; i &lt; n; i++) {<br>      lcm = lcm.multiply(mat[0][i].den).divide(lcm.gcd(mat[0][i].den));<br>    }<br>    int[] res = new int[n];<br>    for (int i = 0; i &lt; n; i++) {<br>      res[i] = mat[0][i].mul(new Rational(lcm, ONE)).num.intValue();<br>    }<br>    return res;<br>  }<br>  class Rational {<br>    BigInteger num, den;<br>    Rational(BigInteger num, BigInteger den) {<br>      this.num = num; this.den = den;<br>      red();<br>    }<br>    void red() {<br>      BigInteger gcd = num.gcd(den);<br>      if (gcd.signum() != 0) {<br>        num = num.divide(gcd); den = den.divide(gcd);<br>      }<br>      if (den.signum() &lt; 0 || (den.signum() == 0 &amp;&amp; num.signum() &lt; 0)) {<br>        num = num.negate();  den = den.negate();<br>      }<br>    }<br>    Rational mul(Rational r) {<br>      return new Rational(num.multiply(r.num), den.multiply(r.den));<br>    }<br>    public String toString() {<br>      return num + "/" + den;<br>    }<br>  }<br>  void debug(Object...os) {<br>    System.err.println(Arrays.deepToString(os));<br>  }<br>}<br></td>