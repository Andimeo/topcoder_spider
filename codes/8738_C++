<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;map&gt;<br>// {{{<br>#include &lt;algorithm&gt;<br>#include &lt;cctype&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;iostream&gt;<br>#include &lt;sstream&gt;<br>#include &lt;utility&gt;<br>#include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;stack&gt;<br>#include &lt;queue&gt;<br>using namespace std;<br>#define REP(i,n) for(int i=0;i&lt;(n);++i)<br>#define FOR(i,a,b) for(int i=(a);i&lt;=(b);++i)<br>#define FORD(i,a,b) for(int i=(a);i&gt;=(b);--i)<br>#define FOREACH(it,c) for(typeof((c).begin()) it=(c).begin();it!=(c).end();++it)<br>#define ALL(c) (c).begin(),(c).end()<br>#define debug(x) cerr &lt;&lt; #x &lt;&lt; " = " &lt;&lt; (x) &lt;&lt; "\n";<br>#define debugv(v) cerr &lt;&lt; #v &lt;&lt; " = "; FOREACH(it,v) cerr &lt;&lt; *it &lt;&lt; ","; cerr &lt;&lt; "\n";<br>typedef long long LL; typedef vector&lt;int&gt; VI;<br>typedef vector&lt;string&gt; VS; typedef long double ld;<br>const int INF = 1000000000;<br>const int INFLL = LL(INF) * LL(INF);<br>template&lt;class T&gt; inline int size(const T&amp;c) { return c.size(); }<br>template&lt;class T&gt; string show(T x) { ostringstream o; o&lt;&lt;x; return o.str(); }<br>template&lt;class T&gt; T parse(string s) { istringstream i(s); T x; i&gt;&gt;x; return x; }<br>VS split(string s, string del=" ") {<br>  s += del[0];<br>  string w; VS res;<br>  FOREACH(it,s) {<br>    if(find(ALL(del),*it)==del.end()) w += *it;<br>    else {<br>      if(w!="") res.push_back(w);<br>      w="";<br>    }<br>  }<br>  return res;<br>}<br>VI s2vi(string s, string del=" ") {<br>  VS v = split(s,del);<br>  VI res;<br>  FOREACH(it,v) res.push_back(parse&lt;int&gt;(*it));<br>  return res;<br>}<br>string mergeInput(VS s) {<br>  string res; FOREACH(it,s) res+=*it; return res;<br>}<br><br>// }}}<br><br>VI generatee(int N, LL seed, LL limit) {<br>  LL X = seed;<br>  VI p(N);<br>  REP(i,N) {<br>    p[i]=i;<br>    X = (X * 295397169) % 1073741789;<br>    if ((X * 1000000) / 1073741789 &lt; limit) {<br>      X = (X * 295397169) % 1073741789;<br>      LL j = (X * (i + 1)) / 1073741789;<br>      swap(p[i], p[j]);<br>    }<br>  }<br>  return p;<br>}<br><br><br>struct BSTConstruction {<br>  long long sumHeights(int N, int seed, int limit) {<br>    vector&lt;int&gt; p = generatee(N, seed, limit);<br>    map&lt;int,int&gt; h;<br>    LL res = 0;<br>    REP(i,N) {<br>      int x = p[i];<br>      int hei;<br>      if(h.empty()) hei = 1;<br>      else {<br>        map&lt;int,int&gt;::iterator it = h.lower_bound(x);<br>        if(it == h.begin()) {<br>          hei = it-&gt;second + 1;<br>        }<br>        else if(it == h.end()) {<br>          --it;<br>          hei = it-&gt;second + 1;<br>        }<br>        else {<br>          int h1 = it-&gt;second;<br>          --it;<br>          int h2 = it-&gt;second;<br>          hei = max(h1,h2)+1;<br>        }<br>      }<br>      res += hei;<br>      h[x] = hei;<br>    }<br>    return res;<br>  }<br>};<br><br><br><br>// Powered by FileEdit<br></td>