<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br><br>public class BSTConstruction {<br>  final int T = 1 &lt;&lt; 18;<br>  final int TS = T * 2;<br>  int [] A, B, C;<br>  int n;<br>  <br>  public int getCSum (int l, int r) {<br>    l += T; r += T;<br>    int res = 0;<br>    while (l &lt;= r) {<br>      if ((l &amp; 1) == 1) {<br>        res += C[l];<br>        ++l;<br>      };<br>      if ((r &amp; 1) == 0) {<br>        res += C[r];<br>        --r;<br>      };<br>      if (l &gt; r) break;<br>      l &gt;&gt;= 1;<br>      r &gt;&gt;= 1;<br>    };<br>    return res;<br>  };<br>  <br>  void putc (int x) {<br>    x += T;<br>    while (x &gt; 0) {<br>      ++C[x];<br>      x &gt;&gt;= 1;<br>    };<br>  };<br>  <br>  <br>  int findC (int hm) {<br>    if (hm &lt; 0) return -1;<br>    if (hm &gt;= C[1]) return n;<br>    int x = 1;<br>    while (x &lt; T) {<br>      x *= 2;<br>      if (hm &gt;= C[x]) {<br>        hm -= C[x];<br>        ++x;<br>      };<br>    };<br>    return x - T;<br>  };<br>  <br>  <br>  void inc (int l, int r, int x, int cl, int cr) {<br>    //System.out.println (l + " " + r + " " + x + " " + cl + " " + cr);<br>    if (l == cl &amp;&amp; r == cr) {<br>      ++A[x];<br>      return;<br>    };<br>    A[2 * x] += A[x];<br>    A[2 * x + 1] += A[x];<br>    A[x] = 0;<br>    int m = (cl + cr) &gt;&gt; 1;<br>    if (r &gt; m) inc (Math.max (l, m + 1), r, 2 * x + 1, m + 1, cr);<br>    if (l &lt;= m) inc (l, Math.min (m, r), 2 * x, cl, m);<br>  };<br>  <br><br>  int _getVal (int l, int r, int x, int cl, int cr) {<br>    if (l == cl &amp;&amp; r == cr) {<br>      return A[x];<br>    };<br>    A[2 * x] += A[x];<br>    A[2 * x + 1] += A[x];<br>    A[x] = 0;<br>    int m = (cl + cr) &gt;&gt; 1;<br>    if (r &gt; m) return _getVal (Math.max (l, m + 1), r, 2 * x + 1, m + 1, cr);<br>    if (l &lt;= m) return _getVal (l, Math.min (m, r), 2 * x, cl, m);<br>    return -239017;<br>  };<br>  <br>  int getVal (int p) {<br>    return _getVal (p, p, 1, 0, T - 1);<br>  };<br>  <br><br>  public long sumHeights (int N, int seed, int limit) {<br>    n = N;<br>    long X = seed;<br>    int [] p = new int [N];<br>    for (int i = 0; i &lt; N; i++) {<br>      p[i] = i;<br>      X = (X * 295397169) % 1073741789;<br>    if ((X * 1000000) / 1073741789 &lt; limit) {<br>    X = (X * 295397169) % 1073741789;<br>    int j = (int)((X * (i + 1)) / 1073741789);<br>    int t = p[i]; p[i] = p[j]; p[j] = t;<br>      };<br>    };<br>    /*for (int i = 0; i &lt; n; i++)<br>      System.out.print (p[i] + " ");<br>    System.out.println ();*/<br>    long ans = 0;<br>    A = new int [TS];<br>    B = new int [TS];<br>    C = new int [TS];<br>    for (int i = 0; i &lt; n; i++) {<br>      int z = getCSum (0, p[i]);<br>      int l = findC (z - 1) + 1;<br>      int r = findC (z) - 1;<br>      //System.out.println (l + " " + r + " " + z);<br>      int cur = getVal (p[i]);<br>      //System.out.println (cur);<br>      ans += cur + 1;<br>      putc (p[i]);<br>      inc (l, r, 1, 0, T - 1);<br>    };<br>    return ans;<br>  };<br>};<br></td>