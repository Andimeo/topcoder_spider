<td class="problemText" colspan="8" valign="middle" align="left">
            #line 5 "KnightsOut.cpp"<br>#include &lt;iostream&gt;<br>#include &lt;string&gt;<br>#include &lt;cmath&gt;<br>#include &lt;vector&gt;<br>#include &lt;sstream&gt;<br>#include &lt;map&gt;<br>#include &lt;utility&gt;<br>#include &lt;algorithm&gt;<br>using namespace std;<br><br>int n , m;<br>int id[151][151] , idz = 0;<br>int dx[] = {0 , 1 , 1 , -1 , -1 , -2 , -2 , 2 , 2};<br>int dy[] = {0 , 2 , -2 , 2 , -2 , 1 , -1 , -1 , 1};<br>int Mark[151][151][601];<br>int Equ[601][601] , cnt = 0;<br><br>int inrange(int x , int y)<br>{<br>    return (1 &lt;= x &amp;&amp; x &lt;= n) &amp;&amp; (1 &lt;= y &amp;&amp; y &lt;= m);<br>}<br><br>bool ori(int x , int y)<br>{<br>    return ((x &lt;= 2) || ((y == 1) || (y == m)));<br>}<br><br>void UpMark(int a , int b , int c , int d)<br>{<br>    for(int i = 1 ; i &lt;= idz ; i++)<br>        Mark[a][b][i] ^= Mark[c][d][i];<br>}<br><br>void UpEqu(int x , int a , int b)<br>{<br>    for(int i = 1 ; i &lt;= idz ; i++)<br>        Equ[x][i] ^= Mark[a][b][i];<br>}<br><br>long long power(int a , int b)<br>{<br>    long long ret = 1;<br>    for(int i = 1 ; i &lt;= b ; i++)<br>        ret = (ret * a) %  123456789;<br>    return ret;<br>}<br><br>int rank()<br>{<br>    int cur = 0;<br>    for(int i = 1 ; i &lt;= idz ; i++)<br>    {<br>        int find = 0;<br>        for(int j = cur + 1 ; j &lt;= cnt ; j++)<br>            if(Equ[j][i] == 1)<br>                find = j;<br>        if(find)<br>        {<br>            cur ++;<br>            for(int j = 0 ; j &lt;= idz ; j++)<br>                swap(Equ[cur][j] , Equ[find][j]);<br>            for(int j = cur + 1 ; j &lt;= cnt ; j++)<br>                if(Equ[j][i] == 1)<br>                    for(int k = 0 ; k &lt;= idz ; k++)<br>                        Equ[j][k] ^= Equ[cur][k];<br>        }<br>    }<br>    return cur;<br>}<br><br>bool check()<br>{<br>    for(int i = 1 ; i &lt;= cnt ; i++)<br>    {<br>        bool have1 = false;<br>        for(int j = 1 ; j &lt;= idz ; j++)<br>            if(Equ[i][j] == 1)<br>                have1 = true;<br>        if(have1 == false &amp;&amp; Equ[i][0] == 1)<br>            return false;<br>    }<br>    return true;<br>}<br><br>class KnightsOut<br>{<br>     public:<br>         int count(int N, int M)<br>         {<br>             idz = 0 , cnt = 0;<br>             n = N , m = M;<br>             memset(Mark , 0 , sizeof(Mark));<br>             memset(id , 0 , sizeof(id));<br>             memset(Equ , 0 , sizeof(Equ));<br>             for(int i = 1 ; i &lt;= n ; i++)<br>                for(int j = 1 ; j &lt;= m ; j++)<br>                    if(ori(i , j))<br>                    {<br>                        //cout&lt;&lt;i&lt;&lt;" "&lt;&lt;j&lt;&lt;endl;<br>                        idz ++;<br>                        id[i][j] = idz;<br>                        Mark[i][j][idz] = 1;<br>                    }<br><br>             for(int i = 1 ; i &lt;= n ; i++)<br>                for(int j = 1 ; j &lt;= m ; j++)<br>                    if(inrange(i+2 , j+1) &amp;&amp; id[i+2][j+1] == 0)<br>                    {<br>                        for(int f = 0 ; f &lt; 8 ; f++)<br>                            if(inrange(i+dx[f] , j+dy[f]))<br>                                UpMark(i+2  , j+1 , i + dx[f] , j+dy[f]);<br>                    }<br>                    else<br>                    {<br>                        cnt ++;<br>                        for(int f = 0 ; f &lt;= 8 ; f++)<br>                            if(inrange(i+dx[f] , j+dy[f]))<br>                            {<br><br>                                UpEqu(cnt , i+dx[f] , j+dy[f]);<br>                            }<br>                    }<br>            if(!check())<br>                return 0;<br><br><br>            return (int)power(2 , (idz - rank()));<br><br><br>         }<br><br><br>};<br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003]<br>// Powered by CodeProcessor<br></td>