<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections.Generic;<br><br>public class SortingGame {<br>  private int encode(int[] board)<br>  {<br>    int state = 0;<br>    for (int i = 0; i &lt; board.Length; i++)<br>      state = state*8 + board[i];<br>    return state;<br>  }<br><br>  public int fewestMoves(int[] board, int k) {<br>    for (int i = 0; i &lt; board.Length; i++)<br>      board[i]--;<br><br>    int n = board.Length;<br>    int[] goal = new int[n];<br>    for (int i = 0; i &lt; n; i++)<br>      goal[i] = i;<br>    int finalState = encode(goal);<br><br>    Queue&lt;int[]&gt; q = new Queue&lt;int[]&gt;();<br>    Dictionary&lt;int, int&gt; moves = new Dictionary&lt;int, int&gt;(40320);<br>    q.Enqueue(board);<br>    moves.Add(encode(board), 0);<br>    <br>    while (!moves.ContainsKey(finalState) &amp;&amp; q.Count &gt; 0)<br>    {<br>      int[] current = q.Dequeue();<br>      int noMoves = moves[encode(current)];<br>      for (int i = 0; i &lt; n-k+1; i++)<br>      {<br>        int[] newBoard = (int[]) current.Clone();<br>        for (int j = 0; j &lt; k; j++)<br>          newBoard[i+j] = current[i + k - j - 1];<br>        int newState = encode(newBoard);<br>        if (!moves.ContainsKey(newState))<br>        {<br>          moves.Add(newState, noMoves + 1);<br>          q.Enqueue(newBoard);<br>        }<br>      }<br>    }<br>    if (moves.ContainsKey(finalState))<br>      return moves[finalState];<br>    return -1;<br>  }<br><br>}<br><br><br><br><br>// Powered by FileEdit<br></td>