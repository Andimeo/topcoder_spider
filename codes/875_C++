<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;vector&gt;<br>#include &lt;list&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;deque&gt;<br>#include &lt;stack&gt;<br>#include &lt;bitset&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;functional&gt;<br>#include &lt;numeric&gt;<br>#include &lt;utility&gt;<br>#include &lt;sstream&gt;<br>#include &lt;iostream&gt;<br>#include &lt;iomanip&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;ctime&gt;<br>#include &lt;queue&gt;<br> <br>using namespace std;<br> <br>typedef long long LL;<br>typedef vector &lt;string&gt; vs;<br>typedef vector &lt;int&gt; vi;<br>typedef vector &lt;LL&gt; vll;<br>typedef vector &lt;double&gt; vd;<br>typedef pair &lt;int,int&gt; pii;<br>typedef map &lt;int,int&gt; mii;<br>typedef map &lt;string,int&gt; msi;<br>typedef map &lt;string,string&gt; mss;<br> <br>class WordTrain {<br>public:<br>  string hookUp(vector &lt;string&gt;);<br>};<br> <br>struct tt<br>{<br>  string s;<br>  char a, b;  <br>};<br>bool operator&lt;(const tt&amp; a, const tt&amp; b)<br>{<br>  if (a.a!=b.a) return a.a &lt; b.a;<br>  if (a.b!=b.b) return a.b &lt; b.b;<br>  return a.s &lt; b.s;<br>}<br> <br>int n;<br>vs car;<br>tt t[100];<br>int len[100];<br>int prev[100];<br> <br> <br>string WordTrain::hookUp(vector &lt;string&gt; cars) {<br>  car = cars;<br>  n = car.size();  <br>  int le;<br>  int i,j;<br>  string tmp;<br>  for (i=0; i&lt;n; i++)<br>  {<br>    t[i].s = car[i];<br>    le = t[i].s.length();<br>    <br>    tmp = t[i].s;<br>    reverse(tmp.begin(), tmp.end());<br>    <br>    if (t[i].s[0] &gt; tmp[0] || (t[i].s[0]==tmp[0] &amp;&amp; tmp&lt;t[i].s))<br>    {<br>      t[i].s = tmp;<br>    }<br>    t[i].a = t[i].s[0];<br>    t[i].b = t[i].s[le-1];<br>  }<br>  sort(t,t+n);<br>  <br>  memset(prev,-1,sizeof(prev));<br>  for (i=n-1; i&gt;=0; i--) len[i] = 1;<br>  for (i=n-2; i&gt;=0; i--)<br>  {<br>    for (j=n-1; j&gt;i; j--) if (t[j].a == t[i].b &amp;&amp; (len[i]&lt;len[j]+1 || (len[i]==len[j]+1 &amp;&amp; t[j].s&lt;t[prev[i]].s))  )<br>    {<br>      len[i] = len[j]+1;<br>      prev[i] = j;<br>    }<br>  }<br>  <br>  int start=0;<br>  for (i=1; i&lt;n; i++) if (len[i]&gt;len[start] || (len[i]==len[start] &amp;&amp; t[i].s &lt; t[start].s))<br>  {<br>    start = i;<br>  }<br>  <br>  string x = t[start].s;<br>  while (prev[start]!=-1)<br>  {<br>     start = prev[start];<br>     x += "-"+t[start].s;<br>  }<br>  <br>  return x;<br>}<br> <br>//Powered by [KawigiEdit]<br></td>