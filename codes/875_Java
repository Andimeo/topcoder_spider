<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>import java.math.*;<br>import java.text.*;<br>public class WordTrain {<br>   boolean debug = false;<br>   <br>   Set set = new HashSet();<br>   ArrayList al = new ArrayList();<br>   Hashtable ht = new Hashtable();<br>   StringTokenizer tok, toka, tokb;<br>   <br>   int MAX = 1000 * 1000 * 1000, nil = -1;<br>   <br>   public String hookUp(String[] cars) {<br>      int n = cars.length;<br>      String [] cc = new String [n];<br>      <br>      for (int i = 0; i &lt; n; i ++) {<br>         String curr = cars[i];<br>         String rev = new StringBuffer(curr).reverse().toString();<br>         if (curr.compareTo(rev) &lt; 0) {<br>            cc[i] = curr;<br>         }<br>         else {<br>            cc[i] = rev;<br>         }<br>      }<br>      <br>      for (int i = 0; i &lt; n; i ++) {<br>         cc[i] = cc[i].charAt(0) + "" + cc[i].charAt(cc[i].length() - 1) + "" + cc[i];<br>      }<br>      Arrays.sort(cc);<br>      <br>      for (int i = 0; i &lt; n; i ++) {<br>         cc[i] = cc[i].substring(2);<br>      }<br>      <br>      <br>      String bb[] = new String [n];<br>      int cnt[] = new int [n];<br>      <br>      for (int i = n - 1; i &gt;= 0; i --) {<br>         String curr = new String(cc[i]);<br>         cnt[i] = 1;<br>         <br>         for (int j = i + 1; j &lt; n; j ++) {<br>            if ( cc[i].charAt(cc[i].length() - 1) == cc[j].charAt(0) ) {<br>               <br>               String poss = cc[i] + "-" + bb[j];<br>               if (cnt[i] &lt; 1 + cnt[j]<br>               || ( 1 + cnt[j] == cnt[i] &amp;&amp; poss.compareTo(curr) &lt; 0 )) {<br>                  curr = poss;<br>                  cnt[i] = 1 + cnt[j];<br>               }<br>            }<br>         }<br>         <br>         bb[i] = curr;<br>      }<br>      <br>      String res = bb[0];<br>      int best = cnt[0];<br>      <br>      for (int i = 1; i &lt; n; i ++) {<br>         if (cnt[i] &gt; best<br>         || ( cnt[i] == best &amp;&amp; bb[i].compareTo(res) &lt; 0 ) ) {<br>            res = bb[i];<br>            best = cnt[i];<br>         }<br>      }<br>      <br>      <br>      return res;<br>   } // end of method hookUp<br>   <br>   <br>}<br> <br>// Powered by CodeProcessor<br></td>