<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;vector&gt;<br>#include &lt;list&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;deque&gt;<br>#include &lt;queue&gt;<br>#include &lt;stack&gt;<br>#include &lt;bitset&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;functional&gt;<br>#include &lt;numeric&gt;<br>#include &lt;utility&gt;<br>#include &lt;sstream&gt;<br>#include &lt;iostream&gt;<br>#include &lt;iomanip&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cctype&gt;<br>#include &lt;string&gt;<br>#include &lt;cstring&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;ctime&gt;<br><br>using namespace std;<br><br>#define SZ(X) ((int)(X.size()))<br>const double pi=acos(-1.0);<br>template&lt;class T&gt; inline void checkmax(T &amp;a,T b){if(b&gt;a) a=b;}<br>template&lt;class T&gt; inline T sqr(T x){return x*x;}<br><br>class HouseProtection<br>{<br>public:<br>  int n,m;<br>  bool G[50][50];<br>  int p[50];<br>  bool visited[50];<br>  bool find(int v)<br>  {<br>    for (int i=0;i&lt;m;i++) if (G[v][i] &amp;&amp; !visited[i])<br>    {<br>      visited[i]=true;<br>      if (p[i]&lt;0 || find(p[i])) <br>      {<br>        p[i]=v;<br>        return true;<br>      }<br>    }<br>    return false;<br>  }<br>  int solve(vector&lt;int&gt; X1,vector&lt;int&gt; Y1,vector&lt;int&gt; X2,vector&lt;int&gt; Y2,double R)<br>  {<br>    for (int i=0;i&lt;n;i++) for (int j=0;j&lt;m;j++)<br>      G[i][j]=(sqr(X1[i]-X2[j])+sqr(Y1[i]-Y2[j])&lt;=sqr(R+R));<br>    int result=n+m;<br>    memset(p,255,sizeof(p));<br>    for (int i=0;i&lt;n;i++)<br>    {<br>      memset(visited,false,sizeof(visited));<br>      if (find(i)) result--;<br>    }<br>    return result;<br>  }<br>  double safetyFactor(vector &lt;int&gt; X1, vector &lt;int&gt; Y1, vector &lt;int&gt; X2, vector &lt;int&gt; Y2, int R)<br>  {<br>    n=SZ(X1);<br>    m=SZ(X2);<br>    double result=0;<br>    for (int cnt=1;cnt&lt;=n+m;cnt++)<br>    {<br>      double H=0,T=R;<br>      for (int step=0;step&lt;100;step++)<br>      {<br>        double M=(H+T)/2.0;<br>        if (solve(X1,Y1,X2,Y2,M)&gt;=cnt) H=M;<br>        else T=M;<br>      }<br>      checkmax(result,(double)cnt*sqr(H));<br>    }<br>    return result*pi;<br>  }<br>};<br></td>