<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br><br>public class ReversalChain {<br>    int[, , ,] best;<br>    string a;<br>    string b;<br>    int n;<br><br>  public int minReversal(string init, string goal) {<br>        n = init.Length;<br>        a = init;<br>        b = goal;<br>        best = new int[n + 1, n + 1, n + 1, 2];<br>        int z = get(0, 0, n, 0);<br>        if (z &lt; 0)<br>            return -1;<br>        else<br>            return z - 1;<br>  }<br><br>    private int get(int pa, int pb, int len, int rev)<br>    {<br>        if (len == 0)<br>            return 1;<br>        int z = best[pa, pb, len, rev];<br>        if (z != 0)<br>            return z;<br>        for (int r = 0; r &lt; 2; ++r)<br>        {<br>            int res = int.MaxValue;<br>            for (int cr = 0; cr &lt; 2; ++cr)<br>            {<br>                int nr = (r + cr) &amp; 1;<br>                {<br>                    bool ok;<br>                    int npa;<br>                    if (nr == 0)<br>                    {<br>                        ok = a[pa] == b[pb];<br>                        npa = pa + 1;<br>                    }<br>                    else<br>                    {<br>                        ok = a[pa + len - 1] == b[pb];<br>                        npa = pa;<br>                    }<br>                    if (ok)<br>                    {<br>                        int cur = get(npa, pb + 1, len - 1, nr);<br>                        if (cur &gt;= 0)<br>                            res = Math.Min(res, cur + cr);<br>                    }<br>                }<br>                {<br>                    bool ok;<br>                    int npa;<br>                    if (nr == 0)<br>                    {<br>                        ok = a[pa + len - 1] == b[pb + len - 1];<br>                        npa = pa;<br>                    }<br>                    else<br>                    {<br>                        ok = a[pa] == b[pb + len - 1];<br>                        npa = pa + 1;<br>                    }<br>                    if (ok)<br>                    {<br>                        int cur = get(npa, pb, len - 1, nr);<br>                        if (cur &gt;= 0)<br>                            res = Math.Min(res, cur + cr);<br>                    }<br>                }<br>            }<br>            if (res == int.MaxValue)<br>                best[pa, pb, len, r] = -1;<br>            else<br>                best[pa, pb, len, r] = res;<br>        }<br>        return best[pa, pb, len, rev];<br>    }<br><br><br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003] [modified for C# by Petr]<br>// Powered by CodeProcessor<br></td>