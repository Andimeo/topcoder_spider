<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>import java.util.regex.*;<br>import java.text.*;<br>import java.math.*;<br> <br>import static java.lang.Math.*;<br> <br> <br>public class ShadowArea<br>{<br>  static class Vector implements Comparable&lt;Vector&gt; {<br>    double x, y;<br>    <br>    Vector(double x, double y) {<br>      this.x = x;<br>      this.y = y;<br>    }<br>    <br>    Vector sub(Vector b) {<br>      return new Vector(x - b.x, y - b.y);<br>    }<br>    <br>    Vector add(Vector b) {<br>      return new Vector(x + b.x, y + b.y);<br>    }<br>    <br>    Vector mul(double b) {<br>      return new Vector(x * b, y * b);<br>    }<br>    <br>    Vector rot() {<br>      return new Vector(y, -x);<br>    }<br>    <br>    double len() {<br>      return Math.sqrt(x * x + y * y);<br>    }<br>    <br>    public String toString() {<br>      return "(" + x + "," + y + ")";<br>    }<br> <br>    public Vector norm() {<br>      return mul(1.0 / len());<br>    }<br>    <br>    public int compareTo(Vector o) {<br>      boolean u = cmp(y, 0) &gt; 0 || cmp(y, 0) == 0 &amp;&amp; cmp(x, 0) &gt; 0;<br>      boolean ou = cmp(o.y, 0) &gt; 0 || cmp(o.y, 0) == 0 &amp;&amp; cmp(o.x, 0) &gt; 0;<br>      if (u != ou) {<br>        return u ? -1 : 1;<br>      }<br>      return -cmp(vMul(this, o), 0);<br>    }<br>  }<br>  <br>  final static double EPS = 1e-8;<br>  <br>  static int cmp(double a, double b) {<br>    if (abs(a - b) &lt; EPS) {<br>      return 0;<br>    }<br>    return a &lt; b ? -1 : 1;<br>  }<br>  <br>  static double sMul(Vector a, Vector b) {<br>    return a.x * b.x + a.y * b.y;<br>  }<br>  <br>  static double vMul(Vector a, Vector b) {<br>    return a.x * b.y - a.y * b.x;<br>  }<br>  <br>  static class Seg implements Comparable&lt;Seg&gt; {<br>    Vector a, b;<br>    <br>    Seg(Vector a, Vector b) {<br>      this.a = a;<br>      this.b = b;<br>      if (a.compareTo(b) &gt; 0) {<br>        this.b = a;<br>        this.a = b;<br>      }<br>    }<br>    <br>    public int compareTo(Seg o) {<br>      if (cmp(dist(v0), o.dist(v0)) == 0) {<br>        return cmp(vMul(b.sub(a), o.b.sub(o.a)), 0);<br>      }<br>      return cmp(dist(v0), o.dist(v0));<br>    }<br>    <br>    Vector isect(Vector v) {<br>      Vector p = isect2(a, b, new Vector(0.0, 0.0), v);<br>      return p;<br>    }<br>    <br>    double dist(Vector v) {<br>      return isect(v).len();<br>    }<br>    <br>    public String toString() {<br>      return a + "-" + b;<br>    }<br>  }<br>  <br>  static class Event implements Comparable&lt;Event&gt; {<br>    Vector p;<br>    boolean add;<br>    Seg s;<br>    <br>    Event(Vector p, boolean add, Seg s) {<br>      this.p = p;<br>      this.add = add;<br>      this.s = s;<br>    }<br>    <br>    public int compareTo(Event o) {<br>      int cmp = p.compareTo(o.p);<br>      if (cmp == 0) {<br>        return add == o.add ? 0 : add ? 1 : -1;<br>      }<br>      return cmp;<br>    }<br>  }<br>  <br>  double ans = 0.0;<br>  <br>  private static Vector isect2(Vector a1, Vector b1, Vector a2, Vector b2) {<br>    Vector v1 = b1.sub(a1);<br>    Vector v2 = b2.sub(a2);<br>    double det = vMul(v1, v2);<br>    if (cmp(det, 0) == 0) {<br>      return null;<br>    }<br>    double t1 = vMul(a2.sub(a1), v2) / det;<br>    return a1.add(v1.mul(t1));<br>  }<br>  <br>  static Vector v0 = null;<br>  <br>  ArrayList&lt;Event&gt; evs = new ArrayList&lt;Event&gt;();<br>  ArrayList&lt;Seg&gt; segs = new ArrayList&lt;Seg&gt;();<br>  <br>  public double area(String[] room)<br>  {<br>    Vector c = null;<br>    for (int i = 0; i &lt; room.length; ++i) {<br>      for (int j = 0; j &lt; room[i].length(); ++j) {<br>        if (room[i].charAt(j) == '*') {<br>          c = new Vector(i + 0.5, j + 0.5);<br>        }<br>      }<br>    }<br>    add(new Seg(new Vector(0, 0).sub(c), new Vector(room.length, 0).sub(c)));<br>    add(new Seg(new Vector(room.length, 0).sub(c), new Vector(room.length, room[0].length()).sub(c)));<br>    add(new Seg(new Vector(room.length, room[0].length()).sub(c), new Vector(0, room[0].length()).sub(c)));<br>    add(new Seg(new Vector(0, room[0].length()).sub(c), new Vector(0, 0).sub(c)));<br>    int count = 0;<br>    for (int i = 0; i &lt; room.length; ++i) {<br>      for (int j = 0; j &lt; room[i].length(); ++j) {<br>        if (room[i].charAt(j) == '#') {<br>          add(new Seg(new Vector(i, j).sub(c), new Vector(i + 1, j).sub(c)));<br>          add(new Seg(new Vector(i + 1, j).sub(c), new Vector(i + 1, j + 1).sub(c)));<br>          add(new Seg(new Vector(i + 1, j + 1).sub(c), new Vector(i, j + 1).sub(c)));<br>          add(new Seg(new Vector(i, j + 1).sub(c), new Vector(i, j).sub(c)));<br>          ++count;<br>        }<br>      }<br>    }<br>    Collections.sort(evs);<br>    Vector last = new Vector(1.0, 0.0);<br>    for (Event e : evs) {<br>      inc(last, e.p);<br>      if (e.add) {<br>        segs.add(e.s);<br>      } else {<br>        segs.remove(e.s);<br>      }<br>      last = e.p;<br>    }<br>    inc(last, new Vector(1.0, 0.0));<br>    return room.length * room[0].length() - ans / 2.0 - count;<br>  }<br>  <br>  void inc(Vector u, Vector v) {<br>    v0 = u;<br>    double min = Double.POSITIVE_INFINITY;<br>    //System.out.println(segs + " " + u + " " + v);<br>    for (Seg s : segs) {<br>      Vector vec0 = s.isect(u);<br>      Vector vec1 = s.isect(v);<br>      if (vec0 != null &amp;&amp; vec1 != null) {<br>        min = Math.min(min, vMul(vec0, vec1));<br>      }<br>    }<br>    //System.out.println(min);<br>    if (!Double.isInfinite(min)) {<br>      ans += min;<br>    }<br>  }<br>  <br>  void add(Seg s) {<br>    if (s.a.compareTo(s.b) == 0) {<br>      return;<br>    }<br>    if (cmp(s.a.y, 0) != cmp(s.b.y, 0) &amp;&amp; cmp(s.a.y, 0) &gt;= 0 &amp;&amp; cmp(s.isect(new Vector(1.0, 0.0)).x, 0) &gt; 0) {<br>      segs.add(s);<br>      evs.add(new Event(s.a, false, s));<br>      evs.add(new Event(s.b, true, s));<br>      return;<br>    }<br>    evs.add(new Event(s.a, true, s));<br>    evs.add(new Event(s.b, false, s));<br>  }<br>  <br> <br>}<br>//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!<br></td>