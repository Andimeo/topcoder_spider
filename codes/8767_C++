<td class="problemText" colspan="8" valign="middle" align="left">
            // This code is dedicated to ryuwonha<br>#include&lt;string&gt;<br>#include&lt;vector&gt;<br>#include&lt;algorithm&gt;<br><br>using namespace std;<br><br>typedef vector&lt;int&gt; vi;<br>typedef vector&lt;string&gt; vs;<br><br>#define INF 1000000000<br><br>int n, m;<br><br>int a[55][55];<br>int sx[3], sy[3], ex[3], ey[3];<br>int D[3][55][55], C[3][55][55];<br>int qx[5555], qy[5555], head, tail;<br>int dx[4] = {-1, 1, 0, 0};<br>int dy[4] = { 0, 0,-1, 1};<br>int val[3];<br>int cant[3][3][5555];<br>int ret = INF;<br><br>int dT[3][3];<br><br>void Trace(int l0, int l1, int l2, int v)<br>{<br>  int l3;<br>  <br>  if(v &lt; 0) return;<br>  if(C[l0][l1][l2]) return;<br>  if(D[l0][l1][l2] != v) return;<br>  C[l0][l1][l2] = 1;<br>//  printf("(%d,%d,%d)",l0,l1,l2);<br>  <br>  for(l3=0;l3&lt;4;l3++)<br>    Trace(l0, l1+dx[l3], l2+dy[l3], v-1);<br>}<br><br>void Go(int l1, int l2, int l3)<br>{<br>//  int t1 = 0;<br>  int t2, t3;<br>  if(ret &lt;= val[l1]) return;<br>  for(t2=0;t2&lt;=2500;t2++)<br>  {<br>    if(ret &lt;= val[l2] + t2) return;<br>    if(cant[l1][l2][t2] == 0)<br>    {<br>      for(t3=t2;t3&lt;=5000;t3++)<br>      {<br>        if(ret &lt;= val[l3] + t3) return;<br>        if(cant[l1][l3][t3] == 0 &amp;&amp; cant[l2][l3][t3-t2] == 0)<br>        {<br>          int tt = val[l1];<br>          if(tt &lt; val[l2] + t2) tt = val[l2] + t2;<br>          if(tt &lt; val[l3] + t3) tt = val[l3] + t3;<br>//          printf("%d, %d, %d %d %d %d\n",t2,t3,val[l1],val[l2],val[l3],tt);<br><br>          if(tt &lt; ret) ret = tt;<br>        }<br>      }<br>    }<br>  }<br>}<br><br>struct IncompatibleMice<br>{<br>  int totalTime(vector&lt;string&gt; a_)<br>  {<br>    int l0, l1, l2, l3, l4, l5, t1, t2;<br>    <br>    n = a_.size();<br>    m = a_[0].size();<br>    for(l1=0;l1&lt;n;l1++) for(l2=0;l2&lt;m;l2++)<br>    {<br>      if(a_[l1][l2] == '#')<br>        a[l1+1][l2+1] = -1;<br>      else<br>      {<br>        a[l1+1][l2+1] = 0;<br>        if(a_[l1][l2] == 'a' || a_[l1][l2] == 'b' || a_[l1][l2] == 'c')<br>        {<br>          sx[a_[l1][l2] - 'a'] = l1 + 1;<br>          sy[a_[l1][l2] - 'a'] = l2 + 1;<br>        }<br>        if(a_[l1][l2] == 'A' || a_[l1][l2] == 'B' || a_[l1][l2] == 'C')<br>        {<br>          ex[a_[l1][l2] - 'A'] = l1 + 1;<br>          ey[a_[l1][l2] - 'A'] = l2 + 1;<br>        }<br>      }<br>    }<br>    for(l1=0;l1&lt;=n;l1++) a[l1][0] = a[l1][m+1] = -1;<br>    for(l1=0;l1&lt;=m;l1++) a[0][l1] = a[n+1][l1] = -1;<br>    <br>    for(l0=0;l0&lt;3;l0++)<br>    {<br>      for(l1=0;l1&lt;=n+1;l1++) for(l2=0;l2&lt;=m+1;l2++)<br>      {<br>        D[l0][l1][l2] = a[l1][l2];<br>        if(a[l1][l2] == 0)<br>          D[l0][l1][l2] = INF;<br>      }<br>      D[l0][sx[l0]][sy[l0]] = 0;<br>      qx[0] = sx[l0];<br>      qy[0] = sy[l0];<br>      head = 0;<br>      tail = 1;<br>      while(head &lt; tail)<br>      {<br>        l1 = qx[head];<br>        l2 = qy[head];<br>        head++;<br>        for(l3=0;l3&lt;4;l3++)<br>        {<br>          t1 = l1 + dx[l3];<br>          t2 = l2 + dy[l3];<br>          if(D[l0][t1][t2] &gt; D[l0][l1][l2] + 1)<br>          {<br>            D[l0][t1][t2] = D[l0][l1][l2] + 1;<br>            qx[tail] = t1;<br>            qy[tail] = t2;<br>            tail++;<br>          }<br>        }<br>      }<br>      if(D[l0][ex[l0]][ey[l0]] == INF) return -1;<br>      Trace(l0, ex[l0], ey[l0], D[l0][ex[l0]][ey[l0]]);<br>      val[l0] = D[l0][ex[l0]][ey[l0]];<br>    }<br>    <br>    for(l1=0;l1&lt;3;l1++)<br>    {<br>      for(l2=0;l2&lt;3;l2++)<br>      {<br>        if(l1 == l2) continue;<br>        <br>        for(l3=1;l3&lt;=n;l3++)<br>        {<br>          for(l4=1;l4&lt;=m;l4++)<br>          {<br>            if(C[l1][l3][l4] &amp;&amp; C[l2][l3][l4])<br>            {<br>              int diff = D[l1][l3][l4] - D[l2][l3][l4];<br>              if(diff &gt;=0 ) cant[l1][l2][diff] = 1;<br>//              printf("(%d,%d,%d)\n",l1,l2,diff);<br>              <br>              for(l5=0;l5&lt;4;l5++)<br>              {<br>//                if(l3 == 1 &amp;&amp; l4 == 6) printf("~_~\n");<br>                t1 = l3 + dx[l5];<br>                t2 = l4 + dy[l5];<br>//                if(l3 == 1 &amp;&amp; l4 == 6) printf("[%d, %d]\n",t1,t2);<br>                if(C[l1][t1][t2] &amp;&amp; C[l2][t1][t2])<br>                {<br>//                  if(l3 == 1 &amp;&amp; l4 == 6) printf("@_@ %d %d %d %d\n",D[l1][l3][l4],D[l1][t1][t2],D[l2][l3][l4],D[l2][t1][t2]);<br>                  if(D[l1][l3][l4] + 1 == D[l1][t1][t2] &amp;&amp; D[l2][l3][l4] == D[l2][t1][t2] + 1)<br>                  {<br>                    diff = D[l1][l3][l4] - D[l2][t1][t2];<br>                    if(diff &gt;= 0) cant[l1][l2][diff] = 1;<br>//                    printf("!(%d,%d,%d)\n",l1,l2,diff);<br>                  }<br>                }<br>              }<br>            }<br>          }<br>        }<br>      }<br>    }<br>    /*<br>    for(l1=0;l1&lt;3;l1++)<br>    {<br>      printf("[%d]\n",l1);<br>      for(l2=1;l2&lt;=n;l2++) for(l3=1;l3&lt;=m;l3++) printf("%d ",D[l1][l2][l3]);<br>    }<br>    */<br><br>    Go(0, 1, 2);<br>    Go(0, 2, 1);<br>    Go(1, 0, 2);<br>    Go(1, 2, 0);<br>    Go(2, 0, 1);<br>    Go(2, 1, 0);<br>    <br>    if(ret == INF) ret = -1;<br>    <br>    return ret;<br>  }<br>};<br></td>