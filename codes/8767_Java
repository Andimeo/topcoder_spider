<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br> <br> <br>public class IncompatibleMice {<br>  final static int D = 6000;<br>  <br>  int[] dx = new int[]{-1, 0, 1, 0};<br>  int[] dy = new int[]{0, -1, 0, 1};<br>  <br>  void bfs(boolean[][] lab, int sx, int sy, int[][] d) {<br>    int m = lab.length;<br>    int n = lab[0].length;<br>    int[] qx = new int[m * n];<br>    int[] qy = new int[m * n];<br>    int h = 0;<br>    int t = 1;<br>    qx[h] = sx;<br>    qy[h] = sy;<br>    for (int i = 0; i &lt; m; i++) {<br>      Arrays.fill(d[i], -1);<br>    }<br>    d[sx][sy] = 0;<br>    while (h &lt; t) {<br>      int x = qx[h];<br>      int y = qy[h];<br>      h++;<br>      for (int i = 0; i &lt; 4; i++) {<br>        int nx = x + dx[i];<br>        int ny = y + dy[i];<br>        if (!lab[nx][ny] || (d[nx][ny] != -1)) {<br>          continue;<br>        }<br>        d[nx][ny] = d[x][y] + 1;<br>        qx[t] = nx;<br>        qy[t] = ny;<br>        t++;<br>      }<br>    }<br>  }<br>  <br>  public int totalTime(String[] maze) {<br>    int m = maze.length + 2;<br>    int n = maze[0].length() + 2;<br>    int[] sx = new int[3];<br>    int[] sy = new int[3];<br>    int[] tx = new int[3];<br>    int[] ty = new int[3];<br>    <br>    boolean[][] lab = new boolean[m][n];<br>    for (int i = 0; i &lt; m - 2; i++) {<br>      for (int j = 0; j &lt; n - 2; j++) {<br>        char c = maze[i].charAt(j);<br>        if (c != '#') {<br>          lab[i + 1][j + 1] = true;<br>        }<br>        if (c &gt;= 'a' &amp;&amp; c &lt;= 'c') {<br>          sx[c - 'a'] = i + 1;<br>          sy[c - 'a'] = j + 1;<br>        }<br>        if (c &gt;= 'A' &amp;&amp; c &lt;= 'C') {<br>          tx[c - 'A'] = i + 1;<br>          ty[c - 'A'] = j + 1;<br>        }<br>      }<br>    }<br>    <br>    int[][][] sd = new int[3][m][n];<br>    int[][][] td = new int[3][m][n];<br>    <br>    for (int i = 0; i &lt; 3; i++) {<br>      bfs(lab, sx[i], sy[i], sd[i]);<br>      bfs(lab, tx[i], ty[i], td[i]);<br>    }<br>    <br>    int[] tm = new int[3];<br>    for (int i = 0; i &lt; 3; i++) {<br>      tm[i] = sd[i][tx[i]][ty[i]];<br>      if (tm[i] == -1) {<br>        return -1;<br>      } <br>    }<br>    <br>    int best = Integer.MAX_VALUE;<br>    <br>    boolean[][][] forb = new boolean[3][3][12001];<br>    <br>    for (int i = 0; i &lt; 3; i++) {<br>      for (int j = i + 1; j &lt; 3; j++) {<br>        for (int x = 0; x &lt; m; x++) {<br>          for (int y = 0; y &lt; n; y++) {<br>            if (sd[i][x][y] == -1 || sd[j][x][y] == -1) {<br>              continue;<br>            }<br>            if (sd[i][x][y] + td[i][x][y] != tm[i]) {<br>              continue;<br>            }<br>            if (sd[j][x][y] + td[j][x][y] != tm[j]) {<br>              continue;<br>            }<br>            int d = sd[i][x][y] - sd[j][x][y];<br>            forb[i][j][d + D] = true;<br>//            System.out.println(i + " " + j + " " + d);<br>            <br>            for (int k = 0; k &lt; 4; k++) {<br>              int nx = x + dx[k];<br>              int ny = y + dy[k];<br>              if (sd[i][nx][ny] == -1 || sd[j][nx][ny] == -1) {<br>                continue;<br>              }<br>              if (sd[i][nx][ny] + td[i][nx][ny] != tm[i]) {<br>                continue;<br>              }<br>              if (sd[j][nx][ny] + td[j][nx][ny] != tm[j]) {<br>                continue;<br>              }<br>              if (sd[i][nx][ny] &gt; sd[i][x][y]) {<br>                if (sd[j][nx][ny] &gt; sd[j][x][y]) {<br>                  continue;<br>                }<br>                d = sd[i][x][y] - sd[j][nx][ny];<br>                forb[i][j][d + D] = true;<br>//                System.out.println(i + " " + j + " " + d);<br>              }<br>              if (sd[i][nx][ny] &lt; sd[i][x][y]) {<br>                if (sd[j][nx][ny] &lt; sd[j][x][y]) {<br>                  continue;<br>                }<br>                d = sd[i][x][y] - sd[j][nx][ny];<br>                forb[i][j][d + D] = true;<br>//                System.out.println(i + " " + j + " " + d);<br>              }<br>            }<br>          }<br>        }<br>      }<br>    }<br>    <br>    for (int d1 = -3000; d1 &lt; 3000; d1++) {<br>      for (int d2 = -3000; d2 &lt; 3000; d2++) {<br>        if (!forb[0][1][d1 + D] &amp;&amp; !forb[0][2][d2 + D] &amp;&amp; !forb[1][2][d2 - d1 + D]) {<br>          int tmin = Math.min(0, Math.min(d1, d2));<br>          int tmax = Math.max(tm[0], Math.max(d1 + tm[1], d2 + tm[2]));<br>          if (tmax - tmin &lt; best) {<br>            best = tmax - tmin;<br>          }<br>        }<br>      }<br>    }<br>    <br>    return best;<br>  }<br>}<br> <br>// Powered by PopsEdit<br></td>