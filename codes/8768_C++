<td class="problemText" colspan="8" valign="middle" align="left">
            // {{{<br>#include &lt;algorithm&gt;<br>#include &lt;cctype&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;iostream&gt;<br>#include &lt;sstream&gt;<br>#include &lt;utility&gt;<br>#include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;stack&gt;<br>#include &lt;queue&gt;<br>using namespace std;<br>#define REP(i,n) for(int i=0;i&lt;(n);++i)<br>#define FOR(i,a,b) for(int i=(a);i&lt;=(b);++i)<br>#define FORD(i,a,b) for(int i=(a);i&gt;=(b);--i)<br>#define FOREACH(it,c) for(typeof((c).begin()) it=(c).begin();it!=(c).end();++it)<br>#define ALL(c) (c).begin(),(c).end()<br>#define debug(x) cerr &lt;&lt; #x &lt;&lt; " = " &lt;&lt; (x) &lt;&lt; "\n";<br>#define debugv(v) cerr &lt;&lt; #v &lt;&lt; " = "; FOREACH(it,v) cerr &lt;&lt; *it &lt;&lt; ","; cerr &lt;&lt; "\n";<br>typedef long long LL; typedef vector&lt;int&gt; VI;<br>typedef vector&lt;string&gt; VS; typedef long double ld;<br>const int INF = 1000000000;<br>const int INFLL = LL(INF) * LL(INF);<br>template&lt;class T&gt; inline int size(const T&amp;c) { return c.size(); }<br>template&lt;class T&gt; string show(T x) { ostringstream o; o&lt;&lt;x; return o.str(); }<br>template&lt;class T&gt; T parse(string s) { istringstream i(s); T x; i&gt;&gt;x; return x; }<br>VS split(string s, string del=" ") {<br>  s += del[0];<br>  string w; VS res;<br>  FOREACH(it,s) {<br>    if(find(ALL(del),*it)==del.end()) w += *it;<br>    else {<br>      if(w!="") res.push_back(w);<br>      w="";<br>    }<br>  }<br>  return res;<br>}<br>VI s2vi(string s, string del=" ") {<br>  VS v = split(s,del);<br>  VI res;<br>  FOREACH(it,v) res.push_back(parse&lt;int&gt;(*it));<br>  return res;<br>}<br>string mergeInput(VS s) {<br>  string res; FOREACH(it,s) res+=*it; return res;<br>}<br><br>// }}}<br><br>struct Point {<br>  int x,y;<br>  Point() {}<br>  Point(int x,int y):x(x),y(y) {}<br>};<br><br>inline Point operator+(const Point&amp;a, const Point&amp;b) {<br>  return Point(a.x+b.x, a.y+b.y);<br>}<br><br>inline Point operator-(const Point&amp;a, const Point&amp;b) {<br>  return Point(a.x-b.x, a.y-b.y);<br>}<br><br>inline int operator%(const Point&amp;a, const Point&amp;b) {<br>  return a.x*b.y - a.y*b.x;<br>}<br><br>inline bool operator&lt;(const Point&amp;a, const Point&amp;b) {<br>  return a.x&lt;b.x || a.x==b.x &amp;&amp; a.y&lt;b.y;<br>}<br><br>int nn;<br>vector&lt;Point&gt; points;<br>VI hulls[1&lt;&lt;15];<br><br>int nbits(int x) {<br>  int res=0; while(x) {<br>    res ++; x&amp;=(x-1);<br>  }<br>  return res;<br>}<br><br>VI calcHull(int s) {<br>  VI h; h.reserve(nn+3);<br>  int st=0;<br>  FOR(i,0,nn-1) if(s&amp;(1&lt;&lt;i)) {<br>    Point p = points[i];<br>    while(size(h)-st&gt;=2 &amp;&amp; (points[h[size(h)-1]]-points[h[size(h)-2]])%<br>        (p-points[h[size(h)-2]])&lt;=0)<br>      h.pop_back();<br>    h.push_back(i);<br>  }<br>  h.pop_back();<br>  st = size(h);<br>  FORD(i,nn-1,0) if(s&amp;(1&lt;&lt;i)) {<br>    Point p = points[i];<br>    while(size(h)-st&gt;=2 &amp;&amp; (points[h[size(h)-1]]-points[h[size(h)-2]])%<br>        (p-points[h[size(h)-2]])&lt;=0)<br>      h.pop_back();<br>    h.push_back(i);<br>  }<br>  h.pop_back();<br>  if(size(h)==nbits(s)) return h; else return VI();<br>}<br><br>LL MOD;<br><br>int calc(int s) {<br>  if(!hulls[s].empty()) return 1;<br>  vector&lt;LL&gt; polys;<br>  static int tab[20];<br>  REP(a,nn) if(s&amp;(1&lt;&lt;a)) REP(b,a) if(s&amp;(1&lt;&lt;b)) {<br>    int L=0,R=0;<br>    REP(i,nn) if(s&amp;(1&lt;&lt;i)) {<br>      int v = (points[b]-points[a]) % (points[i]-points[a]);<br>      if(v&gt;0) L |= 1&lt;&lt;i;<br>      if(v&lt;0) R |= 1&lt;&lt;i;<br>    }<br>    if(!L || !R) continue;<br>    L |= (1&lt;&lt;a) | (1&lt;&lt;b);<br>    R |= (1&lt;&lt;a) | (1&lt;&lt;b);<br>    VI &amp;hL = hulls[L];<br>    VI &amp;hR = hulls[R];<br>    if(hL.empty() || hR.empty()) continue;<br>    int p = 0;<br>    while(hL[p]!=b) ++p;<br>    int ntab=0;<br>    while(hL[p]!=a) {<br>      tab[ntab++] = hL[p];<br>      p = (p+1)%size(hL);<br>    }<br>    p = 0;<br>    while(hR[p]!=a) ++p;<br>    while(hR[p]!=b) {<br>      tab[ntab++] = hR[p];<br>      p = (p+1)%size(hR);<br>    }<br>    int sm = 0;<br>    REP(i,ntab) if(tab[i]&lt;tab[sm]) sm=i;<br>    rotate(tab, tab+sm, tab+ntab);<br>    LL hh = 0;<br>    REP(i,ntab) {<br>    //  cerr &lt;&lt; tab[i] &lt;&lt; " ";<br>      hh = (hh*nn + tab[i])%MOD;<br>    }<br>    //cerr &lt;&lt; "\n";<br>    polys.push_back(hh);<br>  }<br>  sort(polys.begin(), polys.end());<br>  return unique(ALL(polys))-polys.begin();<br>}<br><br>int calc2(int s) {<br>  int res = 0;<br>  REP(i,3) {<br>    MOD = 123456789123456LL + rand();<br>    res = max(res, calc(s));<br>  }<br>  return res;<br>}<br><br>struct AlmostConvexPolygons {<br>  int count(vector &lt;int&gt; x, vector &lt;int&gt; y) {<br>    int n = size(x);<br>    nn = n;<br>    REP(i,n) points.push_back(Point(x[i],y[i]));<br>    sort(points.begin(), points.end());<br>    REP(s,1&lt;&lt;n) if(s) hulls[s] = calcHull(s);<br>    int res = n * (n-1) * (n-2) / 6;<br>    REP(s,1&lt;&lt;n) if(nbits(s)&gt;3) {<br>      res += calc2(s);<br>    }<br>    return res;<br>  }<br>};<br><br><br><br>// Powered by FileEdit<br></td>