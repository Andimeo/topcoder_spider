<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Text;<br>using System.Text.RegularExpressions;<br>using System.Collections;<br><br>public class RepresentNumber {<br>    public bool Check(int[] digits)<br>    {<br>        int sum = 0;<br>        for (int i = 0; i &lt; digits.Length; i++)<br>            sum += digits[i];<br>        for (int i = 0; i &lt; digits.Length; i++)<br>            if (digits[i] - 1 &gt; sum / 2)<br>                return false;<br>        return true;<br>    }<br><br>    public string FormResult(int[] a, int n)<br>    {<br>        string result = "";<br>        for (int i = 0; i &lt; n; i++)<br>            result += a[i];<br>        return result;<br>    }<br><br>    public int GetBestDigit(int[] digits, int p)<br>    {<br>        int sum = 0;<br>        for (int i = 0; i &lt; 10; i++)<br>            sum += digits[i];<br>        for (int i = 9; i &gt;= 0; i--)<br>            if (digits[i] - 1 == sum / 2 &amp;&amp; i != p)<br>            {<br>                digits[i]--;<br>                return i;<br>            }<br>        for (int i = 9; i &gt;= 0; i--)<br>        {<br>            digits[i]--;<br>            if (Check(digits) &amp;&amp; digits[i] &gt;= 0 &amp;&amp; i != p)<br>            {<br>                return i;<br>            }<br>            else<br>                digits[i]++;<br>        }<br>        return -1;<br>    }<br><br>    public string maximumNumber(int[] digits)<br>    {<br>        int n = 0;<br>        for (int i = 0; i &lt; digits.Length; i++)<br>            n += digits[i];<br>        while (digits[0] - 1 &gt;= n / 2)<br>        {<br>            digits[0]--;<br>            n--;<br>        }<br>        for (int i = 1; i &lt; digits.Length; i++)<br>            while (digits[i] - 1 &gt; n / 2)<br>            {<br>                digits[i]--;<br>                n--;<br>            }<br>        int[] result = new int[n];<br>        if (n == 0)<br>            return "0";<br>        result[0] = GetBestDigit(digits, 0);<br>        if (result[0] == -1)<br>            return "0";<br>        for (int i = 1; i &lt; n; i++)<br>        {<br>            int d = GetBestDigit(digits, result[i - 1]);<br>            if (d == -1)<br>                return FormResult(result, i);<br>            result[i] = d;<br>        }<br>        return FormResult(result, n);<br>    }<br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by CodeProcessor<br></td>