<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;iostream&gt;<br>#include &lt;sstream&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cmath&gt;<br>#include &lt;memory&gt;<br>#include &lt;cctype&gt;<br>#include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;list&gt;<br>#include &lt;queue&gt;<br>#include &lt;deque&gt;<br>#include &lt;stack&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;algorithm&gt;<br>using namespace std;<br><br>typedef long long Int;<br>typedef pair&lt;int,int&gt; PII;<br>typedef vector&lt;int&gt; VInt;<br><br>#define FOR(i, a, b) for(i = (a); i &lt; (b); ++i)<br>#define RFOR(i, a, b) for(i = (a) - 1; i &gt;= (b); --i)<br>#define CLEAR(a, b) memset(a, b, sizeof(a))<br>#define SIZE(a) int((a).size()) <br>#define ALL(a) (a).begin(),(a).end() <br>#define PB push_back<br>#define MP make_pair<br><br>int F(VInt&amp; C, int prev)<br>{<br>  int sum = 0;<br>  int pos = 0;<br>  int i;<br>  FOR(i, 0, 10)<br>  {<br>    sum += C[i];<br>    if(C[pos] &lt; C[i])<br>      pos = i;<br>  }<br><br>  if(C[pos] + C[pos] &lt;= sum)<br>    return sum;<br><br>  if(pos != prev)<br>    return (sum - C[pos]) + (sum - C[pos]) + 1;<br><br>  return (sum - C[pos]) + (sum - C[pos]);<br>}<br><br>class RepresentNumber {<br>  public:<br>  string maximumNumber(vector &lt;int&gt; C) <br>  {<br>    int sum = 0;<br>    int i, j;<br>    FOR(i, 0, 10)<br>      sum += C[i];<br>    if(C[0] == sum)<br>      return "0";<br><br>    string res;<br>    int prev = 0;<br>    int len = F(C, prev);<br>    FOR(i, 0, sum)<br>    {<br>      RFOR(j, 10, 0)<br>        if(j != prev &amp;&amp; C[j] != 0)<br>        {<br>          --C[j];<br>          if(F(C, j) == len - i - 1)<br>          {<br>            res.PB('0' + j);<br>            prev = j;<br>            break;<br>          }<br><br>          ++C[j];<br>        }<br><br>      if(j &lt; 0)<br>        break;<br>    }<br><br>    return res;<br>  }<br><br>  <br><br>};<br><br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003]<br>// Powered by CodeProcessor<br></td>