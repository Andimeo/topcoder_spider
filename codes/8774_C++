<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;algorithm&gt;<br>#include &lt;cassert&gt;<br>#include &lt;cmath&gt;<br>#include &lt;complex&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;ctime&gt;<br>#include &lt;deque&gt;<br>#include &lt;iostream&gt;<br>#include &lt;queue&gt;<br>#include &lt;sstream&gt;<br>#include &lt;string&gt;<br>#include &lt;vector&gt;<br>using namespace std;<br><br>#define FR(i,a,b) for(int i=(a);i&lt;(b);++i)<br>#define FOR(i,n) FR(i,0,n)<br>#define FORI(i,v) FOR(i,(int)(v).size())<br>#define FORALL(i,v) for(typeof((v).end())i=(v).begin();i!=(v).end();++i)<br>#define BEND(v) (v).begin(),(v).end()<br>#define CLR(x,a) memset(x,a,sizeof(x))<br>#define MP make_pair<br>#define PB push_back<br>#define dump(x) cerr &lt;&lt; #x &lt;&lt; " = " &lt;&lt; (x) &lt;&lt; endl<br>typedef complex&lt;double&gt; cpx;<br>typedef long long ll; typedef long double ld;<br>#define X real()<br>#define Y imag()<br>#define A first<br>#define B second<br><br>const ld eps = 1e-10;<br>const ll inf = (1LL&lt;&lt;63)-1;<br><br>struct PerfectPowers {<br>ll A,B;<br>ll ans;<br>void doit(ll x, ll y) {<br>  if (x==y) return;<br>  if (x &lt; A || x &gt; B) return;<br>  if (y &lt; A || y &gt; B) return;<br>  ll dif = abs(x-y);<br>  if (dif &lt; ans) ans = dif;<br>}<br>long long nearestCouple(long long A, long long B) {<br>  ans = inf;<br>  this-&gt;A=A;this-&gt;B=B;<br>  vector&lt;ll&gt; big;<br><br>  for (int k=3; pow(2.0L, ld(k)) &lt;= B ; ++k) {<br>    for (ll m=2; pow(ld(m), ld(k)) &lt;= B; ++m) {<br>      ll what = 1;<br>      FOR(z,k) what *= m;<br>      if (what &lt; A) continue;<br>      assert(what &lt;= B);<br>      big.PB(what);<br>    }<br>  }<br>  sort(BEND(big));<br><br>  ll wee = ll(ceil(sqrt(ld(A))-eps) + 0.5);<br>  ll wee2 = wee+1;<br><br>  doit(wee*wee,wee2*wee2);<br><br>  FORI(i,big) if (i) doit(big[i-1], big[i]);<br><br>  FORI(i,big) {<br>    ll y = big[i];<br>    ll xrt = ll(ceil(sqrt(ld(y))-eps) + 0.5);<br>    for (ll d = -1; d &lt;= 1; ++d) doit((xrt+d)*(xrt+d), y);<br>  }<br><br>  return ans == inf ? -1 : ans;<br>}<br>};<br><br><br>// Powered by FileEdit<br></td>