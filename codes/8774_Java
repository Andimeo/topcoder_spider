<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>import java.io.*;<br>import java.math.*;<br>import static java.lang.Math.*;<br>import static java.util.Arrays.*;<br>public class PerfectPowers {<br>  public long nearestCouple(long A, long B) {<br>    long ret = Long.MAX_VALUE;<br>    long sq = (long)sqrt(A);<br>    if(sq*sq &lt; A) sq++;<br>    if((sq+1)*(sq+1) &lt;= B) ret = (sq+1)*(sq+1) - sq*sq;<br>    TreeSet&lt;Long&gt; nums = new TreeSet&lt;Long&gt;();<br>    for(long i = 2; i*i*i &lt;= B; i++){<br>      long sofar = i*i*i;<br>      while(sofar &lt;= B){<br>        if(sofar &gt;= A) nums.add(sofar);<br>        long tmp = sofar*i;<br>        if(tmp/i != sofar) break;<br>        sofar = tmp;<br>      }<br>    }<br>    long[] ns = new long[nums.size()];<br>    int at = 0;<br>    for(long n: nums) ns[at++] = n;<br>    <br>    for(int i = 0; i &lt; ns.length; i++){<br>      if(i != 0) ret = min(ret, ns[i]-ns[i-1]);<br>      long sqq = (long)sqrt(ns[i]);<br>      if(sqq*sqq &gt;= A &amp;&amp; sqq*sqq != ns[i]) ret = min(ret, ns[i]-sqq*sqq);<br>      sqq++;<br>      if(sqq*sqq &gt;= A &amp;&amp; sqq*sqq &lt;= B) ret = min(ret, sqq*sqq-ns[i]);<br>    }<br>    return ret == Long.MAX_VALUE ? -1 : ret;<br>  }<br>}<br> <br>// Powered by PopsEdit<br></td>