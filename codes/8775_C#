<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections.Generic;<br>using System.Text;<br><br>public class CraneSort {<br>    int res;<br>    string s;<br><br>    void process(string q) {<br>        for (int delta = -q.Length; delta &lt; q.Length; ++delta) {<br>            for (int spare = 0; spare &lt; 16; ++spare) {<br>              bool good = true;<br>              for (int block = 0; block &lt; 16; ++block) {<br>                  if ((block &amp; spare) != 0)<br>                      continue;<br>                  bool ok = false;<br>                  bool mismatch = false;<br>                  for (int i = 0; i &lt; s.Length; ++i) {<br>                      int c = s[i] - 'A';<br>                      if (((block &gt;&gt; c) &amp; 1) != 0) {<br>                          int j = i + delta;<br>                          if (j &lt; 0 || j &gt;= q.Length || (((block &gt;&gt; (q[j] - 'A')) &amp; 1) == 0)) {<br>                              ok = true;<br>                              break;<br>                          }<br>                          if (q[j] != s[i])<br>                              mismatch = true;<br>                      }<br>                  }<br>                  if (!ok &amp;&amp; mismatch) {<br>                      good = false;<br>                      break;<br>                  }<br>              }<br>              if (!good)<br>                  continue;<br><br>              int am = 0;<br>              for (int i = 0; i &lt; 4; ++i)<br>                  if (((spare &gt;&gt; i) &amp; 1) != 0)<br>                      ++am;<br>              am += s.Length;<br>              for (int i = 0; i &lt; s.Length; ++i) {<br>                  int j = i + delta;<br>                  if (j &gt;= 0 &amp;&amp; j &lt; q.Length &amp;&amp; s[i] == q[j])<br>                      --am;<br>              }<br>              res = Math.Min(res, am);<br>            }<br>        }<br>    }<br><br>    void rec(StringBuilder seq, bool[] was) {<br>        bool any = false;<br>        for (char ch = 'A'; ch &lt;= 'D'; ++ch) {<br>            if (!was[ch - 'A']) {<br>                any = true;<br>                was[ch - 'A'] = true;<br>                int cnt = 0;<br>                foreach (char ch1 in s)<br>                    if (ch1 == ch) {<br>                        ++cnt;<br>                        seq.Append(ch);<br>                    }<br>                rec(seq, was);<br>                seq.Remove(seq.Length - cnt, cnt);<br>                was[ch - 'A'] = false;<br>            }<br>        }<br>        if (!any) {<br>            process(seq.ToString());<br>        }<br>    }<br><br>    public int moves(string containers) {<br>        s = containers;<br>        res = int.MaxValue;<br>        bool[] was = new bool[4];<br>        rec(new StringBuilder(), was);<br>        return res;<br>    }<br>}<br><br><br>// Powered by FileEdit<br></td>