<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;stdio.h&gt;<br>#include &lt;ctype.h&gt;<br>using namespace std;<br><br>typedef long long ll;<br>typedef vector&lt;int&gt; vi;<br>typedef long double ld;<br>typedef vector&lt;long double&gt; vld;<br>typedef vector&lt;string&gt; vs;<br><br>#define Size(x) (int((x).size()))<br><br>#define LS &lt;<br>#define FOR(k,a,b) for(typeof(a) k = (a); k LS (b); k++)<br><br>vi parsevi(string s) {<br>  s += " ";<br>  int tmp = 0;<br>  vi res;<br>  FOR(k,0,Size(s)) if(s[k] == ' ') { res.push_back(tmp); tmp = 0; } else { tmp *= 10; tmp += s[k] - '0'; }<br>  return res;<br>  }<br><br>vs parsevs(string s) {<br>  s += " ";<br>  string tmp;<br>  vs res;<br>  FOR(k,0,Size(s)) if(s[k] == ' ') { res.push_back(tmp); tmp = ""; } else { tmp += s[k]; }<br>  return res;<br>  }<br><br>int ptab[5][5];<br><br>bool was[5];<br><br>void dfs(int at) {<br>  if(was[at]) return;<br>  was[at] = true;<br>  FOR(u,0,5) if(ptab[at][u]) dfs(u);<br>  }<br> <br>class CraneSort {<br>  public:<br>  int moves(string containers) {<br>    <br>    int N = Size(containers);<br><br>    int p[4];<br>    FOR(u,0,4) p[u] = u;<br>    int best = 99999999;<br>    <br>    int qty[4];<br>    FOR(q,0,4) qty[q] = 0;<br>    FOR(k,0,N) qty[containers[k] - 'A']++;<br>    <br>    FOR(mm,0,60) containers = "E" + containers + "E";<br><br>    do {<br>    FOR(push,0,120) { <br>      string gord = "";<br>      FOR(d,0,push) gord += "E";<br>      FOR(m,0,4) FOR(q,0,qty[p[m]]) {<br>        string s;<br>        s += ('A'+p[m]);<br>        gord += s;<br>        }<br>      FOR(d,push,120) gord += "E";<br><br>      FOR(a,0,5) FOR(b,0,5) ptab[a][b] = 0;<br>      <br>      FOR(c,0,Size(containers)) ptab[containers[c]-'A'][gord[c]-'A']++;<br>      FOR(u,0,5) was[u] = true;<br>      FOR(u,0,5) FOR(v,0,5) if(u != v &amp;&amp; ptab[u][v]) was[u] = false;<br>      <br>      dfs(4);<br>      <br>      int result = 0;<br>      <br>      FOR(u,0,5) if(!was[u]) { result += 1; dfs(u); }<br>      <br>      FOR(u,0,5) FOR(v,0,4) if(u != v) result += ptab[u][v];<br>      <br>      if(result &lt; best) best = result;<br>      if(result &lt; -1) {<br>        FOR(u,0,4) printf("%c", p[u]+'A'); printf(" ");<br>        printf("%3d: %d\n", push, result); fflush(stdout);<br>        }<br>      }<br>    } while(next_permutation(p, p+4));<br>    return best;<br>    }<br>  };<br><br><br>// Powered by FileEdit<br></td>