<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Text;<br>using System.Text.RegularExpressions;<br>using System.Collections;<br><br>public class DiamondGame {<br>    int m, n;<br>    char[,] board = null;<br>    int[] shiftX = { 0, 1, 0, -1 };<br>    int[] shiftY = { 1, 0, -1, 0 };<br><br>    public int DFS(int x, int y)<br>    {<br>        if (x &lt; 0 || x &gt;= m || y &lt; 0 || y &gt;= n || board[x, y] == '.')<br>            return 0;<br>        int result = 1;<br>        board[x, y] = '.';<br>        for (int i = 0; i &lt; 4; i++)<br>            result += DFS(x + shiftX[i], y + shiftY[i]);<br>        return result;<br>    }<br><br>    public void InitBoard(string[] diamondsBoard)<br>    {<br>        for (int i = 0; i &lt; m; i++)<br>            for (int j = 0; j &lt; n; j++)<br>                board[i, j] = diamondsBoard[i][j];<br>    }<br><br>    public int BoardRes()<br>    {<br>        int res = 0;<br>        for (int i = 0; i &lt; m; i++)<br>            for (int j = 0; j &lt; n; j++)<br>                if (board[i, j] == '*')<br>                    res = Math.Max(res, DFS(i, j));<br>        return res;<br>    }<br><br>    public int maximumDiamond(string[] diamondsBoard)<br>    {<br>        m = diamondsBoard.Length;<br>        n = diamondsBoard[0].Length;<br>        board = new char[m, n];<br>        InitBoard(diamondsBoard);<br>        int res = BoardRes();<br>        for (int i = 0; i &lt; m; i++)<br>            for (int j = 0; j &lt; n; j++)<br>                if (board[i, j] == '.')<br>                {<br>                    board[i, j] = '*';<br>                    res = Math.Max(res, DFS(i, j) - 1);<br>                    InitBoard(diamondsBoard);<br>                }<br>        return res;<br>    }<br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by CodeProcessor<br></td>