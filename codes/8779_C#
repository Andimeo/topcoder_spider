<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Text;<br>using System.Text.RegularExpressions;<br>using System.Collections;<br>using System.Collections.Generic;<br><br>public class CssRules {<br>    public static int Nodes = 0;<br><br>    public class Tag<br>    {<br>        public string name, id;<br>        public int ID, color, idn;<br>        public List&lt;Tag&gt; next;<br><br>        public Tag(string name, string id, int color)<br>        {<br>            this.name = name;<br>            this.id = id;<br>            this.ID = Nodes++;<br>            if (name[0] == 'b') idn = 0;<br>            if (name[0] == 'i') idn = 1;<br>            if (name[0] == 'u') idn = 2;<br>            this.color = color;<br>            this.next = new List&lt;Tag&gt;();<br>        }<br>    }<br><br>    string[] COLOR = new string[8] { "", "black", "blue", "gray", "green", "red", "white", "yellow" };<br><br>    public KeyValuePair&lt;List&lt;Tag&gt;, int&gt; parse(string s, int i)<br>    {<br>        List&lt;Tag&gt; res = new List&lt;Tag&gt;();<br>        while (i &lt; s.Length &amp;&amp; s[i] == '&lt;')<br>        {<br>            Tag t;<br>            string name = "";<br>            i++;<br>            if (s[i] == '/') return new KeyValuePair&lt;List&lt;Tag&gt;,int&gt;(res, i + 3);<br>            while (s[i] != ' ') name += s[i++];<br>            string id = "";<br>            while (s[i] != '\'') i++;<br>            i++;<br>            while (s[i] != '\'') id += s[i++];<br>            string col = "";<br>            while (s[i] != ':') i++;<br>            i++;<br>            while (s[i] != '\'') col += s[i++];<br>            while (s[i] != '&gt;') i++;<br>            int color = Array.IndexOf(COLOR, col);<br>            t = new Tag(name, id, color);<br>            if (s[i + 2] == '/')<br>            {<br>                i++;<br>                while (s[i] != '&gt;') i++;<br>                i++;<br>            }<br>            else<br>            {<br>                KeyValuePair&lt;List&lt;Tag&gt;, int&gt; k = parse(s, i + 1);<br>                t.next = k.Key;<br>                i = k.Value;<br>            }<br>            res.Add(t);<br>        }<br>        return new KeyValuePair&lt;List&lt;Tag&gt;,int&gt;(res, i);<br>    }<br><br>    int[,] memo;<br><br>    public int solve(Tag p, int cols)<br>    {<br>        if (memo[p.ID, cols] &gt;= 0) return memo[p.ID, cols];<br>        int cost = p.color == ((cols &gt;&gt; (p.idn * 3)) &amp; 7) ? 0 : 1;<br>        if (p.next.Count == 0) return cost;<br>        int ret = 10000;<br>        for (int b = 0; b &lt; 8; ++b)<br>        {<br>            int cost2 = b == (cols &amp; 7) ? 0 : 1;<br>            if (b == 0 &amp;&amp; cost2 == 1) continue;<br>            for (int i = 0; i &lt; 8; ++i)<br>            {<br>                int cost3 = i == ((cols &gt;&gt; 3) &amp; 7) ? 0 : 1;<br>                if (i == 0 &amp;&amp; cost3 == 1) continue;<br>                for (int u = 0; u &lt; 8; ++u)<br>                {<br>                    int cost4 = u == ((cols &gt;&gt; 6) &amp; 7) ? 0 : 1;<br>                    if (u == 0 &amp;&amp; cost4 == 1) continue;<br>                    int cost5 = cost + cost2 + cost3 + cost4;<br>                    for (int k = 0; k &lt; p.next.Count; ++k)<br>                    {<br>                        cost5 += solve(p.next[k], (u &lt;&lt; 6) | (i &lt;&lt; 3) | b);<br>                    }<br>                    ret = Math.Min(ret, cost5);<br>                    // if (p.ID == 0 &amp;&amp; cost5 == 2) Console.WriteLine("{0} {1} {2} {3} {4} {5} {6} {7}", p.ID, b, i, u, cost, cost2, cost3, cost4);<br>                }<br>            }<br>        }<br>        return memo[p.ID, cols] = ret;<br>    }<br><br>    public void view(Tag p, int depth)<br>    {<br>        for (int i = 0; i &lt; depth; ++i) Console.Write("*");<br>        Console.WriteLine("{0} {1} {2} {3} ", p.name, p.id, COLOR[p.color], p.idn);<br>        for (int i = 0; i &lt; p.next.Count; ++i)<br>            view(p.next[i], depth + 1);<br>    }<br>    public int getMinimalCssRuleCount(string[] xhtml)<br>    {<br>        string X = "";<br>        foreach (string t in xhtml) X += t;<br>        List&lt;Tag&gt; tr = parse(X, 0).Key;<br>        int res = 0;<br>        memo = new int[Nodes, 1 &lt;&lt; 9];<br>        for (int i = 0; i &lt; Nodes; ++i)<br>            for (int j = 0; j &lt; (1 &lt;&lt; 9); ++j)<br>                memo[i, j] = -1;<br>        for (int i = 0; i &lt; tr.Count; ++i)<br>        {<br>            // view(tr[i], 0);<br>            res += solve(tr[i], 0);<br>        }<br>        return res;<br>    }<br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by CodeProcessor<br></td>