<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;vector&gt;<br>#include &lt;list&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;deque&gt;<br>#include &lt;queue&gt;<br>#include &lt;stack&gt;<br>#include &lt;bitset&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;functional&gt;<br>#include &lt;numeric&gt;<br>#include &lt;utility&gt;<br>#include &lt;sstream&gt;<br>#include &lt;iostream&gt;<br>#include &lt;iomanip&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cctype&gt;<br>#include &lt;string&gt;<br>#include &lt;cstring&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;ctime&gt;<br> <br>using namespace std;<br> <br>#define SIZE(X) ((int)(X.size()))<br>#define LENGTH(X) ((int)(X.length()))<br>#define MP(X,Y) make_pair(X,Y)<br> <br>const int maxsize=3000;<br> <br>const string s1[]={"b","u","i"};<br>const string s2[]={"","black", "blue", "gray", "green", "red", "white", "yellow"};<br>const int c2=sizeof(s2)/sizeof(s2[0]);<br> <br>class CssRules<br>{<br>public:<br>  int n;<br>  string id[maxsize],tag[maxsize],color[maxsize];<br>  vector&lt;int&gt; g[maxsize];<br>  vector&lt;string&gt; h;<br>  int pos;<br>  map&lt;pair&lt;int,string&gt;,int&gt; M;<br>  void init(int key)<br>  {<br>    tag[key]=h[pos++];<br>    id[key]=h[pos++];<br>    id[key]=id[key].substr(4);<br>    id[key]=id[key].substr(0,LENGTH(id[key])-1);<br>    color[key]=h[pos++];<br>    color[key]=color[key].substr(13);<br>    color[key]=color[key].substr(0,LENGTH(color[key])-1);<br>    g[key].clear();<br>    while (h[pos][0]!='/')<br>    {<br>      int other=(n++);<br>      g[key].push_back(other);<br>      init(other);<br>    }<br>    pos++;<br>  }<br>  int solve(string stag,int key,string prev)<br>  {<br>    if (M.find(MP(key,prev))!=M.end()) return M[MP(key,prev)];<br>    int ret=100000000;<br>    for (int i=0;i&lt;c2;i++)<br>    {<br>      int total=0;<br>      string current=s2[i];<br>      if (current!="") total++;<br>      for (int k=0;k&lt;SIZE(g[key]);k++) <br>        total+=solve(stag,g[key][k],(current=="")?prev:current);<br>      if (total&lt;ret) ret=total;<br>    }<br>    if (tag[key]==stag &amp;&amp; prev!=color[key]) ret++;<br>    return M[MP(key,prev)]=ret;<br>  }<br>  int getMinimalCssRuleCount(vector &lt;string&gt; vs)<br>  {<br>    string str="";<br>    for (int i=0;i&lt;SIZE(vs);i++) str+=vs[i];<br>    for (int i=0;i&lt;LENGTH(str);i++) if (str[i]=='&lt;' || str[i]=='&gt;') str[i]=' ';<br>    istringstream sin(str);<br>    pos=0;<br>    for (string s;sin&gt;&gt;s;h.push_back(s));<br>    int R=0;<br>    while (pos&lt;SIZE(h))<br>    {<br>      n=0;<br>      int root=(n++);<br>      init(root);<br>      for (int k=0;k&lt;3;k++)<br>      {<br>        M.clear();<br>        R+=solve(s1[k],root,"");<br>      }<br>    }<br>    return R;<br>  }<br>};<br></td>