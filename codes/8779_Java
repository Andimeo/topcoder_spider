<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br><br>public class CssRules {<br>    int numColors;<br>    int numKinds;<br>    int[] pow;<br><br>    class Tree {<br>        int kind;<br>        int color;<br>        List&lt;Tree&gt; children = new ArrayList&lt;Tree&gt;();<br>        int[] answer;<br><br>        public void solve() {<br>            for (Tree child : children) child.solve();<br>            answer = new int[pow[numKinds]];<br>            for (int state = 0; state &lt; answer.length; ++state) {<br>                for (Tree child : children)<br>                    answer[state] += child.answer[state];<br>            }<br>            for (int changedId = 0; changedId &lt; numKinds; ++changedId) {<br>                int cpow = pow[changedId];<br>                for (int state = 0; state &lt; answer.length; ++state) {<br>                    int old = (state / cpow) % (numColors + 1);<br>                    for (int next = 0; next &lt;= numColors; ++next) {<br>                        int nextState = state + (next - old) * cpow;<br>                        answer[nextState] = Math.min(answer[nextState], answer[state] + 1);<br>                    }<br>                }<br>            }<br>            for (int state = 0; state &lt; answer.length; ++state) {<br>                if ((state / pow[kind]) % (numColors + 1) != color + 1)<br>                    ++answer[state];<br>            }<br>        }<br>    }<br><br>    public int getMinimalCssRuleCount(String[] xthml) {<br>        StringBuilder b = new StringBuilder();<br>        for (String x : xthml)<br>            b.append(x);<br>        String[] parts = b.toString().split("[&lt;&gt;]");<br>        Map&lt;String, Integer&gt; knownColors = new HashMap&lt;String, Integer&gt;();<br>        Map&lt;String, Integer&gt; knownKinds = new HashMap&lt;String, Integer&gt;();<br>        Stack&lt;Tree&gt; curPath = new Stack&lt;Tree&gt;();<br>        Tree root = new Tree();<br>        root.kind = -1;<br>        root.color = -1;<br>        curPath.add(root);<br>        for (String part : parts) {<br>            if (part.length() == 0) continue;<br>            if (part.startsWith("/")) {<br>                curPath.pop();<br>            } else {<br>                String[] inside = part.split(" ");<br>                String kindStr = inside[0];<br>                String colorStr = inside[2];<br>                if (!knownColors.containsKey(colorStr)) {<br>                    knownColors.put(colorStr, knownColors.size());<br>                }<br>                if (!knownKinds.containsKey(kindStr)) {<br>                    knownKinds.put(kindStr, knownKinds.size());<br>                }<br>                Tree cur = new Tree();<br>                cur.kind = knownKinds.get(kindStr);<br>                cur.color = knownColors.get(colorStr);<br>                curPath.peek().children.add(cur);<br>                curPath.add(cur);<br>            }<br>        }<br>        numColors = knownColors.size();<br>        numKinds = knownKinds.size();<br>        pow = new int[numKinds + 1];<br>        pow[0] = 1;<br>        for (int i = 0; i &lt; numKinds; ++i) {<br>            pow[i + 1] = pow[i] * (numColors + 1);<br>        }<br>        int res = 0;<br>        for (Tree topLevel : root.children) {<br>            topLevel.solve();<br>            res += topLevel.answer[0];<br>        }<br>        return res;<br>    }<br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by RETester [based on ExampleBuilder]<br>// Powered by CodeProcessor<br></td>