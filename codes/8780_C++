<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;cstdio&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cstring&gt;<br>#include &lt;cmath&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;vector&gt;<br>#include &lt;sstream&gt;<br>#include &lt;string&gt;<br>#include &lt;set&gt;<br>#include &lt;map&gt;<br>#include &lt;functional&gt;<br><br>using namespace std;<br><br>#define forn(i, n) for (int i = 0; i &lt; (int)(n); i++)<br>#define forit(i, a) for (__typeof((a).begin()) i = (a).begin(); i != (a).end(); i++)<br>#define pb push_back<br>#define mp make_pair<br>#define fi first<br>#define se second<br>#define sz(a) ((int)(a).size())<br><br>typedef pair &lt;int, int&gt; pii;<br>typedef long long ll;<br>typedef vector &lt;int&gt; vi;<br><br>vector &lt;string&gt; s;<br>int h, w, n, all;<br>vi v;<br><br>int dfs( int x, int y )<br>{<br>  if (!(0 &lt;= x &amp;&amp; x &lt; w &amp;&amp; 0 &lt;= y &amp;&amp; y &lt; h) || s[y][x] != 'X')<br>    return 0;<br>    <br>  int sum = 1;<br>  s[y][x] = '.';<br>  sum += dfs(x + 1, y);<br>  sum += dfs(x - 1, y);<br>  sum += dfs(x, y + 1);<br>  sum += dfs(x, y - 1);<br>  return sum;<br>}<br><br>map &lt;vi, vi&gt; f;<br><br>vi go( vi &amp;st, int move )<br>{<br>  if (move == all)<br>    return vi(n, 0);<br>  if (f.count(st))<br>    return f[st];<br><br>  vi res(n, -1);<br>  forn(i, sz(st))<br>    if (st[i] &gt; 0)<br>    {<br>      st[i]--;<br>      vi p = go(st, move + 1);<br>      <br>      int win = 0;<br>      if (st[i] == 0)<br>        win = v[i];<br>      else<br>        win = 1;<br>      p[move % n] += win;<br>      if (p[move % n] &gt; res[move % n])<br>        res = p;<br>      <br>      st[i]++;<br>    }<br>  <br>  f[st] = res;<br>//  printf("st=(%d,%d) move=%d --&gt; [%d,%d]\n", st[0], st[1], move, res.fi, res.se);<br>  return f[st];<br>}<br><br>class MultiplayerBattleships<br>{<br>public:<br>  int getFirstPlayerScore(vector &lt;string&gt; _s, int _n)<br>  {<br>    s = _s, n = _n;<br>    h = sz(s), w = sz(s[0]);<br>    v.clear();<br>    forn(i, h)<br>      forn(j, w)<br>        if (s[i][j] == 'X')<br>          v.pb(dfs(j, i));<br><br>    f.clear();<br>    all = 0;<br>    forn(i, sz(v))<br>      all += v[i];<br>      <br>    vi st = v;<br>    return go(st, 0)[0];<br>  }<br>};<br></td>