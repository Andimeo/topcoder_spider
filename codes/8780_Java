<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br><br>public class MultiplayerBattleships {<br>  int c;<br>  class Ship implements Comparable &lt;Ship&gt; {<br>    int x, y, c; <br>    Ship (int xx, int yy, int cc) {<br>      x = xx; y = yy; c = cc;<br>    };<br>    public int compareTo (Ship z) {<br>      if (x != z.x) return x - z.x;<br>      if (y != z.y) return y - z.y;<br>      return c - z.c;<br>    };<br>    public String toString () {<br>      return x + " " + y + " " + c;<br>    };<br>  };<br> <br>  ArrayList &lt;Ship&gt; ships;<br>  int s;<br>  <br>  class State {<br>    int [] lf;<br>    State () {<br>      lf = new int[s];<br>      for (int i = 0; i &lt; s; i++)<br>        lf[i] = ships.get (i).c;<br>    };<br>    State (State pv, int sh) {<br>      lf = new int[s];<br>      for (int i = 0; i &lt; s; i++)<br>        lf[i] = pv.lf[i];<br>      --lf[sh];<br>    };<br>    State (int a) {<br>      lf = new int[s];<br>      for (int i = 0; i &lt; s; i++)<br>        lf[i] = a;<br>    };<br>    public int hashCode () {<br>      int r = 0;<br>      for (int i = 0; i &lt; s; i++) r = r * 31 + lf[i];<br>      //System.out.println ("hc: " +r);<br>      return r;<br>    };<br>    public boolean equals (Object o) {<br>      State z = (State)o;<br>      for (int i = 0; i &lt; s; i++)<br>        if (z.lf[i] != lf[i]) return false;<br>      return true;<br>    };<br>    public String toString () {<br>      String res = "";<br>      for (int i = 0; i &lt; s; i++)<br>        res += lf[i] + " ";<br>      return res;<br>    };<br>  };<br><br>  class Score {<br>    int arr[];<br>    Score () {<br>      arr = new int [c];<br>    };<br>    Score (int x) {<br>      arr = new int [c];<br>      for (int i = 0; i &lt; c; i++)<br>        arr[i] = x;<br>    };<br>    Score (Score p, int ad) {<br>      arr = new int [c];<br>      for (int i = 0; i &lt; c - 1; i++)<br>        arr[i + 1] = p.arr[i];<br>      arr[0] = p.arr[c - 1];<br>      arr[0] += ad;<br>    };<br>    public String toString () {<br>      String res = "";<br>      for (int i = 0; i &lt; c; i++)<br>        res += arr[i] + " ";<br>      return res;<br>    };<br>  };<br><br>  <br>  HashMap &lt;State, Score&gt; ans;<br>  <br>  boolean [][] f, g;<br>  int n, m;<br>  <br>  int dfs (int x, int y) {<br>    if (!f[x][y] || g[x][y]) return 0;<br>    g[x][y] = true;<br>    int res = 1;<br>    res += dfs (x - 1, y);<br>    res += dfs (x + 1, y);<br>    res += dfs (x, y - 1);<br>    res += dfs (x, y + 1);<br>    return res;<br>  };<br>  <br>  <br>  public Score dyn (State st) {<br>    Score res = ans.get (st);<br>    //System.out.println (st);<br>    if (res != null) return res;<br>    Score opt = new Score (-1);<br>    for (int i = 0; i &lt; s; i++)<br>      if (st.lf[i] &gt; 0) {<br>        State nx = new State (st, i);<br>        Score cur = dyn (nx);<br>        int ad;<br>        if (st.lf[i] == 1) ad = ships.get (i).c; else ad = 1;<br>        cur = new Score (cur, ad);<br>        if (cur.arr[0] &gt; opt.arr[0]) opt = cur;<br>      };<br>    ans.put (st, opt);<br>    //System.out.println (st + ": " + opt);<br>    return opt;<br>  };<br>  <br> <br><br>  public int getFirstPlayerScore (String [] _f, int _c) {<br>    c = _c;<br>    ans = new HashMap &lt;State, Score&gt; ();<br>    ships = new ArrayList &lt;Ship&gt; ();<br>    m = _f.length;<br>    n = _f[0].length ();<br>    f = new boolean [m + 2][n + 2];<br>    for (int i = 0; i &lt; m; i++)<br>      for (int j = 0; j &lt; n; j++)<br>        f[i + 1][j + 1] = _f[i].charAt (j) == 'X';<br>    g = new boolean [m + 2][n + 2];<br>    int [] p = new int [4];<br>    for (int i = 0; i &lt; m + 2; i++)<br>      for (int j = 0; j &lt; n + 2; j++)<br>        if (f[i][j] &amp;&amp; !g[i][j]) {<br>          ships.add (new Ship (i, j, dfs (i, j)));<br>        };<br>    s = ships.size ();<br>    //for (int i = 0; i &lt; s; i++)<br>      //System.out.println (ships.get (i));<br>    Collections.sort (ships);<br>    ans.put (new State (0), new Score ());<br>    //System.out.println (ans.get (new State (0)));<br>    return dyn (new State ()).arr[0];<br>  }<br>};<br></td>