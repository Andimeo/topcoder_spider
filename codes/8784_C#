<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections;<br>using System.Collections.Generic;<br><br>public class SymmetricPie {<br>    public int getLines(int[] dogs) {<br>        int best = 0;<br>        Array.Sort(dogs);<br><br>        do {<br>            bool[] lines = new bool[100];<br>            int tot = 0;<br>            for (int i = 0; i &lt; dogs.Length; i++) {<br>                tot += dogs[i];<br>                lines[tot % 100] = true;<br>            }<br>            int linec=0;<br>            for (int i = 0; i &lt; 50; i++) {<br>                if (lines[i] &amp;&amp; lines[i + 50]) linec++;<br>            }<br>            best = Math.Max(best, linec);<br>        } while (bNextPermutation(dogs));<br>        return best;<br><br>    }<br><br>    private bool bNextPermutation(int[] a) {<br>        // Find first reversal, return false if there is none<br>        int i = a.Length - 2;<br>        if (i &lt; 0) return false;<br>        while (a[i] &gt;= a[i + 1]) {<br>            i -= 1;<br>            if (i == -1) {<br>                System.Array.Sort(a);<br>                return false;<br>            }<br>        }<br><br>        // Find first element greater than reversal<br>        int j = a.Length - 1;<br>        while (a[j] &lt;= a[i]) { j -= 1; }<br><br>        // Swap<br>        int aTemp = a[j];<br>        a[j] = a[i];<br>        a[i] = aTemp;<br><br>        // Reverse remainder<br>        System.Array.Reverse(a, i + 1, a.Length - i - 1);<br>        return true;<br>    }<br>}<br></td>