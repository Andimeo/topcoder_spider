<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br> <br>public class SymmetricPie {<br>    public int getLines(int[] dogs) {<br>      Arrays.sort(dogs);<br>      int max = 0;<br>        do {<br>          int c = count(dogs);<br>          max=Math.max(c,max);<br>        } while (nextPermutation(dogs));<br>        <br>        return max;<br>    }<br>    int count(int[]a) {<br>      boolean[] q = new boolean[102];<br>      q[0] = true;<br>      int c =0;<br>      for (int i = 0; i &lt; a.length; i++) {<br>        c+=a[i];<br>        q[c]=true;<br>    }<br>      int n=0;<br>      for (int i = 0; i &lt; 50; i++) {<br>        if (q[i]&amp;&amp;q[i+50]) n++;<br>    }<br>      return n;<br>    }<br> <br>    public static boolean nextPermutation(int[] a) {<br>        int i = a.length;<br>        while (--i &gt; 0 &amp;&amp; (a[i - 1] &gt;= a[i])) {/**/<br>        }<br>        if (i == 0) return false;<br> <br>        int j = a.length + 1;<br>        while (--j &gt; 0 &amp;&amp; (a[j - 1] &lt;= a[i - 1])) {/**/<br>        }<br> <br>        int x = a[j - 1];<br>        a[j - 1] = a[i - 1];<br>        a[i - 1] = x;<br> <br>        j = a.length - 1;<br>        while (i &lt; j) {<br>            x = a[j];<br>            a[j] = a[i];<br>            a[i] = x;<br>            i++;<br>            j--;<br>        }<br>        return true;<br>    }<br> <br>}<br></td>