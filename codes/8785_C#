<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections.Generic;<br><br>public class PSequence {<br>    const int MOD = 1234567891;<br><br>    class State<br>    {<br>        public int numForbidden;<br>        public int[] others;<br><br>        public State(int a, int[] b)<br>        {<br>            numForbidden = a;<br>            others = b;<br>            Array.Sort(others);<br>        }<br><br>        public override bool Equals(object obj)<br>        {<br>            State s = (State) obj;<br>            if (numForbidden != s.numForbidden)<br>                return false;<br>            for (int i = 0; i &lt; others.Length; ++i)<br>                if (others[i] != s.others[i])<br>                    return false;<br>            return true;<br>        }<br><br>        public override int GetHashCode()<br>        {<br>            int res = numForbidden;<br>            foreach (int x in others)<br>                res = unchecked(res * 3137 + x);<br>            return res;<br>        }<br>    }<br><br>    Dictionary&lt;State, int&gt; cache; <br><br>    public int count(int[] S, int p)<br>    {<br>        int[] am = new int[p];<br>        foreach (int x in S)<br>            am[(x % p + p) % p]++;<br>        int n = 0;<br>        foreach (int x in am)<br>            if (x != 0)<br>                ++n;<br>        int at = 0;<br>        int[] d = new int[n];<br>        foreach (int x in am)<br>            if (x != 0)<br>            {<br>                d[at++] = x;<br>            }<br>        State start = new State(0, d);<br>        cache = new Dictionary&lt;State, int&gt;();<br>        return doit(start);<br>    }<br><br>    private int doit(State s)<br>    {<br>        if (cache.ContainsKey(s))<br>            return cache[s];<br>        bool any = false;<br>        int res = 0;<br>        for (int i = 0; i &lt; s.others.Length; ++i)<br>        {<br>            int cur = s.others[i];<br>            if (cur &gt; 0) {<br>                any = true;<br>                if (cur != s.numForbidden || i &gt; 0 &amp;&amp; s.others[i - 1] == s.numForbidden)<br>                {<br>                    int[] nam = (int[])s.others.Clone();<br>                    --nam[i];<br>                    int z = nam[i];<br>                    State next = new State(z, nam);<br>                    res = (int) (((long) res + (z + 1) * (long) doit(next)) % MOD);<br>                }<br>            }<br>        }<br>        if (!any)<br>            res = 1;<br>        cache[s] = res;<br>        return res;<br>    }<br><br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003] [modified for C# by Petr]<br>// Powered by CodeProcessor<br></td>