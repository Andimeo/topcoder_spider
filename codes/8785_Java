<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br><br>public class PSequence {<br>  class State {<br>    int [] a;<br>    int d, n;<br><br>    State (int [] aa, int dd, int nn) {<br>      a = aa.clone ();<br>      Arrays.sort (a);<br>      d = dd;<br>      n = nn;<br>    };<br><br>    public int hashCode () {<br>      return Arrays.hashCode (a) * 961 + d * 31 + n;<br>    };<br><br>    public boolean equals (Object o) {<br>      State z = (State)o;<br>      if (d != z.d) return false;<br>      if (n != z.n) return false;<br>      return Arrays.equals (a, z.a);<br>    };<br>  };<br><br>  HashMap &lt;State, Integer&gt; h = new HashMap &lt;State, Integer&gt; ();<br><br>  final int MOD = 1234567891;<br><br><br>  public int count (State s) {<br>    if (s.n == 0) return 1;<br>    Integer res = h.get (s);<br>    if (res != null) return res;<br><br>    long cur = 0;<br><br>    boolean skipped = false;<br><br>    for (int i = 0; i &lt; s.a.length; i++)<br>      if (s.a[i] &gt; 0) {<br>        if (s.a[i] == s.d &amp;&amp; !skipped) skipped = true; else {<br>          s.a[i]--;<br>          long val = count (new State (s.a, s.a[i], s.n - 1));<br>          s.a[i]++;<br>          cur += val * s.a[i];<br>        };<br>      };<br>    <br>    int ans = (int)(cur % MOD);<br>    h.put (s, ans);<br>    return ans;<br>  };<br><br> <br>  int [] r;<br>  int cc;<br><br><br>  public int count (int [] a, int p) {<br>    int n = a.length;<br>    for (int i = 0; i &lt; n; i++) {<br>      a[i] %= p;<br>      if (a[i] &lt; 0) a[i] += p;<br>    };<br>    Arrays.sort (a);<br><br>    cc = 0;<br>    int [] q = new int [n];<br><br>    q[0] = 1;<br><br><br>    for (int j = 1; j &lt; n; j++) {<br>      if (a[j] != a[j - 1]) ++cc;<br>      ++q[cc];<br>    };<br>    ++cc;<br><br>    int [] r = new int [cc];<br>    for (int i = 0; i &lt; cc; i++)<br>      r[i] = q[i];<br><br>    return count (new State (r, -1, n));<br>  };<br>};<br></td>