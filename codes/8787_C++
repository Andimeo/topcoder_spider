<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;vector&gt;<br>#include &lt;list&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;deque&gt;<br>#include &lt;stack&gt;<br>#include &lt;bitset&gt;<br>#include &lt;string&gt;<br>#include &lt;functional&gt;<br>#include &lt;numeric&gt;<br>#include &lt;utility&gt;<br>#include &lt;sstream&gt;<br>#include &lt;iostream&gt;<br>#include &lt;iomanip&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;ctime&gt;<br>#include &lt;algorithm&gt;<br>using namespace std;<br><br>#define sz(a) int((a).size())<br>#define pb push_back<br>#define all(X) (X).begin(), (X).end()<br>typedef vector&lt;int&gt; vi;<br>typedef vector&lt;string&gt; vs;<br>typedef long long ll;<br><br>class DividingIntoTeams<br>{<br>public:<br>  string findYourTeam(vector &lt;int&gt; alexFriends, vector &lt;int&gt; bobFriends, vector &lt;int&gt; charlieFriends, int k)<br>  {<br>    while (1) {<br>      int i = alexFriends[0];<br>      if (i == k) {<br>        return "Alex";<br>      }<br>      alexFriends.erase(find(all(alexFriends), i));<br>      bobFriends.erase(find(all(bobFriends), i));<br>      charlieFriends.erase(find(all(charlieFriends), i));<br>      i = bobFriends[0];<br>      if (i == k) {<br>        return "Bob";<br>      }<br>      alexFriends.erase(find(all(alexFriends), i));<br>      bobFriends.erase(find(all(bobFriends), i));<br>      charlieFriends.erase(find(all(charlieFriends), i));<br>      i = charlieFriends[0];<br>      if (i == k) {<br>        return "Charlie";<br>      }<br>      alexFriends.erase(find(all(alexFriends), i));<br>      bobFriends.erase(find(all(bobFriends), i));<br>      charlieFriends.erase(find(all(charlieFriends), i));<br>    }<br>  }<br>};<br></td>