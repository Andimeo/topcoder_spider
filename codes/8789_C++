<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;numeric&gt;<br> <br>#include &lt;iostream&gt;<br>#include &lt;sstream&gt;<br>#include &lt;queue&gt;<br>#include &lt;set&gt;<br>#include &lt;map&gt;<br>#include &lt;list&gt;<br> <br>#include &lt;cstdio&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cctype&gt;<br>#include &lt;cassert&gt;<br> <br>#include &lt;cmath&gt;<br>#include &lt;complex&gt;<br>using namespace std;<br> <br>#define REP(i,n) for(int i=0;i&lt;(int)(n);++i)<br>#define SIZE(t) ((int)((t).size()))<br> <br>class BestResult {<br>  public:<br>  vector &lt;int&gt; findBestResult(vector &lt;string&gt; teams) ;<br>};<br> <br>int a[20],b[20],c[20],ga[20],gb[20],gc[20],g[20];<br>vector &lt;int&gt; ret;<br>set &lt;int&gt; check;<br> <br>void updata(int x,int y){<br>  if ((x&lt;=y)&amp;&amp;(x&gt;=1)) check.insert(x);  <br>}<br> <br>vector &lt;int&gt; BestResult::findBestResult(vector &lt;string&gt; teams) {<br>  int n=teams.size();<br>  int cur=n+1;<br>  for (int i=0;i&lt;n;i++){<br>    stringstream s(teams[i]);<br>    s &gt;&gt; a[i] &gt;&gt; b[i] &gt;&gt; c[i];<br>  }<br>  memset(ga,0,sizeof(ga));<br>  memset(gb,0,sizeof(gb));<br>  memset(gc,0,sizeof(gc));<br>  for (int pa=1;pa&lt;=1000;pa++){<br>    for (int pb=1;pb&lt;=pa;pb++){<br>      for (int i=0;i&lt;n;i++) g[i]=a[i]*pa+b[i]*pb;<br>      check.clear();<br>      check.insert(1);<br>      for (int i=1;i&lt;n;i++){<br>        if (c[0]!=c[i]){<br>          int temp=(g[0]-g[i])/(c[i]-c[0]);<br>          updata(temp,pb);<br>          updata(temp-1,pb);<br>          updata(temp+1,pb);<br>        }<br>      }<br>      for (set&lt;int&gt;::iterator i=check.begin();i!=check.end();i++){<br>        int cnt=0;<br>        for (int j=1;j&lt;n;j++) if (g[j]+c[j]*(*i)&gt;g[0]+c[0]*(*i)) cnt++;<br>        if (cnt&lt;cur){<br>          cur=cnt;<br>          ret.clear();<br>          ret.push_back(pa);<br>          ret.push_back(pb);<br>          ret.push_back((*i));<br>        }<br>      }<br>    }<br>  }<br>  return ret;<br>}<br> <br> <br>// Powered by PopsEdit<br></td>