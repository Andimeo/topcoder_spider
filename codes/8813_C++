<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cctype&gt;<br>#include &lt;queue&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;iostream&gt;<br>#include &lt;sstream&gt;<br>#include &lt;utility&gt;<br>#include &lt;numeric&gt;<br>#include &lt;complex&gt;<br><br>using namespace std;<br><br>int stoi(string s)<br>{<br>  return atoi(s.c_str());<br>}<br><br>string itos(int i)<br>{<br>  ostringstream oss;<br>  oss &lt;&lt; i;<br>  return oss.str();<br>}<br><br>// note: if given an empty string, will return a vector with an empty<br>vector &lt;string&gt; parse(string s, string c)<br>{<br>  int len = c.length(), p = -len, np;<br>  vector &lt;string&gt; ans;<br>  <br>  do<br>    {<br>      np = s.find(c, p+len);<br>      ans.push_back(s.substr(p+len, np - p - len));<br>      p = np;<br>    }<br>  while (p != string::npos);<br><br>  return ans;<br>}<br><br>vector &lt;int&gt; parseint(string s, string c)<br>{<br>  vector &lt;int&gt; ans;<br>  vector &lt;string&gt; tmp = parse(s, c);<br>  for (int i = 0; i &lt; tmp.size(); i++)<br>    if (tmp[i] != "")<br>      ans.push_back(stoi(tmp[i]));<br>  return ans;<br>}<br><br>set &lt; vector &lt;int&gt; &gt; S;<br><br>void gen(vector &lt; vector &lt;int&gt; &gt; cursets)<br>{<br>  int n = cursets.size();<br>  for (int i = 0; i &lt; n; i++)<br>    {<br>      vector &lt;int&gt; vi = cursets[i];<br>      sort(vi.begin(), vi.end());<br>      S.insert(vi);<br>    }<br>  for (int i = 1; i &lt; n; i++)<br>    {<br>      vector &lt; vector &lt;int&gt; &gt; newsets;<br>      for (int j = 0; j &lt; n; j++)<br>  {<br>    vector &lt;int&gt; vi;<br>    if (i+j &lt; n)<br>      vi.insert(vi.begin(), cursets[i+j].begin(), cursets[i+j].end());<br>    if (i-j-1 &gt;= 0)<br>      vi.insert(vi.begin(), cursets[i-j-1].begin(), cursets[i-j-1].end());<br>    if (vi.size())<br>      newsets.push_back(vi);<br>  }<br>      gen(newsets);<br>    }<br>}<br><br>class FoldThePaper {<br>  public:<br>  int getValue(vector &lt;string&gt; paper) {<br>    <br>    int X = paper.size();<br>    vector &lt; vector &lt;int&gt; &gt; vvi;<br>    for (int i = 0; i &lt; X; i++)<br>      vvi.push_back(parseint(paper[i], " "));<br>    int Y = vvi[0].size();<br>    vector &lt; vector &lt;int&gt; &gt; cursets;<br>    for (int i = 0; i &lt; X; i++)<br>      cursets.push_back(vector &lt;int&gt; (1, i));<br>    gen(cursets);<br>    vector &lt; vector &lt;int&gt; &gt; rowsets(S.begin(), S.end());<br>    cout &lt;&lt; rowsets.size() &lt;&lt; endl;<br>    /*<br>    for (int i = 0; i &lt; rowsets.size(); i++) {<br>      for (int j = 0; j &lt; rowsets[i].size(); j++)<br>        cout &lt;&lt; rowsets[i][j] &lt;&lt; " ";<br>      cout &lt;&lt; endl;<br>    }<br>    */<br>    S.clear(); cursets.clear();<br>    for (int i = 0; i &lt; Y; i++)<br>      cursets.push_back(vector &lt;int&gt; (1, i));<br>    gen(cursets);<br>    vector &lt; vector &lt;int&gt; &gt; colsets(S.begin(), S.end());<br>    cout &lt;&lt; colsets.size() &lt;&lt; endl;<br>    int ans = -100;<br>    for (int i = 0; i &lt; rowsets.size(); i++)<br>      for (int j = 0; j &lt; colsets.size(); j++) {<br>        int tot = 0;<br>        for (int ii = 0; ii &lt; rowsets[i].size(); ii++)<br>    for (int jj = 0; jj &lt; colsets[j].size(); jj++)<br>      tot += vvi[rowsets[i][ii]][colsets[j][jj]];<br>        ans &gt;?= tot;<br>      }<br>    return ans;<br>    <br>  }<br>};<br><br><br>// Powered by FileEdit<br></td>