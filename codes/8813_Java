<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>import java.util.regex.*;<br>import java.text.*;<br>import java.math.*;<br> <br> <br>public class FoldThePaper<br>{<br>  final int N = 12;<br>  <br>  public int getValue(String[] paper)<br>  {<br>    boolean[][] ma = new boolean[N + 1][];<br>    ma[1] = new boolean[] {false, true};<br>    for (int i = 2; i &lt;= N; ++i) {<br>      ma[i] = new boolean[1 &lt;&lt; i];<br>      for (int j = 0; j &lt; i; ++j) {<br>        ma[i][1 &lt;&lt; j] = true;<br>      }<br>      for (int j = 1; j &lt; i; ++j) {<br>        int sub = Math.max(j, i - j);<br>        for (int t = 0; t &lt; (1 &lt;&lt; sub); ++t) {<br>          if (ma[sub][t]) {<br>            int cur = 0;<br>            for (int u = 0; u &lt; sub; ++u) {<br>              if ((t &amp; (1 &lt;&lt; u)) == 0) {<br>                continue;<br>              }<br>              if (u &lt; j) {<br>                cur |= 1 &lt;&lt; (j - u - 1);<br>              }<br>              if (j + u &lt; i) {<br>                cur |= 1 &lt;&lt; (j + u);<br>              }<br>            }<br>            ma[i][cur] = true;<br>          }<br>        }<br>      }<br>    }<br>    int best = Integer.MIN_VALUE;<br>    int[][] v = new int[paper.length][paper[0].split(" ").length];<br>    for (int i = 0; i &lt; paper.length; ++i) {<br>      String[] tmp = paper[i].split(" ");<br>      for (int j = 0; j &lt; tmp.length; ++j) {<br>        v[i][j] = Integer.parseInt(tmp[j]);<br>      }<br>    }<br>    for (int i = 0; i &lt; (1 &lt;&lt; v.length); ++i) {<br>      if (!ma[v.length][i]) {<br>        continue;<br>      }<br>      for (int j = 0; j &lt; (1 &lt;&lt; v[0].length); ++j) {<br>        if (!ma[v[0].length][j]) {<br>          continue;<br>        }<br>        int cur = 0;<br>        for (int x = 0; x &lt; v.length; ++x) {<br>          if ((i &amp; (1 &lt;&lt; x)) == 0) {<br>            continue;<br>          }<br>          for (int y = 0; y &lt; v[0].length; ++y) {<br>            if ((j &amp; (1 &lt;&lt; y)) == 0) {<br>              continue;<br>            }<br>            cur += v[x][y];<br>          }<br>        }<br>        best = Math.max(best, cur);<br>      }<br>    }<br>    return best;<br>  }<br>  <br> <br>}<br>//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!<br></td>