<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections;<br>using System.Collections.Generic;<br>using System.Collections.Specialized;<br>using System.Text;<br>using System.Text.RegularExpressions;<br> <br>public class MilitaryBase<br>{<br>    string[] photo;<br>    int[,] sump;<br>    int k;<br>    int m;<br>    int n;<br>    <br>    public int getSchoolBuildingCount(string[] photo, int k)<br>    {<br>        this.photo = photo;<br>        this.k = k;<br>        int m = photo.Length;<br>        int n = photo[0].Length;<br>        this.m = m;this.n=n;<br>        int ans = 0;<br>        sump = new int[m+1,n+1];<br>        for (int i=0; i&lt;m; i++)<br>        for (int j=0; j&lt;n; j++)<br>        sump[i+1,j+1] = sump[i,j+1] + sump[i+1,j] - sump[i,j] + (photo[i][j]=='*'?1:0);<br>        <br>        for (int x1=0; x1&lt;m; x1++)<br>        for (int x2=x1+1; x2&lt;m; x2++)<br>        for (int y1=0; y1&lt;n; y1++)<br>        for( int y2=y1+1; y2&lt;n; y2++)<br>        {<br>            if (x2 &lt; x1+2*k) continue;<br>            if (y2 &lt; y1+2*k) continue;<br>            if (!NearFrame(x1,y1,x2,y2)) continue;<br>            if (sump[x2-k+1,y2-k+1] + sump[x1+k,y1+k] - sump[x2-k+1,y1+k] - sump[x1+k,y2-k+1] != 0) continue;<br>            int now = sump[x2+1,y2+1] + sump[x1,y1] - sump[x2+1,y1] - sump[x1,y2+1];<br>            if (now != (x2-x1+1)*(y2-y1+1) - (x2-x1-2*k+1)*(y2-y1-2*k+1)) continue;<br>            ans++;<br>        }<br>        return ans;<br>    }<br>    <br>   <br>    bool NearFrame(int x1, int y1, int x2, int y2)<br>    {<br>        if (x1 &gt; 0)<br>        {<br>            for (int j =Math.Max(0, y1-1); j&lt;Math.Min(n, y2+1); j++)<br>            {<br>            if (photo[x1-1][j] == '*') return false;<br>            }<br>        }<br>        if (y1 &gt; 0)<br>        {<br>            for (int i = Math.Max(0, x1 - 1); i &lt; Math.Min(m, x2 + 2); i++)<br>            {<br>                if (photo[i][y1-1] == '*') return false;<br>            }<br>        }<br>        if(x2 &lt; m-1)<br>        {<br>            for (int j = Math.Max(0, y1 - 1); j &lt; Math.Min(n, y2 + 2); j++)<br>            {<br>                if (photo[x2 + 1][j] == '*') return false;<br>            }<br>        }<br>        if (y2 &lt; n-1)<br>        {<br>            for (int i = Math.Max(0, x1 - 1); i &lt; Math.Min(m, x2 + 1); i++)<br>            {<br>                if (photo[i][y2 + 1] == '*') return false;<br>            }<br>        }<br>        return true;<br>    }<br> <br>}<br>//Powered by [KawigiEdit] 2.0!<br></td>