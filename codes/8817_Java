<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>import java.util.regex.*;<br>import java.text.*;<br>import java.math.*;<br> <br> <br>public class AddElectricalWires<br>{<br>  boolean[][] g;<br>  boolean[] used;<br>  int n;<br>  <br>  public int maxNewWires(String[] wires, int[] gridConnections)<br>  {<br>    int m = 0;<br>    n = wires.length;<br>    g = new boolean[n][n];<br>    for (int i = 0; i &lt; n; ++i) {<br>      for (int j = 0; j &lt; n; ++j) {<br>        g[i][j] = wires[i].charAt(j) == '1';<br>        m += g[i][j] ? 1 : 0;<br>      }<br>    }<br>    int max = 0, sum = 0;<br>    int ans = 0;<br>    used = new boolean[n];<br>    for (int i : gridConnections) {<br>      int tmp = dfs(i);<br>      sum += tmp;<br>      ans += (tmp * (tmp - 1)) / 2;<br>      max = Math.max(max, tmp);<br>    }<br>    ans -= (max * (max - 1)) / 2;<br>    max += n - sum;<br>    ans += (max * (max - 1)) / 2;<br>    return ans - m / 2;<br>  }<br>  <br>  int dfs(int i) {<br>    if (used[i]) {<br>      return 0;<br>    }<br>    used[i] = true;<br>    int res = 1;<br>    for (int j = 0; j &lt; n; ++j) {<br>      if (g[i][j]) {<br>        res += dfs(j);<br>      }<br>    }<br>    return res;<br>  }<br>  <br> <br>}<br>//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!<br></td>