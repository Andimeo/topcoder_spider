<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;iostream&gt;<br>#include &lt;sstream&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;numeric&gt;<br>#include &lt;functional&gt;<br>#include &lt;iterator&gt;<br>#include &lt;vector&gt;<br>#include &lt;string&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;stack&gt;<br>#include &lt;queue&gt;<br>#include &lt;complex&gt;<br>#include &lt;utility&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cstddef&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstring&gt;<br>#include &lt;cassert&gt;<br><br>using namespace std;<br><br>#define RA(x) (x).begin(), (x).end()<br>#define SZ(x) (int((x).size()))<br>#define FE(i, x) for(__typeof((x).begin()) i = (x).begin(); i != (x).end(); i++)<br><br>typedef long long ll;<br>typedef complex&lt;double&gt; pnt;<br>typedef pair&lt;int, int&gt; pii;<br>typedef vector&lt;int&gt; vi;<br>typedef vector&lt;string&gt; vs;<br><br>template&lt;class T&gt;<br>static T gcd(T a, T b) { return b ? gcd(b, a % b) : a; }<br><br>template&lt;class T&gt;<br>static void splitstr(const string &amp;s, vector&lt;T&gt; &amp;out)<br>{<br>    istringstream in(s);<br>    out.clear();<br>    copy(istream_iterator&lt;T&gt;(in), istream_iterator&lt;T&gt;(), back_inserter(out));<br>}<br><br>// I wasn't expected a sort of Spanish Inquisition<br>class WhackAMole<br>{<br>public:<br>    string placeMoles(int numHoles, int numHammers)<br>    {<br>        int H = numHoles;<br>        int P = numHammers;<br>        vi players;<br>        int best = 0;<br><br>        for (int i = 0; i &lt; (1 &lt;&lt; H); i++)<br>            if (__builtin_popcount(i) == P)<br>                players.push_back(i);<br>        for (int i = 0; i &lt; (1 &lt;&lt; H); i++)<br>        {<br>            int miss = 0;<br>            for (int j = 0; j &lt; SZ(players); j++)<br>            {<br>                int p = players[j];<br>                int cur = i;<br>                int hits = 0;<br>                for (int r = 0; r &lt; H; r++)<br>                {<br>                    cur = (cur &lt;&lt; 1);<br>                    if (cur &amp; (1 &lt;&lt; H))<br>                    {<br>                        cur++;<br>                        cur -= 1 &lt;&lt; H;<br>                    }<br>                    if (cur &amp; p)<br>                        hits++;<br>                }<br>                if (hits != H)<br>                    miss++;<br>            }<br>            if (miss == SZ(players))<br>            {<br>                if (__builtin_popcount(i) &gt; __builtin_popcount(best))<br>                    best = i;<br>            }<br>        }<br>        string ans(H, 'O');<br>        for (int i = 0; i &lt; H; i++)<br>            if (best &amp; (1 &lt;&lt; i))<br>                ans[H - 1 - i] = 'X';<br>        return ans;<br>    }<br>};<br><br><br><br>// Powered by FileEdit<br></td>