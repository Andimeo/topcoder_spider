<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;set&gt;<br>#include &lt;string&gt;<br>#include &lt;vector&gt;<br>using namespace std;<br> <br>class TupleLine<br>{<br>public:<br> <br>int size;<br>vector &lt;string&gt; pts;<br>set &lt;string&gt; ptsset;<br> <br>bool move(string &amp;s, vector&lt;int&gt; &amp;diff, bool maindir)<br>{<br>  for (int i = 0; i &lt; s.size(); i++)<br>  {<br>    int d = diff[i];<br>    if (d == 1 &amp;&amp; !maindir)<br>      d = -1;<br>    else if (d == -1 &amp;&amp; !maindir)<br>      d = 1;<br> <br>    if (d == 1)<br>    {<br>      s[i]++;<br>      if (s[i] &gt;= '0'+size)<br>        return false;<br>    }<br>    else if (d == -1)<br>    {<br>      s[i]--;<br>      if (s[i] &lt; '0')<br>        return false;<br>    }<br>  }<br>  return true;<br>}<br> <br>int getAbsDiff(int i1, int i2, int pos)<br>{<br>  int v1 = pts[i1][pos];<br>  int v2 = pts[i2][pos];<br> <br>  if (v1 &lt; v2)<br>    return v2 - v1;<br>  else<br>    return v1 - v2;<br>}<br> <br>int getDiff(int i1, int i2, int pos)<br>{<br>  int v1 = pts[i1][pos];<br>  int v2 = pts[i2][pos];<br> <br>  return v2 - v1;<br>}<br> <br>int getReq(int i1, int i2)<br>{<br>  if (pts[i1] == pts[i2])<br>    return 1000;<br> <br>  vector &lt;int&gt; dir;<br>  int i;<br>  int mag = 0;<br>  for (i = 0; mag == 0; i++)<br>    mag = getAbsDiff(i1, i2, i);<br>  if (mag == 0)<br>    return 1000;<br> <br>  for (i = 0; i &lt; pts[i1].size(); i++)<br>  {<br>    int newmag = getAbsDiff(i1,i2,i);<br>    if (newmag != 0 &amp;&amp; newmag != mag)<br>      return 1000;<br>    else<br>      dir.push_back(getDiff(i1,i2,i) / mag);<br>  }<br> <br>  int totalHit = 1;<br>  int totalNeeded = 0;<br>  string current = pts[i1];<br>  while (move(current,dir,true))<br>  {<br>    totalHit++;<br>    if (!ptsset.count(current))<br>      totalNeeded++;<br>  }<br>  current = pts[i1];<br>  while (move(current,dir,false))<br>  {<br>    totalHit++;<br>    if (!ptsset.count(current))<br>      totalNeeded++;<br>  }<br> <br>  if (totalHit &lt; size)<br>    return 1000;<br>  else<br>    return totalNeeded;<br>}<br> <br>int quickLine(int _size, vector&lt;string&gt; _pts)<br>{<br>  int i, j;<br>  size = _size;<br>  pts = _pts;<br>  for (i = 0; i &lt; pts.size(); i++)<br>    ptsset.insert(pts[i]);<br>  int result = 1000;<br> <br>  for (i = 0; i &lt; pts.size(); i++)<br>  for (j = 0; j &lt; pts.size(); j++)<br>  {<br>    int x = getReq(i, j);<br>    if (x &lt; result)<br>      result = x;<br>  }<br> <br>  if (result &gt;= 1000)<br>    return size-1;<br>  else<br>    return result;<br>}<br> <br>};<br></td>