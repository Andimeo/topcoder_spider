<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;vector&gt;<br>#include &lt;sstream&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;cctype&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;queue&gt;<br>#include &lt;set&gt;<br>#include &lt;map&gt;<br>using namespace std;<br>typedef long long ll;<br>typedef vector&lt;int&gt; vi; typedef vector&lt;vi&gt; vvi;<br>typedef vector&lt;string&gt; vs; typedef vector&lt;vs&gt; vvs;<br>typedef istringstream iss; typedef ostringstream oss;<br>#define pq priority_queue<br>#define let(a,b) typeof(b) a(b)<br>#define all(a) a.begin(),a.end()<br>#define forall(a,b) for (let(a,b.begin());a!=b.end();++a)<br>#define forrall(a,b) for (let(a,b.rbegin());a!=b.rend();++a)<br>#define contains(a,b) (find(all(a),b)!=a.end())<br>#define fi(n) for (int i=0;i&lt;(n);++i)<br>#define fj(n) for (int j=0;j&lt;(n);++j)<br>#define fk(n) for (int k=0;k&lt;(n);++k)<br>//the following macros are stolen from tomek<br>#define REP(i,n) for(int i=0;i&lt;(n);++i) <br>#define FOR(i,a,b) for(int i=(a);i&lt;=(b);++i) <br>#define FORD(i,a,b) for(int i=(a);i&gt;=(b);--i) <br>template&lt;typename T&gt; string str(const T &amp;t){oss s;s&lt;&lt;t;return s.str();}<br>template&lt;typename T&gt; ll Int(const T &amp;t){stringstream s;s&lt;&lt;t;ll r;s&gt;&gt;r;return r;}<br>template&lt;typename T&gt; double Double(const T &amp;t){stringstream s;s&lt;&lt;t;double r;s&gt;&gt;r;return r;}<br>string tolower(string s){transform(all(s),s.begin(),_tolower);return s;}<br>string toupper(string s){transform(all(s),s.begin(),_toupper);return s;}<br><br>class QuadraticRoots{<br>set&lt;int&gt; ans;<br>void solve(double a, double b, double c)<br>{<br>    double d=b*b-4*a*c;<br>    if (d&lt;0) return;<br>    d=sqrt(d);<br>    double a1=(-b+d)/(2*a);<br>    double a2=(-b-d)/(2*a);<br>    int ai1=floor(a1+.5);<br>    int ai2=floor(a2+.5);<br>    if (fabs(a1-ai1)&lt;1e-12) ans.insert(ai1);<br>    if (fabs(a2-ai2)&lt;1e-12) ans.insert(ai2);<br>}<br>public:<br>vector &lt;int&gt; findRoots(vector &lt;int&gt; a, vector &lt;int&gt; b, vector &lt;int&gt; c)<br>{<br>fi(a.size())<br>    fj(b.size())<br>        fk(c.size())<br>        {<br>            solve(a[i],b[j],c[k]);<br>        }<br>return vi(all(ans));<br>}<br>};<br><br><br><br>// Powered by FileEdit<br></td>