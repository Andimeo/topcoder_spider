<td class="problemText" colspan="8" valign="middle" align="left">
            /*<br>*/<br>import java.util.*;<br>import java.math.*;<br>public class QuadraticRoots {<br>  public int[] findRoots(int[] a, int[] b, int[] c) {<br>    ArrayList ret = new ArrayList();<br>    try {<br>      for (int i=0; i&lt;a.length; i++) {<br>        for (int j=0; j&lt;b.length; j++) {<br>          for (int k=0; k&lt;c.length; k++) {<br>            double d = (-b[j] + Math.sqrt(b[j]*b[j] - 4*a[i]*c[k])) / (double)(2.*a[i]);<br>            if (d == (double)(int)d) <br>            {<br>              if (!ret.contains(new Integer((int)d))) <br>              {<br>                ret.add(new Integer((int)d));<br>              }<br>            }<br>            d = (-b[j] - Math.sqrt(b[j]*b[j] - 4*a[i]*c[k])) / (double)(2.*a[i]);<br>            if (d == (double)(int)d) <br>            {<br>              if (!ret.contains(new Integer((int)d))) <br>                ret.add(new Integer((int)d));<br>            }<br>          }<br>        }<br>      }<br>      Integer r[] = (Integer[])ret.toArray(new Integer[0]);<br>      int []rr = new int[r.length];<br>      for (int i=0; i&lt;r.length; i++) <br>        rr[i] = r[i].intValue();<br>      Arrays.sort(rr);<br>      return rr;<br>    } catch (Exception e) {<br>      e.printStackTrace(System.out);<br>    }<br>    return new int[0];<br>  }<br>  public final static void main(String[] args)<br>  {<br>    try {<br>      validateExample("1", new QuadraticRoots().findRoots(new int[] {1},new int[] {2,3},new int[] {2,1}), new int[] { -2,  -1 }, "findRoots(new int[] {1},new int[] {2,3},new int[] {2,1})");<br>      validateExample("2", new QuadraticRoots().findRoots(new int[] {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15},new int[] {1},new int[] {1}), new int[] { }, "findRoots(new int[] {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15},new int[] {1},new int[] {1})");<br>      validateExample("3", new QuadraticRoots().findRoots(new int[] {1},new int[] {0},new int[] {-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16}), new int[] { -4,  -3,  -2,  -1,  1,  2,  3,  4 }, "findRoots(new int[] {1},new int[] {0},new int[] {-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16})");<br>      validateExample("4", new QuadraticRoots().findRoots(new int[] {1,1,2,2,3,3,4,4},new int[] {1,1,2,2,3,3,4,4},new int[] {1,1,2,2,3,3,4,4}), new int[] { -3,  -2,  -1 }, "findRoots(new int[] {1,1,2,2,3,3,4,4},new int[] {1,1,2,2,3,3,4,4},new int[] {1,1,2,2,3,3,4,4})");<br>      validateExample("5", new QuadraticRoots().findRoots(new int[] {1,10000,-10000},new int[] {0,1,10000,-10000},new int[] {0,1,10000,-10000}), new int[] { -10000,  -100,  -1,  0,  1,  100,  10000 }, "findRoots(new int[] {1,10000,-10000},new int[] {0,1,10000,-10000},new int[] {0,1,10000,-10000})");<br>    } catch (Exception e) {<br>      System.out.println(e);<br>      e.printStackTrace(System.out);<br>    }<br>  }<br><br>  private static void validateExample(String exampleNum, int[] returned, int[] expected, String methodInvocation) {<br>    print(exampleNum);<br>    print("  ");<br>    if (!eq(returned,expected)) {<br>      print("FAIL");<br>    } else {<br>      print("SUCCESS");<br>    }<br>    print(" ");  <br>    print(methodInvocation);<br>    print("\tGot:[");<br>    print(returned);<br>    print("]\t");<br>    print("Expected:[");<br>    print(expected);<br>    print("]");<br>    print("\n");<br>  }<br><br>  public static void print(boolean a) {<br>    System.out.print(a);<br>  }<br><br>  public static void print(long a) {<br>    System.out.print(a);<br>  }<br><br>  public static void print(int a) {<br>    System.out.print(a);<br>  }<br><br>  public static void print(char a) {<br>    System.out.print(a);<br>  }<br><br>  public static void print(String a) {<br>    System.out.print(a);<br>  }<br><br>  public static void print(int[] a) {<br>    if (a==null) {System.out.print("null"); return;} <br>    for (int i=0; i&lt;a.length; i++) System.out.print(a[i]+(i&lt;a.length-1?",":"")); <br>  }<br><br>  public static void print(int[][] a) {<br>    if (a==null) {System.out.print("null"); return;} <br>    for (int i=0; i&lt;a.length; i++) { print(a[i]); print("\n"); }<br>  }<br><br>  public static void print(String[] a) {<br>    if (a==null) {System.out.print("null"); return;} <br>    for (int i=0; i&lt;a.length; i++) System.out.print(a[i]+(i&lt;a.length-1?",":"")); <br>  }<br><br>  public static boolean eq(boolean a, boolean b) {<br>    return a==b;<br>  }<br><br>  public static boolean eq(long a, long b) {<br>    return a==b;<br>  }<br><br>  public static boolean eq(int a, int b) {<br>    return a==b;<br>  }<br><br>  public static boolean eq(char a, char b) {<br>    return a==b;<br>  }<br><br>  public static boolean eq(String a, String b) {<br>    return a.equals(b);<br>  }<br><br>  public static boolean eq(int[] a, int[] b) { return Arrays.equals(a,b); }<br>  public static boolean eq(String[] a, String[] b) { return Arrays.equals(a,b); }<br><br>}<br> <br>// Powered by CodeProcessor<br></td>