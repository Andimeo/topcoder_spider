<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>import java.math.*;<br>public class TicSolver {<br>  int recurse(char[][] b, boolean omove) {<br>    if (hasWon(b, omove?'X':'O')) return 2;<br>    <br>    boolean iwin = false;<br>    boolean ilose = true;<br>    boolean hasPlayed = false; <br>    for (int r=0; r&lt;3; r++) for (int c=0; c&lt;3; c++) if (b[r][c]=='.') {<br>      hasPlayed=true;<br>      b[r][c]=omove?'O':'X';<br>      <br>      int res = recurse(b, !omove);<br>      if (res==2) iwin = true;<br>      if (res!=1) ilose = false; <br>      <br>      b[r][c]='.';<br>    }<br>    if (!hasPlayed) return 0;<br>    if (iwin) return 1;<br>    if (ilose) return 2;<br>    return 0;<br>  }<br>  <br>  public boolean hasWon(char[][] b, char player) {<br>    for (int r=0; r&lt;3; r++) {<br>      boolean won = true;<br>      for (int c=0; c&lt;3; c++) if (b[r][c]!=player) won = false;<br>      if (won) return true;<br>    }<br>    for (int c=0; c&lt;3; c++) {<br>      boolean won = true;<br>      for (int r=0; r&lt;3; r++) if (b[r][c]!=player) won = false;<br>      if (won) return true;<br>    }<br>    <br>    boolean won = true;<br>    for (int i=0; i&lt;3; i++) if (b[i][i]!=player) won = false;<br>    if (won) return true;<br>    <br>    won = true;<br>    for (int i=0; i&lt;3; i++) if (b[i][2-i]!=player) won = false;<br>    if (won) return true;<br>    <br>    return false;<br>  }<br>  <br>  public String whoWins(String[] board) {<br>    try {<br>      char[][] b= new char[3][3];<br>      for (int r=0; r&lt;3; r++) for (int c=0; c&lt;3; c++) b[r][c]=board[r].charAt(c);<br>      int ocnt = 0;<br>      int xcnt = 0;<br>      for (int r=0; r&lt;3; r++) for (int c=0; c&lt;3; c++) {<br>        if (b[r][c]=='O') ocnt++;<br>        if (b[r][c]=='X') xcnt++;<br>      }<br>      <br>      if (xcnt&gt;ocnt) return "INVALID";<br>      if (ocnt&gt;xcnt+1) return "INVALID";<br>      boolean omove = (ocnt==xcnt);<br>      if (omove &amp;&amp; hasWon(b, 'O')) return "INVALID";<br>      if ((!omove) &amp;&amp; hasWon(b, 'X')) return "INVALID";<br>      <br>      if (hasWon(b, 'O')) return "FIRST";<br>      if (hasWon(b, 'X')) return "SECOND";<br>      int res = recurse(b, omove);<br>      if (res==1) {<br>        return omove?"FIRST":"SECOND";<br>      }<br>      if (res==2) {<br>        return (!omove)?"FIRST":"SECOND";<br>      }<br>      return "DRAW";<br>    } catch (Exception e) {<br>      e.printStackTrace();<br>      return "INVALID";<br>    }<br>  }<br>}<br> <br>// Powered by PopsEdit<br></td>