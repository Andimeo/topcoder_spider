<td class="problemText" colspan="8" valign="middle" align="left">
            using System; using System.Collections; public class LawnMower<br>{<br>  public int trimNeeded(int n, int[] row, int[] col) {<br>    int best=99999;<br>    int[] dx = new int[]{1,1,0,-1,-1,-1,0,1};<br>    int[] dy = new int[]{0,1,1,1,0,-1,-1,-1};<br>    <br>    bool[,] bush = new bool[n,n];<br>    bool[,] bush2 = new bool[n,n];<br>    for (int i=0; i&lt;row.Length; i++) bush[row[i],col[i]] = true;<br>    <br>    // can[x,y,d]: can we reach the state with back at {x,y} and facing d?<br>    bool[,,] can = new bool[n,n,8];<br>    bool[,,] can2 = new bool[n,n,8];<br>    bool[,] did = new bool[n,n];<br>    <br>    int[] xs = new int[10000], ys = new int[10000], dirs = new int[10000];<br>    <br>    for (int sx=0; sx&lt;n; sx++) for (int sy=0; sy&lt;n; sy++) for (int sd=0; sd&lt;8; sd++)<br>    {<br>      int tx=sx+dx[sd], ty=sy+dy[sd];<br>      if (tx&lt;0 || ty&lt;0 || tx&gt;=n || ty&gt;=n) continue;<br>      for (int i=0; i&lt;n; i++) for (int j=0; j&lt;n; j++) bush2[i,j]=bush[i,j];<br>      bush2[sx,sy] = false; bush2[tx,ty] = false;<br>      <br>      for (int i=0; i&lt;n; i++) for (int j=0; j&lt;n; j++)<br>      {<br>        did[i,j] = false;<br>        for (int k=0; k&lt;8; k++) can[i,j,k] = false;<br>        for (int k=0; k&lt;8; k++) can2[i,j,k] = false;<br>      }<br>      <br>      xs[0] = sx; ys[0] = sy; dirs[0] = sd;<br>      int done=0, todo=1;<br>      while (done &lt; todo)<br>      {<br>        int x=xs[done], y=ys[done], dir=dirs[done]; done++;<br>        int x2=x+dx[dir], y2=y+dy[dir];<br>        if (x2&lt;0 || y2&lt;0 || x2&gt;=n || y2&gt;=n) continue;<br>        if (bush2[x,y] || bush2[x2,y2]) continue;<br>        for (int dd=7; dd&lt;=9; dd++)<br>          if (!can[x2,y2,(dir+dd)%8]) { can[x2,y2,(dir+dd)%8]=true; xs[todo]=x2; ys[todo]=y2; dirs[todo]=(dir+dd)%8; todo++; }<br>      }<br>      <br>      done=0; todo=1;<br>      xs[0] = sx; ys[0] = sy; dirs[0] = sd;<br>      while (done &lt; todo)<br>      {<br>        int x=xs[done], y=ys[done], dir=dirs[done]; done++;<br>        int x2=x+dx[dir], y2=y+dy[dir];<br>        if (x2&lt;0 || y2&lt;0 || x2&gt;=n || y2&gt;=n) continue;<br>        if (bush2[x,y] || bush2[x2,y2]) continue;<br>        for (int dd=7; dd&lt;=9; dd++)<br>        {<br>          int d0=(dir+dd)%8;<br>          int x0=x-dx[d0], y0=y-dy[d0];<br>          if (x0&lt;0 || y0&lt;0 || x0&gt;=n || y0&gt;=n) continue;<br>          if (bush2[x,y] || bush2[x0,y0]) continue;<br>          if (!can2[x0,y0,(dir+dd)%8]) { can2[x0,y0,(dir+dd)%8]=true; xs[todo]=x0; ys[todo]=y0; dirs[todo]=(dir+dd)%8; todo++; }<br>        }<br>      }<br>      <br>      for (int i=0; i&lt;n; i++) for (int j=0; j&lt;n; j++) for (int k=0; k&lt;8; k++)<br>        if (can[i,j,k] &amp;&amp; can2[i,j,k])<br>          {<br>            int x2=i+dx[k], y2=j+dy[k];<br>            if (x2&gt;=0 &amp;&amp; y2&gt;=0 &amp;&amp; x2&lt;n &amp;&amp; y2&lt;n) { did[i,j]=true; did[x2,y2]=true; }<br>          }<br>      <br>      //if (can[sx,sy,sd])<br>      {<br>        int un=0;<br>        for (int i=0; i&lt;n; i++) for (int j=0; j&lt;n; j++)<br>        {<br>          if (i==sx &amp;&amp; j==sy) continue;<br>          if (i==tx &amp;&amp; j==ty) continue;<br>          if (bush[i,j] || did[i,j]) continue;<br>          un++;<br>        }<br>        <br>        <br>    /*    <br>        if (un &lt; best &amp;&amp; un &lt; 6)<br>        {<br>          WSL(sx, sy, sd, un);<br>          WS(did, n, n);<br>        }<br>    */    <br>        <br>        <br>        best = Math.Min(best, un);<br>      }<br>    }<br>    <br>    return best;<br>}<br> <br> <br>static ArrayList AR { get { return new ArrayList(); }}<br>static Hashtable MAP { get { return new Hashtable(); }}<br> <br>static int   [] IA(ArrayList ar) { return (int   []) ar.ToArray(typeof(int   )); }<br>static string[] SA(ArrayList ar) { return (string[]) ar.ToArray(typeof(string)); }<br> <br>int    INT   (Object x) { return Convert.ToInt32 (x.ToString()); }<br>long   LONG  (Object x) { return Convert.ToInt64 (x.ToString()); }<br>double DOUBLE(Object x) { return Convert.ToDouble(x.ToString()); }<br> <br>static void WR(Object x, params object[] p) { Console.Write(x.ToString(), p); }<br>static void WL(Object x, params object[] p) { Console.WriteLine(x.ToString(), p); }<br>static void WL() { WL(""); }<br>static void WS(params Object[] c) { foreach (Object x in c) WR(x.ToString() + " "); }<br>static void WSL(params Object[] c) { foreach (Object x in c) WR(x.ToString() + " "); WL(); }<br>static void WS(Array ar, int X) { for (int x=0; x&lt;X; x++) WS(ar.GetValue(x)); WL(); }<br>static void WS(Array ar, int X, int Y) { for (int y=0; y&lt;Y; y++) { for (int x=0; x&lt;X; x++) WS(ar.GetValue(x,y)); WL(); }}}<br> <br>// Powered by PopsEdit<br></td>