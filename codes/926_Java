<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>public class LawnMower {<br>  int[] dx = {1, 1, 0, -1, -1, -1, 0, 1};<br>  int[] dy = {0, 1, 1, 1, 0, -1, -1, -1};<br>  boolean[][] map;<br>  int n;<br>  boolean[] v1;<br>  boolean[] v2;<br>  void visit1(int x, int y, int d) {<br>    if(v1[x*n*8+y*8+d]) return;<br>    v1[x*n*8+y*8+d] = true;<br>    for(int i = 7; i&lt;=9; i++) {<br>      int d1 = (d+i)%8;<br>      int x1 = x+dx[d];<br>      int y1 = y+dy[d];<br>      int x2 = x1+dx[d1];<br>      int y2 = y1+dy[d1];<br>      if(x2&gt;=0 &amp;&amp; y2&gt;=0 &amp;&amp; x2&lt;n &amp;&amp; y2&lt;n &amp;&amp; !map[x2][y2]) {<br>        visit1(x1, y1, d1);<br>      }<br>    }<br>  }<br>  void visit2(int x, int y, int d) {<br>    if(v2[x*n*8+y*8+d]) return;<br>    v2[x*n*8+y*8+d] = true;<br>    for(int i = 7; i&lt;=9; i++) {<br>      int d1 = (d+i)%8;<br>      int x1 = x-dx[d1];<br>      int y1 = y-dy[d1];<br>      if(x1&gt;=0 &amp;&amp; y1&gt;=0 &amp;&amp; x1&lt;n &amp;&amp; y1&lt;n &amp;&amp; !map[x1][y1]) {<br>        visit2(x1, y1, d1);<br>      }<br>    }<br>  }<br>  int eval(int x, int y, int d) {<br>    v1 = new boolean[n*n*8];<br>    v2 = new boolean[n*n*8];<br>    visit1(x, y, d);<br>    visit2(x, y, d);<br>    boolean[] acc = new boolean[n*n];<br>    for(int i = 0; i&lt;n; i++) for(int j = 0; j&lt;n; j++) for(int e = 0; e&lt;8; e++) {<br>      if(v1[i*n*8+j*8+e] &amp;&amp; v2[i*n*8+j*8+e]) {<br>        acc[i*n+j] = true;<br>        acc[(i+dx[e])*n+(j+dy[e])] = true;<br>      }<br>    }<br>    int c = 0;<br>    for(int i = 0; i&lt;n; i++) for(int j = 0; j&lt;n; j++) if(!acc[i*n+j] &amp;&amp; !map[i][j]) c++;<br>    return c;<br>  }<br>  public int trimNeeded(int n, int[] row, int[] col) {<br>    this.n = n;<br>    map = new boolean[n][n];<br>    for(int i = 0; i&lt;row.length; i++) map[row[i]][col[i]] = true;<br>    int best = 1000000000;<br>    for(int x = 0; x&lt;n; x++) for(int y = 0; y&lt;n; y++) for(int d = 0; d&lt;8; d++) {<br>      int x1 = x+dx[d];<br>      int y1 = y+dy[d];<br>      if(x1&gt;=0 &amp;&amp; y1&gt;=0 &amp;&amp; x1&lt;n &amp;&amp; y1&lt;n) {<br>        boolean a = map[x][y];<br>        boolean b = map[x1][y1];<br>        map[x][y] = false;<br>        map[x1][y1] = false;<br>        best = Math.min(eval(x, y, d), best);<br>        map[x][y] = a;<br>        map[x1][y1] = b;<br>      }<br>    }<br>    return best;<br>  }<br>  <br>//BEGIN CUT HERE<br>  public static void main(String[] args) {<br>    try {<br>    eq(1,(new LawnMower()).trimNeeded(4, new int[] {0,1,0}, new int[] {0,2,0}),6);<br>    eq(2,(new LawnMower()).trimNeeded(5, new int[] {0}, new int[] {0}),4);<br>    eq(3,(new LawnMower()).trimNeeded(5, new int[] {3,3,3}, new int[] {4,4,4}),5);<br>    eq(4,(new LawnMower()).trimNeeded(3, new int[] {0}, new int[] {0}),6);<br>    eq(5,(new LawnMower()).trimNeeded(12, new int[] {11}, new int[] {11}),3); <br>    } catch (Exception exx) {<br>      System.err.println(exx);<br>      exx.printStackTrace(System.err);<br>    }<br>  }<br>  private static void eq(int n, double a, double b) {<br>    if (a == b)<br>      System.err.println("Case " + n + " passed.");<br>    else<br>      System.err.println("Case " + n + " failed: expected \"" + b + "\", received \"" + a + "\".");<br>  }<br>  private static void eq(int n, int a, int b) {<br>    if (a == b)<br>      System.err.println("Case " + n + " passed.");<br>    else<br>      System.err.println("Case " + n + " failed: expected \"" + b + "\", received \"" + a + "\".");<br>  }<br>  private static void eq(int n, char a, char b) {<br>    if (a == b)<br>      System.err.println("Case " + n + " passed.");<br>    else<br>      System.err.println("Case " + n + " failed: expected '" + b + "', received '" + a + "'.");<br>  }<br>  private static void eq(int n, long a, long b) {<br>    if (a == b)<br>      System.err.println("Case " + n + " passed.");<br>    else<br>      System.err.println("Case " + n + " failed: expected \"" + b + "\", received \"" + a + "\".");<br>  }<br>  private static void eq(int n, boolean a, boolean b) {<br>    if (a == b)<br>      System.err.println("Case " + n + " passed.");<br>    else<br>      System.err.println("Case " + n + " failed: expected \"" + b + "\", received \"" + a + "\".");<br>  }<br>  private static void eq(int n, String a, String b) {<br>    if (a.equals(b))<br>      System.err.println("Case " + n + " passed.");<br>    else<br>      System.err.println("Case " + n + " failed: expected \"" + b + "\", received \"" + a + "\".");<br>  }<br>  private static void eq(int n, int[] a, int[] b) {<br>    if (a.length != b.length) {<br>      System.err.println(<br>        "Case " + n + " failed: returned " + a.length + " elements; expected " + b.length + " elements.");<br>      return;<br>    }<br>    for (int i = 0; i &lt; a.length; i++)<br>      if (a[i] != b[i]) {<br>        System.err.println("Case " + n + " failed. Expected and returned array differ in position " + i);<br>        print(b);<br>        print(a);<br>        return;<br>      }<br>    System.err.println("Case " + n + " passed.");<br>  }<br>  private static void eq(int n, long[] a, long[] b) {<br>    if (a.length != b.length) {<br>      System.err.println(<br>        "Case " + n + " failed: returned " + a.length + " elements; expected " + b.length + " elements.");<br>      return;<br>    }<br>    for (int i = 0; i &lt; a.length; i++)<br>      if (a[i] != b[i]) {<br>        System.err.println("Case " + n + " failed. Expected and returned array differ in position " + i);<br>        print(b);<br>        print(a);<br>        return;<br>      }<br>    System.err.println("Case " + n + " passed.");<br>  }<br>  private static void eq(int n, String[] a, String[] b) {<br>    if (a.length != b.length) {<br>      System.err.println(<br>        "Case " + n + " failed: returned " + a.length + " elements; expected " + b.length + " elements.");<br>      return;<br>    }<br>    for (int i = 0; i &lt; a.length; i++)<br>      if (!a[i].equals(b[i])) {<br>        System.err.println("Case " + n + " failed. Expected and returned array differ in position " + i);<br>        print(b);<br>        print(a);<br>        return;<br>      }<br>    System.err.println("Case " + n + " passed.");<br>  }<br>  private static void print(int a) {<br>    System.err.print(a + " ");<br>  }<br>  private static void print(String s) {<br>    System.err.print("\"" + s + "\" ");<br>  }<br>  private static void print(int[] rs) {<br>    if (rs == null)<br>      return;<br>    System.err.print('{');<br>    for (int i = 0; i &lt; rs.length; i++) {<br>      System.err.print(rs[i]);<br>      if (i != rs.length - 1)<br>        System.err.print(", ");<br>    }<br>    System.err.println('}');<br>  }<br>  private static void print(long[] rs) {<br>    if (rs == null)<br>      return;<br>    System.err.print('{');<br>    for (int i = 0; i &lt; rs.length; i++) {<br>      System.err.print(rs[i]);<br>      if (i != rs.length - 1)<br>        System.err.print(", ");<br>    }<br>    System.err.println('}');<br>  }<br>  private static void print(String[] rs) {<br>    if (rs == null)<br>      return;<br>    System.err.print('{');<br>    for (int i = 0; i &lt; rs.length; i++) {<br>      System.err.print("\"" + rs[i] + "\"");<br>      if (i != rs.length - 1)<br>        System.err.print(", ");<br>    }<br>    System.err.println('}');<br>  }<br>  private static void nl() {<br>    System.err.println();<br>  }<br>//END CUT HERE<br>}<br> <br> <br>// Powered by PopsEdit<br>// Powered by TZTester 1.01 [25-Feb-2003]<br>// Powered by CodeProcessor<br></td>