<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>public class Hexagons {<br>  Set checked = new HashSet();<br>  <br>  char[] cc = new char[12];<br>  int used = 0;<br>  <br>  String[] ppp;<br>  <br>  public int[] centers(String[] pieces) {<br>    ppp = pieces;<br>    boolean[] fits = new boolean[7];<br>    int ct = 0;<br>    for (int i = 0; i &lt; 7; ++i) {<br>      cc = new char[12];<br>      used = 0;<br>      <br>      used |= (1 &lt;&lt; i);<br>      for (int j = 0; j &lt; 6; ++j) {<br>        cc[j] = pieces[i].charAt(j);<br>      }<br>      <br>      if (place(0)) {<br>        ++ct;<br>        fits[i] = true;<br>      }<br>    }<br>    int[] rr = new int[ct];<br>    for (int d = 0, i = 0; i &lt; 7; ++i) {<br>      if (fits[i]) {<br>        rr[d++] = 1 + i;<br>      }<br>    }<br>    return rr;<br>  }<br>  <br>//  boolean place(int pos) {<br>//    boolean f = place_(pos);<br>//    if (pos &gt;= 5) {<br>//      System.out.println(new String(cc) + ", " + used);<br>//      System.out.println("place(" + pos + ") = " + f);<br>//    }<br>//    return f;<br>//  }<br>//  <br>  boolean place(int pos) {<br>    if (pos == 6) {<br>      return true;<br>    }<br>    for (int piece = 0; piece &lt; 7; ++piece) {<br>      if ((used &amp; (1 &lt;&lt; piece)) != 0) continue;<br>      String pp = ppp[piece];<br>      used |= (1 &lt;&lt; piece);<br>      try {<br>        for (int rot = 0; rot &lt; 6; ++rot) {<br>          int i2 = pos;<br>          int i1 = pos + 6;<br>          int i3 = 6 + ((pos + 5) % 6);<br>          if (cc[i1] != '\0' &amp;&amp; cc[i1] != pp.charAt((rot + 0) % 6)) continue;<br>          if (cc[i2] != '\0' &amp;&amp; cc[i2] != pp.charAt((rot + 1) % 6)) continue;<br>          if (cc[i3] != '\0' &amp;&amp; cc[i3] != pp.charAt((rot + 2) % 6)) continue;<br>          <br>          char c1 = cc[i1];<br>          char c3 = cc[i3];<br>          cc[i1] = pp.charAt((rot + 0) % 6);<br>          cc[i3] = pp.charAt((rot + 2) % 6);<br>          try {<br>            if (place(pos + 1)) return true;<br>          }<br>          finally {<br>            cc[i1] = c1;<br>            cc[i3] = c3;<br>          }<br>        }<br>      }<br>      finally {<br>        used &amp;= ~(1 &lt;&lt; piece);<br>      }<br>    }<br>    return false;<br>  }<br>}<br> <br>// Powered by PopsEdit<br></td>