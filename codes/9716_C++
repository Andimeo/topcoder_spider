<td class="problemText" colspan="8" valign="middle" align="left">
            #include&lt;stdlib.h&gt;<br>#include&lt;math.h&gt;<br>#include&lt;iostream&gt;<br>#include&lt;string&gt;<br>#include&lt;vector&gt;<br>#include&lt;sstream&gt;<br>#include&lt;algorithm&gt;<br>#include&lt;functional&gt;<br>#include&lt;map&gt;<br>#include&lt;set&gt;<br>#include&lt;queue&gt;<br>#include&lt;stack&gt;<br>using namespace std;<br><br>#define eps 1E-9<br>#define CLR(a, k) memset(a, k, sizeof(a))<br>#define MAX(a, b) (a&gt;b)?a:b<br>#define MIN(a, b) (a&gt;b)?b:a<br>#define FOR(a, b, c) for(a = b;a&lt;c;a++)<br>const int INF = 1000000000;<br><br>typedef pair&lt;int ,int&gt; pair_ii;<br>typedef vector&lt;int&gt; VI;<br>typedef vector&lt;VI&gt; VVI;<br>typedef vector&lt;string&gt; VS;<br><br>class ConductorWalk<br>{<br>public:<br>  vector&lt;int&gt; getObserverRecords(vector&lt;int&gt; seats, vector&lt;int&gt; times, int people)<br>  {<br>    int n = seats.size();<br>    int i, j, k;<br>    vector&lt;int&gt; S;<br>    int t = 0;<br>    for(i = 0;i&lt;n;i++)<br>    {<br>      if(times[i]&gt;t)<br>        t = times[i];<br>      if(seats[i]&lt;people)<br>      {<br>        t+=seats[i];<br>        t+=seats[i];<br>      }<br>      else if(seats[i]==people)<br>      {<br>        t+=people;<br>        S.push_back(t);<br>        t+=people;<br>      }<br>      else<br>      {<br>        t+=people;<br>        S.push_back(t);<br>        t+=(seats[i]-people);<br>        t+=(seats[i]-people);<br>        S.push_back(t);<br>        t+=people;<br>      }<br>    }<br>    return S;<br>  }<br>};<br></td>