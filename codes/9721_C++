<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;vector&gt;<br>#include &lt;list&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;deque&gt;<br>#include &lt;stack&gt;<br>#include &lt;bitset&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;functional&gt;<br>#include &lt;numeric&gt;<br>#include &lt;utility&gt;<br>#include &lt;sstream&gt;<br>#include &lt;iostream&gt;<br>#include &lt;iomanip&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;ctime&gt;<br> <br>using namespace std;<br> <br>class RoadReform {<br>public:<br>  int findMaxDeadendCount(vector &lt;string&gt;);<br>};<br>int n;<br>bool d[15][15];<br>int cal(int v)<br>{<br>  int i;<br>  i=0; <br>  while (v) {i++; v^= (v&amp;(-v)); }<br>  return i;<br>}<br>int que[15],nq;<br>bool mark[15]; <br>bool pd(int v,int m)<br>{<br>  int i,j,k,l;<br>  for (i=0;i&lt;n;i++)<br>    if (v&amp;(1&lt;&lt;i))<br>    {<br>      for (j=0;j&lt;n;j++)<br>        if (d[i][j]&amp;&amp;(!(v&amp;(1&lt;&lt;j)))) break;<br>      if (j==n) return 0; <br>    }<br>  memset(mark,0,sizeof(mark)); <br>  for (i=0;i&lt;n;i++)<br>    if (!(v&amp;(1&lt;&lt;i))) break;<br>  nq=1; que[0]=i; mark[i]=1;<br>  for (l=0;l&lt;nq&amp;&amp;nq&lt;m;l++)<br>  {<br>    k=que[l]; <br>    for (i=0;i&lt;n;i++)<br>      if (d[k][i]&amp;&amp;!mark[i]&amp;&amp;(!(v&amp;(1&lt;&lt;i)))) {mark[i]=1; que[nq++]=i;}<br>  }<br>  return nq==m;<br>}<br>int RoadReform::findMaxDeadendCount(vector &lt;string&gt; roads) {<br>  int i,j,k,l,ans;<br>  n=roads.size(); <br>  if (n==2) return 2; <br>  for (i=0;i&lt;n;i++)<br>    for (j=0;j&lt;n;j++) d[i][j]= (roads[i][j]=='1'); <br>  ans=0;<br>  for (l=1;l+1&lt;(1&lt;&lt;n); l++)<br>  {<br>    k=cal(l); <br>    if (k&gt;ans&amp;&amp;pd(l,n-k)) ans=k;<br>  }<br>  return ans;<br>}<br></td>