<td class="problemText" colspan="8" valign="middle" align="left">
            #define CLASS ContiguousCache<br>#define SIGNATURE  minimumReads(int n, int k, vector &lt;int&gt; addresses)<br>#define RETURNTYPE long long<br><br>using namespace std;<br>#include &lt;iostream&gt;<br>#include &lt;vector&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;string&gt;<br>struct CLASS {<br>  RETURNTYPE SIGNATURE;<br>};<br>#define pb push_back<br>#define cs c_str()<br>#define sz size()<br>#define LET(x,a) typeof(a) x(a)<br>#define FOR(i,a,b) for(LET(i,a);i!=(b);++i)<br>#define REP(i,n) FOR(i,0,n)<br>#define EACH(i,v) FOR(i,(v).begin(),(v).end())<br>#define INF (int(1e9) + 10)<br>#define dbg(x) cout &lt;&lt; #x &lt;&lt; " " &lt;&lt; x &lt;&lt; "\t"&lt;&lt; flush;<br>#define dbge(x) cout &lt;&lt; #x &lt;&lt; " " &lt;&lt; x &lt;&lt; "\n"&lt;&lt; flush;<br>typedef long long LL;<br><br>vector&lt;int&gt; S, A; int K;<br>LL dp[128][128];<br>const LL LINF = (LL)1e18;<br>LL go (int base, int index) {<br>  if (index == A.sz) return 0;<br>  LL &amp;res = dp[base][index];<br>  if (res == -1) {<br>    res = LINF;<br>    REP(nb, S.sz) {<br>      if (A[index] &gt;= S[nb] &amp;&amp; A[index] &lt;= S[nb] + K - 1) {<br>        LL min = S[nb], max = S[nb] + K - 1;<br>        min &gt;?= S[base]; max &lt;?= S[base] + K-1;<br>        LL cur = K - (max-min+1);<br>        cur  &lt;?= K;<br>        cur += go(nb, index+1);<br>        res &lt;?= cur;<br>      }<br>    }<br>    assert (res != LINF);<br>  }<br>  return res;<br>}<br><br>RETURNTYPE CLASS::SIGNATURE {<br>  A = addresses;<br>  ::K = k;<br>  EACH(it, A) S.pb(*it), S.pb(*it-k+1);<br>  S.pb (-INF);<br>  sort(S.begin(), S.end());<br>  memset(dp,-1,sizeof(dp));<br>  return go (0,0);<br>}<br></td>