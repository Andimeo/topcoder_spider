<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>import java.util.regex.*;<br>import java.text.*;<br>import java.math.*;<br>import java.awt.geom.*;<br> <br>public class ContiguousCache<br>{<br>  int[] bases;<br>  int basec;<br>  int m;<br>  int k;<br>  <br>  int[] reqs;<br>  <br>  boolean[][] used;<br>  long[][] mem;<br>  long doit(int s, int b)<br>  {<br>    if (s == m) return 0;<br>    if (used[s][b]) return mem[s][b];<br>    long res = 1000000000000000L;<br>    int base = bases[b];<br>    int addr = reqs[s];<br>    if (addr &gt;= base &amp;&amp; addr &lt; base + k)<br>    {<br>      res = doit(s + 1, b);<br>    }<br>    else<br>    {<br>      for (int i = 0; i &lt; basec; i++)<br>      {<br>        int base2 = bases[i];<br>        if (addr &lt; base2 || addr &gt;= base2 + k) continue;<br>        int p = Math.min(k, Math.abs(base2 - base));<br>        res = Math.min(res, p + doit(s + 1, i));<br>      }<br>    }<br>    used[s][b] = true;<br>    mem[s][b] = res;<br>    return res;<br>    <br>  }<br>  <br>  public long minimumReads(int n, int k, int[] addresses)<br>  {<br>    this.k = k;<br>    reqs = addresses;<br>    m = addresses.length;<br>    bases = new int[m + m + 2];<br>    bases[basec++] = 0;<br>    bases[basec++] = n - k;<br>    for (int i: addresses)<br>    {<br>      if (i &lt; n - k) bases[basec++] = i;<br>      if (i - k + 1 &gt; 0) bases[basec++] = i - k + 1;<br>    }<br>    used = new boolean[m][basec];<br>    mem = new long[m][basec];<br>    long res = 1000000000000000L;<br>    for (int i = 0; i &lt; basec; i++)<br>    {<br>      res = Math.min(res, doit(0, i));<br>    }<br>    return k + res;<br>  }<br>  <br>  <br>}<br>//Powered by [KawigiEdit] 2.0!<br></td>