<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;vector&gt; <br>#include &lt;list&gt; <br>#include &lt;map&gt; <br>#include &lt;set&gt; <br>#include &lt;deque&gt; <br>#include &lt;queue&gt; <br>#include &lt;stack&gt; <br>#include &lt;bitset&gt; <br>#include &lt;algorithm&gt; <br>#include &lt;functional&gt; <br>#include &lt;numeric&gt; <br>#include &lt;utility&gt; <br>#include &lt;complex&gt; <br>#include &lt;sstream&gt; <br>#include &lt;iostream&gt; <br>#include &lt;iomanip&gt; <br>#include &lt;cstdio&gt; <br>#include &lt;cmath&gt; <br>#include &lt;cstdlib&gt; <br>#include &lt;cstring&gt; <br>#include &lt;ctime&gt; <br>#include &lt;cassert&gt; <br>using namespace std;<br> <br>struct WorkersOnPlane{<br>  int howMany(vector &lt;string&gt; field, int K);<br>};<br>class Graph{<br>private:<br>  struct edge{<br>    int to,cap,back;<br>  };<br>  vector&lt;vector&lt;edge&gt; &gt; adj;<br>  int n;<br>public:<br>  Graph(int n):n(n){<br>    adj.resize(n);<br>    for(int i=0;i&lt;n;i++)<br>      adj[i].clear();<br>  }<br>  ~Graph(){<br>    for(int i=0;i&lt;n;i++)<br>      adj[i].clear();<br>    adj.clear();<br>  }<br>  void insert(int i,int j,int c){<br>    adj[i].push_back((edge){j,c,adj[j].size()});<br>    adj[j].push_back((edge){i,0,adj[i].size()-1});<br>  }<br>  int dinic(int s,int t){<br>    int q[n],prev[n];<br>    int allflow=0;<br>    while(true){<br>      memset(prev,-1,sizeof(prev));<br>      int qf=0,qb=0;<br>      prev[q[qb++]=s]=-2;<br>      while(qb&gt;qf&amp;&amp;prev[t]==-1)<br>        for(int u=q[qf++],i=0,v;i&lt;adj[u].size();i++)<br>          if(prev[v=adj[u][i].to]==-1&amp;&amp;adj[u][i].cap&gt;0)<br>            prev[q[qb++]=v]=adj[u][i].back;<br>      if(prev[t]==-1)<br>        break;<br>      for(int i=0,z;i&lt;adj[t].size();i++)<br>        if(adj[z=adj[t][i].to][adj[t][i].back].cap&gt;0&amp;&amp;prev[z]!=-1){<br>          int flow=adj[z][adj[t][i].back].cap;<br>          for(int v=z,u=prev[v];u&gt;=0;v=adj[v][u].to,u=prev[v])<br>            flow&lt;?=adj[adj[v][u].to][adj[v][u].back].cap;<br>          if(!flow)<br>            continue;<br>          adj[z][adj[t][i].back].cap-=flow;<br>          adj[t][i].cap+=flow;<br>          for (int v=z,u=prev[v];u&gt;=0;v=adj[v][u].to,u=prev[v]){<br>            adj[adj[v][u].to][adj[v][u].back].cap-=flow;<br>            adj[v][u].cap+=flow;<br>          }<br>          allflow+=flow;<br>        }<br>    }<br>    return allflow;<br>  }<br>};<br>const int dx[]={1,-1,0,0};<br>const int dy[]={0,0,1,-1};<br>int label[30][30];<br>int WorkersOnPlane::howMany(vector &lt;string&gt; G, int K){<br>  int n=G.size(),m=G[0].size(),sz=0;<br>  for(int i=0;i&lt;n;i++)<br>    for(int j=0;j&lt;m;j++)<br>      if(G[i][j]=='W'||G[i][j]=='G'||G[i][j]=='S')<br>        label[i][j]=sz++;<br>  Graph flow(sz*2+2);<br>  for(int i=0;i&lt;sz;i++)<br>    flow.insert(i,i+sz,1);<br>  int src=sz*2,sink=sz*2+1;<br>  for(int i=0;i&lt;n;i++)<br>    for(int j=0;j&lt;m;j++)<br>      if(G[i][j]=='W'){<br>        vector&lt;vector&lt;int&gt; &gt; dis(n,vector&lt;int&gt;(m,-1));<br>        queue&lt;pair&lt;int,int&gt; &gt; Q;<br>        Q.push(make_pair(i,j));<br>        dis[i][j]=0;<br>        while(!Q.empty()){<br>          int x=Q.front().first,y=Q.front().second;<br>          Q.pop();<br>          for(int k=0;k&lt;4;k++){<br>            int nx=x+dx[k],ny=y+dy[k];<br>            if(0&lt;=nx&amp;&amp;nx&lt;n&amp;&amp;0&lt;=ny&amp;&amp;ny&lt;m&amp;&amp;dis[nx][ny]==-1){<br>              dis[nx][ny]=dis[x][y]+1;<br>              if(G[nx][ny]=='.'){<br>                Q.push(make_pair(nx,ny));<br>              }else if(G[nx][ny]=='G'&amp;&amp;dis[nx][ny]&lt;=K){<br>                flow.insert(label[nx][ny]+sz,label[i][j],1);<br>              }else if(G[nx][ny]=='S'&amp;&amp;dis[nx][ny]&lt;=K){<br>                flow.insert(label[i][j]+sz,label[nx][ny],1);<br>              }<br>            }<br>          }<br>        }<br>      }else if(G[i][j]=='G')<br>        flow.insert(src,label[i][j],1);<br>      else if(G[i][j]=='S')<br>        flow.insert(label[i][j]+sz,sink,1);<br>  return flow.dinic(src,sink);<br>}<br> <br> <br>//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!<br></td>