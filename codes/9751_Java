<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br><br>public class WorkersOnPlane {<br>  int [][] G, S;<br>  boolean [] V;<br><br>  char [][] F;<br><br>  int [][] L;<br><br>  int [] Qx, Qy;<br><br>  int m, n, qh, qt;<br><br><br>  void push (int x, int y, int l) {<br>    if (L[x][y] &lt;= l) return;<br>    L[x][y] = l;<br>    Qx[qt] = x;<br>    Qy[qt] = y;<br>    ++qt;<br>  };<br><br>  void gobfs (int x, int y) {<br>    for (int i = 0; i &lt;= m + 1; i++)<br>      Arrays.fill (L[i], 10000);<br><br>    qh = 0; qt = 0;<br><br>    push (x, y, 0);<br><br>    while (qh &lt; qt) {<br>      x = Qx[qh];<br>      y = Qy[qh];<br>      ++qh;<br>      if (F[x][y] != '.' &amp;&amp; F[x][y] != 'W') continue;<br>      int l = L[x][y];<br>      if (F[x + 1][y] != 'W') push (x + 1, y, l + 1);<br>      if (F[x - 1][y] != 'W') push (x - 1, y, l + 1);<br>      if (F[x][y + 1] != 'W') push (x, y + 1, l + 1);<br>      if (F[x][y - 1] != 'W') push (x, y - 1, l + 1);<br>    };<br>  };<br><br>  int fin;<br><br><br>  boolean dfs (int x) {<br>    if (x == fin) return true;<br>    V[x] = true;<br>    for (int i = 0; i &lt;= fin; i++)<br>      if (!V[i] &amp;&amp; S[x][i] &lt; G[x][i] &amp;&amp; dfs (i)) {<br>        S[x][i] += 1;<br>        S[i][x] -= 1;<br>        return true;<br>      };<br>    return false;<br>  };<br><br><br><br><br>  public int howMany (String [] ff, int k) {<br>    m = ff.length;<br>    n = ff[0].length ();<br><br>    F = new char [m + 2][n + 2];<br>    L = new int [m + 2][n + 2];<br><br>    G = new int [2 * m * n + 2][2 * m * n + 2];<br>    S = new int [2 * m * n + 2][2 * m * n + 2];<br>    V = new boolean [2 * m * n + 2];<br><br>    fin = 2 * m * n + 1;<br><br>    Qx = new int [(m + 2) * (n + 2)];<br>    Qy = new int [(m + 2) * (n + 2)];<br><br><br>    for (int i = 0; i &lt; m; i++)<br>      for (int j = 0; j &lt; n; j++)<br>        F[i + 1][j + 1] = ff[i].charAt (j);<br><br>    for (int i = 1; i &lt;= m; i++)<br>      for (int j = 1; j &lt;= n; j++)<br>        if (F[i][j] == 'W') {<br>          gobfs (i, j);<br>          for (int a = 1; a &lt;= m; a++)<br>            for (int b = 1; b &lt;= n; b++) {<br>              if (F[a][b] == 'G' &amp;&amp; L[a][b] &lt;= k)<br>                G[(a - 1) * n + (b - 1) + m * n][(i - 1) * n + (j - 1)] = 1;<br>              if (F[a][b] == 'S' &amp;&amp; L[a][b] &lt;= k)<br>                G[(i - 1) * n + (j - 1) + m * n][(a - 1) * n + (b - 1)] = 1;<br>            };<br>        };<br><br>    for (int i = 1; i &lt;= m; i++)<br>      for (int j = 1; j &lt;= n; j++) {<br>        if (F[i][j] == 'G')<br>          G[2 * m * n][(i - 1) * n + (j - 1)] = 1;<br>        if (F[i][j] == 'S')<br>          G[(i - 1) * n + (j - 1) + m * n][2 * m * n + 1] = 1;<br>        G[(i - 1) * n + (j - 1)][(i - 1) * n + (j - 1) + m * n] = 1;<br>      };<br><br><br>    int cnt = 0;<br>    do {<br>      Arrays.fill (V, false);<br>      ++cnt;<br>    } while (dfs (2 * m * n));<br><br>    <br>    return cnt - 1;<br>  };<br>};<br></td>