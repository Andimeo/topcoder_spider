<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections.Generic;<br>using System.Text;<br><br>public class MarblesInABag<br>{<br>    double loseprob = 0;<br>    double winprob = 0;<br><br>    public double getProbability(int redCount, int blueCount)<br>    {<br>        loseprob = 0.0;<br>        winprob = 0.0;<br>        <br>        if(redCount + blueCount &gt; 5000) {<br>          return 0.0;<br>        }<br><br>        SortedList&lt;int, casecell&gt; ccl = new SortedList&lt;int, casecell&gt;();<br><br>        ccl.Add(getKey(redCount, blueCount), new casecell(redCount, blueCount, 1.0));<br><br>        while (ccl.Count &gt; 0)<br>        {<br>            SortedList&lt;int, casecell&gt; nl = new SortedList&lt;int, casecell&gt;();<br><br>            foreach (KeyValuePair&lt;int, casecell&gt; kvp in ccl)<br>            {<br>                casecell tcc = (casecell)kvp.Value;<br><br>                int r = tcc.r;<br>                int b = tcc.b;<br>                double modify = tcc.m;<br><br>                if (r == 1 &amp;&amp; b == 0)<br>                {<br>                    // sid wins<br>                    loseprob += modify;<br>                    continue;<br>                }<br>                else if (r == 0 &amp;&amp; b == 1)<br>                {<br>                    // you win<br>                    winprob += modify;<br>                    continue;<br>                }<br><br>                int total = r + b;<br>                double rmodifier = 1.0 * r / total * modify;<br>                double bmodifier = 1.0 * b / total * modify;<br><br>                // r comes out<br>                {<br>                    if (b &gt; 0)<br>                    {<br>                        // add process<br>                        int tempKey = getKey(r - 1, b - 1);<br><br>                        if (nl.ContainsKey(tempKey))<br>                        {<br>                            nl[tempKey].m += rmodifier;<br>                        }<br>                        else<br>                        {<br>                            nl.Add(tempKey, new casecell(r - 1, b - 1, rmodifier));<br>                        }<br>                    }<br>                    else<br>                    {<br>                        // sid wins<br>                        loseprob += rmodifier;<br>                    }<br>                }<br><br>                // b comes out<br>                {<br>                    if (b - 1 &gt; 0)<br>                    {<br>                        // add process<br>                        int tempKey = getKey(r , b - 2);<br><br>                        if (nl.ContainsKey(tempKey))<br>                        {<br>                            nl[tempKey].m += bmodifier;<br>                        }<br>                        else<br>                        {<br>                            nl.Add(tempKey, new casecell(r, b - 2, bmodifier));<br>                        }<br>                    }<br>                    else<br>                    {<br>                        // sid wins<br>                        loseprob += bmodifier;<br>                    }<br>                }<br>            }<br><br>            ccl = nl;<br>        }<br>        <br>        return winprob;<br>    }<br><br>    public int getKey(int r, int b)<br>    {<br>        return (10000 * r + b);<br>    }<br><br>    public class casecell<br>    {<br>        public int r;<br>        public int b;<br>        public double m;<br><br>        public casecell(int ir, int ib, double im)<br>        {<br>            r = ir;<br>            b = ib;<br>            m = im;<br>        }<br>    }<br>}<br></td>