<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;vector&gt;<br>#include &lt;list&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;queue&gt;<br>#include &lt;stack&gt;<br>#include &lt;bitset&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;functional&gt;<br>#include &lt;numeric&gt;<br>#include &lt;utility&gt;<br>#include &lt;sstream&gt;<br>#include &lt;iostream&gt;<br>#include &lt;iomanip&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;ctime&gt;<br> <br>using namespace std;<br> <br>#define for_each(it, v) for (typeof((v).begin()) it = (v).begin(); it != (v).end(); ++it)<br> <br>class IdealString {<br>public:<br>  string construct(int);<br>};<br> <br>int x[100];<br>int len;<br>string best;<br> <br>void dfs(int i, int last, int sum)<br>{<br>  if (sum == len)<br>  {<br>    char s[101];<br>    memset(s, 0, sizeof(s));<br>    queue&lt;char&gt; unused;<br>    for (int j = 0; j &lt; i; j++)<br>    {<br>      s[x[j] - 1] = 'A' + j;<br>      for (int k = 0; k &lt; x[j] - 1; k++)<br>        unused.push('A' + j);<br>    }<br>    for (int j = 0; j &lt; len; j++)<br>      if (s[j] == 0)<br>      {<br>        s[j] = unused.front();<br>        unused.pop();<br>      }<br>    s[len] = '\0';<br>    if (best == "" || best &gt; string(s))<br>      best = string(s);<br>    return;<br>  }<br>  for (x[i] = last + 1; x[i] &lt;= sum + 1 &amp;&amp; sum + x[i] &lt;= len; x[i]++)<br>    dfs(i + 1, x[i], sum + x[i]);<br>}<br>string IdealString::construct(int length) {<br>  len = length;<br>  best = "";<br>  dfs(0, 0, 0);<br>  return best;<br>}<br> <br> <br>//Powered by [KawigiEdit] 2.0!<br></td>