<td class="problemText" colspan="8" valign="middle" align="left">
            public class SquareCovering <br>{<br>  public bool contains(int[] ar, int looking)<br>  {<br>    for(int i=0;i&lt;ar.Length;i++)<br>    {<br>      if(ar[i] == looking) { return true; }<br>    }<br>    return false;<br>  }<br>  public int getMinimalSide(int[] px, int[] py)<br>  {<br>    int minX=100000;<br>    int minY=100000;<br>    int maxX=-100000;<br>    int maxY=-100000;<br>    <br>    for(int i=0;i&lt;px.Length;i++)<br>    {<br>      if(px[i]&lt;minX) { minX=px[i]; }<br>      if(px[i]&gt;maxX) { maxX=px[i]; }<br>      if(py[i]&lt;minY) { minY=py[i]; }<br>      if(py[i]&gt;maxY) { maxY=py[i]; }<br>    }<br>    //System.Console.WriteLine(minX);<br>    //System.Console.WriteLine(maxX);<br>    //System.Console.WriteLine(minY);<br>    //System.Console.WriteLine(maxY);<br>    <br>    int side = System.Math.Max((maxY-minY),(maxX-minX));<br>    <br>    bool xSide = false; if(side==(maxX-minX)) { xSide = true; }<br>    bool ySide = false; if(side==(maxY-minY)) { ySide = true; }<br>    if(xSide &amp;&amp; ySide)<br>    {<br>      for(int i=0;i&lt;px.Length;i++)<br>      {<br>        if(px[i] != minX &amp;&amp; px[i] != maxX &amp;&amp; py[i] != minY &amp;&amp; py[i] != maxY) { return -1; }<br>      }<br>      <br>      return side; <br>    }<br>    <br>    bool oneCheck = true;<br>    <br>    for(int i=0;i&lt;px.Length;i++)<br>    {<br>      if(xSide)<br>      {<br>        if(px[i] != minX &amp;&amp; px[i] != maxX &amp;&amp; py[i] != minY &amp;&amp; py[i] != minY+side) { oneCheck = false; }<br>      }<br>      if(ySide)<br>      {<br>        if(px[i] != minX &amp;&amp; px[i] != minX+side &amp;&amp; py[i] != minY &amp;&amp; py[i] != maxY) { oneCheck = false; }<br>      }<br>    }<br>    <br>    if(oneCheck) { return side; }<br>    <br>    bool twoCheck = true; <br>    <br>    for(int i=0;i&lt;px.Length;i++)<br>    {<br>      if(xSide)<br>      {<br>        if(px[i] != minX &amp;&amp; px[i] != maxX &amp;&amp; py[i] != maxY-side &amp;&amp; py[i] != maxY) { twoCheck = false; }<br>      }<br>      if(ySide)<br>      {<br>        if(px[i] != maxX-side &amp;&amp; px[i] != maxX &amp;&amp; py[i] != minY &amp;&amp; py[i] != maxY) { twoCheck = false; }<br>      }<br>    }<br>    <br>    if(twoCheck) { return side; }<br>    else { return -1; }<br>    <br>  }<br>}<br></td>