<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections;<br>using System.Collections.Generic;<br><br>public class PointsGame {<br>    int N;<br>    Dictionary&lt;string, double&gt; mem = new Dictionary&lt;string, double&gt;();<br>    double[,] dis;<br>    public double gameValue(int[] pointsX, int[] pointsY) {<br>        N = pointsX.Length;<br>        dis = new double[N, N];<br>        for (int i = 0; i &lt; N; i++) {<br>            for (int j = 0; j &lt; N; j++) {<br>                dis[i,j]=Math.Sqrt((pointsX[i]-pointsX[j])*(pointsX[i]-pointsX[j])+(pointsY[i]-pointsY[j])*(pointsY[i]-pointsY[j]));<br>            }<br>        }<br><br>        return dBest(new int[N]);<br><br><br>    }<br><br>    private double dBest(int[] state) {<br>        string hash = shash(state);<br>        if (mem.ContainsKey(hash)) return mem[hash];<br>        int countwhite = 0;<br><br>        for (int i = 0; i &lt; N; i++) {<br>            if (state[i] == 0) countwhite++;<br>        }<br>        if (countwhite == 0) return score(state);<br>        int next = (N - countwhite) % 2 + 1;<br><br>        double best = 0;<br>        if (next == 2) best = double.MaxValue;<br>        for (int i = 0; i &lt; N; i++) if (state[i]==0) {<br>                state[i] = next;<br>                double d = dBest(state);<br>                if (next == 2) best = Math.Min(best, d);<br>                if (next == 1) best = Math.Max(best, d);<br>                state[i] = 0;<br>        }<br>    mem.Add(hash, best);<br>    return best;<br>    }<br><br>    private double score(int[] state) {<br>        double tot = 0;<br>        for (int i = 0; i &lt; N; i++) if (state[i]==1) {<br>                for (int j = 0; j &lt; N; j++) if (state[j]==2) {<br>                        tot += dis[i, j];<br>                }<br>        }<br>    return tot;<br>    }<br><br>    private string shash(int[] points) {<br>        char[] c = new char[N];<br>        for (int i = 0; i &lt; N; i++) {<br>            c[i] = (char)('0' + points[i]);<br>        }<br>        return new string(c);<br>    }<br>}<br></td>