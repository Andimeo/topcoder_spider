<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;vector&gt;<br>#include &lt;list&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;deque&gt;<br>#include &lt;queue&gt;<br>#include &lt;stack&gt;<br>#include &lt;bitset&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;functional&gt;<br>#include &lt;numeric&gt;<br>#include &lt;utility&gt;<br>#include &lt;sstream&gt;<br>#include &lt;iostream&gt;<br>#include &lt;iomanip&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cctype&gt;<br>#include &lt;string&gt;<br>#include &lt;cstring&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;ctime&gt;<br> <br>using namespace std;<br> <br>#define SIZE(X) ((int)(X.size()))<br>#define MP(X,Y) make_pair(X,Y)<br>#define two(X) (1&lt;&lt;(X))<br>#define contain(S,X) (((S)&amp;two(X))!=0)<br>template&lt;class T&gt; inline void checkmin(T &amp;a,T b){if(b&lt;a) a=b;}<br>template&lt;class T&gt; inline void checkmax(T &amp;a,T b){if(b&gt;a) a=b;}<br>template&lt;class T&gt; inline T sqr(T x){return x*x;}<br>typedef pair&lt;int,int&gt; ipair;<br> <br>class PointsGame<br>{<br>public:<br>  int n;<br>  double D[12][12];<br>  map&lt;ipair,double&gt; M;<br>  double solve(int set1,int set2,int side)<br>  {<br>    ipair buf=MP(set1,set2);<br>    if (M.find(buf)!=M.end()) return M[buf];<br>    if (set1+set2==two(n)-1)<br>    {<br>      double total=0;<br>      for (int i=0;i&lt;n;i++) if (contain(set1,i))<br>        for (int j=0;j&lt;n;j++) if (contain(set2,j))<br>          total+=D[i][j];<br>      return M[buf]=total;<br>    }<br>    double result=(side==0)?-1e100:1e100;<br>    for (int i=0;i&lt;n;i++) if (!contain(set1,i) &amp;&amp; !contain(set2,i))<br>    {<br>      double t=solve(set2,set1|two(i),1-side);<br>      if (side==0) checkmax(result,t);<br>      else checkmin(result,t);<br>    }<br>    return M[buf]=result;<br>  }<br>  double gameValue(vector &lt;int&gt; pointsX, vector &lt;int&gt; pointsY)<br>  {<br>    n=SIZE(pointsX);<br>    for (int i=0;i&lt;n;i++) for (int j=0;j&lt;n;j++) <br>      D[i][j]=sqrt((double)sqr(pointsX[i]-pointsX[j])+sqr(pointsY[i]-pointsY[j]));<br>    M.clear();<br>    double result=solve(0,0,0);<br>    return result;<br>  }<br>};<br> <br> <br> <br>// Powered by PopsEdit<br></td>