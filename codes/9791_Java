<td class="problemText" colspan="8" valign="middle" align="left">
            import static java.lang.Math.*;<br>import static java.math.BigInteger.*;<br>import static java.util.Arrays.*;<br>import static java.util.Collections.*;<br>import java.math.*;<br>import java.util.*;<br><br>public class PointsGame {<br>  public double gameValue(int[] pointsX, int[] pointsY) {<br>    n = pointsX.length;<br>    int size = 1;<br>    for (int i = 0; i &lt; n; i++) size *= 3;<br>    dp = new double[size];<br>    fill(dp, -1);<br>    this.px = pointsX;<br>    this.py = pointsY;<br>    double res = dp(new int[n], 0, 0);<br>    debug(res);<br>    return res;<br>  }<br>  int n;<br>  int[] px, py;<br>  double[] dp;<br>  double dp(int[] is, int turn, int m) {<br>    int id = getID(is);<br>    if (dp[id] &gt;= 0) return dp[id];<br>    double res = 0;<br>    if (m == n) {<br>      for (int i = 0; i &lt; n; i++) {<br>        for (int j = i + 1; j &lt; n; j++) {<br>          if (is[i] != is[j]) {<br>            res += hypot(px[i] - px[j], py[i] - py[j]);<br>          }<br>        }<br>      }<br>    } else if (turn == 0) {<br>      for (int i = 0; i &lt; n; i++) if (is[i] == 0) {<br>        is[i] = 1;<br>        res = max(res, dp(is, 1, m + 1));<br>        is[i] = 0;<br>      }<br>    } else {<br>      res = Double.POSITIVE_INFINITY;<br>      for (int i = 0; i &lt; n; i++) if (is[i] == 0) {<br>        is[i] = 2;<br>        res = min(res, dp(is, 0, m + 1));<br>        is[i] = 0;<br>      }<br>    }<br>    return dp[id] = res;<br>  }<br>  int getID(int[] is) {<br>    int res = 0;<br>    for (int i = 0; i &lt; is.length; i++) {<br>      res = res * 3 + is[i];<br>    }<br>    return res;<br>  }<br>  void debug(Object...os) {<br>    System.err.println(Arrays.deepToString(os));<br>  }<br>}<br></td>