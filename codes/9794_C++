<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;algorithm&gt;<br>#include &lt;vector&gt;<br>#include &lt;string&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;iostream&gt;<br>using namespace std;<br><br><br>const int INF = 1 &lt;&lt; 30;<br>struct PAIR{<br>  int cost;<br>  int num;<br>  bool operator &lt; (PAIR &amp; p) const<br>  {<br>    return (cost &lt; p.cost || cost == p.cost &amp;&amp; num &lt; p.num);<br>  }<br>  PAIR(){<br>    cost = INF;<br>    num = INF;<br>  }<br>};<br><br>const int nmax = 128;<br><br>PAIR F[128][128];<br>bool used[128][128];<br><br>vector&lt;int&gt; cp;<br>vector&lt;int&gt; enc;<br>vector&lt;int&gt; exc;<br>int tprice;<br>bool ind;<br><br><br>void getMove(int i, int k){<br>  if (i - 1 &gt;= 0 &amp;&amp; cp[i-1] != -1){<br>    PAIR cand;<br>    cand.cost = F[i][k].cost + cp[i-1];<br>    cand.num = F[i][k].num + 1;<br>    if (cand &lt; F[i-1][k])<br>    {<br>      F[i-1][k] = cand;<br>      ind = true;<br>    }<br>  }<br>  if (i + 1 &lt; cp.size() &amp;&amp; cp[i+1] != -1){<br>    PAIR cand;<br>    cand.cost = F[i][k].cost + cp[i+1];<br>    cand.num = F[i][k].num + 1;<br>    if (cand &lt; F[i+1][k])<br>    {<br>      F[i+1][k] = cand;<br>      ind = true;<br>    }<br>  }<br>  for (int idx = 0; idx &lt; enc.size(); idx++){<br>    if (enc[idx] == i){<br>      int to = exc[idx];<br>      if (cp[to] != -1)<br>      {<br>        PAIR cand;<br>        cand.cost = F[i][k].cost + tprice + k;<br>        cand.num = F[i][k].num + 1;<br>        if (cand &lt; F[to][k + 1]){<br>          F[to][k + 1] = cand;<br>          ind = true;<br>        }<br>      }<br>    }    <br>  }<br>}<br><br>vector&lt;int&gt; MAIN()<br>{<br>  ind = true;<br>  while (ind){<br>    ind = false;<br>    cout &lt;&lt; "try\n";<br>    for (int i = 0; i &lt; cp.size(); i++)<br>      for (int k = 0; k &lt;= enc.size(); k++)<br>        {<br>          getMove(i,k);<br>        }<br>  }<br>  <br>  int n = cp.size() - 1;<br>  PAIR _min;<br>  _min.cost = INF;<br>  _min.num = INF;<br>  for (int i = 0; i &lt;= enc.size(); i++)<br>    if (F[n][i] &lt; _min)<br>      _min = F[n][i];<br>  vector&lt;int&gt; res;<br>  if (_min.cost != INF)<br>  {<br>    res.push_back(_min.cost);<br>    res.push_back(_min.num);<br>  }<br>  return res;<br>}<br><br>void inith(){<br>  for (int i = 0; i &lt; nmax; i++)<br>    for (int j = 0; j &lt; nmax; j++)<br>    {<br>      F[i][j].cost = INF;<br>      F[i][j].num = INF;<br>    }<br>}<br><br>class CheapestRoute<br>{<br>public:<br>    vector &lt;int&gt; routePrice(vector &lt;int&gt; cellPrice, vector &lt;int&gt; enterCell, vector &lt;int&gt; exitCell, int teleportPrice)<br>    {<br>        cp = cellPrice;<br>        enc = enterCell;<br>        exc = exitCell;<br>        tprice = teleportPrice;<br>        inith();<br>        F[0][0].cost = 0;<br>        F[0][0].num = 0;<br>        return MAIN();        <br>    }<br>};<br></td>