<td class="problemText" colspan="8" valign="middle" align="left">
            #line 169 "Doorknobs.cpp"<br> <br>using namespace std;<br> <br>#include &lt;string&gt;<br>#include &lt;vector&gt;<br> <br>class Doorknobs {<br>public:<br>    static const int INF = 1000000000;<br>    <br>    static const int MAXN = 64;<br>    static const int MAXD = 8;<br>    static const int MAXQ = MAXN * MAXN;<br> <br>    int X, Y;<br>    int grid[MAXN][MAXN];<br>    int ndoors;<br>    int need;<br>    int doorx[MAXD], doory[MAXD];<br>    int dist[MAXD][MAXN][MAXN];<br>    int used[MAXD];<br> <br>    int search( int curx, int cury, int num_hit ) {<br>  if (num_hit == need)<br>      return 0;<br> <br> <br>  int best = INF;<br>  for (int i = 0; i &lt; ndoors; i++)<br>      if (!used[i]) {<br>    used[i] = 1;<br>    best &lt;?= dist[i][curx][cury] + search( doorx[i], doory[i], num_hit + 1 );<br>    used[i] = 0;<br>      }<br>  return best;<br>    }<br> <br>    int seen[MAXN][MAXN];<br>    int qx[MAXQ], qy[MAXQ], qc[MAXQ];<br>    int qf, qr;<br> <br>    void build_dist( int d ) {<br>  const int dx[] = { 1, 0, -1, 0 };<br>  const int dy[] = { 0, 1, 0, -1 };<br> <br>  int i, j;<br>  <br>  for (i = 0; i &lt; X; i++)<br>      for (j = 0; j &lt; Y; j++) {<br>    seen[i][j] = 0;<br>    dist[d][i][j] = INF;<br>      }<br> <br>  qf = qr = 0;<br>  qx[qr] = doorx[d];<br>  qy[qr] = doory[d];<br>  qc[qr] = 0;<br>  qr++;<br>  while (qf &lt; qr) {<br>      int x, y, c;<br>      x = qx[qf]; y = qy[qf]; c = qc[qf]; qf++;<br>      dist[d][x][y] = c;<br>      for (i = 0; i &lt; 4; i++) {<br>    int nx = x + dx[i];<br>    int ny = y + dy[i];<br>    if (nx &gt;= 0 &amp;&amp; nx &lt; X &amp;&amp; ny &gt;= 0 &amp;&amp; ny &lt; Y<br>        &amp;&amp; !seen[nx][ny] &amp;&amp; !grid[nx][ny]) {<br>        seen[nx][ny] = 1;<br>        qx[qr] = nx;<br>        qy[qr] = ny;<br>        qc[qr] = c+1;<br>        qr++;<br>    }<br>      }<br>  }<br>    }<br> <br>    int shortest(vector &lt;string&gt; a, int b) {<br>  X = a.size();<br>  Y = a[0].size();<br>  //doorx[0] = doory[0] = 0;<br>  //ndoors = 1;<br>  ndoors = 0;<br>  need = b;<br>  for (int i = 0; i &lt; X; i++)<br>      for (int j = 0; j &lt; Y; j++) {<br>    switch (a[i][j]) {<br>    case '.':<br>        grid[i][j] = 0;<br>        break;<br> <br>    case 'o':<br>        grid[i][j] = 0;<br>        doorx[ndoors] = i;<br>        doory[ndoors] = j;<br>        ndoors++;<br>        break;<br> <br>    case '#':<br>        grid[i][j] = 1;<br>        break;<br>    }<br>      }<br> <br>  for (int i = 0; i &lt; ndoors; i++)<br>      build_dist( i );<br> <br>  for (int i = 0; i &lt; ndoors; i++)<br>      used[i] = 0;<br> <br>  int answer = search( 0, 0, 0 );<br>  if (answer == INF)<br>      return -1;<br> <br>  return answer;<br>    }<br>};<br></td>