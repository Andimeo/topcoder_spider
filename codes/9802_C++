<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;iostream&gt;<br>#include &lt;vector&gt;<br>#include &lt;string&gt;<br>#include &lt;map&gt;<br>#include &lt;sstream&gt;<br><br>using namespace std;<br><br>struct TournamentSeeding<br>{<br>  vector&lt;string&gt; parse(vector&lt;string&gt; v)<br>  {<br>    string s;<br>    for (int i=0; i&lt;v.size(); i++)<br>      s += v[i];<br>    istringstream sin(s+" ");<br>    vector&lt;string&gt; res;<br>    for (;;)<br>    {<br>      sin &gt;&gt; s;<br>      if (sin.eof())<br>        break;<br>      res.push_back(s);<br>    }<br>    return res;<br>  }<br>  vector&lt;pair&lt;int, int&gt; &gt; g;<br>  map&lt;string, int&gt; m;<br>  vector&lt;int&gt; lose;<br>  vector&lt;int&gt; wins;<br>  vector&lt;int&gt; a;<br>  vector&lt;bool&gt; u;<br>  int n;<br>  vector&lt;int&gt; w;<br>  bool f(int i)<br>  {<br>//    cout &lt;&lt; i &lt;&lt; endl;<br>    u[a[i]] = true;<br>    vector&lt;pair&lt;int, int&gt; &gt; t;<br>    for (int j=0; j&lt;n; j++)<br>      if (lose[j] == a[i])<br>        t.push_back(make_pair(wins[j], j));<br>    sort(t.begin(), t.end());<br>    int nn = n;<br>    for (int j=0; j&lt;t.size(); j++, nn&gt;&gt;=1)<br>    {<br>//      cout &lt;&lt; i &lt;&lt; " " &lt;&lt; t[j].first &lt;&lt; " " &lt;&lt; t[j].second &lt;&lt; endl;<br>      if (t[j].first != j)<br>        return false;<br>      a[nn-i-1] = t[j].second;<br>      w[j]--;<br>      if (!f(nn-i-1))<br>        return false;<br>    }<br>    return true;<br>  }<br>  vector&lt;string&gt; getSeeds(vector&lt;string&gt; teams, vector&lt;string&gt; games, vector&lt;int&gt; s)<br>  {<br>    vector&lt;string&gt; t = parse(teams);<br>    vector&lt;string&gt; gg = parse(games);<br>    sort(t.begin(), t.end());<br>    n = t.size();<br>    int i, j;<br>    for (i=0; i&lt;n; i++)<br>      m[t[i]] = i;<br>    for (i=0; i&lt;gg.size(); i++, i++)<br>      g.push_back(make_pair(m[gg[i]], m[gg[i+1]]));<br>    lose = vector&lt;int&gt;(n, -1);<br>    wins = vector&lt;int&gt;(n, 0);<br>    for (i=0; i&lt;g.size(); i++)<br>    {<br>      wins[g[i].first]++;<br>      if (lose[g[i].second] != -1)<br>        return vector&lt;string&gt;();<br>      lose[g[i].second] = g[i].first;      <br>    }<br>    w = vector&lt;int&gt;(20, 0);<br>    for (i=0; i&lt;n; i++)<br>      w[wins[i]]++;<br>    a = vector&lt;int&gt;(n, -1);<br>    u = vector&lt;bool&gt;(n, false);<br>    for (i=0; i&lt;n; i++)<br>    {<br>      if (a[i] != -1)<br>        continue;<br>      int k = 0;<br>      for (j=19; j; j--)<br>      {<br>        k += w[j];<br>        if (k+i == n&gt;&gt;j &amp;&amp; k)<br>          break;<br>      }<br>      k = j;<br>//      cout &lt;&lt; i &lt;&lt; " " &lt;&lt; k &lt;&lt; endl;<br>      for (j=0; j&lt;n; j++)<br>        if (!u[j] &amp;&amp; lose[j] == -1 &amp;&amp; wins[j] &gt;= k)<br>          break;<br>      if (j == n)<br>        return vector&lt;string&gt;();<br>//      cout &lt;&lt; i &lt;&lt; " " &lt;&lt; t[j] &lt;&lt; endl;<br>      a[i] = j;<br>      w[wins[j]]--;<br>      if (!f(i))<br>        return vector&lt;string&gt;();<br>    }<br>    vector&lt;string&gt; res;<br>    for (i=0; i&lt;s.size(); i++)<br>      res.push_back(t[a[s[i]]]);<br>    return res;<br>  }<br>};<br></td>