<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;iostream&gt; <br>#include &lt;vector&gt; <br>#include &lt;queue&gt; <br>#include &lt;string&gt; <br>#include &lt;cctype&gt; <br>#include &lt;cmath&gt; <br>#include &lt;list&gt; <br>#include &lt;iomanip&gt; <br>#include &lt;sstream&gt; <br>#include &lt;algorithm&gt; <br>#include &lt;map&gt; <br>#include &lt;set&gt; <br>using namespace std; <br><br>class WordFindPuzzle { <br> public: <br>  int solveWordFindPuzzle(vector &lt;string&gt; words, vector &lt;string&gt; board)<br>  { <br>   int ans = 0;<br>   for (int i = 0; i &lt; words.size(); i++)<br>    ans += perfect(words[i], board);<br>   return ans;<br>  } <br>  bool perfect(string word, vector &lt;string&gt; &amp;board)<br>  {<br>   bool hor = false, ver = false;<br>   for (int i = 0; i &lt; board.size(); i++)<br>   {<br>    string s = board[i];<br>    if (s.find(word) != -1)<br>    {<br>     hor = true;<br>     break;<br>    }<br>    reverse(s.begin(), s.end());<br>    if (s.find(word) != -1)<br>    {<br>     hor = true;<br>     break;<br>    }<br>   }<br>   for (int i = 0; i &lt; board[0].size(); i++)<br>   {<br>    string s = "";<br>    for (int j = 0; j &lt; board.size(); j++)<br>     s += board[j][i];<br>    if (s.find(word) != -1)<br>    {<br>     ver = true;<br>     break;<br>    }<br>    reverse(s.begin(), s.end());<br>    if (s.find(word) != -1)<br>    {<br>     ver = true;<br>     break;<br>    }<br>   }<br>   return hor &amp;&amp; ver;<br>  }<br>};<br></td>