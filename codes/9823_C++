<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;algorithm&gt;<br>#include &lt;cassert&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cstring&gt;<br>#include &lt;deque&gt;<br>#include &lt;iostream&gt;<br>#include &lt;map&gt;<br>#include &lt;queue&gt;<br>#include &lt;set&gt;<br>#include &lt;sstream&gt;<br>#include &lt;string&gt;<br>#include &lt;utility&gt;<br>#include &lt;vector&gt;<br>using namespace std;<br> <br>#line 20<br>#define FORE(i, a, b)   for(int i = int(a); i &lt;= int(b); ++i)<br> <br>#line 26<br>#define IT(c)           __typeof((c).begin())<br>#define FORIT(i, c)     for(IT(c) i = (c).begin(); i != (c).end(); ++i)<br>#define SZ(c)           (int((c).size()))<br> <br>#line 174<br>struct OrderedSuperString {<br>    int getLength(vector&lt;string&gt; words);<br>};<br> <br>#line 286<br>int OrderedSuperString::getLength(vector&lt;string&gt; words)<br>{<br>    string res;<br>    int last = 0;<br>    FORIT(it, words) {<br>        FORE(pos, last, SZ(res)) {<br>            int n;<br>            for (n = 0; n &lt; SZ(*it); ++n) {<br>                if (pos + n &gt;= SZ(res)) break;<br>                if (res[pos + n] != (*it)[n]) goto fail;<br>            }<br>            last = pos;<br>            if (n &lt; SZ(*it)) res += string(it-&gt;begin() + n, it-&gt;end());<br>            break;<br>        fail: continue;<br>        }<br>    }<br>    return SZ(res);<br>}<br></td>