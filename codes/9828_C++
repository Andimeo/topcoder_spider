<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;vector&gt;<br>#include &lt;list&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;deque&gt;<br>#include &lt;queue&gt;<br>#include &lt;stack&gt;<br>#include &lt;bitset&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;functional&gt;<br>#include &lt;numeric&gt;<br>#include &lt;utility&gt;<br>#include &lt;sstream&gt;<br>#include &lt;iostream&gt;<br>#include &lt;iomanip&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cctype&gt;<br>#include &lt;string&gt;<br>#include &lt;cstring&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;ctime&gt;<br> <br>using namespace std;<br> <br> <br>class MagicalSpheres<br>{<br>public:<br>  int limit;<br>  bool prime[100005];<br>  bool f[100005];<br>  int count(int n,int p)<br>  {<br>    return (n&lt;p)?0:(n/p)+count(n/p,p);<br>  }<br>  int divideWork(int sd, int fd, int _limit)<br>  {<br>    int n=sd+fd;<br>    int m=sd;<br>    limit=_limit;<br>    memset(prime,true,sizeof(prime));<br>    memset(f,false,sizeof(f));<br>    f[1]=true;<br>    for (int i=2;i&lt;=limit;i++) if (prime[i])<br>    {<br>      for (int k=i+i;k&lt;=limit;k+=i) prime[k]=false;<br>      int c1=count(n,i);<br>      int c2=count(m,i);<br>      int c3=count(n-m,i);<br>      int c=c1-c2-c3;<br>      for (;c&gt;0;c--)<br>        for (int k=limit/i;k&gt;0;k--)<br>          if (f[k])<br>            f[k*i]=true;<br>    }<br>    int result=limit;<br>    for (;!f[result];result--);<br>    return result;<br>  }<br>};<br></td>