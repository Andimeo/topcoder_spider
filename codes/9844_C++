<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;cstdio&gt;<br>#include &lt;cstring&gt;<br>#include &lt;iostream&gt;<br>#include &lt;sstream&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;queue&gt;<br>#include &lt;bitset&gt;<br>#include &lt;vector&gt;<br>#include &lt;string&gt;<br>#include &lt;cmath&gt;<br>using namespace std;<br><br>#define FR(i,a,n) for(int (i) = (a); (i)&lt;(n); (i)++)<br>#define RF(i,a,n) for(int (i) = int(n)-1; (i)&gt;=(a); (i)--)<br>#define FOR(i,n) FR(i,0,n)<br>#define ROF(i,n) RF(i,0,n)<br><br>typedef long long ll;<br>typedef long double ld;<br>typedef pair&lt;int,int&gt; pii;<br>typedef pair&lt;ll,ll&gt; pll;<br>typedef vector&lt;int&gt; vi;<br>typedef vector&lt;string&gt; vs;<br><br>int dr[8] = {-1,0,1,0,-1,-1,1,1};<br>int dc[8] = {0,1,0,-1,-1,1,-1,1};<br><br>int N;<br>int adj[50][50];<br>int d[50];<br><br>void dfs(int v, int p, vector&lt;string&gt;&amp; G)<br>{<br>  FOR(i,N)<br>  {<br>    if(i!=p &amp;&amp; G[v][i]=='Y')<br>    {<br>      adj[v][d[v]++] = i;<br>      dfs(i, v, G);<br>    }<br>  }<br>}<br>const ll MOD = 112901989;<br>int K;<br>ll DP[50][52][51][2];<br><br>ll solve(int v, int k, int i, int sel)<br>{<br>  ll&amp; ret = DP[v][k][i][sel];<br>  if(ret!=-1)<br>    return ret;<br>  if(i==d[v])<br>    return ret = 1;<br>  ret = 0;<br>  if(sel)<br>  {<br>    if(k&gt;0)<br>    {<br>      ret += solve(v, k-1, i+1, sel) * solve(adj[v][i], K-1, 0, 1);<br>      ret%=MOD;<br>    }<br>    ret += solve(v, k, i+1, sel) * solve(adj[v][i], K, 0, 0);<br>    ret%=MOD;<br>  }<br>  else<br>  {<br>    ret += solve(v, k, i+1, sel) * solve(adj[v][i], K, 0, 1);<br>    ret%=MOD;<br>    ret += solve(v, k, i+1, sel) * solve(adj[v][i], K, 0, 0);<br>    ret%=MOD;<br>  }<br>  return ret;<br>}<br><br><br>class TreeCount<br>{<br>public:<br>  vector&lt;int&gt; count(vector&lt;string&gt; G)<br>  {<br>    N = G.size();<br>    dfs(0, -1, G);<br>    vector&lt;int&gt; ret;<br>    FOR(i,N)<br>    {<br>      K = i;<br>      memset(DP, -1, sizeof(DP));<br>      ret.push_back( int( (solve(0,K,0,0)+solve(0,K,0,1))%MOD ) );<br>    }<br>    return ret;<br>  }<br>};<br></td>