<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;vector&gt;<br>#include &lt;list&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;deque&gt;<br>#include &lt;queue&gt;<br>#include &lt;stack&gt;<br>#include &lt;bitset&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;functional&gt;<br>#include &lt;numeric&gt;<br>#include &lt;utility&gt;<br>#include &lt;sstream&gt;<br>#include &lt;iostream&gt;<br>#include &lt;iomanip&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cctype&gt;<br>#include &lt;string&gt;<br>#include &lt;cstring&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;ctime&gt;<br><br>using namespace std;<br><br>#define LENGTH(X) ((int)(X.length()))<br><br>const int MX[]={-1,-1,1,1};<br>const int MY[]={-1,1,-1,1};<br><br>class RussianCheckers<br>{<br>public:<br>  vector&lt;string&gt; result;<br>  int sWin;<br>  string getstr(int x,int y)<br>  {<br>    char c1=char('a'+y);<br>    char c2=char('1'+(7-x));<br>    string s="";<br>    s+=c1;<br>    s+=c2;<br>    return s;<br>  }<br>  bool capture(vector&lt;string&gt; &amp;A,int x1,int y1,int dx,int dy,int L,int &amp;x3,int &amp;y3)<br>  {<br>    int C=0;<br>    for (int i=1;i&lt;=L-1;i++)<br>    {<br>      int x0=x1+i*dx,y0=y1+i*dy;<br>      if (A[x0][y0]=='*') {C++;x3=x0;y3=y0;}<br>      else if (A[x0][y0]!='.') return false;<br>    }<br>    return C==1;<br>  }<br>  bool can_capture(vector&lt;string&gt; &amp;A,int x,int y,char key)<br>  {<br>    for (int d=0;d&lt;4;d++)<br>    {<br>      int dx=MX[d],dy=MY[d];<br>      int maxL=(key=='w')?2:8;<br>      for (int L=2;L&lt;=maxL;L++)<br>      {<br>        int x2=x+dx*L,y2=y+dy*L;<br>        if (x2&lt;0 || x2&gt;=8 || y2&lt;0 || y2&gt;=8 || A[x2][y2]!='.') continue;<br>        int x3,y3;<br>        if (capture(A,x,y,dx,dy,L,x3,y3)) return true;<br>      }<br>    }<br>    return false;<br>  }<br>  void search(vector&lt;string&gt; &amp;A,int x,int y,string move)<br>  {<br>    if (LENGTH(move)&gt;0) move+=':';<br>    move+=getstr(x,y);<br>    if (!can_capture(A,x,y,A[x][y]))<br>    {<br>      if (LENGTH(move)&gt;4) result.push_back(move);<br>      return;<br>    }<br>    char key=A[x][y];<br>    for (int d=0;d&lt;4;d++)<br>    {<br>      int dx=MX[d],dy=MY[d];<br>      int maxL=(key=='w')?2:8;<br>      for (int L=2;L&lt;=maxL;L++)<br>      {<br>        int x2=x+dx*L,y2=y+dy*L;<br>        if (x2&lt;0 || x2&gt;=8 || y2&lt;0 || y2&gt;=8 || A[x2][y2]!='.') continue;<br>        int x3,y3;<br>        if (!capture(A,x,y,dx,dy,L,x3,y3)) continue;<br>        A[x3][y3]='#';<br>        int LC=abs(x3-x);<br>        bool find=false;<br>        for (int k=LC+1;!find &amp;&amp; k&lt;=maxL;k++)<br>        {<br>          int x3=x+k*dx,y3=y+k*dy;<br>          if (x3&lt;0 || x3&gt;=8 || y3&lt;0 || y3&gt;=8 || A[x3][y3]!='.') break;<br>          swap(A[x][y],A[x3][y3]);<br>          if (x3==sWin) A[x3][y3]='W';<br>          if (can_capture(A,x3,y3,key)) find=true;<br>          swap(A[x][y],A[x3][y3]);<br>          A[x][y]=key;<br>        }<br>        swap(A[x][y],A[x2][y2]);<br>        if (x2==sWin) A[x2][y2]='W';<br>        bool cap_now=can_capture(A,x2,y2,key);<br>        swap(A[x][y],A[x2][y2]);<br>        A[x][y]=key;<br>        if (!find || cap_now)<br>        {<br>          swap(A[x][y],A[x2][y2]);<br>          if (x2==sWin) A[x2][y2]='W';<br>          search(A,x2,y2,move);<br>          swap(A[x][y],A[x2][y2]);<br>          A[x][y]=key;<br>        }<br>        A[x3][y3]='*';<br>      }<br>    }<br>  }<br>  vector&lt;string&gt; listMoves(vector&lt;string&gt; board, string turn)<br>  {<br>    result.clear();<br>    if (turn=="BLACK") <br>      for (int i=0;i&lt;8;i++) for (int j=0;j&lt;8;j++)<br>        if (board[i][j]=='B' || board[i][j]=='W')<br>          board[i][j]='B'+'W'-board[i][j];<br>        else if (board[i][j]=='b' || board[i][j]=='w')<br>          board[i][j]='b'+'w'-board[i][j];<br>    sWin=(turn=="BLACK")?7:0;<br>    for (int i=0;i&lt;8;i++) for (int j=0;j&lt;8;j++) if (board[i][j]=='b' || board[i][j]=='B') board[i][j]='*';<br>    for (int i=0;i&lt;8;i++) for (int j=0;j&lt;8;j++) if (board[i][j]=='w' || board[i][j]=='W') search(board,i,j,"");<br>    if (result.empty())<br>      for (int i=0;i&lt;8;i++) for (int j=0;j&lt;8;j++) if (board[i][j]=='w' || board[i][j]=='W')<br>      {<br>        for (int d=0;d&lt;4;d++)<br>        {<br>          int dx=MX[d],dy=MY[d];<br>          int x=i,y=j;<br>          if (board[i][j]=='w' &amp;&amp; (sWin==0 &amp;&amp; dx&gt;0 || sWin==7 &amp;&amp; dx&lt;0)) continue;<br>          int maxL=(board[i][j]=='w')?1:8;<br>          for (int L=1;L&lt;=maxL;L++)<br>          {<br>            int x2=x+dx*L,y2=y+dy*L;<br>            if (x2&lt;0 || x2&gt;=8 || y2&lt;0 || y2&gt;=8 || board[x2][y2]!='.') continue;<br>            bool empty=true;<br>            for (int k=1;k&lt;=L-1;k++)<br>              if (board[x+dx*k][y+dy*k]!='.')<br>                empty=false;<br>            if (!empty) continue;<br>            result.push_back(getstr(x,y)+"-"+getstr(x2,y2));<br>          }<br>        }<br>      }<br>    sort(result.begin(),result.end());<br>    return result;<br>  }<br>};<br></td>