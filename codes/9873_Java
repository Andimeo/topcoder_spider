<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>import java.util.regex.*;<br>import java.text.*;<br>import java.math.*;<br>import java.awt.geom.*;<br> <br>public class TreesDivision<br>{<br>  <br>  class Point {<br>    double x;<br>    double y;<br>    int value;<br>    Point(double x, double y, int value) {<br>      this.x = x;<br>      this.y = y;<br>      this.value = value;<br>    }<br>  }<br>  <br>  /*  returns whether, in traveling from the first to the second<br>  to the third point, we turn counterclockwise (+1) or not (-1) */<br> <br>  int ccw( Point p0, Point p1, Point p2 )<br>  {<br>    double dx1, dx2, dy1, dy2;<br>    <br>    dx1 = p1.x - p0.x; dy1 = p1.y - p0.y;<br>    dx2 = p2.x - p0.x; dy2 = p2.y - p0.y;<br>    <br>    if (dx1*dy2 &gt; dy1*dx2)<br>      return +1;<br>    if (dx1*dy2 &lt; dy1*dx2)<br>      return -1;<br>    if ((dx1*dx2 &lt; 0) || (dy1*dy2 &lt; 0))<br>      return -1;<br>    if ((dx1*dx1 + dy1*dy1) &lt; (dx2*dx2 + dy2*dy2))<br>      return +1;<br>    return 0;<br>  }<br>  <br>  public int minDifference(int[] x, int[] y, int[] income) {<br>    int score = Integer.MAX_VALUE;<br>    int N = x.length;<br>    int i,j,m,n,a,b,taken;<br>    int pom,left,right;<br>    double TOLERANCE = 0.00001;<br>    double d[] = {TOLERANCE, -TOLERANCE};<br>    boolean fin;<br>    <br>    Point p[] = new Point[N];<br>    <br>    for (i=0;i&lt;N;i++) {<br>      p[i] = new Point(x[i], y[i], income[i]);<br>    }<br>    <br>    for (i=0;i&lt;N;i++) {<br>      for (j=0;j&lt;N;j++) {<br>        if (i!=j) {<br>          <br>          // p[i] and p[j] are our relative points<br>          for (m=0;m&lt;2;m++) {<br>            for (n=0;n&lt;2;n++) {<br>              // we calculate for these differences<br>              Point A = new Point(p[i].x + d[m], p[i].y + d[m], 0);<br>              Point B = new Point(p[j].x + d[n], p[j].y + d[n], 0);<br>              <br>              left = 0;<br>              right = 0;<br>              fin = false;<br>              <br>              for (a=0;a&lt;N;a++) {<br>                taken = ccw(A, B, p[a]);<br>                if (taken == 0) {<br>                  fin = true;<br>                  break;<br>                }<br>                if (taken == -1) {<br>                  left += p[a].value;<br>                }<br>                if (taken == 1) {<br>                  right += p[a].value;<br>                }<br>                <br>              }<br>              <br>              if (fin == false) {<br>                score = Math.min(score, Math.abs(right-left));<br>              }<br>            <br>            <br>            }<br>          }<br>        }<br>      }<br>    }<br>    <br>    return score;<br>  }<br>  <br>  <br> <br>}<br>//Powered by [KawigiEdit] 2.0!<br></td>