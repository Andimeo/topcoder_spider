<td class="problemText" colspan="8" valign="middle" align="left">
            #include "assert.h"<br>#include "ctype.h"<br>#include "float.h"<br>#include "math.h"<br>#include "stdio.h"<br>#include "string.h"<br>#include "stdlib.h"<br>#include "stdarg.h"<br>#include "time.h"<br>#include "algorithm"<br>#include "numeric"<br>#include "functional"<br>#include "utility"<br>#include "bitset"<br>#include "vector"<br>#include "list"<br>#include "set"<br>#include "map"<br>#include "queue"<br>#include "stack"<br>#include "string"<br>#include "sstream"<br>#include "iostream"<br>using namespace std;<br><br>typedef long long i64;<br><br>i64 memo[50][1 &lt;&lt; 16];<br><br>struct AlienDictionary {<br>  vector&lt;int&gt; masks, fixed, sizes;<br><br>  void MakeMasks(const vector&lt;string&gt;&amp; subs) {<br>    const int n = (int)subs.size();<br>    for (int i = 0; i &lt; n; ++i) {<br>      int mask = 0, fix = 0;<br>      for (int j = 0; j &lt; (int)subs[i].size(); ++j) {<br>        mask &lt;&lt;= 1; fix &lt;&lt;= 1;<br>        if (subs[i][j] != '?') {<br>          if (subs[i][j] == 'B') mask |= 1;<br>          fix |= 1;<br>        }<br>      }<br>      masks.push_back(mask);<br>      fixed.push_back(fix);<br>      sizes.push_back((int)subs[i].size());<br>    }<br>  }<br><br>  bool IsValid(int mask, int size) {<br>    for (int i = 0; i &lt; (int)masks.size(); ++i) if (size &gt;= sizes[i]) {<br>      const int notFixed = mask &amp; fixed[i];<br>      if (!(notFixed ^ masks[i])) return false;<br>    }<br>    return true;<br>  }<br><br>  i64 f(int n, int k, int mask) {<br>    mask &amp;= (1 &lt;&lt; 16) - 1;<br>    if (k &gt;= n) return 1LL;<br>    i64&amp; count = memo[k][mask];<br>    if (count != -1) return count;<br>    count = 0;<br>    if (IsValid((mask &lt;&lt; 1) | 0, k + 1))<br>      count += f(n, k + 1, (mask &lt;&lt; 1) | 0);<br>    if (IsValid((mask &lt;&lt; 1) | 1, k + 1))<br>      count += f(n, k + 1, (mask &lt;&lt; 1) | 1);<br>    return count;<br>  }<br><br>  vector&lt;string&gt; getWords(int n, vector&lt;string&gt; subs, vector&lt;int&gt; numbers) {<br>    MakeMasks(subs);<br>    memset(memo, -1, sizeof(memo));<br>    const i64 total = f(n, 0, 0);<br>    vector&lt;string&gt; res;<br>    for (int i = 0; i &lt; (int)numbers.size(); ++i) {<br>      if (numbers[i] &gt;= total) res.push_back("NO PAGE");<br>      else {<br>        i64 page = numbers[i]; string word; int mask = 0;<br>        for (int k = 0; k &lt; n; ++k) {<br>          if (IsValid((mask &lt;&lt; 1) | 0, k + 1)) {<br>            const i64 withA = f(n, k + 1, (mask &lt;&lt; 1) | 0);<br>            if (page &gt;= withA) {<br>              page -= withA;<br>              word.push_back('B');<br>              mask = (mask &lt;&lt; 1) | 1;<br>            } else {<br>              word.push_back('A');<br>              mask = (mask &lt;&lt; 1) | 0;<br>            }<br>          } else {<br>            word.push_back('B');<br>            mask = (mask &lt;&lt; 1) | 1;<br>          }<br>          mask &amp;= (1 &lt;&lt; 16) - 1;<br>        }<br>        res.push_back(word);<br>      }<br>    }<br>    return res;<br>  }<br>};<br><br><br><br>// Powered by FileEdit<br>// Powered by moj 4.11 [modified TZTester]<br>// Powered by CodeProcessor<br></td>