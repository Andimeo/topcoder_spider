<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;cmath&gt;<br>#include &lt;queue&gt;<br>#include &lt;vector&gt;<br>#include &lt;string&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cstring&gt;<br>#include &lt;cassert&gt;<br>#include &lt;numeric&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;iostream&gt;<br>#include &lt;sstream&gt;<br>#include &lt;ctime&gt;<br>using namespace std;<br><br>typedef long long int64;<br>typedef vector&lt;int64&gt; vi64;<br>typedef vi64::iterator it64;<br>typedef vector&lt;int&gt; vi;<br><br>#define For(i,a,b) for (int i(a),_b(b); i &lt;= _b; ++i)<br>#define Ford(i,a,b) for (int i(a),_b(b); i &gt;= _b; --i)<br>#define Rep(i,n) for (int i(0),_n(n); i &lt; _n; ++i)<br>#define Repd(i,n) for (int i((n)-1); i &gt;= 0; --i)<br>#define MP(x, y) make_pair((x), (y))<br>#define All(v) (v).begin(), (v).end()<br><br>template&lt;typename T&gt; inline int Size(const T&amp; c) { return (int)c.size(); }<br>template&lt;typename T&gt; inline T Abs(T x) { return x &gt;= 0 ? x : -x; }<br><br>vector&lt;pair&lt;int64,int&gt; &gt; v1[40], v2[40];<br><br>void rec(it64 i1, it64 i2, it64 j1, it64 j2, int64 dif, int mask, vector&lt;pair&lt;int64,int&gt; &gt;* v, int index) {<br>  if (i1 == i2) <br>    v[index].push_back(MP(dif, mask));<br>  else {<br>    ++i1; ++j1;<br>    it64 ni1 = i1, nj1 = j1;<br>    --i1; --j1;<br>    rec(ni1, i2, nj1, j2, dif+*i1, mask*2, v, index+1);<br>    rec(ni1, i2, nj1, j2, dif-*j1, mask*2+1, v, index-1);<br>  }<br>}<br><br>void process(vector&lt;pair&lt;int64,int&gt; &gt;&amp; v) {<br>  int i = 0, k = 0;<br>  while (i &lt; Size(v)) {<br>    int res = v[i].second;<br>    int j = i+1;<br>    while (j &lt; Size(v) &amp;&amp; v[j].first == v[i].first) {<br>      res = min(res, v[j].second);<br>      ++j;<br>    }<br>    v[k] = v[i];<br>    v[k++].second = res;<br>    i = j;<br>  }<br>  v.resize(k);<br>}<br><br>struct PickingUp {<br>  vi fairPickingUp(vi64 s1, vi64 s2) {<br>    int n = Size(s1);<br>    rec(s1.begin(), s1.begin()+n/2, s2.begin(), s2.begin()+n/2, 0, 0, v1, n/2);<br>    rec(s1.begin()+n/2, s1.end(), s2.begin()+n/2, s2.end(), 0, 0, v2, n/2);<br>    For(i, 0, n) {<br>      sort(All(v1[i]));<br>      process(v1[i]);<br>      sort(All(v2[i]));<br>      process(v2[i]);<br>    }<br>    int64 best = INT_MAX; best *= best;<br>    int64 res = -1;<br>    For(index, 0, n) {<br>      int j = Size(v2[n-index])-1;<br>      Rep(i, Size(v1[index])) {<br>        while (j-1 &gt;= 0 &amp;&amp; Abs(v1[index][i].first+v2[n-index][j-1].first) &lt; Abs(v1[index][i].first+v2[n-index][j].first)) <br>          --j;<br>        int k = j;<br>        int64 cur = Abs(v1[index][i].first+v2[n-index][j].first);<br>        while (k &gt;= 0 &amp;&amp; Abs(v1[index][i].first+v2[n-index][k].first) == cur) {<br>          int64 mask = v1[index][i].second;<br>          mask = (mask&lt;&lt;(n/2))|v2[n-index][k].second;<br>          if (cur &lt; best || cur == best &amp;&amp; mask &lt; res) {<br>            best = cur;<br>            res = mask;<br>          }<br>          --k;<br>        }<br>      }<br>    }<br>    vi v(n);<br>    Rep(i, n) <br>      v[i] = (res&amp;(int64(1)&lt;&lt;(n-1-i))) ? 2 : 1;<br>    return v;<br>  }<br>};<br></td>