<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Text;<br>using System.Text.RegularExpressions;<br>using System.Collections;<br>using System.Collections.Generic;<br><br>public class DancingCouples {<br><br>    string[] c;<br>    int K;<br>    int[, ,] memo;<br>    public int countPairs(string[] canDance, int K) {<br>        int res = 0;<br>        c = canDance;<br>        this.K = K;<br>        int M = canDance.Length;<br>        int N = canDance[0].Length;<br><br>        memo = new int[(1 &lt;&lt; N) + 1, K + 1, M + 1];<br><br>        for (int i = 0; i &lt; ((1 &lt;&lt; N) + 1); i++)<br>            for (int j = 0; j &lt; K + 1; j++)<br>                for (int k = 0; k &lt; M + 1; k++)<br>                    memo[i, j, k] = -1;<br><br>        res = calc(0, K, 0);<br><br>        return res;<br>    }<br><br>    int calc(int mask, int count, int index)<br>    {<br>        try<br>        {<br>            if (count &lt; 0)<br>                return 0;<br>            if (index == c.Length)<br>                return count == 0 ? 1 : 0;<br><br>            if (memo[mask, count, index] != -1)<br>                return memo[mask, count, index];<br><br>            int res = 0;<br><br>            res += calc(mask, count, index + 1);<br><br>            for (int i = 0; i &lt; c[index].Length; i++)<br>                if (c[index][i] == 'Y' &amp;&amp; (mask &amp; (1 &lt;&lt; i)) == 0)<br>                    res += calc(mask | (1 &lt;&lt; i), count - 1, index + 1);<br><br>            return memo[mask, count, index] = res;<br>        }<br>        catch (Exception ex)<br>        {<br>            throw;<br>        }<br>    }<br><br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by CodeProcessor<br></td>