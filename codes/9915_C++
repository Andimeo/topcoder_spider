<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;string&gt;<br>#include &lt;vector&gt;<br>#include &lt;map&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cstring&gt;<br>#include &lt;cassert&gt;<br>#include &lt;set&gt;<br>#include &lt;iostream&gt;<br>#include &lt;sstream&gt;<br>#include &lt;cstddef&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;utility&gt;<br>#include &lt;iterator&gt;<br>#include &lt;numeric&gt;<br>#include &lt;list&gt;<br>#include &lt;complex&gt;<br> <br>using namespace std;<br> <br>typedef vector&lt;int&gt; vi;<br>typedef vector&lt;string&gt; vs;<br>typedef long long ll;<br>typedef complex&lt;double&gt; pnt;<br>typedef pair&lt;int, int&gt; pii;<br> <br>#define RA(x) (x).begin(), (x).end()<br>#define FE(i, x) for (typeof((x).begin()) i = (x).begin(); i != (x).end(); i++)<br>#define SZ(x) ((int) (x).size())<br> <br> <br>class RedIsGood<br>{<br>public:<br>    double getProfit(int R, int B);<br>};<br> <br>static double row[2][5002];<br> <br>double RedIsGood::getProfit(int R, int B)<br>{<br>    memset(row, 0, sizeof(row));<br>    int old = 0;<br>    int nu = 1;<br>    for (int i = 1; i &lt;= R; i++)<br>    {<br>        for (int j = 0; j &lt;= B; j++)<br>        {<br>            double pr = i / (double) (i + j);<br>            double pb = j / (double) (i + j);<br>            row[nu][j] = max(0.0, pr * (1.0 + row[old][j]) + pb * (row[nu][j - 1] - 1.0));<br>        }<br>        swap(old, nu);<br>    }<br>    return row[old][B];<br>}<br> <br> <br>// Powered by FileEdit<br></td>