<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br><br>public class WalkingDistance {<br>    const double INF = 1e100;<br>    const double EPS = 1e-10;<br><br>    public double getLongestShortest(int[] x, int[] y, string[] streets) {<br>        int n = x.Length;<br>        double[,] d = new double[n, n];<br>        for (int i = 0; i &lt; n; ++i)<br>            for (int j = 0; j &lt; n; ++j)<br>                if (i == j)<br>                    d[i, j] = 0;<br>                else<br>                    d[i, j] = INF;<br>        for (int i = 0; i &lt; n; ++i)<br>            for (int j = 0; j &lt; n; ++j)<br>                if (streets[i][j] == 'Y')<br>                {<br>                    d[i, j] = Math.Sqrt((x[i] - x[j]) * (x[i] - x[j]) + (y[i] - y[j]) * (y[i] - y[j]));<br>                }<br>        for (int k = 0; k &lt; n; ++k)<br>            for (int i = 0; i &lt; n; ++i)<br>                for (int j = 0; j &lt; n; ++j)<br>                    if (d[i, k] + d[k, j] &lt; d[i, j])<br>                        d[i, j] = d[i, k] + d[k, j];<br>        double res = 0.0;<br>        for (int i = 0; i &lt; n; ++i)<br>            for (int j = 0; j &lt; n; ++j)<br>                res = Math.Max(res, d[i, j]);<br>        for (int i1 = 0; i1 &lt; n; ++i1)<br>            for (int j1 = i1 + 1; j1 &lt; n; ++j1)<br>                if (streets[i1][j1] == 'Y')<br>                    for (int i2 = i1; i2 &lt; n; ++i2)<br>                        for (int j2 = i2 + 1; j2 &lt; n; ++j2)<br>                            if (streets[i2][j2] == 'Y')<br>                            {<br>                                res = Math.Max(res, eval(d[i1, j1], d[i2, j2], d[i1, i2], d[i1, j2], d[j1, i2], d[j1, j2]));<br>                            }<br>        return res;<br>    }<br><br>    private double eval(double l1, double l2, double d11, double d12, double d21, double d22)<br>    {<br>        double[] vs = new double[] { (d12 + l2 - d11) / 2, (d22 + l2 - d21) / 2, 0, l2 };<br>        double[] us = new double[] { (d21 + l1 - d11) / 2, (d22 + l1 - d12) / 2, 0, l1 };<br>        double sum = (d22 + l1 + l2 - d11) / 2;<br>        double diff = (d21 + l1 - d12 - l2) / 2;<br>        double res = 0;<br>        foreach (double u in us)<br>            foreach (double v in vs)<br>            {<br>                res = Math.Max(res, getit(l1, l2, d11, d12, d21, d22, u, v));<br>            }<br>        foreach (double u in us)<br>        {<br>            double v = sum - u;<br>            res = Math.Max(res, getit(l1, l2, d11, d12, d21, d22, u, v));<br>            v = u - diff;<br>            res = Math.Max(res, getit(l1, l2, d11, d12, d21, d22, u, v));<br>        }<br>        foreach (double v in vs)<br>        {<br>            double u = sum - v;<br>            res = Math.Max(res, getit(l1, l2, d11, d12, d21, d22, u, v));<br>            u = v + diff;<br>            res = Math.Max(res, getit(l1, l2, d11, d12, d21, d22, u, v));<br>        }<br>        {<br>            double u = (sum + diff) / 2;<br>            double v = (sum - diff) / 2;<br>            res = Math.Max(res, getit(l1, l2, d11, d12, d21, d22, u, v));<br>        }<br>        return res;<br>    }<br><br>    private double getit(double l1, double l2, double d11, double d12, double d21, double d22, double u, double v)<br>    {<br>        double z = Math.Min(u + d11 + v, Math.Min(u + d12 + l2 - v, Math.Min(l1 - u + d21 + v, l1 - u + d22 + l2 - v)));<br>        if (u &gt;= -EPS &amp;&amp; u &lt;= l1 + EPS &amp;&amp; v &gt;= -EPS &amp;&amp; v &lt;= l2 + EPS)<br>        {<br>            return z;<br>        }<br>        else<br>        {<br>            return 0;<br>        }<br>    }<br><br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003] [modified for C# by Petr]<br>// Powered by CodeProcessor<br></td>