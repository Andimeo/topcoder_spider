<td class="problemText" colspan="8" valign="middle" align="left">
            #include&lt;iostream&gt; <br>#include&lt;vector&gt;<br>#include&lt;string&gt;<br>#include&lt;list&gt;<br>#include&lt;deque&gt;<br>#include&lt;map&gt;<br>#include&lt;set&gt;<br>#include&lt;cctype&gt;<br>#include&lt;cmath&gt;<br>#include&lt;cstdlib&gt;<br>#include&lt;algorithm&gt;<br>#include&lt;queue&gt;<br>#include&lt;stack&gt;<br>#include&lt;utility&gt;<br>#include&lt;sstream&gt;<br>#include&lt;cstring&gt;<br>using namespace std;<br>#define FOR(I,A,B) for(int I=(A);I&lt;=(B);++I)<br>#define FORD(I,A,B) for(int I=(A);I&gt;=(B);--I)<br>#define REP(I,N) for(int I=0;I&lt;(N);I++)<br>#define SIZE(x) (int)(x).size()<br>const int maxN=55; <br>const int INF=(1&lt;&lt;30); <br>double dist[maxN][maxN]; <br> <br>class WalkingDistance<br>        { <br>        public: <br>    int sqr(int a){ return a*a; } <br>        double getLongestShortest(vector &lt;int&gt; x, vector &lt;int&gt; y, vector &lt;string&gt; st) <br>            { <br>        int n=SIZE(x); <br>        REP(i,n) REP(j,n) dist[i][j]=(i!=j)?INF:0;  <br> <br>        REP(i,n) REP(j,n) if(st[i][j]=='Y') dist[i][j]=sqrt( sqr(x[i]-x[j])+sqr(y[i]-y[j])); <br> <br>        double tmp; <br>        REP(k,n) REP(i,n) REP(j,n) if( dist[i][j]&gt;(tmp=dist[i][k]+dist[k][j])) dist[i][j]=tmp; <br> <br>        double ret=0;<br>      <br>          REP(a,n) REP(b,n) if(st[a][b]=='Y') <br>         REP(c,n) REP(d,n) if(st[c][d]=='Y'){ <br>                        double D=dist[a][b]+dist[c][d]; <br>            double A=min(dist[a][d]+dist[b][c],dist[a][c]+dist[b][d])+D;<br>            ret=max(ret,A); <br>         }    <br>               return ret/2; <br>            } <br>        <br> <br>        }; <br> <br> <br> <br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003]<br>// Powered by CodeProcessor<br></td>