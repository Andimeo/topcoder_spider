<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>import java.io.*;<br>import java.text.*;<br>import java.math.*;<br>import java.util.regex.*;<br>import static java.lang.Math.*;<br>import static java.util.Arrays.*;<br>import static java.util.Collections.*;<br>import static java.lang.Integer.*;<br>import static java.lang.Long.*;<br>public class WalkingDistance {<br>  int[] x, y;<br>  double dist(int i, int j){<br>    return sqrt((x[i]-x[j])*(x[i]-x[j])+ (y[i]-y[j])*(y[i]-y[j]));<br>  }<br>  public double getLongestShortest(int[] x, int[] y, String[] streets) {<br>    this.x = x;<br>    this.y = y;<br>    double[][] g = new double[x.length][x.length];<br>    for(int i = 0; i &lt; g.length; i++){<br>      fill(g[i], Double.POSITIVE_INFINITY);<br>      g[i][i] = 0;<br>    }<br>    for(int i = 0; i &lt; streets.length; i++){<br>      for(int j = 0; j &lt; g.length; j++){<br>        if(streets[i].charAt(j) == 'Y'){<br>          g[i][j] = dist(i,j);<br>        }<br>      }<br>    }<br>    for(int k = 0; k &lt; g.length; k++){<br>      for(int i = 0; i &lt; g.length; i++){<br>        for(int j = 0; j &lt; g.length; j++){<br>          g[i][j] = min(g[i][j], g[i][k] + +g[k][j]);<br>        }<br>      }<br>    }<br>    double ret = 0;<br>    for(int i = 0; i &lt; g.length; i++){<br>      for(int j = 0; j &lt; g.length; j++){<br>        ret = max(ret, g[i][j]);<br>      }<br>    }<br>    for(int i = 0; i &lt; g.length; i++){<br>      for(int j = 0; j &lt; g.length; j++){<br>        if(i == j) continue;<br>        if(streets[i].charAt(j) == 'N') continue;<br>        for(int ii = 0; ii &lt; g.length; ii++){<br>          ret = max(ret, (dist(i,j) + g[i][ii] + g[ii][j])/2);<br>          if(ii == i || ii == j) continue;<br>          for(int jj = 0; jj &lt; g.length; jj++){<br>            if(jj == i || jj == j || jj == ii) continue;<br>            if(streets[ii].charAt(jj) == 'N') continue;<br>            if(ii == i &amp;&amp; jj == j) continue;<br>            if(ii == j &amp;&amp; jj == i) continue;<br>            ret = max(ret, min(g[i][ii]+g[j][jj]+dist(i,j)+dist(ii,jj), g[i][jj] + g[j][ii] + dist(i,j)+dist(ii,jj))/2);<br>          }<br>        }<br>      }<br>    }<br>    return ret;<br>  }<br> <br>}<br> <br>// Powered by PopsEdit<br>// Powered by CodeProcessor<br></td>