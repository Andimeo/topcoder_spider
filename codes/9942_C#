<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br><br>public class CubeNets {<br>    public string isCubeNet(string[] figure) {<br>        bool[,,] have = new bool[3, 3, 3];<br>        for (int x = 0; x &lt; figure.Length; ++x)<br>            for (int y = 0; y &lt; figure[0].Length; ++y)<br>                if (figure[x][y] == '#')<br>                {<br>                    if (!doit(figure, x, y, -1, -1, have, 1, 0, 0, 0, 1, 0, 1, 0))<br>                        return "NO";<br>                    for (int a = 0; a &lt; 3; ++a)<br>                        for (int b = 0; b &lt; 3; ++b)<br>                            for (int c = 0; c &lt; 3; ++c)<br>                            {<br>                                int z = 0;<br>                                if (a == 1)<br>                                    ++z;<br>                                if (b == 1)<br>                                    ++z;<br>                                if (c == 1)<br>                                    ++z;<br>                                if (z == 2)<br>                                {<br>                                    if (!have[a, b, c])<br>                                        return "NO";<br>                                }<br>                            }<br>                    return "YES";<br>                }<br>        return "NO";<br>    }<br><br>    private bool doit(string[] figure, int x, int y, int sx, int sy, bool[,,] have, int vx, int vy, int vz, int dx, int dy, int dz, int px, int py)<br>    {<br>        if (have[vx + 1, vy + 1, vz + 1])<br>            return false;<br>        have[vx + 1, vy + 1, vz + 1] = true;<br>        for (int dir = 0; dir &lt; 4; ++dir)<br>        {<br>            int nx = x + px;<br>            int ny = y + py;<br>            if (nx &gt;= 0 &amp;&amp; nx &lt; figure.Length &amp;&amp; ny &gt;= 0 &amp;&amp; ny &lt; figure[0].Length &amp;&amp; (nx != sx || ny != sy) &amp;&amp; figure[nx][ny] == '#')<br>            {<br>                if (!doit(figure, nx, ny, x, y, have, dx, dy, dz, -vx, -vy, -vz, px, py))<br>                    return false;<br>            }<br>            int rdx;<br>            int rdy;<br>            int rdz;<br>            prod(vx, vy, vz, dx, dy, dz, out rdx, out rdy, out rdz);<br>            int rpx = -py;<br>            int rpy = px;<br>            dx = rdx;<br>            dy = rdy;<br>            dz = rdz;<br>            px = rpx;<br>            py = rpy;<br>        }<br>        return true;<br>    }<br><br>    void prod(int x1, int y1, int z1, int x2, int y2, int z2, out int x, out int y, out int z)<br>    {<br>        x = y1 * z2 - y2 * z1;<br>        y = z1 * x2 - z2 * x1;<br>        z = x1 * y2 - x2 * y1;<br>    }<br><br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003] [modified for C# by Petr]<br>// Powered by CodeProcessor<br></td>