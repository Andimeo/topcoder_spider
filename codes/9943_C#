<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br><br>public class TemplateMatching {<br>    private int prefixScore(string s, string prefix)<br>    {<br>        for (int n = Math.Min(s.Length, prefix.Length); n &gt; 0; --n)<br>        {<br>            if (s.Substring(0, n) == prefix.Substring(prefix.Length - n, n))<br>                return n;<br>        }<br>        return 0;<br>    }<br><br>    private int suffixScore(string s, string suffix)<br>    {<br>        for (int n = Math.Min(s.Length, suffix.Length); n &gt; 0; --n)<br>        {<br>            if (s.Substring(s.Length - n, n) == suffix.Substring(0, n))<br>                return n;<br>        }<br>        return 0;<br>    }<br><br>    public string bestMatch(string text, string prefix, string suffix) {<br>        string res = "";<br>        int best_total = -1;<br>        int best_prefix = -1;<br>        for (int start = 0; start &lt; text.Length; ++start)<br>            for (int len = 1; start + len &lt;= text.Length; ++len)<br>            {<br>                string cur = text.Substring(start, len);<br>                int cur_prefix = prefixScore(cur, prefix);<br>                int cur_total = cur_prefix + suffixScore(cur, suffix);<br>                if (cur_total &gt; best_total || cur_total == best_total &amp;&amp; cur_prefix &gt; best_prefix || cur_total == best_total &amp;&amp; cur_prefix == best_prefix &amp;&amp; cur.CompareTo(res) &lt; 0)<br>                {<br>                    res = cur;<br>                    best_total = cur_total;<br>                    best_prefix = cur_prefix;<br>                }<br>            }<br>        return res;<br>    }<br><br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003] [modified for C# by Petr]<br>// Powered by CodeProcessor<br></td>