<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;algorithm&gt;<br>#include &lt;functional&gt;<br>#include &lt;utility&gt;<br> <br>#include &lt;cmath&gt;<br>#include &lt;numeric&gt;<br>#include &lt;complex&gt;<br> <br>#include &lt;cstdio&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;ctime&gt;<br>#include &lt;cassert&gt;<br> <br>#include &lt;iomanip&gt;<br>#include &lt;sstream&gt;<br> <br>#include &lt;cctype&gt;<br>#include &lt;cstring&gt;<br>#include &lt;string&gt;<br> <br>#include &lt;vector&gt;<br>#include &lt;queue&gt;<br>#include &lt;stack&gt;<br>#include &lt;deque&gt;<br>#include &lt;list&gt;<br>#include &lt;set&gt;<br>#include &lt;map&gt;<br> <br>#include &lt;ext/hash_map&gt;<br>#include &lt;ext/hash_set&gt;<br> <br>using namespace std;<br>using namespace __gnu_cxx;<br> <br>#define min(x, y) ((x) &lt; (y) ? (x) : (y))<br> <br>class TemplateMatching {<br>public:<br>  string bestMatch(string text, string prefix, string suffix) {<br>    string result = "";<br>    int x = -1, y = -1;<br>    for (int i = 0; i &lt; text.length(); ++i) {<br>      for (int j = i; j &lt; text.length(); ++j) {<br>        string s = text.substr(i, j - i + 1);<br>        int a = min(s.length(), prefix.length());<br>        while (a &gt; 0) {<br>          if (s.substr(0, a) == prefix.substr(prefix.length() - a)) {<br>            break;<br>          }<br>          --a;<br>        }<br>        int b = min(s.length(), suffix.length());<br>        while (b &gt; 0) {<br>          if (s.substr(s.length() - b) == suffix.substr(0, b)) {<br>            break;<br>          }<br>          --b;<br>        }<br>        if ((a + b &gt; x + y) || ((a + b == x + y) &amp;&amp; ((a &gt; x) || ((a == x) &amp;&amp; (s &lt; result))))) {<br>          result = s;<br>          x = a;<br>          y = b;<br>        }<br>      }<br>    }<br>    return result;<br>  }<br>};<br></td>