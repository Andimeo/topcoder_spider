<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections.Generic;<br>using System.Text;<br><br>    class TripleJump<br>    {<br>        public static double probInRange(int l, int u, int a, int b)<br>        {<br>            if ( b &lt; 2*l) return 0;<br>            if ( a &gt; 2*u ) return 0;<br><br>            if (l == u)<br>                if (2 * l == b) return 0;<br>                else return 1;<br>                <br>            double all = (u - l) * (u - l);<br>            double pos = all;<br><br>            if (a &gt; 2*l)<br>                if (a &lt; l + u) pos -= (a - 2*l) * (a - 2*l) / 2.0;<br>                else pos = (2*u - a) * (2*u - a)/2.0;<br><br>            if (b &lt; 2*u)<br>                if (b &gt; l + u) pos -= (2*u - b) * (2*u - b) / 2.0;<br>                else pos -= (all - (b-2*l)*(b-2*l)/2.0);<br><br>            return pos / all;<br>        }<br><br>        public static double[] getProbabilities(int lower, int upper, int first, int[] opponents)<br>        {<br>            int N = opponents.Length;<br>            double[] res = new double[N+1];<br>            Array.Sort(opponents);<br><br>            int a, b;<br><br>            int jmin = Math.Min(2*lower, opponents[0])-1;<br>            int jmax = Math.Max(2*upper, opponents[N-1])+ first + 1;<br><br>            for (int i = 0; i &lt;= N; i++)<br>            {<br>                if (i &gt; 0) a = opponents[i - 1];<br>                else a = jmin;<br><br>                if (i &lt; N) b = opponents[i];<br>                else b = jmax;<br><br>                res[N - i] = probInRange(lower, upper, a - first, b - first);<br>            }<br><br>            return res;<br>        }<br>    }<br></td>