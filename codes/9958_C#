<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections.Generic;<br><br>public class CollectingPostmarks {<br>    class Achievement : IComparable&lt;Achievement&gt; {<br>        public int money_delta;<br>        public int value_delta;<br><br>        public Achievement(int a, int b) {<br>            money_delta = a;<br>            value_delta = b;<br>        }<br><br>        public int CompareTo(Achievement other)<br>        {<br>            return -value_delta.CompareTo(other.value_delta);<br>        }<br>    }<br><br>    public int amountOfMoney(int[] prices, int[] _have, int[] values, int K) {<br>        bool[] have = new bool[prices.Length];<br>        foreach (int x in _have) {<br>            have[x] = true;<br>            K -= values[x];<br>        }<br>        List&lt;Achievement&gt; l1 = getAll(prices, values, have, 0, prices.Length / 2);<br>        List&lt;Achievement&gt; l2 = getAll(prices, values, have, prices.Length / 2, prices.Length);<br>        l1.Sort();<br>        int cmd = int.MinValue;<br>        foreach (Achievement a in l1)<br>        {<br>            cmd = Math.Max(cmd, a.money_delta);<br>            a.money_delta = cmd;<br>        }<br>        int res = int.MaxValue;<br>        foreach (Achievement a in l2)<br>        {<br>            int l = -1;<br>            int r = l1.Count;<br>            while (r - l &gt; 1)<br>            {<br>                int m = (l + r) / 2;<br>                if (l1[m].value_delta + a.value_delta &gt;= K)<br>                {<br>                    l = m;<br>                }<br>                else<br>                {<br>                    r = m;<br>                }<br>            }<br>            if (l &gt;= 0)<br>                res = Math.Min(res, Math.Max(0, -a.money_delta - l1[l].money_delta));<br>        }<br>        if (res == int.MaxValue)<br>            return -1;<br>        else<br>            return res;<br>    }<br><br>    List&lt;Achievement&gt; getAll(int[] prices, int[] values, bool[] have, int l, int r)<br>    {<br>        int n = r - l;<br>        List&lt;Achievement&gt; res = new List&lt;Achievement&gt;();<br>        for (int set = 0; set &lt; (1 &lt;&lt; n); ++set)<br>        {<br>            int a = 0;<br>            int b = 0;<br>            for (int i = 0; i &lt; n; ++i)<br>                if (((set &gt;&gt; i) &amp; 1) != 0) {<br>                    if (have[l + i]) {<br>                        a += prices[l + i];<br>                        b -= values[l + i];<br>                    } else {<br>                        a -= prices[l + i];<br>                        b += values[l + i];<br>                    }<br>                }<br>            res.Add(new Achievement(a, b));<br>        }<br>        return res;<br>    }<br><br>   <br>}<br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003] [modified for C# by Petr]<br>// Powered by CodeProcessor<br></td>