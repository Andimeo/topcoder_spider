<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>import java.util.regex.*;<br>import java.text.*;<br>import java.math.*;<br>import java.awt.geom.*;<br> <br>public class CollectingPostmarks<br>{<br>  public int amountOfMoney(int[] prices, int[] have, int[] values, int K)<br>  {<br>    int money = 0, all = 0;<br>    for (int i=0; i&lt;have.length; i++)<br>      money+=prices[have[i]];<br>    int n = prices.length;<br>    for (int i=0; i&lt;n; i++)<br>      all +=values[i];<br>    if (all&lt;K) return -1;<br>    <br>    pair[] p1, p2;<br>    <br>    int n1 = Math.min(n, 16);<br>    p1 = new pair[1&lt;&lt;n1];<br>    p2 = new pair[1&lt;&lt;(n-n1)];<br>    <br>    for (int i=0; i&lt;(1&lt;&lt;n1); i++)<br>    {<br>      int cost=0,value=0;<br>      for (int j=0; j&lt;n1; j++)<br>        if ((i&amp;(1&lt;&lt;j))&gt;0)<br>        {<br>          cost+=prices[j];<br>          value+=values[j];<br>        }<br>      p1[i] = new pair(cost, value);<br>    }<br>    <br>    for (int i=0; i&lt;(1&lt;&lt;(n-n1)); i++)<br>    {<br>      int cost=0,value=0;<br>      for (int j=0; j&lt;n-n1; j++)<br>        if ((i&amp;(1&lt;&lt;j))&gt;0)<br>        {<br>          cost+=prices[n1+j];<br>          value+=values[n1+j];<br>        }<br>      p2[i] = new pair(cost, value);<br>    }<br>    Arrays.sort(p1);<br>    Arrays.sort(p2);<br>    int cst = Integer.MAX_VALUE;<br>    for (int i=p1.length-1; i&gt;=0; i--)<br>    {<br>      p1[i].cost = Math.min(p1[i].cost, cst);<br>      cst = p1[i].cost;<br>    }<br>    cst = Integer.MAX_VALUE;<br>    for (int i=p2.length-1; i&gt;=0; i--)<br>    {<br>      p2[i].cost = Math.min(p2[i].cost, cst);<br>      cst = p2[i].cost;<br>    }<br>    int ans = Integer.MAX_VALUE;<br>    <br>    int j = p2.length-1;<br>    for (int i=0; i&lt;p1.length; i++)<br>    {<br>      while (j&gt;0&amp;&amp;p1[i].value+p2[j-1].value&gt;=K)<br>        j--;<br>      if (p1[i].value+p2[j].value&gt;=K)<br>        ans = Math.min(ans,p1[i].cost+p2[j].cost);<br>    }<br>    return Math.max(ans-money, 0);<br>  }<br>  <br>  class pair implements Comparable&lt;pair&gt;<br>  {<br>    int cost, value;<br>    public pair(int cost, int value)<br>    {<br>      this.cost=cost;<br>      this.value=value;<br>    }<br>    public int compareTo(pair o) {<br>      if (value&lt;o.value) return -1;<br>      if (value&gt;o.value) return 1;<br>      if (cost&gt;o.value) return -1;<br>      if (cost&lt;o.value) return 1;<br>      return 0;<br>    }<br>  }<br>  <br>  <br>}<br>//Powered by [KawigiEdit] 2.0!<br></td>