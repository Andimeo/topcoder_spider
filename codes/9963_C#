<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br><br>public class ChangeOMatic {<br>    const int BIG_NUMBER = 3000000;<br>    const int MAX_VALUE = 1000;<br><br>    public long howManyRounds(int[] outputValues, long inputValue)<br>    {<br>        int[] num = new int[BIG_NUMBER + 1];<br>        int[] num_ops = new int[MAX_VALUE + 1];<br>        int[] first = new int[BIG_NUMBER + 1];<br>        bool[] isJust = new bool[BIG_NUMBER + 1];<br>        foreach (int x in outputValues)<br>            isJust[x] = true;<br>        num[1] = 1;<br>        first[1] = 1;<br>        for (int i = 2; i &lt;= BIG_NUMBER; ++i)<br>        {<br>            num[i] = int.MaxValue;<br>            foreach (int x in outputValues)<br>                if (x &lt; i)<br>                {<br>                    int cnum;<br>                    if (isJust[i - x])<br>                    {<br>                        cnum = 2;<br>                    }<br>                    else<br>                    {<br>                        cnum = 1 + num[i - x];<br>                    }<br>                    if (cnum &lt;= num[i])<br>                    {<br>                        num[i] = cnum;<br>                        first[i] = x;<br>                    }<br>                }<br>        }<br>        for (int i = 2; i &lt;= MAX_VALUE; ++i)<br>        {<br>            int x = i;<br>            int rem = num[x];<br>            num_ops[i] = 1;<br>            while (true)<br>            {<br>                if (rem == 1)<br>                {<br>                    num_ops[i] += num_ops[x];<br>                    break;<br>                }<br>                int j = first[x];<br>                num_ops[i] += num_ops[j];<br>                x -= j;<br>                --rem;<br>            }<br>        }<br>        long res = 0;<br>        if (inputValue &gt; BIG_NUMBER)<br>        {<br>            int max = outputValues[outputValues.Length - 1];<br>            long am = (inputValue - BIG_NUMBER + max - 1) / max;<br>            res += num_ops[max] * am;<br>            inputValue -= max * am;<br>        }<br>        if (inputValue == 1)<br>            return res;<br>        {<br>            int x = (int)inputValue;<br>            int rem = num[x];<br>            ++res;<br>            while (true)<br>            {<br>                if (rem == 1)<br>                {<br>                    res += num_ops[x];<br>                    break;<br>                }<br>                int j = first[x];<br>                res += num_ops[j];<br>                x -= j;<br>                --rem;<br>            }<br>        }<br>        return res;<br>    }<br><br><br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003] [modified for C# by Petr]<br>// Powered by CodeProcessor<br></td>