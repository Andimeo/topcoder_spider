<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;vector&gt;<br><br>using namespace std;<br><br>int t[1001001], prev[1001001];<br>long long ct[50];<br>long long tt[50];<br><br>class ChangeOMatic {<br>  public:<br>  <br>  void doit (int x, const vector&lt;int&gt;&amp; a, int n) {<br>    t[0] = 0;<br>    printf("doit %d %d\n", x, n);<br>    for (int i = 1; i &lt;= x; i ++) {<br>      t[i] = 2147483647;<br>      for (int j = 0; j &lt; n; j ++)<br>        if (i - a[j] &gt;= 0)<br>          if (t[i - a[j]] + 1 &lt;= t[i]) {<br>            t[i] = t[i - a[j]] + 1;<br>            prev[i] = j;<br>            }<br>      }<br>    }<br>  <br>  long long howManyRounds(vector &lt;int&gt; a, long long b) {<br>    <br>    while (a[a.size() - 1] &gt;= b)<br>      a.pop_back();<br>    doit(1001000, a, a.size());<br>    for (int i = 0; i &lt; a.size(); i ++)<br>      ct[i] = 0;<br>    if (b &gt;= 1001000) {<br>      ct[a.size() - 1] += (b - 1001000 + a[a.size() - 1] - 1) / a[a.size() - 1];<br>      b -= (b - 1001000 + a[a.size() - 1] - 1) / a[a.size() - 1] * a[a.size() - 1];<br>      }<br>    while (b) {<br>      ct[prev[b]] ++;<br>      b -= a[prev[b]];<br>      }<br>    long long ans = 1;<br>    for (int i = a.size() - 1; i &gt; 0; i --) {<br>      ans +=ct[i];<br>      doit(a[i], a, i);<br>      for (int k = 0; k &lt; a.size(); k ++)<br>        tt[k] = 0;<br>      int j = a[i];<br>//      printf("j = %d, prev[j] = %d\n", j, prev[j]);<br>      while (j &gt; 0) {<br>        tt[prev[j]] ++;<br>        j -= a[prev[j]];<br>        }<br>      for (int k = 0; k &lt; a.size(); k ++)<br>        ct[k] += tt[k] * ct[i];<br>//      for (int k = 0; k &lt; a.size(); k ++)<br>//        printf("(%d += %d), ",(int)ct[k], (int)tt[k]);<br>//      printf("\n");<br>      }<br>    return ans;<br>    }<br>  };<br></td>