<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br> <br>public class ChangeOMatic {<br> <br>    private static final long INF = Long.MAX_VALUE / 2;<br>    private static final int MAX = 1000000;<br> <br>    public long howManyRounds(int[] outputValues, long inputValue) {<br> <br>        int n = outputValues.length;<br> <br>        long[] d = new long[MAX + 1];<br>        long[] f = new long[MAX + 1];<br>        long[] q = new long[MAX + 1];<br>        long[] w = new long[MAX + 1];<br>        q[1] = 1;<br>        w[1] = 1;<br> <br>        for (int i = 2; i &lt;= MAX; i++) {<br>            q[i] = INF;<br>            w[i] = INF;<br>            for (int j = n - 1; j &gt;= 0; j--) {<br>                if (outputValues[j] &lt; i) {<br>                    int ii = i - outputValues[j];<br>                    if (w[ii] + 1 &lt; q[i]) {<br>                        q[i] = w[ii] + 1;<br>                        d[i] = f[ii] + d[outputValues[j]] + 1;<br>                    }<br>                }<br>            }<br>            for (int j = n - 1; j &gt;= 0; j--) {            <br>                if (outputValues[j] &lt;= i) {<br>                    int ii = i - outputValues[j];<br>                    if (w[ii] + 1 &lt; w[i]) {<br>                        w[i] = w[ii] + 1;<br>                        f[i] = f[ii] + d[outputValues[j]];<br>                    }<br>                }<br>            }<br>            //System.out.println("" + i + " " + q[i] + " " + w[i] + " " + d[i] + " " + f[i] + " ");<br>        }<br> <br>        if (inputValue &lt;= MAX) return d[((int) inputValue)];<br> <br>        long min = INF;<br>        long res = 0;<br> <br>        long k = inputValue / outputValues[n - 1];<br>        while (inputValue - k * outputValues[n - 1] &lt;= MAX) {<br>            long r = inputValue - outputValues[n - 1] * k;<br>            long m = w[((int) r)] + k;<br>            if (m &lt; min) {<br>                min = m;<br>                res = f[((int) r)] + d[outputValues[n - 1]] * k + 1;<br>            }<br>            k--;<br>        }<br> <br>        return res;<br>    }<br> <br>}<br> <br> <br>// Powered by FileEdit<br>// Powered by RETester [based on ExampleBuilder]<br>// Powered by CodeProcessor<br></td>