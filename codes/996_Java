<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>import java.math.*;<br><br>public class Travel {<br>    double best = -1;<br><br>    int n;<br>    boolean[] visited;<br>    double[][] d;<br><br>    double dist(double x1, double y1, double z1, double x2, double y2, double z2) {<br>  double d = (x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2) + (z1 - z2) * (z1 - z2);<br>  d = Math.sqrt(d) / 2;<br>  double t = Math.asin(d) * 2;<br>  return t;<br>    } <br><br>    void visit(int k, int from, double sum) {<br>  if ( k == n - 1 ) {<br>      sum += d[from][0];<br>      if ( sum &lt; best || best &lt; 0 )<br>    best = sum;<br>      return;<br>  }<br><br>  for ( int i = 1; i &lt; n; ++i )<br>      if ( ! visited[i] ) {<br>    visited[i] = true;<br>    visit(k+1, i, sum + d[from][i]);<br>    visited[i] = false;<br>      }<br>    }<br><br>    static double pi = 3.1416;<br>  public int shortest(String[] s, int radius) {<br>      n = s.length;<br>      double[] x = new double[10];<br>      double[] y = new double[10];<br>      double[] z = new double[10];<br><br>      for ( int i = 0; i &lt; s.length; ++i ) {<br>    int[] m = new int[10];<br>    StringTokenizer st = new StringTokenizer(s[i], " ");<br>    int j = 0;<br>    while ( st.hasMoreTokens() ) {<br>        String t = st.nextToken();<br>        int k = Integer.parseInt(t);<br>            m[j++] = k;<br>    }<br><br>    double lat, lon;<br><br>    lat = m[0] * pi / 180; <br>    lon = m[1] * pi / 180; <br><br>    x[i] = Math.cos(lon) * Math.cos(lat);<br>    y[i] = Math.cos(lat) * Math.sin(lon);<br>    z[i] = Math.sin(lat);<br>    System.out.println(x[i] + " " + y[i] + " " + z[i]);<br>      }<br><br>      d = new double[n][n];<br><br>      for ( int i = 0; i &lt; n; ++i )<br>    for ( int j = 0; j &lt; n; ++j )<br>        {<br>        d[i][j] = radius * dist(x[i], y[i], z[i], x[j], y[j], z[j]);<br>        System.out.println(d[i][j]);<br>        }<br><br>      visited = new boolean[n];<br>      visit(0, 0, 0);<br>      return (int)(Math.round(best + 0.0001));<br>  }<br>}<br><br><br><br>// Powered by FileEdit<br></td>