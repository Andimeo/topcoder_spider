<td class="problemText" colspan="8" valign="middle" align="left">
            using System;<br>using System.Collections.Generic;<br><br>public class TheEasyChase {<br>    public string winner(int n, int rowWhite, int colWhite, int rowBlack, int colBlack)<br>    {<br>        --rowWhite;<br>        --colWhite;<br>        --rowBlack;<br>        --colBlack;<br>        if (rowWhite &gt; n - 1 - rowWhite || rowWhite == n - 1 - rowWhite &amp;&amp; rowBlack &gt; n - 1 - rowBlack)<br>        {<br>            rowWhite = n - 1 - rowWhite;<br>            rowBlack = n - 1 - rowBlack;<br>        }<br>        if (colWhite &gt; n - 1 - colWhite || colWhite == n - 1 - colWhite &amp;&amp; colBlack &gt; n - 1 - colBlack)<br>        {<br>            colWhite = n - 1 - colWhite;<br>            colBlack = n - 1 - colBlack;<br>        }<br>        if (rowWhite &gt; colWhite || rowWhite == colWhite &amp;&amp; rowBlack &gt; colBlack) {<br>            int t = rowWhite;<br>            rowWhite = colWhite;<br>            colWhite = t;<br>            t = rowBlack;<br>            rowBlack = colBlack;<br>            colBlack = t;<br>        }<br>        int spos = (((rowWhite * n + colWhite) * n + rowBlack) * n + colBlack) * 2;<br>        List&lt;int&gt;[] moves = new List&lt;int&gt;[2 * n * n * n * n];<br>        List&lt;int&gt;[] rmoves = new List&lt;int&gt;[2 * n * n * n * n];<br>        for (int i = 0; i &lt; rmoves.Length; ++i)<br>            rmoves[i] = new List&lt;int&gt;();<br>        int[] toDo = new int[2 * n * n * n * n];<br>        int[] res = new int[2 * n * n * n * n];<br>        for (int r1 = 0; r1 &lt; n; ++r1) if (r1 &lt;= n - 1 - r1)<br>                for (int c1 = 0; c1 &lt; n; ++c1) if (c1 &lt;= n - 1 - c1 &amp;&amp; r1 &lt;= c1)<br>                        for (int r2 = 0; r2 &lt; n; ++r2) if (r1 &lt; n - 1 - r1 || r2 &lt;= n - 1 - r2)<br>                            for (int c2 = 0; c2 &lt; n; ++c2) if ((c1 &lt; n - 1 - c1 || c2 &lt;= n - 1 - c2) &amp;&amp; (r1 &lt; c1 || r2 &lt;= c2))<br>                                for (int who = 0; who &lt; 2; ++who)<br>                                {<br>                                    int pos = (((r1 * n + c1) * n + r2) * n + c2) * 2 + who;<br>                                    moves[pos] = new List&lt;int&gt;();<br>                                    for (int dr = -1; dr &lt;= 1; ++dr)<br>                                        for (int dc = -1; dc &lt;= 1; ++dc) if (dr == 0 ^ dc == 0)<br>                                                for (int am = 1; am &lt;= 2 - who; ++am)<br>                                                {<br>                                                    int nr1 = r1;<br>                                                    int nc1 = c1;<br>                                                    int nr2 = r2;<br>                                                    int nc2 = c2;<br>                                                    if (who == 1)<br>                                                    {<br>                                                        nr1 += dr * am;<br>                                                        nc1 += dc * am;<br>                                                        if (nr1 &lt; 0 || nr1 &gt;= n || nc1 &lt; 0 || nc1 &gt;= n)<br>                                                            continue;<br>                                                    }<br>                                                    else<br>                                                    {<br>                                                        nr2 += dr * am;<br>                                                        nc2 += dc * am;<br>                                                        if (nr2 &lt; 0 || nr2 &gt;= n || nc2 &lt; 0 || nc2 &gt;= n)<br>                                                            continue;<br>                                                    }<br>                                                    if (nr1 == nr2 &amp;&amp; nc1 == nc2)<br>                                                        continue;<br>                                                    if (nr1 &gt; n - 1 - nr1 || nr1 == n - 1 - nr1 &amp;&amp; nr2 &gt; n - 1 - nr2)<br>                                                    {<br>                                                        nr1 = n - 1 - nr1;<br>                                                        nr2 = n - 1 - nr2;<br>                                                    }<br>                                                    if (nc1 &gt; n - 1 - nc1 || nc1 == n - 1 - nc1 &amp;&amp; nc2 &gt; n - 1 - nc2)<br>                                                    {<br>                                                        nc1 = n - 1 - nc1;<br>                                                        nc2 = n - 1 - nc2;<br>                                                    }<br>                                                    if (nr1 &gt; nc1 || nr1 == nc1 &amp;&amp; nr2 &gt; nc2)<br>                                                    {<br>                                                        int t = nr1;<br>                                                        nr1 = nc1;<br>                                                        nc1 = t;<br>                                                        t = nr2;<br>                                                        nr2 = nc2;<br>                                                        nc2 = t;<br>                                                    }<br>                                                    int npos = (((nr1 * n + nc1) * n + nr2) * n + nc2) * 2 + (1 - who);<br>                                                    moves[pos].Add(npos);<br>                                                    rmoves[npos].Add(pos);<br>                                                    ++toDo[npos];<br>                                                }<br>                                }<br>        int[] q = new int[2 * n * n * n * n];<br>        int qt = 0;<br>        int qh = 0;<br>        for (int r1 = 0; r1 &lt; n; ++r1) if (r1 &lt;= n - 1 - r1)<br>                for (int c1 = 0; c1 &lt; n; ++c1) if (c1 &lt;= n - 1 - c1 &amp;&amp; r1 &lt;= c1)<br>                    {<br>                        int r2 = r1;<br>                        int c2 = c1;<br>                        for (int who = 0; who &lt; 2; ++who)<br>                        {<br>                            int pos = (((r1 * n + c1) * n + r2) * n + c2) * 2 + who;<br>                            if (who == 0)<br>                                res[pos] = -1;<br>                            else<br>                                res[pos] = 1;<br>                            q[qh++] = pos;<br>                        }<br>                    }<br>        while (qt &lt; qh)<br>        {<br>            int cur = q[qt++];<br>            int cres = res[cur];<br>            foreach (int nxt in moves[cur])<br>            {<br>                if (nxt % 2 == 0)<br>                {<br>                    if (res[nxt] &lt;= 0)<br>                    {<br>                        if (cres &lt; 0)<br>                        {<br>                            res[nxt] = Math.Min(res[nxt], cres - 1);<br>                            --toDo[nxt];<br>                            if (toDo[nxt] == 0)<br>                            {<br>                                q[qh++] = nxt;<br>                            }<br>                        }<br>                        else<br>                        {<br>                            res[nxt] = cres + 1;<br>                            toDo[nxt] = 0;<br>                            q[qh++] = nxt;<br>                        }<br>                    }<br>                }<br>                else<br>                {<br>                    if (res[nxt] &gt;= 0)<br>                    {<br>                        if (cres &gt; 0)<br>                        {<br>                            res[nxt] = Math.Max(res[nxt], cres + 1);<br>                            --toDo[nxt];<br>                            if (toDo[nxt] == 0)<br>                            {<br>                                q[qh++] = nxt;<br>                            }<br>                        }<br>                        else<br>                        {<br>                            res[nxt] = cres - 1;<br>                            toDo[nxt] = 0;<br>                            q[qh++] = nxt;<br>                        }<br>                    }<br>                }<br>            }<br>        }<br>        int what = res[spos];<br>        if (what &lt; 0 &amp;&amp; toDo[spos] &gt; 0)<br>            what = 0;<br>        if (what == 0)<br>            throw new Exception();<br>        else if (what &gt; 0)<br>            return "WHITE " + (what - 1);<br>        else<br>            return "BLACK " + (-what - 1);<br>    }<br><br><br><br>}<br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003] [modified for C# by Petr]<br>// Powered by CodeProcessor<br></td>