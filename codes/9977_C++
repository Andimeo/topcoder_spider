<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;algorithm&gt;<br>#include &lt;bitset&gt;<br>#include &lt;cassert&gt;<br>#include &lt;cctype&gt;<br>#include &lt;cmath&gt;<br>#include &lt;complex&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cstring&gt;<br>#include &lt;ctime&gt;<br>#include &lt;deque&gt;<br>#include &lt;fstream&gt;<br>#include &lt;iostream&gt;<br>#include &lt;iterator&gt;<br>#include &lt;list&gt;<br>#include &lt;map&gt;<br>#include &lt;numeric&gt;<br>#include &lt;queue&gt;<br>#include &lt;set&gt;<br>#include &lt;sstream&gt;<br>#include &lt;stack&gt;<br>#include &lt;string&gt;<br>#include &lt;utility&gt;<br>#include &lt;valarray&gt;<br>#include &lt;vector&gt;<br><br>using namespace std;<br><br>//Macroses<br>#define all(v) (v).begin(), (v).end()<br><br>//Types<br>typedef long long ll;<br>typedef pair &lt;int, int&gt; pii;<br>typedef vector &lt;int&gt; vi;<br>typedef vector &lt;bool&gt; vb;<br>typedef vector &lt;pii&gt; vp;<br>typedef vector &lt;double&gt; vd;<br>typedef queue &lt;pii&gt; qp;<br><br>//Constants<br>const int INF = 1000000000;<br>const double EPS = 1e-10;<br>const double PI = 3.1415926535897932384626433832795;<br>const int dx[] = {1, 0, -1, 0};<br>const int dy[] = {0, 1, 0, -1};<br><br>//Global<br>int answ[20][20][20][20];<br>int ansb[20][20][20][20];<br><br>//Functions<br>inline int sign(int a) {<br>  return a ? (a &gt; 0 ? 1 : -1) : 0;<br>}<br><br>//Main class<br>class TheEasyChase {<br>public:<br>  string winner(int n, int a, int b, int c, int d) {<br>    string res;<br>    memset(answ, sizeof(answ), 0);<br>    memset(ansb, sizeof(ansb), 0);<br>    for (int i = 0; i &lt; n; ++i) {<br>      for (int j = 0; j &lt; n; ++j) {<br>        answ[i][j][i][j] = -INF;<br>        ansb[i][j][i][j] = INF;<br>      }<br>    }<br>    while (true) {<br>      if (answ[a - 1][b - 1][c - 1][d - 1]) {<br>        int ans = answ[a - 1][b - 1][c - 1][d - 1];<br>        if (ans &gt; 0) {<br>          ostringstream out;<br>          out &lt;&lt; "WHITE " &lt;&lt; INF - ans;<br>          return out.str();<br>        } else {<br>          ostringstream out;<br>          out &lt;&lt; "BLACK " &lt;&lt; INF + ans;<br>          return out.str();<br>        }<br>      }<br>      for (int i = 0; i &lt; n; ++i) {<br>        for (int j = 0; j &lt; n; ++j) {<br>          for (int k = 0; k &lt; n; ++k) {<br>            for (int t = 0; t &lt; n; ++t) {<br>              if (!answ[i][j][k][t]) {<br>                int c = -INF;<br>                for (int d = 0; d &lt; 4; ++d) {<br>                  int ni = i + dx[d];<br>                  int nj = j + dy[d];<br>                  if (ni &gt;= n || nj &gt;= n || ni &lt; 0 || nj &lt; 0) {<br>                    continue;<br>                  }<br>                  int cc = ansb[ni][nj][k][t];<br>                  c &gt;?= cc - sign(cc);<br>                }<br>                if (c) {<br>                  answ[i][j][k][t] = c;<br>                }<br>              }<br>            }<br>          }<br>        }<br>      }<br>      for (int i = 0; i &lt; n; ++i) {<br>        for (int j = 0; j &lt; n; ++j) {<br>          for (int k = 0; k &lt; n; ++k) {<br>            for (int t = 0; t &lt; n; ++t) {<br>              if (!ansb[i][j][k][t]) {<br>                int c = INF;<br>                for (int d = 0; d &lt; 4; ++d) {<br>                  for (int s = 1; s &lt; 3; ++s) {<br>                    int nk = k + dx[d] * s;<br>                    int nt = t + dy[d] * s;<br>                    if (nk &gt;= n || nt &gt;= n || nk &lt; 0 || nt &lt; 0) {<br>                      continue;<br>                    }<br>                    int cc = answ[i][j][nk][nt];<br>                    c &lt;?= cc - sign(cc);<br>                  }<br>                }<br>                if (c) {<br>                  ansb[i][j][k][t] = c;<br>                }<br>              }<br>            }<br>          }<br>        }<br>      }<br>    }<br>    return res;<br>  }<br>  <br><br>};<br><br><br><br>// Powered by FileEdit<br>// Powered by TZTester 1.01 [25-Feb-2003]<br>// Powered by CodeProcessor<br></td>