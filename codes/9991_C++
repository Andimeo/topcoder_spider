<td class="problemText" colspan="8" valign="middle" align="left">
            #include &lt;iostream&gt;<br>#include &lt;sstream&gt;<br>#include &lt;vector&gt;<br>#include &lt;string&gt;<br>#include &lt;map&gt;<br>#include &lt;set&gt;<br>#include &lt;stack&gt;<br>#include &lt;queue&gt;<br>#include &lt;utility&gt;<br>#include &lt;complex&gt;<br>#include &lt;algorithm&gt;<br>#include &lt;iterator&gt;<br>#include &lt;numeric&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cstddef&gt;<br>#include &lt;cstring&gt;<br>#include &lt;cmath&gt;<br>#include &lt;cassert&gt;<br><br>using namespace std;<br><br>#define RA(x) (x).begin(), (x).end()<br>#define FE(i, x) for (__typeof((x).begin()) i = (x).begin(); i != (x).end(); ++i)<br>#define SZ(x) (int((x).size()))<br><br>typedef long long ll;<br>typedef pair&lt;int, int&gt; pii;<br>typedef complex&lt;double&gt; pnt;<br>typedef vector&lt;int&gt; vi;<br>typedef vector&lt;ll&gt; vll;<br>typedef vector&lt;string&gt; vs;<br><br>template&lt;typename T&gt;<br>static T gcd(T a, T b) { return b ? gcd(b, a % b) : a; }<br><br>template&lt;typename T, typename M&gt;<br>static T mod(T a, M m)<br>{<br>    a %= m;<br>    if (a &lt; 0) a += m;<br>    return a;<br>}<br><br>template&lt;typename T&gt;<br>static T inverse(T a, T m)<br>{<br>    a = mod(a, m);<br>    if (a == 1) return 1;<br>    else return mod((1 - inverse(m, a) * m) / a, m);<br>}<br><br>template&lt;typename T&gt;<br>static void splitstr(const string &amp;s, vector&lt;T&gt; &amp;out)<br>{<br>    istringstream in(s);<br>    out.clear();<br>    copy(istream_iterator&lt;T&gt;(in), istream_iterator&lt;T&gt;(), back_inserter(out));<br>}<br><br>static inline double dot(const pnt &amp;a, const pnt &amp;b) { return real(conj(a) * b); }<br>static inline double cross(const pnt &amp;a, const pnt &amp;b) { return imag(conj(a) * b); }<br>static inline double cross(const pnt &amp;a, const pnt &amp;b, const pnt &amp;c)<br>{<br>    return cross(b - a, c - a);<br>}<br><br>#define MOD 1000000007<br><br>class NumberGrid<br>{<br>public:<br><br>    ll solve(int sz, int tot)<br>    {<br>        vll dp(tot + 1);<br>        dp[0] = 1;<br>        for (int i = sz - 1; i &gt;= 0; i--)<br>        {<br>            for (int j = tot; j &gt;= 0; j--)<br>            {<br>                ll v = 0;<br>                int s = max(0, j - 9);<br>                for (int k = s; k &lt;= j; k++)<br>                    v += dp[k];<br>                dp[j] = mod(v, MOD);<br>            }<br>        }<br>        return dp[tot];<br>    }<br><br>    vector &lt;string&gt; decrypt(vector &lt;string&gt; hundreds, vector &lt;string&gt; tens, vector &lt;string&gt; ones) <br>    {<br>        int R = SZ(hundreds);<br>        int C = SZ(hundreds[0]);<br>        int delta, testsum;<br>        vs ans(R, string(C, ' '));<br>        vi rtotal(R, 0);<br>        vi ctotal(C, 0);<br>        vector&lt;vi&gt; grid(R, vi(C, 0));<br>        vector&lt;vi&gt; sol(R, vi(C, 0));<br>        for (int i = 0; i &lt; R; i++)<br>            for (int j = 0; j &lt; C; j++)<br>                grid[i][j] = (hundreds[i][j] - '0') * 100 + (tens[i][j] - '0') * 10 + (ones[i][j] - '0');<br><br>        int gtotal = 0;<br>        for (int i = 0; i &lt; R; i++)<br>            gtotal = accumulate(RA(grid[i]), gtotal);<br>        if (gtotal % (R + C - 1) != 0)<br>            goto none;<br>        gtotal /= (R + C - 1);<br>        cout &lt;&lt; gtotal &lt;&lt; '\n';<br><br><br>        if (R == 1 || C == 1)<br>        {<br>            for (int i = 0; i &lt; R; i++)<br>                for (int j = 0; j &lt; C; j++)<br>                    if (grid[i][j] != grid[0][0])<br>                        goto none;<br>            int tot = grid[0][0];<br>            int sz = max(R, C);<br>            if (tot &gt; 9 * sz || tot &lt; 0)<br>                goto none;<br>            if (tot == 9 * sz || tot == 0 || sz == 1)<br>            {<br>                for (int i = 0; i &lt; R; i++)<br>                    for (int j = 0; j &lt; C; j++)<br>                        ans[i][j] = '0' + (tot / sz);<br>                return ans;<br>            }<br><br>            ll ways = solve(sz, tot);<br>            ans.resize(1);<br>            ostringstream msg;<br>            msg &lt;&lt; ways &lt;&lt; " SOLUTIONS";<br>            ans[0] = msg.str();<br>            return ans;<br>        }<br><br><br>        for (int i = 0; i &lt; R; i++)<br>        {<br>            for (int j = 0; j &lt; C; j++)<br>            {<br>                rtotal[i] += grid[i][j];<br>                ctotal[j] += grid[i][j];<br>            }<br>        }<br><br>        // TODO: r/c = 1<br>        for (int i = 0; i &lt; R; i++)<br>        {<br>            rtotal[i] -= gtotal;<br>            if (rtotal[i] % (C - 1) != 0)<br>                goto none;<br>            rtotal[i] /= C - 1;<br>        }<br><br>        for (int i = 0; i &lt; C; i++)<br>        {<br>            ctotal[i] -= gtotal;<br>            if (ctotal[i] % (R - 1) != 0)<br>                goto none;<br>            ctotal[i] /= R - 1;<br>        }<br><br>        testsum = 0;<br>        for (int i = 0; i &lt; R; i++)<br>            for (int j = 0; j &lt; C; j++)<br>            {<br>                if (i &gt; 0 &amp;&amp; j == 0)<br>                {<br>                    int d = rtotal[i] - rtotal[i - 1];<br>                    int e = grid[i][j] - grid[i - 1][j];<br>                    sol[i][j] = sol[i - 1][j] + d - e;<br>                }<br>                if (j &gt; 0)<br>                {<br>                    int d = ctotal[j] - ctotal[j - 1];<br>                    int e = grid[i][j] - grid[i][j - 1];<br>                    sol[i][j] = sol[i][j - 1] + d - e;<br>                }<br>                testsum  += sol[i][j];<br>            }<br><br>        if ((gtotal - testsum) % (R * C) != 0)<br>            goto none;<br>        delta = (gtotal - testsum) / (R * C);<br>        for (int i = 0; i &lt; R; i++)<br>            for (int j = 0; j &lt; C; j++)<br>            {<br>                sol[i][j] += delta;<br>                if (sol[i][j] &lt; 0 || sol[i][j] &gt; 9)<br>                    goto none;<br>            }<br><br>        for (int i = 0; i &lt; R; i++)<br>            for (int j = 0; j &lt; C; j++)<br>            {<br>                int t = 0;<br>                for (int x = 0; x &lt; C; x++)<br>                    t += sol[i][x];<br>                for (int x = 0; x &lt; R; x++)<br>                    t += sol[x][j];<br>                t -= sol[i][j];<br>                if (t != grid[i][j])<br>                    goto none;<br>                ans[i][j] = sol[i][j] + '0';<br>            }<br>        return ans;<br>none:<br>        return vs(1, "NO SOLUTIONS");<br>    }<br>};<br><br><br><br>// Powered by FileEdit<br></td>