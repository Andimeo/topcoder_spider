<td class="problemText" colspan="8" valign="middle" align="left">
            import java.util.*;<br>import static java.util.Arrays.fill;<br>import static java.lang.System.arraycopy;<br>import static java.lang.Math.*;<br><br>public class NumberGrid {<br>  public String[] decrypt(String[] hundreds, String[] tens, String[] ones) {<br>    int n = hundreds.length;<br>    int m = hundreds[0].length();<br>    int[][] e = new int[n][m];<br>    for (int i = 0; i &lt; n; i++) {<br>      for (int j = 0; j &lt; m; j++) {<br>        e[i][j] = hundreds[i].charAt(j) * 100 + tens[i].charAt(j) * 10 + ones[i].charAt(j) - 111 * '0';<br>      }<br>    }<br>    if (n == 1) {<br>      return solve1(e);<br>    }<br>    if (m == 1) {<br>      return solve2(e);<br>    }<br>    long sum = 0;<br>    for (int i = 0; i &lt; n; i++) {<br>      for (int j = 0; j &lt; m; j++) {<br>        sum += e[i][j];<br>      }<br>    }<br>    if (sum % (n + m - 1) != 0) {<br>      return new String[]{"NO SOLUTIONS"};<br>    }<br>    sum /= n + m - 1;<br>    long[] cols = new long[m];<br>    for (int i = 0; i &lt; m; i++) {<br>      long s = 0;<br>      for (int j = 0; j &lt; n; j++) {<br>        s += e[j][i];<br>      }<br>      s -= sum;<br>      if (s % (n - 1) != 0) {<br>        return new String[]{"NO SOLUTIONS"};<br>      }<br>      cols[i] = s / (n - 1);<br>    }<br>    long[] rows = new long[n];<br>    for (int i = 0; i &lt; n; i++) {<br>      long s = 0;<br>      for (int j = 0; j &lt; m; j++) {<br>        s += e[i][j];<br>      }<br>      s -= sum;<br>      if (s % (m - 1) != 0) {<br>        return new String[]{"NO SOLUTIONS"};<br>      }<br>      rows[i] = s / (m - 1);<br>    }<br>    int[][] a = new int[n][m];<br>    for (int i = 0; i &lt; n; i++) {<br>      for (int j = 0; j &lt; m; j++) {<br>        long val = rows[i] + cols[j] - e[i][j];<br>        if (val &lt; 0 || val &gt; 9) {<br>          return new String[]{"NO SOLUTIONS"};<br>        }<br>        a[i][j] = (int)val;<br>      }<br>    }<br>    return convert(a);<br>  }<br>  <br>  static String[] convert(int[][] a) {<br>    int n = a.length;<br>    int m = a[0].length;<br>    String[] ret = new String[n];<br>    for (int i = 0; i &lt; n; i++) {<br>      char[] c = new char[m];<br>      for (int j = 0; j &lt; m; j++) {<br>        c[j] = (char)('0' + a[i][j]);<br>      }<br>      ret[i] = new String(c);<br>    }<br>    return ret;<br>  }<br><br>  String[] solve1(int[][] e) {<br>    int[] f = e[0];<br>    int[] ret = solve(f);<br>    if (ret == null) {<br>      if (result == 0)<br>        return new String[]{"NO SOLUTIONS"};<br>      else <br>        return new String[]{result+" SOLUTIONS"};<br>    }<br>    return convert(new int[][]{ret});<br>  }<br>  <br>  static int result;<br>  <br>  static int[] solve(int[] f) {<br>    result = 0;<br>    for (int i = 0; i &lt; f.length; i++) {<br>      if (f[i] != f[0]) {<br>        return null;<br>      }<br>    }<br>    if (f[0] &gt; f.length * 9) {<br>      return null;<br>    }<br>    if (f.length == 1) {<br>      return new int[]{f[0]};<br>    }<br>    if (f[0] == f.length * 9) {<br>      int[] res = new int[f.length];<br>      fill(res, 9);<br>      return res;<br>    }<br>    if (f[0] == 0) {<br>      int[] res = new int[f.length];<br>      return res;<br>    }<br>    int[] ways = new int[f[0]+1];<br>    ways[0] = 1;<br>    for (int i = 0; i &lt; f.length; i++) {<br>      int[] next = new int[ways.length];<br>      for (int j = 0; j &lt; ways.length; j++) {<br>        for (int digit = 0; digit &lt; 10 &amp;&amp; j + digit &lt; ways.length; digit++) {<br>          next[j + digit] += ways[j];<br>          if (next[j + digit] &gt;= MOD) {<br>            next[j + digit] -= MOD;<br>          }<br>        }<br>      }<br>      int[] t = next;<br>      next = ways;<br>      ways = t;<br>    }<br>    result = ways[f[0]];<br>    return null;<br>  }<br>  <br>  final static int MOD = 1000000007;<br>  <br>  String[] solve2(int[][] e) {<br>    int[] f = new int[e.length];<br>    for (int i = 0; i &lt; e.length; i++) {<br>      f[i] = e[i][0];<br>    }<br>    int[] ret = solve(f);<br>    if (ret == null) {<br>      if (result == 0)<br>        return new String[]{"NO SOLUTIONS"};<br>      else <br>        return new String[]{result+" SOLUTIONS"};<br>    }<br>    int[][] a = new int[ret.length][1];<br>    for (int i = 0; i &lt; ret.length; i++ )<br>    {<br>      a[i][0] = ret[i];<br>    }<br>    return convert(a);<br>  }<br><br>  private static void debug(Object... o) {<br>    System.out.println(Arrays.deepToString(o));<br>  }<br>}<br><br><br>// Powered by FileEdit<br></td>