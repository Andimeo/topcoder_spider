<td class="problemText" valign="middle" align="left">
                      
              		<table><tr><td colspan="2" class="statText"><h3>Problem Statement</h3></td></tr><tr><td class="statText">    </td><td class="statText">There are N cities numbered 0 to N-1.  The j-th character of the i-th element of <b>roads</b> is 'Y' if there is a bidirectional road between cities i and j, and 'N' otherwise.<br>

The road connecting cities A and B, where A &lt; B, has a higher priority than the road connecting cities C and D, where C &lt; D, if either A &lt; C or (A = C and B &lt; D).  A set of roads is a list of one or more roads sorted from highest to lowest priority.  A set S1 has a higher priority than set S2 if road S1[i] has a higher priority than road S2[i], where i is the earliest index at which the two sets differ. A set of roads is called <i>connected</i> if there's a path between any pair of cities containing only the roads from this set.<br>

Your task is to find the connected set with the highest priority containing exactly <b>M</b> roads.  Return a int[] where the i-th element is the number of roads in that set containing city i as an endpoint.  Return an empty int[] if there is no such set.<br></td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Definition</h3></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText">Class:</td><td class="statText">BestRoads</td></tr><tr><td class="statText">Method:</td><td class="statText">numberOfRoads</td></tr><tr><td class="statText">Parameters:</td><td class="statText">String[], int</td></tr><tr><td class="statText">Returns:</td><td class="statText">int[]</td></tr><tr><td class="statText">Method signature:</td><td class="statText">int[] numberOfRoads(String[] roads, int M)</td></tr><tr><td colspan="2" class="statText">(be sure your method is public)</td></tr></table></td></tr><tr><td class="statText">    </td></tr><tr><td class="statText"></td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Constraints</h3></td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText"><b>roads</b> will contain between 1 and 50 elements, inclusive.<br></td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText"><b>M</b> will be between N-1 and 1,000, inclusive, where N is the number of elements in <b>roads</b>. <br></td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">Each element of <b>roads</b> will contain exactly N characters 'Y' or 'N', where N is the number of elements in <b>roads</b>. <br></td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">For each i and j <b>roads</b>[i][j] will be equal to <b>roads</b>[j][i]. <br></td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">For each i <b>roads</b>[i][i] will be equal to 'N'. <br></td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Examples</h3></td></tr><tr><td align="center" nowrap class="statText">0)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{"NYYYY","YNYYY","YYNYY","YYYNY","YYYYN"}</pre></td></tr><tr><td class="statText"><pre>10</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: {4, 4, 4, 4, 4 }</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">All roads should be selected.</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">1)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{"NYY","YNY","YYN"}</pre></td></tr><tr><td class="statText"><pre>2</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: {2, 1, 1 }</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">The set must contain roads 0-1 and 0-2.</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">2)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{"NYNNY","YNNNY","NNNNN","NNNNY","YYNYN"}</pre></td></tr><tr><td class="statText"><pre>4</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: { }</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">City 2 can not be connected to others.</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">3)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{"NYYNYYYN","YNNNNYYN","YNNNYNNN","NNNNNNYY","YNYNNNNN","YYNNNNYY","YYNYNYNY","NNNYNYYN"}</pre></td></tr><tr><td class="statText"><pre>10</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: {5, 3, 2, 2, 2, 2, 3, 1 }</pre></td></tr><tr><td class="statText"></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">4)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{"NNYY","NNYY","YYNN","YYNN"}</pre></td></tr><tr><td class="statText"><pre>5</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: { }</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">There are totally 4 roads, so we can't choose 5 of them.</td></tr></table></td></tr></table></td></tr></table><hr><p>This problem statement is the exclusive and proprietary property of TopCoder, Inc.  Any unauthorized use or reproduction of this information without the prior written consent of TopCoder, Inc. is strictly prohibited.  (c)2010, TopCoder, Inc.  All rights reserved.  </p>
                      
                   </td>