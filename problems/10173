<td class="problemText" valign="middle" align="left">
                      
              		<table><tr><td colspan="2" class="statText"><h3>Problem Statement</h3></td></tr><tr><td class="statText">    </td><td class="statText">You are given a String[] <b>maze</b>, where the j-th character of the i-th element describes the cell at row i, column j.  '#' denotes a wall, '.' denotes an empty space, and 'R' denotes an empty space where you have the option of placing a single robot at time 0.  The maze is surrounded on all four sides by walls.<br>

Each robot in the maze executes the same program starting at time 0.  The program consists of a sequence of commands, where each command is one of the four cardinal directions (up, down, left or right).  When a robot executes a command, it attempts to move one cell in the direction specified by the command.  If the destination cell is a wall, the robot will not move.  Multiple robots are allowed to occupy the same cell at the same time.  Each command takes exactly 1 second regardless of whether or not the robot moves.<br>

Your goal is to write a program that will enable to you place as many robots as possible into 'R' cells such that all of them will end up in the same cell when the program finishes.  Return this maximum possible number of robots.</td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Definition</h3></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText">Class:</td><td class="statText">ProgrammingRobots</td></tr><tr><td class="statText">Method:</td><td class="statText">numberOfRobots</td></tr><tr><td class="statText">Parameters:</td><td class="statText">String[]</td></tr><tr><td class="statText">Returns:</td><td class="statText">int</td></tr><tr><td class="statText">Method signature:</td><td class="statText">int numberOfRobots(String[] maze)</td></tr><tr><td colspan="2" class="statText">(be sure your method is public)</td></tr></table></td></tr><tr><td class="statText">    </td></tr><tr><td class="statText"></td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Constraints</h3></td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText"><b>maze</b> will contain between 1 and 50 elements, inclusive. <br></td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">Each element of <b>maze</b> will contain between 1 and 50 characters, inclusive.<br></td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">Each character in <b>maze</b> will be '#', '.' or 'R'.<br></td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">Each element of <b>maze</b> will contain the same number of characters. <br></td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Examples</h3></td></tr><tr><td align="center" nowrap class="statText">0)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{"#R##",
 "##.#",
 "##.#",
 "..R."}</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: 1</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">You cannot place robots in both 'R' cells because they won't be able to reach each other.</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">1)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{"....",
 "...R",
 ".RR."}</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: 3</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">Place a robot in every 'R' cell.  One possible program that will move them all to the same cell is: down, right, right.</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">2)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{"####..R.##",
 "#.#.####.#",
 "..R....RR#",
 "#.#.R..#..",
 "#.R#.R.#.#",
 "###RR##...",
 "########.#",
 "#######..R"}</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: 9</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText"></td></tr></table></td></tr></table></td></tr></table><hr><p>This problem statement is the exclusive and proprietary property of TopCoder, Inc.  Any unauthorized use or reproduction of this information without the prior written consent of TopCoder, Inc. is strictly prohibited.  (c)2010, TopCoder, Inc.  All rights reserved.  </p>
                      
                   </td>