<td class="problemText" valign="middle" align="left">
                      
              		<table><tr><td colspan="2" class="statText"><h3>Problem Statement</h3></td></tr><tr><td class="statText">    </td><td class="statText">You must write a class Calculate, with a method calc, which takes a String
<b>expression</b>, where <b>expression</b> is a mathematical expression.  You should
calculate the value of the expression, using the standard order of operations:
<ul><li>Always evaluate expressions in parentheses first.</li>
<li>Exponentiation next.</li>
<li>Multiplication and division next.</li>
<li>Addition and subtraction last.</li>
</ul>
Operators with the same precedence should be evaluated from left to right.  So 2^3^2 = (2^3)^2 = 64, and 3-2+1 = (3-2)+1 = 2<br><br>
Thus, if <b>expression</b> = "1+2*3^(1+1)-2", we first calculate (1+1), and get
"1+2*3^2-2".  Next we apply exponentiation and get "1+2*9-2".  Then
multiplication and division gives us "1+18-2".  Last, addition and subtraction,
left to right, gives 17.
<br><br>
Furthermore, you will be given a String[] <b>variables</b> each of whose elements represents a variable which may be used in <b>expression</b>.  Each element of <b>variables</b> will be formatted as "&lt;variable&gt; &lt;value&gt;", where &lt;variable&gt; is a sequence of 1 or more letters ('a'-'z' and 'A'-'Z'), and &lt;value&gt; is an integer.  For example, if <b>variables</b> = {"x 1", "y 11"}, and <b>expression</b> = "x*y+3*x", we substitute the values for the variables to get 1*11+3*1 = 14.
<br><br>
The <b>expression</b> will conform to the following grammar:
<ul><li>&lt;expression&gt; ::= (&lt;expression&gt;) | &lt;expression&gt;&lt;op&gt;&lt;expression&gt; | &lt;val&gt;</li><li>&lt;op&gt;::= '+'|'-'|'/'|'*'|'^'</li><li>&lt;val&gt;::= a sequence of 1 or more digits or a &lt;variable&gt; from <b>variables</b></li></ul></td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Definition</h3></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText">Class:</td><td class="statText">Calculate</td></tr><tr><td class="statText">Method:</td><td class="statText">calc</td></tr><tr><td class="statText">Parameters:</td><td class="statText">String, String[]</td></tr><tr><td class="statText">Returns:</td><td class="statText">int</td></tr><tr><td class="statText">Method signature:</td><td class="statText">int calc(String expression, String[] variables)</td></tr><tr><td colspan="2" class="statText">(be sure your method is public)</td></tr></table></td></tr><tr><td class="statText">    </td></tr><tr><td class="statText"></td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Notes</h3></td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">All of the intermediate and final results of both division and exponentiation will be integers between -2^31 and 2^31 - 1, inclusive.  (see constraints)</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">Variable names are case sensitive.</td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Constraints</h3></td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText"><b>expression</b> will include only the characters '0' to '9', '+', '-', '*', '/', '^', '(', and ')' and letters ('a'-'z' and 'A'-'Z').</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText"><b>expression</b> will be well-formed, conforming to the grammar in the problem statement.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">The final result, and all intermediate results will be integers in the range -2^31 to 2^31-1, inclusive.  This includes all numbers and variables, so "0*10000000000" is not allowed, nor is "0*a", {"a 10000000000"}.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText"><b>expression</b> will not result in division by 0 or 0^x, for x less than or equal to 0.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText"><b>variables</b> will have between 0 and 50 elements, inclusive.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">Each element of <b>variables</b> will be formatted as "&lt;variable&gt; &lt;value&gt;", where &lt;variable&gt; is a sequence of 1 or more letters ('a'-'z' and 'A'-'Z'), and &lt;value&gt; is an integer between -2^32 and 2^32-1, inclusive (possibly with leading zeros).</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">No two elements of <b>variables</b> will have the same &lt;variable&gt;.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">Each variable in <b>expression</b> will be found in <b>variables</b>.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText"><b>expression</b> will contain between 1 and 50 characters, inclusive.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">Each element of <b>variables</b> will contain between 3 and 50 characters, inclusive.</td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Examples</h3></td></tr><tr><td align="center" nowrap class="statText">0)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>"x*y+3*x"</pre></td></tr><tr><td class="statText"><pre>{"x 1", "y 11"}</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: 14</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">The example from the problem statement.</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">1)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>"x^p*2^(2^p)/t^p^t+xx*n^v"</pre></td></tr><tr><td class="statText"><pre>{"x 53", "xx 32", "p 3","t 2","n -1","v -21"}</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: 595476</pre></td></tr><tr><td class="statText"></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">2)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>"t^003^t"</pre></td></tr><tr><td class="statText"><pre>{"t 00000000000002","a 999999999"}</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: 64</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">Substituting, we get 2^3^2 = 8^2 = 64.</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">3)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>"(8*(Aa^(aA-1230))-aA^2+((00)))*(0-1)"</pre></td></tr><tr><td class="statText"><pre>{"aA 01234","Aa 98"}</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: -736371772</pre></td></tr><tr><td class="statText"></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">4)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>"0-2+t^30+t^30+1"</pre></td></tr><tr><td class="statText"><pre>{"t 2"}</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: 2147483647</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">The largest possible result.</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">5)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>"1+(0-t)^31-1"</pre></td></tr><tr><td class="statText"><pre>{"t 2"}</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: -2147483648</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">The smallest possible result.</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">6)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>"((5-x+1^x))"</pre></td></tr><tr><td class="statText"><pre>{"x -100"}</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: 106</pre></td></tr><tr><td class="statText"></td></tr></table></td></tr></table><hr><p>This problem statement is the exclusive and proprietary property of TopCoder, Inc.  Any unauthorized use or reproduction of this information without the prior written consent of TopCoder, Inc. is strictly prohibited.  (c)2010, TopCoder, Inc.  All rights reserved.  </p>
                      
                   </td>