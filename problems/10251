<td class="problemText" valign="middle" align="left">
                      
              		<table><tr><td colspan="2" class="statText"><h3>Problem Statement</h3></td></tr><tr><td class="statText">    </td><td class="statText"><p>You have an infinite number of the following two polyominoes: AAAA and BB.</p>

<p>You are given a String <b>region</b>, filled with characters '.' and 'X'. You need to cover (without overlapping) all the 'X' characters with the given polyominoes.</p>

<p>Return a String that contains the same region with cells marked '.' left untouched, and cells marked 'X' changed to 'A' or 'B', according to the polyomino that covers the cell.</p>

<p>If there is no solution, return the String "impossible" (quotes for clarity only).</p>

<p>If there are multiple solutions, return the lexicographically smallest one.</p>
</td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Definition</h3></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText">Class:</td><td class="statText">LinearPolyominoCovering</td></tr><tr><td class="statText">Method:</td><td class="statText">findCovering</td></tr><tr><td class="statText">Parameters:</td><td class="statText">String</td></tr><tr><td class="statText">Returns:</td><td class="statText">String</td></tr><tr><td class="statText">Method signature:</td><td class="statText">String findCovering(String region)</td></tr><tr><td colspan="2" class="statText">(be sure your method is public)</td></tr></table></td></tr><tr><td class="statText">    </td></tr><tr><td class="statText"></td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Notes</h3></td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">A string S is greater than a string T lexicographically if T is a proper prefix of S, or if S has a greater character at the first position where the strings differ.</td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Constraints</h3></td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText"><b>region</b> will contain between 1 and 50 characters, inclusive.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">Each character of <b>region</b> will be either '.' or uppercase 'X'.</td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Examples</h3></td></tr><tr><td align="center" nowrap class="statText">0)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>"XXXXXX"</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: "AAAABB"</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">There is only room for one AAAA polyomino, so there are three possible coverings: "AAAABB", "BBAAAA", and "BBBBBB". The first one is the lexicographically smallest.</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">1)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>"XX.XX"</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: "BB.BB"</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">The empty cell in the middle should be left uncovered, so we can't use the AAAA polyomino here.</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">2)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>"XXXX....XXX.....XX"</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: "impossible"</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">The middle segment of Xs is too narrow for an AAAA polyomino, but is too wide for a BB polyomino.</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">3)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>"X"</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: "impossible"</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText"></td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">4)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>"XX.XXXXXXXXXX..XXXXXXXX...XXXXXX"</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: "BB.AAAAAAAABB..AAAAAAAA...AAAABB"</pre></td></tr><tr><td class="statText"></td></tr></table></td></tr></table><hr><p>This problem statement is the exclusive and proprietary property of TopCoder, Inc.  Any unauthorized use or reproduction of this information without the prior written consent of TopCoder, Inc. is strictly prohibited.  (c)2010, TopCoder, Inc.  All rights reserved.  </p>
                      
                   </td>