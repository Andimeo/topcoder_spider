<td class="problemText" valign="middle" align="left">
                      
              		<table><tr><td colspan="2" class="statText"><h3>Problem Statement</h3></td></tr><tr><td class="statText">    </td><td class="statText"><p>
Well-parenthesized strings are defined using the following rules:
</p>
<ul><li>The empty string is well-parenthesized.</li>
<li>If <tt>S</tt> is a well-parenthesized string, then <tt>(S)</tt> is a well-parenthesized string.</li>
<li>If <tt>S</tt> and <tt>T</tt> are well-parenthesized strings, then <tt>ST</tt> is a well-parenthesized string.</li>
<li>Every well-parenthesized string can be created using the previous rules only.</li>
</ul><p>
In this problem we will deal with the complement of this set of strings: The strings that consist only of the characters '<tt>(</tt>' and '<tt>)</tt>', but are not well-parenthesized. We will call these strings <i>mismatched</i>.
</p>

<p>
You are given an int <b>N</b> and a long <b>K</b>. All mismatched strings of length <b>N</b> can be ordered lexicographically, and numbered sequentially, starting with zero. Return the string that will get the number <b>K</b> in this order. If there is no such string, return the empty string instead.
</p>
</td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Definition</h3></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText">Class:</td><td class="statText">MismatchedStrings</td></tr><tr><td class="statText">Method:</td><td class="statText">getString</td></tr><tr><td class="statText">Parameters:</td><td class="statText">int, long</td></tr><tr><td class="statText">Returns:</td><td class="statText">String</td></tr><tr><td class="statText">Method signature:</td><td class="statText">String getString(int N, long K)</td></tr><tr><td colspan="2" class="statText">(be sure your method is public)</td></tr></table></td></tr><tr><td class="statText">    </td></tr><tr><td class="statText"></td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Notes</h3></td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">Given two different strings S and T of equal length, S is lexicographically smaller than T if it has a smaller character at the first position where they differ.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">The ASCII value of '(' is less than the ASCII value of ')'.</td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Constraints</h3></td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText"><b>N</b> will be between 1 and 50, inclusive.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText"><b>K</b> will be between 0 and 2^<b>N</b> - 1, inclusive.</td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Examples</h3></td></tr><tr><td align="center" nowrap class="statText">0)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>4</pre></td></tr><tr><td class="statText"><pre>0</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: "(((("</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">For any length, the lexicographically smallest mismatched string consists of '(' characters only.</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">1)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>4</pre></td></tr><tr><td class="statText"><pre>4</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: "())("</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">There are 14 mismatched strings of length 4. The first five are 
"<tt>((((</tt>",
"<tt>((()</tt>",
"<tt>(()(</tt>",
"<tt>()((</tt>",
and
"<tt>())(</tt>".
Note that we use a 0-based index, hence <b>K</b>=4 corresponds to the fifth mismatched string.</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">2)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>6</pre></td></tr><tr><td class="statText"><pre>63</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: ""</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">There are less than 64 mismatched strings of length 6.</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">3)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>7</pre></td></tr><tr><td class="statText"><pre>13</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: "((())()"</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText"></td></tr></table></td></tr></table></td></tr></table><hr><p>This problem statement is the exclusive and proprietary property of TopCoder, Inc.  Any unauthorized use or reproduction of this information without the prior written consent of TopCoder, Inc. is strictly prohibited.  (c)2010, TopCoder, Inc.  All rights reserved.  </p>
                      
                   </td>