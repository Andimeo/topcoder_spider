<td class="problemText" valign="middle" align="left">
                      
              		<table><tr><td colspan="2" class="statText"><h3>Problem Statement</h3></td></tr><tr><td class="statText">    </td><td class="statText">The bored philosophers problem is a simple one.  There are <b>N</b> philosophers in a classroom, and they are bored - so bored that they end up playing a game in which they use a random text excerpt from a book to challenge themselves.  The first philosopher begins the game by saying the number of different words present in the excerpt.  The second philosopher then tries to outdo the first by saying the number of different sequences of two consecutive words in the text.  The game continues as each philosopher <i>i</i> says the number of different sequences of <i>i</i> consecutive words.  (All indices in this problem are 1-indexed.)  The game ends after all <b>N</b> philosophers have spoken.<br><br>
You are given the text as a String[] <b>text</b>.  Concatenate the elements of <b>text</b> to get the complete text.  Words in the text are separated by single spaces.  Return a int[] containing exactly <b>N</b> elements, where the i-th element is the number said by the i-th philosopher.</td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Definition</h3></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText">Class:</td><td class="statText">BoredPhilosophers</td></tr><tr><td class="statText">Method:</td><td class="statText">simulate</td></tr><tr><td class="statText">Parameters:</td><td class="statText">String[], int</td></tr><tr><td class="statText">Returns:</td><td class="statText">int[]</td></tr><tr><td class="statText">Method signature:</td><td class="statText">int[] simulate(String[] text, int N)</td></tr><tr><td colspan="2" class="statText">(be sure your method is public)</td></tr></table></td></tr><tr><td class="statText">    </td></tr><tr><td class="statText"></td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Notes</h3></td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">Suppose the text excerpt consists of words W[1], W[2], ..., W[K] (in this exact order). Then the i-th philosopher counts the number of different word sequences among (W[1], W[2], ..., W[i]), (W[2], W[3], ..., W[i+1]), ..., (W[K-i+1], W[K-i+2], ..., W[K]).</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">Two word sequences of the same length (A[1], A[2], ..., A[L]) and (B[1], B[2], ..., B[L]) are different if A[i] and B[i] are different strings for at least one i between 1 and L, inclusive.</td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Constraints</h3></td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText"><b>text</b> will contain between 1 and 50 elements, inclusive.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">Each element of <b>text</b> will contain between 1 and 50 characters, inclusive.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText"><b>text</b> will contain only lowercase letters ('a'-'z') and spaces (' ').</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">The concatenation of the elements of <b>text</b> will contain no leading, trailing, or consecutive spaces.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText"><b>N</b> will be between 1 and 50, inclusive.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText"><b>N</b> will not be greater than the number of words in <b>text</b>.</td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Examples</h3></td></tr><tr><td align="center" nowrap class="statText">0)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{"hello world"}</pre></td></tr><tr><td class="statText"><pre>2</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: {2, 1 }</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">There are exactly two different words and a single sequence of two words.</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">1)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{"aaa bbb aaa bbb aaa aaa"}</pre></td></tr><tr><td class="statText"><pre>4</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: {2, 3, 3, 3 }</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">The first philosopher will notice 2 different words: "aaa" and "bbb".<br>
The second philosopher will notice 3 different sequences of 2 words: "aaa bbb", "bbb aaa" and "aaa aaa".<br>
The third philosopher will notice 3 different sequences of 3 words: "aaa bbb aaa", "bbb aaa bbb" and "bbb aaa aaa".<br>
The fourth philosopher will notice 3 different sequences of 4 words: "aaa bbb aaa bbb", "bbb aaa bbb aaa" and "aaa bbb aaa aaa".<br></td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">2)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{"remember"," t","o concatenate ","the"," ","text"}</pre></td></tr><tr><td class="statText"><pre>1</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: {5 }</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText"></td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">3)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{"a a a a a a a b a a b a a a b b a b a a a b a b"}</pre></td></tr><tr><td class="statText"><pre>6</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: {2, 4, 7, 11, 14, 17 }</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText"></td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">4)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{"aa ababaa c cbbcbc cabcbcb ba bccc ababb",
 "c cabcba caa ababaa c cbbcbc cabcbcb ba ",
 "bccc ababbc cabcba c bbcbab",
 "b aaaa cbccaaa bccc ababbc cabcba c bbcb",
 "ab cbcaca"}</pre></td></tr><tr><td class="statText"><pre>7</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: {15, 17, 18, 19, 20, 20, 20 }</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText"></td></tr></table></td></tr></table></td></tr></table><hr><p>This problem statement is the exclusive and proprietary property of TopCoder, Inc.  Any unauthorized use or reproduction of this information without the prior written consent of TopCoder, Inc. is strictly prohibited.  (c)2010, TopCoder, Inc.  All rights reserved.  </p>
                      
                   </td>