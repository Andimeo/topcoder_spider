<td class="problemText" valign="middle" align="left">
                      
              		<table><tr><td colspan="2" class="statText"><h3>Problem Statement</h3></td></tr><tr><td class="statText">    </td><td class="statText"><p>You are given a directed graph with n vertices, labeled 0 to n-1. The edges of the graph contain values, and each time you traverse an edge, the value of that edge gets added to your total score. If the same edge is traversed multiple times, its value gets added every time. Values can be any number between -499 and 499, inclusive. There are no edges that connect a vertex to itself.</p>

<p>There's an ant at vertex 0 and it wants to get to vertex 1.  It must do this in an integer number of seconds between 1 and <b>timeLimit</b>, inclusive. The ant must make exactly <b>stepsPerSecond</b> steps each second, where each step consists of moving from its current vertex V to an adjacent vertex W (W is adjacent to V if there's a directed edge from V to W in the graph). The ant's goal is to get the highest score possible.</p>

<p>The graph is given as three String[]s <b>p0</b>, <b>p1</b> and <b>p2</b>. Concatenate the j-th characters of the i-th elements of <b>p0</b>, <b>p1</b> and <b>p2</b> (in that order) to get a 3-digit String S. If S is "000", then there is no edge from vertex i to vertex j.  Otherwise, there is an edge from vertex i to vertex j, and its value is A - 500, where A is the integer value of S. For example, if S is "100", then the value is -400, and if S is "999", the value is 499.  Return the decimal representation of the highest possible score as a String with no extra leading zeroes.  If it is impossible to reach vertex 1 under the given constraints, return "<tt>IMPOSSIBLE</tt>" (quotes for clarity) instead.</p></td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Definition</h3></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText">Class:</td><td class="statText">AntOnGraph</td></tr><tr><td class="statText">Method:</td><td class="statText">maximumBonus</td></tr><tr><td class="statText">Parameters:</td><td class="statText">String[], String[], String[], int, int</td></tr><tr><td class="statText">Returns:</td><td class="statText">String</td></tr><tr><td class="statText">Method signature:</td><td class="statText">String maximumBonus(String[] p0, String[] p1, String[] p2, int stepsPerSecond, int timeLimit)</td></tr><tr><td colspan="2" class="statText">(be sure your method is public)</td></tr></table></td></tr><tr><td class="statText">    </td></tr><tr><td class="statText"></td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Constraints</h3></td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText"><b>p0</b> will contain between 2 and 50 elements, inclusive.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText"><b>p1</b> and <b>p2</b> will each contain the same number of elements as <b>p0</b>.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">Each element in <b>p0</b>, <b>p1</b> and <b>p2</b> will contain exactly n characters, where n is the number of elements in <b>p0</b>.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">Each character in <b>p0</b>, <b>p1</b> and <b>p2</b> will be a digit ('0'-'9').</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">The i-th character of the i-th element of <b>p0</b>, <b>p1</b> and <b>p2</b> will be '0'.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText"><b>stepsPerSecond</b> will be between 1 and 100, inclusive.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText"><b>timeLimit</b> will be between 1 and 1000000000 (10^9), inclusive.</td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Examples</h3></td></tr><tr><td align="center" nowrap class="statText">0)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{"05","50"}</pre></td></tr><tr><td class="statText"><pre>{"00","00"}</pre></td></tr><tr><td class="statText"><pre>{"01","10"}</pre></td></tr><tr><td class="statText"><pre>3</pre></td></tr><tr><td class="statText"><pre>2</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: "3"</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">Here, there are two vertices.  There's an edge from vertex 0 to vertex 1 and an edge from vertex 1 to vertex 0.  Both edges have a value of 1.  The ant must make exactly 3 steps per second, so during the first second, it will make the following moves: 0-&gt;1, 1-&gt;0, 0-&gt;1.  The time limit is 2, so there's time for 3 more moves.  However, that would place the ant back at vertex 0, so the ant should stop after the first second.</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">1)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{"05","50"}</pre></td></tr><tr><td class="statText"><pre>{"00","00"}</pre></td></tr><tr><td class="statText"><pre>{"01","10"}</pre></td></tr><tr><td class="statText"><pre>2</pre></td></tr><tr><td class="statText"><pre>3</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: "IMPOSSIBLE"</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">This is the same graph as the previous example, but this time, the ant must make exactly 2 steps per second.  The ant can therefore never reach vertex 1 because it will always return to vertex 0 after each second.</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">2)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{"0550","0000","0005","5000"}</pre></td></tr><tr><td class="statText"><pre>{"0000","0000","0000","0000"}</pre></td></tr><tr><td class="statText"><pre>{"0110","0000","0001","1000"}</pre></td></tr><tr><td class="statText"><pre>7</pre></td></tr><tr><td class="statText"><pre>9</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: "49"</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">In this case the ant can traverse cycle 0-&gt;2-&gt;3-&gt;0 and earn 3 points. The ant will keep moving along this cycle and finally go to vertex 1 and earn another point. Thus the number of points modulo 3 is 1. Among all multiple of 7 less than or equal to 63, 49 is the biggest one that satisfies the constraints.</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">3)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{"0540","0000","0004","4000"}</pre></td></tr><tr><td class="statText"><pre>{"0090","0000","0009","9000"}</pre></td></tr><tr><td class="statText"><pre>{"0190","0000","0009","9000"}</pre></td></tr><tr><td class="statText"><pre>7</pre></td></tr><tr><td class="statText"><pre>9</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: "-5"</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">This is the same as the previous example, but this time, the score for the cycle is -3.</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">4)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{"079269665406","506042219642","720809987956",
 "315099331918","952306192584","406390344278",
 "999241035142","370785209189","728363760165",
 "019367419000","279718007804","610188263490"}</pre></td></tr><tr><td class="statText"><pre>{"038604914953","804585763146","350629473403",
 "028096403898","575205051686","427800322647",
 "655168017864","582553303278","980402170192",
 "620737714031","686142310509","092421645460"}</pre></td></tr><tr><td class="statText"><pre>{"063231394554","109852259379","740182746422",
 "853015982521","476805512496","898530717993",
 "430534005863","440162807186","132879980431",
 "685312177072","780267345400","959947501200"}</pre></td></tr><tr><td class="statText"><pre>37</pre></td></tr><tr><td class="statText"><pre>1221</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: "20992235"</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText"></td></tr></table></td></tr></table></td></tr></table><hr><p>This problem statement is the exclusive and proprietary property of TopCoder, Inc.  Any unauthorized use or reproduction of this information without the prior written consent of TopCoder, Inc. is strictly prohibited.  (c)2010, TopCoder, Inc.  All rights reserved.  </p>
                      
                   </td>