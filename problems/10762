<td class="problemText" valign="middle" align="left">
                      
              		<table><tr><td colspan="2" class="statText"><h3>Problem Statement</h3></td></tr><tr><td class="statText">    </td><td class="statText">The old fashioned king does not know how to SMS and thus he is having problems sending messages to the queen. In particular, he is having a problem with a feature called T9.<br><br>
In T9, the set of alphabets are partitioned into 9 sets, where the i-th set of characters (1-based) denotes the possible characters that may be typed by pressing digit i. For this problem, we will use strings to denote a set of characters. On a standard modern cell phone, the following partition is used<br><pre>
	{"", "abc", "def", "ghi", "jkl", "mno", "pqrs", "tuv", "wxyz"}
</pre>
For the partition above, pressing 2 may output 'a', 'b' or 'c'; pressing 3 may output 'd', 'e' or 'f'; and so on. Pressing 223 can give you various outputs of the form "(abc)(abc)(def)" where (XYZ) means that the letter can be either X or Y or Z. For example, a few possible outputs are "ace", "bad" and "bbe".<br><br>
However, not all possible outputs are dictionary words (like "bbe" is not a dictionary word), and thus these outputs do not make sense. The cell phone considers only those outputs which correspond to dictionary words. Suppose that there are only two possible dictionary words from "(abc)(abc)(def)" - namely, "ace" and "bad". Then, the keystrokes 223 gives the output "ace", and the keystrokes 223# gives the output "bad". In general if a certain number (like 223) corresponds to multiple dictionary words, then the number followed by n hashes ('#') is used to type the n-th dictionary word (0-based) from the lexographically sorted list of dictionary words corresponding to the number. Sometimes the number of hashes typed can be quite large. Hence, we have a special character star ('*') which is equivalent to 5 contiguous hashes. The digit 0 is used to type a space.<br><br>
The king needs to type a text using T9. The text is a String that consists of lowercase letters ('a'-'z') and space characters (' '). A word is a maximal contiguous substring of the text that contains only lowercase letters ('a'-'z'). The only way the king can type a word is by first pressing a non-empty sequence of digits ('1'-'9') followed by a (possibly emtpy) sequence of characters '#' and/or '*'.

You will be given a String[] <b>part</b> whose i-th element (1-based) is the set of alphabets which correspond to the digit i. You will also be given a String[] <b>dict</b> that represents a set of all dictionary words, where each element is a single word. Finally, you will be given a String[] <b>keystr</b>. Concatenate the elements of <b>keystr</b> in the same order as they are given to obtain a String. This String represents the keystrokes pressed by the king. To help the king, return the text that will result when the given keystrokes are pressed. You may assume that the given keystrokes are valid, i.e. each maximal contiguous substring that doesn't contain '0' characters starts from non-empty sequence of digits ('1'-'9') and then is optionally continued with a sequence of '#' and/or '*' characters. You may also assume that each such substring corresponds to a word from <b>dict</b>.</td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Definition</h3></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText">Class:</td><td class="statText">T9</td></tr><tr><td class="statText">Method:</td><td class="statText">message</td></tr><tr><td class="statText">Parameters:</td><td class="statText">String[], String[], String[]</td></tr><tr><td class="statText">Returns:</td><td class="statText">String</td></tr><tr><td class="statText">Method signature:</td><td class="statText">String message(String[] part, String[] dict, String[] keystr)</td></tr><tr><td colspan="2" class="statText">(be sure your method is public)</td></tr></table></td></tr><tr><td class="statText">    </td></tr><tr><td class="statText"></td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Notes</h3></td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">A substring of a String is called <i>maximal</i> with respect to some property if it can't be extended to the left or to the right while maintaining the property.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">A string A is lexicographically less than another string B of the same length if there exists a position i such that each character of A before the i-th position is equal to the character at the corresponding position in B, and A[i] is less than B[i].</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">For the purpose of this problem, a partition of alphabets into 9 sets may contain any number of empty sets.</td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Constraints</h3></td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText"><b>part</b> will represent a valid partition of the 26 english alphabets into 9 sets, i.e. it will consist of exactly 9 elements and every letter from 'a' to 'z' will appear exactly once in exactly one of the elements of <b>part</b>.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText"><b>dict</b> will contain between 1 and 50 elements, inclusive.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">Each element of <b>dict</b> will contain between 1 and 50 characters, inclusive.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">Each character in <b>dict</b> will be a lowercase letter 'a'-'z'.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">All elements of <b>dict</b> will be distinct.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText"><b>keystr</b> will contain between 1 and 50 elements, inclusive.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">Each element of <b>keystr</b> will contain between 1 and 50 characters, inclusive.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">Each character in <b>keystr</b> will be one of '0'-'9', '#', '*'.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">The length of the resulting text will be between 1 and 1000, inclusive.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">The String obtained by concatenating the elements of <b>keystr</b> will represent a valid sequence of keystrokes (as explained in the statement).</td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Examples</h3></td></tr><tr><td align="center" nowrap class="statText">0)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{"", "abc", "def", "ghi", "jkl", "mno", "pqrs", "tuv", "wxyz"}</pre></td></tr><tr><td class="statText"><pre>{"bad"}</pre></td></tr><tr><td class="statText"><pre>{"2230223"}</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: "bad bad"</pre></td></tr><tr><td class="statText"></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">1)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{"", "abc", "def", "ghi", "jkl", "mno", "pqrs", "tuv", "wxyz"}</pre></td></tr><tr><td class="statText"><pre>{"the", "tie"}</pre></td></tr><tr><td class="statText"><pre>{"0843#000843#000"}</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: " tie   tie   "</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">There may be leading, trailing and contiguous spaces.</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">2)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{"", "abc", "def", "ghi", "jkl", "mno", "pqrs", "tuv", "wxyz"}</pre></td></tr><tr><td class="statText"><pre>{"bad", "ace", "aad", "aae", "aaf", "acf", "acd", "the", "tie"}</pre></td></tr><tr><td class="statText"><pre>{"223#02", "23*#00843#0"}</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: "aae bad  tie "</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">Don't forget to concatenate the elements of <b>keystr</b>. Also, "*" is equivalent to "#####".</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">3)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{"", "abc", "def", "ghi", "jkl", "mno", "pqrs", "tuv", "wxyz"}</pre></td></tr><tr><td class="statText"><pre>{"the", "tie", "bad", "ace", "aad", "aae", "aaf", "acf", "acd"}</pre></td></tr><tr><td class="statText"><pre>{"84300223#02", "23#*"}</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: "the  aae bad"</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">'*' may also appear after the '#'. All that matters is, it is equivalent to "#####".</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">4)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{"", "abc", "def", "ghi", "jkl", "mno", "pqrs", "tuv", "wxyz"}</pre></td></tr><tr><td class="statText"><pre>{"bad", "ace", "aad", "aae", "tie", "aaf", "acf", "acd", "the"}</pre></td></tr><tr><td class="statText"><pre>{"223#02", "23######"}</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: "aae bad"</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">The king may use '*'. But it is not necessary that he uses it everytime he is allowed to use it. </td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">5)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{"", "rq", "lde", "yoauz", "cbfgn", "tjkpx", "wvs", "ih", "m"}</pre></td></tr><tr><td class="statText"><pre>{"xktgmfmoqlmivm", 
 "hmthr", 
 "tpjgmnmaremiwm", 
 "tpjcmnmyrlmhvm", 
 "xkpnmgmzqdmhsm", 
 "wqopvvmiig", 
 "melbcbqeeg", 
 "jkxnmbmardmhwm", 
 "kpxnmcmyqlmism", 
 "wrztvsmhhf", 
 "srztssmiic", 
 "pxtgmfmyrdmhwm", 
 "vqoxswmiin", 
 "wryksvmihb", 
 "ptjfmbmoremhvm"}</pre></td></tr><tr><td class="statText"><pre>{"00", 
 "7246779885##00000089682000007246779885##0000724677", 
 "9885#000089682000093355523350066659594239879###000"}</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: 
"  wqopvvmiig      hmthr     wqopvvmiig    vqoxswmiin    hmthr    melbcbqeeg  pxtgmfmyrdmhwm   "</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText"></td></tr></table></td></tr></table></td></tr></table><hr><p>This problem statement is the exclusive and proprietary property of TopCoder, Inc.  Any unauthorized use or reproduction of this information without the prior written consent of TopCoder, Inc. is strictly prohibited.  (c)2010, TopCoder, Inc.  All rights reserved.  </p>
                      
                   </td>