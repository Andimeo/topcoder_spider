<td class="problemText" valign="middle" align="left">
                      
              		<table><tr><td colspan="2" class="statText"><h3>Problem Statement</h3></td></tr><tr><td class="statText">    </td><td class="statText">You have recently gained access to the badge printing machine used by TopCoder to print name badges for their tournaments.  Each badge produced by the machine contains the handle of a TopCoder member, and you can print any number of badges for each handle from a predefined list.  You decide to play a game using the machine. Given an arbitrary sentence, you want to spell it using only name badges that you print with the machine in some optimal way.
<br>
The rules of the game are as follows.  First, you remove all spaces and punctuation from the sentence.  Then, you try to spell out the resulting string by printing out name badges  and arranging them in a single row.  Each badge you use must contain a handle which is a contiguous substring of the string.  Badges can touch but not overlap.  Letters in the string which are not represented by the badges are considered "uncovered".
<br>
For example, consider the case where only the following TopCoder members exist: {"E", "HE", "L"}.  If you want to spell the sentence "HELLO", you might try to do it by printing out one "E" badge and two "L" badges.  However, "H" and "O" would then be uncovered, and you wouldn't be able to add an "HE" badge because it would overlap with the "E".  A better way would be to print out one "HE" badge and two "L" badges.  Then, only the "O" would be uncovered.
<br>
You want to create the best possible arrangement of badges, so you've come up with the following scoring system.  Define A as the length of the longest contiguous sequence of letters covered with the badges, and B as the number of letters that are uncovered. If all letters are uncovered, A is equal to 0. The score of the arrangement is A^2-B.
<br>
You are given a String[] <b>parts</b>.  Concatenate the elements of <b>parts</b> to obtain the original sentence (with spaces and punctuation already removed).  The handles on your name badges are given to you in the String[] <b>badges</b>.  Return the maximal possible score you can obtain using the given badges.</td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Definition</h3></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText">Class:</td><td class="statText">HandlesSpelling</td></tr><tr><td class="statText">Method:</td><td class="statText">spellIt</td></tr><tr><td class="statText">Parameters:</td><td class="statText">String[], String[]</td></tr><tr><td class="statText">Returns:</td><td class="statText">int</td></tr><tr><td class="statText">Method signature:</td><td class="statText">int spellIt(String[] parts, String[] badges)</td></tr><tr><td colspan="2" class="statText">(be sure your method is public)</td></tr></table></td></tr><tr><td class="statText">    </td></tr><tr><td class="statText"></td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Constraints</h3></td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText"><b>parts</b> will contain between 1 and 20 elements, inclusive.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">Each element of <b>parts</b> will contain between 1 and 50 characters, inclusive.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText"><b>badges</b> will contain between 1 and 50 elements, inclusive.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">Each element of <b>badges</b> will contain between 1 and 50 characters, inclusive.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText"><b>parts</b> and <b>badges</b> will contain only uppercase letters ('A'-'Z').</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">All elements of <b>badges</b> will be distinct.</td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Examples</h3></td></tr><tr><td align="center" nowrap class="statText">0)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{"HELLO"}</pre></td></tr><tr><td class="statText"><pre>{"E","HE","L"}</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: 15</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">Example from the problem statement.</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">1)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{"ALGORITHM","QUALIFICATION","ROUND","TWO"}</pre></td></tr><tr><td class="statText"><pre>{"AL", "CAT", "GOR", "IFI", "ION", "ROUND", "T"}</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: 282</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">The optimal spelling is "AL"-"GOR"-I-"T"-HMQU-"AL"-"IFI"-"CAT"-"ION"-"ROUND"-"T"-WO. In this spelling, A=17 and B=7.</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">2)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{"GOOD","LUCK"}</pre></td></tr><tr><td class="statText"><pre>{"GOODLUCKBJ","G","L"}</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: -5</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">The handle used has to be a proper substring of the sentence spelled, and not vice versa. In this case at most one letter in a row can be covered with badges, and 6 letters are left uncovered, so the total score is negative.</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">3)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{"ANDDOHAVEFUN"}</pre></td></tr><tr><td class="statText"><pre>{"HAV"}</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: 0</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText"></td></tr></table></td></tr></table></td></tr></table><hr><p>This problem statement is the exclusive and proprietary property of TopCoder, Inc.  Any unauthorized use or reproduction of this information without the prior written consent of TopCoder, Inc. is strictly prohibited.  (c)2010, TopCoder, Inc.  All rights reserved.  </p>
                      
                   </td>