<td class="problemText" valign="middle" align="left">
                      
              		<table><tr><td colspan="2" class="statText"><h3>Problem Statement</h3></td></tr><tr><td class="statText">    </td><td class="statText">Alice has fallen into the rabbit-hole. Now she is in a strange world. 
<br><br>
The world is an infinitely large grid on a plane. 
Alice is in the cell (0, 0) at time 0. 
Alice sees rabbits wandering. 
Rabbit i is in the cell (<b>rabbitX</b>[i], <b>rabbitY</b>[i]) at time 0. 
At time t - 0.5 (t being a positive integer) the rabbit will step one cell 
according to t-th (1-based) character of the infinite repetition of String <b>moves</b>[i]. 
'R' means increasing x, 'L' means decreasing x, 'U' means increasing y and 'D' means decreasing y. 
At each time t (t being a positive integer) 
Alice will perform a move that consists of two following steps:
<ul><li>First, she steps to one of her eight neighboring cells or chooses to stay in her current cell. </li>
	<li>Then, if there are one or several rabbits in her destination cell, she touches all of them. </li>
</ul><br>
Return the minimum possible time for Alice to touch all the rabbits. 
If this time is strictly greater than 1,000,000,000,000,000 or she can never touch all the rabbits, return -1 instead. 
</td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Definition</h3></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText">Class:</td><td class="statText">AliceInWanderland</td></tr><tr><td class="statText">Method:</td><td class="statText">getMinimum</td></tr><tr><td class="statText">Parameters:</td><td class="statText">int[], int[], String[]</td></tr><tr><td class="statText">Returns:</td><td class="statText">long</td></tr><tr><td class="statText">Method signature:</td><td class="statText">long getMinimum(int[] rabbitX, int[] rabbitY, String[] moves)</td></tr><tr><td colspan="2" class="statText">(be sure your method is public)</td></tr></table></td></tr><tr><td class="statText">    </td></tr><tr><td class="statText"></td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Constraints</h3></td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText"><b>rabbitX</b> will contain between 1 and 11 elements, inclusive. </td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText"><b>rabbitX</b>, <b>rabbitY</b> and <b>moves</b> will contain the same number of elements. </td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">Each element of <b>rabbitX</b> and <b>rabbitY</b> will be between -1,000,000,000 and 1,000,000,000, inclusive. </td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">For each index i, (<b>rabbitX</b>[i], <b>rabbitY</b>[i]) will not be (0, 0). </td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">Each element of <b>moves</b> will contain between 1 and 50 characters, inclusive. </td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">Each character in <b>moves</b> will be either 'R', 'L', 'U' or 'D'. </td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Examples</h3></td></tr><tr><td align="center" nowrap class="statText">0)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{ 4 }</pre></td></tr><tr><td class="statText"><pre>{ 2 }</pre></td></tr><tr><td class="statText"><pre>{ "ULDR" }</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: 3</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">The rabbit moves (4, 2) -&gt; (4, 3) -&gt; (3, 3) -&gt; (3, 2) -&gt; (4, 2) -&gt; ...
<br>
In order to touch the rabbit at time 3, Alice can move as follows: (0, 0) -&gt; (1, 1) -&gt; (2, 2) -&gt; (3, 2).</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">1)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{ 10, -20 }</pre></td></tr><tr><td class="statText"><pre>{ 0, 0 }</pre></td></tr><tr><td class="statText"><pre>{ "RL", "LULD" }</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: 80</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">Alice should pursue rabbit 0 first in this case. 
</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">2)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{ 30, -40 }</pre></td></tr><tr><td class="statText"><pre>{ 0, 0 }</pre></td></tr><tr><td class="statText"><pre>{ "RL", "DLUL" }</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: 188</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">Alice should pursue rabbit 1 first in this case. 
</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">3)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{ 0 }</pre></td></tr><tr><td class="statText"><pre>{ 1 }</pre></td></tr><tr><td class="statText"><pre>{ "UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU" }</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: -1</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">Alice can never touch the rabbit. 
</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">4)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{ 1000000000, 1000000000, -1000000000, -1000000000, 1000000000, 1000000000, -1000000000, -1000000000, 0, 0, 0}</pre></td></tr><tr><td class="statText"><pre>{ 0, 0, 0, 0, 0, 0, 0, 0, 1000000000, 1000000000, -1000000000}</pre></td></tr><tr><td class="statText"><pre>{ "RRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRU", 
  "RRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRD", 
  "LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLU", 
  "LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLD", 
  "RRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRUU", 
  "RRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRDD", 
  "LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLUU", 
  "LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDD", 
  "UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUR", 
  "UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUL", 
  "DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDR" }
</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: -1</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">It will take too much time. 
</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">5)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{ 1, 1 }</pre></td></tr><tr><td class="statText"><pre>{ 0, 0 }</pre></td></tr><tr><td class="statText"><pre>{ "L", "U" }</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: -1</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText"></td></tr></table></td></tr></table></td></tr></table><hr><p>This problem statement is the exclusive and proprietary property of TopCoder, Inc.  Any unauthorized use or reproduction of this information without the prior written consent of TopCoder, Inc. is strictly prohibited.  (c)2010, TopCoder, Inc.  All rights reserved.  </p>
                      
                   </td>