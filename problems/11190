<td class="problemText" valign="middle" align="left">
                      
              		<table><tr><td colspan="2" class="statText"><h3>Problem Statement</h3></td></tr><tr><td class="statText">    </td><td class="statText"><p>Little Teddy and Little Tracy are now learning how to speak words. Their mother, of course, doesn't want them to speak bad words. According to her definition, a word W is bad if at least one of the following conditions hold  (see the notes section for definitions):</p>
<ul><li>W contains the string <b>badPrefix</b> as a prefix.</li>
<li>W contains the string <b>badSuffix</b> as a suffix.</li>
<li>W contains the string <b>badSubstring</b> as a contiguous substring that is neither a prefix nor a suffix of W.</li>
</ul><p>You are given a String[] <b>vocabulary</b> representing the words that Teddy and Tracy are going to learn. Return the number of bad words in <b>vocabulary</b>.</p></td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Definition</h3></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText">Class:</td><td class="statText">BadVocabulary</td></tr><tr><td class="statText">Method:</td><td class="statText">count</td></tr><tr><td class="statText">Parameters:</td><td class="statText">String, String, String, String[]</td></tr><tr><td class="statText">Returns:</td><td class="statText">int</td></tr><tr><td class="statText">Method signature:</td><td class="statText">int count(String badPrefix, String badSuffix, String badSubstring, String[] vocabulary)</td></tr><tr><td colspan="2" class="statText">(be sure your method is public)</td></tr></table></td></tr><tr><td class="statText">    </td></tr><tr><td class="statText"></td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Notes</h3></td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">A prefix of a string is obtained by removing zero or more contiguous characters from the end of the string.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">A suffix of a string is obtained by removing zero or more contiguous characters from the beginning of the string.</td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Constraints</h3></td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText"><b>badPrefix</b>, <b>badSuffix</b>, and <b>badSubstring</b> will each contain between 1 and 50 characters, inclusive.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText"><b>vocabulary</b> will contain between 1 and 50 elements, inclusive.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">Each element <b>vocabulary</b> will contain between 1 and 50 characters, inclusive.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">Each character of <b>badPrefix</b>, <b>badSuffix</b>, and <b>badSubstring</b> will be between 'a' and 'z', inclusive.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">Each character in <b>vocabulary</b> will be between 'a' and 'z', inclusive.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">All elements of <b>vocabulary</b> will be distinct.</td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Examples</h3></td></tr><tr><td align="center" nowrap class="statText">0)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>"bug"</pre></td></tr><tr><td class="statText"><pre>"bug"</pre></td></tr><tr><td class="statText"><pre>"bug"</pre></td></tr><tr><td class="statText"><pre>{"buggy", "debugger", "debug"}</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: 3</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText"></td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">1)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>"a"</pre></td></tr><tr><td class="statText"><pre>"b"</pre></td></tr><tr><td class="statText"><pre>"c"</pre></td></tr><tr><td class="statText"><pre>{"a", "b", "tco"}</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: 3</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">"a" is a prefix of "a". "b" is a suffix of "b". "c" is a substring of "tco". So, all words in <b>vocabulary</b> are bad.</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">2)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>"cut"</pre></td></tr><tr><td class="statText"><pre>"sore"</pre></td></tr><tr><td class="statText"><pre>"scar"</pre></td></tr><tr><td class="statText"><pre>{"scary", "oscar"}</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: 0</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">Although "scar" is a substring of "scary", it is also a prefix. Thus, "scary" is not a bad word. Similarly, as "scar" is a suffix of "oscar", "oscar" is not a bad word.</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">3)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>"bar"</pre></td></tr><tr><td class="statText"><pre>"else"</pre></td></tr><tr><td class="statText"><pre>"foo"</pre></td></tr><tr><td class="statText"><pre>{"foofoofoo", "foobar", "elsewhere"}</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: 1</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">Only the word "foofoofoo" is bad.</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">4)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>"pre"</pre></td></tr><tr><td class="statText"><pre>"s"</pre></td></tr><tr><td class="statText"><pre>"all"</pre></td></tr><tr><td class="statText"><pre>{"all", "coders", "be", "prepared", "for", "the", "challenge", "phase"}</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: 3</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText"></td></tr></table></td></tr></table></td></tr></table><hr><p>This problem statement is the exclusive and proprietary property of TopCoder, Inc.  Any unauthorized use or reproduction of this information without the prior written consent of TopCoder, Inc. is strictly prohibited.  (c)2010, TopCoder, Inc.  All rights reserved.  </p>
                      
                   </td>