<td class="problemText" valign="middle" align="left">
                      
              		<table><tr><td colspan="2" class="statText"><h3>Problem Statement</h3></td></tr><tr><td class="statText">    </td><td class="statText">You recently got a job at a company that designs various kinds of filters, and today, you've been given your first task.  A client needs a filter that accepts some objects and rejects some other objects based on their size.  The requirements are described in the int[] <b>sizes</b> and the String <b>outcome</b>.  If character i in <b>outcome</b> is 'A', then all objects of size <b>sizes</b>[i] must be accepted, and if character i is 'R', then all objects of size <b>sizes</b>[i] must be rejected.  If an object's size does not appear in <b>sizes</b>, then it doesn't matter if it is accepted or rejected.
<br><br>
Unfortunately, your knowledge of filters is very limited, and you can only design filters of one specific kind called <i>(A, B)-filters</i>.  Each such filter is characterized by two integers A and B.  It accepts an object if and only if its size is between A and B, inclusive.  You have excellent (A, B)-filter construction skills, so you can construct any such filter where 1 &lt;= A &lt;= B.
<br><br>
If it is possible to construct an (A, B)-filter that fulfills all the requirements described in sizes and outcome, return a int[] containing the filter's parameters, where element 0 is A and element 1 is B.  If there are several appropriate filters, choose the one that minimizes B - A.  If there are no suitable filters, return an empty int[].
</td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Definition</h3></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText">Class:</td><td class="statText">Filtering</td></tr><tr><td class="statText">Method:</td><td class="statText">designFilter</td></tr><tr><td class="statText">Parameters:</td><td class="statText">int[], String</td></tr><tr><td class="statText">Returns:</td><td class="statText">int[]</td></tr><tr><td class="statText">Method signature:</td><td class="statText">int[] designFilter(int[] sizes, String outcome)</td></tr><tr><td colspan="2" class="statText">(be sure your method is public)</td></tr></table></td></tr><tr><td class="statText">    </td></tr><tr><td class="statText"></td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Constraints</h3></td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText"><b>sizes</b> will contain between 1 and 50 elements, inclusive.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">Each element of <b>sizes</b> will be between 1 and 100, inclusive.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">All elements of <b>sizes</b> will be distinct.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText"><b>outcome</b> will contain the same number of characters as the number of elements in <b>sizes</b>.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">Each character in <b>outcome</b> will be 'A' or 'R'.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText"><b>outcome</b> will contain at least one 'A' character.</td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Examples</h3></td></tr><tr><td align="center" nowrap class="statText">0)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{3, 4, 5, 6, 7}</pre></td></tr><tr><td class="statText"><pre>"AAAAA"</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: {3, 7 }</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">Any filter with A &lt;= 3 and B &gt;= 7 will work in this case. Among them, A = 3 and B = 7 gives the minimal difference of B - A.</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">1)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{3, 4, 5, 6, 7}</pre></td></tr><tr><td class="statText"><pre>"AARAA"</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: { }</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">This is similar to the previous example, but objects of size 5 need to be rejected. It's impossible to achieve this using a single (A, B)-filter.</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">2)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{3, 4, 5, 6, 7}</pre></td></tr><tr><td class="statText"><pre>"RAAAA"</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: {4, 7 }</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">However, it's possible to reject only objects of size 3.</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">3)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{68,57,7,41,76,53,43,77,84,52,34,48,27,75,36}</pre></td></tr><tr><td class="statText"><pre>"RARRRARRRARARRR"</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: {48, 57 }</pre></td></tr><tr><td class="statText"></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">4)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{26,81,9,14,43,77,55,57,12,34,29,79,40,25,50}</pre></td></tr><tr><td class="statText"><pre>"ARAAARRARARARAA"</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: { }</pre></td></tr><tr><td class="statText"></td></tr></table></td></tr></table><hr><p>This problem statement is the exclusive and proprietary property of TopCoder, Inc.  Any unauthorized use or reproduction of this information without the prior written consent of TopCoder, Inc. is strictly prohibited.  (c)2010, TopCoder, Inc.  All rights reserved.  </p>
                      
                   </td>