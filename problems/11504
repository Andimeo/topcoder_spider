<td class="problemText" valign="middle" align="left">
                      
              		<table><tr><td colspan="2" class="statText"><h3>Problem Statement</h3></td></tr><tr><td class="statText">    </td><td class="statText">Camomile and her twin sister Romashka are playing a game.  At the beginning of the game, they are given a word.  Then, starting with Camomile, they take alternate turns, and on each turn, the player erases one letter from the word.  That letter must be at a position greater than or equal to the position of the letter erased on the previous turn (on the first turn, the player can erase any letter).  Letter positions are numbered consecutively from left to right and are renumbered from scratch after each turn.  For example, if the word is "topcoder" and a player erases the letter 'c', the word would become "topoder", and on the next turn, the other player could only erase the letters 'r', 'e', 'd' or the second 'o'.
<br><br>
When a player erases the last letter, the game ends.  If the word at the end of the game is lexicographically greater than the word at the beginning, Camomile wins.  Otherwise, Romashka wins.  You are given a String <b>word</b>, which is the word given at the beginning of the game.  Assuming that Romashka and Camomile both play optimally, return "Romashka" if Romashka will win or "Camomile" if Camomile will win (all quotes for clarity).</td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Definition</h3></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText">Class:</td><td class="statText">SistersErasingLetters</td></tr><tr><td class="statText">Method:</td><td class="statText">whoWins</td></tr><tr><td class="statText">Parameters:</td><td class="statText">String</td></tr><tr><td class="statText">Returns:</td><td class="statText">String</td></tr><tr><td class="statText">Method signature:</td><td class="statText">String whoWins(String word)</td></tr><tr><td colspan="2" class="statText">(be sure your method is public)</td></tr></table></td></tr><tr><td class="statText">    </td></tr><tr><td class="statText"></td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Notes</h3></td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">A string X is defined as smaller than a string Y if and only if X is a prefix of Y or X has a smaller character than Y at the first position where they differ.</td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Constraints</h3></td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText"><b>word</b> will contain between 1 and 50 characters, inclusive.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">Each character in <b>word</b> will be a lowercase letter ('a'-'z').</td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Examples</h3></td></tr><tr><td align="center" nowrap class="statText">0)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>"topcoder"</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: "Camomile"</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">1. Camomile starts by erasing the letter 'c', leaving "topoder".<br>
2. It doesn't matter what Romashka erases on her turn.  The possible outcomes of this turn are "topder", "topoer", "topodr" and "topode".  In the last outcome, Romashka deletes the last letter and ends the game, but loses.<br>
3. If Romashka doesn't end the game, then Camomile will end it by erasing the last letter.  The possible outcomes are "topde", "topoe" and "topod", all of which are lexicographically greater than "topcoder".</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">1)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>"program"</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: "Romashka"</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">Camomile can't win here.</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">2)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>"abcd"</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: "Camomile"</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">Here, Camomile can only win if she starts by erasing the letter 'a'.</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">3)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>"abc"</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: "Romashka"</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">Note that the empty string is lexicographically smaller than any other string.</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">4)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>"easyproblemroundfivetopcoderopentwothousandeleven"</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: "Camomile"</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText"></td></tr></table></td></tr></table></td></tr></table><hr><p>This problem statement is the exclusive and proprietary property of TopCoder, Inc.  Any unauthorized use or reproduction of this information without the prior written consent of TopCoder, Inc. is strictly prohibited.  (c)2010, TopCoder, Inc.  All rights reserved.  </p>
                      
                   </td>