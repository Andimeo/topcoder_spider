<td class="problemText" valign="middle" align="left">
                      
              		<table><tr><td colspan="2" class="statText"><h3>Problem Statement</h3></td></tr><tr><td class="statText">    </td><td class="statText">Princess Elly recently discovered secret plans for building a whole bunch of new death stars. Now she and the rebels are desperately trying to destroy them before they are fully operational.<p></p>

They are sending several ships to destroy the death stars. For simplicity, in this problem the battle will take place in a 2D plane. The distances are so large that we will view all death stars and all ships as points in this plane. All death stars are stationary. All ships appear at their starting positions at the same time. Each ship is a point moving at some constant speed along some line segment, however the speeds for different ships may be different. As soon as a ship reaches the end of its segment, it disappears from the battlefield. (This does not necessarily happen at the same time for all the ships.) The rebels know the locations of all death stars. Also, for each ship they know its planned trajectory, its speed, the range of its lasers, and the amount of energy available for shooting them.<p></p>
A ship can shoot at a death star if:
<ul><li>The death star is within its range</li>
<li>The ship still has energy for its lasers</li>
</ul>
Unfortunately, some defenses of the death stars are already active and prevent multiple ships from attacking the same death star at the same time. Thus, there is one additional rule:
<ul><li>No other ship is currently attacking the death star</li>
</ul>
On the other hand, all ships are able to shoot at multiple targets at the same time. Whenever a ship shoots at X targets at the same time, it consumes energy at the rate of X units per second. The ship can start and stop shooting at any target at any time. (The time spent shooting at a particular set of targets does not have to be an integer.)<p></p>

You are given a String[] <b>stars</b> whose elements are formatted as "X Y", where (X, Y) corresponds to the position of one death star on the map. You are also given a String[] <b>ships</b> describing the ships. The i-th element of <b>ships</b> will be formated as "SX SY EX EY S R E", where (SX, SY) and (EX, EY) give the starting and ending point of the i-th ship, respectively, S is its speed, R is the range of its lasers, and E is its energy.<p></p>

The rebels came up with a simple plan: They will shoot the death stars in such a way that the total amount of energy spent on shooting them is maximized. (It is possible that a different amount of energy will be spent on different death stars.) Compute and return the maximum total amount of energy spent by the ships' lasers if the rebels use an optimal shooting strategy.</td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Definition</h3></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText">Class:</td><td class="statText">EllysDeathStars</td></tr><tr><td class="statText">Method:</td><td class="statText">getMax</td></tr><tr><td class="statText">Parameters:</td><td class="statText">String[], String[]</td></tr><tr><td class="statText">Returns:</td><td class="statText">double</td></tr><tr><td class="statText">Method signature:</td><td class="statText">double getMax(String[] stars, String[] ships)</td></tr><tr><td colspan="2" class="statText">(be sure your method is public)</td></tr></table></td></tr><tr><td class="statText">    </td></tr><tr><td class="statText"></td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Notes</h3></td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">Your return value must have a relative or an absolute error of less than 1e-9.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">The range of a ship's lasers is given in distance units (the same ones as all coordinates).</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">The speed of a ship is given in distance units per second.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">A ship can have the same starting and ending point. Such ship disappears immediately after appearing on the battlefield.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">Multiple death stars can be located at the exact same place. They are still considered to be distinct death stars.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">Multiple ships can be located at the exact same place at some moment of time. A ship and a death star can be located at the exact same place at some moment of time. In both cases, no collision happens and each ship just proceeds moving along its defined trajectory.</td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Constraints</h3></td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText"><b>stars</b> will contain between 1 and 20 elements, inclusive.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">Each element of <b>stars</b> will contain between 3 and 9 characters, inclusive.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">Each element of <b>stars</b> will be formated as "X Y" - two space-separated integers between 1 and 1000, inclusive.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText"><b>ships</b> will contain between 1 and 20 elements, inclusive.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">Each element of <b>ships</b> will contain between 13 and 34 characters, inclusive.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">Each element of <b>ships</b> will be formated as "SX SY EX EY S R E" - seven space-separated integers between 1 and 1000, inclusive.</td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Examples</h3></td></tr><tr><td align="center" nowrap class="statText">0)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{"2 2"}</pre></td></tr><tr><td class="statText"><pre>{"1 1 5 3 2 1 2"}</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: 0.894427190999916</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">Just a single ship and a single star. The ship has plenty of energy, so it might shoot at the death star the whole time it is in range.</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">1)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{"12 10", "7 5"}</pre></td></tr><tr><td class="statText"><pre>{"10 10 12 10 1 1 3", "6 1 8 10 1 2 3", "3 6 8 2 5 3 1", "42 42 42 42 6 6 6"}</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: 4.983770744659944</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">Although the first ship has remaining energy, it disappears before it can shoot it all. The last ship disappears right after the beginning.</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">2)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{"5 77", "60 50", "10 46", "22 97", "87 69"}</pre></td></tr><tr><td class="statText"><pre>{"42 17 66 11 5 7 13", "10 10 20 20 3 3 3", "13 15 18 9 4 1 2",
 "99 71 63 81 19 4 60", "27 34 56 43 11 3 12"}</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: 0.0</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">Plenty of ships and stars, but no action whatsoever.</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">3)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{"141 393", "834 847", "568 43", "18 228", "515 794",
 "167 283", "849 333", "719 738", "434 261", "613 800",
 "127 340", "466 938", "598 601"}</pre></td></tr><tr><td class="statText"><pre>{"410 951 472 100 337 226 210", "713 352 677 908 731 687 300",
 "191 41 337 92 446 716 213", "598 889 446 907 148 650 203",
 "168 556 470 924 344 369 198", "300 182 350 936 737 533 45",
 "410 871 488 703 746 631 80", "270 777 636 539 172 103 56",
 "466 906 522 98 693 77 309", "768 698 846 110 14 643 14",
 "755 724 664 465 263 759 120"}</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: 31.965770956316362</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">Random testcase.</td></tr></table></td></tr></table></td></tr></table><hr><p>This problem statement is the exclusive and proprietary property of TopCoder, Inc.  Any unauthorized use or reproduction of this information without the prior written consent of TopCoder, Inc. is strictly prohibited.  (c)2010, TopCoder, Inc.  All rights reserved.  </p>
                      
                   </td>