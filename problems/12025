<td class="problemText" valign="middle" align="left">
                      
              		<table><tr><td colspan="2" class="statText"><h3>Problem Statement</h3></td></tr><tr><td class="statText">    </td><td class="statText">For a given string S of length n an inversion is a pair of integers (i, j) such that 0 &lt;= i &lt; j &lt;= n-1 and S[i] &gt; S[j]. (That is, the character at 0-based index i is greater than the character at 0-based index j.) For example, the string "abcab" has 3 inversions: (1, 3), (2, 3), and (2, 4).
<p></p>
Given are ints <b>n</b> and <b>minInv</b>, and a String <b>minStr</b>.
We will consider all strings that are permutations of the first <b>n</b> lowercase English letters.
That is, these strings have length <b>n</b> and contain each of the first <b>n</b> letters exactly once.
Out of these strings, return the lexicographically smallest string R with the following two properties:
<ul><li>The number of inversions in R is at least <b>minInv</b>.</li>
<li>The string R is not lexicographically smaller than <b>minStr</b>.</li>
</ul>
If there is no such string, return an empty String instead.
</td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Definition</h3></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText">Class:</td><td class="statText">StrIIRec</td></tr><tr><td class="statText">Method:</td><td class="statText">recovstr</td></tr><tr><td class="statText">Parameters:</td><td class="statText">int, int, String</td></tr><tr><td class="statText">Returns:</td><td class="statText">String</td></tr><tr><td class="statText">Method signature:</td><td class="statText">String recovstr(int n, int minInv, String minStr)</td></tr><tr><td colspan="2" class="statText">(be sure your method is public)</td></tr></table></td></tr><tr><td class="statText">    </td></tr><tr><td class="statText"></td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Notes</h3></td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">A String A is lexicographically smaller than a String B if A is a prefix of B or A contains a smaller character at the first position where the Strings differ.</td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Constraints</h3></td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText"><b>n</b> will be between 1 and 20, inclusive.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText"><b>minInv</b> will be between 0 and <b>n</b>*(<b>n</b>-1)/2, inclusive.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText"><b>minStr</b> will contain between 1 and <b>n</b> characters, inclusive.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">Each character in <b>minStr</b> will be one of the first <b>n</b> lowercase Latin letters.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">All characters in <b>minStr</b> will be unique.</td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Examples</h3></td></tr><tr><td align="center" nowrap class="statText">0)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>2</pre></td></tr><tr><td class="statText"><pre>1</pre></td></tr><tr><td class="statText"><pre>"ab"</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: "ba"</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">You must find the lexicographically smallest String that has at least 1 inversion and is not lexicographically smaller than "ab".</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">1)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>9</pre></td></tr><tr><td class="statText"><pre>1</pre></td></tr><tr><td class="statText"><pre>"efcdgab"</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: "efcdgabhi"</pre></td></tr><tr><td class="statText"></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">2)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>11</pre></td></tr><tr><td class="statText"><pre>55</pre></td></tr><tr><td class="statText"><pre>"debgikjfc"</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: "kjihgfedcba"</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">"kjihgfedcba" is the only String that has at least 55 inversions.</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">3)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>15</pre></td></tr><tr><td class="statText"><pre>0</pre></td></tr><tr><td class="statText"><pre>"e"</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: "eabcdfghijklmno"</pre></td></tr><tr><td class="statText"></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">4)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>9</pre></td></tr><tr><td class="statText"><pre>20</pre></td></tr><tr><td class="statText"><pre>"fcdebiha"</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: "fcdehigba"</pre></td></tr><tr><td class="statText"></td></tr></table></td></tr></table><hr><p>This problem statement is the exclusive and proprietary property of TopCoder, Inc.  Any unauthorized use or reproduction of this information without the prior written consent of TopCoder, Inc. is strictly prohibited.  (c)2010, TopCoder, Inc.  All rights reserved.  </p>
                      
                   </td>