<td class="problemText" valign="middle" align="left">
                      
              		<table><tr><td colspan="2" class="statText"><h3>Problem Statement</h3></td></tr><tr><td class="statText">    </td><td class="statText">Beaver Bindu has found N pairwise different fruits.
Some of the fruits are sweet, others are bitter.
You are given a int[] <b>sweetness</b>.
The sweetness of the i-th fruit (0-based index) is <b>sweetness</b>[i].
Different fruits can have the same sweetness.
A fruit is bitter if its sweetness is -1.
<br><br>
Bindu has N-1 pieces of string.
She can use each of the strings to connect two of the N fruits.
She wants to use all N-1 strings to connect all N pieces of fruit into a single connected component.
I.e., once she is done connecting the fruit, she will have an N-vertex tree, each fruit being one of the N vertices.
<br><br>
Having such a tree, we can evaluate its total sweetness as follows:
A fruit on a tree is called truly sweet if it is sweet, and it is connected by a string to some other sweet fruit.
The total sweetness of a tree is the sum of the sweetness of its truly sweet fruits.
<br><br>
You are also given a int <b>maxSweetness</b>.
Let X be the number of possible trees which have total sweetness at most <b>maxSweetness</b>, inclusive.
Compute and return the value (X modulo 1,000,000,007).
</td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Definition</h3></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText">Class:</td><td class="statText">SweetFruits</td></tr><tr><td class="statText">Method:</td><td class="statText">countTrees</td></tr><tr><td class="statText">Parameters:</td><td class="statText">int[], int</td></tr><tr><td class="statText">Returns:</td><td class="statText">int</td></tr><tr><td class="statText">Method signature:</td><td class="statText">int countTrees(int[] sweetness, int maxSweetness)</td></tr><tr><td colspan="2" class="statText">(be sure your method is public)</td></tr></table></td></tr><tr><td class="statText">    </td></tr><tr><td class="statText"></td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Notes</h3></td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">A tree is an undirected acyclic graph.</td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Constraints</h3></td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText"><b>sweetness</b> will contain between 1 and 40 elements, inclusive.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">Each element of <b>sweetness</b> will be between -1 and 25,000,000, inclusive.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText"><b>maxSweetness</b> will be between 0 and 1,000,000,000 (10^9), inclusive.</td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Examples</h3></td></tr><tr><td align="center" nowrap class="statText">0)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{1, 2, -1, 3}</pre></td></tr><tr><td class="statText"><pre>3</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: 3</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">The following picture shows all 3 trees whose sweetness is at most 3 (truly sweet fruits are painted red).
<br><br><img src="http://www.topcoder.com/contest/problem/SweetFruits/SweetFruits1.png"></td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">1)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{1, 2, -1, 3}</pre></td></tr><tr><td class="statText"><pre>5</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: 7</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">When <b>maxSweetness</b> = 5, the following 4 additional trees are possible.
<br><br><img src="http://www.topcoder.com/contest/problem/SweetFruits/SweetFruits2.png"></td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">2)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{-1, -1, 2, 5, 5}</pre></td></tr><tr><td class="statText"><pre>6</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: 20</pre></td></tr><tr><td class="statText"></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">3)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{2, 6, 8, 4, 1, 10, -1, -1, -1, -1}</pre></td></tr><tr><td class="statText"><pre>15</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: 17024000</pre></td></tr><tr><td class="statText"></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">4)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{1078451, -1, 21580110, 8284711, -1, 4202301, 3427559, 8261270, -1, 16176713,
22915672, 24495540, 19236, 5477666, 12280316, 3305896, 17917887, 564911, 22190488, 21843923,
23389728, 14641920, 9590140, 12909561, 20405638, 100184, 23336457, 12780498, 18859535, 23180993,
10278898, 5753075, 21250919, 17563422, 10934412, 22557980, 24895749, 7593671, 10834579, 5606562}</pre></td></tr><tr><td class="statText"><pre>245243285</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: 47225123</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText"></td></tr></table></td></tr></table></td></tr></table><hr><p>This problem statement is the exclusive and proprietary property of TopCoder, Inc.  Any unauthorized use or reproduction of this information without the prior written consent of TopCoder, Inc. is strictly prohibited.  (c)2010, TopCoder, Inc.  All rights reserved.  </p>
                      
                   </td>