<td class="problemText" valign="middle" align="left">
                      
              		<table><tr><td colspan="2" class="statText"><h3>Problem Statement</h3></td></tr><tr><td class="statText">    </td><td class="statText">In Tokyo, there is a big circular railroad called "Yamanote Line."
It contains <b>n</b> stations, numbered 0 through <b>n</b>-1 in clockwise direction.
You are given the int <b>n</b>.
<br><br>
There is a direct track segment between each pair of consecutive stations (between 0 and 1, between 1 and 2, ..., and between <b>n</b>-1 and 0).
You do not know the exact lengths of these track segments, but you know for sure that the length of each track segment is a positive integer.
<br><br>
You want to find the length of the entire circular railroad.
Two of your friends took some rides on the Yamanote line and reported their findings to you.
The first friend was trying to establish some lower bounds.
Each of his reports had the form: "The clockwise distance from station S to a different station T is <i>at least</i> L."
The second friend was trying to establish some upper bounds.
Each of her reports had the form: "The clockwise distance from station S to a different station T is <i>at most</i> L."
<br><br>
You are given 6 int[]s: <b>s1</b>, <b>t1</b>, <b>l1</b>, <b>s2</b>, <b>t2</b>, <b>l2</b>.
For each i, the i-th entries of <b>s1</b>, <b>t1</b>, and <b>l1</b> describe one of the reports you got from your first friend:
the total length of railroad tracks from the station <b>s1</b>[i] to the station <b>t1</b>[i] in clockwise direction is at least <b>l1</b>[i].
Similarly, for each i, the i-th entries of <b>s2</b>, <b>t2</b>, and <b>l2</b> describe one of the reports you got from your second friend:
the total length of railroad tracks from the station <b>s2</b>[i] to the station <b>t2</b>[i] in clockwise direction is at most <b>l2</b>[i].
<br><br>
As stated before, you are interested in finding the total length of the entire circle of railroad tracks.
Of course, there can be multiple values consistent with the information your friends gave you.
It is also possible that your friends made a mistake and there is no set of segment lengths consistent with the information you received.
<br><br>
Your task is to calculate how many different total lengths of the railway are consistent with the information you received.
If the number of possibilities is finite, return it.
If there are infinitely many possible total lengths, return -1 instead.
</td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Definition</h3></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText">Class:</td><td class="statText">YamanoteLine</td></tr><tr><td class="statText">Method:</td><td class="statText">howMany</td></tr><tr><td class="statText">Parameters:</td><td class="statText">int, int[], int[], int[], int[], int[], int[]</td></tr><tr><td class="statText">Returns:</td><td class="statText">long</td></tr><tr><td class="statText">Method signature:</td><td class="statText">long howMany(int n, int[] s1, int[] t1, int[] l1, int[] s2, int[] t2, int[] l2)</td></tr><tr><td colspan="2" class="statText">(be sure your method is public)</td></tr></table></td></tr><tr><td class="statText">    </td></tr><tr><td class="statText"></td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Constraints</h3></td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText"><b>n</b> will be between 3 and 50, inclusive.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText"><b>s1</b>, <b>t1</b>, and <b>l1</b> will contain the same number of elements.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText"><b>s2</b>, <b>t2</b>, and <b>l2</b> will contain the same number of elements.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText"><b>s1</b> and <b>s2</b> will each contain between 0 and 50 elements, inclusive.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">Each element of <b>s1</b>, <b>t1</b>, <b>s2</b>, and <b>t2</b> will be between 0 and <b>n</b>-1, inclusive.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">Each element of <b>l1</b>, <b>l2</b> will be between 1 and 10^9, inclusive.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">For each i, the i-th element of <b>s1</b> and the i-th element of <b>t1</b> will not be equal.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">For each i, the i-th element of <b>s2</b> and the i-th element of <b>t2</b> will not be equal.</td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Examples</h3></td></tr><tr><td align="center" nowrap class="statText">0)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>3</pre></td></tr><tr><td class="statText"><pre>{}</pre></td></tr><tr><td class="statText"><pre>{}</pre></td></tr><tr><td class="statText"><pre>{}</pre></td></tr><tr><td class="statText"><pre>{0,1,2}</pre></td></tr><tr><td class="statText"><pre>{1,2,0}</pre></td></tr><tr><td class="statText"><pre>{1,1,1}</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: 1</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">The input tells us that each of the distances "from 0 to 1", "from 1 to 2", and "from 2 to 0" is at most 1.
But as we know, the length of each track segment is a positive integer.
Therefore, each of the three segments has length exactly 1.
Hence, there is only one possibility: the total length of the Yamanote line is 1+1+1 = 3.
</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">1)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>3</pre></td></tr><tr><td class="statText"><pre>{}</pre></td></tr><tr><td class="statText"><pre>{}</pre></td></tr><tr><td class="statText"><pre>{}</pre></td></tr><tr><td class="statText"><pre>{0,1,2}</pre></td></tr><tr><td class="statText"><pre>{1,2,0}</pre></td></tr><tr><td class="statText"><pre>{2,2,2}</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: 4</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">Each direct track segment can have a length of 1 or 2, so the possible total lengths are 3, 4, 5, or 6.</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">2)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>3</pre></td></tr><tr><td class="statText"><pre>{}</pre></td></tr><tr><td class="statText"><pre>{}</pre></td></tr><tr><td class="statText"><pre>{}</pre></td></tr><tr><td class="statText"><pre>{0,1,2}</pre></td></tr><tr><td class="statText"><pre>{2,0,1}</pre></td></tr><tr><td class="statText"><pre>{3,3,3}</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: 2</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">At most one of the three direct track segments can have a length of 2.</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">3)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>4</pre></td></tr><tr><td class="statText"><pre>{0,1,2,3}</pre></td></tr><tr><td class="statText"><pre>{2,3,0,1}</pre></td></tr><tr><td class="statText"><pre>{3,4,4,3}</pre></td></tr><tr><td class="statText"><pre>{1,3}</pre></td></tr><tr><td class="statText"><pre>{3,1}</pre></td></tr><tr><td class="statText"><pre>{5,5}</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: 4</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText"></td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">4)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>4</pre></td></tr><tr><td class="statText"><pre>{0,2}</pre></td></tr><tr><td class="statText"><pre>{2,0}</pre></td></tr><tr><td class="statText"><pre>{5,5}</pre></td></tr><tr><td class="statText"><pre>{1,3}</pre></td></tr><tr><td class="statText"><pre>{3,1}</pre></td></tr><tr><td class="statText"><pre>{4,4}</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: 0</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText"></td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">5)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>5</pre></td></tr><tr><td class="statText"><pre>{}</pre></td></tr><tr><td class="statText"><pre>{}</pre></td></tr><tr><td class="statText"><pre>{}</pre></td></tr><tr><td class="statText"><pre>{0,2}</pre></td></tr><tr><td class="statText"><pre>{2,4}</pre></td></tr><tr><td class="statText"><pre>{2,2}</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: -1</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText"></td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">6)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>10</pre></td></tr><tr><td class="statText"><pre>{5,7,2,3,9,4,6,0,4,2}</pre></td></tr><tr><td class="statText"><pre>{0,8,3,9,8,0,8,7,1,7}</pre></td></tr><tr><td class="statText"><pre>{61,54,20,64,25,73,83,79,86,56}</pre></td></tr><tr><td class="statText"><pre>{4,5,4,0,8,3,8,5,5,9}</pre></td></tr><tr><td class="statText"><pre>{5,2,0,1,1,4,7,6,8,3}</pre></td></tr><tr><td class="statText"><pre>{1951,6102,3625,5737,1590,1228,9234,1342,9060,1008}</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: 5726</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText"></td></tr></table></td></tr></table></td></tr></table><hr><p>This problem statement is the exclusive and proprietary property of TopCoder, Inc.  Any unauthorized use or reproduction of this information without the prior written consent of TopCoder, Inc. is strictly prohibited.  (c)2010, TopCoder, Inc.  All rights reserved.  </p>
                      
                   </td>