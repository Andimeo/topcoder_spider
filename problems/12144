<td class="problemText" valign="middle" align="left">
                      
              		<table><tr><td colspan="2" class="statText"><h3>Problem Statement</h3></td></tr><tr><td class="statText">    </td><td class="statText">Alice and Bob live in a country that consists of N islands. The islands are numbered 0 through N-1. Several pairs of islands are connected by bridges. Some of the bridges are very old. They will collapse after the second passage. The other bridges are new and never collapse. Only one person can cross a bridge at a time.
<br><br>
You are given a String[] <b>bridges</b>. Character j of element i of <b>bridges</b> is 'O' (uppercase letter o) if the island i and the island j are connected by an old bridge; 'N' if they are connected by a new bridge; and 'X' if they are not connected by a bridge.
<br><br>
Alice wants to make <b>an</b> round trips between the islands <b>a1</b> and <b>a2</b>.
That is, she wants to make <b>an</b> consecutive trips, where each trip starts at <b>a1</b>, gets somehow to <b>a2</b>, and after some more steps ends back at <b>a1</b>.
At the same time, Bob wants to make <b>bn</b> round trips between the islands <b>b1</b> and <b>b2</b>.
Each round trip may use any sequence of consecutive bridges.
Different round trips may, but don't have to, use the same sequence of bridges.
Of course, each old bridge may only be used at most twice. 
(I.e., it may be used twice by Alice, or twice by Bob, or once by each of them, or just once, or not at all.)
<br><br>
You are given the String[] <b>bridges</b>
and the ints <b>a1</b>, <b>a2</b>, <b>an</b>, <b>b1</b>, <b>b2</b>, and <b>bn</b>.
If it is possible to plan all the round trips for Alice and Bob, return "Yes", otherwise return "No".</td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Definition</h3></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText">Class:</td><td class="statText">OldBridges</td></tr><tr><td class="statText">Method:</td><td class="statText">isPossible</td></tr><tr><td class="statText">Parameters:</td><td class="statText">String[], int, int, int, int, int, int</td></tr><tr><td class="statText">Returns:</td><td class="statText">String</td></tr><tr><td class="statText">Method signature:</td><td class="statText">String isPossible(String[] bridges, int a1, int a2, int an, int b1, int b2, int bn)</td></tr><tr><td colspan="2" class="statText">(be sure your method is public)</td></tr></table></td></tr><tr><td class="statText">    </td></tr><tr><td class="statText"></td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Constraints</h3></td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText"><b>bridges</b> will contain between 4 and 50 elements, inclusive.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">Each element of <b>bridges</b> will contain exactly N characters, where N is the number of elements of <b>bridges</b>.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">Each character in each element of <b>bridges</b> will be 'O', 'N', or 'X'.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">For each i, the i-th character of the i-th element of <b>bridges</b> will be 'X'.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">For each i and j, the i-th character of the j-th element of <b>bridges</b> will be equal to the j-th character of the i-th element of <b>bridges</b>.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">The country will be connected, i.e., there will exist a path consisting of one or more bridges between any pair of islands.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText"><b>a1</b>, <b>a2</b>, <b>b1</b>, and <b>b2</b> will be between 0 and N-1, inclusive.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText"><b>a1</b>, <b>a2</b>, <b>b1</b>, and <b>b2</b> will be pairwise distinct.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText"><b>an</b> and <b>bn</b> will be between 1 and 50, inclusive.</td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Examples</h3></td></tr><tr><td align="center" nowrap class="statText">0)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{"XOXX","OXOX","XOXO","XXOX"}</pre></td></tr><tr><td class="statText"><pre>0</pre></td></tr><tr><td class="statText"><pre>1</pre></td></tr><tr><td class="statText"><pre>1</pre></td></tr><tr><td class="statText"><pre>2</pre></td></tr><tr><td class="statText"><pre>3</pre></td></tr><tr><td class="statText"><pre>1</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: "Yes"</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">Alice can travel from the island 0 to the island 1 and go back to the island 0, and Bob can travel from the island 2 to the island 3 and go back to the island 2.</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">1)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{"XOXX","OXOX","XOXO","XXOX"}</pre></td></tr><tr><td class="statText"><pre>0</pre></td></tr><tr><td class="statText"><pre>2</pre></td></tr><tr><td class="statText"><pre>1</pre></td></tr><tr><td class="statText"><pre>1</pre></td></tr><tr><td class="statText"><pre>3</pre></td></tr><tr><td class="statText"><pre>1</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: "No"</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">In order to make a round trip between the island 0 and the island 2, Alice must use the old bridge between the island 1 and the island 2 twice. So Bob cannot travel from the island 1 to the island 3.</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">2)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{"XOXO","OXOX","XOXO","OXOX"}</pre></td></tr><tr><td class="statText"><pre>0</pre></td></tr><tr><td class="statText"><pre>2</pre></td></tr><tr><td class="statText"><pre>1</pre></td></tr><tr><td class="statText"><pre>1</pre></td></tr><tr><td class="statText"><pre>3</pre></td></tr><tr><td class="statText"><pre>1</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: "Yes"</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">One possible pair of tours is 0-&gt;1-&gt;2-&gt;3-&gt;0 for Alice and 1-&gt;2-&gt;3-&gt;0-&gt;1 for Bob.</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">3)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{"XNXO","NXOX","XOXO","OXOX"}</pre></td></tr><tr><td class="statText"><pre>0</pre></td></tr><tr><td class="statText"><pre>2</pre></td></tr><tr><td class="statText"><pre>1</pre></td></tr><tr><td class="statText"><pre>1</pre></td></tr><tr><td class="statText"><pre>3</pre></td></tr><tr><td class="statText"><pre>2</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: "No"</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText"></td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">4)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{"XOXOO","OXOXO","XOXOO","OXOXO","OOOOX"}</pre></td></tr><tr><td class="statText"><pre>0</pre></td></tr><tr><td class="statText"><pre>2</pre></td></tr><tr><td class="statText"><pre>2</pre></td></tr><tr><td class="statText"><pre>1</pre></td></tr><tr><td class="statText"><pre>3</pre></td></tr><tr><td class="statText"><pre>2</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: "Yes"</pre></td></tr><tr><td class="statText"></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">5)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{"XOOOX","OXOOX","OOXOX","OOOXN","XXXNX"}</pre></td></tr><tr><td class="statText"><pre>0</pre></td></tr><tr><td class="statText"><pre>4</pre></td></tr><tr><td class="statText"><pre>3</pre></td></tr><tr><td class="statText"><pre>1</pre></td></tr><tr><td class="statText"><pre>2</pre></td></tr><tr><td class="statText"><pre>2</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: "No"</pre></td></tr><tr><td class="statText"></td></tr></table></td></tr></table><hr><p>This problem statement is the exclusive and proprietary property of TopCoder, Inc.  Any unauthorized use or reproduction of this information without the prior written consent of TopCoder, Inc. is strictly prohibited.  (c)2010, TopCoder, Inc.  All rights reserved.  </p>
                      
                   </td>