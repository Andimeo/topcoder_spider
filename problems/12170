<td class="problemText" valign="middle" align="left">
                      
              		<table><tr><td colspan="2" class="statText"><h3>Problem Statement</h3></td></tr><tr><td class="statText">    </td><td class="statText">Alice is playing a game with her old friend, Bob.
<br>
There are n circles on a paper. The center of the i-th circle is (<b>x</b>[i], <b>y</b>[i]), and the radius is <b>r</b>[i].
No two different circles share a common point on their boundary.
However, it is allowed for circles to be located entirely within other circles.
In the game, the players take alternating turns.
Alice starts.
In each move, the current player must:
<ol><li>Choose a circle such that there is no red point strictly inside the circle.</li>
<li>Pick one point that is strictly inside the chosen circle and color it red.</li>
</ol>
If a player can't do such a move, he/she loses the game.
<br>
You are given the int[]s <b>x</b>, <b>y</b>, and <b>r</b> that describe a set of circles with the above property.
Return "Alice" (quotes for clarity) if Alice has a winning strategy for the given set of circles.
Otherwise, return "Bob".
</td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Definition</h3></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText">Class:</td><td class="statText">CirclesGame</td></tr><tr><td class="statText">Method:</td><td class="statText">whoCanWin</td></tr><tr><td class="statText">Parameters:</td><td class="statText">int[], int[], int[]</td></tr><tr><td class="statText">Returns:</td><td class="statText">String</td></tr><tr><td class="statText">Method signature:</td><td class="statText">String whoCanWin(int[] x, int[] y, int[] r)</td></tr><tr><td colspan="2" class="statText">(be sure your method is public)</td></tr></table></td></tr><tr><td class="statText">    </td></tr><tr><td class="statText"></td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Notes</h3></td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">Points located on the boundary of a circle are <i>not</i> considered to be strictly inside that circle.</td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Constraints</h3></td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText"><b>x</b> will contain between 1 and 50 elements, inclusive.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText"><b>x</b>, <b>y</b>, and <b>r</b> will each contain the same number of elements.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">Each element in <b>x</b> will be between -10,000 and 10,000, inclusive.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">Each element in <b>y</b> will be between -10,000 and 10,000, inclusive.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">Each element in <b>r</b> will be between 1 and 10,000, inclusive.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">No two circles intersect. That is, the boundaries of the given circles are pairwise disjoint.</td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Examples</h3></td></tr><tr><td align="center" nowrap class="statText">0)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{0}</pre></td></tr><tr><td class="statText"><pre>{0}</pre></td></tr><tr><td class="statText"><pre>{1}</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: "Alice"</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">This test case has just one circle. Alice draws a red point anywhere inside the circle and Bob has no valid move.</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">1)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{0, 3}</pre></td></tr><tr><td class="statText"><pre>{0, 0}</pre></td></tr><tr><td class="statText"><pre>{1, 1}</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: "Bob"</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">Two separate circles. Alice draws a red point in one of them, Bob draws a red point in another one, then Alice has no valid moves.</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">2)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{0, 0, 5}</pre></td></tr><tr><td class="statText"><pre>{0, 0, 0}</pre></td></tr><tr><td class="statText"><pre>{1, 2, 1}</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: "Alice"</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">In her first move, Alice should draw a point within the circle 1, but so that it's not within the circle 0. (Both indices are 0-based.)</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">3)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{0, 0, 0, 10, 10, 20}</pre></td></tr><tr><td class="statText"><pre>{0, 0, 0, 0, 0, 0}</pre></td></tr><tr><td class="statText"><pre>{1, 2, 3, 1, 2, 1}</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: "Bob"</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText"></td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">4)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{10,20,30,40,50,60,70,80}</pre></td></tr><tr><td class="statText"><pre>{8,7,6,5,4,3,2,1}</pre></td></tr><tr><td class="statText"><pre>{2,2,2,2,2,2,2,2}</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: "Bob"</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText"></td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">5)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{0, 3, 6, 9, 12, -4747, -4777}</pre></td></tr><tr><td class="statText"><pre>{-5858, -5858, -5858, -5858, -5858, 777, 777}</pre></td></tr><tr><td class="statText"><pre>{58, 1, 1, 1, 1, 44, 8}</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: "Bob"</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText"></td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">6)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{5202, 5699, -7433, 5068, -9483, -684, -6593, 5108, -7813, 6823, 3267, -8222, -8547, 2878, 2413, 8557, 5149, 5073, -8638, -6108, 8097}</pre></td></tr><tr><td class="statText"><pre>{8728, -7407, 4338, -8414, 7652, -3705, -984, 5976, -9180, -9119, 9301, 2398, 7915, 6205, 7665, 717, -9884, 11, -8579, -6903, -746}</pre></td></tr><tr><td class="statText"><pre>{4196, 9303, 7152, 5875, 2943, 788, 502, 416, 1958, 3174, 182, 1256, 1147, 444, 979, 65, 1040, 1233, 438, 175, 1140}</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: "Alice"</pre></td></tr><tr><td class="statText"></td></tr></table></td></tr></table><hr><p>This problem statement is the exclusive and proprietary property of TopCoder, Inc.  Any unauthorized use or reproduction of this information without the prior written consent of TopCoder, Inc. is strictly prohibited.  (c)2010, TopCoder, Inc.  All rights reserved.  </p>
                      
                   </td>