<td class="problemText" valign="middle" align="left">
                      
              		<table><tr><td colspan="2" class="statText"><h3>Problem Statement</h3></td></tr><tr><td class="statText">    </td><td class="statText"><p>
Given an undirected graph G and a subset of its vertices S, the <i>subgraph of G induced by S</i> (denoted G/S) is defined as the subgraph of the graph G such that the following two conditions are satisfied:
</p><ul><li>The set of vertices of the subgraph G/S is exactly S.</li>
<li>For any two vertices x, y in S, there is an edge {x,y} in G/S if and only if there is such an edge in G.</li>
</ul>
In other words, the induced subgraph always contains all the edges of G it may contain, given its vertices.

<p>
In this problem, you are given a tree G containing n vertices and a positive integer <b>k</b>.
Initially, the vertices of G are numbered from 0 to n-1, inclusive.
The objective is to change this numbering
so that all induced subgraphs over {i, i+1, .., i+<b>k</b>-1} are connected, for all 0 &lt;= i &lt;= n-<b>k</b>.
How many ways of renumbering are there?
</p>
<p>
The initial tree G is given as two int[]s <b>edge1</b> and <b>edge2</b>, each containing n-1 elements.
These two int[]s describe the endpoints of edges. For each i, there is an edge between the vertices <b>edge1</b>[i] and <b>edge2</b>[i].
Let C be the number of ways to renumber the vertices that satisfy the condition above.
Your method must return (C modulo 1,000,000,009).
</p>
</td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Definition</h3></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText">Class:</td><td class="statText">InducedSubgraphs</td></tr><tr><td class="statText">Method:</td><td class="statText">getCount</td></tr><tr><td class="statText">Parameters:</td><td class="statText">int[], int[], int</td></tr><tr><td class="statText">Returns:</td><td class="statText">int</td></tr><tr><td class="statText">Method signature:</td><td class="statText">int getCount(int[] edge1, int[] edge2, int k)</td></tr><tr><td colspan="2" class="statText">(be sure your method is public)</td></tr></table></td></tr><tr><td class="statText">    </td></tr><tr><td class="statText"></td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Notes</h3></td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">A tree is a connected graph with no cycles.</td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Constraints</h3></td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText"><b>edge1</b> will contain between 1 and 40 elements, inclusive.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText"><b>edge2</b> will contain the same number of elements as <b>edge1</b>.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">Each element of <b>edge1</b> and <b>edge2</b> will be between 0 and n-1, inclusive, where n is (the number of elements in edge1) + 1.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">A graph represented by <b>edge1</b> and <b>edge2</b> will be a tree.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText"><b>k</b> will be between 1 and n, inclusive.</td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Examples</h3></td></tr><tr><td align="center" nowrap class="statText">0)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{0, 1}</pre></td></tr><tr><td class="statText"><pre>{1, 2}</pre></td></tr><tr><td class="statText"><pre>2</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: 2</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">Initially, the graph looks as follows:
<pre>
   0-1-2
</pre>
There are two correct ways to assign the new numbers to its vertices:
<pre>
   0-1-2
</pre>
and
<pre>
   2-1-0
</pre>
</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">1)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{0, 1, 3}</pre></td></tr><tr><td class="statText"><pre>{2, 2, 2}</pre></td></tr><tr><td class="statText"><pre>3</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: 12</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">The given graph:
<pre>
     0-2-1
       |
       3
</pre>
Possible numberings are as follows.
<pre>
     0-1-2     0-1-3     2-1-3     3-1-2     2-1-0     3-1-0
       |         |         |         |         |         |
       3         2         0         0         3         2

     0-2-3     1-2-3     3-2-1     3-2-0     0-2-1     1-2-0
       |         |         |         |         |         |
       1         0         0         1         3         3
</pre></td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">2)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{5, 0, 1, 2, 2}</pre></td></tr><tr><td class="statText"><pre>{0, 1, 2, 4, 3}</pre></td></tr><tr><td class="statText"><pre>3</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: 4</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">The given graph:
<pre>
     5-0-1-2-4
           |
           3
</pre>
Possible ways:
<pre>
     0-1-2-3-4     0-1-2-3-5
           |             |
           5             4

     5-4-3-2-1     5-4-3-2-0
           |             |
           0             1
</pre></td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">3)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6}</pre></td></tr><tr><td class="statText"><pre>{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}</pre></td></tr><tr><td class="statText"><pre>11</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: 481904640</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText"></td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">4)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{5, 9, 4, 10, 10, 0, 7, 6, 2, 1, 11, 8}
</pre></td></tr><tr><td class="statText"><pre>{0, 0, 10, 3, 0, 6, 1, 1, 12, 12, 7, 11}
</pre></td></tr><tr><td class="statText"><pre>6</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: 800</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText"></td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">5)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{0, 5, 1, 0, 2, 3, 5}
</pre></td></tr><tr><td class="statText"><pre>{4, 7, 0, 6, 7, 5, 0}
</pre></td></tr><tr><td class="statText"><pre>3</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: 0</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText"></td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">6)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}</pre></td></tr><tr><td class="statText"><pre>{1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20}</pre></td></tr><tr><td class="statText"><pre>1</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: 890964601</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText"></td></tr></table></td></tr></table></td></tr></table><hr><p>This problem statement is the exclusive and proprietary property of TopCoder, Inc.  Any unauthorized use or reproduction of this information without the prior written consent of TopCoder, Inc. is strictly prohibited.  (c)2010, TopCoder, Inc.  All rights reserved.  </p>
                      
                   </td>