<td class="problemText" valign="middle" align="left">
                      
              		<table><tr><td colspan="2" class="statText"><h3>Problem Statement</h3></td></tr><tr><td class="statText">    </td><td class="statText"><p>
There is a H times W rectangle divided into unit cells.
The rows of cells are numbered 0 to H-1 from top to bottom, and the columns are numbered 0 to W-1 from left to right.
The corners of cells are called lattice points.
By definition, there are (H+1)*(W+1) lattice points in our rectangle.
</p>
<p>
Each of the four edges of each cell is painted white.
Additionally, in some cells exactly one of the two diagonals is painted white.
In the remaining cells no diagonal is painted white yet.
Later, you are going to paint exactly one of the diagonals white in each of these cells.
</p>
<p>
Once you are done painting the diagonals, your next goal will be to color each of the lattice points using one of three available colors: red, green, or blue.
There is only one constraint: adjacent lattice points are not allowed to share the same color.
</p>
<p>
Two lattice points are called <i>adjacent</i> if they are connected by a white line segment.
(In other words, consecutive corners of a cell are always adjacent, opposite corners of a cell are adjacent if and only if they are connected by a painted diagonal, and no other pairs of lattice points are adjacent.)
</p>
<p>
Obviously, you need to paint the missing diagonals in such a way that there will be a valid coloring of lattice points, if possible.
</p>
<p>
You are given a String[] <b>cells</b> with H elements, each consisting of W characters.
If <b>cells</b>[i][j] is 'N', there is a diagonal line from the top left to the bottom right corner in the cell in row i, column j.
If <b>cells</b>[i][j] is 'Z', there is a diagonal line from the top right to the bottom left corner in the cell in row i, column j.
If <b>cells</b>[i][j] is '?', there is no diagonal yet in the cell in row i, column j.
</p>
<p>
If it is impossible to fill in the missing diagonals in such a way that there will be a valid coloring of all lattice points, return an empty String[].
Otherwise, return a String[] that represents the rectangle with all the missing diagonals filled in.
I.e., the return value must be obtained from <b>cells</b> by replacing each '?' by either 'N' or 'Z'.
The return value must represent a rectangle for which a valid coloring of its lattice points exists.
If there are multiple possibilities, return the lexicographically smallest one.
</p>

</td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Definition</h3></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText">Class:</td><td class="statText">ThreeColorability</td></tr><tr><td class="statText">Method:</td><td class="statText">lexSmallest</td></tr><tr><td class="statText">Parameters:</td><td class="statText">String[]</td></tr><tr><td class="statText">Returns:</td><td class="statText">String[]</td></tr><tr><td class="statText">Method signature:</td><td class="statText">String[] lexSmallest(String[] cells)</td></tr><tr><td colspan="2" class="statText">(be sure your method is public)</td></tr></table></td></tr><tr><td class="statText">    </td></tr><tr><td class="statText"></td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Notes</h3></td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">Given two different String[]s A and B with the same number of elements, find the smallest index i such that A[i] and B[i] differ. If A[i] &lt; B[i] we say that A is lexicographically smaller than B and vice versa.</td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Constraints</h3></td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText"><b>cells</b> will contain between 1 and 50 elements, inclusive.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">Each element of <b>cells</b> will contain between 1 and 50 characters, inclusive.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">All elements of <b>cells</b> will contain the same number of characters.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">Each character of <b>cells</b> will be either 'N' or 'Z' or '?'.</td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Examples</h3></td></tr><tr><td align="center" nowrap class="statText">0)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{"Z"}</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: {"Z" }</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">The given rectangle and a possible coloring is as follows.
<p>
<img src="http://www.topcoder.com/contest/problem/ThreeColorability/Color1.png"></p>

</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">1)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{"??", "?N"}</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: {"NN", "NN" }</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText"><p>
<img src="http://www.topcoder.com/contest/problem/ThreeColorability/Color2.png"></p></td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">2)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{"ZZZ", "ZNZ"}</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: { }</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText"></td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">3)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{"N?N??NN","??ZN??Z","NN???Z?","ZZZ?Z??","Z???NN?","N?????N","ZZ?N?NN"}</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: { }</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText"></td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">4)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{"ZZZZ","ZZZZ","ZZZZ"}</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: {"ZZZZ", "ZZZZ", "ZZZZ" }</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText"></td></tr></table></td></tr></table></td></tr></table><hr><p>This problem statement is the exclusive and proprietary property of TopCoder, Inc.  Any unauthorized use or reproduction of this information without the prior written consent of TopCoder, Inc. is strictly prohibited.  (c)2010, TopCoder, Inc.  All rights reserved.  </p>
                      
                   </td>