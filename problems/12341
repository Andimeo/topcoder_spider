<td class="problemText" valign="middle" align="left">
                      
              		<table><tr><td colspan="2" class="statText"><h3>Problem Statement</h3></td></tr><tr><td class="statText">    </td><td class="statText"><p>
Paco collects penguins. His penguins like to play and run around on the ice where he lives. In order to keep his penguins safe he decided to construct a single fence enclosure to keep danger out.
</p>
<br><p>
Paco's penguins have fallen asleep. Acting quickly Paco placed <b>numPosts</b> posts in a circular configuration on the ice. Each post is placed <b>radius</b> meters from location (0,0). The posts are equally spaced with the first post being placed at location (<b>radius</b>, 0). 
</p>
<br><p>
To construct the fencing, Paco will connect some pairs of fence posts using straight fences.
No two segments of the fence are allowed to cross.
In the resulting fencing, each fence post will either be unused, or it will be connected to exactly two other fence posts. In order to minimize the damage his penguins cause to the ice, he would like to minimize the area enclosed by the fence.
</p>
<br><p>
In order to keep all his penguins happy Paco would like to have all his penguins in the one single enclosure. Two penguins are in the same enclosure if it is possible to walk from one penguin to the other without crossing a fence. 
</p>
<br><p>
<img src="http://www.topcoder.com/contest/problem/FencingPenguinsEasy/fencingEasyConcept.png"></p>
<br><p>
You are given two ints <b>numPosts</b> and <b>radius</b>. You are also given two int[]s <b>x</b> and <b>y</b> representing the (<b>x</b>,<b>y</b>) location of each of the sleeping penguins. Each penguin is small enough to be considered a point. Compute an return the smallest area of an enclosure that can contain all the penguins. If it is not possible to enclose all the penguins return -1.
</p></td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Definition</h3></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText">Class:</td><td class="statText">FencingPenguinsEasy</td></tr><tr><td class="statText">Method:</td><td class="statText">calculateMinArea</td></tr><tr><td class="statText">Parameters:</td><td class="statText">int, int, int[], int[]</td></tr><tr><td class="statText">Returns:</td><td class="statText">double</td></tr><tr><td class="statText">Method signature:</td><td class="statText">double calculateMinArea(int numPosts, int radius, int[] x, int[] y)</td></tr><tr><td colspan="2" class="statText">(be sure your method is public)</td></tr></table></td></tr><tr><td class="statText">    </td></tr><tr><td class="statText"></td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Constraints</h3></td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText"><b>numPosts</b> will be between 3 and 222, inclusive.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText"><b>radius</b> will be between 5 and 100,000, inclusive.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText"><b>x</b> will contain between 1 and 50 elements, inclusive.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText"><b>y</b> will contain the same number of elements as <b>x</b>.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">Each element in <b>x</b> will be between -100,000 and 100,000, inclusive.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">Each element in <b>y</b> will be between -100,000 and 100,000, inclusive.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">No penguin will come within 10^-6 of any potential fencing.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">No two penguins will occupy the same location.</td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Examples</h3></td></tr><tr><td align="center" nowrap class="statText">0)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>3</pre></td></tr><tr><td class="statText"><pre>5</pre></td></tr><tr><td class="statText"><pre>{-1}</pre></td></tr><tr><td class="statText"><pre>{0}</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: 32.47595264191645</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">There is only one possible enclosure that uses all three fence posts.</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">1)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>30</pre></td></tr><tr><td class="statText"><pre>5</pre></td></tr><tr><td class="statText"><pre>{6}</pre></td></tr><tr><td class="statText"><pre>{0}</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: -1.0</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText"></td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">2)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>4</pre></td></tr><tr><td class="statText"><pre>5</pre></td></tr><tr><td class="statText"><pre>{2}</pre></td></tr><tr><td class="statText"><pre>{1}</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: 25.0</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">If the posts are numbered starting from 0 at (radius, 0) and increasing in the counter-clockwise direction. The resulting possible answers would be:
<br><br>
(0,1,2)<br>
(0,1,3)<br><br>
Both enclosures cover the same area.
</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">3)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>4</pre></td></tr><tr><td class="statText"><pre>5</pre></td></tr><tr><td class="statText"><pre>{2,-2}</pre></td></tr><tr><td class="statText"><pre>{1,-1}</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: 50.0</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText"></td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">4)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>8</pre></td></tr><tr><td class="statText"><pre>5</pre></td></tr><tr><td class="statText"><pre>{8}</pre></td></tr><tr><td class="statText"><pre>{8}</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: -1.0</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">It is not possible to enclose this penguin.
<br><br>
Please note that while a penguin can't be located close to a potential fencing (see constraints), it can be located close to or exactly on a straight line passing through any pair of fence posts.</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">5)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>7</pre></td></tr><tr><td class="statText"><pre>10</pre></td></tr><tr><td class="statText"><pre>{9}</pre></td></tr><tr><td class="statText"><pre>{1}</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: 29.436752637711805</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText"></td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">6)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>30</pre></td></tr><tr><td class="statText"><pre>800</pre></td></tr><tr><td class="statText"><pre>{8,2,100,120,52,67,19,-36}</pre></td></tr><tr><td class="statText"><pre>{-19,12,88,-22,53,66,-140,99}
</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: 384778.74757953023</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText"></td></tr></table></td></tr></table></td></tr></table><hr><p>This problem statement is the exclusive and proprietary property of TopCoder, Inc.  Any unauthorized use or reproduction of this information without the prior written consent of TopCoder, Inc. is strictly prohibited.  (c)2010, TopCoder, Inc.  All rights reserved.  </p>
                      
                   </td>