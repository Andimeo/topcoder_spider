<td class="problemText" valign="middle" align="left">
                      
              		<table><tr><td colspan="2" class="statText"><h3>Problem Statement</h3></td></tr><tr><td class="statText">    </td><td class="statText">Consider 2N points in a plane: (0, 0), (1, 0), ..., (2N - 1, 0). 
You want to label these points with integers, 
such that each integer in { 0, 1, ..., N - 1 } is used twice, 
and you can draw N disjoint semicircles in the plane, as follows: 
For each j, one of the semicircles has to connect the two points labelled j (See the image in Example 0). 
<br><br>
Some points are already labelled. 
You are given a int[] <b>labels</b> consisting of 2N elements. 
If <b>labels</b>[i] is -1, it means that the point (i, 0) is not labelled yet, 
otherwise the point (i, 0) is labelled with the integer <b>labels</b>[i]. 
Each integer in { 0, 1, ..., N - 1 } will appear in <b>labels</b> either zero or two times. 
<br><br>
Return the String "POSSIBLE" if the labelling is possible, "IMPOSSIBLE" otherwise. 
</td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Definition</h3></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText">Class:</td><td class="statText">DisjointSemicircles</td></tr><tr><td class="statText">Method:</td><td class="statText">getPossibility</td></tr><tr><td class="statText">Parameters:</td><td class="statText">int[]</td></tr><tr><td class="statText">Returns:</td><td class="statText">String</td></tr><tr><td class="statText">Method signature:</td><td class="statText">String getPossibility(int[] labels)</td></tr><tr><td colspan="2" class="statText">(be sure your method is public)</td></tr></table></td></tr><tr><td class="statText">    </td></tr><tr><td class="statText"></td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Constraints</h3></td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText"><b>labels</b> will contain between 2 and 50 elements, inclusive. </td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText"><b>labels</b> will contain an even number of elements. </td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">Each element in <b>labels</b> will be between -1 and N - 1, inclusive, where 2N is the number of elements in <b>labels</b>. </td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">Each integer between 0 and N - 1 will appear in <b>labels</b> either zero or two times. </td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Examples</h3></td></tr><tr><td align="center" nowrap class="statText">0)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{ -1, 0, -1, -1, 0, -1 }</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: "POSSIBLE"</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">If you label the points as { 1, 0, 1, 2, 0, 2 }, you can draw 3 disjoint semicircles as in the picture. <br><img src="http://www.topcoder.com/contest/problem/DisjointSemicircles/DisjointSemicircles_Example_0.png"></td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">1)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{ 1, -1, 2, 1, -1, 2 }</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: "IMPOSSIBLE"</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">The labelling must be { 1, 0, 2, 1, 0, 2 }, but then you cannot draw 3 disjoint semicircles. 
</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">2)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{ 2, -1, -1, 0, -1, -1, 2, 0 }</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: "POSSIBLE"</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">The picture shows one of the possible ways of labelling and connecting. <br><img src="http://www.topcoder.com/contest/problem/DisjointSemicircles/DisjointSemicircles_Example_2.png"></td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">3)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{ -1, 1, 3, -1, 1, 3, -1, -1 }</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: "IMPOSSIBLE"</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText"></td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">4)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{ -1, 5, -1, -1, 3, 6, 8, -1, 10, 7, -1, 7, 8, 0, 11, -1, -1, 11, 0, 10, 4, -1, 6, 5, -1, -1, 9, 9, 4, 3 }
</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: "POSSIBLE"</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText"></td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">5)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{ 4, -1, 2, 4, -1, 3, 3, 12, 2, 5, -1, 0, 9, 9, 8, -1, 12, 8, -1, 6, 0, -1, -1, -1, 5, 6, 10, -1, -1, 10 }
</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: "IMPOSSIBLE"</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText"></td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">6)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 }
</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: "POSSIBLE"</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText"></td></tr></table></td></tr></table></td></tr></table><hr><p>This problem statement is the exclusive and proprietary property of TopCoder, Inc.  Any unauthorized use or reproduction of this information without the prior written consent of TopCoder, Inc. is strictly prohibited.  (c)2010, TopCoder, Inc.  All rights reserved.  </p>
                      
                   </td>