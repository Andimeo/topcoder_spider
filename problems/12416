<td class="problemText" valign="middle" align="left">
                      
              		<table><tr><td colspan="2" class="statText"><h3>Problem Statement</h3></td></tr><tr><td class="statText">    </td><td class="statText">Fox Ciel is playing the "DJ Box" set of levels in the "Cut the Rope" game on her smartphone.
In the current level, she is facing the following problem:
<br><br><br>
The level can be seen as a two-dimensional plane that contains a single candy and some disks.
You are given the description of the level: int[]s <b>x</b>, <b>y</b>, and <b>r</b>; and ints <b>sx</b>, <b>sy</b>, <b>tx</b>, and <b>ty</b>.
<br><br><br>
The int[]s <b>x</b>, <b>y</b>, and <b>r</b> describe the disks:
For each i, there is a disk centered at (<b>x</b>[i], <b>y</b>[i]) with radius <b>r</b>[i].
Some of the disks may overlap.
The candy is initially located at (<b>sx</b>, <b>sy</b>), and the goal of the game is to move it to (<b>tx</b>, <b>ty</b>).
<br><br><br>
The game is played by rotating some of the disks, one after another.
More precisely, in each step, Ciel may choose any disk that currently contains the candy, and rotate the disk by any desired angle around its center.
The candy rotates with the chosen disk.
Other disks are ignored during the rotation.
(If the candy is located exactly on the border of a disk, we still consider it to be on the disk.)
<br><br><br>
Return "YES" if she can solve the level in finitely many steps, and "NO" otherwise.</td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Definition</h3></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText">Class:</td><td class="statText">CandyOnDisk</td></tr><tr><td class="statText">Method:</td><td class="statText">ableToAchieve</td></tr><tr><td class="statText">Parameters:</td><td class="statText">int[], int[], int[], int, int, int, int</td></tr><tr><td class="statText">Returns:</td><td class="statText">String</td></tr><tr><td class="statText">Method signature:</td><td class="statText">String ableToAchieve(int[] x, int[] y, int[] r, int sx, int sy, int tx, int ty)</td></tr><tr><td colspan="2" class="statText">(be sure your method is public)</td></tr></table></td></tr><tr><td class="statText">    </td></tr><tr><td class="statText"></td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Constraints</h3></td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText"><b>x</b> will contain between 1 and 50 elements, inclusive.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText"><b>x</b>, <b>y</b>, and <b>r</b> will each contain the same number of elements.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">Each element in <b>x</b>, <b>y</b> will be between -1,000,000,000 and 1,000,000,000, inclusive.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">Each element in <b>r</b> will be between 1 and 1,000,000,000, inclusive.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText"><b>sx</b>, <b>sy</b>, <b>tx</b> and <b>ty</b> will be between -1,000,000,000 and 1,000,000,000, inclusive.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">The answer will not change if we increase the radii of all disks by 1e-3. Neither will it change if we decrease the radii of all disks by 1e-3.</td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Examples</h3></td></tr><tr><td align="center" nowrap class="statText">0)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{0, 4}</pre></td></tr><tr><td class="statText"><pre>{0, 0}</pre></td></tr><tr><td class="statText"><pre>{3, 3}</pre></td></tr><tr><td class="statText"><pre>-1</pre></td></tr><tr><td class="statText"><pre>-2</pre></td></tr><tr><td class="statText"><pre>6</pre></td></tr><tr><td class="statText"><pre>1</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: "YES"</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText"><img src="http://www.topcoder.com/contest/problem/CandyOnDisk/0.png"><br>
You have two disks. You can win the level by first rotating the yellow disk to move the candy from S to A = (2,1), and then rotating the green disk to move the candy from A to T.</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">1)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{0, 3}</pre></td></tr><tr><td class="statText"><pre>{0, 0}</pre></td></tr><tr><td class="statText"><pre>{5, 3}</pre></td></tr><tr><td class="statText"><pre>-4</pre></td></tr><tr><td class="statText"><pre>0</pre></td></tr><tr><td class="statText"><pre>-2</pre></td></tr><tr><td class="statText"><pre>0</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: "YES"</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText"><img src="http://www.topcoder.com/contest/problem/CandyOnDisk/1.png"><br>
This time you need 3 steps: S-&gt;A-&gt;B-&gt;T.</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">2)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{0}</pre></td></tr><tr><td class="statText"><pre>{0}</pre></td></tr><tr><td class="statText"><pre>{1}</pre></td></tr><tr><td class="statText"><pre>0</pre></td></tr><tr><td class="statText"><pre>0</pre></td></tr><tr><td class="statText"><pre>571</pre></td></tr><tr><td class="statText"><pre>571</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: "NO"</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">The target point is outside of the only disk, so we clearly cannot reach it.</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">3)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{0}</pre></td></tr><tr><td class="statText"><pre>{0}</pre></td></tr><tr><td class="statText"><pre>{1}</pre></td></tr><tr><td class="statText"><pre>571</pre></td></tr><tr><td class="statText"><pre>571</pre></td></tr><tr><td class="statText"><pre>571</pre></td></tr><tr><td class="statText"><pre>571</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: "YES"</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText"></td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">4)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}</pre></td></tr><tr><td class="statText"><pre>{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}</pre></td></tr><tr><td class="statText"><pre>{2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2}</pre></td></tr><tr><td class="statText"><pre>2</pre></td></tr><tr><td class="statText"><pre>2</pre></td></tr><tr><td class="statText"><pre>19</pre></td></tr><tr><td class="statText"><pre>19</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: "YES"</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText"></td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">5)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}</pre></td></tr><tr><td class="statText"><pre>{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}</pre></td></tr><tr><td class="statText"><pre>{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}</pre></td></tr><tr><td class="statText"><pre>2</pre></td></tr><tr><td class="statText"><pre>2</pre></td></tr><tr><td class="statText"><pre>19</pre></td></tr><tr><td class="statText"><pre>19</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: "NO"</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText"></td></tr></table></td></tr></table></td></tr></table><hr><p>This problem statement is the exclusive and proprietary property of TopCoder, Inc.  Any unauthorized use or reproduction of this information without the prior written consent of TopCoder, Inc. is strictly prohibited.  (c)2010, TopCoder, Inc.  All rights reserved.  </p>
                      
                   </td>