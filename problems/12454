<td class="problemText" valign="middle" align="left">
                      
              		<table><tr><td colspan="2" class="statText"><h3>Problem Statement</h3></td></tr><tr><td class="statText">    </td><td class="statText">Consider a string consisting of lowercase characters and following two operations that can change it: 
<ul><li>Next: Choose a lowercase character other than 'z' and replace its every occurrence with the next character 
	('a' -&gt; 'b', 'b' -&gt; 'c', ..., 'x' -&gt; 'y', 'y' -&gt; 'z'). </li>
	<li>Prev: Choose a lowercase character other than 'a' and replace its every occurrence with the previous character 
	('b' -&gt; 'a', 'c' -&gt; 'b', ..., 'y' -&gt; 'x', 'z' -&gt; 'y'). </li>
</ul>
You can use each operation as many times as you want, and in any order you like. 
You are given ints <b>nextCost</b> and <b>prevCost</b>. 
These represent the cost of using each Next and Prev operation, respectively. 
You are also given two Strings <b>start</b> and <b>goal</b>. 
These strings are special: no two characters in <b>start</b> are the same, and no two characters in <b>goal</b> are the same. 
Return the minimum cost required in order to transform <b>start</b> into <b>goal</b> using the above operations. 
If transforming <b>start</b> into <b>goal</b> is impossible, return -1 instead. 
</td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Definition</h3></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText">Class:</td><td class="statText">NextOrPrev</td></tr><tr><td class="statText">Method:</td><td class="statText">getMinimum</td></tr><tr><td class="statText">Parameters:</td><td class="statText">int, int, String, String</td></tr><tr><td class="statText">Returns:</td><td class="statText">int</td></tr><tr><td class="statText">Method signature:</td><td class="statText">int getMinimum(int nextCost, int prevCost, String start, String goal)</td></tr><tr><td colspan="2" class="statText">(be sure your method is public)</td></tr></table></td></tr><tr><td class="statText">    </td></tr><tr><td class="statText"></td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Constraints</h3></td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText"><b>nextCost</b> and <b>prevCost</b> will each be between 1 and 1000, inclusive. </td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText"><b>start</b> and <b>goal</b> will each contain between 1 and 26 characters, inclusive. </td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText"><b>start</b> and <b>goal</b> will contain the same number of characters. </td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">Each character in <b>start</b> and <b>goal</b> will be a lowercase character. </td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">The characters in <b>start</b> will be distinct. </td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">The characters in <b>goal</b> will be distinct. </td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Examples</h3></td></tr><tr><td align="center" nowrap class="statText">0)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>5</pre></td></tr><tr><td class="statText"><pre>8</pre></td></tr><tr><td class="statText"><pre>"ae"</pre></td></tr><tr><td class="statText"><pre>"bc"</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: 21</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">There are several optimal sequences of operations. 
Here is one of them: "ae" -(Next)-&gt; "be" -(Prev)-&gt; "bd" -(Prev)-&gt; "bc". The total cost is 5 + 8 + 8 = 21. 
</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">1)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>5</pre></td></tr><tr><td class="statText"><pre>8</pre></td></tr><tr><td class="statText"><pre>"ae"</pre></td></tr><tr><td class="statText"><pre>"cb"</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: -1</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">It is impossible to transform "ae" into "cb". 
</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">2)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>1</pre></td></tr><tr><td class="statText"><pre>1</pre></td></tr><tr><td class="statText"><pre>"srm"</pre></td></tr><tr><td class="statText"><pre>"srm"</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: 0</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText"><b>start</b> and <b>goal</b> may be the same. 
The cost of an empty sequence of operations is 0. 
</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">3)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>10</pre></td></tr><tr><td class="statText"><pre>1</pre></td></tr><tr><td class="statText"><pre>"acb"</pre></td></tr><tr><td class="statText"><pre>"bdc"</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: 30</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText"></td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">4)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>10</pre></td></tr><tr><td class="statText"><pre>1</pre></td></tr><tr><td class="statText"><pre>"zyxw"</pre></td></tr><tr><td class="statText"><pre>"vuts"</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: 16</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText"></td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">5)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>563</pre></td></tr><tr><td class="statText"><pre>440</pre></td></tr><tr><td class="statText"><pre>"ptrbgcnlaizo"</pre></td></tr><tr><td class="statText"><pre>"rtscedkiahul"</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: 10295</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText"></td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">6)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>126</pre></td></tr><tr><td class="statText"><pre>311</pre></td></tr><tr><td class="statText"><pre>"yovlkwpjgsna"</pre></td></tr><tr><td class="statText"><pre>"zpwnkytjisob"</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: -1</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText"></td></tr></table></td></tr></table></td></tr></table><hr><p>This problem statement is the exclusive and proprietary property of TopCoder, Inc.  Any unauthorized use or reproduction of this information without the prior written consent of TopCoder, Inc. is strictly prohibited.  (c)2010, TopCoder, Inc.  All rights reserved.  </p>
                      
                   </td>