<td class="problemText" valign="middle" align="left">
                      
              		<table><tr><td colspan="2" class="statText"><h3>Problem Statement</h3></td></tr><tr><td class="statText">    </td><td class="statText">A magic matrix is a square matrix filled with digits (0 to 9) such that its row sums and column sums all have the same last digit.
John has <b>n</b> by <b>n</b> matrix.
Its rows and columns are numbered from 0 to <b>n</b>-1.
Some cells of the matrix already contain digits and some are empty.
John wants to assign a value to each empty cell to get a magic matrix.
<br><br>

You are given an int <b>n</b> and int[]s <b>rows</b>, <b>columns</b>, <b>values</b>.
The number <b>values</b>[i] is the digit in John's matrix at row <b>rows</b>[i] and at column <b>columns</b>[i].
Return the number of different matrices John can get modulo 1,234,567,891.
</td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Definition</h3></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText">Class:</td><td class="statText">TheMagicMatrix</td></tr><tr><td class="statText">Method:</td><td class="statText">find</td></tr><tr><td class="statText">Parameters:</td><td class="statText">int, int[], int[], int[]</td></tr><tr><td class="statText">Returns:</td><td class="statText">int</td></tr><tr><td class="statText">Method signature:</td><td class="statText">int find(int n, int[] rows, int[] columns, int[] values)</td></tr><tr><td colspan="2" class="statText">(be sure your method is public)</td></tr></table></td></tr><tr><td class="statText">    </td></tr><tr><td class="statText"></td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Constraints</h3></td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText"><b>n</b> will be between 1 and 1000, inclusive.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText"><b>rows</b> will contain between 1 and 10 elements, inclusive.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText"><b>rows</b>, <b>columns</b> and <b>values</b> will all contains the same number of elements.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">Each element of <b>rows</b> will be between 0 and <b>n</b>-1, inclusive.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">Each element of <b>columns</b> will be between 0 and <b>n</b>-1, inclusive.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">Each element of <b>values</b> will be between 0 and 9, inclusive.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">All pairs (<b>rows</b>[i], <b>columns</b>[i]) will be distinct.</td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Examples</h3></td></tr><tr><td align="center" nowrap class="statText">0)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>2</pre></td></tr><tr><td class="statText"><pre>{0, 1}</pre></td></tr><tr><td class="statText"><pre>{1, 0}</pre></td></tr><tr><td class="statText"><pre>{4, 4}</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: 10</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">John will get a magic matrix only if he assigns equal values to both empty cells. 
</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">1)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>2</pre></td></tr><tr><td class="statText"><pre>{0, 1}</pre></td></tr><tr><td class="statText"><pre>{1, 0}</pre></td></tr><tr><td class="statText"><pre>{4, 7}</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: 0</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText"></td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">2)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>4</pre></td></tr><tr><td class="statText"><pre>{0, 0, 0, 1, 2, 2, 2, 3, 3, 3}</pre></td></tr><tr><td class="statText"><pre>{0, 1, 2, 3, 0, 1, 2, 0, 1, 2}</pre></td></tr><tr><td class="statText"><pre>{3, 5, 1, 9, 5, 1, 8, 6, 7, 1}</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: 2</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText"></td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">3)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>474</pre></td></tr><tr><td class="statText"><pre>{44, 77}</pre></td></tr><tr><td class="statText"><pre>{47, 74}</pre></td></tr><tr><td class="statText"><pre>{4, 7}</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: 83494518</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText"></td></tr></table></td></tr></table></td></tr></table><hr><p>This problem statement is the exclusive and proprietary property of TopCoder, Inc.  Any unauthorized use or reproduction of this information without the prior written consent of TopCoder, Inc. is strictly prohibited.  (c)2010, TopCoder, Inc.  All rights reserved.  </p>
                      
                   </td>