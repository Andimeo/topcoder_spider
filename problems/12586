<td class="problemText" valign="middle" align="left">
                      
              		<table><tr><td colspan="2" class="statText"><h3>Problem Statement</h3></td></tr><tr><td class="statText">    </td><td class="statText"><i>This problem statement contains superscripts and/or subscripts. These may not display properly outside the applet.</i>
<br><br>
Manao is studying graph theory and simple cycles in particular. A simple cycle of length L ≥ 3 in graph G is a sequence of vertices (v<sub>0</sub>, v<sub>1</sub>, ..., v<sub>L-1</sub>) such that all v<sub>0</sub>, v<sub>1</sub>, ..., v<sub>L-1</sub> are pairwise distinct and for each i=0..L-1, an edge between v<sub>i</sub> and v<sub>(i+1) mod L</sub> exists in G.
<br><br>
Manao is interested in graphs formed by connecting two trees. The connection process is as follows. Manao takes two trees composed of N vertices each. The vertices in each tree are labeled from 0 to N - 1. Then, he generates a permutation P of numbers from 0 to N - 1 uniformly at random. Finally, the graph is formed by connecting vertex i of the first tree to vertex P[i] of the second tree, for each i from 0 to N - 1. To remove ambiguity, the vertices of the first tree within the graph are referred to as A<sub>0</sub>, A<sub>1</sub>, ..., A<sub>N-1</sub> and the vertices of the second graph are referred to as B<sub>0</sub>, B<sub>1</sub>, ..., B<sub>N-1</sub>. Manao wants to know the expected number of simple cycles of length <b>K</b> in the resulting graph.
<br><br>
You are given two String[]s, <b>tree1</b> and <b>tree2</b>. Merge the elements of <b>tree1</b> to obtain a single string formatted as a space-separated list of N - 1 integers describing the first tree. Let x[i] denote the i-th integer (0-based index) in the list. Then, for each i, we have 0 ≤ x[i] ≤ i and in our tree the vertices x[i] and i+1 are connected by an edge. <b>tree2</b> describes the second tree in the same fashion.
<br><br>Compute and return the expected number of simple cycles of length <b>K</b> in the graph formed by connecting the two given trees as described above. Two simple cycles are equal if one of them can be cyclically shifted, or reversed and cyclically shifted, to coincide with the second. According to this definition, (1, 2, 3, 4), (2, 3, 4, 1) and (3, 2, 1, 4) are all equal.</td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Definition</h3></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText">Class:</td><td class="statText">TreeUnion</td></tr><tr><td class="statText">Method:</td><td class="statText">expectedCycles</td></tr><tr><td class="statText">Parameters:</td><td class="statText">String[], String[], int</td></tr><tr><td class="statText">Returns:</td><td class="statText">double</td></tr><tr><td class="statText">Method signature:</td><td class="statText">double expectedCycles(String[] tree1, String[] tree2, int K)</td></tr><tr><td colspan="2" class="statText">(be sure your method is public)</td></tr></table></td></tr><tr><td class="statText">    </td></tr><tr><td class="statText"></td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Notes</h3></td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">The returned value must have an absolute or relative error less than 1e-9.</td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Constraints</h3></td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">The concatenation of elements of <b>tree1</b> will be formatted as a space-separated list of N - 1 integers, where N is between 2 and 300, inclusive.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText"><b>tree1</b> will contain between 1 and 50 elements, inclusive.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">Each element of <b>tree1</b> will be between 1 and 50 characters long, inclusive.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">For each i, the i-th integer (0-based index) in the concatenation of elements of <b>tree1</b> will be between 0 and i, inclusive, and will have no extra leading zeros.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">The concatenation of elements of <b>tree2</b> will be formatted as a space-separated list of N - 1 integers, where N is between 2 and 300, inclusive.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText"><b>tree2</b> will contain between 1 and 50 elements, inclusive.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">Each element of <b>tree2</b> will be between 1 and 50 characters long, inclusive.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">For each i, the i-th integer (0-based index) in the concatenation of elements of <b>tree2</b> will be between 0 and i, inclusive, and will have no extra leading zeros.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText"><b>K</b> will be between 3 and 7, inclusive.</td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Examples</h3></td></tr><tr><td align="center" nowrap class="statText">0)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{"0"}</pre></td></tr><tr><td class="statText"><pre>{"0"}</pre></td></tr><tr><td class="statText"><pre>4</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: 1.0</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">Manao has two trees with two vertices each. He can connect them in two ways:
<br><br><img src="http://www.topcoder.com/contest/problem/TreeUnion/2e3y3k3.jpg"><br><br>
Either way, the resulting graph is a single cycle of length 4.</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">1)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{"0 1"}</pre></td></tr><tr><td class="statText"><pre>{"0 1"}</pre></td></tr><tr><td class="statText"><pre>4</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: 1.3333333333333333</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">Manao has two chains composed of three vertices each. There are 6 possible permutations which result in the following graphs:
<br><br><img src="http://www.topcoder.com/contest/problem/TreeUnion/a0jpk8.jpg"><br><br>
Each of the two graphs shown in the topmost row contains two cycles of length 4.
(Note that in each case the two cycles share the edge A<sub>1</sub>B<sub>1</sub>.)
Each of the other four graphs only contains one cycle of length 4.
Thus the expected number of cycles of length 4 is (2+2+1+1+1+1)/6 = 8/6 = 1.3333333333.</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">2)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{"0 1"}</pre></td></tr><tr><td class="statText"><pre>{"0 1"}</pre></td></tr><tr><td class="statText"><pre>6</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: 0.3333333333333333</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">These are the same trees as in the previous example, but this time Manao is looking for simple cycles with 6 vertices. Only the topmost two graphs contain a cycle of length 6, thus the expected number of such cycles for a random permutation P is 1/3.</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">3)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{"0 ", "1 1 1"}</pre></td></tr><tr><td class="statText"><pre>{"0 1 0 ", "1"}</pre></td></tr><tr><td class="statText"><pre>5</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: 4.0</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">The corresponding trees are these:
<br><br><img src="http://www.topcoder.com/contest/problem/TreeUnion/2yujaza.jpg"></td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">4)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{"0 1 2 0 1 2 0 1 2 5 6 1", "0 11", " 4"}</pre></td></tr><tr><td class="statText"><pre>{"0 1 1 0 2 3 4 3 4 6 6", " 10 12 12"}</pre></td></tr><tr><td class="statText"><pre>7</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: 13.314285714285713</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">Do not forget to concatenate the elements of the lists first.</td></tr></table></td></tr></table></td></tr></table><hr><p>This problem statement is the exclusive and proprietary property of TopCoder, Inc.  Any unauthorized use or reproduction of this information without the prior written consent of TopCoder, Inc. is strictly prohibited.  (c)2010, TopCoder, Inc.  All rights reserved.  </p>
                      
                   </td>