<td class="problemText" valign="middle" align="left">
                      
              		<table><tr><td colspan="2" class="statText"><h3>Problem Statement</h3></td></tr><tr><td class="statText">    </td><td class="statText"><i>This problem statement contains superscripts and/or subscripts. These may not display properly outside the applet.</i>
<br><br>
Manao is very curious about bitwise operations. He decided to learn how the bitwise AND works by testing some examples. Manao takes a int[] <b>X</b> and a int <b>K</b> and performs the operations described by the following pseudocode:
<br><br><pre>
  for i := 1 to K
    X := process(X)
	
  process(list X)
    list Y = []
      for i := 0 to length(X) - 1
        for j := i + 1 to length(X) - 1
          Y.append(X[i] &amp; X[j])
    return Y
</pre><br>
The function length(X) returns the length of the list X.
The method Y.append(Z) adds the element Z to the end of the list Y.
The elements in a list are indexed starting from 0. The lists allow duplicate elements.
<br><br>
Manao faced some problems when his lists grew a little too long. So he is asking for help. He has several queries of the type "After the entire pseudocode is executed, will N occur in X?". You are given a int[] <b>queries</b> containing M elements. Return a String of length M. The i-th character in the returned string should be '+' if the number <b>queries</b>[i] will occur in the list X after executing <tt>X := process(X)</tt> <b>K</b> times, and it should be '-' if <b>queries</b>[i] will not occur in that list.</td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Definition</h3></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText">Class:</td><td class="statText">YetAnotherANDProblem</td></tr><tr><td class="statText">Method:</td><td class="statText">test</td></tr><tr><td class="statText">Parameters:</td><td class="statText">int[], int, int[]</td></tr><tr><td class="statText">Returns:</td><td class="statText">String</td></tr><tr><td class="statText">Method signature:</td><td class="statText">String test(int[] X, int K, int[] queries)</td></tr><tr><td colspan="2" class="statText">(be sure your method is public)</td></tr></table></td></tr><tr><td class="statText">    </td></tr><tr><td class="statText"></td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Constraints</h3></td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText"><b>X</b> will contain between 3 and 16 elements, inclusive.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">Each element of <b>X</b> will be between 1 and 1,000,000,000, inclusive.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText"><b>K</b> will be between 1 and 50, inclusive.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText"><b>queries</b> will contain between 1 and 50 elements, inclusive.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">Each element of <b>queries</b> will be between 0 and 1,000,000,000, inclusive.</td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Examples</h3></td></tr><tr><td align="center" nowrap class="statText">0)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{10, 14, 7}</pre></td></tr><tr><td class="statText"><pre>1</pre></td></tr><tr><td class="statText"><pre>{10, 14, 2, 4}</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: "+-+-"</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">Manao's initial list is [10, 14, 7]. He performs the process of taking all pairwise bitwise ANDs of the numbers once. The binary representations of 10, 14 and 7 are "1010", "1110" and "0111" correspondingly. So Manao obtains:
<ul><li>10<sub>10</sub> &amp; 14<sub>10</sub> = 1010<sub>2</sub> &amp; 1110<sub>2</sub> = 1010<sub>2</sub> = 10<sub>10</sub></li>
<li>10<sub>10</sub> &amp; 7<sub>10</sub> = 1010<sub>2</sub> &amp; 0111<sub>2</sub> = 0010<sub>2</sub> = 2<sub>10</sub></li>
<li>14<sub>10</sub> &amp; 7<sub>10</sub> = 1110<sub>2</sub> &amp; 0111<sub>2</sub> = 0110<sub>2</sub> = 6<sub>10</sub></li>
</ul>
Thus, the new list contains 10 and 2, but does not contain 14 or 4.</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">1)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{30, 29, 27, 23, 15}</pre></td></tr><tr><td class="statText"><pre>2</pre></td></tr><tr><td class="statText"><pre>{28, 9, 16, 0, 12}</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: "-++-+"</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">The binary representations of the numbers in <b>X</b>:
<pre>
11110
11101
11011
10111
01111
</pre>
<br>
Note that 28<sub>10</sub> = 11100<sub>2</sub> was in the list after the first iteration, but does not appear in the final list. 9<sub>10</sub> (00101<sub>2</sub>), 16<sub>10</sub> (10000<sub>2</sub>) and 12<sub>10</sub> (01100<sub>2</sub>) occur in the final list, and 0 does not.</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">2)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{5, 5, 5, 5, 5}</pre></td></tr><tr><td class="statText"><pre>50</pre></td></tr><tr><td class="statText"><pre>{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: "-----+----"</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">Remember that duplicates are kept in the list.</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">3)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{71258, 1257, 2592588, 2885851, 999928, 123456, 59881, 99999}</pre></td></tr><tr><td class="statText"><pre>4</pre></td></tr><tr><td class="statText"><pre>{72, 91, 10, 0, 27, 64, 8}</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: "+--+-++"</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText"></td></tr></table></td></tr></table></td></tr></table><hr><p>This problem statement is the exclusive and proprietary property of TopCoder, Inc.  Any unauthorized use or reproduction of this information without the prior written consent of TopCoder, Inc. is strictly prohibited.  (c)2010, TopCoder, Inc.  All rights reserved.  </p>
                      
                   </td>