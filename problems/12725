<td class="problemText" valign="middle" align="left">
                      
              		<table><tr><td colspan="2" class="statText"><h3>Problem Statement</h3></td></tr><tr><td class="statText">    </td><td class="statText">Fox Ciel is playing a game with some chess pawns and a strip of paper.
The strip of paper is divided into a row of cells.
Each cell can contain at most one pawn.<br>
The white pawns will be denoted 'R', because they are only allowed to move to the right.<br>
The black pawns will be denoted 'L', because they are only allowed to move to the left.<br><br><br>
You are given a String <b>begin</b> that describes the current state of the strip: 'R' and 'L' are cells with corresponding pawns, and '.' are empty cells.<br><br><br>
You are now allowed to make some moves (as many as you wish, possibly zero).
In each move you may either take a 'R' pawn and move it one cell to the right, or take a 'L' pawn and move it one cell to the left.
Of course, both types of moves are only valid if the destination cell is currently empty.
Pawns are not allowed to move out of bounds.<br><br><br>
You are also given a String <b>target</b> that represents the desired state of the strip.<br>
If it is possible to reach <b>target</b> from <b>begin</b> by making some valid moves, return "Possible" (quotes for clarity), otherwise return "Impossible".</td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Definition</h3></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText">Class:</td><td class="statText">FoxAndChess</td></tr><tr><td class="statText">Method:</td><td class="statText">ableToMove</td></tr><tr><td class="statText">Parameters:</td><td class="statText">String, String</td></tr><tr><td class="statText">Returns:</td><td class="statText">String</td></tr><tr><td class="statText">Method signature:</td><td class="statText">String ableToMove(String begin, String target)</td></tr><tr><td colspan="2" class="statText">(be sure your method is public)</td></tr></table></td></tr><tr><td class="statText">    </td></tr><tr><td class="statText"></td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Constraints</h3></td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText"><b>begin</b> will contain between 1 and 50 elements, inclusive.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText"><b>begin</b> and <b>target</b> will contain the same number of elements.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">Each character in <b>begin</b> and <b>target</b> will be one of '.', 'L' and 'R'.</td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Examples</h3></td></tr><tr><td align="center" nowrap class="statText">0)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>"R..."</pre></td></tr><tr><td class="statText"><pre>"..R."</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: "Possible"</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">You have to move the only pawn to the right twice.</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">1)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>"..R."</pre></td></tr><tr><td class="statText"><pre>"R..."</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: "Impossible"</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">Here <b>target</b> cannot be reached because the only pawn is only allowed to move to the right.</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">2)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>".L.R.R."</pre></td></tr><tr><td class="statText"><pre>"L...R.R"</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: "Possible"</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText"></td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">3)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>".L.R."</pre></td></tr><tr><td class="statText"><pre>".R.L."</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: "Impossible"</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText"></td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">4)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>"LRLLRLRLLRLLRLRLRL"</pre></td></tr><tr><td class="statText"><pre>"LRLLRLRLLRLLRLRLRL"</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: "Possible"</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText"></td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">5)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>"L"</pre></td></tr><tr><td class="statText"><pre>"."</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: "Impossible"</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText"></td></tr></table></td></tr></table></td></tr></table><hr><p>This problem statement is the exclusive and proprietary property of TopCoder, Inc.  Any unauthorized use or reproduction of this information without the prior written consent of TopCoder, Inc. is strictly prohibited.  (c)2010, TopCoder, Inc.  All rights reserved.  </p>
                      
                   </td>