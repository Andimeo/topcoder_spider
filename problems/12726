<td class="problemText" valign="middle" align="left">
                      
              		<table><tr><td colspan="2" class="statText"><h3>Problem Statement</h3></td></tr><tr><td class="statText">    </td><td class="statText">Treeland has N cities, numbered 0 through N-1.
There are N-1 undirected roads, each connecting a pair of cities.
The roads form a tree.
(I.e., each pair of cities is connected via some sequence of roads.)
<br><br>
You are given a String <b>linked</b> with N elements, each consisting of N characters.
There is a road between city i and city j if and only if <b>linked</b>[i][j] is 'Y'.
In all other cases <b>linked</b>[i][j] is 'N'.
<br><br>
The inhabitants of Treeland want to create the Treeland Positioning System (TPS).
TPS will be a system that will help people determine which city they are in.
The system will consist of K labeled beacons.
Each beacon will be located in one of the cities.
When a person turns on their TPS receiver, it will determine its distance to each of the beacons.
(The distance is measured as the number of roads the person would have to use in order to reach the beacon.)
<br><br>
Obviously, TPS will only be usable if different cities correspond to different readings on the receiver.
In other words, the number K and the placement of beacons must be such that there are no two cities where the receiver will report the same sequence of values.
(Note that the beacons can be distinguished. See Example 1.)
<br><br>
Return the minimal possible value of K.</td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Definition</h3></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText">Class:</td><td class="statText">TPS</td></tr><tr><td class="statText">Method:</td><td class="statText">minimalBeacons</td></tr><tr><td class="statText">Parameters:</td><td class="statText">String[]</td></tr><tr><td class="statText">Returns:</td><td class="statText">int</td></tr><tr><td class="statText">Method signature:</td><td class="statText">int minimalBeacons(String[] linked)</td></tr><tr><td colspan="2" class="statText">(be sure your method is public)</td></tr></table></td></tr><tr><td class="statText">    </td></tr><tr><td class="statText"></td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Constraints</h3></td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">N will be between 1 and 50, inclusive.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText"><b>linked</b> will contain N elements.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">Each element of <b>linked</b> will contain N characters.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">Each character of each element of <b>linked</b> will be either 'Y' or 'N'.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">For each i and j, if <b>linked</b>[i][j] is 'Y' then <b>linked</b>[j][i] is 'Y'.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">For each i, <b>linked</b>[i][i] will be 'N'.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">The graph described by <b>linked</b> will be a tree with N nodes.</td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Examples</h3></td></tr><tr><td align="center" nowrap class="statText">0)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{"NYNN",
 "YNYN",
 "NYNY",
 "NNYN"}</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: 1</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">There are 4 cities and 3 roads: 0-1-2-3.
One possible solution is to put a beacon in city 0. Then city i will have distance i from that beacon, and they are distinguishable.</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">1)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{"NYYY",
 "YNNN",
 "YNNN",
 "YNNN"}</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: 2</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">There are also 4 cities. The road network looks as follows:
<pre>
1 - 0 - 2
    |
    3
</pre>
1 beacon is not enough, for example:
<ul><li>If it is located in city 0, then cities 1,2 and 3 all have distance 1 from that beacon, they are not distinguishable.</li>
<li>If it is located in city 1, then cities 2, 3 all have distance 2 from that beacon, they are not distinguishable.</li>
</ul>
2 beacons are enough. For example, we can place them into cities 1 and 2. Then:
<ul><li>If we are in city 0 the receiver will show the distances 1, 1.</li>
<li>If we are in city 1 the receiver will show the distances 0, 2.</li>
<li>If we are in city 2 the receiver will show the distances 2, 0.</li>
<li>If we are in city 3 the receiver will show the distances 2, 2.</li>
</ul>
In each city the receiver shows a different sequence of distances.
</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">2)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{"NNYNNNNNNN",
 "NNNNNYNNNN",
 "YNNYNNYNNN",
 "NNYNYNNYNN",
 "NNNYNYNNYN",
 "NYNNYNNNNY",
 "NNYNNNNNNN",
 "NNNYNNNNNN",
 "NNNNYNNNNN",
 "NNNNNYNNNN"}
</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: 2</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">The graph looks as follows:
<pre>
0           1
|           |
2 - 3 - 4 - 5
|   |   |   |
6   7   8   9
</pre>
One optimal solution is to put beacons into cities 0 and 1.</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">3)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{"NYNYNNYNN",
 "YNYNYNNYN",
 "NYNNNYNNY",
 "YNNNNNNNN",
 "NYNNNNNNN",
 "NNYNNNNNN",
 "YNNNNNNNN",
 "NYNNNNNNN",
 "NNYNNNNNN"}</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: 3</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">The graph looks as follows:
<pre>
3   4   5
|   |   |
0 - 1 - 2
|   |   |
6   7   8
</pre>
</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">4)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{"NYYYYYYYYY",
 "YNNNNNNNNN",
 "YNNNNNNNNN",
 "YNNNNNNNNN",
 "YNNNNNNNNN",
 "YNNNNNNNNN",
 "YNNNNNNNNN",
 "YNNNNNNNNN",
 "YNNNNNNNNN",
 "YNNNNNNNNN"}
</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: 8</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText"></td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">5)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{"N"}</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: 0</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">We don't need any beacon at all, since there is only 1 city.</td></tr></table></td></tr></table></td></tr></table><hr><p>This problem statement is the exclusive and proprietary property of TopCoder, Inc.  Any unauthorized use or reproduction of this information without the prior written consent of TopCoder, Inc. is strictly prohibited.  (c)2010, TopCoder, Inc.  All rights reserved.  </p>
                      
                   </td>