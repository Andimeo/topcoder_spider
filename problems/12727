<td class="problemText" valign="middle" align="left">
                      
              		<table><tr><td colspan="2" class="statText"><h3>Problem Statement</h3></td></tr><tr><td class="statText">    </td><td class="statText">There is a country with n cities, numbered 0 through n-1.
City 0 is the capital.
The road network in the country forms an undirected connected graph.
In other words:
Some pairs of cities are connected by bidirectional roads.<br>
For every city there is at least one sequence of consecutive roads that leads from the city to the capital.
(Whenever two roads need to cross outside of a city, the crossing is done using a bridge, so there are no intersections outside of the cities.)<br><br><br>
You are given a String[] <b>linked</b> that describes the road network.
For each i and j, <b>linked</b>[i][j] is 'Y' if the cities i and j are already connected by a direct road, and it is 'N' otherwise.<br><br><br>
The distance between two cities is the smallest number of roads one needs to travel to get from one city to the other.
The people living outside of the capital are usually unhappy about their distance from the capital.
You are also given a int[] <b>want</b> with n elements.
For each i, <b>want</b>[i] is the desired distance between city i and the capital (city 0).<br><br><br>
Fox Ciel is in charge of building new roads.
Each new road must again be bidirectional and connect two cities.
Once the new roads are built, the citizens will evaluate how unhappy they are with the resulting road network:<br>
For each i: Let real[i] be the new distance between city i and the capital.
Then the people in city i increase the unhappiness of the country by (<b>want</b>[i] - real[i])^2.
<br><br>
Return the minimal total unhappiness Ciel can achieve by building some (possibly zero) new roads.</td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Definition</h3></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText">Class:</td><td class="statText">FoxAndCity</td></tr><tr><td class="statText">Method:</td><td class="statText">minimalCost</td></tr><tr><td class="statText">Parameters:</td><td class="statText">String[], int[]</td></tr><tr><td class="statText">Returns:</td><td class="statText">int</td></tr><tr><td class="statText">Method signature:</td><td class="statText">int minimalCost(String[] linked, int[] want)</td></tr><tr><td colspan="2" class="statText">(be sure your method is public)</td></tr></table></td></tr><tr><td class="statText">    </td></tr><tr><td class="statText"></td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Constraints</h3></td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">n will be between 2 and 40, inclusive.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText"><b>linked</b> will contain exactly n elements.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">Each element of <b>linked</b> will contain exactly n characters.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">Each character in <b>linked</b> will be 'Y' or 'N'.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">For each i and j, <b>linked</b>[i][j] = <b>linked</b>[j][i].</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">For each i, <b>linked</b>[i][i] = 'N'.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">The graph described by <b>linked</b> will be connected.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText"><b>want</b> will contain exactly n elements.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">Each element in <b>want</b> will be between 0 and n-1, inclusive.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText"><b>want</b>[0] will be 0.</td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Examples</h3></td></tr><tr><td align="center" nowrap class="statText">0)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{"NYN",
 "YNY",
 "NYN"}</pre></td></tr><tr><td class="statText"><pre>{0, 1, 1}</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: 0</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">Ciel can build a road between cities 0 and 2. Then real[1]=1, real[2]=1, and the total unhappiness is 0.</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">1)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{"NYNN",
 "YNYN",
 "NYNY",
 "NNYN"}</pre></td></tr><tr><td class="statText"><pre>{0, 3, 3, 3}</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: 5</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">The optimal solution is not to build any new roads. Then the total unhappiness will be (3-1)^2 + (3-2)^2 + (3-3)^2 = 5.</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">2)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{"NYNNNY",
 "YNYNNN",
 "NYNYNN",
 "NNYNYN",
 "NNNYNY",
 "YNNNYN"}</pre></td></tr><tr><td class="statText"><pre>{0, 2, 2, 2, 2, 2}</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: 2</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">One of the optimal solutions is to build a road between cities 1 and 3.</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">3)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{"NYY","YNN","YNN"}</pre></td></tr><tr><td class="statText"><pre>{0,0,0}</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: 2</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText"></td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">4)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{"NYNNNN",
 "YNYNNN",
 "NYNYYY",
 "NNYNYY",
 "NNYYNY",
 "NNYYYN"}
</pre></td></tr><tr><td class="statText"><pre>{0, 1, 2, 3, 0, 3}</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: 3</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText"></td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">5)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{"NYNNNN",
 "YNYNNN",
 "NYNYYY",
 "NNYNYY",
 "NNYYNY",
 "NNYYYN"}</pre></td></tr><tr><td class="statText"><pre>{0, 1, 2, 4, 0, 4}</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: 6</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText"></td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">6)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{"NYNYYYYYYYY","YNYNNYYNYYY","NYNNNYYNYYN","YNNNYYYYYYY","YNNYNYYYNYY","YYYYYNNYYNY","YYYYYNNNYYY","YNNYYYNNNYY","YYYYNYYNNNY","YYYYYNYYNNY","YYNYYYYYYYN"}</pre></td></tr><tr><td class="statText"><pre>{0,1,2,0,0,5,1,3,0,2,3}</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: 28</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText"></td></tr></table></td></tr></table></td></tr></table><hr><p>This problem statement is the exclusive and proprietary property of TopCoder, Inc.  Any unauthorized use or reproduction of this information without the prior written consent of TopCoder, Inc. is strictly prohibited.  (c)2010, TopCoder, Inc.  All rights reserved.  </p>
                      
                   </td>