<td class="problemText" valign="middle" align="left">
                      
              		<table><tr><td colspan="2" class="statText"><h3>Problem Statement</h3></td></tr><tr><td class="statText">    </td><td class="statText">Let X and Y be two strings of equal length, consisting of uppercase English letters only.
The two strings are called <i>convertible</i> if there is a permutation P of the English alphabet with the following property:
if each character c in the string X is replaced by the character P(c), we obtain the string Y.
(In other words, X and Y are convertible iff the following holds: whenever two letters of X are equal, the corresponding two letters of Y must be equal, and vice versa.)
<br><br>
For example, consider the string "ABCA".
We can choose to replace each 'A' by a 'F', each 'B' by a 'B', and each 'C' by a 'G', obtaining the string "FBGF".
Thus the strings "ABCA" and "FBGF" are convertible.
The strings "ABCA" and "EFGH" are not convertible, because the two 'A's in the first string must correspond to the same letter in the second string.
The strings "ABCA" and "EEEE" are not convertible, because different letters in the first string must correspond to different letters in the second string.
<br><br>
You are given two Strings <b>A</b> and <b>B</b> of the same length.
These strings only contain English letters from 'A' to 'I', inclusive.
(That is, only the first 9 letters of the alphabet are used.)
<br><br>
You want to change <b>A</b> and <b>B</b> into two strings that are convertible.
The only allowed change is to choose some indices (possibly none) and to remove the characters at those indices from each of the strings.
(I.e., the removed characters must be at the same positions in both strings. For example, it is not allowed to only remove character 0 of <b>A</b> and character 3 of <b>B</b>.)
For example, if A="ABAC", B="AHHA" and the chosen indices are 0 and 2, then the resulting strings will be "BC" and "HA".
Our goal is to choose as few indices as possible, given that after the erasing we want to obtain two convertible strings.
Compute and return the smallest possible number of chosen indices.
</td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Definition</h3></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText">Class:</td><td class="statText">ConvertibleStrings</td></tr><tr><td class="statText">Method:</td><td class="statText">leastRemovals</td></tr><tr><td class="statText">Parameters:</td><td class="statText">String, String</td></tr><tr><td class="statText">Returns:</td><td class="statText">int</td></tr><tr><td class="statText">Method signature:</td><td class="statText">int leastRemovals(String A, String B)</td></tr><tr><td colspan="2" class="statText">(be sure your method is public)</td></tr></table></td></tr><tr><td class="statText">    </td></tr><tr><td class="statText"></td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Constraints</h3></td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText"><b>A</b> will contain between 1 and 50 characters, inclusive.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText"><b>A</b> and <b>B</b> will be of the same length.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText"><b>A</b> will contain characters from 'A' to 'I' only.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText"><b>B</b> will contain characters from 'A' to 'I' only.</td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Examples</h3></td></tr><tr><td align="center" nowrap class="statText">0)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>"DD"</pre></td></tr><tr><td class="statText"><pre>"FF"</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: 0</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">The given strings are convertible without any removals. Any mapping with 'D' mapped to 'F' changes <b>A</b> to <b>B</b>.</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">1)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>"AAAA"</pre></td></tr><tr><td class="statText"><pre>"ABCD"</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: 3</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">We can choose any three indices.</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">2)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>"AAIAIA"</pre></td></tr><tr><td class="statText"><pre>"BCDBEE"</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: 3</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">One possible triple of indices is (1, 2, 5) (0-based indices).
</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">3)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>"ABACDCECDCDAAABBFBEHBDFDDHHD"</pre></td></tr><tr><td class="statText"><pre>"GBGCDCECDCHAAIBBFHEBBDFHHHHE"</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: 9</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText"></td></tr></table></td></tr></table></td></tr></table><hr><p>This problem statement is the exclusive and proprietary property of TopCoder, Inc.  Any unauthorized use or reproduction of this information without the prior written consent of TopCoder, Inc. is strictly prohibited.  (c)2010, TopCoder, Inc.  All rights reserved.  </p>
                      
                   </td>