<td class="problemText" valign="middle" align="left">
                      
              		<table><tr><td colspan="2" class="statText"><h3>Problem Statement</h3></td></tr><tr><td class="statText">    </td><td class="statText"><p>Little Petya likes computer games a lot. Recently he has received one as a gift from his mother. He has reached the final level of this game which can be represented as a rectangular grid described by String[] <b>grid</b>. Every cell of this grid is described by one of the following characters:</p>
<ul><li>'#' - represents a cell that contains a wall.</li>
<li>'.'(period) - represents an empty cell.</li>
<li>'1'..'9', 'a'..'z', 'A'..'Z' - represent a cell that contains a charging station with a given power. Digits '1'..'9' represent numbers from 1 to 9, characters 'a'..'z' represent numbers from 10 to 35, characters 'A'..'Z' represent numbers from 36 to 61.</li>
<li>'*' - represents the starting cell.</li>
<li>'$' - represents the target cell.</li>
</ul><p>There is exactly one starting cell and exactly one target cell. Both of these cells are empty.</p>
<p>Petya's character is initially located in the starting cell. Every second he can either perform a move or stay in the same cell. If he decides to make a move, he chooses one of the four directions (up, right, down, left) and a positive integer <i>k</i>. After that the character jumps by <i>k</i> cells in the chosen direction. Note that he can't jump over the walls and the destination cell must not contain a wall as well. This action costs <i>k^2</i> units of energy. For each second Petya's character spends on a cell with a charging station without movement, his energy increases by the power of this charging station.</p>
<p>You are also given ints <b>E</b> and <b>T</b>. At the beginning Petya's character has <b>E</b> units of energy. If the level of energy becomes strictly less than 0 the character dies. Petya's goal is to reach the target cell in not more than <b>T</b> seconds. Return the maximal amount of energy Petya can have at the end, or -1 if he can't reach the destination within <b>T</b> seconds while keeping his character alive. Note that the game ends after exactly <b>T</b> seconds from the beginning, not when the character steps on the target cell. </p></td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Definition</h3></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText">Class:</td><td class="statText">JumpingOnTheGrid</td></tr><tr><td class="statText">Method:</td><td class="statText">maxEnergy</td></tr><tr><td class="statText">Parameters:</td><td class="statText">String[], int, int</td></tr><tr><td class="statText">Returns:</td><td class="statText">long</td></tr><tr><td class="statText">Method signature:</td><td class="statText">long maxEnergy(String[] grid, int E, int T)</td></tr><tr><td colspan="2" class="statText">(be sure your method is public)</td></tr></table></td></tr><tr><td class="statText">    </td></tr><tr><td class="statText"></td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Constraints</h3></td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText"><b>grid</b> will contain between 1 and 25 elements, inclusive.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">All elements of <b>grid</b> will contain the same number of characters.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">Each element of <b>grid</b> will contain between 1 and 25 characters, inclusive.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText"><b>grid</b> will contain only characters '.', '#', '*', '$', '1'..'9', 'a'..'z', 'A'..'Z'.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">There will be exactly one character '*' and exactly one character '$' in the grid.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText"><b>T</b> will be between 1 and 1 000 000 000, inclusive.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText"><b>E</b> will be between 1 and 1 000 000 000, inclusive.</td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Examples</h3></td></tr><tr><td align="center" nowrap class="statText">0)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{"*$.", 
 "#1.", 
 "..."}</pre></td></tr><tr><td class="statText"><pre>1</pre></td></tr><tr><td class="statText"><pre>1</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: 0</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">Petya moves his character directly to the target cell. Note that with power 0 the character is still alive.</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">1)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{"*$.", 
 "#.1", 
 "..."}</pre></td></tr><tr><td class="statText"><pre>1</pre></td></tr><tr><td class="statText"><pre>1000000000</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: 0</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">Even though <b>T</b> is large now, after the first step Petya has no more power, so he cannot reach the charging station.</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">2)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{"*$.",
 "#2.",
 "..."}</pre></td></tr><tr><td class="statText"><pre>2</pre></td></tr><tr><td class="statText"><pre>10</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: 13</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">The optimal strategy is to move one step to the right, then one step down, then to wait for 7 seconds on the charging station, and finally to move one step up.</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">3)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{"*$.",
 "#aA",
 "..."}</pre></td></tr><tr><td class="statText"><pre>2</pre></td></tr><tr><td class="statText"><pre>10</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: 151</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText"></td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">4)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{"*..Z",
 "##..",
 "#...",
 "...$"}</pre></td></tr><tr><td class="statText"><pre>8</pre></td></tr><tr><td class="statText"><pre>4</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: 55</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">One of the possible optimal strategies is to jump by 2 cells to the right, then jump 1 more cell to the right to reach the charging station. After that we can wait for 1 second there and then jump by 3 cells directly to the target cell.</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">5)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{"#*#..",
 "####.",
 "ZZZZZ",
 "...$."}</pre></td></tr><tr><td class="statText"><pre>1000000000</pre></td></tr><tr><td class="statText"><pre>1000000000</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: -1</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText"></td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">6)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{"#*#..",
 "#.##.",
 "ZZZZZ",
 "...$."}</pre></td></tr><tr><td class="statText"><pre>4</pre></td></tr><tr><td class="statText"><pre>1000000000</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: 60999999812</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText"></td></tr></table></td></tr></table></td></tr></table><hr><p>This problem statement is the exclusive and proprietary property of TopCoder, Inc.  Any unauthorized use or reproduction of this information without the prior written consent of TopCoder, Inc. is strictly prohibited.  (c)2010, TopCoder, Inc.  All rights reserved.  </p>
                      
                   </td>