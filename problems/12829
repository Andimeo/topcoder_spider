<td class="problemText" valign="middle" align="left">
                      
              		<table><tr><td colspan="2" class="statText"><h3>Problem Statement</h3></td></tr><tr><td class="statText">    </td><td class="statText">There is a directional corridor for Foxes. Every day some foxes pass through the corridor. There are n+2 positions in the corridor, and the positions are numbered 0 through n+1. It is known that foxes pass through the corridor in the following way:
<ul><li>Each fox enters the corridor at position 0.</li>
<li>After some fox steps at position i, he will step at either position i+1 or position i+2 next.</li>
<li>Each fox leaves the corridor at position n+1.</li>
</ul><br>
Fox Ciel got interested in the number of foxes that pass through the corridor. She got n counters and placed them on positions 1 through n.
Initially, each of those counters was set to zero.
Each time a fox steps on a position, the particular counter is incremented.
Unfortunately, the counters can only store integers from 0 to <b>M</b>-1 and therefore they are counting modulo <b>M</b>.
In other words, after <b>M</b> foxes step on a particular position, the corresponding counter will show zero again.
<br><br>
You are given a long <b>M</b> and a long[] <b>counter</b>. The i-th (0-based) element of <b>counter</b> is the value the counter at position i+1 shows at the moment. Return the minimal possible number of foxes that passed through the corridor since Ciel installed the sensors.
</td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Definition</h3></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText">Class:</td><td class="statText">ModuloCounters</td></tr><tr><td class="statText">Method:</td><td class="statText">minFoxes</td></tr><tr><td class="statText">Parameters:</td><td class="statText">long, long[]</td></tr><tr><td class="statText">Returns:</td><td class="statText">long</td></tr><tr><td class="statText">Method signature:</td><td class="statText">long minFoxes(long M, long[] counter)</td></tr><tr><td colspan="2" class="statText">(be sure your method is public)</td></tr></table></td></tr><tr><td class="statText">    </td></tr><tr><td class="statText"></td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Notes</h3></td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">The answer will always fit into a signed 64bit integer.</td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Constraints</h3></td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText"><b>M</b> will be between 2 and 10^12, inclusive.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText"><b>counter</b> will contain between 1 and 50 elements, inclusive.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">Each element of <b>counter</b> will be between 0 and M-1, inclusive.</td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Examples</h3></td></tr><tr><td align="center" nowrap class="statText">0)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>10</pre></td></tr><tr><td class="statText"><pre>{0, 0, 1}</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: 10</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">There could have been 10 foxes. Out of those, nine stepped on positions 0, 2, 4, and one stepped on positions 0, 2, 3, 4. Note that all 10 foxes stepped on position 2, which is consistent with the counter showing 0. There is no way to reach the given state of counters with fewer than 10 foxes.</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">1)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>1000000000000</pre></td></tr><tr><td class="statText"><pre>{2013, 2013, 2013, 2013, 2013}</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: 2013</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">There could have been 2013 foxes. All foxes stepped at all positions.</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">2)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>10</pre></td></tr><tr><td class="statText"><pre>{0, 0, 0}</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: 0</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">There can be no foxes.</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">3)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>4</pre></td></tr><tr><td class="statText"><pre>{2, 0, 1, 3}</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: 4</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText"></td></tr></table></td></tr></table></td></tr></table><hr><p>This problem statement is the exclusive and proprietary property of TopCoder, Inc.  Any unauthorized use or reproduction of this information without the prior written consent of TopCoder, Inc. is strictly prohibited.  (c)2010, TopCoder, Inc.  All rights reserved.  </p>
                      
                   </td>