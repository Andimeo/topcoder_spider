<td class="problemText" valign="middle" align="left">
                      
              		<table><tr><td colspan="2" class="statText"><h3>Problem Statement</h3></td></tr><tr><td class="statText">    </td><td class="statText">Fox Ciel's room is divided into N times M unit cells. Each cell is either empty or a wall. The cells are numbered (0, 0) through (N-1, M-1).
<br><br>
You are given a String[] <b>grid</b> that describes Ciel's room. If the j-th character of the i-th element of <b>grid</b> is '#', cell (i, j) is a wall. Similarly, character '-' denotes an empty cell.
<br><br>
There is an entrance in the cell (0, 0) and an exit in the cell (N-1, M-1). From any cell (i, j) Ciel has at most two options how to move: she can move to the cell (i+1, j) or to the cell (i, j+1).
Of course, she cannot step outside the room and she cannot step into a cell that contains a wall.
<br><br>
Cat Snuke wants to color each empty cell black or white. Additionally, the coloring must have the following property: Each of Ciel's valid paths from (0, 0) to (N-1, M-1) must contain exactly one black cell. Return the number of ways to color the cells, modulo 1,000,000,007.
</td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Definition</h3></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText">Class:</td><td class="statText">OneBlack</td></tr><tr><td class="statText">Method:</td><td class="statText">countColorings</td></tr><tr><td class="statText">Parameters:</td><td class="statText">String[]</td></tr><tr><td class="statText">Returns:</td><td class="statText">int</td></tr><tr><td class="statText">Method signature:</td><td class="statText">int countColorings(String[] grid)</td></tr><tr><td colspan="2" class="statText">(be sure your method is public)</td></tr></table></td></tr><tr><td class="statText">    </td></tr><tr><td class="statText"></td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Constraints</h3></td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText"><b>grid</b> will contain between 2 and 30 elements, inclusive.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">Each element of <b>grid</b> will contain between 2 and 30 characters, inclusive.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">Each element of <b>grid</b> will contain the same number of characters.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">Each character in <b>grid</b> will be either '#' or '-'.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">The first character of the first element of <b>grid</b> and the last character of the last element of <b>grid</b> will be '-'.</td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Examples</h3></td></tr><tr><td align="center" nowrap class="statText">0)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{"---",
 "---",
 "---"}</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: 5</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">There are six valid paths Ciel may take:
<ul><li>(0, 0) -&gt; (0, 1) -&gt; (0, 2) -&gt; (1, 2) -&gt; (2, 2)</li>
<li>(0, 0) -&gt; (0, 1) -&gt; (1, 1) -&gt; (1, 2) -&gt; (2, 2)</li>
<li>(0, 0) -&gt; (0, 1) -&gt; (1, 1) -&gt; (2, 1) -&gt; (2, 2)</li>
<li>(0, 0) -&gt; (1, 0) -&gt; (1, 1) -&gt; (1, 2) -&gt; (2, 2)</li>
<li>(0, 0) -&gt; (1, 0) -&gt; (1, 1) -&gt; (2, 1) -&gt; (2, 2)</li>
<li>(0, 0) -&gt; (1, 0) -&gt; (2, 0) -&gt; (2, 1) -&gt; (2, 2)</li>
</ul>
Each of these paths must contain exactly one black cell. There are five ways to do so:
<ul><li>Color (0, 0) black.</li>
<li>Color (0, 1) and (1, 0) black.</li>
<li>Color (0, 2), (1, 1), and (2, 0) black.</li>
<li>Color (1, 2) and (2, 1) black.</li>
<li>Color (2, 2) black.</li>
</ul></td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">1)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{"--#",
 "##-",
 "---"}</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: 64</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">There is no path, so all 2^6 colorings satisfy the condition.</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">2)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{"----",
 "-##-",
 "----"}
</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: 18</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText"><ul><li>Color (0, 0) black.</li>
<li>Color (2, 3) black.</li>
<li>Color one of {(0, 1), (0, 2), (0, 3), (1, 3)} black, and color one of {(1, 0), (2, 0), (2, 1), (2, 2)} black.</li>
</ul>
The total number of valid colorings is 1 + 1 + 4 * 4 = 18.
</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">3)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{"------##",
 "-##--#--",
 "---#----",
 "-----##-",
 "#-------"}</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: 432</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText"></td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">4)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{"------------------------------",
 "------------------------------",
 "------------------------------",
 "--#####------###-------###----",
 "----#-------#---#-----#---#---",
 "----#-------#---------#---#---",
 "----#-------#---------#---#---",
 "----#-------#---#-----#---#---",
 "----#--------###-------###----",
 "------------------------------",
 "------------------------------",
 "------#####--------#####------",
 "----------#--------#---#------",
 "----------#--------#---#------",
 "------#####--------#---#------",
 "------#------------#---#------",
 "------#------------#---#------",
 "------#####--------#####------",
 "------------------------------",
 "------------------------------",
 "--------#----------#####------",
 "--------#--------------#------",
 "--------#--------------#------",
 "--------#----------#####------",
 "--------#--------------#------",
 "--------#--------------#------",
 "--------#----------#####------",
 "------------------------------",
 "------------------------------",
 "------------------------------"}</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: 903122246</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText"></td></tr></table></td></tr></table></td></tr></table><hr><p>This problem statement is the exclusive and proprietary property of TopCoder, Inc.  Any unauthorized use or reproduction of this information without the prior written consent of TopCoder, Inc. is strictly prohibited.  (c)2010, TopCoder, Inc.  All rights reserved.  </p>
                      
                   </td>