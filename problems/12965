<td class="problemText" valign="middle" align="left">
                      
              		<table><tr><td colspan="2" class="statText"><h3>Problem Statement</h3></td></tr><tr><td class="statText">    </td><td class="statText">Andrew has an interesting contraption.
There are two nails and n pulleys on his table.
The nails are points with coordinates (0, 0) and ((<b>n</b>+1)*<b>d</b>, 0).
Each pulley is a circle with radius <b>r</b>.
The centers of the pulleys are at the points (<b>d</b>, 0), (2*<b>d</b>, 0), ..., and (<b>n</b>*<b>d</b>, 0).  
The constraints guarantee that no two pulleys overlap.
<br><br>
Andrew wants to connect the two nails using a piece of rope.
His only condition is that the rope must be perfectly taut.
In other words, there must be no slack anywhere on the rope.
(Assume that the width of the rope is negligible and that the length of the rope is not limited.)
<br><br>
Of course, the rope cannot go directly from one nail to the other, because the pulleys are in the way.
The rope has to go around them somehow: touching some of them, or even wrapping around them.
The rope is even allowed to touch the same point on a pulley arbitrarily many times.
<br><br>
Given these constraints it's easy to see that there are infinitely many ways how to stretch the rope between the two nails.
Note that two ways are considered different if the rope follows a different curve, even if the length of the rope is exactly the same in both ways.
<br><br>
Andrew ordered all possible ways according to the length of the rope used.
(The order starts with the shortest ways, and ties are broken arbitrarily.)
You are given the ints <b>d</b>, <b>r</b>, <b>n</b> (as described above), and a long <b>k</b>.
Return the length of the rope used in the <b>k</b>-th (1-based index) way in his ordered list.</td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Definition</h3></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText">Class:</td><td class="statText">PulleyTautLine</td></tr><tr><td class="statText">Method:</td><td class="statText">getLength</td></tr><tr><td class="statText">Parameters:</td><td class="statText">int, int, int, long</td></tr><tr><td class="statText">Returns:</td><td class="statText">double</td></tr><tr><td class="statText">Method signature:</td><td class="statText">double getLength(int d, int r, int n, long k)</td></tr><tr><td colspan="2" class="statText">(be sure your method is public)</td></tr></table></td></tr><tr><td class="statText">    </td></tr><tr><td class="statText"></td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Notes</h3></td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">Your return value must have an absolute or a relative error of less than 1e-9.</td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Constraints</h3></td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText"><b>r</b> will be between 1 and 499,999,999, inclusive.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText"><b>d</b> will be between 2*<b>r</b>+1 and 1,000,000,000, inclusive.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText"><b>n</b> will be between 1 and 50, inclusive.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText"><b>k</b> will be between 1 and 1,000,000,000,000,000,000 (10^18), inclusive.</td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Examples</h3></td></tr><tr><td align="center" nowrap class="statText">0)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>100</pre></td></tr><tr><td class="statText"><pre>30</pre></td></tr><tr><td class="statText"><pre>1</pre></td></tr><tr><td class="statText"><pre>1</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: 209.06939952431298</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">Here we are looking for the shortest possible solution. There are two ways to achieve it: start at the left nail, pull the rope above or below the pulley and directly proceed to the right nail.
</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">1)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>100</pre></td></tr><tr><td class="statText"><pre>30</pre></td></tr><tr><td class="statText"><pre>1</pre></td></tr><tr><td class="statText"><pre>2</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: 209.06939952431298</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">As there are two ways to achieve the shortest possible solution, the answer here is the same as in previous example.
</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">2)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>1000000000</pre></td></tr><tr><td class="statText"><pre>499999999</pre></td></tr><tr><td class="statText"><pre>1</pre></td></tr><tr><td class="statText"><pre>1000000000000000000</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: 1.570796323653304E27</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">One of the solutions with such length is: start at the left nail, pull the rope above the pulley, wrap it 499,999,999,999,999,999 times around the pulley and finish at the right nail.
</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">3)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>100</pre></td></tr><tr><td class="statText"><pre>30</pre></td></tr><tr><td class="statText"><pre>2</pre></td></tr><tr><td class="statText"><pre>3</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: 327.67946605191</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">One solution with such length is shown on the picture below.<br><br><img src="http://www.topcoder.com/contest/problem/PulleyTautLine/ex3.gif"></td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">4)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>100</pre></td></tr><tr><td class="statText"><pre>30</pre></td></tr><tr><td class="statText"><pre>2</pre></td></tr><tr><td class="statText"><pre>35</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: 734.7850917948947</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">One solution with such length starts as on the left picture and ends as on the right picture.<br><br><img src="http://www.topcoder.com/contest/problem/PulleyTautLine/ex4_11.gif">   <img src="http://www.topcoder.com/contest/problem/PulleyTautLine/ex4_2.gif"></td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">5)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>987564321</pre></td></tr><tr><td class="statText"><pre>123</pre></td></tr><tr><td class="statText"><pre>3</pre></td></tr><tr><td class="statText"><pre>123456789987654321</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: 4.299887159886938E9</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText"></td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">6)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>1000000000</pre></td></tr><tr><td class="statText"><pre>499999999</pre></td></tr><tr><td class="statText"><pre>50</pre></td></tr><tr><td class="statText"><pre>1000000000000000000</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: 6.981316870248074E10</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText"></td></tr></table></td></tr></table></td></tr></table><hr><p>This problem statement is the exclusive and proprietary property of TopCoder, Inc.  Any unauthorized use or reproduction of this information without the prior written consent of TopCoder, Inc. is strictly prohibited.  (c)2010, TopCoder, Inc.  All rights reserved.  </p>
                      
                   </td>