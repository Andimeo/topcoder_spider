<td class="problemText" valign="middle" align="left">
                      
              		<table><tr><td colspan="2" class="statText"><h3>Problem Statement</h3></td></tr><tr><td class="statText">    </td><td class="statText">Elly has a String <b>S</b> of uppercase letters and a magic device that can modify the string. The strength of the device is an int <b>L</b>.<br><br>

The device is used in the following way. The user enters a 0-based index i such that 0 &lt;= i &lt;= length(<b>S</b>)-<b>L</b>. The device then performs the following changes:
<ul><li>It leaves the first i characters (i.e., characters with indices 0 through i-1) untouched.</li>
<li>It rearranges the next <b>L</b> characters (i.e., characters with indices i through i+<b>L</b>-1) into alphabetical order.</li>
<li>It erases all the remaining characters (i.e., characters with indices i+<b>L</b> and more). Note that for i=length(S)-<b>L</b> no characters are erased.</li>
</ul>
The girl can use this "sorting trimmer" as many times as she likes. After each use she is left with the new version of the string.<br><br>

In the examples below we use brackets to highlight the region that shall be sorted. For example, "ABRA[CADAB]RA" means that <b>L</b>=5 and Elly chose i=4. The device keeps the letters in front of the brackets, sorts the letters in the brackets, and throws away the rest.

Here is one way how Elly could have used a device with <b>L</b> = 5, starting with the string <b>S</b> = "ABRACADABRA":
<ol><li>"ABRAC[ADABR]A" -&gt; "ABRACAABDR"</li>
<li>"ABR[ACAAB]DR" -&gt; "ABRAAABC"</li>
<li>"A[BRAAA]BC" -&gt; "AAAABR"</li>
</ol>

You are given the String <b>S</b> and the int <b>L</b>. Return the lexicographically smallest string Elly can obtain.</td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Definition</h3></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText">Class:</td><td class="statText">EllysSortingTrimmer</td></tr><tr><td class="statText">Method:</td><td class="statText">getMin</td></tr><tr><td class="statText">Parameters:</td><td class="statText">String, int</td></tr><tr><td class="statText">Returns:</td><td class="statText">String</td></tr><tr><td class="statText">Method signature:</td><td class="statText">String getMin(String S, int L)</td></tr><tr><td colspan="2" class="statText">(be sure your method is public)</td></tr></table></td></tr><tr><td class="statText">    </td></tr><tr><td class="statText"></td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Notes</h3></td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">A string A is lexicographically smaller than string B if A contains a smaller character in the first position where they differ. In case one of the strings ends before they have a different character, the shorter one is considered smaller.</td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Constraints</h3></td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText"><b>S</b> will contain between 2 and 50 characters, inclusive.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText"><b>L</b> will be between 2 and |<b>S</b>|, inclusive, where |<b>S</b>| denotes the number of characters in <b>S</b>.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText"><b>S</b> will consist of uppercase characters of the English alphabet, only ('A'-'Z').</td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Examples</h3></td></tr><tr><td align="center" nowrap class="statText">0)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>"ABRACADABRA"</pre></td></tr><tr><td class="statText"><pre>5</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: "AAAAA"</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">Please note that the example in the problem statement does not obtain the lexicographically smallest string. In fact, it is optimal to start by using the device on the last five characters of the string, transforming it from ABRACA[DABRA] to ABRACAAABDR.</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">1)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>"ESPRIT"</pre></td></tr><tr><td class="statText"><pre>3</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: "EIP"</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">We can obtain the answer in the following steps:
<ol><li>ES[PRI]T -&gt; ESIPR</li>
<li>E[SIP]R -&gt; EIPS</li>
<li>[EIP]S -&gt; EIP</li>
</ol></td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">2)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>"BAZINGA"</pre></td></tr><tr><td class="statText"><pre>7</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: "AABGINZ"</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">We can use the sorting trimmer on the entire word.</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">3)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>"ABCDEFGHIJKLMNOPQRSTUVWXYZ"</pre></td></tr><tr><td class="statText"><pre>13</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: "ABCDEFGHIJKLM"</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">Even though the string is already sorted, shorter strings are considered lexicographically smaller, so we can use the device once to make the string as short as possible.</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">4)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>"GOODLUCKANDHAVEFUN"</pre></td></tr><tr><td class="statText"><pre>10</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: "AACDDEFGHK"</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText"></td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">5)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>"AAAWDIUAOIWDESBEAIWODJAWDBPOAWDUISAWDOOPAWD"</pre></td></tr><tr><td class="statText"><pre>21</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: "AAAAAAAAABBDDDDDDDEEI"</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText"></td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">6)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>"TOPCODER"</pre></td></tr><tr><td class="statText"><pre>3</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: "CDT"</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText"></td></tr></table></td></tr></table></td></tr></table><hr><p>This problem statement is the exclusive and proprietary property of TopCoder, Inc.  Any unauthorized use or reproduction of this information without the prior written consent of TopCoder, Inc. is strictly prohibited.  (c)2010, TopCoder, Inc.  All rights reserved.  </p>
                      
                   </td>