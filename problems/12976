<td class="problemText" valign="middle" align="left">
                      
              		<table><tr><td colspan="2" class="statText"><h3>Problem Statement</h3></td></tr><tr><td class="statText">    </td><td class="statText"><p>There are N points in the plane. You are given their description as two int[]s, <b>x</b> and <b>y</b>, with N elements each. The N points have coordinates (<b>x</b>[0],<b>y</b>[0]), (<b>x</b>[1],<b>y</b>[1]), ..., (<b>x</b>[N-1],<b>y</b>[N-1]).</p>
<br><p>You want to draw a single square onto the plane. The vertices of the square must have integer coordinates, and the sides of the square must be parallel to the coordinate axes. There is one additional constraint: at least <b>K</b> of the N given points must lie strictly inside the square (i.e., not on its boundary).</p>
<br><p>You are given <b>x</b>, <b>y</b>, and the int <b>K</b>. Return the smallest possible area of a square that satisfies the constraints above.</p></td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Definition</h3></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText">Class:</td><td class="statText">MinimumSquare</td></tr><tr><td class="statText">Method:</td><td class="statText">minArea</td></tr><tr><td class="statText">Parameters:</td><td class="statText">int[], int[], int</td></tr><tr><td class="statText">Returns:</td><td class="statText">long</td></tr><tr><td class="statText">Method signature:</td><td class="statText">long minArea(int[] x, int[] y, int K)</td></tr><tr><td colspan="2" class="statText">(be sure your method is public)</td></tr></table></td></tr><tr><td class="statText">    </td></tr><tr><td class="statText"></td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Constraints</h3></td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText"><b>x</b> will contain between 2 and 100 elements, inclusive.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText"><b>y</b> will contain the same number of elements as <b>x</b>.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText"><b>K</b> will be between 1 and the number of elements in <b>x</b>, inclusive.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">All points will be pairwise distinct.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">Each element of <b>x</b> will be between -1,000,000,000 and 1,000,000,000, inclusive.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">Each element of <b>y</b> will be between -1,000,000,000 and 1,000,000,000, inclusive.</td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Examples</h3></td></tr><tr><td align="center" nowrap class="statText">0)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{0, 3}</pre></td></tr><tr><td class="statText"><pre>{0, 7}</pre></td></tr><tr><td class="statText"><pre>2</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: 81</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">The square we seek must contain both given points. One optimal solution is the square with opposite corners at (-1,-1) and (8,8).</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">1)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{-4, 3, 1}</pre></td></tr><tr><td class="statText"><pre>{3 , -1, -2}</pre></td></tr><tr><td class="statText"><pre>2</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: 16</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText"></td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">2)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{0, 0, 1, 1, 2, 2}</pre></td></tr><tr><td class="statText"><pre>{0, 1, 0, 1, 0, 1}</pre></td></tr><tr><td class="statText"><pre>4</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: 9</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText"></td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">3)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{1000000000, 1000000000, 1000000000, -1000000000, -1000000000, -1000000000}</pre></td></tr><tr><td class="statText"><pre>{1000000000, 0, -1000000000, 1000000000, 0, -1000000000}</pre></td></tr><tr><td class="statText"><pre>3</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: 4000000008000000004</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">In this case one of the optimal solutions is a square that contains all six points.</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">4)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{-47881, 28623, 1769, -38328, -16737, 16653, -23181, 37360, 41429, 26282, 254, 728, 8299, -41080, -29498, 17488, -23937, -11, 33319, 25232}</pre></td></tr><tr><td class="statText"><pre>{-46462, 48985, -43820, -19587, -33593, -28337, 13667, -48131, -5568, -2332, -41918, -31370, -3695, 42599, -37788, -40096, 39049, 25045, -2122, 3874}</pre></td></tr><tr><td class="statText"><pre>8</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: 1695545329</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText"></td></tr></table></td></tr></table></td></tr></table><hr><p>This problem statement is the exclusive and proprietary property of TopCoder, Inc.  Any unauthorized use or reproduction of this information without the prior written consent of TopCoder, Inc. is strictly prohibited.  (c)2010, TopCoder, Inc.  All rights reserved.  </p>
                      
                   </td>