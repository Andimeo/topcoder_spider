<td class="problemText" valign="middle" align="left">
                      
              		<table><tr><td colspan="2" class="statText"><h3>Problem Statement</h3></td></tr><tr><td class="statText">    </td><td class="statText">Magical Girl Illy uses "magical strings" to cast spells.
For her, a string X is magical if and only if there exists a non-negative integer k such that X is composed of k consecutive '&gt;' characters followed by k consecutive '&lt;' characters.
Note that the empty string is also magical (for k=0).
<br>
Once Illy picked up a String <b>S</b>.
Each character of <b>S</b> was either '&lt;' or '&gt;'.
Illy can change <b>S</b> by removing some of its characters.
(The characters she does not remove will remain in their original order.)
Illy wants to change <b>S</b> into a magical string by removing as few of its characters as possible.
<br>
You are given the String <b>S</b>.
Compute and return the length of the magical string Illy will obtain from <b>S</b>.</td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Definition</h3></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText">Class:</td><td class="statText">MagicalStringDiv1</td></tr><tr><td class="statText">Method:</td><td class="statText">getLongest</td></tr><tr><td class="statText">Parameters:</td><td class="statText">String</td></tr><tr><td class="statText">Returns:</td><td class="statText">int</td></tr><tr><td class="statText">Method signature:</td><td class="statText">int getLongest(String S)</td></tr><tr><td colspan="2" class="statText">(be sure your method is public)</td></tr></table></td></tr><tr><td class="statText">    </td></tr><tr><td class="statText"></td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Constraints</h3></td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText"><b>S</b> will contain between 1 and 50 characters, inclusive.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">Each character of <b>S</b> will be '&lt;' or '&gt;'.</td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Examples</h3></td></tr><tr><td align="center" nowrap class="statText">0)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>"&lt;&gt;&lt;&gt;&lt;&lt;&gt;"</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: 4</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">The longest magical string Illy can produce is "&gt;&gt;&lt;&lt;".
Its length is 4.
To change <b>S</b> into "&gt;&gt;&lt;&lt;", Illy must remove the characters at 0-based indices 0, 2, and 6.</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">1)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>"&gt;&gt;&gt;&lt;&lt;&lt;"</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: 6</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText"><b>S</b> is already a magical string. Therefore Illy doesn't have to remove any character.
</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">2)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>"&lt;&lt;&lt;&gt;&gt;&gt;"</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: 0</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">Illy has to remove all characters of S.</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">3)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>"&lt;&lt;&lt;&lt;&gt;&lt;&gt;&gt;&gt;&lt;&gt;&gt;&gt;&lt;&gt;&gt;&lt;&gt;&gt;&lt;&gt;&gt;&gt;&lt;&lt;&lt;&lt;&gt;&gt;&lt;&gt;&gt;&gt;&gt;&gt;&lt;&lt;&gt;&gt;&gt;&gt;&gt;&lt;&gt;&lt;&lt;&lt;&lt;&gt;&gt;"</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: 24</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText"></td></tr></table></td></tr></table></td></tr></table><hr><p>This problem statement is the exclusive and proprietary property of TopCoder, Inc.  Any unauthorized use or reproduction of this information without the prior written consent of TopCoder, Inc. is strictly prohibited.  (c)2010, TopCoder, Inc.  All rights reserved.  </p>
                      
                   </td>