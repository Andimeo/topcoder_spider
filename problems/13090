<td class="problemText" valign="middle" align="left">
                      
              		<table><tr><td colspan="2" class="statText"><h3>Problem Statement</h3></td></tr><tr><td class="statText">    </td><td class="statText">There is a country with <b>N</b> cities. The cities are numbered 0 through <b>N</b>-1. There are some bidirectional roads in the country. Each road connects a pair of cities. More precisely, for each i, road i connects the cities <b>A</b>[i] and <b>B</b>[i].
<br><br>
Limit is a deer that likes to travel along the roads. Traveling along road i (in either direction) takes him exactly <b>D</b>[i] minutes. Limit does not like cities, so he never waits in a city.
<br><br>
Limit is currently in the city 0, starting his travels. In exactly <b>T</b> minutes, he wants to be in the city <b>N</b>-1.
<br><br>
You are given the int <b>N</b>; the int[]s <b>A</b>, <b>B</b>, and <b>D</b>; and the long <b>T</b>.
Return "Possible" (quotes for clarity) if Deer Limit can reach city <b>N</b>-1 in exactly <b>T</b> minutes.
Otherwise, return "Impossible".</td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Definition</h3></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText">Class:</td><td class="statText">LongLongTripDiv1</td></tr><tr><td class="statText">Method:</td><td class="statText">isAble</td></tr><tr><td class="statText">Parameters:</td><td class="statText">int, int[], int[], int[], long</td></tr><tr><td class="statText">Returns:</td><td class="statText">String</td></tr><tr><td class="statText">Method signature:</td><td class="statText">String isAble(int N, int[] A, int[] B, int[] D, long T)</td></tr><tr><td colspan="2" class="statText">(be sure your method is public)</td></tr></table></td></tr><tr><td class="statText">    </td></tr><tr><td class="statText"></td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Constraints</h3></td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText"><b>N</b> will be between 2 and 50, inclusive.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText"><b>A</b> will contain between 1 and 50 elements, inclusive.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText"><b>A</b>, <b>B</b> and <b>D</b> will each contain the same number of elements.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">Each element in <b>A</b> and <b>B</b> will be between 0 and <b>N</b>-1, inclusive.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">Each element in <b>D</b> will be between 1 and 10,000, inclusive.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">For each valid i, <b>A</b>[i] and <b>B</b>[i] will be different.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">No two roads will connect the same pair of cities.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText"><b>T</b> will be between 1 and 10^18, inclusive.</td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Examples</h3></td></tr><tr><td align="center" nowrap class="statText">0)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>3</pre></td></tr><tr><td class="statText"><pre>{0,0,1}</pre></td></tr><tr><td class="statText"><pre>{2,1,2}</pre></td></tr><tr><td class="statText"><pre>{7,6,5}</pre></td></tr><tr><td class="statText"><pre>11</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: "Possible"</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">city 0 -&gt; city 1 -&gt; city 2 is a valid way.</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">1)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>3</pre></td></tr><tr><td class="statText"><pre>{0,0,1}</pre></td></tr><tr><td class="statText"><pre>{2,1,2}</pre></td></tr><tr><td class="statText"><pre>{7,6,5}</pre></td></tr><tr><td class="statText"><pre>25</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: "Possible"</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">city 0 -&gt; city 2 -&gt; city 1 -&gt; city 0 -&gt; city 2 is a valid way.</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">2)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>2</pre></td></tr><tr><td class="statText"><pre>{0}</pre></td></tr><tr><td class="statText"><pre>{1}</pre></td></tr><tr><td class="statText"><pre>{1}</pre></td></tr><tr><td class="statText"><pre>9</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: "Possible"</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">Here, Limit just travels back and forth between cities 0 and 1 along the only road in the country.</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">3)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>2</pre></td></tr><tr><td class="statText"><pre>{1}</pre></td></tr><tr><td class="statText"><pre>{0}</pre></td></tr><tr><td class="statText"><pre>{1}</pre></td></tr><tr><td class="statText"><pre>1000000000000000000</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: "Impossible"</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText"></td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">4)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>4</pre></td></tr><tr><td class="statText"><pre>{0,0,1}</pre></td></tr><tr><td class="statText"><pre>{2,1,2}</pre></td></tr><tr><td class="statText"><pre>{10,10,10}</pre></td></tr><tr><td class="statText"><pre>1000</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: "Impossible"</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">In this test case, there is absolutely no way how to reach city <b>N</b>-1 from city 0.</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">5)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>9</pre></td></tr><tr><td class="statText"><pre>{4,8,5,8,3,6,2,6,7,6,6}</pre></td></tr><tr><td class="statText"><pre>{2,7,1,5,1,3,1,1,5,4,2}</pre></td></tr><tr><td class="statText"><pre>{6580,8822,1968,673,1394,9337,5486,1746,5229,4092,195}</pre></td></tr><tr><td class="statText"><pre>937186357646035002</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: "Impossible"</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText"></td></tr></table></td></tr></table></td></tr></table><hr><p>This problem statement is the exclusive and proprietary property of TopCoder, Inc.  Any unauthorized use or reproduction of this information without the prior written consent of TopCoder, Inc. is strictly prohibited.  (c)2010, TopCoder, Inc.  All rights reserved.  </p>
                      
                   </td>