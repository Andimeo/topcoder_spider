<td class="problemText" valign="middle" align="left">
                      
              		<table><tr><td colspan="2" class="statText"><h3>Problem Statement</h3></td></tr><tr><td class="statText">    </td><td class="statText"><p>
The keycaps on a keyboard have been switched around, and the user is now trying to remember what he was trying to type.
</p><p>
Create a class CeyKaps containing the method decipher that takes a String <b>typed</b>, representing the visible message on the screen, and a String[] <b>switched</b>, representing the keycap switches.  The method should return the original intended message (what keys the user thought he was pressing).
</p><p>
A keycap can be switched around more than once.  For example, if someone switched around 'A' and 'S', then switched around 'S' and 'D', then 'D' would be where 'A' originally was, 'S' where 'D' was, and 'A' where 'S' was.
</p><p>
The elements of switches will be formatted as (quotes added for clarity) "*:*", where the *'s represent the keycaps to be switched.  The above example would be represented as:
{"A:S","S:D","D:A"}, or alternately as
{"S:A","D:S","A:D"} or any other such combination.  The order of the keycaps doesn't matter, but the order of the switches does.
</p>
</td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Definition</h3></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText">Class:</td><td class="statText">CeyKaps</td></tr><tr><td class="statText">Method:</td><td class="statText">decipher</td></tr><tr><td class="statText">Parameters:</td><td class="statText">String, String[]</td></tr><tr><td class="statText">Returns:</td><td class="statText">String</td></tr><tr><td class="statText">Method signature:</td><td class="statText">String decipher(String typed, String[] switches)</td></tr><tr><td colspan="2" class="statText">(be sure your method is public)</td></tr></table></td></tr><tr><td class="statText">    </td></tr><tr><td class="statText"></td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Notes</h3></td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">There is no restriction on how many times keycaps can be switched.  It is perfectly possible to return to the original keyboard configuration.</td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Constraints</h3></td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText"><b>typed</b> will be between 1 and 50 characters in length, inclusive.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">each character of <b>typed</b> will be an uppercase letter ('A'-'Z').</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText"><b>switches</b> will contain between 1 and 50 elements, inclusive.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">each element of <b>switched</b> will be formatted as (quotes added for clarity) "*:*" where each * represents a single uppercase letter ('A'-'Z'), inclusive, but both *'s do not represent the same letter.</td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Examples</h3></td></tr><tr><td align="center" nowrap class="statText">0)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>"AAAAA"</pre></td></tr><tr><td class="statText"><pre>{"A:B","B:C","A:D"}</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: "CCCCC"</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">At first, all keys look right.  After the A:B switch, A looks like B and B looks like A.  After the B:C switch, A looks like C, B looks like A, and C looks like B.  The third switch is irrelevant.  Since "AAAAA" is what comes out, Timmy must have been pressing "CCCCC".
</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">1)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>"ABCDE"</pre></td></tr><tr><td class="statText"><pre>{"A:B","B:C","C:D","D:E","E:A"}</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: "AEBCD"</pre></td></tr><tr><td class="statText"></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">2)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>"IHWSIOTCHEDMYKEYCAPSARWUND"</pre></td></tr><tr><td class="statText"><pre>{"W:O","W:I"}</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: "WHOSWITCHEDMYKEYCAPSAROUND"</pre></td></tr><tr><td class="statText"></td></tr></table></td></tr></table><hr><p>This problem statement is the exclusive and proprietary property of TopCoder, Inc.  Any unauthorized use or reproduction of this information without the prior written consent of TopCoder, Inc. is strictly prohibited.  (c)2010, TopCoder, Inc.  All rights reserved.  </p>
                      
                   </td>