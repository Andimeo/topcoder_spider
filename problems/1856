<td class="problemText" valign="middle" align="left">
                      
              		<table><tr><td colspan="2" class="statText"><h3>Problem Statement</h3></td></tr><tr><td class="statText">    </td><td class="statText">We have a sorted list of customer information. Each customer has an age, a weight,
and a name.  We want to determine the basis on which they were sorted.  We
believe that the customers were sorted based on alphabetical order of names,  ascending order of
ages, and descending order of weights. One of these fields was the primary field, 
used to initially sort the customers. Then one of these fields was used as the
secondary field to break ties between customers that were indistinguishable based
on the primary field.  And finally the remaining field was used to break ties
between customers that had the same values for their primary and secondary fields.
<p>
Create a class WhatSort that contains method sortType that is given a String[] <b>name</b>,
a int[] <b>age</b>, and a int[] <b>wt</b> that gives the attributes of the customers. The first elements of <b>name</b>, <b>age</b>, and <b>wt</b> correspond to the first customer in the sorted list of customers, the
second elements to the second customer, etc.
Your method will return a String that tells what sort of sort was used:
</p><ol><li>
    NAW  -- name was the primary, age secondary, weight the final field</li><li>
    NWA  -- name was the primary, weight secondary, age final</li><li>
    ANW  -- age was primary, name was secondary, weight final</li><li>
    AWN  -- age was primary, weight was secondary, name final</li><li>
    WAN  -- weight primary, age secondary, name final</li><li>
    WNA  -- weight primary, name secondary, age final</li><li>
    IND  -- indeterminate: more than one of the above is possible</li><li>
    NOT  -- none of the above sorting methods was used</li></ol></td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Definition</h3></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText">Class:</td><td class="statText">WhatSort</td></tr><tr><td class="statText">Method:</td><td class="statText">sortType</td></tr><tr><td class="statText">Parameters:</td><td class="statText">String[], int[], int[]</td></tr><tr><td class="statText">Returns:</td><td class="statText">String</td></tr><tr><td class="statText">Method signature:</td><td class="statText">String sortType(String[] name, int[] age, int[] wt)</td></tr><tr><td colspan="2" class="statText">(be sure your method is public)</td></tr></table></td></tr><tr><td class="statText">    </td></tr><tr><td class="statText"></td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Constraints</h3></td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText"><b>name</b> will contain between 1 and 50 elements inclusive</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText"><b>age</b> and <b>wt</b> will contain the same number of elements as <b>name</b></td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">each element in <b>name</b> will contain between 1 and 50 characters inclusive</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">each character in each element of <b>name</b> will contain only uppercase letters 'A'-'Z'</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">each element of <b>age</b> and <b>wt</b> will be between 1 and 300 inclusive</td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Examples</h3></td></tr><tr><td align="center" nowrap class="statText">0)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{"BOB","BOB","DAVE","JOE"}</pre></td></tr><tr><td class="statText"><pre>{22, 35, 35, 30}</pre></td></tr><tr><td class="statText"><pre> {122, 122, 195,  200}</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: "IND"</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">
   The ages are not in ascending order and the weights are not in descending order
   so the primary field must be name.  The tie between the 2 BOB's could have been
   broken by increasing age, leaving the weight field as final. But it is also 
   possible that the weight field was secondary, leaving the 2 BOB tie to be 
   resolved by age.  So we cannot determine which of those two sorts was used.

</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">1)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{"BOB","BOB","DAVE","DAVE"}</pre></td></tr><tr><td class="statText"><pre>{22, 35, 35, 30}</pre></td></tr><tr><td class="statText"><pre> {122, 122, 195,  200}</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: "NOT"</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">

   The ages are not in ascending order and the weights are not in descending order
   so the primary field must be name.  There is a tie between the 2 BOB's and
   between the 2 DAVE's. If the secondary field were age, then the DAVE's would
   have been placed in the other order. That is also true if weight were the
   secondary field. So none of the sorts could have been used.
</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">2)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{"BOB","BOB","DAVE","DAVE"}</pre></td></tr><tr><td class="statText"><pre> {22, 35, 35, 30}</pre></td></tr><tr><td class="statText"><pre>{122, 122, 195,  190}</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: "NWA"</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">
   The ages are not in ascending order and the weights are not in descending order
   so the primary field must be name.  Weight as secondary field properly orders
   the 2 DAVE's and leaves the ordering of the 2 BOB's up to the final field.
</td></tr></table></td></tr></table></td></tr></table><hr><p>This problem statement is the exclusive and proprietary property of TopCoder, Inc.  Any unauthorized use or reproduction of this information without the prior written consent of TopCoder, Inc. is strictly prohibited.  (c)2010, TopCoder, Inc.  All rights reserved.  </p>
                      
                   </td>