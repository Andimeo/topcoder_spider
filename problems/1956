<td class="problemText" valign="middle" align="left">
                      
              		<table><tr><td colspan="2" class="statText"><h3>Problem Statement</h3></td></tr><tr><td class="statText">    </td><td class="statText"><p>
You are to write the part of a compiler that generates warning messages.
The programming language is a simple script language where
the only statements are assignments, IF-THEN-ELSE constructions and RETURN.
Variable names are limited to single upper case letters, and they're always
32-bit signed integers. Given a syntactically correct function written in this language,
generate the appropriate warning messages as described below.
</p>

<p>
The syntax of the language only allows one statement per line.
Lines will not have leading or trailing spaces and tokens will be separated by exactly one space.
Formally, the syntax for each line is as follows:
</p>

<pre>
&lt;line&gt;       :: &lt;head&gt; | &lt;assignment&gt; | &lt;if&gt; | ELSE | END IF | &lt;return&gt;
&lt;head&gt;       :: PARAM &lt;paramlist&gt; | PARAM
&lt;assignment&gt; :: &lt;variable&gt; = &lt;rvalue&gt;
&lt;if&gt;         :: IF &lt;variable&gt; &lt;relation&gt; &lt;value&gt; THEN
&lt;return&gt;     :: RETURN &lt;value&gt;
&lt;paramlist&gt;  :: &lt;variable&gt; | &lt;variable&gt; &lt;paramlist&gt;
&lt;rvalue&gt;     :: &lt;value&gt; | &lt;value&gt; &lt;operator&gt; &lt;value&gt;
&lt;value&gt;      :: &lt;variable&gt; | &lt;integer&gt;
&lt;operator&gt;   :: + | - | * | /
&lt;relation&gt;   :: &lt; | = | &gt;
&lt;variable&gt;   :: A | B | ... | Z
&lt;integer&gt;    :: A 32-bit signed integer (without leading zeros)
</pre>
 
<p>
The first line in the function will always be the function head (PARAM, optionally followed
by a space separated list of variables) and the last line will always
contain a RETURN statement. No other line may contain a function head,
although RETURN statements can occur elsewhere as well.
</p>

<p>
Furthermore, each IF-statement has a corresponding END IF-statement and
an optional ELSE-statement in between. The IF-statements
may be nested, but then they will always be properly nested.
An IF-statement will always compare a variable with an integer or
a <i>different</i> variable.
</p>

<p>
You should generate two different warnings, where appropriate.
These are: (quotes for clarity only)
</p>

<pre>
"Line &lt;line&gt;: unreachable code"
"Line &lt;line&gt;: variable &lt;variable&gt; might not have been initialized"
</pre>

<p>
The first warning should be given on lines which are never executed,
no matter how the IF-statements are evaluated. Each such line will
only receive this warning, and no other warnings. Lines containing
ELSE and END IF statements will never receive this warning (these lines
don't render into executable code by the compiler), see example 4.
</p>

<p>
The second warning should be given on lines where the value of a variable is used,
but that variable might not have been assigned a value yet. A variable will have
a value assigned to it if it's in the parameter list in the function head,
or once it's been assigned a value by an assignment statement.
</p> 

<p>
When determining which warnings to give, you should assume that all IF-statements
can evaluate to either true or false, no matter which instructions
have previously been executed, see example 2. Line numbers start from 1, which
will always be the function head.
</p>

<p>
The warnings should be sorted primarily by line number. If a line
contains several different variables that all might be uninitialized,
those warning messages should be sorted alphabetically by the variable name,
see example 0.
</p>

<p>
Create a class ScriptLanguage containing the method warnings
that takes a String[] <b>code</b>, a function in
the script language and returns a String[] containing the
warning messages in the format specified above.
</p></td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Definition</h3></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText">Class:</td><td class="statText">ScriptLanguage</td></tr><tr><td class="statText">Method:</td><td class="statText">warnings</td></tr><tr><td class="statText">Parameters:</td><td class="statText">String[]</td></tr><tr><td class="statText">Returns:</td><td class="statText">String[]</td></tr><tr><td class="statText">Method signature:</td><td class="statText">String[] warnings(String[] code)</td></tr><tr><td colspan="2" class="statText">(be sure your method is public)</td></tr></table></td></tr><tr><td class="statText">    </td></tr><tr><td class="statText"></td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Notes</h3></td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">Make sure you don't misspell the warning messages! Copy and paste from the problem statement is recommended.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">If there are no warnings, return a String[] with no elements.</td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Constraints</h3></td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText"><b>code</b> will contain between 2 and 50 elements, inclusive.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText"><b>code</b> will be a syntactically correct function.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">Elements in <b>code</b> will not have leading or trailing spaces, and tokens will be separated by exactly one space.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">The first element in <b>code</b>, and no other element, will be a PARAM-statement.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">The variables in the PARAM-statement will all be distinct.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">The last element in <b>code</b> will be a RETURN-statement.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">An IF-statement will compare a variable with an integer or a <i>different</i> variable.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">Integers in <b>code</b> will fit in a 32-bit signed integer and will not have extra leading zeros.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">Each IF-statement will have a matching END IF-statement and optionally one matching ELSE-statement.</td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Examples</h3></td></tr><tr><td align="center" nowrap class="statText">0)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{"PARAM A B",
 "IF A &gt; 5 THEN",
 "C = B * A",
 "END IF",
 "D = B - C",
 "Z = Y + X",
 "E = T",
 "F = E + E",
 "V = G + G",
 "RETURN F"}</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: 
{ "Line 5: variable C might not have been initialized",
 "Line 6: variable X might not have been initialized",
 "Line 6: variable Y might not have been initialized",
 "Line 7: variable T might not have been initialized",
 "Line 9: variable G might not have been initialized" }</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText"><p>
If the IF-statement evaluates to false, C will not be initialized, hence the warning message on line 5.
Also note that even though T is uninitialized, E and F shouldn't be considered uninitialized on line 8 and 10, even though their values are unknown. Finally note that there should only be one warning mentioning variable G on line 9.
</p>
</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">1)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{"PARAM G",
 "RETURN G",
 "B = K",
 "RETURN C"}</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: { "Line 3: unreachable code",  "Line 4: unreachable code" }</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">Notice that there should only be the "unreachable code" warning message on lines 3 and 4.
</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">2)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{"PARAM T C",
 "B = T",
 "A = 4",
 "IF A &lt; 4 THEN",
 "IF B &gt; 3 THEN",
 "Q = 100 + F",
 "ELSE",
 "IF C = -1111111111 THEN",
 "Q = T - A",
 "IF Q = 0 THEN",
 "V = V - 1",
 "END IF",
 "ELSE",
 "RETURN I",
 "E = A",
 "END IF",
 "END IF",
 "ELSE",
 "Q = 1",
 "END IF",
 "RETURN Q"}</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: 
{ "Line 6: variable F might not have been initialized",
 "Line 11: variable V might not have been initialized",
 "Line 14: variable I might not have been initialized",
 "Line 15: unreachable code" }</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">This function contains several nested IF-statements. Notice that the line "IF A &lt; 4 THEN" should be considered to be able to evaluate to both true and false even though the line before it says "A = 4".
</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">3)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{"PARAM",
 "IF A &gt; 0 THEN",
 "ELSE",
 "END IF",
 "IF A &gt; 0 THEN",
 "END IF",
 "IF A &gt; 0 THEN",
 "A = 2",
 "ELSE",
 "IF A &gt; 0 THEN",
 "END IF",
 "A = 3",
 "END IF",
 "IF A &lt; 0 THEN",
 "END IF",
 "RETURN A"}</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: 
{ "Line 2: variable A might not have been initialized",
 "Line 5: variable A might not have been initialized",
 "Line 7: variable A might not have been initialized",
 "Line 10: variable A might not have been initialized" }</pre></td></tr><tr><td class="statText"></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">4)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{"PARAM I J K L T",
 "IF I &gt; 10 THEN",
 "IF I &lt; 100 THEN",
 "IF J &gt; 10 THEN",
 "IF J &lt; 100 THEN",
 "IF K &gt; 10 THEN",
 "IF K &lt; 100 THEN",
 "IF L &gt; 10 THEN",
 "IF L &lt; 100 THEN",
 "A = I + J",
 "B = K + L",
 "C = A + B",
 "RETURN C",
 "IF T &gt; 4 THEN",
 "ELSE",
 "END IF",
 "END IF",
 "END IF",
 "END IF",
 "END IF",
 "END IF",
 "END IF",
 "END IF",
 "END IF",
 "RETURN -1"}</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: { "Line 14: unreachable code" }</pre></td></tr><tr><td class="statText"></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">5)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{"PARAM A",
 "A = A + A",
 "A = A * A",
 "A = A - A",
 "A = A / A",
 "RETURN A"}</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: { }</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">Finally a program without warnings!</td></tr></table></td></tr></table></td></tr></table><hr><p>This problem statement is the exclusive and proprietary property of TopCoder, Inc.  Any unauthorized use or reproduction of this information without the prior written consent of TopCoder, Inc. is strictly prohibited.  (c)2010, TopCoder, Inc.  All rights reserved.  </p>
                      
                   </td>