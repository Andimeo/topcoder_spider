<td class="problemText" valign="middle" align="left">
                      
              		<table><tr><td colspan="2" class="statText"><h3>Problem Statement</h3></td></tr><tr><td class="statText">    </td><td class="statText">You and a partner have teamed up for a coding project.  He is writing the front-end of an arithmetic expression parser, and you are writing the back-end.  The expressions are pretty simple, with normal arithmetic operations and no parentheses.  As usual, he stayed up too late and made a terrible oversight.  His parser spits out an expression tree where the precedence and associativity of the operators may be ignored.  For example, let's say his program is given the expression "5+2-3-4*2".  Each operator is supposed to be left associative, but his program could spit out the wrong tree: <pre>
       His tree                    Correct Tree
          +                             -
        /   \                        /     \
       5     -                     -         *
           /   \                 /   \     /   \
          2     -               +     3   4     2
              /   \           /   \
             3     *         5     2
                 /   \
                4     2
</pre>
The expressions <i>should</i> be interpreted as follows:
<ul><li>1) As usual, the order of operations gives * and / highest precedence whereas + and - have lowest.  * and / have equal precedence.  In addition, + and - have equal precedence.</li>
<li>2) Amongst operations of equal precedence, process the leftmost operation first.</li>
</ul>
Adhering to these rules, the input above would be processed to produce the Correct Tree.  In such a tree, lower nodes are processed before higher nodes.  The value of a number node is the number itself.  The value of an operation node is that operation applied to the values of its left and right subnodes (the value of the left subnode belongs on the left side of the operation).  The value of the tree is the value of the top node (called the root node).  Unfortunately, your partner's front-end may have violated rules 1 and 2 numerous times.  Luckily the <i>ordering</i> of his tree is not messed up.  This means that an inorder traversal of the tree beginning with the root will produce the original expression.  Inorder traversal pseudocode follows:<pre>
InorderTraverse(node) {
	if (left subtree of node exists) 
		InorderTraverse(root of left subtree)
	Print the contents of node
	if (right subtree of node exists) 
		InorderTraverse(root of right subtree)
}</pre>
Your program will take a String[] <b>badTree</b> describing his tree, and will return an int which is the correct value of the expression he parsed.  All operations are integer operations so division truncates results.  For example 5/3=1, and -5/3 = -1.<br><br>
Each element of <b>badTree</b> will be in one of two forms (quotes for clarity):
<ul><li>1) "op X Y"   :   op is one of *,/,+,-. X,Y are integers referencing other elements of <b>badTree</b> (0-indexed).  X refers to the node's left child and Y refers to the node's right child.</li>
<li>2) "N" : N is a non-negative integer with no extra leading zeros.</li>
</ul></td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Definition</h3></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText">Class:</td><td class="statText">BadParser</td></tr><tr><td class="statText">Method:</td><td class="statText">evaluate</td></tr><tr><td class="statText">Parameters:</td><td class="statText">String[]</td></tr><tr><td class="statText">Returns:</td><td class="statText">int</td></tr><tr><td class="statText">Method signature:</td><td class="statText">int evaluate(String[] badTree)</td></tr><tr><td colspan="2" class="statText">(be sure your method is public)</td></tr></table></td></tr><tr><td class="statText">    </td></tr><tr><td class="statText"></td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Constraints</h3></td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText"><b>badTree</b> will contain between 1 and 50 elements inclusive.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">Each element of <b>badTree</b> will be in one of the following forms (quotes for clarity):<br>1) "op X Y" where X and Y are integers, with no extra leading zeros, between 0 and M-1 inclusive.  op must be *,+,-, or /.  Here M denotes the number of elements in <b>badTree</b>.<br>2) "N" where N is a nonnegative integer with no extra leading zeros between 0 and 1000 inclusive.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">The elements of <b>badTree</b> will describe a single tree, with element 0 acting as root.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">The return value, and the value of any subtree of the correct tree will all be between -100000 and 100000 inclusive.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">The computation of the return value, and the value of any subtree of the correct tree will not require division by 0.</td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Examples</h3></td></tr><tr><td align="center" nowrap class="statText">0)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{"+ 1 2","5","- 3 4","2","- 5 6","3","* 7 8","4","2"}</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: -4</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">The example in the problem statement.</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">1)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{"- 1 2","5","- 3 4","2","- 5 6","3","* 7 8","4","2"}</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: -8</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">The example in the problem statement with the + replaced by a -.</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">2)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{"* 1 2","5","- 3 4","2","- 5 6","3","* 7 8","4","2"}</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: -1</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">The example in the problem statement with the + replaced by a *.</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">3)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{"99"}</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: 99</pre></td></tr><tr><td class="statText"></td></tr></table></td></tr></table><hr><p>This problem statement is the exclusive and proprietary property of TopCoder, Inc.  Any unauthorized use or reproduction of this information without the prior written consent of TopCoder, Inc. is strictly prohibited.  (c)2010, TopCoder, Inc.  All rights reserved.  </p>
                      
                   </td>