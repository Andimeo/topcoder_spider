<td class="problemText" valign="middle" align="left">
                      
              		<table><tr><td colspan="2" class="statText"><h3>Problem Statement</h3></td></tr><tr><td class="statText">    </td><td class="statText">You need to create a table of results for a contest you recently hosted.  Each participant was evaluated on up to N different performance metrics, and you now need a table summarizing the performance of each competitor on each metric.  Making things more difficult is the fact that some competitors may have been evaluated on certain metrics more than once, while others may not have been evaluated on certain metrics at all.<br><br>
You will be given a String[], <b>results</b>, representing the results of the contest.  Each element of <b>results</b> will be formatted as "NAME METRIC COUNT SCORE".  NAME is the name of the competitor, METRIC is a number between 1 and N, inclusive, COUNT is the number of prior evaluations for the particular competitor on the particular metric, and SCORE is the score that competitor received.  If a competitor receives multiple scores for the same metric, you should only consider the one with the highest COUNT.  Furthermore, you will be given a String, <b>order</b>, the i<sup>th</sup> character (indexed from 1) of which represents whether a high score ('H') or a low score ('L') is desirable on metric i.<br><br>
You should generate a table with one row per competitor and N+1 columns.  The columns in each row should be separated by single spaces.  The first column should contain the competitor's name, while the remaining columns contain the scores of the competitor, ordered by metric number.  Furthermore, you should sort the rows according to a int[], <b>sort</b>.  You should first sort the table by column abs(<b>sort[0]</b>) (indexed from 1).  If there is a tie, you should sort by column abs(<b>sort[1]</b>), and so on.  In each case, if the element of <b>sort</b> is greater than one, you should sort the competitors from best to worst, and if the element is less than negative one, you should sort from worst to best.  A +1 in <b>sort</b> indicates that you should sort in ascending alphabetical order by competitor name (column 1), while a -1 indicates descending order by competitor name.  If a competitor has received no score for a particular metric, it should be considered worse than all of the competitors with scores, and you should put a '-' where the score would be.</td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Definition</h3></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText">Class:</td><td class="statText">ResultsTable</td></tr><tr><td class="statText">Method:</td><td class="statText">generateTable</td></tr><tr><td class="statText">Parameters:</td><td class="statText">String[], int[], String</td></tr><tr><td class="statText">Returns:</td><td class="statText">String[]</td></tr><tr><td class="statText">Method signature:</td><td class="statText">String[] generateTable(String[] results, int[] sort, String order)</td></tr><tr><td colspan="2" class="statText">(be sure your method is public)</td></tr></table></td></tr><tr><td class="statText">    </td></tr><tr><td class="statText"></td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Notes</h3></td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">Competitor names are case sensitive.  </td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">When sorting by name, uppercase letters come before lowercase letters.</td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Constraints</h3></td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText"><b>sort</b> will contain exactly N+1 elements, where N is the number of metrics and is between 1 and 49, inclusive.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">Each element of <b>sort</b> will be non-zero and between -(N+1) and (N+1), inclusive.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">Each element of <b>sort</b> will have a distinct absolute value.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText"><b>order</b> will contain exactly N characters, each of which will be 'H' or 'L'.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText"><b>results</b> will contain between 1 and 50 elements, inclusive.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">Each element of <b>results</b> will be formatted as "NAME METRIC COUNT SCORE".</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">NAME will contain between 1 and 20 letters ('a'-'z' and 'A'-'Z'), inclusive.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">METRIC will be an integer between 1 and N, inclusive, with no leading zeros.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">COUNT will be an integer between 1 and 100, inclusive, with no leading zeros.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">SCORE will be an integer between -1000 and 1000, inclusive, with no leading zeros.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">No two elements of <b>results</b> will have the same NAME, METRIC and COUNT.</td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Examples</h3></td></tr><tr><td align="center" nowrap class="statText">0)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{"A 1 1 54","A 2 1 20","a 1 1 23","a 2 1 50"}</pre></td></tr><tr><td class="statText"><pre>{-1,2,-3}</pre></td></tr><tr><td class="statText"><pre>"HL"</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: { "a 23 50",  "A 54 20" }</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">The first element of sort is -1, indicating that we should first sort by competitors' names in descending order.  Hence, a comes first, followed by A.</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">1)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{"A 1 1 54","A 2 1 20","B 1 1 23","B 2 1 50"}</pre></td></tr><tr><td class="statText"><pre>{-2,-3,1}</pre></td></tr><tr><td class="statText"><pre>"HL"</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: { "B 23 50",  "A 54 20" }</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">In this example, we are to sort first by column 2 (metric 1) in order from worst to best.  Since higher scores are better on metric 1 (because of the 'H' in <b>order</b>), we put B first, who has a 23 on metric 1, and A next, with a 54 on metric 1.</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">2)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{"A 1 1 54","A 2 1 20","B 1 1 54"}</pre></td></tr><tr><td class="statText"><pre>{2,4,-3,1}</pre></td></tr><tr><td class="statText"><pre>"HLH"</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: { "B 54 - -",  "A 54 20 -" }</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">There is a tie on both metric 1 and metric 3 (columns 2 and 4) and since B was not scored on metric 2, he is considered to have done worse.</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">3)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{"q 3 90 444","J 2 6 347","b 3 17 -543","I 2 13 897","M 3 55 -439"}</pre></td></tr><tr><td class="statText"><pre>{4,-2,-1,-3}</pre></td></tr><tr><td class="statText"><pre>"LHH"</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: { "q - - 444",  "M - - -439",  "b - - -543",  "J - 347 -",  "I - 897 -" }</pre></td></tr><tr><td class="statText"></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">4)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{"f 1 37 -861","s 1 92 -829","v 2 78 247","M 1 30 -31","E 1 45 -646"}</pre></td></tr><tr><td class="statText"><pre>{3,1,2}</pre></td></tr><tr><td class="statText"><pre>"LL"</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: { "v - 247",  "E -646 -",  "M -31 -",  "f -861 -",  "s -829 -" }</pre></td></tr><tr><td class="statText"></td></tr></table></td></tr></table><hr><p>This problem statement is the exclusive and proprietary property of TopCoder, Inc.  Any unauthorized use or reproduction of this information without the prior written consent of TopCoder, Inc. is strictly prohibited.  (c)2010, TopCoder, Inc.  All rights reserved.  </p>
                      
                   </td>