<td class="problemText" valign="middle" align="left">
                      
              		<table><tr><td colspan="2" class="statText"><h3>Problem Statement</h3></td></tr><tr><td class="statText">    </td><td class="statText">So much to do and so little time to do it in!  You have a long list of
computer programs that must be run and you want them to finish running
as soon as possible.  Each program in the list requires a certain
amount of your time to set up, and during this time you must devote
your full attention to the setup of that program.  After you have
finished with the setup of a program, it will immediately start
execution and will run for a certain amount of time on the computer.
You have enough processing power that all of the programs may be run
simultaneously without any of them slowing down.  You are to find a
schedule such that the time at which all of the programs are finished
is as early as possible and you should return that time (assuming you
start at time 0).<br><br>

You will be given int[]'s <b>A</b> and <b>B</b>,
corresponding elements of which represent a single program.  Each
element of <b>A</b> represents the setup time of a program and the
corresponding element of <b>B</b> represents the running time of that
program.
</td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Definition</h3></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText">Class:</td><td class="statText">ProgramSchedule</td></tr><tr><td class="statText">Method:</td><td class="statText">schedule</td></tr><tr><td class="statText">Parameters:</td><td class="statText">int[], int[]</td></tr><tr><td class="statText">Returns:</td><td class="statText">int</td></tr><tr><td class="statText">Method signature:</td><td class="statText">int schedule(int[] A, int[] B)</td></tr><tr><td colspan="2" class="statText">(be sure your method is public)</td></tr></table></td></tr><tr><td class="statText">    </td></tr><tr><td class="statText"></td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Constraints</h3></td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText"><b>A</b> and <b>B</b> will contain the same number of elements.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText"><b>A</b> and <b>B</b> will contain between 1 and 50 elements, inclusive.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">Each element of <b>A</b> and <b>B</b> will be between 1 and 1000, inclusive.</td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Examples</h3></td></tr><tr><td align="center" nowrap class="statText">0)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{1,2,3,4}
</pre></td></tr><tr><td class="statText"><pre>{2,2,4,2}</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: 12</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">In this case, you can simply execute the programs in the same order
they are given (though there are other ways which give the same final time).
The 4 programs will finish after 3, 5, 10, and 12, respectively.
</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">1)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{3,1,2}</pre></td></tr><tr><td class="statText"><pre>{4,3,9}</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: 11</pre></td></tr><tr><td class="statText"></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">2)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{1000}</pre></td></tr><tr><td class="statText"><pre>{1000}</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: 2000</pre></td></tr><tr><td class="statText"></td></tr></table></td></tr></table><hr><p>This problem statement is the exclusive and proprietary property of TopCoder, Inc.  Any unauthorized use or reproduction of this information without the prior written consent of TopCoder, Inc. is strictly prohibited.  (c)2010, TopCoder, Inc.  All rights reserved.  </p>
                      
                   </td>