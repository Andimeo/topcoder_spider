<td class="problemText" valign="middle" align="left">
                      
              		<table><tr><td colspan="2" class="statText"><h3>Problem Statement</h3></td></tr><tr><td class="statText">    </td><td class="statText"><i>The problem statement contains superscripts and subscripts that can be seen in the applet.</i><br>
Given a randomly generated sequence, it can be useful to know how unsorted it is.  The sequence <pre>
	a<sub>1</sub>, a<sub>2</sub>, a<sub>3</sub>, a<sub>4</sub>, ... , a<sub><b>n</b></sub></pre>
gets 1 'unsortedness point' for every distinct pair (i,j) where i &lt; j but a<sub>i</sub> &gt; a<sub>j</sub>.  The terms in the sequence are defined by the following formula: <pre>
	a<sub>1</sub> = 1   and   a<sub>k</sub> = (<b>m</b> * a<sub>k-1</sub> + <b>c</b>) % (2<sup>31</sup> - 1)</pre>
Here % denotes the modulus or remainder operator.  Return the number of unsortedness points scored by this <b>n</b>-element sequence.
</td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Definition</h3></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText">Class:</td><td class="statText">HowUnsorted</td></tr><tr><td class="statText">Method:</td><td class="statText">howMany</td></tr><tr><td class="statText">Parameters:</td><td class="statText">int, int, int</td></tr><tr><td class="statText">Returns:</td><td class="statText">long</td></tr><tr><td class="statText">Method signature:</td><td class="statText">long howMany(int m, int c, int n)</td></tr><tr><td colspan="2" class="statText">(be sure your method is public)</td></tr></table></td></tr><tr><td class="statText">    </td></tr><tr><td class="statText"></td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Notes</h3></td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">Make sure to use 64-bit types when generating the random values.</td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Constraints</h3></td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText"><b>m</b> will be between 1 and 2000000000 inclusive.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText"><b>c</b> will be between 0 and 2^31-2 inclusive.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText"><b>n</b> will be between 3 and 100000 inclusive.</td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Examples</h3></td></tr><tr><td align="center" nowrap class="statText">0)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>2</pre></td></tr><tr><td class="statText"><pre>10</pre></td></tr><tr><td class="statText"><pre>5</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: 0</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">The sequence used here is: <pre>
	1, 12, 34, 78, 166 </pre>
Since the values are sorted, the return is 0.</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">1)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>1000</pre></td></tr><tr><td class="statText"><pre>100</pre></td></tr><tr><td class="statText"><pre>6</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: 3</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">The sequence here is: <pre>
	1, 1100, 1100100, 1100100100, 588472836, 62316822 </pre>
The 3 unsortedness points come from the pairs (4,6), (5,6), and (4,5). </td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">2)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>1234257123</pre></td></tr><tr><td class="statText"><pre>123</pre></td></tr><tr><td class="statText"><pre>1500</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: 558406</pre></td></tr><tr><td class="statText"></td></tr></table></td></tr></table><hr><p>This problem statement is the exclusive and proprietary property of TopCoder, Inc.  Any unauthorized use or reproduction of this information without the prior written consent of TopCoder, Inc. is strictly prohibited.  (c)2010, TopCoder, Inc.  All rights reserved.  </p>
                      
                   </td>