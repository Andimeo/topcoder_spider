<td class="problemText" valign="middle" align="left">
                      
              		<table><tr><td colspan="2" class="statText"><h3>Problem Statement</h3></td></tr><tr><td class="statText">    </td><td class="statText"><pre>
  S ::= T | bUa
  T ::= aTb | A | B
  U ::= aU | bU | a | b
  A ::= aA | a
  B ::= bB | b
</pre>
Displayed above is a Context-Free Grammar (CFG).  You begin with the string (quotes for clarity) "S", and apply replacement rules until your resulting string no longer contains any capital letters.  The first line above says that S can be replaced with T or bUa.  The other lines are similar.  You will return a sequence of strings, beginning with "S" and ending with <b>input</b>, where each successive sequence element results from applying one of the replacement rules above.  For example, if <b>input</b> is "aaabb" then you will return
<pre> {"S","T","aTb","aaTbb","aaAbb","aaabb"}</pre></td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Definition</h3></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText">Class:</td><td class="statText">DerivationDisplay</td></tr><tr><td class="statText">Method:</td><td class="statText">getDerivation</td></tr><tr><td class="statText">Parameters:</td><td class="statText">String</td></tr><tr><td class="statText">Returns:</td><td class="statText">String[]</td></tr><tr><td class="statText">Method signature:</td><td class="statText">String[] getDerivation(String input)</td></tr><tr><td colspan="2" class="statText">(be sure your method is public)</td></tr></table></td></tr><tr><td class="statText">    </td></tr><tr><td class="statText"></td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Constraints</h3></td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText"><b>input</b> will contain between 1 and 50 characters inclusive.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">Each character in <b>input</b> will be 'a' or 'b'.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">There will be exactly one solution.</td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Examples</h3></td></tr><tr><td align="center" nowrap class="statText">0)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>"aaabb"</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: {"S", "T", "aTb", "aaTbb", "aaAbb", "aaabb" }</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">The example above.</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">1)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>"bbba"</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: {"S", "bUa", "bbUa", "bbba" }</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">In the first step, S must be replaced with bUa in order to derive this string.  Then the 2 inner b's are added.</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">2)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>"baabba"</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: {"S", "bUa", "baUa", "baaUa", "baabUa", "baabba" }</pre></td></tr><tr><td class="statText"></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">3)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>"a"</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: {"S", "T", "A", "a" }</pre></td></tr><tr><td class="statText"></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">4)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>"b"</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: {"S", "T", "B", "b" }</pre></td></tr><tr><td class="statText"></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">5)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>"aabbbbbbbb"</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: 
{"S",
"T",
"aTb",
"aaTbb",
"aaBbb",
"aabBbb",
"aabbBbb",
"aabbbBbb",
"aabbbbBbb",
"aabbbbbBbb",
"aabbbbbbbb" }</pre></td></tr><tr><td class="statText"></td></tr></table></td></tr></table><hr><p>This problem statement is the exclusive and proprietary property of TopCoder, Inc.  Any unauthorized use or reproduction of this information without the prior written consent of TopCoder, Inc. is strictly prohibited.  (c)2010, TopCoder, Inc.  All rights reserved.  </p>
                      
                   </td>