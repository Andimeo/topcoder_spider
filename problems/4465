<td class="problemText" valign="middle" align="left">
                      
              		<table><tr><td colspan="2" class="statText"><h3>Problem Statement</h3></td></tr><tr><td class="statText">    </td><td class="statText">Connect Four is a two-player board game played on a grid with 6 rows and 7 columns. The game starts with an empty board, and players take alternate turns dropping stones down non-full columns. At each turn, a player drops a single stone down a single column. The stone then occupies the bottom-most unoccupied square on that column.
<pre>
  a b c d e f g
6 . . . O . . .
5 . . . X . . .
4 . . . O . . .
3 . . . X . . .
2 . . . O . X .
1 . . X X O O X
</pre>
Here a '.' denotes an unoccupied square; the first player's stones and the second player's are represented by 'X' and 'O' respectively. In the example above, it's the second player's turn to drop a stone in one of the six valid positions: a1, b1, c2, e2, f3, and g2.
The game ends when a player wins by placing at least four of his/her stones consecutively in at least one line, either horizontally, vertically, or diagonally. In the following example, the first player has successfully placed four stones in a line (d5-e4-f3-g2) thus winning the game.
<pre>
  a b c d e f g
6 . . . O . . .
5 . . . X . O .
4 . . O O X X O
3 . . O X O X X
2 O . X O X X X
1 O . X X O O X
</pre>
The game may also end in a draw if the board is completely filled without anyone winning. After a game ends, the players are not allowed to drop more stones onto the board.
<p>You will be given a String[], <b>board</b>, representing the 6 rows in a top-down manner. Each element of <b>board</b> will have exactly 7 characters representing the squares in a row from left to right: '.' denotes an empty square; 'X' denotes a stone of the first player; and 'O' denotes a stone of the second player. Write a class ConnectFour with a method judge which takes a board configuration represented by a String[] and returns a String of one of the six possible values:
</p><ul><li>"first player moves" - return this when it's the first player's turn to drop a stone.</li>
<li>"second player moves" - return this when it's the second player's turn to drop a stone.</li>
<li>"first player wins" - return this when the first player has won the game.</li>
<li>"second player wins" - return this when the second player has won the game.</li>
<li>"draw game" - return this when the board is full and neither player wins the game.</li>
<li>"invalid" - return this when it's impossible to produce the given board without violating the rules (e.g. dropping stones in bad positions, playing out of turn, or dropping stones when the game has ended.)</li>
</ul></td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Definition</h3></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText">Class:</td><td class="statText">ConnectFour</td></tr><tr><td class="statText">Method:</td><td class="statText">judge</td></tr><tr><td class="statText">Parameters:</td><td class="statText">String[]</td></tr><tr><td class="statText">Returns:</td><td class="statText">String</td></tr><tr><td class="statText">Method signature:</td><td class="statText">String judge(String[] board)</td></tr><tr><td colspan="2" class="statText">(be sure your method is public)</td></tr></table></td></tr><tr><td class="statText">    </td></tr><tr><td class="statText"></td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Notes</h3></td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">Connect Four on a 6x7 board has been solved independently by Victor Allis and James D. Allen. The first player can force a win with perfect play.</td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Constraints</h3></td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText"><b>board</b> will contain exactly 6 elements.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">Each element of <b>board</b> will have exactly 7 characters.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">Each character will be one of the 3 possible characters: '.', 'X', or 'O'.</td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Examples</h3></td></tr><tr><td align="center" nowrap class="statText">0)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{
".......",
".......",
".......",
".......",
".......",
"......."
}</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: "first player moves"</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">Every game starts with an empty board where the first player may drop a stone ('X') in one of the seven columns.</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">1)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{
".......",
".......",
".......",
"...X...",
"...O...",
"...X..."
}</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: "second player moves"</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">After three turns, the second player should make a move again.</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">2)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{
".......",
".......",
"X......",
"OX.....",
"XOXO...",
"OXOX..."
}</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: "first player wins"</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">The first player wins by connecting four stones in a diagonal line. There are many valid moving sequences that may lead to this end configuration.</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">3)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{
".......",
".......",
".X.....",
".X.....",
".X..XX.",
"XOOOOOO"
}</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: "second player wins"</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">The second player concludes the game by connecting a long line at the bottom.</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">4)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{
"OOXOXOX",
"XXXOXOO",
"OXXOOXO",
"XOOXXOO",
"XXXOOXX",
"XOOXXOO"
}</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: "draw game"</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">The board is full, and neither player has managed to connect at least four stones in a line. The game therefore ends in a tie.</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">5)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{
"...X...",
".......",
".......",
".......",
"...X...",
"...O..."
}</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: "invalid"</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">No "floating" stone is allowed in a valid game, so there would never be an empty square beneath any stone.</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">6)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{
".......",
".......",
".......",
".......",
"OOOO...",
"XXXX..."
}</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: "invalid"</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">The game ends when the first player wins. Neither player should continue thereafter.</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">7)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{
"XXO.XOX",
"OOX.OXX",
"XXO.XXO",
"OOXXOOO",
"XXOOXOO",
"OOXOOXX"
}</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: "invalid"</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">At a glance the first player seems to have won the game when in fact there does not exist a valid sequence of moves.</td></tr></table></td></tr></table></td></tr></table><hr><p>This problem statement is the exclusive and proprietary property of TopCoder, Inc.  Any unauthorized use or reproduction of this information without the prior written consent of TopCoder, Inc. is strictly prohibited.  (c)2010, TopCoder, Inc.  All rights reserved.  </p>
                      
                   </td>