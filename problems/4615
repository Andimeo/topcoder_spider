<td class="problemText" valign="middle" align="left">
                      
              		<table><tr><td colspan="2" class="statText"><h3>Problem Statement</h3></td></tr><tr><td class="statText">    </td><td class="statText">You have been given a document header containing important data that will eventually get stored in a database.  The data is formatted as follows:<pre>
Field Name     Data     Field Name     Data     ...
Field Name     Data     Field Name     Data     ...
...            ...      ...            ...      ...	
</pre> That is, each field name column will be followed by the corresponding data column.  If formatted correctly, the header should contain an even number of columns.  Each element of <b>data</b> will correspond to a row of values.  Since there are no terminating characters or field widths in use, it is not obvious where each column begins and ends.  We have decided to use rectangles of spaces to split each column.  These rectangles must cover all rows of data, be as wide as possible, and contain only space characters.  You will return how wide each delimiting rectangle is in a int[].  The return value should be ordered left-to-right based on the positions of the corresponding delimeters in <b>data</b>.  If the number of delimiting rectangles is even, return an empty int[] denoting an error.</td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Definition</h3></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText">Class:</td><td class="statText">FieldPairParse</td></tr><tr><td class="statText">Method:</td><td class="statText">getPairs</td></tr><tr><td class="statText">Parameters:</td><td class="statText">String[]</td></tr><tr><td class="statText">Returns:</td><td class="statText">int[]</td></tr><tr><td class="statText">Method signature:</td><td class="statText">int[] getPairs(String[] data)</td></tr><tr><td colspan="2" class="statText">(be sure your method is public)</td></tr></table></td></tr><tr><td class="statText">    </td></tr><tr><td class="statText"></td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Notes</h3></td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">The input is entirely composed of Xs and spaces since, as far as you are concerned, there are only 2 kinds of characters.</td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Constraints</h3></td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText"><b>data</b> will contain between 1 and 50 elements inclusive.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">Each element of <b>data</b> will contain between 1 and 50 characters inclusive.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">Each element of <b>data</b> will contain the same number of characters.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">Each character in each element of <b>data</b> will be 'X' or ' ' (quotes for clarity).</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">At least one element of <b>data</b> will not begin with a space.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">At least one element of <b>data</b> will not end with a space.</td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Examples</h3></td></tr><tr><td align="center" nowrap class="statText">0)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{
"XXXXX    XXXXX",
"XXXX    XXXXX "
}</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: {3 }</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">There is one divider here, and it is 3 characters wide.</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">1)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{
"XXXXXXXXXX     XXXXXXXXXXX",
"XXXXXXXXXXXXXXXXX    XXXXX"
}</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: { }</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">No divider (which is an error).</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">2)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{
"X X X",
"X X X"
}</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: { }</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">Two dividers is an error.</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">3)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{
"XXXX      X  X           X X   X",
"XX       XXX XX   X   X   X XXX "
}</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: {5, 1, 3, 3, 2 }</pre></td></tr><tr><td class="statText"></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">4)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{"XXXX      X  X           X X   X"}</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: {6, 2, 11, 1, 3 }</pre></td></tr><tr><td class="statText"></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">5)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{"XXX XXX XXX XXX XXX"}</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: { }</pre></td></tr><tr><td class="statText"></td></tr></table></td></tr></table><hr><p>This problem statement is the exclusive and proprietary property of TopCoder, Inc.  Any unauthorized use or reproduction of this information without the prior written consent of TopCoder, Inc. is strictly prohibited.  (c)2010, TopCoder, Inc.  All rights reserved.  </p>
                      
                   </td>