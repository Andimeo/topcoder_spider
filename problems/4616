<td class="problemText" valign="middle" align="left">
                      
              		<table><tr><td colspan="2" class="statText"><h3>Problem Statement</h3></td></tr><tr><td class="statText">    </td><td class="statText">Your restaurant has <b>numTables</b> tables to seat customers.  The tables are all arranged in a line.  If a large party of customers comes in, a group of adjacent tables will be used.  Which group of tables is entirely up to the customer.  Since you cannot predict this, assume all possible choices occur with equal probability.  What you can predict is the size of each group of customers that arrives.  Element i of <b>probs</b> gives the probability, in percent, that an entering party will need i+1 tables. 

Assuming nobody leaves, return the expected number of tables you will use before a party must be turned away.  This only occurs if there is no place to seat them.  </td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Definition</h3></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText">Class:</td><td class="statText">TableSeating</td></tr><tr><td class="statText">Method:</td><td class="statText">getExpected</td></tr><tr><td class="statText">Parameters:</td><td class="statText">int, int[]</td></tr><tr><td class="statText">Returns:</td><td class="statText">double</td></tr><tr><td class="statText">Method signature:</td><td class="statText">double getExpected(int numTables, int[] probs)</td></tr><tr><td colspan="2" class="statText">(be sure your method is public)</td></tr></table></td></tr><tr><td class="statText">    </td></tr><tr><td class="statText"></td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Notes</h3></td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">Return values must be accurate to 1e-9, relative or absolute.</td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Constraints</h3></td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText"><b>numTables</b> will be between 1 and 12 inclusive.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText"><b>probs</b> will contain between 1 and 12 elements inclusive.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">Each element of <b>probs</b> will be between 0 and 100 inclusive.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">The elements of <b>probs</b> will sum to 100.</td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Examples</h3></td></tr><tr><td align="center" nowrap class="statText">0)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>4</pre></td></tr><tr><td class="statText"><pre>{100}</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: 4.0</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">Since every party needs only 1 table, you will always fill the restaurant before turning someone away.</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">1)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>4</pre></td></tr><tr><td class="statText"><pre>{0,100}</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: 3.3333333333333335</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">Now every party wants 2 tables.  One third of the time, the first party will choose the middle 2 tables blocking anyone else from being seated.  Two thirds of the time, the first party will choose 2 tables on the end allowing the restaurant to become full.  Thus, the returned value is (1/3)*2 + (2/3)*4 = 10/3.</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">2)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>5</pre></td></tr><tr><td class="statText"><pre>{0,0,0,0,0,50,50}</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: 0.0</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">You have 5 tables, but every party needs 6 or 7 tables.</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">3)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>12</pre></td></tr><tr><td class="statText"><pre>{9,9,9,9,9,9,9,9,9,9,10}</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: 7.871087929710551</pre></td></tr><tr><td class="statText"></td></tr></table></td></tr></table><hr><p>This problem statement is the exclusive and proprietary property of TopCoder, Inc.  Any unauthorized use or reproduction of this information without the prior written consent of TopCoder, Inc. is strictly prohibited.  (c)2010, TopCoder, Inc.  All rights reserved.  </p>
                      
                   </td>