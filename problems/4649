<td class="problemText" valign="middle" align="left">
                      
              		<table><tr><td colspan="2" class="statText"><h3>Problem Statement</h3></td></tr><tr><td class="statText">    </td><td class="statText"><p>You were hired to manage a forthcoming tournament. Each player will play against each of all the other players.  According to the rules, the matches can be played in any order, but the audience will want to know the current leader at any point in time.</p>
<p>You will be given a String[] <b>matches</b>. All elements of <b>matches</b> will be in the form "playerA defeats playerB" (quotes for clarity only). Your method should return the leader after this set of matches.  The leader is a player who has played at least one match and has the highest ratio of winning matches to total matches played.  In case of a tie, return the player whose name comes first lexicographically.  The players' names are case sensitive (i.e. uppercase letters are lexicographically earlier than lowercase letters).</p>
</td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Definition</h3></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText">Class:</td><td class="statText">TheTournament</td></tr><tr><td class="statText">Method:</td><td class="statText">findLeader</td></tr><tr><td class="statText">Parameters:</td><td class="statText">String[]</td></tr><tr><td class="statText">Returns:</td><td class="statText">String</td></tr><tr><td class="statText">Method signature:</td><td class="statText">String findLeader(String[] matches)</td></tr><tr><td colspan="2" class="statText">(be sure your method is public)</td></tr></table></td></tr><tr><td class="statText">    </td></tr><tr><td class="statText"></td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Constraints</h3></td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText"><b>matches</b> will contain between 1 and 50 elements inclusive. </td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">Each element of <b>matches</b> will be in the form "playerA defeats playerB".</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">In each element of <b>matches</b> playerA will differ from playerB.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">There will not be two elements of <b>matches</b> with the same players.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">Each playerA and playerB will contain between 1 and 20 letters ('A'-'Z', 'a'-'z'), inclusive.</td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Examples</h3></td></tr><tr><td align="center" nowrap class="statText">0)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{"Ted defeats Kate", "Kate defeats Billy", "Ted defeats Billy"}</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: "Ted"</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">Ted wins all his games, but Kate and Billy have at least one defeat.</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">1)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{"Ted defeats Kate", "Kate defeats Billy", "Billy defeats Ted"}</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: "Billy"</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">All players have a 1/2 ratio of wins to total matches, so we should return the player whose name comes first lexicographically.</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">2)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{"Ted defeats Kate", "Kate defeats Billy", "Ted defeats Billy", "Tommy defeats Ted"}</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: "Tommy"</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">Tommy's ratio is 1/1, Kate's and Billy's ratio is 1/2 and Ted's ratio is 1/3. So, Tommy's ratio is the best.</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">3)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{"B defeats BA", "B defeats BB", "BC defeats B", "A defeats AB",
 "A defeats AC", "A defeats AD", "A defeats AE", "AF defeats A",
 "AG defeats A", "AB defeats AF", "AC defeats AG", "BB defeats BC"}</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: "A"</pre></td></tr><tr><td class="statText"></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">4)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{"defeats defeats def", "defeats defeats defe", "defe defeats ded", "defeat defeats defeats"}</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: "defeat"</pre></td></tr><tr><td class="statText"></td></tr></table></td></tr></table><hr><p>This problem statement is the exclusive and proprietary property of TopCoder, Inc.  Any unauthorized use or reproduction of this information without the prior written consent of TopCoder, Inc. is strictly prohibited.  (c)2010, TopCoder, Inc.  All rights reserved.  </p>
                      
                   </td>