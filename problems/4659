<td class="problemText" valign="middle" align="left">
                      
              		<table><tr><td colspan="2" class="statText"><h3>Problem Statement</h3></td></tr><tr><td class="statText">    </td><td class="statText"><p>It is a common mistake to sort numbers as strings.  For example, a sorted sequence like {"1", "174", "23", "578", "71", "9"} is not correctly sorted if its elements are interpreted as numbers rather than strings.</p>
<p>You will be given a String[] sequence that is sorted in non-descending order using string comparison.  Return this sequence sorted in non-descending order using numerical comparison instead.</p>
</td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Definition</h3></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText">Class:</td><td class="statText">SequenceOfNumbers</td></tr><tr><td class="statText">Method:</td><td class="statText">rearrange</td></tr><tr><td class="statText">Parameters:</td><td class="statText">String[]</td></tr><tr><td class="statText">Returns:</td><td class="statText">String[]</td></tr><tr><td class="statText">Method signature:</td><td class="statText">String[] rearrange(String[] sequence)</td></tr><tr><td colspan="2" class="statText">(be sure your method is public)</td></tr></table></td></tr><tr><td class="statText">    </td></tr><tr><td class="statText"></td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Constraints</h3></td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText"><b>sequence</b> will contain between 2 and 50 elements inclusive. </td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">Each element of <b>sequence</b> will contain between 1 and 9 characters inclusive.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">Each element of <b>sequence</b> will consist of only digits ('0'-'9').</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">Each element of <b>sequence</b> will not start with a '0' digit.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText"><b>sequence</b> will be ordered lexicographically.</td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Examples</h3></td></tr><tr><td align="center" nowrap class="statText">0)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{"1","174","23","578","71","9"}</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: {"1", "9", "23", "71", "174", "578" }</pre></td></tr><tr><td class="statText"></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">1)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{"172","172","172","23","23"}</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: {"23", "23", "172", "172", "172" }</pre></td></tr><tr><td class="statText"></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">2)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{"183","2","357","38","446","46","628","734","741","838"}</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: {"2", "38", "46", "183", "357", "446", "628", "734", "741", "838" }</pre></td></tr><tr><td class="statText"></td></tr></table></td></tr></table><hr><p>This problem statement is the exclusive and proprietary property of TopCoder, Inc.  Any unauthorized use or reproduction of this information without the prior written consent of TopCoder, Inc. is strictly prohibited.  (c)2010, TopCoder, Inc.  All rights reserved.  </p>
                      
                   </td>