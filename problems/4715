<td class="problemText" valign="middle" align="left">
                      
              		<table><tr><td colspan="2" class="statText"><h3>Problem Statement</h3></td></tr><tr><td class="statText">    </td><td class="statText">You will be given an <b>equation</b> of the form &lt;side&gt;=&lt;side&gt; where &lt;side&gt; is a list of &lt;term&gt;s separated by &lt;op&gt;s.  Each &lt;op&gt; is either + or -, and each &lt;term&gt; is a positive length string of uppercase letters.  Each letter denotes a variable taking on real values.  No letter will occur in a &lt;term&gt; more than twice.<br><br>
The &lt;term&gt;s are products of variables.  As you would expect, the + and - operators take lower precedence than the multiplications within the &lt;term&gt;s.  For example, <pre>
	ABC+ADF=PQ-PQ
</pre> is a properly formatted equation.  Sometimes, by fixing a single variable at a particular value, we can force the entire equation to always be true.  Return a String[] containing all such variables that satisfy this requirement.  If a variable can be set to n distinct values all of which satisfy this requirement, then that variable should occur n times in the return.  If a variable can be set to an infinite number of distinct values that satisfy this requirement, it should not be returned.  The return should be sorted in alphabetical order.  </td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Definition</h3></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText">Class:</td><td class="statText">VariableSolve</td></tr><tr><td class="statText">Method:</td><td class="statText">getSolutions</td></tr><tr><td class="statText">Parameters:</td><td class="statText">String</td></tr><tr><td class="statText">Returns:</td><td class="statText">String[]</td></tr><tr><td class="statText">Method signature:</td><td class="statText">String[] getSolutions(String equation)</td></tr><tr><td colspan="2" class="statText">(be sure your method is public)</td></tr></table></td></tr><tr><td class="statText">    </td></tr><tr><td class="statText"></td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Constraints</h3></td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText"><b>equation</b> will contain between 3 and 50 characters inclusive.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText"><b>equation</b> will be formatted as described in the problem statement.</td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Examples</h3></td></tr><tr><td align="center" nowrap class="statText">0)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>"P=NP"</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: {"N", "P" }</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">Simpler than it looks: let N = 1 or P = 0.</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">1)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>"RED+BLUE=PURPLE"</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: {"E" }</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">Only E = 0 guarantees the equation holds.</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">2)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>"ABCD+ABCD-ABCD=ABCD"</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: { }</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">Each variable has an infinite number of values causing the equation to hold.</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">3)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>"BAA+BA+B=P-P"</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: {"B" }</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">We cannot consider the complex solutions for A.</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">4)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>"ABB-AB-AB+A=BCB-C"</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: {"B" }</pre></td></tr><tr><td class="statText"></td></tr></table></td></tr></table><hr><p>This problem statement is the exclusive and proprietary property of TopCoder, Inc.  Any unauthorized use or reproduction of this information without the prior written consent of TopCoder, Inc. is strictly prohibited.  (c)2010, TopCoder, Inc.  All rights reserved.  </p>
                      
                   </td>