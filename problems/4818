<td class="problemText" valign="middle" align="left">
                      
              		<table><tr><td colspan="2" class="statText"><h3>Problem Statement</h3></td></tr><tr><td class="statText">    </td><td class="statText"><p>
A <i>caterpillar tree</i> is a tree in which every node is on a central stalk or only one
graph edge away from the stalk. The figure below illustrates to the left a caterpillar tree
with 14 nodes (the stalk marked in blue), and on the right a non-caterpillar tree with 9 nodes.
</p>
<br><img src="http://www.topcoder.com/contest/problem/CaterpillarTree/CaterpillarTree.gif"><p>
Given the description of a tree, determine the least number of nodes that must be removed for
the tree to become a caterpillar tree. The tree will be described as a string of 0's and 1's.
Starting from some node in the tree, a '1' in the string traverses the tree to a previously
unvisited node, while a '0' backtracks to the previous node. The trees in the figure above
would be described as "11101011111010010001000100" and "1111100100110000", respectively,
if the traversals starts at node 1 and the nodes are visited in the numbered orders.
</p>

<p>
Create a class CaterpillarTree containing the method fewestRemovals which takes a String[]
<b>tree</b> containing the description of the tree (concatenate the elements to get the full description),
and returns an int containing the fewest number of nodes that must be removed for the tree
to become a caterpillar tree.
</p>
</td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Definition</h3></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText">Class:</td><td class="statText">CaterpillarTree</td></tr><tr><td class="statText">Method:</td><td class="statText">fewestRemovals</td></tr><tr><td class="statText">Parameters:</td><td class="statText">String[]</td></tr><tr><td class="statText">Returns:</td><td class="statText">int</td></tr><tr><td class="statText">Method signature:</td><td class="statText">int fewestRemovals(String[] tree)</td></tr><tr><td colspan="2" class="statText">(be sure your method is public)</td></tr></table></td></tr><tr><td class="statText">    </td></tr><tr><td class="statText"></td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Constraints</h3></td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText"><b>tree</b> will contain between 1 and 50 elements, inclusive.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">Each element in <b>tree</b> will only contain the characters '0' and '1'.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">Each element in <b>tree</b> will contain between 1 and 50 characters, inclusive.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText"><b>tree</b> will describe a valid tree.</td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Examples</h3></td></tr><tr><td align="center" nowrap class="statText">0)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{"11101011111010010001000100"}</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: 0</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">This is the leftmost picture above. Since it already is a caterpillar tree, no nodes have to be removed.
</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">1)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{"1111100100110000"}</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: 1</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">This is the rightmost picture. One of the leaf nodes to the left must be removed for it to become a caterpillar tree.</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">2)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{"1111100000",
 "1111100000",
 "1111100000",
 "1111100000",
 "1111100000"}</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: 12</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">This is a star graph, with one node in the center and five arms containing five nodes each.
If we delete four of the five nodes in three of the arms, we end up with a graph that
is a caterpillar tree.
</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">3)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{"1","0"}</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: 0</pre></td></tr><tr><td class="statText"></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">4)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{"11110100111100100111100110100110001110101001111000",
 "1101100000011100110000111001101100010000"}</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: 23</pre></td></tr><tr><td class="statText"></td></tr></table></td></tr></table><hr><p>This problem statement is the exclusive and proprietary property of TopCoder, Inc.  Any unauthorized use or reproduction of this information without the prior written consent of TopCoder, Inc. is strictly prohibited.  (c)2010, TopCoder, Inc.  All rights reserved.  </p>
                      
                   </td>