<td class="problemText" valign="middle" align="left">
                      
              		<table><tr><td colspan="2" class="statText"><h3>Problem Statement</h3></td></tr><tr><td class="statText">    </td><td class="statText"><p>
You have an old "word search" puzzle which consists of a rectangular
grid of letters in which several words are hidden. Each word may begin
anywhere in the puzzle, and may be oriented in any straight line
horizontally, vertically, or diagonally (forwards or backwards oriented).
The puzzle is so old that some of the letters have been washed out and
you can not recognize them anymore. Your task is to recover the
washed out letters so that the puzzle is solvable - i.e., all given
words can be found in the letter grid.
</p>
<p>
You will be given <b>grid</b>, representing the letter grid, with each
washed out letter replaced by a period ('.'). Further, you will be given
<b>words</b>, the list of words that can be found in the grid. You are
to return the letter grid with the washed out letters replaced by the
original letters in those positions. There will be one unique way to
replace the washed out letters such that all the words can be found
in the grid.
</p>
</td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Definition</h3></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText">Class:</td><td class="statText">WordGrid</td></tr><tr><td class="statText">Method:</td><td class="statText">fillSpaces</td></tr><tr><td class="statText">Parameters:</td><td class="statText">String[], String[]</td></tr><tr><td class="statText">Returns:</td><td class="statText">String[]</td></tr><tr><td class="statText">Method signature:</td><td class="statText">String[] fillSpaces(String[] grid, String[] words)</td></tr><tr><td colspan="2" class="statText">(be sure your method is public)</td></tr></table></td></tr><tr><td class="statText">    </td></tr><tr><td class="statText"></td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Notes</h3></td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">Although the solution to this problem will be unique, the solution of the resulting "word search" puzzle need not be unique - i.e., a word can be located in more than one position in the final grid (see example 1).</td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Constraints</h3></td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText"><b>grid</b> will contain between 1 and 50 elements, inclusive.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">Each element of <b>grid</b> will contain between 1 and 50 characters, inclusive.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">All elements of <b>grid</b> will have the same number of characters.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">All characters of all elements of <b>grid</b> will be uppercase letters ('A'-'Z') or periods ('.').</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText"><b>grid</b> will contain no more than 3 periods.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText"><b>words</b> will have between 1 and 50 elements, inclusive.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">Each element of <b>words</b> will contain between 1 and 50 characters, inclusive.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">Each element of <b>words</b> will be unique.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">All characters of all elements of <b>words</b> will be uppercase letters ('A'-'Z').</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">There will be one unique way to replace the washed out letters such that all the words can be found in the grid.</td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Examples</h3></td></tr><tr><td align="center" nowrap class="statText">0)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{"ABCD",
 "E..H",
 "I.KL",
 "MNOP"}</pre></td></tr><tr><td class="statText"><pre>{"AFK", "DGJM"}</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: {"ABCD", "EFGH", "IJKL", "MNOP" }</pre></td></tr><tr><td class="statText"></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">1)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{"AAAAA",
 "ABBBA",
 "AB.BA",
 "ABBBA",
 "AAAAA"}</pre></td></tr><tr><td class="statText"><pre>{"ABC"}</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: {"AAAAA", "ABBBA", "ABCBA", "ABBBA", "AAAAA" }</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">We must fill the center square with a 'C' in order to be able to find "ABC" in the grid. Note that in that case "ABC" can be located at 8 different positions in the grid.</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">2)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{"AAAAAAAAAAAAAAAAAAAAAAAA",
 "AAAAAAAAAFAAAGAAAAAAAAAA",
 "AAAAAAAAAA...AAAAAAAAAAA",
 "AAAAAAAAAAAAAAAAAAAAAAAA",
 "AAAAAAAAAAAAAAAAAAAAAAAA",
 "AAAAAAAAAAAAAAAAAAAAAAAA"}</pre></td></tr><tr><td class="statText"><pre>{"B", "C", "D", "AB", "AC", "AD", "BA", "CA", "DA",
 "AAB", "AAC", "AAD", "BAA", "CAA", "DAA", "AAAB",
 "AAAC", "AAAD", "BAAA", "CAAA", "DAAA", "AAAAB",
 "BAAAA", "AAAAAB", "BAAAAA", "AAAAAAB", "BAAAAAA",
 "AAAAAAAB", "BAAAAAAA", "AAAAAAAAB", "BAAAAAAAA",
 "AAAAAAAAAB", "BAAAAAAAAA", "AAAAAAAAAAB", "BAAAAAAAAAA",
 "AAAAD", "DAAAA", "AAAAAD", "DAAAAA", "AAAAAAD",
 "DAAAAAA", "AAAAAAAD", "DAAAAAAA", "AAAAAAAAD",
 "DAAAAAAAA", "AAAAAAAAAD", "DAAAAAAAAA", "AAAAAAAAAAD",
 "DAAAAAAAAAA", "AAAAAAAAAAAD"}</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: 
{"AAAAAAAAAAAAAAAAAAAAAAAA",
"AAAAAAAAAFAAAGAAAAAAAAAA",
"AAAAAAAAAABCDAAAAAAAAAAA",
"AAAAAAAAAAAAAAAAAAAAAAAA",
"AAAAAAAAAAAAAAAAAAAAAAAA",
"AAAAAAAAAAAAAAAAAAAAAAAA" }</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">Beware of timeout!</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">3)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{"ABCD",
 "EFGH"}</pre></td></tr><tr><td class="statText"><pre>{"AF", "HD"}</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: {"ABCD", "EFGH" }</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">Nothing to do here (all letters of the grid are known in advance, so the same grid is returned).</td></tr></table></td></tr></table></td></tr></table><hr><p>This problem statement is the exclusive and proprietary property of TopCoder, Inc.  Any unauthorized use or reproduction of this information without the prior written consent of TopCoder, Inc. is strictly prohibited.  (c)2010, TopCoder, Inc.  All rights reserved.  </p>
                      
                   </td>