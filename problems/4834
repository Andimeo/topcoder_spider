<td class="problemText" valign="middle" align="left">
                      
              		<table><tr><td colspan="2" class="statText"><h3>Problem Statement</h3></td></tr><tr><td class="statText">    </td><td class="statText">On your previous quest you acquired a priceless "infinite sack".  This wondrous piece of luggage will hold an endless number of items but there is a catch.  The last item you put in is the first one that comes out.  Accounting for this restriction, you plan your next journey.<br><br>
You begin at location 0, your home.  Element <i>k</i> of <b>dests</b> is a space-separated list of locations that can be reached from location <i>k</i>.  For each listed location <i>j</i>, element <i>k</i> of <b>trades</b> contains a 2-letter code NG.  N is a character  describing which item is needed to make the trip from location <i>k</i> to location <i>j</i>.  G is also a character, and describes the item you will acquire by taking the trip.  At least one of N or G will be '_', meaning you do not need an item, or do not acquire an item for the trip, respectively.  For example, suppose element 3 of <b>dests</b> and <b>trades</b> are as given below.
<pre>
<b>dests</b>[3]  = "0 3 0 4"
<b>trades</b>[3] = "a_ __ _B D_"
</pre>
One possible way to get from location 3 to location 0 requires item 'a' and earns you nothing.  Another requires no item but you find item 'B'.  The trip that returns to location 3 requires no item but also earns no item.  Lastly, the trip to location 4 requires 'D', but produces nothing.<br><br>
You can only take a trip that requires the next item you can pull out of your sack.  Trips that require no item can always be taken.  For example, to take the "a_" trip mentioned above, the next item that you pull out of your sack would have to be 'a'.  This item is removed.  You will return a int[] containing the locations that can be reached via 0 or more trips from location 0.  It should be sorted in strictly increasing order.  Since we allow 0 trips, the first element will always be 0.  Your sack is initially empty, so no item can be pulled out.  </td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Definition</h3></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText">Class:</td><td class="statText">SackJourney</td></tr><tr><td class="statText">Method:</td><td class="statText">canReach</td></tr><tr><td class="statText">Parameters:</td><td class="statText">String[], String[]</td></tr><tr><td class="statText">Returns:</td><td class="statText">int[]</td></tr><tr><td class="statText">Method signature:</td><td class="statText">int[] canReach(String[] dests, String[] trades)</td></tr><tr><td colspan="2" class="statText">(be sure your method is public)</td></tr></table></td></tr><tr><td class="statText">    </td></tr><tr><td class="statText"></td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Notes</h3></td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">The only transactions that can be made with your sack are the ones that correspond to trips.</td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Constraints</h3></td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText"><b>dests</b> will contain between 2 and 20 elements inclusive.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText"><b>trades</b> will contain the same number of elements as <b>dests</b>.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">Each element of <b>dests</b> will contain between 0 and 50 characters inclusive.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">Each element of <b>trades</b> will contain between 0 and 50 characters inclusive.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">Each element of <b>dests</b> will be a single-space separated list of integers with no extra leading zeros.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">Each integer in <b>dests</b> will be between 0 and N-1, where N is the number of elements in <b>dests</b>.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">Each element of <b>trades</b> will be a single-space separated list of 2 character sequences.  Each character will be a letter ('A'-'Z','a'-'z') or an underscore ('_').  At least one of the characters in each sequence will be an underscore.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">Each element of <b>trades</b> will contain the same number of 2 character sequences as the corresponding element of <b>dests</b> contains integers.</td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Examples</h3></td></tr><tr><td align="center" nowrap class="statText">0)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{"1","2",""}</pre></td></tr><tr><td class="statText"><pre>{"_A","A_",""}</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: {0, 1, 2 }</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">We can get to location 1 with 'A' in our sack.  Removing this 'A', we can travel to location 2.</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">1)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{"1","2",""}</pre></td></tr><tr><td class="statText"><pre>{"_A","b_",""}</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: {0, 1 }</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">Unlike the first example, we cannot get to location 2 since we need a 'b'.</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">2)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{"0 0 1","2","3","4","5",""}</pre></td></tr><tr><td class="statText"><pre>{"_A _B __","B_","A_","__","C_",""}</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: {0, 1, 2, 3, 4 }</pre></td></tr><tr><td class="statText"></td></tr></table></td></tr></table><hr><p>This problem statement is the exclusive and proprietary property of TopCoder, Inc.  Any unauthorized use or reproduction of this information without the prior written consent of TopCoder, Inc. is strictly prohibited.  (c)2010, TopCoder, Inc.  All rights reserved.  </p>
                      
                   </td>