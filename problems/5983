<td class="problemText" valign="middle" align="left">
                      
              		<table><tr><td colspan="2" class="statText"><h3>Problem Statement</h3></td></tr><tr><td class="statText">    </td><td class="statText"><p>Run-length encoding is a simple compression technique which compresses strings of letters by replacing repeated consecutive letters (called <i>runs</i>) by the number of occurrences of the letter, followed by that letter. For example, <tt>AAAABBBCDDE</tt> compresses to <tt>4A3BC2DE</tt>. The number 1 may be omitted in runs consisting of a single letter, as with letters '<tt>C</tt>' and '<tt>E</tt>' in the previous example.</p>

<p>Any string consisting of uppercase letters where each letter is optionally preceded by a positive integer is called a <i>properly encoded string</i>. Given a properly encoded string <b>text</b>, return the decoded string. If the decoded string would be more than 50 characters long, return "<tt>TOO LONG</tt>" (without the quotes).</p>
</td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Definition</h3></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText">Class:</td><td class="statText">RunLengthEncoding</td></tr><tr><td class="statText">Method:</td><td class="statText">decode</td></tr><tr><td class="statText">Parameters:</td><td class="statText">String</td></tr><tr><td class="statText">Returns:</td><td class="statText">String</td></tr><tr><td class="statText">Method signature:</td><td class="statText">String decode(String text)</td></tr><tr><td colspan="2" class="statText">(be sure your method is public)</td></tr></table></td></tr><tr><td class="statText">    </td></tr><tr><td class="statText"></td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Constraints</h3></td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText"><b>text</b> will contain between 0 and 50 characters ('0'-'9', 'A'-'Z'), inclusive.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText"><b>text</b> will be a properly encoded string: all numbers contained will be positive integers with no leading zeros and each number will precede a letter.</td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Examples</h3></td></tr><tr><td align="center" nowrap class="statText">0)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>"4A3BC2DE"</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: "AAAABBBCDDE"</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">This is the example in the problem statement.</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">1)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>"1A1B1C1D1E"</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: "ABCDE"</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">1's can be omitted, but also may appear in the input. This input is valid, although we'd doubled the size of the string by "compressing" it.
</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">2)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>"1A3A5A4BCCCC"</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: "AAAAAAAAABBBBCCCC"</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">Although it isn't the best possible, this is also a properly encoded string.</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">3)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>"50A"</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"</pre></td></tr><tr><td class="statText"></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">4)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>"21Z13S9A8M"</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: "TOO LONG"</pre></td></tr><tr><td class="statText"></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">5)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>"123456789012345678901234567890B"</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: "TOO LONG"</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">The decoded string would be more than 10^30 characters long, which is more than 50.</td></tr></table></td></tr></table></td></tr></table><hr><p>This problem statement is the exclusive and proprietary property of TopCoder, Inc.  Any unauthorized use or reproduction of this information without the prior written consent of TopCoder, Inc. is strictly prohibited.  (c)2010, TopCoder, Inc.  All rights reserved.  </p>
                      
                   </td>