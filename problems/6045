<td class="problemText" valign="middle" align="left">
                      
              		<table><tr><td colspan="2" class="statText"><h3>Problem Statement</h3></td></tr><tr><td class="statText">    </td><td class="statText">You are in a chat room that supports nickname tab-completion.  Suppose
the input buffer now contains the string s and you decide to use the
completion facility.  The first time you press tab you will be shown
the lexicographically first element of <b>names</b> that has s as a
prefix.  Pressing tab again will give the lexicographically second,
and so forth.  Once the possible options are exhausted the tab key
will do nothing.  Having found a completion that suits you, you may
either press enter to complete the word you are typing, or continue
typing characters into the input buffer.  If you decide to type
characters, they will be appended to the current completion.  Your goal
is to type the word <b>w</b>, followed by the enter key, using as few
keystrokes as possible.  Each character and each tab key count as single
keystrokes.  By interchanging character typing and tab completion
sequences as many times as you like, return the fewest number of
keystrokes required.
</td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Definition</h3></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText">Class:</td><td class="statText">CheapestTabComplete</td></tr><tr><td class="statText">Method:</td><td class="statText">getFewest</td></tr><tr><td class="statText">Parameters:</td><td class="statText">String[], String</td></tr><tr><td class="statText">Returns:</td><td class="statText">int</td></tr><tr><td class="statText">Method signature:</td><td class="statText">int getFewest(String[] names, String w)</td></tr><tr><td colspan="2" class="statText">(be sure your method is public)</td></tr></table></td></tr><tr><td class="statText">    </td></tr><tr><td class="statText"></td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Notes</h3></td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">If the buffer is empty, then every element of <b>names</b> is a possible completion for the buffer.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">The only allowed keystrokes are letters, tabs, and enter.</td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Constraints</h3></td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText"><b>names</b> will contain between 0 and 50 elements, inclusive.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">Each element of <b>names</b> will contain between 1 and 50 lowercase letters ('a'-'z'), inclusive.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText"><b>w</b> will contain between 1 and 50 lowercase letters ('a'-'z'), inclusive.</td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Examples</h3></td></tr><tr><td align="center" nowrap class="statText">0)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{}</pre></td></tr><tr><td class="statText"><pre>"myname"</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: 7</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">Since tab is useless, we type in the 6 letters of myname and then press enter.</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">1)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{"myn","myname"}</pre></td></tr><tr><td class="statText"><pre>"myname"</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: 3</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">Here we press tab twice, and then enter.</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">2)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{"abc","ab","abcd","frankies","frank","a","a"}</pre></td></tr><tr><td class="statText"><pre>"frankie"</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: 5</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">Here we type 'f', then tab, then 'i', 'e', and finally enter.</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">3)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{"a","a","f","f","fr","fr","fra","fra","fran","fran","frank","frank"}</pre></td></tr><tr><td class="statText"><pre>"frankie"</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: 8</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">Due to the weird set of names, tab is of no use.</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">4)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{"a","a","bcde","bcde","bcde","bcdefghij"}</pre></td></tr><tr><td class="statText"><pre>"bcdefghijk"</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: 6</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText"></td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">5)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{"aaaa","aaaa","aaaa","aaaa","aaaa"}</pre></td></tr><tr><td class="statText"><pre>"aaaaaaaaaaaaaaaaaaaaaaa"</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: 21</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText"></td></tr></table></td></tr></table></td></tr></table><hr><p>This problem statement is the exclusive and proprietary property of TopCoder, Inc.  Any unauthorized use or reproduction of this information without the prior written consent of TopCoder, Inc. is strictly prohibited.  (c)2010, TopCoder, Inc.  All rights reserved.  </p>
                      
                   </td>