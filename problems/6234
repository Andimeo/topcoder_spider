<td class="problemText" valign="middle" align="left">
                      
              		<table><tr><td colspan="2" class="statText"><h3>Problem Statement</h3></td></tr><tr><td class="statText">    </td><td class="statText"><p>
One form of data compression is to use a dictionary of symbols and
their expansions, which can contain other dictionary symbols.  Thus
if we have the dictionary
</p>
<pre>
   A=bCc
   c=123
   b=c119
</pre>
<p>
then an occurrence of c119 in the original text could be represented by
the string b instead (which would require that b not occur in the original
text).  This substitution by dictionary entries can repeat, and uncompression
is just the reverse of compression, looking up each character to see if it occurs
in the dictionary and if so expanding it.  For instance, the compressed text aAa
uses a dictionary entry for A, and so expands to abCca, and then to ac119C123a, then to
a123119C123a, at which point expansion would stop because no remaining
symbols have corresponding dictionary entries.  (Note that we are
not restricting dictionary symbols to be upper case or letters; any
character a-z A-Z 0-9 and _ can be a dictionary symbol.)
</p><p>
Given a dictionary <b>dictionary</b>, a compressed string <b>haystack</b> to search,
and a literal string (not compressed) <b>needle</b> to search for, return the earliest 
0-based position of the literal string in the expanded, uncompressed original string.
Return -1 if the literal string does not occur in the uncompressed string.

The dictionary is formatted as "X=abcde", where X is the compressed representation of
the string "abcde" (which itself may be compressed using other dictionary entries).

For instance, if the
compressed string is abCca, with the dictionary above, and the string
to search for is 9C1, then the result is 6.
</p></td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Definition</h3></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText">Class:</td><td class="statText">CompressedStringSearch</td></tr><tr><td class="statText">Method:</td><td class="statText">indexOf</td></tr><tr><td class="statText">Parameters:</td><td class="statText">String[], String, String</td></tr><tr><td class="statText">Returns:</td><td class="statText">long</td></tr><tr><td class="statText">Method signature:</td><td class="statText">long indexOf(String[] dictionary, String haystack, String needle)</td></tr><tr><td colspan="2" class="statText">(be sure your method is public)</td></tr></table></td></tr><tr><td class="statText">    </td></tr><tr><td class="statText"></td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Constraints</h3></td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">Dictionary will contain between 0 and 50 elements, inclusive.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">Each element of dictionary will contain between 2 and 50 characters, inclusive.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">Strings in dictionary are composed of the characters a-z, A-Z, 0-9, _, and =.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">Each element of dictionary will have a second character of '=', and no other character of '='.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">The dictionary must not be recursive; every symbol should resolve to some finite string.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">Each element of dictionary will have a distinct first character.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">Haystack for will have between 1 and 50 characters, inclusive.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">Haystack will be composed of the characters a-z, A-Z, 0-9, and _.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">Needle will have between 1 and 50 characters, inclusive.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">Needle will be composed of the characters a-z, A-Z, 0-9, and _.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">Needle will not contain any characters that occur in the first position in any string in dictionary.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">The length of a fully uncompressed dictionary entry will be less than 2^50.</td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Examples</h3></td></tr><tr><td align="center" nowrap class="statText">0)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{"A=bCc","c=123","b=c119"}</pre></td></tr><tr><td class="statText"><pre>"abCca"</pre></td></tr><tr><td class="statText"><pre>"9C1"</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: 6</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">The string "abCca" expands to "ac119C123a" which expands to "a123119C123a".  At this point no more characters exist in the string that have corresponding entries in the dictionary, so we have the full uncompressed string.  The first occurrence of "9C1" is at position 6.</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">1)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{}</pre></td></tr><tr><td class="statText"><pre>"nowisthetimeforallgoodmen"</pre></td></tr><tr><td class="statText"><pre>"time"</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: 8</pre></td></tr><tr><td class="statText"></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">2)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{}</pre></td></tr><tr><td class="statText"><pre>"time"</pre></td></tr><tr><td class="statText"><pre>"nowisthetimeforallgoodmen"</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: -1</pre></td></tr><tr><td class="statText"></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">3)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{"A=BBB","B=CCC","C=DDD","D=EEE","E=FFF","F=GGG","G=HHH","H=III","I=JJJ",
 "J=KKK","K=LLL","L=MMM","M=NNN","N=OOO","O=PPP","P=QQQ","Q=RRR","R=SSS",
 "S=TTT","T=UUU","U=VVV","V=WWW","W=XXX","X=YYY","Y=ZZZ","Z=000","0=111"}</pre></td></tr><tr><td class="statText"><pre>"Atime"</pre></td></tr><tr><td class="statText"><pre>"1time"</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: 7625597484986</pre></td></tr><tr><td class="statText"></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">4)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{"A=three_blind_mice","B=_the","C=By_","D=_see_","E=_a_","F=ife_","G=_you","H=DhowCrun","I=all_ran_after",
 "J=_farmers_w","K=who_cut_offBir_tails_withEcarvingknF","L=didG_everDsuchEthing_in"}</pre></td></tr><tr><td class="statText"><pre>"A_AHHCIBJFKLGr_lFas_A"</pre></td></tr><tr><td class="statText"><pre>"your_life_as_three"</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: 181</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">A compressed nursery rhyme.</td></tr></table></td></tr></table></td></tr></table><hr><p>This problem statement is the exclusive and proprietary property of TopCoder, Inc.  Any unauthorized use or reproduction of this information without the prior written consent of TopCoder, Inc. is strictly prohibited.  (c)2010, TopCoder, Inc.  All rights reserved.  </p>
                      
                   </td>