<td class="problemText" valign="middle" align="left">
                      
              		<table><tr><td colspan="2" class="statText"><h3>Problem Statement</h3></td></tr><tr><td class="statText">    </td><td class="statText">You will be given a String <b>formula</b> that adheres to the folowing pseudo-grammar (quotes for clarity):<pre>
  &lt;FORMULA&gt; :== D(&lt;FORMULA&gt;) | I(&lt;FORMULA&gt;) | T(&lt;NUM&gt;,&lt;FORMULA&gt;) | 'f'
      &lt;NUM&gt; :== a positive integer between 1 and 100 inclusive with no leading zeros
</pre>
The following congruences allow us to change a formula into an equivalent one (here F denotes some &lt;FORMULA&gt;):<pre>
      D(I(F)) == F
      I(D(F)) == F
    D(T(i,F)) == T(i-1,D(F))
    I(T(i,F)) == T(i+1,I(F))
</pre>
Return a String describing a formula equivalent to the input such that the total number of 'D's and 'I's is minimized.  The returned value must be formatted like the input.  If there are multiple possible return values, choose the one where no 'D' or 'I' could be nested deeper using a single congruence.  Remember that any number in the returned value, as well as in any intermediate formulae, must be between 1 and 100, inclusive.</td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Definition</h3></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText">Class:</td><td class="statText">TaylorAlgebra</td></tr><tr><td class="statText">Method:</td><td class="statText">getCanonical</td></tr><tr><td class="statText">Parameters:</td><td class="statText">String</td></tr><tr><td class="statText">Returns:</td><td class="statText">String</td></tr><tr><td class="statText">Method signature:</td><td class="statText">String getCanonical(String formula)</td></tr><tr><td colspan="2" class="statText">(be sure your method is public)</td></tr></table></td></tr><tr><td class="statText">    </td></tr><tr><td class="statText"></td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Constraints</h3></td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText"><b>formula</b> will contain between 1 and 50 characters, inclusive.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText"><b>formula</b> will adhere to the grammar in the statement.</td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Examples</h3></td></tr><tr><td align="center" nowrap class="statText">0)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>"T(100,f)"</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: "T(100,f)"</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">None of the congruences are appropriate.</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">1)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>"D(T(50,f))"</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: "T(49,D(f))"</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">The 'D' can be nested more deeply.</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">2)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>"D(T(1,f))"</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: "D(T(1,f))"</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">We want to push the 'D' inward, but that would drop the number lower than 1.</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">3)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>"I(T(100,f))"</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: "I(T(100,f))"</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">Pushing the 'I' inward would force the number above 100.</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">4)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>"D(T(40,I(f)))"</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: "T(39,f)"</pre></td></tr><tr><td class="statText"></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">5)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>"I(T(40,D(f)))"</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: "T(41,f)"</pre></td></tr><tr><td class="statText"></td></tr></table></td></tr></table><hr><p>This problem statement is the exclusive and proprietary property of TopCoder, Inc.  Any unauthorized use or reproduction of this information without the prior written consent of TopCoder, Inc. is strictly prohibited.  (c)2010, TopCoder, Inc.  All rights reserved.  </p>
                      
                   </td>