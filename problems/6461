<td class="problemText" valign="middle" align="left">
                      
              		<table><tr><td colspan="2" class="statText"><h3>Problem Statement</h3></td></tr><tr><td class="statText">    </td><td class="statText"><p>
You are running a TV network that has the rights to transmit the olympic games. The network is going to create several channels that transmit events of the games continuously. Few rules have been established for these new channels:
</p><ul><li>Each event cannot be transmitted on more than one channel</li>
<li>Any part of an event may be included in the scheduled programming, even if the beginning and/or the end of it are excluded, but at most one interval of the event can be shown</li>
<li>Each channel must have a continuous transmission</li>
</ul><p>
You will be given the schedule of the olympics in 2 int[]s <b>startingTime</b> and <b>endingTime</b>, with the ith element of <b>startingTime</b> and <b>endingTime</b> representing the starting and ending time of the ith scheduled event in a special time unit (each interval contains both endpoints, see examples for further clarification). The duration of the games is exactly <b>totalUnits</b> of this time units, which means that the transmition of all the created channels must start at time 0 and end at time <b>totalUnits</b>. Return the maximum number of channels that can be created while satisfying these network policies.
</p></td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Definition</h3></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText">Class:</td><td class="statText">OlympicsBroadcasting</td></tr><tr><td class="statText">Method:</td><td class="statText">getMaxChannels</td></tr><tr><td class="statText">Parameters:</td><td class="statText">int[], int[], int</td></tr><tr><td class="statText">Returns:</td><td class="statText">int</td></tr><tr><td class="statText">Method signature:</td><td class="statText">int getMaxChannels(int[] startingTime, int[] endingTime, int totalUnits)</td></tr><tr><td colspan="2" class="statText">(be sure your method is public)</td></tr></table></td></tr><tr><td class="statText">    </td></tr><tr><td class="statText"></td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Constraints</h3></td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText"><b>startingTime</b> will have between 1 and 50 elements, inclusive.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText"><b>startingTime</b> and <b>endingTime</b> will have the same number of elements.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText"><b>totalUnits</b> will be between 1 and 1000000000 (10<sup>9</sup>), inclusive.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">Each element of <b>startingTime</b> and <b>endingTime</b> will be between 0 and <b>totalUnits</b>, inclusive.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">The ith element of <b>endingTime</b> will be greater than the ith element of <b>startingTime</b>.</td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Examples</h3></td></tr><tr><td align="center" nowrap class="statText">0)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{0,1,1,1,0}</pre></td></tr><tr><td class="statText"><pre>{2,2,3,3,3}</pre></td></tr><tr><td class="statText"><pre>3</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: 2</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">We can make 2 channels:
<ol><li> Event with index 0 from time 0 to time 2 and event 2 from 2 to 3. </li>
<li> Event with index 4 from time 0 to time 3. </li>
</ol></td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">1)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{0}</pre></td></tr><tr><td class="statText"><pre>{1000}</pre></td></tr><tr><td class="statText"><pre>1000</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: 1</pre></td></tr><tr><td class="statText"></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">2)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{0,1,2,3,4}</pre></td></tr><tr><td class="statText"><pre>{1,2,3,4,5}</pre></td></tr><tr><td class="statText"><pre>5</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: 1</pre></td></tr><tr><td class="statText"></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">3)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{0,4,8}</pre></td></tr><tr><td class="statText"><pre>{3,9,12}</pre></td></tr><tr><td class="statText"><pre>12</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: 0</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">There is no way to cover the 3-4 interval.</td></tr></table></td></tr></table></td></tr></table><hr><p>This problem statement is the exclusive and proprietary property of TopCoder, Inc.  Any unauthorized use or reproduction of this information without the prior written consent of TopCoder, Inc. is strictly prohibited.  (c)2010, TopCoder, Inc.  All rights reserved.  </p>
                      
                   </td>