<td class="problemText" valign="middle" align="left">
                      
              		<table><tr><td colspan="2" class="statText"><h3>Problem Statement</h3></td></tr><tr><td class="statText">    </td><td class="statText"><p>You are given a rectangular grid, each cell containing an integer (not necessarily positive) number, denoting its cost. Find the cheapest connected set of cells (possibly empty), and return its cost. The cost of the set of cells is defined as the sum of the costs of its cells. A set is <i>connected</i> if you can get from any cell of the set to any other cell of the set by moving between adjacent cells of the set. Two cells are <i>adjacent</i> if they share a side (so each non-border cell has four adjacent cells).</p>

<p>The grid is given as a String[] <b>cells</b>, where each element contains a list of single-space separated integers. Each element of <b>cells</b> represents a row of the grid from left to right, and the rows are ordered from top to bottom.</p></td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Definition</h3></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText">Class:</td><td class="statText">CheapestIsland</td></tr><tr><td class="statText">Method:</td><td class="statText">minCost</td></tr><tr><td class="statText">Parameters:</td><td class="statText">String[]</td></tr><tr><td class="statText">Returns:</td><td class="statText">int</td></tr><tr><td class="statText">Method signature:</td><td class="statText">int minCost(String[] cells)</td></tr><tr><td colspan="2" class="statText">(be sure your method is public)</td></tr></table></td></tr><tr><td class="statText">    </td></tr><tr><td class="statText"></td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Constraints</h3></td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText"><b>cells</b> will contain between 1 and 9 elements, inclusive.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">Each element of <b>cells</b> will contain between 1 and 50 characters, inclusive.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">Each element of <b>cells</b> will contain between 1 and 9 integers, inclusive, separated by single spaces.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">All elements of <b>cells</b> will contain the same number of integers.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">Each integer in <b>cells</b> will be between -1000 and 1000, inclusive, and contain no extra leading zeroes.</td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Examples</h3></td></tr><tr><td align="center" nowrap class="statText">0)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{"-10 1", 
"2 -10"}</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: -19</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">To connect both -10's, we need to choose between 1 and 2, and 1 is obviously better.</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">1)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{"1 2 3", 
"4 5 6", 
"7 8 9"}</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: 0</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">No need to take any cell here, as they are all positive.</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">2)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{"-5 100 -5", 
"-5 100 -5"}</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: -10</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">Sometimes it's not good to take all the negative numbers.</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">3)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{"-1 -1 1 -1 -1",
"-1 -1 1 -1 -1",
"-1 -1 1 -1 -1",
"99 99 99 99 99",
"-1 -1 -1 -1 -1",
"-1 -1 -1 -1 -1"}
</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: -11</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText"></td></tr></table></td></tr></table></td></tr></table><hr><p>This problem statement is the exclusive and proprietary property of TopCoder, Inc.  Any unauthorized use or reproduction of this information without the prior written consent of TopCoder, Inc. is strictly prohibited.  (c)2010, TopCoder, Inc.  All rights reserved.  </p>
                      
                   </td>