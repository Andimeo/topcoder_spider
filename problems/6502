<td class="problemText" valign="middle" align="left">
                      
              		<table><tr><td colspan="2" class="statText"><h3>Problem Statement</h3></td></tr><tr><td class="statText">    </td><td class="statText">The front of your house is covered with decorative square bricks, and you're worried that some of the bricks aren't properly supported and may fall down.  You want to add enough bricks so that the wall is stable.  In the below diagram, bricks are marked with 'X' and empty spaces are marked with '.'.
<br><br><pre>
..X...X.....
....X.X...XX
...........X
..X.......X.
</pre>
<br>
The wall is stable if each brick is supported by bricks all the way to the ground.  To fix the wall above, you would need to add 8 bricks in the positions marked with '#' below:
<br><br><pre>
..X...X.....
..#.X.X...XX
..#.#.#...#X
..X.#.#...X#
</pre>
<br>
Each element of <b>wallRows</b> contains one row of the wall - in order from top to bottom - with 'X' for bricks and '.' for open spaces.  Return the minimum number of bricks that must be added in order to make the wall stable (see example 0 for more info).</td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Definition</h3></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText">Class:</td><td class="statText">WallRepair</td></tr><tr><td class="statText">Method:</td><td class="statText">bricksRequired</td></tr><tr><td class="statText">Parameters:</td><td class="statText">String[]</td></tr><tr><td class="statText">Returns:</td><td class="statText">int</td></tr><tr><td class="statText">Method signature:</td><td class="statText">int bricksRequired(String[] wallRows)</td></tr><tr><td colspan="2" class="statText">(be sure your method is public)</td></tr></table></td></tr><tr><td class="statText">    </td></tr><tr><td class="statText"></td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Constraints</h3></td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText"><b>wallRows</b> will contain between 1 and 50 elements, inclusive.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">Each element of <b>wallRows</b> will contain between 1 and 50 characters, inclusive.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">Each element of <b>wallRows</b> will contain the same number of characters.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">Each element of <b>wallRows</b> will contain only '.' and 'X' characters.</td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Examples</h3></td></tr><tr><td align="center" nowrap class="statText">0)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{
"..X...X.....",
"....X.X...XX",
"...........X",
"..X.......X."}</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: 8</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">The example from the problem statement.  Basically you find a hole with a brick above it, and put a brick there.  You keep doing this until there are no holes with bricks above them (and therefore no bricks with holes below).</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">1)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{".X...X..X"}</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: 0</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">Bricks on the lowest level do not need to be supported.</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">2)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{
".........X............",
"......X..X..X..X......",
"X.......X..X.........X",
"....XXXXX..X.XXXXX...X",
".....X..X..X.........X",
"...X....X..X.........X",
".X...XX..X..X..X......",
".....X...X...XX......X"}</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: 53</pre></td></tr><tr><td class="statText"></td></tr></table></td></tr></table><hr><p>This problem statement is the exclusive and proprietary property of TopCoder, Inc.  Any unauthorized use or reproduction of this information without the prior written consent of TopCoder, Inc. is strictly prohibited.  (c)2010, TopCoder, Inc.  All rights reserved.  </p>
                      
                   </td>