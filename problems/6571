<td class="problemText" valign="middle" align="left">
                      
              		<table><tr><td colspan="2" class="statText"><h3>Problem Statement</h3></td></tr><tr><td class="statText">    </td><td class="statText">When programming, I don't like to take my fingers off the keyboard, and hence, I don't use the mouse.  So, when navigating my source, I like to do so in such a way as to minimize keystrokes.  My text editor supports the following keystrokes: left, right, up, down, home, end, top, bottom, word left and word right.  The word left and word right keystrokes position the cursor at a word beginning; a word beginning is the first letter of the word.  None of the keystrokes cause the cursor to wrap.  When moving the cursor vertically, my text editor does not change the cursor's horizontal position.  So, if the cursor is at column 50 and the up arrow is pressed, moving the cursor to a row with only 10 characters, only the row changes.  My text editor does not allow the cursor to be positioned left of the first column, above the first row or below the last row.  

<br><br>The keys left, right, up, down, home, end, top, bottom, word left and word
right behave as described below:

<br><br>1.  left, right, up and down - move the cursor one position in the indicated direction (see notes).  
<br>2.  home - causes the cursor to move to column 0 of the current row.
<br>3.  end - causes the cursor to move to the last character of <b>source</b> in the current row.
<br>4.  top - causes the cursor to move to the top row (row 0) retaining its column position.
<br>5.  bottom - causes the cursor to move to the bottom row retaining its column position.
<br>6. word left - causes the cursor to jump to the first word beginning that is strictly left of the cursor position, if one exists.  Otherwise does nothing. 
<br>7. word right - causes the cursor to jump to the first word beginning that is strictly right of the cursor position, if one exists.  Otherwise does nothing.

<br><br>You will be given a String[] <b>source</b> representing the source code, a int[] <b>start</b> representing the starting position of the cursor and a int[] <b>finish</b> representing the ending position of the cursor.  The first int in both <b>start</b> and <b>finish</b> specifies the 0-indexed row and the second int specifies the 0-indexed column.  You are to calculate and return the minimum number of keystrokes required to get from <b>start</b> to <b>finish</b>.</td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Definition</h3></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText">Class:</td><td class="statText">TextEditorNavigation</td></tr><tr><td class="statText">Method:</td><td class="statText">keystrokes</td></tr><tr><td class="statText">Parameters:</td><td class="statText">String[], int[], int[]</td></tr><tr><td class="statText">Returns:</td><td class="statText">int</td></tr><tr><td class="statText">Method signature:</td><td class="statText">int keystrokes(String[] source, int[] start, int[] finish)</td></tr><tr><td colspan="2" class="statText">(be sure your method is public)</td></tr></table></td></tr><tr><td class="statText">    </td></tr><tr><td class="statText"></td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Notes</h3></td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">For the purposes of this problem, we use the convention that the cursor covers each character.  Some editors (normally in "insert mode") have the cursor preceding each character.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">A keypress may not have any effect.  For example, pressing up in the top row does nothing, pressing left in the first column does nothing and pressing down in the bottom row does nothing.  Pressing right always has an effect.</td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Constraints</h3></td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText"><b>source</b> will contain between 1 and 50 elements, inclusive.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">Each element of <b>source</b> will contain between 1 and 50 characters, inclusive.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">Each character must be a letter ('a'-'z', 'A'-'Z') or ' '.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText"><b>start</b> and <b>finish</b> will each contain exactly 2 elements.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText"><b>start</b> and <b>finish</b> will each represent character positions that exist in <b>source</b>.</td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Examples</h3></td></tr><tr><td align="center" nowrap class="statText">0)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{"AAAAA AAA AAAAAAAAAAAAA  AAAA",
 "AA   AAAAAAAAA AAAA     AAAA",
 "BBBBBBBBBBBBBBBBBBBBBBBBBBB",
 "BBBBBBB BBBBBBBBBB BBBBBBB",
 "CCC CCCC CCCCCC      CCCC",
 "DDDDDDDDDDDDDDDDDDD"}</pre></td></tr><tr><td class="statText"><pre>{5, 7}</pre></td></tr><tr><td class="statText"><pre>{2, 2}</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: 6</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">This can be achieved by the following keystrokes in the given order: home, top, down, down, right, right.</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">1)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{"A A A A A A A A A A A A A A A A A A A A A A A A A ",
 "BB BB BB BB BB BB BB BB BB BB BB BB BB BB BB BB BB",
 "CCC CCC CCC CCC CCC CCC CCC CCC CCC CCC CCC CCC CC",
 "DDDD DDDD DDDD DDDD DDDD DDDD DDDD DDDD DDDD DDDD ",
 "EEEEE EEEEE EEEEE EEEEE EEEEE EEEEE EEEEE EEEEE EE",
 "FFFF FFFF FFFF FFFF FFFF FFFF FFFF FFFF FFFF FFFF ",
 "GGG GGG GGG GGG GGG GGG GGG GGG GGG GGG GGG GGG GG",
 "HHHHHHHHHHH HHHHHHHHHH HHHHHHHHHH HHHHHHHHHH HHHHH",
 "IIIIIIIIIIIIIII IIIIIIIIIIIIIII IIIIIIIIIIIIIII   ",
 "JJJJJJJJ JJJJJJJJ JJJJJJJJ JJJJJJJJ JJJJJJJJ JJJJJ",
 "KKKKKKKKKKKKKKKKKKKKKKKKKK KKKKKKKKKKKKKKKKKKKKKKK",
 "LLLLLLLLLL LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL",
 "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM",
 "N N N N N N N N N N N N N N N N N N N N N N N N N ",
 "OOOOO OOOO OOO OO O O OO OOO OOOO OOOOO OOOOOO OOO",
 "PPPPPPP PPPPPP PPPPP PPPP PPP PP P P PP PPP PPPP P",
 "QQQQQQ QQQQQ QQQQ QQQ QQ Q Q QQ QQQ QQQQ QQQQQ QQQ",
 "ZZZZ ZZ ZZZ ZZ ZZZZ ZZ ZZZ ZZ ZZZZ ZZ ZZZ ZZ ZZZZ ",
 "SSS S SSS S SSS S SSS S SSS S SSS S SSS S SSS S SS",
 "TT TT TT TT TT TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT"}</pre></td></tr><tr><td class="statText"><pre>{12, 20}</pre></td></tr><tr><td class="statText"><pre>{4, 36}</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: 8</pre></td></tr><tr><td class="statText"></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">2)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{"A A A A AAAAAAA A A A A A A A A A A",
 "B BBBBB B B B B BBBBB B B B B B B B B"}</pre></td></tr><tr><td class="statText"><pre>{1, 0}</pre></td></tr><tr><td class="statText"><pre>{1, 22}</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: 6</pre></td></tr><tr><td class="statText"></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">3)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{"AAAAAAAAAAAAAA A A A A A A A A A A"}</pre></td></tr><tr><td class="statText"><pre>{0, 2}</pre></td></tr><tr><td class="statText"><pre>{0, 15}</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: 1</pre></td></tr><tr><td class="statText"></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">4)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{"A A A A A A A A A A A A A A A A A A A A A A A A A ",
 "A A A A A A A A A A A A A A A A A A A A A A A A A ",
 "A A A A A A A A A A A A A A A A A A A A A A A A A ",
 "A A A A A A A A A A A A A A A A A A A A A A A A A ",
 "A A A A A A A A A A A A A A A A A A A A A A A A A ",
 "A A A A A A A A A A A A A A A A A A A A A A A A A ",
 "A A A A A A A A A A A A A A A A A A A A A A A A A ",
 "A A A A A A A A A A A A A A A A A A A A A A A A A ",
 "A A A A A A A A A A A A A A A A A A A A A A A A A ",
 "A A A A A A A A A A A A A A A A A A A A A A A A A ",
 "A A A A A A A A A A A A A A A A A A A A A A A A A ",
 "A A A A A A A A A A A A A A A A A A A A A A A A A ",
 "A A A A A A A A A A A A A A A A A A A A A A A A A ",
 "N N N N N N N N N N N N N N N N N N N N N N N N N ",
 "A A A A A A A A A A A A A A A A A A A A A A A A A ",
 "A A A A A A A A A A A A A A A A A A A A A A A A A ",
 "A A A A A A A A A A A A A A A A A A A A A A A A A ",
 "A A A A A A A A A A A A A A A A A A A A A A A A A ",
 "A A A A A A A A A A A A A A A A A A A A A A A A A ",
 "A A A A A A A A A A A A A A A A A A A A A A A A A ",
 "A A A A A A A A A A A A A A A A A A A A A A A A A ",
 "A A A A A A A A A A A A A A A A A A A A A A A A A ",
 "A A A A A A A A A A A A A A A A A A A A A A A A A ",
 "A A A A A A A A A A A A A A A A A A A A A A A A A ",
 "A A A A A A A A A A A A A A A A A A A A A A A A A ",
 "A A A A A A A A A A A A A A A A A A A A A A A A A ",
 "A A A A A A A A A A A A A A A A A A A A A A A A A ",
 "A A A A A A A A A A A A A A A A A A A A A A A A A ",
 "A A A A A A A A A A A A A A A A A A A A A A A A A ",
 "A A A A A A A A A A A A A A A A A A A A A A A A A ",
 "A A A A A A A A A A A A A A A A A A A A A A A A A ",
 "A A A A A A A A A A A A A A A A A A A A A A A A A ",
 "A A A A A A A A A A A A A A A A A A A A A A A A A ",
 "A A A A A A A A A A A A A A A A A A A A A A A A A ",
 "A A A A A A A A A A A A A A A A A A A A A A A A A ",
 "A A A A A A A A A A A A A A A A A A A A A A A A A ",
 "A A A A A A A A A A A A A A A A A A A A A A A A A ",
 "A A A A A A A A A A A A A A A A A A A A A A A A A ",
 " O O O O O O O O O O O O OO O O O O O O O O O O O ",
 " P P P P P P P P P P P P P PP P P P P P P P P P P ",
 " Q Q Q Q Q Q Q Q Q Q Q Q Q Q QQ Q Q Q Q Q Q Q Q Q ",
 " R R R R R R R R R R R R R R R RR R R R R R R R R ",
 " S S S S S S S S S S S S S S S S SS S S S S S S S ",
 " T T T T T T T T T T T T T T T T T TT T T T T T T ",
 " U U U U U U U U U U U U U U U U U U UU U U U U U ",
 " V V V V V V V V V V V V V V V V V V V VV V V V V ",
 " W W W W W W W W W W W W W W W W W W W W WW W W W ",
 " X X X X X X X X X X X X X X X X X X X X X XX X X ",
 " Y Y Y Y Y Y Y Y Y Y Y Y Y Y Y Y Y Y Y Y Y Y YY Y ",
 " Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z ZZZ"}</pre></td></tr><tr><td class="statText"><pre>{49, 49}</pre></td></tr><tr><td class="statText"><pre>{38, 26}</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: 23</pre></td></tr><tr><td class="statText"></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">5)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{"AAA", "BB", "CCC"}</pre></td></tr><tr><td class="statText"><pre>{1, 1}</pre></td></tr><tr><td class="statText"><pre>{1, 1}</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: 0</pre></td></tr><tr><td class="statText"></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">6)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{"AAAAA AAA AAAAAAAAAAAAA  AAAA",
 "AA   AAAAAAAAA AAAA     AAAA",
 "BBBBBBBBBBBBBBBBBBBBBBBBBBB",
 "BBBBBBB BBBBBBBBBB BBBBBBB",
 "CCC CCCC CCCCCC      CCCC",
 "DDDDDDDDDDDDDDDDDDD"}</pre></td></tr><tr><td class="statText"><pre>{2, 17}</pre></td></tr><tr><td class="statText"><pre>{1, 2}</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: 4</pre></td></tr><tr><td class="statText"></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">7)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{"A PC to do CAD huh  Sounds reasonable",
 "Aurthor go out and buy us five new PCs",
 "Dont you want to think about this for a minute",
 "No every second counts and we want to be ahead of",
 "the competition",
 "       OK Greate idea Please place lOOk worth of",
 "unmarked bills in my suitcase and Ill be on my way"}</pre></td></tr><tr><td class="statText"><pre>{0, 11}</pre></td></tr><tr><td class="statText"><pre>{1, 15}</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: 2</pre></td></tr><tr><td class="statText"></td></tr></table></td></tr></table><hr><p>This problem statement is the exclusive and proprietary property of TopCoder, Inc.  Any unauthorized use or reproduction of this information without the prior written consent of TopCoder, Inc. is strictly prohibited.  (c)2010, TopCoder, Inc.  All rights reserved.  </p>
                      
                   </td>