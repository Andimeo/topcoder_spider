<td class="problemText" valign="middle" align="left">
                      
              		<table><tr><td colspan="2" class="statText"><h3>Problem Statement</h3></td></tr><tr><td class="statText">    </td><td class="statText">You are given a String <b>code</b> and int[]s <b>position</b> and <b>length</b>.  <b>code</b> contains an encoded string which you must decode using the following method.  Step through the elements of <b>position</b> in order, and for each element i, take the substring of length <b>length[i]</b> at position <b>position[i]</b>.  Insert the reverse of that substring before position <b>position[i]</b>+<b>length[i]</b>, thereby creating a palindromic substring.  All positions are 0-based.  Return the decoded String.</td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Definition</h3></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText">Class:</td><td class="statText">PalindromeDecoding</td></tr><tr><td class="statText">Method:</td><td class="statText">decode</td></tr><tr><td class="statText">Parameters:</td><td class="statText">String, int[], int[]</td></tr><tr><td class="statText">Returns:</td><td class="statText">String</td></tr><tr><td class="statText">Method signature:</td><td class="statText">String decode(String code, int[] position, int[] length)</td></tr><tr><td colspan="2" class="statText">(be sure your method is public)</td></tr></table></td></tr><tr><td class="statText">    </td></tr><tr><td class="statText"></td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Constraints</h3></td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText"><b>code</b> will contain between 1 and 10 characters, inclusive.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText"><b>code</b> will contain only digits ('0'-'9') and letters ('a'-'z', 'A'-'Z').</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText"><b>position</b> will contain between 0 and 10 elements, inclusive.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText"><b>length</b> will contain the same number of elements as <b>position</b>.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText"><b>position</b> and <b>length</b> will always refer to a valid substring in the (partially decoded) string <b>code</b>.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">Each element of <b>length</b> will be positive.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">The return value will have at most 1000 characters.</td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Examples</h3></td></tr><tr><td align="center" nowrap class="statText">0)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>"ab"</pre></td></tr><tr><td class="statText"><pre>{0}</pre></td></tr><tr><td class="statText"><pre>{2}</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: "abba"</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">The decoding step selects the whole string and appends it in reversed form.</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">1)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>"Misip"</pre></td></tr><tr><td class="statText"><pre>{2,3,1,7}</pre></td></tr><tr><td class="statText"><pre>{1,1,2,2}</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: "Mississippi"</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">The decoding steps are: "Misip" -&gt; "Missip" -&gt; "Misssip" -&gt; "Mississip" -&gt; "Mississippi"</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">2)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>"XY"</pre></td></tr><tr><td class="statText"><pre>{0, 0, 0, 0}</pre></td></tr><tr><td class="statText"><pre>{2, 4, 8, 16}</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: "XYYXXYYXXYYXXYYXXYYXXYYXXYYXXYYX"</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">In this example the length of the string doubles in each decoding step.</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">3)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>"TC206"</pre></td></tr><tr><td class="statText"><pre>{1,2,5}</pre></td></tr><tr><td class="statText"><pre>{1,1,1}</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: "TCCC2006"</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText"></td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">4)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>"nodecoding"</pre></td></tr><tr><td class="statText"><pre>{}</pre></td></tr><tr><td class="statText"><pre>{}</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: "nodecoding"</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText"></td></tr></table></td></tr></table></td></tr></table><hr><p>This problem statement is the exclusive and proprietary property of TopCoder, Inc.  Any unauthorized use or reproduction of this information without the prior written consent of TopCoder, Inc. is strictly prohibited.  (c)2010, TopCoder, Inc.  All rights reserved.  </p>
                      
                   </td>