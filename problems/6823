<td class="problemText" valign="middle" align="left">
                      
              		<table><tr><td colspan="2" class="statText"><h3>Problem Statement</h3></td></tr><tr><td class="statText">    </td><td class="statText"><p>
Almost every different government in the world has a different method of assigning license plates to vehicles.  In any of these systems, it is possible to take all possible plates, arrange them in lexicographical order, and number them, where the first plate is 0, the second plate is 1, etc.  Your local government has decided to do this with the license plates that it issues, and right before you leave to eat lunch, you have been assigned this daunting project.  So that you can actually have a warm meal today, you have decided to write a program to do this for you.
</p><p>
You will be given a String <b>format</b>, containing the format of the local license plates.  Each character of format will be either an uppercase letter ('A'-'Z'), a number ('0'-'9'), a space (' '), a dash ('-'), or the lowercase letters 'u', 'n', or 'a'.  If the character is a 'u', it means that any uppercase letter can be used in that place.  If the character is an 'n', it means that any number can be used in that place.  If the character is an 'a', it means that any uppercase letter or number can be used in that place.  If the character is not a lowercase letter, then the character in that spot must be the one used in format.  For instance, if the format was "AB-una", then "AB-C52" and "AB-D3G" would be legal license plates, but "AC-D3G", "AB-111", and "AB-DEF" would not.
</p><p>
Given the format, you are to return the <b>n</b>-th earliest (0-indexed) license plate that can be formed in this system.  If the n-th license plate cannot be formed using the given format, return an empty String.  Note that numbers occur earlier lexicographically than letters (e.g., '4' comes before 'B').
</p></td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Definition</h3></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText">Class:</td><td class="statText">LicensePlate</td></tr><tr><td class="statText">Method:</td><td class="statText">getPlate</td></tr><tr><td class="statText">Parameters:</td><td class="statText">String, int</td></tr><tr><td class="statText">Returns:</td><td class="statText">String</td></tr><tr><td class="statText">Method signature:</td><td class="statText">String getPlate(String format, int n)</td></tr><tr><td colspan="2" class="statText">(be sure your method is public)</td></tr></table></td></tr><tr><td class="statText">    </td></tr><tr><td class="statText"></td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Constraints</h3></td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText"><b>format</b> will contain between 1 and 50 characters, inclusive.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">Each character of <b>format</b> will be an uppercase letter ('A'-'Z'), a number ('0'-'9'), a space (' '), a hyphen ('-'), or the lowercase letters 'a', 'n', or 'u'.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText"><b>n</b> will be between 0 and 2^31-1, inclusive.</td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Examples</h3></td></tr><tr><td align="center" nowrap class="statText">0)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>"ABu"</pre></td></tr><tr><td class="statText"><pre>2</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: "ABC"</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">The license plates in this format are "ABA", "ABB", "ABC", "ABD", etc.  We return the 2nd (0-based) element in this list, which is "ABC".</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">1)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>"ABn"</pre></td></tr><tr><td class="statText"><pre>2</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: "AB2"</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText"></td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">2)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>"ABa"</pre></td></tr><tr><td class="statText"><pre>12</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: "ABC"</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">Remember that numbers come first in lexicographical order.</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">3)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>"A BC"</pre></td></tr><tr><td class="statText"><pre>2</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: ""</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">There are only 1 possible license plate in this format ("ABC"), so we must return a blank plate.</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">4)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>"una"</pre></td></tr><tr><td class="statText"><pre>8732</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: "Y2K"</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText"></td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">5)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>"ABa  DEuF-GHuJ KL-aMNaa5390u"</pre></td></tr><tr><td class="statText"><pre>1345876</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: "AB0  DEAF-GHBJ KL-3MNXW5390M"</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText"></td></tr></table></td></tr></table></td></tr></table><hr><p>This problem statement is the exclusive and proprietary property of TopCoder, Inc.  Any unauthorized use or reproduction of this information without the prior written consent of TopCoder, Inc. is strictly prohibited.  (c)2010, TopCoder, Inc.  All rights reserved.  </p>
                      
                   </td>