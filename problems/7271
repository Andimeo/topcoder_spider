<td class="problemText" valign="middle" align="left">
                      
              		<table><tr><td colspan="2" class="statText"><h3>Problem Statement</h3></td></tr><tr><td class="statText">    </td><td class="statText"><p>Two words are said to be anagrams if one word can be formed by rearranging the letters of the other word.  For example, "AABC" and "CABA" are anagrams.</p>

<p>You will be given two Strings, <b>word1</b> and <b>word2</b>, representing two words.  These two strings will contain only uppercase letters ('A'-'Z') and '.' characters which denote missing letters.  Replace the '.' characters with uppercase letters such that the two words become anagrams and return the result as a String[] containing exactly two elements.  The first element should correspond to <b>word1</b> and the second element should correspond to <b>word2</b>.  If there are multiple possible return values, choose the one in which the first element comes first alphabetically.  If ties still exist, choose the one among them in which the second element comes first alphabetically.  If it is impossible to make the two words into anagrams, return an empty String[].  Note that two equal words are considered anagrams.</p>
</td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Definition</h3></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText">Class:</td><td class="statText">AnagramCompletion</td></tr><tr><td class="statText">Method:</td><td class="statText">complete</td></tr><tr><td class="statText">Parameters:</td><td class="statText">String, String</td></tr><tr><td class="statText">Returns:</td><td class="statText">String[]</td></tr><tr><td class="statText">Method signature:</td><td class="statText">String[] complete(String word1, String word2)</td></tr><tr><td colspan="2" class="statText">(be sure your method is public)</td></tr></table></td></tr><tr><td class="statText">    </td></tr><tr><td class="statText"></td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Constraints</h3></td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText"><b>word1</b> will contain between 1 and 50 characters, inclusive.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText"><b>word2</b> will contain the same number of characters as <b>word1</b>.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText"><b>word1</b> and <b>word2</b> will contain only uppercase letters ('A'-'Z') and '.' characters.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">There will be at least one '.' in at least one of the two words.</td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Examples</h3></td></tr><tr><td align="center" nowrap class="statText">0)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>"AB.AC."</pre></td></tr><tr><td class="statText"><pre>"ABD..E"</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: {"ABDACE", "ABDACE" }</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">The letters 'D' and 'E' appear in the second word but not in the first one, so we place them in the two empty spots.  Similarly the letter 'C' must be present in the second word.  The letter 'A' must appear a second time in the second word.  Ties are broken alphabetically.</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">1)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>"ABC..."</pre></td></tr><tr><td class="statText"><pre>"DEF..."</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: {"ABCDEF", "DEFABC" }</pre></td></tr><tr><td class="statText"></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">2)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>"......"</pre></td></tr><tr><td class="statText"><pre>"......"</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: {"AAAAAA", "AAAAAA" }</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">All the letters are missing, so we can replace them all with the letter 'A'.</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">3)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>"TOPCODER"</pre></td></tr><tr><td class="statText"><pre>"D.E..TR."</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: {"TOPCODER", "DCEOOTRP" }</pre></td></tr><tr><td class="statText"></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">4)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>"ABC."</pre></td></tr><tr><td class="statText"><pre>"DEF."</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: { }</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">Each word is missing three letters from the other word, but there is only one empty spot in each of them.</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">5)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>"TEFAT..PVSKKJT.QBJEB..NPN..NBL"</pre></td></tr><tr><td class="statText"><pre>"...B...E.ND.LNE...HW.ANTB.TKBD"</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: {"TEFATAAPVSKKJTAQBJEBDDNPNHWNBL", "AAABFJJEKNDPLNEPQSHWTANTBVTKBD" }</pre></td></tr><tr><td class="statText"></td></tr></table></td></tr></table><hr><p>This problem statement is the exclusive and proprietary property of TopCoder, Inc.  Any unauthorized use or reproduction of this information without the prior written consent of TopCoder, Inc. is strictly prohibited.  (c)2010, TopCoder, Inc.  All rights reserved.  </p>
                      
                   </td>