<td class="problemText" valign="middle" align="left">
                      
              		<table><tr><td colspan="2" class="statText"><h3>Problem Statement</h3></td></tr><tr><td class="statText">    </td><td class="statText"><p>
Alice and Bob are playing a game called "Naval Battle".  The playing field is a row of <b>fieldLength</b> 1x1 squares.  At the beginning of the game, Alice placed one or more battleships on the field.  Each battleship occupies exactly <b>shipLength</b> consecutive squares.  There must be one or more vacant squares between every pair of adjacent battleships.  Bob doesn't know how many battleships Alice has placed, and he doesn't know their positions.
</p>
<p>
Now, Bob starts shooting.  For each shot, he says the number of a single square.  The squares are numbered from left to right starting with 0.  After each shot, Alice tells him if he hit a square that contains a battleship or if he missed.
</p>
<p>
Bob suspects that Alice is playing dishonestly and providing wrong answers.  You are given a int[] <b>shots</b>, the i-th element of which is the number chosen by Bob on his i-th shot.  You are also given a String <b>answers</b>, the i-th character of which is '0' (zero) if Alice tells him that he missed on the i-th shot, or '1' (one) if she tells him that he hit a battleship.
</p>
<p>
Return the 0-based index of the earliest answer after which Bob can be sure that Alice is playing dishonestly.  Return -1 if there is no such move.
</p></td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Definition</h3></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText">Class:</td><td class="statText">NavalBattle</td></tr><tr><td class="statText">Method:</td><td class="statText">firstDishonestMove</td></tr><tr><td class="statText">Parameters:</td><td class="statText">int, int, int[], String</td></tr><tr><td class="statText">Returns:</td><td class="statText">int</td></tr><tr><td class="statText">Method signature:</td><td class="statText">int firstDishonestMove(int fieldLength, int shipLength, int[] shots, String answers)</td></tr><tr><td colspan="2" class="statText">(be sure your method is public)</td></tr></table></td></tr><tr><td class="statText">    </td></tr><tr><td class="statText"></td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Constraints</h3></td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText"><b>fieldLength</b> will be between 1 and 50, inclusive.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText"><b>shipLength</b> will be between 1 and <b>fieldLength</b>, inclusive.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText"><b>shots</b> will contain between 1 and 50 elements, inclusive.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">Each element of <b>shots</b> will be between 0 and <b>fieldLength</b>-1, inclusive.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText"><b>answers</b> will contain exactly n characters, where n is the number of elements in <b>shots</b>.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText"><b>answers</b> will contain only the digits '0' and '1'.</td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Examples</h3></td></tr><tr><td align="center" nowrap class="statText">0)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>1</pre></td></tr><tr><td class="statText"><pre>1</pre></td></tr><tr><td class="statText"><pre>{0}</pre></td></tr><tr><td class="statText"><pre>"1"</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: -1</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText"></td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">1)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>3</pre></td></tr><tr><td class="statText"><pre>2</pre></td></tr><tr><td class="statText"><pre>{0, 2, 1}</pre></td></tr><tr><td class="statText"><pre>"110"</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: 1</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText"></td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">2)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>5</pre></td></tr><tr><td class="statText"><pre>2</pre></td></tr><tr><td class="statText"><pre>{0, 4, 1, 3, 2}</pre></td></tr><tr><td class="statText"><pre>"11110"</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: -1</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText"></td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">3)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>10</pre></td></tr><tr><td class="statText"><pre>1</pre></td></tr><tr><td class="statText"><pre>{4, 7, 8, 2}</pre></td></tr><tr><td class="statText"><pre>"0110"</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: 2</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">Alice can?t place two battleships without one or more vacant squares between them.</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">4)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>10</pre></td></tr><tr><td class="statText"><pre>10</pre></td></tr><tr><td class="statText"><pre>{4, 2}</pre></td></tr><tr><td class="statText"><pre>"01"</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: 0</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText"></td></tr></table></td></tr></table></td></tr></table><hr><p>This problem statement is the exclusive and proprietary property of TopCoder, Inc.  Any unauthorized use or reproduction of this information without the prior written consent of TopCoder, Inc. is strictly prohibited.  (c)2010, TopCoder, Inc.  All rights reserved.  </p>
                      
                   </td>