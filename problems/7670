<td class="problemText" valign="middle" align="left">
                      
              		<table><tr><td colspan="2" class="statText"><h3>Problem Statement</h3></td></tr><tr><td class="statText">    </td><td class="statText"><p>
A race track is represented as a line segment.  You are given its <b>length</b>, and a int[] <b>pos</b> containing the positions where judges may be located.  Each element of <b>pos</b> is the distance from the starting point of the race track.  The elements of <b>pos</b> are given in strictly increasing order (<b>pos</b>[i] &lt; <b>pos</b>[i+1]).
</p>

<p>
You are given an int <b>judges</b>, the number of judges in the next competition.  You must assign the judges to positions such that the distance between the two closest judges is as large as possible.  Return a String containing exactly n characters, where n is the number of elements in <b>pos</b>.  The i-th character should be '1' (one) if there is a judge assigned to the i-th position, and '0' (zero) if there is not.  The judges are lazy and don't want to go far from the starting point, so if there are multiple optimal solutions, return the one that comes latest lexicographically.
</p>
</td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Definition</h3></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText">Class:</td><td class="statText">RaceTrack</td></tr><tr><td class="statText">Method:</td><td class="statText">judgePositions</td></tr><tr><td class="statText">Parameters:</td><td class="statText">int, int, int[]</td></tr><tr><td class="statText">Returns:</td><td class="statText">String</td></tr><tr><td class="statText">Method signature:</td><td class="statText">String judgePositions(int length, int judges, int[] pos)</td></tr><tr><td colspan="2" class="statText">(be sure your method is public)</td></tr></table></td></tr><tr><td class="statText">    </td></tr><tr><td class="statText"></td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Constraints</h3></td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText"><b>length</b> will be between 1 and 1000000, inclusive.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText"><b>pos</b> will contain between 2 and 50 elements, inclusive.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">Each element of <b>pos</b> will be greater than the previous, if it exists.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">Each element of <b>pos</b> will be between 0 and <b>length</b>, inclusive.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText"><b>judges</b> will be between 2 and number of elements in <b>pos</b>, inclusive.</td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Examples</h3></td></tr><tr><td align="center" nowrap class="statText">0)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>11</pre></td></tr><tr><td class="statText"><pre>3</pre></td></tr><tr><td class="statText"><pre>{0, 5, 10, 11}</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: "1110"</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">Another solution that maximizes the distance between the two closest judges is "1101", but it is not the lexicographically latest.</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">1)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>11</pre></td></tr><tr><td class="statText"><pre>2</pre></td></tr><tr><td class="statText"><pre>{0, 5, 10, 11}</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: "1001"</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">The distance between the two judges should be as large as possible.</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">2)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>11</pre></td></tr><tr><td class="statText"><pre>4</pre></td></tr><tr><td class="statText"><pre>{0, 5, 10, 11}</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: "1111"</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">The judges do not have any choice.</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">3)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>1000</pre></td></tr><tr><td class="statText"><pre>5</pre></td></tr><tr><td class="statText"><pre>{6, 9, 33, 59, 100, 341, 431, 444, 565, 857}</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: "1000010111"</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText"></td></tr></table></td></tr></table></td></tr></table><hr><p>This problem statement is the exclusive and proprietary property of TopCoder, Inc.  Any unauthorized use or reproduction of this information without the prior written consent of TopCoder, Inc. is strictly prohibited.  (c)2010, TopCoder, Inc.  All rights reserved.  </p>
                      
                   </td>