<td class="problemText" valign="middle" align="left">
                      
              		<table><tr><td colspan="2" class="statText"><h3>Problem Statement</h3></td></tr><tr><td class="statText">    </td><td class="statText"><p>
Trees are important data structures in programming.  In this problem, you will be given a tree that was constructed from a fully connected undirected acyclic graph with exactly N nodes.  First, a distinct number between 0 and N-1, inclusive, was assigned to each node.  Then, one of the nodes was selected to be the root of the tree.  Finally, each non-root node was assigned its neighbor closest to the root as its parent.
</p><p>
You will be given the <b>tree</b> as a int[], where the i-th element is the parent of the i-th node, or -1 if the i-th node is the root (indices are 0-based).  A tree is considered equivalent to this tree if it can be constructed from the same original graph using the method described above.  This means you can renumber the nodes and select a different node as the root (see examples for clarification).  Return a int[] containing the equivalent tree that comes first lexicographically.  A int[] <i>a<sub>1</sub></i> comes before int[] <i>a<sub>2</sub></i> lexicographically if <i>a<sub>1</sub></i> has a smaller value at the first element where they differ.
</p></td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Definition</h3></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText">Class:</td><td class="statText">NormalizingTrees</td></tr><tr><td class="statText">Method:</td><td class="statText">normalize</td></tr><tr><td class="statText">Parameters:</td><td class="statText">int[]</td></tr><tr><td class="statText">Returns:</td><td class="statText">int[]</td></tr><tr><td class="statText">Method signature:</td><td class="statText">int[] normalize(int[] tree)</td></tr><tr><td colspan="2" class="statText">(be sure your method is public)</td></tr></table></td></tr><tr><td class="statText">    </td></tr><tr><td class="statText"></td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Constraints</h3></td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText"><b>tree</b> will contain between 1 and 50 elements, inclusive.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">Each element of <b>tree</b> will be between -1 and N-1, inclusive, where N is the number of elements in <b>tree</b>.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">Exactly one element of <b>tree</b> will be -1.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText"><b>tree</b> will represent a connected acyclic graph.</td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Examples</h3></td></tr><tr><td align="center" nowrap class="statText">0)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{2,0,-1,4,2,4}</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: {-1, 0, 0, 0, 1, 4 }</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">This is the original drawing (with 2 as the root):
<pre>
    2
   / \
  0   4
 /   / \
1   3   5
</pre> 
The renumbering gives this:
<pre>
    1
   / \
  4   0
 /   / \
5   2   3
</pre>
and taking the new 0 as the root gives the answer:
<pre>
   0
 / | \
1  2  3
|
4
|
5
</pre></td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">1)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{-1,0,1,2,3}</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: {-1, 0, 0, 1, 2 }</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">This is a simple path of length 5. Selecting the middle node as root and renumbering gives the lexicographically first representation.</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">2)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{3,3,3,4,-1,3}</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: {-1, 0, 0, 0, 0, 0 }</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">This tree has the shape of a star (one center node with 5 nodes connected to it).</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">3)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{10,9,6,10,6,9,7,-1,9,7,7,10,6}</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: {-1, 0, 0, 0, 0, 1, 1, 5, 5, 5, 6, 6, 6 }</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText"></td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">4)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{-1, 0, 0, 0, 0, 1, 1, 5, 5, 5, 6, 6, 6}</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: {-1, 0, 0, 0, 0, 1, 1, 5, 5, 5, 6, 6, 6 }</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText"></td></tr></table></td></tr></table></td></tr></table><hr><p>This problem statement is the exclusive and proprietary property of TopCoder, Inc.  Any unauthorized use or reproduction of this information without the prior written consent of TopCoder, Inc. is strictly prohibited.  (c)2010, TopCoder, Inc.  All rights reserved.  </p>
                      
                   </td>