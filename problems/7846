<td class="problemText" valign="middle" align="left">
                      
              		<table><tr><td colspan="2" class="statText"><h3>Problem Statement</h3></td></tr><tr><td class="statText">    </td><td class="statText">We install marble countertops. The marble comes in a standard width but varying
lengths. It is very difficult to cut the marble -- we have a special machine 
that cuts
a length of marble into two pieces, one of which must be exactly <b>k</b> feet long. A piece
that is no bigger than <b>k</b> cannot be cut.
<pre></pre><p>
int[] <b>stock</b> contains the lengths of marble that we have on hand, and int[] 
<b>orders</b> contains the lengths that our customers have ordered. Given <b>k</b>, <b>stock</b>,
and <b>orders</b>, return the minimum number of cuts
needed to satisfy all our customers. If it is not possible, return -1.
</p>

</td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Definition</h3></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText">Class:</td><td class="statText">MarbleTop</td></tr><tr><td class="statText">Method:</td><td class="statText">minCuts</td></tr><tr><td class="statText">Parameters:</td><td class="statText">int, int[], int[]</td></tr><tr><td class="statText">Returns:</td><td class="statText">int</td></tr><tr><td class="statText">Method signature:</td><td class="statText">int minCuts(int k, int[] stock, int[] orders)</td></tr><tr><td colspan="2" class="statText">(be sure your method is public)</td></tr></table></td></tr><tr><td class="statText">    </td></tr><tr><td class="statText"></td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Constraints</h3></td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText"><b>k</b> will be between 1 and 40, inclusive.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText"><b>stock</b> and <b>orders</b> will each contain between 1 and 50 elements, inclusive.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">Each element of <b>stock</b> and of <b>orders</b> will be between 1 and 40, inclusive.</td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Examples</h3></td></tr><tr><td align="center" nowrap class="statText">0)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>5</pre></td></tr><tr><td class="statText"><pre>{5,3,11}</pre></td></tr><tr><td class="statText"><pre>{10,3,5}</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: -1</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">    There is no way to deliver a piece of length 10. The only sizes we could
  deliver are 11,6,5,3,1.
</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">1)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>5</pre></td></tr><tr><td class="statText"><pre>{5,3,11}</pre></td></tr><tr><td class="statText"><pre>{6,6,5}</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: -1</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">
    We can deliver one length of 6 and a length of 5 but not the second 6.</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">2)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>1</pre></td></tr><tr><td class="statText"><pre>{7,6,2,1}</pre></td></tr><tr><td class="statText"><pre>{3,1,1,1,1,1,1}</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: 4</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">
    Cut the 6 into a 5 and 1, cut the 5 into a 4 and 1, cut the 4 into a 3 and 1.
    Now we have 7, 3, 2, and four 1's. Cut the 2 and we have (in addition to
    the 7) a 3 and 6 1's as needed. 
 </td></tr></table></td></tr></table></td></tr></table><hr><p>This problem statement is the exclusive and proprietary property of TopCoder, Inc.  Any unauthorized use or reproduction of this information without the prior written consent of TopCoder, Inc. is strictly prohibited.  (c)2010, TopCoder, Inc.  All rights reserved.  </p>
                      
                   </td>