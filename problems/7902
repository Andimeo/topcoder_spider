<td class="problemText" valign="middle" align="left">
                      
              		<table><tr><td colspan="2" class="statText"><h3>Problem Statement</h3></td></tr><tr><td class="statText">    </td><td class="statText"><p>
You are given a triangular board of cells, where each cell is an equilateral triangle. Cells are arranged as shown in the picture below. <br><img src="http://www.topcoder.com/contest/problem/TrianglesBoard/trianglesboard.png"></p>
<p>
Two cells are adjacent if they have a common edge. Thus, in the example above, cells B, C and D are adjacent to cell A. There are three types of cells: "colored", "remove adjacent" and "remove row". A colored cell has a color between 0 and 9, inclusive. The other two types of cells have no color. 
You will choose one cell and remove it. You will then possibly remove more cells recursively according to the following rules:
</p><ul><li>
If you removed a colored cell, you must recursively remove all adjacent colored cells with the same color.
</li>
<li>
If you removed a "remove adjacent" cell, you must recursively remove all adjacent cells, regardless of their types.
</li>
<li>If you removed a "remove row" cell, you must recursively remove all the cells in that same row, regardless of their types.
</li></ul>
"Recursively removing a cell" means that you must remove this cell, check its type and apply the corresponding rule to it to recursively remove more cells (see examples 3-6 for further clarification). You can remove a cell only once, i.e., you can not remove a cell if it was removed before.
<p>
You are given a String[] <b>board</b> containing the rows of the board from top to bottom. Each element of <b>board</b> represents a single row of cells. Element i (0-based) of <b>board</b> contains exactly 2*i+1 characters, each representing a single cell. 'A' represents "remove adjacent" cells, 'R' represents "remove row" cells, and the digits '0'-'9' represent colored cells with colors 0 through 9, respectively.
</p><p>
Your total score is the number of colored cells you removed (so "remove adjacent" and "remove row" cells do not count toward your score). Return the maximal score you can get on the given board.
</p></td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Definition</h3></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText">Class:</td><td class="statText">TrianglesBoard</td></tr><tr><td class="statText">Method:</td><td class="statText">maxScore</td></tr><tr><td class="statText">Parameters:</td><td class="statText">String[]</td></tr><tr><td class="statText">Returns:</td><td class="statText">int</td></tr><tr><td class="statText">Method signature:</td><td class="statText">int maxScore(String[] board)</td></tr><tr><td colspan="2" class="statText">(be sure your method is public)</td></tr></table></td></tr><tr><td class="statText">    </td></tr><tr><td class="statText"></td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Constraints</h3></td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText"><b>board</b> will contain between 1 and 50 elements, inclusive.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">Element i of <b>board</b> will contain exactly 2*i+1 characters.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">Each character in <b>board</b> will be 'A', 'R' or '0'-'9'.</td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Examples</h3></td></tr><tr><td align="center" nowrap class="statText">0)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{ "0",
 "121",
"31122"}</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: 3</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">The example from the problem statement. The biggest block of cells of the same color is three '1's.</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">1)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{ "1",
 "121",
"12121"}</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: 1</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">There are no two adjacent cells of the same color, so we can remove at most one cell.</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">2)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{"1",
"1A1"}</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: 3</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">We can remove all cells if we start with the "remove adjacent" cell.</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">3)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{  "2",
  "122",
 "1A122",
"2222222"}</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: 12</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">If we start removing from the topmost '2', we'll have to remove the '2' below it. After that we have to apply first rule again and remove the '2' to the right of the previous one, and so on. In such way we can remove all '2' cells on the board.</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">4)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{  "2",
  "224",
 "12R43",
"R111333"}</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: 14</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">Removing the 'R' in the middle of the board will result in removing '1','2','3' and '4' in the same row, and removing each of the colored cells will result in removing all cells of the same color on the board.</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">5)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{   "R",
   "2AR",
  "R12A2",
 "2A2121R",
"R121212A2"}</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: 16</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">We need to start with the 'R' cell in lower-left corner. Removing it will remove all cells in the lowest row. Removing the 'A' cell in the lowest row will remove the 'R' cell above it, which will result in removing the second lowest row, etc.</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">6)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{ "A",
 "AAA",
"AAAAA"}</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: 0</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">Removing 'A' cells is recursive too, so we can remove all cells on the board, but there are no colored cells on it, so the score will be 0.</td></tr></table></td></tr></table></td></tr></table><hr><p>This problem statement is the exclusive and proprietary property of TopCoder, Inc.  Any unauthorized use or reproduction of this information without the prior written consent of TopCoder, Inc. is strictly prohibited.  (c)2010, TopCoder, Inc.  All rights reserved.  </p>
                      
                   </td>