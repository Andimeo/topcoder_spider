<td class="problemText" valign="middle" align="left">
                      
              		<table><tr><td colspan="2" class="statText"><h3>Problem Statement</h3></td></tr><tr><td class="statText">    </td><td class="statText"><p>
You have n cards. Each card has some integer value, and some letter written on it. You also have n slots in a row. Each slot has some required value.
</p>
<p>
You must place the cards in the slots such that each slot contains a card with a value greater than or equal to the required value of that slot.  You must order the cards such that the string formed by reading the letters on the cards from left to right comes as early as possible lexicographically while not violating the first rule.
</p>
<p>
You are given a int[] <b>values</b> and a String <b>letters</b>, the i-th elements of which are the value and letter, respectively, of the i-th card.  You are also given a int[] <b>required</b>, the i-th element of which is the required value of the i-th slot.  The slots are ordered from left to right.  Place the cards into the slots as described above and return the resulting string.  If there is no valid way to fill the slots, return an empty string instead.
</p></td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Definition</h3></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText">Class:</td><td class="statText">CardsAndSlots</td></tr><tr><td class="statText">Method:</td><td class="statText">firstValid</td></tr><tr><td class="statText">Parameters:</td><td class="statText">int[], String, int[]</td></tr><tr><td class="statText">Returns:</td><td class="statText">String</td></tr><tr><td class="statText">Method signature:</td><td class="statText">String firstValid(int[] values, String letters, int[] required)</td></tr><tr><td colspan="2" class="statText">(be sure your method is public)</td></tr></table></td></tr><tr><td class="statText">    </td></tr><tr><td class="statText"></td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Constraints</h3></td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText"><b>values</b> will contain between 1 and 50 elements, inclusive.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">Each element of <b>values</b> will be between 1 and 1000, inclusive.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText"><b>letters</b> will contain exactly n characters, where n is the number of elements in <b>values</b>.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText"><b>letters</b> will contain only uppercase letters ('A'-'Z').</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText"><b>required</b> will contain the same number of elements as <b>values</b>.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">Each element of <b>required</b> will be between 1 and 1000, inclusive.</td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Examples</h3></td></tr><tr><td align="center" nowrap class="statText">0)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{1, 2, 3}</pre></td></tr><tr><td class="statText"><pre>"ABC"</pre></td></tr><tr><td class="statText"><pre>{2, 2, 1}</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: "BCA"</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText"></td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">1)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{1, 2, 3, 4, 5}</pre></td></tr><tr><td class="statText"><pre>"BBBAA"</pre></td></tr><tr><td class="statText"><pre>{1, 1, 1, 1, 5}</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: "ABBBA"</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">Note that there can be equal letters on different cards.</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">2)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{1, 1}</pre></td></tr><tr><td class="statText"><pre>"AA"</pre></td></tr><tr><td class="statText"><pre>{2, 2}</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: ""</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">No card fits any slot.</td></tr></table></td></tr></table></td></tr></table><hr><p>This problem statement is the exclusive and proprietary property of TopCoder, Inc.  Any unauthorized use or reproduction of this information without the prior written consent of TopCoder, Inc. is strictly prohibited.  (c)2010, TopCoder, Inc.  All rights reserved.  </p>
                      
                   </td>