<td class="problemText" valign="middle" align="left">
                      
              		<table><tr><td colspan="2" class="statText"><h3>Problem Statement</h3></td></tr><tr><td class="statText">    </td><td class="statText"><p>
Little John does a lot of programming, and is therefore very strange.  Recently, he started talking with some geometrical figures.  Squares are his favorite ones, and he gives names to them.  Yes, it is very strange, but don't forget that John is a programmer!
</p>

<p>
John has drawn many squares on a big sheet of paper and each square has its own name. Now John is looking for a sequence of <b>k</b> squares such that each square except the first one lies inside the previous square in the sequence.
</p>

<p>
One square lies inside another one if all its points are inside the bigger square, possibly on a boundary.
</p>

<p>
You are given String[]s <b>x</b>, <b>y</b>, <b>lengths</b> and <b>names</b>, and an int <b>k</b>.  For each String[], concatenate all its elements to produce a single string.  The concatenated versions of <b>x</b>, <b>y</b> and <b>lengths</b> contain single space separated lists of integers, where the i-th integers represent the x-coordinate and y-coordinate of the bottom left corner and side length, respectively, of the i-th square.  The concatenated version of <b>names</b> contains a single space separated list of strings, where the i-th string represents the name of the i-th square.
</p>

<p>
Return a String[] containing exactly <b>k</b> elements - the names of the squares in the sequence.  If there are multiple such sequences, return the one among them that comes first lexicographically.  If there is no such sequence, return an empty String[].
</p>
</td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Definition</h3></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText">Class:</td><td class="statText">TheSquares</td></tr><tr><td class="statText">Method:</td><td class="statText">findSequence</td></tr><tr><td class="statText">Parameters:</td><td class="statText">String[], String[], String[], String[], int</td></tr><tr><td class="statText">Returns:</td><td class="statText">String[]</td></tr><tr><td class="statText">Method signature:</td><td class="statText">String[] findSequence(String[] x, String[] y, String[] lengths, String[] names, int k)</td></tr><tr><td colspan="2" class="statText">(be sure your method is public)</td></tr></table></td></tr><tr><td class="statText">    </td></tr><tr><td class="statText"></td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Notes</h3></td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">Each square can be used only once in the resulting sequence.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">String[] A comes lexicographically before String[] B if the i-th element of A comes lexicographically before the i-th element of B and the j-th element of A is equal to the j-th element of B for all j less than i.</td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Constraints</h3></td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText"><b>x</b>, <b>y</b>, <b>lengths</b> and <b>names</b> will each contain between 1 and 50 elements, inclusive.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">Each element of <b>x</b>, <b>y</b>, <b>lengths</b> and <b>names</b> will contain between 1 and 50 characters, inclusive.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText"><b>x</b>, <b>y</b>, <b>lengths</b> and <b>names</b>, when concatenated, will each contain a single space separated list of items without leading or trailing spaces, and each list will contain the same number of items.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText"><b>x</b>, <b>y</b> and <b>lengths</b>, when concatenated, will each contain a single space separated list of integers, where each integer is between 1 and 1000, inclusive, with no leading zeroes.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText"><b>names</b>, when concatenated, will contain a single space separated list of strings, where each string contains between 1 and 50 uppercase letters ('A'-'Z'), inclusive.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText"><b>k</b> will be between 1 and 1000, inclusive.</td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Examples</h3></td></tr><tr><td align="center" nowrap class="statText">0)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{"1 1 1 4 7 8 1000"}</pre></td></tr><tr><td class="statText"><pre>{"1 1 1 4 7 8 1000"}</pre></td></tr><tr><td class="statText"><pre>{"1 2 3 4 5 1 1000"}</pre></td></tr><tr><td class="statText"><pre>{"X Y Z ALPHA BETA GAMMA DELTA"}</pre></td></tr><tr><td class="statText"><pre>2</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: {"BETA", "GAMMA" }</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">There are several valid sequences of squares but (BETA, GAMMA) comes first lexicographically.</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">1)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{"1 1 1 4 7 8 1000"}</pre></td></tr><tr><td class="statText"><pre>{"1 1 1 4 7 8 1000"}</pre></td></tr><tr><td class="statText"><pre>{"1 2 3 4 5 1 1000"}</pre></td></tr><tr><td class="statText"><pre>{"X Y Z ALPHA BETA GAMMA DELTA"}</pre></td></tr><tr><td class="statText"><pre>3</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: {"Z", "Y", "X" }</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">Same example but with <b>k</b> = 3. This time there is no choice.</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">2)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{"4 4 4 4"}</pre></td></tr><tr><td class="statText"><pre>{"7 7 7 7"}</pre></td></tr><tr><td class="statText"><pre>{"47 47 47 47"}</pre></td></tr><tr><td class="statText"><pre>{"GLUK GLUKA GLUKOVI GLUKOM"}</pre></td></tr><tr><td class="statText"><pre>4</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: {"GLUK", "GLUKA", "GLUKOM", "GLUKOVI" }</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">Squares may coincide.</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">3)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{"1 15 27 39"}</pre></td></tr><tr><td class="statText"><pre>{"3 13 22 36"}</pre></td></tr><tr><td class="statText"><pre>{"8 3 5 974"}</pre></td></tr><tr><td class="statText"><pre>{"ACB DEF GHI JKL"}</pre></td></tr><tr><td class="statText"><pre>2</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: { }</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">There are no squares that lie inside other squares.</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">4)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{"123 453 754"}</pre></td></tr><tr><td class="statText"><pre>{"119 487 874"}</pre></td></tr><tr><td class="statText"><pre>{"1000 500 1"}</pre></td></tr><tr><td class="statText"><pre>{"SQUARE SQUARE SQUARE"}</pre></td></tr><tr><td class="statText"><pre>3</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: {"SQUARE", "SQUARE", "SQUARE" }</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">Names of squares are not necessarily distinct.</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">5)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{"3 5 10 1"}</pre></td></tr><tr><td class="statText"><pre>{"5 8 10 1"}</pre></td></tr><tr><td class="statText"><pre>{"974 990 1 1000"}</pre></td></tr><tr><td class="statText"><pre>{"X Y X Y"}</pre></td></tr><tr><td class="statText"><pre>3</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: {"Y", "X", "X" }</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">There are two pairs of squares with equal names.</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">6)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>{"1 1 1 1"}</pre></td></tr><tr><td class="statText"><pre>{"1 1 1 1"}</pre></td></tr><tr><td class="statText"><pre>{"1 1 1 1"}</pre></td></tr><tr><td class="statText"><pre>{"A A A A"}</pre></td></tr><tr><td class="statText"><pre>1000</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: { }</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">The sequence John is looking for is too long.</td></tr></table></td></tr></table></td></tr></table><hr><p>This problem statement is the exclusive and proprietary property of TopCoder, Inc.  Any unauthorized use or reproduction of this information without the prior written consent of TopCoder, Inc. is strictly prohibited.  (c)2010, TopCoder, Inc.  All rights reserved.  </p>
                      
                   </td>