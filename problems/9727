<td class="problemText" valign="middle" align="left">
                      
              		<table><tr><td colspan="2" class="statText"><h3>Problem Statement</h3></td></tr><tr><td class="statText">    </td><td class="statText"><p>A <i>regular expression</i> is a pattern describing how a particular string
should be formed. For the purposes of this problem, a regular expression consists
of <i>atoms</i>. Each atom is either a single lowercase letter (which matches
exactly one of that letter), or a single lowercase letter followed by an
asterisk ('*'), which matches zero or more of that letter. A string matches a
regular expression if it can be partitioned into substrings which match the
atoms of the regular expression in the same order. For example, the regular
expression <tt>ab*c*b</tt> is matched by the strings <tt>ab</tt>, <tt>abb</tt>,
<tt>acb</tt> and <tt>abbbcccb</tt>, but not by <tt>ba</tt>, <tt>accbb</tt> or
<tt>babcb</tt>.</p>

<p>You have a string <b>text</b> which ought to match the regular expression
<b>regex</b>. However, it may have been corrupted. Return the string S that
satisfies the following conditions.</p>
<ol><li>S has the same number of characters as <b>text</b>.</li>
<li>S matches <b>regex</b>.</li>
<li>The number of positions in which S differs from <b>text</b> is
minimal.</li>
<li>S is lexicographically smallest amongst strings that satisfy the other
conditions.</li>
</ol><p>If there is no string that satisfies the above conditions, return the empty
string.</p></td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Definition</h3></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText">Class:</td><td class="statText">ClosestRegex</td></tr><tr><td class="statText">Method:</td><td class="statText">closestString</td></tr><tr><td class="statText">Parameters:</td><td class="statText">String, String</td></tr><tr><td class="statText">Returns:</td><td class="statText">String</td></tr><tr><td class="statText">Method signature:</td><td class="statText">String closestString(String text, String regex)</td></tr><tr><td colspan="2" class="statText">(be sure your method is public)</td></tr></table></td></tr><tr><td class="statText">    </td></tr><tr><td class="statText"></td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Constraints</h3></td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText"><b>text</b> will contain between 1 and 50 characters, inclusive.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText"><b>text</b> will contain only lowercase letters ('a' - 'z').</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText"><b>regex</b> will contain between 1 and 50 characters, inclusive.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText"><b>regex</b> will contain only lowercase letters and '*'s.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText">The first character of <b>regex</b> will not be a '*'.</td></tr><tr><td align="center" valign="top" class="statText">-</td><td class="statText"><b>regex</b> will not contain two consecutive '*'s.</td></tr><tr><td colspan="2" class="statText"> </td></tr><tr><td colspan="2" class="statText"><h3>Examples</h3></td></tr><tr><td align="center" nowrap class="statText">0)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>"abcd"</pre></td></tr><tr><td class="statText"><pre>"bcdd"</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: "bcdd"</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">Here there are no asterisks, so only one string can match. 'a' must be changed to 'b', 'b' to 'c' and 'c' to 'd'.</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">1)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>"topcoder"</pre></td></tr><tr><td class="statText"><pre>"t*px*coa*de*"</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: "ttpcodee"</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">Changing the string to ttpcodee requires two changes.</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">2)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>"cmu"</pre></td></tr><tr><td class="statText"><pre>"c*m*fm*u*"</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: "cfu"</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">Any of fmu, cfu and cmf would require one change, but cfu is first lexicographically.</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">3)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>"aaaaacccc"</pre></td></tr><tr><td class="statText"><pre>"a*abc*"</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: "aaaaabccc"</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText"></td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap class="statText">4)</td><td class="statText"></td></tr><tr><td class="statText">    </td><td class="statText"><table><tr><td class="statText"><table><tr><td class="statText"><pre>"short"</pre></td></tr><tr><td class="statText"><pre>"lo*ts*of*let*ter*s"</pre></td></tr></table></td></tr><tr><td class="statText"><pre>Returns: ""</pre></td></tr><tr><td class="statText"><table><tr><td colspan="2" class="statText">No 5-letter string matches the regex.</td></tr></table></td></tr></table></td></tr></table><hr><p>This problem statement is the exclusive and proprietary property of TopCoder, Inc.  Any unauthorized use or reproduction of this information without the prior written consent of TopCoder, Inc. is strictly prohibited.  (c)2010, TopCoder, Inc.  All rights reserved.  </p>
                      
                   </td>